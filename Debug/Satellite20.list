
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b6bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0801b850  0801b850  0002b850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c330  0801c330  000303a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c330  0801c330  0002c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c338  0801c338  000303a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c338  0801c338  0002c338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c33c  0801c33c  0002c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801c340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000533c  200003a8  0801c6e8  000303a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200056e4  0801c6e8  000356e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000476a3  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000072f9  00000000  00000000  00077a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002808  00000000  00000000  0007ed78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002538  00000000  00000000  00081580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c807  00000000  00000000  00083ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028583  00000000  00000000  000b02bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7e7e  00000000  00000000  000d8842  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b06c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcd4  00000000  00000000  001b073c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b834 	.word	0x0801b834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0801b834 	.word	0x0801b834

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 800105c:	b40f      	push	{r0, r1, r2, r3}
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
	if (usbPresent)
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <println+0xac>)
 8001066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800106a:	2b03      	cmp	r3, #3
 800106c:	d143      	bne.n	80010f6 <println+0x9a>
	{
		va_list argptr;
		va_start(argptr, format);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	69b9      	ldr	r1, [r7, #24]
 8001078:	4824      	ldr	r0, [pc, #144]	; (800110c <println+0xb0>)
 800107a:	f015 fdb3 	bl	8016be4 <vsiprintf>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <println+0xb4>)
 8001084:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <println+0xb4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <println+0xb0>)
 800108c:	210d      	movs	r1, #13
 800108e:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <println+0xb4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a1d      	ldr	r2, [pc, #116]	; (800110c <println+0xb0>)
 8001098:	210a      	movs	r1, #10
 800109a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <println+0xb4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	4a1a      	ldr	r2, [pc, #104]	; (800110c <println+0xb0>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <println+0xb4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3303      	adds	r3, #3
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <println+0xb4>)
 80010b0:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 80010b2:	f7ff ffc9 	bl	8001048 <micros>
 80010b6:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <println+0xb4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	3346      	adds	r3, #70	; 0x46
 80010c6:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010c8:	e009      	b.n	80010de <println+0x82>
		{
			if (micros() - printStart > timeout)
 80010ca:	f7ff ffbd 	bl	8001048 <micros>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d201      	bcs.n	80010de <println+0x82>
			{
				return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00c      	b.n	80010f8 <println+0x9c>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <println+0xb4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <println+0xb0>)
 80010e8:	f013 fa80 	bl	80145ec <CDC_Transmit_FS>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d0eb      	beq.n	80010ca <println+0x6e>
			}
		}
		return true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <println+0x9c>
	}
	return false;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001102:	b004      	add	sp, #16
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20001a3c 	.word	0x20001a3c
 800110c:	20000bd0 	.word	0x20000bd0
 8001110:	20000bcc 	.word	0x20000bcc

08001114 <setMotors>:
#include "main.h"
#include "config.h"
#include "run.h"

void setMotors(float dutyL, float dutyR)
{
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	b085      	sub	sp, #20
 8001118:	af02      	add	r7, sp, #8
 800111a:	ed87 0a01 	vstr	s0, [r7, #4]
 800111e:	edc7 0a00 	vstr	s1, [r7]
	if (motorsRunning)
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <setMotors+0x10c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d076      	beq.n	8001218 <setMotors+0x104>
	{
		println("[MOT] %f %f", dutyL, dutyR);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fa1c 	bl	8000568 <__aeabi_f2d>
 8001130:	4605      	mov	r5, r0
 8001132:	460e      	mov	r6, r1
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f7ff fa17 	bl	8000568 <__aeabi_f2d>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	e9cd 3400 	strd	r3, r4, [sp]
 8001142:	462a      	mov	r2, r5
 8001144:	4633      	mov	r3, r6
 8001146:	4837      	ldr	r0, [pc, #220]	; (8001224 <setMotors+0x110>)
 8001148:	f7ff ff88 	bl	800105c <println>
		if (dutyL > 1) dutyL = 1;
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	dd03      	ble.n	8001166 <setMotors+0x52>
 800115e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	e009      	b.n	800117a <setMotors+0x66>
		else if (dutyL < 0) dutyL = 0;
 8001166:	edd7 7a01 	vldr	s15, [r7, #4]
 800116a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d502      	bpl.n	800117a <setMotors+0x66>
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
		if (dutyR > 1) dutyR = 1;
 800117a:	edd7 7a00 	vldr	s15, [r7]
 800117e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd03      	ble.n	8001194 <setMotors+0x80>
 800118c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	e009      	b.n	80011a8 <setMotors+0x94>
		else if (dutyR < 0) dutyR = 0;
 8001194:	edd7 7a00 	vldr	s15, [r7]
 8001198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d502      	bpl.n	80011a8 <setMotors+0x94>
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]

		//println("[MOT] %.3f %.3f", dutyL, dutyR);

		TIM3->CCR2 = (uint32_t)((float)TIM3->ARR * (1 - dutyL));
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <setMotors+0x114>)
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <setMotors+0x114>)
 80011c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ca:	ee17 2a90 	vmov	r2, s15
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = (uint32_t)((float)TIM3->ARR * (1 - dutyR));
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <setMotors+0x114>)
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e0:	edd7 7a00 	vldr	s15, [r7]
 80011e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <setMotors+0x114>)
 80011ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f2:	ee17 2a90 	vmov	r2, s15
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CNT = 0;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <setMotors+0x114>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <setMotors+0x118>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24

		Common.mot_l = dutyL;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <setMotors+0x11c>)
 8001206:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
		Common.mot_r = dutyR;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <setMotors+0x11c>)
 8001210:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	601a      	str	r2, [r3, #0]
	}
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001220:	200003c4 	.word	0x200003c4
 8001224:	0801b850 	.word	0x0801b850
 8001228:	40000400 	.word	0x40000400
 800122c:	40000800 	.word	0x40000800
 8001230:	200003c8 	.word	0x200003c8

08001234 <haltMotors>:

void haltMotors(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM3->CCR2 = TIM3->ARR;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <haltMotors+0x44>)
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <haltMotors+0x44>)
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = TIM3->ARR;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <haltMotors+0x44>)
 8001242:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <haltMotors+0x44>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CNT = 0;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <haltMotors+0x44>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <haltMotors+0x48>)
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

	Common.mot_l = 0;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <haltMotors+0x4c>)
 8001256:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
	Common.mot_r = 0;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <haltMotors+0x4c>)
 8001262:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40000400 	.word	0x40000400
 800127c:	40000800 	.word	0x40000800
 8001280:	200003c8 	.word	0x200003c8

08001284 <enableMotors>:

void enableMotors(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	if (!motorsRunning)
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <enableMotors+0x70>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f083 0301 	eor.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d02b      	beq.n	80012ee <enableMotors+0x6a>
	{
		motorsRunning = true;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <enableMotors+0x70>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		writePin(PH_L, MOTOR_L_DIR);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a2:	4815      	ldr	r0, [pc, #84]	; (80012f8 <enableMotors+0x74>)
 80012a4:	f005 ff58 	bl	8007158 <HAL_GPIO_WritePin>
		writePin(PH_R, MOTOR_R_DIR);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ae:	4812      	ldr	r0, [pc, #72]	; (80012f8 <enableMotors+0x74>)
 80012b0:	f005 ff52 	bl	8007158 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_2);
 80012b4:	f012 fa66 	bl	8013784 <Get_TIM3_Instance>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2104      	movs	r1, #4
 80012bc:	4618      	mov	r0, r3
 80012be:	f00a fda3 	bl	800be08 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 80012c2:	f012 fa5f 	bl	8013784 <Get_TIM3_Instance>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2108      	movs	r1, #8
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00a fd9c 	bl	800be08 <HAL_TIM_PWM_Start>

		haltMotors();
 80012d0:	f7ff ffb0 	bl	8001234 <haltMotors>

		writePin(MOT_STBY, LOW);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2104      	movs	r1, #4
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <enableMotors+0x74>)
 80012da:	f005 ff3d 	bl	8007158 <HAL_GPIO_WritePin>
		delay(10);
 80012de:	200a      	movs	r0, #10
 80012e0:	f005 f8bc 	bl	800645c <HAL_Delay>
		writePin(MOT_STBY, HIGH);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2104      	movs	r1, #4
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <enableMotors+0x74>)
 80012ea:	f005 ff35 	bl	8007158 <HAL_GPIO_WritePin>
	}
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003c4 	.word	0x200003c4
 80012f8:	40020400 	.word	0x40020400

080012fc <disableMotors>:

void disableMotors(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	if (motorsRunning || false)
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <disableMotors+0x40>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d017      	beq.n	8001338 <disableMotors+0x3c>
	{
		writePin(MOT_STBY, LOW);
 8001308:	2200      	movs	r2, #0
 800130a:	2104      	movs	r1, #4
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <disableMotors+0x44>)
 800130e:	f005 ff23 	bl	8007158 <HAL_GPIO_WritePin>
		haltMotors();
 8001312:	f7ff ff8f 	bl	8001234 <haltMotors>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_2);
 8001316:	f012 fa35 	bl	8013784 <Get_TIM3_Instance>
 800131a:	4603      	mov	r3, r0
 800131c:	2104      	movs	r1, #4
 800131e:	4618      	mov	r0, r3
 8001320:	f00a fdb0 	bl	800be84 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8001324:	f012 fa2e 	bl	8013784 <Get_TIM3_Instance>
 8001328:	4603      	mov	r3, r0
 800132a:	2108      	movs	r1, #8
 800132c:	4618      	mov	r0, r3
 800132e:	f00a fda9 	bl	800be84 <HAL_TIM_PWM_Stop>
		motorsRunning = false;
 8001332:	4b02      	ldr	r3, [pc, #8]	; (800133c <disableMotors+0x40>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	}
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200003c4 	.word	0x200003c4
 8001340:	40020400 	.word	0x40020400

08001344 <SD_deinit>:
	}

	return FR_OK;
}
FRESULT SD_deinit()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	//if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
	f_mount(0, SDPath, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	4903      	ldr	r1, [pc, #12]	; (8001358 <SD_deinit+0x14>)
 800134c:	2000      	movs	r0, #0
 800134e:	f010 f89d 	bl	801148c <f_mount>

	return FR_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20001d0c 	.word	0x20001d0c

0800135c <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <millis+0x1c>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 10);
 8001388:	1cf9      	adds	r1, r7, #3
 800138a:	230a      	movs	r3, #10
 800138c:	2201      	movs	r2, #1
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f00a f933 	bl	800b5fa <HAL_SPI_Transmit>
	//while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a18      	ldr	r0, [r3, #32]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8a5b      	ldrh	r3, [r3, #18]
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	f005 fece 	bl	8007158 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff ffd6 	bl	800137c <SX1278_write>
	SX1278_write(inst->spi, cmd);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	78ba      	ldrb	r2, [r7, #2]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ffcf 	bl	800137c <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a18      	ldr	r0, [r3, #32]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	8a5b      	ldrh	r3, [r3, #18]
 80013e6:	2201      	movs	r2, #1
 80013e8:	4619      	mov	r1, r3
 80013ea:	f005 feb5 	bl	8007158 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	461a      	mov	r2, r3
 8001402:	460b      	mov	r3, r1
 8001404:	72fb      	strb	r3, [r7, #11]
 8001406:	4613      	mov	r3, r2
 8001408:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 800140a:	7abb      	ldrb	r3, [r7, #10]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d92d      	bls.n	800146c <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a18      	ldr	r0, [r3, #32]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8a5b      	ldrh	r3, [r3, #18]
 8001418:	2200      	movs	r2, #0
 800141a:	4619      	mov	r1, r3
 800141c:	f005 fe9c 	bl	8007158 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001424:	7afb      	ldrb	r3, [r7, #11]
 8001426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff ffa4 	bl	800137c <SX1278_write>
	for (i = 0; i < len; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
 8001438:	e00b      	b.n	8001452 <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff ff98 	bl	800137c <SX1278_write>
	for (i = 0; i < len; i++)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	3301      	adds	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	7dfa      	ldrb	r2, [r7, #23]
 8001454:	7abb      	ldrb	r3, [r7, #10]
 8001456:	429a      	cmp	r2, r3
 8001458:	d3ef      	bcc.n	800143a <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a18      	ldr	r0, [r3, #32]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8a5b      	ldrh	r3, [r3, #18]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f005 fe77 	bl	8007158 <HAL_GPIO_WritePin>
 800146a:	e000      	b.n	800146e <SX1278_command_burst+0x78>
	if (len <= 1) return;
 800146c:	bf00      	nop
}
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 10);
 8001484:	f107 020e 	add.w	r2, r7, #14
 8001488:	f107 010f 	add.w	r1, r7, #15
 800148c:	230a      	movs	r3, #10
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f00a f9e5 	bl	800b862 <HAL_SPI_TransmitReceive>
	//while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);

	return rxByte;
 8001498:	7bbb      	ldrb	r3, [r7, #14]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a18      	ldr	r0, [r3, #32]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	8a5b      	ldrh	r3, [r3, #18]
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	f005 fe4d 	bl	8007158 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff58 	bl	800137c <SX1278_write>
	recv = SX1278_read(inst->spi);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffcf 	bl	8001474 <SX1278_read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a18      	ldr	r0, [r3, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8a5b      	ldrh	r3, [r3, #18]
 80014e2:	2201      	movs	r2, #1
 80014e4:	4619      	mov	r1, r3
 80014e6:	f005 fe37 	bl	8007158 <HAL_GPIO_WritePin>

	return recv;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	461a      	mov	r2, r3
 8001500:	460b      	mov	r3, r1
 8001502:	72fb      	strb	r3, [r7, #11]
 8001504:	4613      	mov	r3, r2
 8001506:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001508:	7abb      	ldrb	r3, [r7, #10]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d92b      	bls.n	8001566 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a18      	ldr	r0, [r3, #32]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8a5b      	ldrh	r3, [r3, #18]
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	f005 fe1d 	bl	8007158 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	7afa      	ldrb	r2, [r7, #11]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff28 	bl	800137c <SX1278_write>
	for (i = 0; i < len; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
 8001530:	e00c      	b.n	800154c <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	18d4      	adds	r4, r2, r3
 800153c:	4608      	mov	r0, r1
 800153e:	f7ff ff99 	bl	8001474 <SX1278_read>
 8001542:	4603      	mov	r3, r0
 8001544:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	3301      	adds	r3, #1
 800154a:	75fb      	strb	r3, [r7, #23]
 800154c:	7dfa      	ldrb	r2, [r7, #23]
 800154e:	7abb      	ldrb	r3, [r7, #10]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3ee      	bcc.n	8001532 <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a18      	ldr	r0, [r3, #32]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8a5b      	ldrh	r3, [r3, #18]
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f005 fdfa 	bl	8007158 <HAL_GPIO_WritePin>
 8001564:	e000      	b.n	8001568 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 8001566:	bf00      	nop
}
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
	...

08001570 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	SX1278_reset(inst);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fb02 	bl	8001b8a <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 8001586:	2142      	movs	r1, #66	; 0x42
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff8a 	bl	80014a2 <SX1278_read_address>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b12      	cmp	r3, #18
 8001596:	d001      	beq.n	800159c <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001598:	2300      	movs	r3, #0
 800159a:	e0d7      	b.n	800174c <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fad4 	bl	8001b4a <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 80015a2:	2288      	movs	r2, #136	; 0x88
 80015a4:	2101      	movs	r1, #1
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fef8 	bl	800139c <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f04f 0400 	mov.w	r4, #0
 80015b4:	4a67      	ldr	r2, [pc, #412]	; (8001754 <SX1278_init+0x1e4>)
 80015b6:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 80015ba:	4b66      	ldr	r3, [pc, #408]	; (8001754 <SX1278_init+0x1e4>)
 80015bc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f04f 0400 	mov.w	r4, #0
 80015c8:	0394      	lsls	r4, r2, #14
 80015ca:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 80015ce:	038b      	lsls	r3, r1, #14
 80015d0:	4a60      	ldr	r2, [pc, #384]	; (8001754 <SX1278_init+0x1e4>)
 80015d2:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 80015d6:	4b5f      	ldr	r3, [pc, #380]	; (8001754 <SX1278_init+0x1e4>)
 80015d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015dc:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <SX1278_init+0x1e8>)
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	f7ff fbb1 	bl	8000d48 <__aeabi_uldivmod>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <SX1278_init+0x1e4>)
 80015ec:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <SX1278_init+0x1ec>)
 80015f2:	4a58      	ldr	r2, [pc, #352]	; (8001754 <SX1278_init+0x1e4>)
 80015f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f8:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <SX1278_init+0x1ec>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	461a      	mov	r2, r3
 8001602:	2106      	movs	r1, #6
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fec9 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <SX1278_init+0x1ec>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	461a      	mov	r2, r3
 8001610:	2107      	movs	r1, #7
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fec2 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <SX1278_init+0x1ec>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	2108      	movs	r1, #8
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff febb 	bl	800139c <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	2109      	movs	r1, #9
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff feb4 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 8001634:	222b      	movs	r2, #43	; 0x2b
 8001636:	210b      	movs	r1, #11
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff feaf 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 800163e:	2223      	movs	r2, #35	; 0x23
 8001640:	210c      	movs	r1, #12
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff feaa 	bl	800139c <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 8001648:	2287      	movs	r2, #135	; 0x87
 800164a:	214d      	movs	r1, #77	; 0x4d
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fea5 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 8001652:	2200      	movs	r2, #0
 8001654:	2124      	movs	r1, #36	; 0x24
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fea0 	bl	800139c <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	795b      	ldrb	r3, [r3, #5]
 8001660:	2b06      	cmp	r3, #6
 8001662:	d139      	bne.n	80016d8 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	79db      	ldrb	r3, [r3, #7]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	799b      	ldrb	r3, [r3, #6]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4413      	add	r3, r2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	211d      	movs	r1, #29
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe8b 	bl	800139c <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	795b      	ldrb	r3, [r3, #5]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	b2da      	uxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4413      	add	r3, r2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	211e      	movs	r1, #30
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fe7c 	bl	800139c <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 80016a4:	2131      	movs	r1, #49	; 0x31
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fefb 	bl	80014a2 <SX1278_read_address>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	f023 0307 	bic.w	r3, r3, #7
 80016b6:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	f043 0305 	orr.w	r3, r3, #5
 80016be:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	461a      	mov	r2, r3
 80016c4:	2131      	movs	r1, #49	; 0x31
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe68 	bl	800139c <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 80016cc:	220c      	movs	r2, #12
 80016ce:	2137      	movs	r1, #55	; 0x37
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fe63 	bl	800139c <SX1278_command>
 80016d6:	e01d      	b.n	8001714 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	79db      	ldrb	r3, [r3, #7]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	211d      	movs	r1, #29
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fe53 	bl	800139c <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7a1b      	ldrb	r3, [r3, #8]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	211e      	movs	r1, #30
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fe44 	bl	800139c <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 8001714:	2264      	movs	r2, #100	; 0x64
 8001716:	211f      	movs	r1, #31
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fe3f 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 800171e:	2200      	movs	r2, #0
 8001720:	2120      	movs	r1, #32
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe3a 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 8001728:	220c      	movs	r2, #12
 800172a:	2121      	movs	r1, #33	; 0x21
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fe35 	bl	800139c <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 8001732:	2201      	movs	r2, #1
 8001734:	2141      	movs	r1, #65	; 0x41
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fe30 	bl	800139c <SX1278_command>

	SX1278_standby(inst);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fa14 	bl	8001b6a <SX1278_standby>

	inst->active = true;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
	return true;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	20000dd0 	.word	0x20000dd0
 8001758:	000f4240 	.word	0x000f4240
 800175c:	20000dd8 	.word	0x20000dd8

08001760 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d12b      	bne.n	80017ce <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f969 	bl	8001a56 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	461a      	mov	r2, r3
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 f86c 	bl	8001868 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 f898 	bl	80018c6 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e011      	b.n	80017d0 <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80017ac:	bf00      	nop
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8a1b      	ldrh	r3, [r3, #16]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f005 fcb5 	bl	8007128 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f4      	beq.n	80017ae <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 f894 	bl	80018f2 <SX1278_tx_finish>
 80017ca:	4603      	mov	r3, r0
 80017cc:	e000      	b.n	80017d0 <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 80017ce:	2300      	movs	r3, #0
	}
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7b1b      	ldrb	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d13a      	bne.n	800185e <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f969 	bl	8001ac0 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00a      	beq.n	800180e <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			inst->rxStart = millis();
 8001800:	f7ff fdac 	bl	800135c <millis>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 800180a:	2301      	movs	r3, #1
 800180c:	e028      	b.n	8001860 <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 800180e:	f7ff fda5 	bl	800135c <millis>
 8001812:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001814:	e011      	b.n	800183a <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 8001816:	f7ff fda1 	bl	800135c <millis>
 800181a:	4602      	mov	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	8952      	ldrh	r2, [r2, #10]
 8001824:	4293      	cmp	r3, r2
 8001826:	d308      	bcc.n	800183a <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f89a 	bl	8001962 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 8001836:	2300      	movs	r3, #0
 8001838:	e012      	b.n	8001860 <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f005 fc6f 	bl	8007128 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0e2      	beq.n	8001816 <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f886 	bl	8001962 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800185c:	e000      	b.n	8001860 <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 800185e:	2300      	movs	r3, #0
	}
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	461a      	mov	r2, r3
 800187a:	2122      	movs	r1, #34	; 0x22
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fd8d 	bl	800139c <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	2100      	movs	r1, #0
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fdb4 	bl	80013f6 <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
 8001892:	e00c      	b.n	80018ae <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	441a      	add	r2, r3
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	7811      	ldrb	r1, [r2, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	460a      	mov	r2, r1
 80018a4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	for (l = 0; l < length; l++)
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
 80018aa:	3301      	adds	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
 80018ae:	7dfa      	ldrb	r2, [r7, #23]
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ee      	bcc.n	8001894 <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 80018ce:	228b      	movs	r2, #139	; 0x8b
 80018d0:	2101      	movs	r1, #1
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fd62 	bl	800139c <SX1278_command>
	inst->rxStart = millis();	// Cringy but forces interrupt if something goes wrong
 80018d8:	f7ff fd40 	bl	800135c <millis>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
	inst->pendingIRQ = true;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80018fa:	2112      	movs	r1, #18
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fdd0 	bl	80014a2 <SX1278_read_address>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	bfcc      	ite	gt
 800191a:	2301      	movgt	r3, #1
 800191c:	2300      	movle	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	if (inst->txDone) inst->newTxData = true;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <SX1278_tx_finish+0x46>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inst->txCount++;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800193c:	3301      	adds	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	87da      	strh	r2, [r3, #62]	; 0x3e
	inst->pendingIRQ = false;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	SX1278_clearLoRaIrq(inst);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9ff 	bl	8001d50 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f909 	bl	8001b6a <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f9ad 	bl	8001cca <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3348      	adds	r3, #72	; 0x48
 8001974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f013 fae3 	bl	8014f46 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001980:	2110      	movs	r1, #16
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fd8d 	bl	80014a2 <SX1278_read_address>
 8001988:	4603      	mov	r3, r0
 800198a:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	461a      	mov	r2, r3
 8001990:	210d      	movs	r1, #13
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fd02 	bl	800139c <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d104      	bne.n	80019aa <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e005      	b.n	80019b6 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 80019aa:	2113      	movs	r1, #19
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fd78 	bl	80014a2 <SX1278_read_address>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2100      	movs	r1, #0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fd97 	bl	80014f4 <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && (!inst->crcError || LR_VALIDATE_CRCERROR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d011      	beq.n	80019f4 <SX1278_rx_get_packet+0x92>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <SX1278_rx_get_packet+0x92>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SX1278_rx_get_packet+0x92>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <SX1278_rx_get_packet+0x94>
 80019f4:	2300      	movs	r3, #0
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (inst->newPacket) { inst->newRxData = true; inst->rxCount++; }
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <SX1278_rx_get_packet+0xbe>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
	inst->rssi = SX1278_getRSSI(inst);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9a2 	bl	8001d6a <SX1278_getRSSI>
 8001a26:	4602      	mov	r2, r0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	SX1278_clearLoRaIrq(inst);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f98b 	bl	8001d50 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f895 	bl	8001b6a <SX1278_standby>


	//sprintf(inst->lastPacket, (char*)inst->rxBuffer);


	if (inst->rxTimeout)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a46:	2b00      	cmp	r3, #0
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f976 	bl	8001d50 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001a64:	2241      	movs	r2, #65	; 0x41
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fc97 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a6e:	22f7      	movs	r2, #247	; 0xf7
 8001a70:	2111      	movs	r1, #17
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fc92 	bl	800139c <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a78:	210e      	movs	r1, #14
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fd11 	bl	80014a2 <SX1278_read_address>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	461a      	mov	r2, r3
 8001a88:	210d      	movs	r1, #13
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fc86 	bl	800139c <SX1278_command>

	inst->txLen = 0;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->txDone = false;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	731a      	strb	r2, [r3, #12]
	inst->rxTimeout = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxStart = millis();
 8001aae:	f7ff fc55 	bl	800135c <millis>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f84e 	bl	8001b6a <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f93e 	bl	8001d50 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fc5f 	bl	800139c <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001ade:	221f      	movs	r2, #31
 8001ae0:	2111      	movs	r1, #17
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fc5a 	bl	800139c <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001ae8:	210f      	movs	r1, #15
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fcd9 	bl	80014a2 <SX1278_read_address>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	461a      	mov	r2, r3
 8001af8:	210d      	movs	r1, #13
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fc4e 	bl	800139c <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b00:	228d      	movs	r2, #141	; 0x8d
 8001b02:	2101      	movs	r1, #1
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fc49 	bl	800139c <SX1278_command>

	inst->crcError = false;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->newPacket = false;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	731a      	strb	r2, [r3, #12]
	inst->rxTimeout = false;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxStart = millis();
 8001b38:	f7ff fc10 	bl	800135c <millis>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
	//println("[LoRa] Finished setting RX mode.");
}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b52:	2208      	movs	r2, #8
 8001b54:	2101      	movs	r1, #1
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fc20 	bl	800139c <SX1278_command>
	inst->mode = SLEEP;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	731a      	strb	r2, [r3, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001b72:	2209      	movs	r2, #9
 8001b74:	2101      	movs	r1, #1
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fc10 	bl	800139c <SX1278_command>
	inst->mode = STANDBY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	731a      	strb	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	inst->txLen = 0;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inst->rxLen = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inst->mode = SLEEP;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, HIGH);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a18      	ldr	r0, [r3, #32]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8a5b      	ldrh	r3, [r3, #18]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	f005 fab5 	bl	8007158 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, LOW);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6998      	ldr	r0, [r3, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	89db      	ldrh	r3, [r3, #14]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f005 faad 	bl	8007158 <HAL_GPIO_WritePin>
	delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f004 fc2c 	bl	800645c <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, HIGH);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6998      	ldr	r0, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	89db      	ldrh	r3, [r3, #14]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f005 faa2 	bl	8007158 <HAL_GPIO_WritePin>
	delay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f004 fc21 	bl	800645c <HAL_Delay>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01e      	beq.n	8001c72 <SX1278_dio0_IRQ+0x50>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7b1b      	ldrb	r3, [r3, #12]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d104      	bne.n	8001c50 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fe53 	bl	80018f2 <SX1278_tx_finish>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	e011      	b.n	8001c74 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7b1b      	ldrb	r3, [r3, #12]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d104      	bne.n	8001c62 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fe82 	bl	8001962 <SX1278_rx_get_packet>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	e008      	b.n	8001c74 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f874 	bl	8001d50 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff7e 	bl	8001b6a <SX1278_standby>
			return false;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001c72:	2300      	movs	r3, #0
	}
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	if (((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ))
 8001c84:	f7ff fb6a 	bl	800135c <millis>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	8952      	ldrh	r2, [r2, #10]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d313      	bcc.n	8001cc0 <SX1278_intTimeout+0x44>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7b1b      	ldrb	r3, [r3, #12]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d10f      	bne.n	8001cc0 <SX1278_intTimeout+0x44>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <SX1278_intTimeout+0x44>
	{
		//println("[RADIO] RX timeout");
		inst->rxTimeout = true;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001cb2:	f7ff fb53 	bl	800135c <millis>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40

		return true;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <SX1278_intTimeout+0x46>
	}
	return false;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001cd2:	2112      	movs	r1, #18
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fbe4 	bl	80014a2 <SX1278_read_address>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bfcc      	ite	gt
 8001cf2:	2301      	movgt	r3, #1
 8001cf4:	2300      	movle	r3, #0
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dc07      	bgt.n	8001d1c <SX1278_update_IRQ_status+0x52>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d12:	f083 0301 	eor.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SX1278_update_IRQ_status+0x56>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <SX1278_update_IRQ_status+0x58>
 8001d20:	2300      	movs	r3, #0
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bfcc      	ite	gt
 8001d3c:	2301      	movgt	r3, #1
 8001d3e:	2300      	movle	r3, #0
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	2112      	movs	r1, #18
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fb1d 	bl	800139c <SX1278_command>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001d72:	211a      	movs	r1, #26
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fb94 	bl	80014a2 <SX1278_read_address>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	3ba4      	subs	r3, #164	; 0xa4
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <BMP280_readBytes>:
#include "bmp280.h"
#include "run.h"
#include "config.h"

static bool BMP280_readBytes(BMP280* inst, uint8_t mem_addr, uint8_t* data, uint8_t len)
{
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b089      	sub	sp, #36	; 0x24
 8001d8a:	af04      	add	r7, sp, #16
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	461a      	mov	r2, r3
 8001d92:	460b      	mov	r3, r1
 8001d94:	72fb      	strb	r3, [r7, #11]
 8001d96:	4613      	mov	r3, r2
 8001d98:	72bb      	strb	r3, [r7, #10]
	return (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, len, 5) == HAL_OK);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8899      	ldrh	r1, [r3, #4]
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	b29c      	uxth	r4, r3
 8001da6:	7abb      	ldrb	r3, [r7, #10]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2205      	movs	r2, #5
 8001dac:	9202      	str	r2, [sp, #8]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	4622      	mov	r2, r4
 8001db8:	f005 fc24 	bl	8007604 <HAL_I2C_Mem_Read>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}

08001dd0 <BMP280_writeByte>:
static bool BMP280_writeByte(BMP280* inst, uint8_t mem_addr, uint8_t data)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af04      	add	r7, sp, #16
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	70bb      	strb	r3, [r7, #2]
	return (HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 5) == HAL_OK);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	8899      	ldrh	r1, [r3, #4]
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2305      	movs	r3, #5
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2301      	movs	r3, #1
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	1cbb      	adds	r3, r7, #2
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f005 fb09 	bl	8007410 <HAL_I2C_Mem_Write>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <BMP280_read16>:
static bool BMP280_read16(BMP280* inst, uint8_t mem_addr, uint16_t* data)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08a      	sub	sp, #40	; 0x28
 8001e16:	af04      	add	r7, sp, #16
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff[2];

	if (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, rx_buff, 2, 5) == HAL_OK)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8899      	ldrh	r1, [r3, #4]
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	2305      	movs	r3, #5
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2302      	movs	r3, #2
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f005 fbe2 	bl	8007604 <HAL_I2C_Mem_Read>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <BMP280_read16+0x4c>
	{
		*data = (uint16_t)((rx_buff[1] << 8) | rx_buff[0]);
 8001e46:	7d7b      	ldrb	r3, [r7, #21]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	7d3b      	ldrb	r3, [r7, #20]
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	801a      	strh	r2, [r3, #0]
		return true;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <BMP280_read16+0x4e>
	}
	else return false;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <read_calibration_data>:

static bool read_calibration_data(BMP280* inst)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	return(BMP280_read16(inst, 0x88, &inst->dig_T1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	331e      	adds	r3, #30
 8001e74:	461a      	mov	r2, r3
 8001e76:	2188      	movs	r1, #136	; 0x88
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffca 	bl	8001e12 <BMP280_read16>
 8001e7e:	4603      	mov	r3, r0
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d06f      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8a, (uint16_t*) &inst->dig_T2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3320      	adds	r3, #32
 8001e88:	461a      	mov	r2, r3
 8001e8a:	218a      	movs	r1, #138	; 0x8a
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffc0 	bl	8001e12 <BMP280_read16>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d065      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8c, (uint16_t*) &inst->dig_T3)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3322      	adds	r3, #34	; 0x22
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	218c      	movs	r1, #140	; 0x8c
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffb6 	bl	8001e12 <BMP280_read16>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05b      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8e, &inst->dig_P1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3324      	adds	r3, #36	; 0x24
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	218e      	movs	r1, #142	; 0x8e
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffac 	bl	8001e12 <BMP280_read16>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d051      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x90, (uint16_t*) &inst->dig_P2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3326      	adds	r3, #38	; 0x26
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2190      	movs	r1, #144	; 0x90
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffa2 	bl	8001e12 <BMP280_read16>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d047      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x92, (uint16_t*) &inst->dig_P3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3328      	adds	r3, #40	; 0x28
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2192      	movs	r1, #146	; 0x92
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff98 	bl	8001e12 <BMP280_read16>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03d      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	332a      	adds	r3, #42	; 0x2a
 8001eec:	461a      	mov	r2, r3
 8001eee:	2194      	movs	r1, #148	; 0x94
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff8e 	bl	8001e12 <BMP280_read16>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d033      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	332c      	adds	r3, #44	; 0x2c
 8001f00:	461a      	mov	r2, r3
 8001f02:	2196      	movs	r1, #150	; 0x96
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff84 	bl	8001e12 <BMP280_read16>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d029      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	332e      	adds	r3, #46	; 0x2e
 8001f14:	461a      	mov	r2, r3
 8001f16:	2198      	movs	r1, #152	; 0x98
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff7a 	bl	8001e12 <BMP280_read16>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01f      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3330      	adds	r3, #48	; 0x30
 8001f28:	461a      	mov	r2, r3
 8001f2a:	219a      	movs	r1, #154	; 0x9a
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff70 	bl	8001e12 <BMP280_read16>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d015      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3332      	adds	r3, #50	; 0x32
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	219c      	movs	r1, #156	; 0x9c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff66 	bl	8001e12 <BMP280_read16>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00b      	beq.n	8001f64 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3334      	adds	r3, #52	; 0x34
 8001f50:	461a      	mov	r2, r3
 8001f52:	219e      	movs	r1, #158	; 0x9e
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff5c 	bl	8001e12 <BMP280_read16>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <read_calibration_data+0xfc>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <read_calibration_data+0xfe>
 8001f64:	2300      	movs	r3, #0
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <compensate_temperature>:

static int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp, int32_t *fine_temp)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	10da      	asrs	r2, r3, #3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8bdb      	ldrh	r3, [r3, #30]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001f96:	12db      	asrs	r3, r3, #11
 8001f98:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	111b      	asrs	r3, r3, #4
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	8bd2      	ldrh	r2, [r2, #30]
 8001fa2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	1112      	asrs	r2, r2, #4
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	8bc9      	ldrh	r1, [r1, #30]
 8001fac:	1a52      	subs	r2, r2, r1
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001fbe:	139b      	asrs	r3, r3, #14
 8001fc0:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	441a      	add	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3380      	adds	r3, #128	; 0x80
 8001fd8:	121b      	asrs	r3, r3, #8
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <compensate_pressure>:

static uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press, int32_t fine_temp)
{
 8001fe6:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001ffc:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002000:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002004:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	fb02 f203 	mul.w	r2, r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	6a39      	ldr	r1, [r7, #32]
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	441a      	add	r2, r3
 800201a:	6a39      	ldr	r1, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	fba1 3403 	umull	r3, r4, r1, r3
 8002022:	4422      	add	r2, r4
 8002024:	4614      	mov	r4, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800202c:	b211      	sxth	r1, r2
 800202e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002032:	fb01 f504 	mul.w	r5, r1, r4
 8002036:	fb03 f002 	mul.w	r0, r3, r2
 800203a:	4428      	add	r0, r5
 800203c:	fba3 3401 	umull	r3, r4, r3, r1
 8002040:	1902      	adds	r2, r0, r4
 8002042:	4614      	mov	r4, r2
 8002044:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002048:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002052:	b21b      	sxth	r3, r3
 8002054:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	fb04 f102 	mul.w	r1, r4, r2
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	fb03 f202 	mul.w	r2, r3, r2
 8002064:	1888      	adds	r0, r1, r2
 8002066:	6a3a      	ldr	r2, [r7, #32]
 8002068:	fba2 1203 	umull	r1, r2, r2, r3
 800206c:	1883      	adds	r3, r0, r2
 800206e:	461a      	mov	r2, r3
 8002070:	f04f 0500 	mov.w	r5, #0
 8002074:	f04f 0600 	mov.w	r6, #0
 8002078:	0456      	lsls	r6, r2, #17
 800207a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800207e:	044d      	lsls	r5, r1, #17
 8002080:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002084:	186b      	adds	r3, r5, r1
 8002086:	eb46 0402 	adc.w	r4, r6, r2
 800208a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002094:	b219      	sxth	r1, r3
 8002096:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800209a:	f04f 0500 	mov.w	r5, #0
 800209e:	f04f 0600 	mov.w	r6, #0
 80020a2:	00ce      	lsls	r6, r1, #3
 80020a4:	2500      	movs	r5, #0
 80020a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020aa:	186b      	adds	r3, r5, r1
 80020ac:	eb46 0402 	adc.w	r4, r6, r2
 80020b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	6a3a      	ldr	r2, [r7, #32]
 80020b8:	fb02 f203 	mul.w	r2, r2, r3
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	6a39      	ldr	r1, [r7, #32]
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	441a      	add	r2, r3
 80020c6:	6a39      	ldr	r1, [r7, #32]
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	fba1 3403 	umull	r3, r4, r1, r3
 80020ce:	4422      	add	r2, r4
 80020d0:	4614      	mov	r4, r2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 80020d8:	b211      	sxth	r1, r2
 80020da:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020de:	fb01 f504 	mul.w	r5, r1, r4
 80020e2:	fb03 f002 	mul.w	r0, r3, r2
 80020e6:	4428      	add	r0, r5
 80020e8:	fba3 3401 	umull	r3, r4, r3, r1
 80020ec:	1902      	adds	r2, r0, r4
 80020ee:	4614      	mov	r4, r2
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	0a19      	lsrs	r1, r3, #8
 80020fa:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80020fe:	1222      	asrs	r2, r4, #8
		 + ((var1 * (int64_t) inst->dig_P2) << 12);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002106:	b21b      	sxth	r3, r3
 8002108:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	fb04 f500 	mul.w	r5, r4, r0
 8002112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002114:	fb03 f000 	mul.w	r0, r3, r0
 8002118:	4428      	add	r0, r5
 800211a:	6a3d      	ldr	r5, [r7, #32]
 800211c:	fba5 5603 	umull	r5, r6, r5, r3
 8002120:	1983      	adds	r3, r0, r6
 8002122:	461e      	mov	r6, r3
 8002124:	f04f 0b00 	mov.w	fp, #0
 8002128:	f04f 0c00 	mov.w	ip, #0
 800212c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002130:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002134:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002138:	eb1b 0301 	adds.w	r3, fp, r1
 800213c:	eb4c 0402 	adc.w	r4, ip, r2
 8002140:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8002144:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002148:	1c19      	adds	r1, r3, #0
 800214a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002152:	b29b      	uxth	r3, r3
 8002154:	f04f 0400 	mov.w	r4, #0
 8002158:	fb03 f502 	mul.w	r5, r3, r2
 800215c:	fb01 f004 	mul.w	r0, r1, r4
 8002160:	4428      	add	r0, r5
 8002162:	fba1 3403 	umull	r3, r4, r1, r3
 8002166:	1902      	adds	r2, r0, r4
 8002168:	4614      	mov	r4, r2
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	1061      	asrs	r1, r4, #1
 8002174:	17e2      	asrs	r2, r4, #31
 8002176:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800217a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800217e:	4323      	orrs	r3, r4
 8002180:	d101      	bne.n	8002186 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8002182:	2300      	movs	r3, #0
 8002184:	e0d4      	b.n	8002330 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800218c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002190:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	ea4f 0963 	mov.w	r9, r3, asr #1
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80021a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021a4:	4645      	mov	r5, r8
 80021a6:	464e      	mov	r6, r9
 80021a8:	1aed      	subs	r5, r5, r3
 80021aa:	eb66 0604 	sbc.w	r6, r6, r4
 80021ae:	46a8      	mov	r8, r5
 80021b0:	46b1      	mov	r9, r6
 80021b2:	eb18 0308 	adds.w	r3, r8, r8
 80021b6:	eb49 0409 	adc.w	r4, r9, r9
 80021ba:	4698      	mov	r8, r3
 80021bc:	46a1      	mov	r9, r4
 80021be:	eb18 0805 	adds.w	r8, r8, r5
 80021c2:	eb49 0906 	adc.w	r9, r9, r6
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80021d2:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80021d6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80021da:	eb18 0801 	adds.w	r8, r8, r1
 80021de:	eb49 0902 	adc.w	r9, r9, r2
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80021ee:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80021f2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80021f6:	4688      	mov	r8, r1
 80021f8:	4691      	mov	r9, r2
 80021fa:	eb18 0805 	adds.w	r8, r8, r5
 80021fe:	eb49 0906 	adc.w	r9, r9, r6
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800220e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8002212:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002216:	4688      	mov	r8, r1
 8002218:	4691      	mov	r9, r2
 800221a:	eb18 0005 	adds.w	r0, r8, r5
 800221e:	eb49 0106 	adc.w	r1, r9, r6
 8002222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002226:	f7fe fd3f 	bl	8000ca8 <__aeabi_ldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002238:	b219      	sxth	r1, r3
 800223a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800223e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f04f 0400 	mov.w	r4, #0
 800224a:	0b6b      	lsrs	r3, r5, #13
 800224c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002250:	1374      	asrs	r4, r6, #13
 8002252:	fb03 f502 	mul.w	r5, r3, r2
 8002256:	fb01 f004 	mul.w	r0, r1, r4
 800225a:	4428      	add	r0, r5
 800225c:	fba1 1203 	umull	r1, r2, r1, r3
 8002260:	1883      	adds	r3, r0, r2
 8002262:	461a      	mov	r2, r3
 8002264:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f04f 0400 	mov.w	r4, #0
 8002270:	0b6b      	lsrs	r3, r5, #13
 8002272:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002276:	1374      	asrs	r4, r6, #13
 8002278:	fb03 f502 	mul.w	r5, r3, r2
 800227c:	fb01 f004 	mul.w	r0, r1, r4
 8002280:	4428      	add	r0, r5
 8002282:	fba1 1203 	umull	r1, r2, r1, r3
 8002286:	1883      	adds	r3, r0, r2
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f04f 0400 	mov.w	r4, #0
 8002292:	0e4b      	lsrs	r3, r1, #25
 8002294:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002298:	1654      	asrs	r4, r2, #25
 800229a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	fb04 f102 	mul.w	r1, r4, r2
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
 80022b6:	1888      	adds	r0, r1, r2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	fba2 1203 	umull	r1, r2, r2, r3
 80022be:	1883      	adds	r3, r0, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	f04f 0400 	mov.w	r4, #0
 80022ca:	0ccb      	lsrs	r3, r1, #19
 80022cc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80022d0:	14d4      	asrs	r4, r2, #19
 80022d2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 80022d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022de:	eb11 0803 	adds.w	r8, r1, r3
 80022e2:	eb42 0904 	adc.w	r9, r2, r4
 80022e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022ea:	eb13 0508 	adds.w	r5, r3, r8
 80022ee:	eb44 0609 	adc.w	r6, r4, r9
 80022f2:	f04f 0100 	mov.w	r1, #0
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	0a29      	lsrs	r1, r5, #8
 80022fc:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002300:	1232      	asrs	r2, r6, #8
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002308:	b21d      	sxth	r5, r3
 800230a:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800230e:	f04f 0800 	mov.w	r8, #0
 8002312:	f04f 0900 	mov.w	r9, #0
 8002316:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800231a:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800231e:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8002322:	eb18 0301 	adds.w	r3, r8, r1
 8002326:	eb49 0402 	adc.w	r4, r9, r2
 800232a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800233a <bmp280_reset>:

void bmp280_reset(BMP280* inst)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	// soft reset
	BMP280_writeByte(inst, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8002342:	22b6      	movs	r2, #182	; 0xb6
 8002344:	21e0      	movs	r1, #224	; 0xe0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fd42 	bl	8001dd0 <BMP280_writeByte>
	delay(100);
 800234c:	2064      	movs	r0, #100	; 0x64
 800234e:	f004 f885 	bl	800645c <HAL_Delay>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <bmp280_present>:

bool bmp280_present(BMP280* inst, uint8_t trials)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	70fb      	strb	r3, [r7, #3]
	// request and verify chip id
	uint8_t attempts = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	73fb      	strb	r3, [r7, #15]
	do
	{
		bmp280_reset(inst);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffe5 	bl	800233a <bmp280_reset>
		uint8_t who[1] = { 0x00 };
 8002370:	2300      	movs	r3, #0
 8002372:	733b      	strb	r3, [r7, #12]
		BMP280_readBytes(inst, BMP280_REG_ID, who, 1);
 8002374:	f107 020c 	add.w	r2, r7, #12
 8002378:	2301      	movs	r3, #1
 800237a:	21d0      	movs	r1, #208	; 0xd0
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fd02 	bl	8001d86 <BMP280_readBytes>
		if (who[0] == BMP280_CHIP_ID) return true;
 8002382:	7b3b      	ldrb	r3, [r7, #12]
 8002384:	2b58      	cmp	r3, #88	; 0x58
 8002386:	d101      	bne.n	800238c <bmp280_present+0x32>
 8002388:	2301      	movs	r3, #1
 800238a:	e00e      	b.n	80023aa <bmp280_present+0x50>
		else
		{
			attempts++;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	3301      	adds	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 8002392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002396:	f004 f861 	bl	800645c <HAL_Delay>
		}
	} while (attempts <= trials);
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d9e3      	bls.n	800236a <bmp280_present+0x10>
	inst->active = false;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
	return false;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <bmp280_init>:

bool bmp280_init(BMP280* inst, BMP280_config* params)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[1];	// nasty temporary byte, used for everything
	inst->active = false;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	771a      	strb	r2, [r3, #28]
	inst->params = *params;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	3306      	adds	r3, #6
 80023c8:	6811      	ldr	r1, [r2, #0]
 80023ca:	6019      	str	r1, [r3, #0]
 80023cc:	7912      	ldrb	r2, [r2, #4]
 80023ce:	711a      	strb	r2, [r3, #4]

	if (!bmp280_present(inst, 1)) return false;
 80023d0:	2101      	movs	r1, #1
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffc1 	bl	800235a <bmp280_present>
 80023d8:	4603      	mov	r3, r0
 80023da:	f083 0301 	eor.w	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <bmp280_init+0x36>
 80023e4:	2300      	movs	r3, #0
 80023e6:	e064      	b.n	80024b2 <bmp280_init+0x100>
	bmp280_reset(inst);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ffa6 	bl	800233a <bmp280_reset>

	while (!(BMP280_readBytes(inst, BMP280_REG_STATUS, temp_data, 1) && (temp_data[0] & 0x01) == 0)); // wait until finished copying over the NVM data
 80023ee:	bf00      	nop
 80023f0:	f107 020c 	add.w	r2, r7, #12
 80023f4:	2301      	movs	r3, #1
 80023f6:	21f3      	movs	r1, #243	; 0xf3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fcc4 	bl	8001d86 <BMP280_readBytes>
 80023fe:	4603      	mov	r3, r0
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f2      	bne.n	80023f0 <bmp280_init+0x3e>
 800240a:	7b3b      	ldrb	r3, [r7, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ed      	bne.n	80023f0 <bmp280_init+0x3e>

	if (!read_calibration_data(inst)) return false;
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fd27 	bl	8001e68 <read_calibration_data>
 800241a:	4603      	mov	r3, r0
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <bmp280_init+0x78>
 8002426:	2300      	movs	r3, #0
 8002428:	e043      	b.n	80024b2 <bmp280_init+0x100>

	// Setting parameters
	temp_data[0] = (params->standby << 5) | (params->filter << 2);	// config byte
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	791b      	ldrb	r3, [r3, #4]
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	b25a      	sxtb	r2, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	785b      	ldrb	r3, [r3, #1]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	b25b      	sxtb	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b25b      	sxtb	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CONFIG, temp_data[0])) return false;
 8002442:	7b3b      	ldrb	r3, [r7, #12]
 8002444:	461a      	mov	r2, r3
 8002446:	21f5      	movs	r1, #245	; 0xf5
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fcc1 	bl	8001dd0 <BMP280_writeByte>
 800244e:	4603      	mov	r3, r0
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <bmp280_init+0xac>
 800245a:	2300      	movs	r3, #0
 800245c:	e029      	b.n	80024b2 <bmp280_init+0x100>

	if (params->mode == BMP280_MODE_FORCED) params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <bmp280_init+0xba>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
	temp_data[0] = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode); // ctrl byte
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	78db      	ldrb	r3, [r3, #3]
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	b25a      	sxtb	r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	b25b      	sxtb	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b25a      	sxtb	r2, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b25b      	sxtb	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CTRL, temp_data[0])) return false;
 800248e:	7b3b      	ldrb	r3, [r7, #12]
 8002490:	461a      	mov	r2, r3
 8002492:	21f4      	movs	r1, #244	; 0xf4
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fc9b 	bl	8001dd0 <BMP280_writeByte>
 800249a:	4603      	mov	r3, r0
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <bmp280_init+0xf8>
 80024a6:	2300      	movs	r3, #0
 80024a8:	e003      	b.n	80024b2 <bmp280_init+0x100>

	inst->active = true;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	771a      	strb	r2, [r3, #28]
	return true;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	0000      	movs	r0, r0
 80024bc:	0000      	movs	r0, r0
	...

080024c0 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	size_t size = 6;
 80024c8:	2306      	movs	r3, #6
 80024ca:	61fb      	str	r3, [r7, #28]
	if (!BMP280_readBytes(inst, 0xf7, data, size)) return false;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f107 020c 	add.w	r2, r7, #12
 80024d4:	21f7      	movs	r1, #247	; 0xf7
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fc55 	bl	8001d86 <BMP280_readBytes>
 80024dc:	4603      	mov	r3, r0
 80024de:	f083 0301 	eor.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <bmp280_update+0x2c>
 80024e8:	2300      	movs	r3, #0
 80024ea:	e068      	b.n	80025be <bmp280_update+0xfe>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80024ec:	7b3b      	ldrb	r3, [r7, #12]
 80024ee:	031a      	lsls	r2, r3, #12
 80024f0:	7b7b      	ldrb	r3, [r7, #13]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4313      	orrs	r3, r2
 80024f6:	7bba      	ldrb	r2, [r7, #14]
 80024f8:	0912      	lsrs	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	031a      	lsls	r2, r3, #12
 8002504:	7c3b      	ldrb	r3, [r7, #16]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4313      	orrs	r3, r2
 800250a:	7c7a      	ldrb	r2, [r7, #17]
 800250c:	0912      	lsrs	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

	int32_t fine_temp;
	inst->temperature = (float)(compensate_temperature(inst, adc_temp, &fine_temp)) / 100.0;
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	461a      	mov	r2, r3
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fd29 	bl	8001f74 <compensate_temperature>
 8002522:	ee07 0a90 	vmov	s15, r0
 8002526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80025e0 <bmp280_update+0x120>
 800252e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->pressure = (float)(compensate_pressure(inst, adc_pressure, fine_temp)) / 25600.0;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	461a      	mov	r2, r3
 800253c:	69b9      	ldr	r1, [r7, #24]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fd51 	bl	8001fe6 <compensate_pressure>
 8002544:	ee07 0a90 	vmov	s15, r0
 8002548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800254c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80025e4 <bmp280_update+0x124>
 8002550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->altitude = 44330 * (1.0 - pow(inst->pressure / SEA_PRESSURE, 0.1903));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe f802 	bl	8000568 <__aeabi_f2d>
 8002564:	a318      	add	r3, pc, #96	; (adr r3, 80025c8 <bmp280_update+0x108>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f97f 	bl	800086c <__aeabi_ddiv>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	ec44 3b17 	vmov	d7, r3, r4
 8002576:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80025d0 <bmp280_update+0x110>
 800257a:	eeb0 0a47 	vmov.f32	s0, s14
 800257e:	eef0 0a67 	vmov.f32	s1, s15
 8002582:	f016 fbcb 	bl	8018d1c <pow>
 8002586:	ec54 3b10 	vmov	r3, r4, d0
 800258a:	461a      	mov	r2, r3
 800258c:	4623      	mov	r3, r4
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	4915      	ldr	r1, [pc, #84]	; (80025e8 <bmp280_update+0x128>)
 8002594:	f7fd fe88 	bl	80002a8 <__aeabi_dsub>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	4618      	mov	r0, r3
 800259e:	4621      	mov	r1, r4
 80025a0:	a30d      	add	r3, pc, #52	; (adr r3, 80025d8 <bmp280_update+0x118>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f837 	bl	8000618 <__aeabi_dmul>
 80025aa:	4603      	mov	r3, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	4618      	mov	r0, r3
 80025b0:	4621      	mov	r1, r4
 80025b2:	f7fe fb29 	bl	8000c08 <__aeabi_d2f>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	615a      	str	r2, [r3, #20]

	return true;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	30553261 	.word	0x30553261
 80025cc:	408f67aa 	.word	0x408f67aa
 80025d0:	1a36e2eb 	.word	0x1a36e2eb
 80025d4:	3fc85bc0 	.word	0x3fc85bc0
 80025d8:	00000000 	.word	0x00000000
 80025dc:	40e5a540 	.word	0x40e5a540
 80025e0:	42c80000 	.word	0x42c80000
 80025e4:	46c80000 	.word	0x46c80000
 80025e8:	3ff00000 	.word	0x3ff00000

080025ec <millis>:
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <millis+0x1c>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <GPS_read>:
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
	return true;
}

char GPS_read(GPS* inst)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	static uint32_t firstChar = 0;	// first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002614:	f7ff ffea 	bl	80025ec <millis>
 8002618:	6178      	str	r0, [r7, #20]
	char c = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	74fb      	strb	r3, [r7, #19]
	if (inst->paused) return c;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <GPS_read+0x20>
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	e078      	b.n	800271e <GPS_read+0x112>

	int i = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 1; i++)
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	dc71      	bgt.n	800271e <GPS_read+0x112>
	{
		c = (char)inst->uartBuffer[i];
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	74fb      	strb	r3, [r7, #19]
		char ca[2] = {c, '\0'};
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	723b      	strb	r3, [r7, #8]
 800264c:	2300      	movs	r3, #0
 800264e:	727b      	strb	r3, [r7, #9]
		//print(ca);

		inst->currentline[inst->lineidx++] = c;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800265c:	b2db      	uxtb	r3, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	b2c8      	uxtb	r0, r1
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8002668:	4413      	add	r3, r2
 800266a:	7cfa      	ldrb	r2, [r7, #19]
 800266c:	701a      	strb	r2, [r3, #0]
		// [!!!] \/ wtf is that
		if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b77      	cmp	r3, #119	; 0x77
 8002678:	d903      	bls.n	8002682 <GPS_read+0x76>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2277      	movs	r2, #119	; 0x77
 800267e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

		if (c == '\n')
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b0a      	cmp	r3, #10
 8002686:	d141      	bne.n	800270c <GPS_read+0x100>
		{
			inst->currentline[inst->lineidx] = 0;	// add endline character
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4413      	add	r3, r2
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]

			if (inst->currentline == inst->line1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	33d8      	adds	r3, #216	; 0xd8
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d10c      	bne.n	80026c4 <GPS_read+0xb8>
			{
				inst->currentline = inst->line2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80026c2:	e00b      	b.n	80026dc <GPS_read+0xd0>
			}
			else
			{
				inst->currentline = inst->line1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
			}

			inst->lineidx = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
			inst->recvdflag = true;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
			inst->recvdTime = millis();	// time we got the end of the string
 80026ec:	f7ff ff7e 	bl	80025ec <millis>
 80026f0:	4602      	mov	r2, r0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			inst->sentTime = firstChar;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <GPS_read+0x11c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			firstChar = 0;				// there are no characters yet
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <GPS_read+0x11c>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
			return c;					// wait until next character to set time
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	e008      	b.n	800271e <GPS_read+0x112>
		}

		if (firstChar == 0) firstChar = tStart;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <GPS_read+0x11c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <GPS_read+0x10e>
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <GPS_read+0x11c>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6013      	str	r3, [r2, #0]
		return c;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	e7ff      	b.n	800271e <GPS_read+0x112>
	}
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000de0 	.word	0x20000de0

0800272c <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b092      	sub	sp, #72	; 0x48
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2258      	movs	r2, #88	; 0x58
 8002866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2258      	movs	r2, #88	; 0x58
 800286e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2258      	movs	r2, #88	; 0x58
 8002876:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	2203      	movs	r2, #3
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f012 fb5c 	bl	8014f46 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3307      	adds	r3, #7
 8002892:	2214      	movs	r2, #20
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f012 fb55 	bl	8014f46 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	331b      	adds	r3, #27
 80028a0:	2203      	movs	r2, #3
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f012 fb4e 	bl	8014f46 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	331e      	adds	r3, #30
 80028ae:	2214      	movs	r2, #20
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f012 fb47 	bl	8014f46 <memset>

	memset(inst->txtTXT, 0x00, 63);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3388      	adds	r3, #136	; 0x88
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f012 fb40 	bl	8014f46 <memset>
	inst->txtTot = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a70      	ldr	r2, [pc, #448]	; (8002aa4 <GPS_init+0x378>)
 80028e2:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <GPS_init+0x37c>)
 80028ea:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a6e      	ldr	r2, [pc, #440]	; (8002aac <GPS_init+0x380>)
 80028f2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a6d      	ldr	r2, [pc, #436]	; (8002ab0 <GPS_init+0x384>)
 80028fa:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <GPS_init+0x388>)
 8002902:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a6b      	ldr	r2, [pc, #428]	; (8002ab8 <GPS_init+0x38c>)
 800290a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a6a      	ldr	r2, [pc, #424]	; (8002abc <GPS_init+0x390>)
 8002912:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <GPS_init+0x394>)
 800291a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a68      	ldr	r2, [pc, #416]	; (8002ac4 <GPS_init+0x398>)
 8002922:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a62      	ldr	r2, [pc, #392]	; (8002ab4 <GPS_init+0x388>)
 800292a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a60      	ldr	r2, [pc, #384]	; (8002ab4 <GPS_init+0x388>)
 8002932:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	inst->first_fix = true;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f

	//while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);

	uint8_t msg_len = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char message[50] = {0};
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2232      	movs	r2, #50	; 0x32
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f012 fafa 	bl	8014f46 <memset>

	msg_len = sprintf(message, "$PMTK314,1,1,0,1,5,5,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
 8002952:	f107 030c 	add.w	r3, r7, #12
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <GPS_init+0x39c>)
 8002958:	461c      	mov	r4, r3
 800295a:	4615      	mov	r5, r2
 800295c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800296c:	232f      	movs	r3, #47	; 0x2f
 800296e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002978:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800297c:	b29a      	uxth	r2, r3
 800297e:	f107 010c 	add.w	r1, r7, #12
 8002982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002986:	f009 fff4 	bl	800c972 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 800298a:	bf00      	nop
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002992:	4618      	mov	r0, r3
 8002994:	f00a f9ec 	bl	800cd70 <HAL_UART_GetState>
 8002998:	4603      	mov	r3, r0
 800299a:	2b20      	cmp	r3, #32
 800299c:	d1f6      	bne.n	800298c <GPS_init+0x260>
	delay(100);
 800299e:	2064      	movs	r0, #100	; 0x64
 80029a0:	f003 fd5c 	bl	800645c <HAL_Delay>

	msg_len = sprintf(message, "$PMTK101*32\r\n");
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <GPS_init+0x3a0>)
 80029aa:	461c      	mov	r4, r3
 80029ac:	4613      	mov	r3, r2
 80029ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b0:	c407      	stmia	r4!, {r0, r1, r2}
 80029b2:	8023      	strh	r3, [r4, #0]
 80029b4:	230d      	movs	r3, #13
 80029b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 80029c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 010c 	add.w	r1, r7, #12
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	f009 ffd0 	bl	800c972 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 80029d2:	bf00      	nop
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029da:	4618      	mov	r0, r3
 80029dc:	f00a f9c8 	bl	800cd70 <HAL_UART_GetState>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d1f6      	bne.n	80029d4 <GPS_init+0x2a8>
	delay(100);
 80029e6:	2064      	movs	r0, #100	; 0x64
 80029e8:	f003 fd38 	bl	800645c <HAL_Delay>

	msg_len = sprintf(message, "$PMTK286,1*23\r\n");
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <GPS_init+0x3a4>)
 80029f2:	461c      	mov	r4, r3
 80029f4:	4613      	mov	r3, r2
 80029f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029fc:	230f      	movs	r3, #15
 80029fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	HAL_UART_Transmit(inst->uart, message, msg_len, 1000);			// transmit bytes
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f107 010c 	add.w	r1, r7, #12
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	f009 ffac 	bl	800c972 <HAL_UART_Transmit>
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
 8002a1a:	bf00      	nop
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00a f9a4 	bl	800cd70 <HAL_UART_GetState>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d1f6      	bne.n	8002a1c <GPS_init+0x2f0>
	delay(100);
 8002a2e:	2064      	movs	r0, #100	; 0x64
 8002a30:	f003 fd14 	bl	800645c <HAL_Delay>

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8002a40:	2201      	movs	r2, #1
 8002a42:	4619      	mov	r1, r3
 8002a44:	f00a f82e 	bl	800caa4 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 8002a48:	f7ff fdd0 	bl	80025ec <millis>
 8002a4c:	6438      	str	r0, [r7, #64]	; 0x40
	while (millis() - timeout <= 3000)
 8002a4e:	e016      	b.n	8002a7e <GPS_init+0x352>
	{
		if (GPS_newNMEAreceived(inst) && GPS_parse(inst, GPS_lastNMEA(inst)))
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 ffba 	bl	80039ca <GPS_newNMEAreceived>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <GPS_init+0x352>
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 ffc2 	bl	80039e6 <GPS_lastNMEA>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f854 	bl	8002b14 <GPS_parse>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <GPS_init+0x352>
		{
			inst->active = true;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			return true;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00d      	b.n	8002a9a <GPS_init+0x36e>
	while (millis() - timeout <= 3000)
 8002a7e:	f7ff fdb5 	bl	80025ec <millis>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d9df      	bls.n	8002a50 <GPS_init+0x324>
		}
	}

	inst->active = false;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	return false;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3748      	adds	r7, #72	; 0x48
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0801b9b4 	.word	0x0801b9b4
 8002aa8:	0801b9b8 	.word	0x0801b9b8
 8002aac:	0801b9bc 	.word	0x0801b9bc
 8002ab0:	0801b9c0 	.word	0x0801b9c0
 8002ab4:	0801b9c4 	.word	0x0801b9c4
 8002ab8:	0801b9c8 	.word	0x0801b9c8
 8002abc:	0801b9cc 	.word	0x0801b9cc
 8002ac0:	0801b9d0 	.word	0x0801b9d0
 8002ac4:	0801b9d4 	.word	0x0801b9d4
 8002ac8:	0801b9d8 	.word	0x0801b9d8
 8002acc:	0801ba08 	.word	0x0801ba08
 8002ad0:	0801ba18 	.word	0x0801ba18

08002ad4 <GPS_update>:

bool GPS_update(GPS* inst)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	if (GPS_newNMEAreceived(inst))
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 ff74 	bl	80039ca <GPS_newNMEAreceived>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <GPS_update+0x36>
	{
		if (GPS_parse(inst, GPS_lastNMEA(inst))) { inst->newData = true; return true; }
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 ff7c 	bl	80039e6 <GPS_lastNMEA>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f80e 	bl	8002b14 <GPS_parse>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <GPS_update+0x36>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <GPS_update+0x38>
	}
	return false;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb65 	bl	80031f0 <GPS_check>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <GPS_parse+0x22>
 8002b32:	2300      	movs	r3, #0
 8002b34:	e355      	b.n	80031e2 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f013 f927 	bl	8015d90 <strchr>
 8002b42:	4603      	mov	r3, r0
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3307      	adds	r3, #7
 8002b4c:	49a5      	ldr	r1, [pc, #660]	; (8002de4 <GPS_parse+0x2d0>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb3e 	bl	80001d0 <strcmp>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80e6 	bne.w	8002d28 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fcc6 	bl	80034f0 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f013 f912 	bl	8015d90 <strchr>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	3301      	adds	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002b72:	6979      	ldr	r1, [r7, #20]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fd0b 	bl	8003590 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	6978      	ldr	r0, [r7, #20]
 8002b7e:	f013 f907 	bl	8015d90 <strchr>
 8002b82:	4603      	mov	r3, r0
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002b88:	6979      	ldr	r1, [r7, #20]
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fdc6 	bl	800371c <GPS_parseLatDir>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <GPS_parse+0x8c>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e320      	b.n	80031e2 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f013 f8f4 	bl	8015d90 <strchr>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fdf3 	bl	800379c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f013 f8e9 	bl	8015d90 <strchr>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002bc4:	6979      	ldr	r1, [r7, #20]
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fe90 	bl	80038ec <GPS_parseLonDir>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <GPS_parse+0xc8>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e302      	b.n	80031e2 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f013 f8d6 	bl	8015d90 <strchr>
 8002be4:	4603      	mov	r3, r0
 8002be6:	3301      	adds	r3, #1
 8002be8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fc66 	bl	80034be <GPS_isEmpty>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01b      	beq.n	8002c36 <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f012 f954 	bl	8014eac <atoi>
 8002c04:	4603      	mov	r3, r0
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				//if (inst->first_fix) { inst->gpsTime.hour += 2; setTime(&(inst->gpsTime));  inst->gpsTime.hour -= 2; inst->first_fix = false;}
				inst->lastFix = inst->sentTime;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002c2c:	e003      	b.n	8002c36 <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f013 f8a9 	bl	8015d90 <strchr>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	3301      	adds	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fc39 	bl	80034be <GPS_isEmpty>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <GPS_parse+0x154>
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f012 f927 	bl	8014eac <atoi>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f013 f890 	bl	8015d90 <strchr>
 8002c70:	4603      	mov	r3, r0
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002c76:	6979      	ldr	r1, [r7, #20]
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fc20 	bl	80034be <GPS_isEmpty>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f083 0301 	eor.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <GPS_parse+0x18e>
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f012 f90b 	bl	8014ea6 <atof>
 8002c90:	ec54 3b10 	vmov	r3, r4, d0
 8002c94:	4618      	mov	r0, r3
 8002c96:	4621      	mov	r1, r4
 8002c98:	f7fd ffb6 	bl	8000c08 <__aeabi_d2f>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	6978      	ldr	r0, [r7, #20]
 8002ca6:	f013 f873 	bl	8015d90 <strchr>
 8002caa:	4603      	mov	r3, r0
 8002cac:	3301      	adds	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fc03 	bl	80034be <GPS_isEmpty>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <GPS_parse+0x1c8>
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f012 f8ee 	bl	8014ea6 <atof>
 8002cca:	ec54 3b10 	vmov	r3, r4, d0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	f7fd ff99 	bl	8000c08 <__aeabi_d2f>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f013 f856 	bl	8015d90 <strchr>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	6978      	ldr	r0, [r7, #20]
 8002cee:	f013 f84f 	bl	8015d90 <strchr>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fbdf 	bl	80034be <GPS_isEmpty>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8251 	beq.w	80031b0 <GPS_parse+0x69c>
 8002d0e:	6978      	ldr	r0, [r7, #20]
 8002d10:	f012 f8c9 	bl	8014ea6 <atof>
 8002d14:	ec54 3b10 	vmov	r3, r4, d0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	f7fd ff74 	bl	8000c08 <__aeabi_d2f>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
 8002d26:	e243      	b.n	80031b0 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3307      	adds	r3, #7
 8002d2c:	492e      	ldr	r1, [pc, #184]	; (8002de8 <GPS_parse+0x2d4>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fa4e 	bl	80001d0 <strcmp>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 80e3 	bne.w	8002f02 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fbd6 	bl	80034f0 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f013 f822 	bl	8015d90 <strchr>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	3301      	adds	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fe12 	bl	800397e <GPS_parseFix>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <GPS_parse+0x256>
 8002d66:	2300      	movs	r3, #0
 8002d68:	e23b      	b.n	80031e2 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f013 f80f 	bl	8015d90 <strchr>
 8002d72:	4603      	mov	r3, r0
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fc08 	bl	8003590 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f013 f804 	bl	8015d90 <strchr>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002d8e:	6979      	ldr	r1, [r7, #20]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fcc3 	bl	800371c <GPS_parseLatDir>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <GPS_parse+0x292>
 8002da2:	2300      	movs	r3, #0
 8002da4:	e21d      	b.n	80031e2 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	6978      	ldr	r0, [r7, #20]
 8002daa:	f012 fff1 	bl	8015d90 <strchr>
 8002dae:	4603      	mov	r3, r0
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fcf0 	bl	800379c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f012 ffe6 	bl	8015d90 <strchr>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002dca:	6979      	ldr	r1, [r7, #20]
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fd8d 	bl	80038ec <GPS_parseLonDir>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <GPS_parse+0x2d8>
 8002dde:	2300      	movs	r3, #0
 8002de0:	e1ff      	b.n	80031e2 <GPS_parse+0x6ce>
 8002de2:	bf00      	nop
 8002de4:	0801b9c8 	.word	0x0801b9c8
 8002de8:	0801b9d4 	.word	0x0801b9d4

		// speed
		p = strchr(p, ',') + 1;
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f012 ffce 	bl	8015d90 <strchr>
 8002df4:	4603      	mov	r3, r0
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002dfa:	6979      	ldr	r1, [r7, #20]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fb5e 	bl	80034be <GPS_isEmpty>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <GPS_parse+0x312>
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f012 f849 	bl	8014ea6 <atof>
 8002e14:	ec54 3b10 	vmov	r3, r4, d0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	f7fd fef4 	bl	8000c08 <__aeabi_d2f>
 8002e20:	4602      	mov	r2, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	6978      	ldr	r0, [r7, #20]
 8002e2a:	f012 ffb1 	bl	8015d90 <strchr>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002e34:	6979      	ldr	r1, [r7, #20]
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb41 	bl	80034be <GPS_isEmpty>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <GPS_parse+0x34c>
 8002e48:	6978      	ldr	r0, [r7, #20]
 8002e4a:	f012 f82c 	bl	8014ea6 <atof>
 8002e4e:	ec54 3b10 	vmov	r3, r4, d0
 8002e52:	4618      	mov	r0, r3
 8002e54:	4621      	mov	r1, r4
 8002e56:	f7fd fed7 	bl	8000c08 <__aeabi_d2f>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f012 ff94 	bl	8015d90 <strchr>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fb24 	bl	80034be <GPS_isEmpty>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8196 	beq.w	80031b0 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f012 f80e 	bl	8014ea6 <atof>
 8002e8a:	ec54 3b10 	vmov	r3, r4, d0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4621      	mov	r1, r4
 8002e92:	f7fd feb9 	bl	8000c08 <__aeabi_d2f>
 8002e96:	ee07 0a90 	vmov	s15, r0
 8002e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e9e:	ee17 3a90 	vmov	r3, s15
 8002ea2:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a8b      	ldr	r2, [pc, #556]	; (80030d4 <GPS_parse+0x5c0>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	0b5b      	lsrs	r3, r3, #13
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4b86      	ldr	r3, [pc, #536]	; (80030d4 <GPS_parse+0x5c0>)
 8002eba:	fba3 1302 	umull	r1, r3, r3, r2
 8002ebe:	0b5b      	lsrs	r3, r3, #13
 8002ec0:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	4a83      	ldr	r2, [pc, #524]	; (80030d8 <GPS_parse+0x5c4>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <GPS_parse+0x5c4>)
 8002ede:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2164      	movs	r1, #100	; 0x64
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002f00:	e156      	b.n	80031b0 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3307      	adds	r3, #7
 8002f06:	4975      	ldr	r1, [pc, #468]	; (80030dc <GPS_parse+0x5c8>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd f961 	bl	80001d0 <strcmp>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d153      	bne.n	8002fbc <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002f14:	6979      	ldr	r1, [r7, #20]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fb3a 	bl	8003590 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f012 ff36 	bl	8015d90 <strchr>
 8002f24:	4603      	mov	r3, r0
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fbf5 	bl	800371c <GPS_parseLatDir>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f083 0301 	eor.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <GPS_parse+0x42e>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e14f      	b.n	80031e2 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	6978      	ldr	r0, [r7, #20]
 8002f46:	f012 ff23 	bl	8015d90 <strchr>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc22 	bl	800379c <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f012 ff18 	bl	8015d90 <strchr>
 8002f60:	4603      	mov	r3, r0
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fcbf 	bl	80038ec <GPS_parseLonDir>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <GPS_parse+0x46a>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e131      	b.n	80031e2 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f012 ff05 	bl	8015d90 <strchr>
 8002f86:	4603      	mov	r3, r0
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 faae 	bl	80034f0 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f012 fefa 	bl	8015d90 <strchr>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002fa2:	6979      	ldr	r1, [r7, #20]
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fcea 	bl	800397e <GPS_parseFix>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80fc 	beq.w	80031b0 <GPS_parse+0x69c>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e112      	b.n	80031e2 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3307      	adds	r3, #7
 8002fc0:	4947      	ldr	r1, [pc, #284]	; (80030e0 <GPS_parse+0x5cc>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd f904 	bl	80001d0 <strcmp>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 808a 	bne.w	80030e4 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f012 fedc 	bl	8015d90 <strchr>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa6c 	bl	80034be <GPS_isEmpty>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f083 0301 	eor.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <GPS_parse+0x4ee>
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	f011 ff5a 	bl	8014eac <atoi>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e009      	b.n	800301c <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f012 fec0 	bl	8015d90 <strchr>
 8003010:	4603      	mov	r3, r0
 8003012:	3301      	adds	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3301      	adds	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0b      	cmp	r3, #11
 8003020:	ddf2      	ble.n	8003008 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f012 feb3 	bl	8015d90 <strchr>
 800302a:	4603      	mov	r3, r0
 800302c:	3301      	adds	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa43 	bl	80034be <GPS_isEmpty>
 8003038:	4603      	mov	r3, r0
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <GPS_parse+0x548>
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f011 ff2e 	bl	8014ea6 <atof>
 800304a:	ec54 3b10 	vmov	r3, r4, d0
 800304e:	4618      	mov	r0, r3
 8003050:	4621      	mov	r1, r4
 8003052:	f7fd fdd9 	bl	8000c08 <__aeabi_d2f>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f012 fe96 	bl	8015d90 <strchr>
 8003064:	4603      	mov	r3, r0
 8003066:	3301      	adds	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fa26 	bl	80034be <GPS_isEmpty>
 8003072:	4603      	mov	r3, r0
 8003074:	f083 0301 	eor.w	r3, r3, #1
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <GPS_parse+0x582>
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f011 ff11 	bl	8014ea6 <atof>
 8003084:	ec54 3b10 	vmov	r3, r4, d0
 8003088:	4618      	mov	r0, r3
 800308a:	4621      	mov	r1, r4
 800308c:	f7fd fdbc 	bl	8000c08 <__aeabi_d2f>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f012 fe79 	bl	8015d90 <strchr>
 800309e:	4603      	mov	r3, r0
 80030a0:	3301      	adds	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 80030a4:	6979      	ldr	r1, [r7, #20]
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa09 	bl	80034be <GPS_isEmpty>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d07b      	beq.n	80031b0 <GPS_parse+0x69c>
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f011 fef4 	bl	8014ea6 <atof>
 80030be:	ec54 3b10 	vmov	r3, r4, d0
 80030c2:	4618      	mov	r0, r3
 80030c4:	4621      	mov	r1, r4
 80030c6:	f7fd fd9f 	bl	8000c08 <__aeabi_d2f>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80030d0:	e06e      	b.n	80031b0 <GPS_parse+0x69c>
 80030d2:	bf00      	nop
 80030d4:	d1b71759 	.word	0xd1b71759
 80030d8:	51eb851f 	.word	0x51eb851f
 80030dc:	0801b9cc 	.word	0x0801b9cc
 80030e0:	0801b9d0 	.word	0x0801b9d0
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3307      	adds	r3, #7
 80030e8:	4940      	ldr	r1, [pc, #256]	; (80031ec <GPS_parse+0x6d8>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f870 	bl	80001d0 <strcmp>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d15a      	bne.n	80031ac <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f9e0 	bl	80034be <GPS_isEmpty>
 80030fe:	4603      	mov	r3, r0
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <GPS_parse+0x604>
 800310a:	6978      	ldr	r0, [r7, #20]
 800310c:	f011 fece 	bl	8014eac <atoi>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f012 fe38 	bl	8015d90 <strchr>
 8003120:	4603      	mov	r3, r0
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f9c8 	bl	80034be <GPS_isEmpty>
 800312e:	4603      	mov	r3, r0
 8003130:	f083 0301 	eor.w	r3, r3, #1
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <GPS_parse+0x634>
 800313a:	6978      	ldr	r0, [r7, #20]
 800313c:	f011 feb6 	bl	8014eac <atoi>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f012 fe20 	bl	8015d90 <strchr>
 8003150:	4603      	mov	r3, r0
 8003152:	3301      	adds	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9b0 	bl	80034be <GPS_isEmpty>
 800315e:	4603      	mov	r3, r0
 8003160:	f083 0301 	eor.w	r3, r3, #1
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <GPS_parse+0x664>
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f011 fe9e 	bl	8014eac <atoi>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	6978      	ldr	r0, [r7, #20]
 800317c:	f012 fe08 	bl	8015d90 <strchr>
 8003180:	4603      	mov	r3, r0
 8003182:	3301      	adds	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 8003186:	6979      	ldr	r1, [r7, #20]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f998 	bl	80034be <GPS_isEmpty>
 800318e:	4603      	mov	r3, r0
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <GPS_parse+0x69c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80031a0:	233d      	movs	r3, #61	; 0x3d
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f923 	bl	80033f0 <GPS_parseStr>
 80031aa:	e001      	b.n	80031b0 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e018      	b.n	80031e2 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f103 021b 	add.w	r2, r3, #27
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f012 fdf4 	bl	8015daa <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f103 021e 	add.w	r2, r3, #30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3307      	adds	r3, #7
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f012 fdeb 	bl	8015daa <strcpy>
	inst->lastUpdate = millis();
 80031d4:	f7ff fa0a 	bl	80025ec <millis>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 80031e0:	2301      	movs	r3, #1
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	0801ba2c 	.word	0x0801ba2c

080031f0 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b24      	cmp	r3, #36	; 0x24
 8003206:	d001      	beq.n	800320c <GPS_check+0x1c>
 8003208:	2300      	movs	r3, #0
 800320a:	e0ad      	b.n	8003368 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800321a:	e002      	b.n	8003222 <GPS_check+0x32>
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	3301      	adds	r3, #1
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f8      	bne.n	800321c <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 800322a:	e002      	b.n	8003232 <GPS_check+0x42>
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	3b01      	subs	r3, #1
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b2a      	cmp	r3, #42	; 0x2a
 8003238:	d003      	beq.n	8003242 <GPS_check+0x52>
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d8f4      	bhi.n	800322c <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b2a      	cmp	r3, #42	; 0x2a
 8003248:	d001      	beq.n	800324e <GPS_check+0x5e>
 800324a:	2300      	movs	r3, #0
 800324c:	e08c      	b.n	8003368 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	3301      	adds	r3, #1
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fbd6 	bl	8003a08 <GPS_parseHex>
 800325c:	4603      	mov	r3, r0
 800325e:	b29b      	uxth	r3, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	3302      	adds	r3, #2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fbcb 	bl	8003a08 <GPS_parseHex>
 8003272:	4603      	mov	r3, r0
 8003274:	b29a      	uxth	r2, r3
 8003276:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003278:	4413      	add	r3, r2
 800327a:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3301      	adds	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e008      	b.n	800329a <GPS_check+0xaa>
		{
			sum ^=* p1;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b29a      	uxth	r2, r3
 800328e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003290:	4053      	eors	r3, r2
 8003292:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3f2      	bcc.n	8003288 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 80032a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <GPS_check+0xbc>
 80032a8:	2300      	movs	r3, #0
 80032aa:	e05d      	b.n	8003368 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80032c2:	461a      	mov	r2, r3
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f852 	bl	8003370 <GPS_tokenOnList>
 80032cc:	6138      	str	r0, [r7, #16]
	if (src)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01f      	beq.n	8003314 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	6939      	ldr	r1, [r7, #16]
 80032da:	4618      	mov	r0, r3
 80032dc:	f012 fd65 	bl	8015daa <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f103 020a 	add.w	r2, r3, #10
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 80032ec:	6938      	ldr	r0, [r7, #16]
 80032ee:	f7fc ff79 	bl	80001e4 <strlen>
 80032f2:	4602      	mov	r2, r0
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4413      	add	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003300:	461a      	mov	r2, r3
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f833 	bl	8003370 <GPS_tokenOnList>
 800330a:	60f8      	str	r0, [r7, #12]
	if (snc)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00f      	beq.n	8003332 <GPS_check+0x142>
 8003312:	e001      	b.n	8003318 <GPS_check+0x128>
	else return false;
 8003314:	2300      	movs	r3, #0
 8003316:	e027      	b.n	8003368 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3307      	adds	r3, #7
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f012 fd43 	bl	8015daa <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e019      	b.n	8003366 <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003338:	461a      	mov	r2, r3
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f817 	bl	8003370 <GPS_tokenOnList>
 8003342:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3307      	adds	r3, #7
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	4618      	mov	r0, r3
 8003352:	f012 fd2a 	bl	8015daa <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f103 0214 	add.w	r2, r3, #20
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
			return false;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 8003366:	2301      	movs	r3, #1
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003380:	e01e      	b.n	80033c0 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fc ff24 	bl	80001e4 <strlen>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4620      	mov	r0, r4
 80033a4:	f012 fd09 	bl	8015dba <strncmp>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <GPS_tokenOnList+0x4a>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e014      	b.n	80033e4 <GPS_tokenOnList+0x74>
		i++;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3301      	adds	r3, #1
 80033be:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2202      	movs	r2, #2
 80033cc:	4907      	ldr	r1, [pc, #28]	; (80033ec <GPS_tokenOnList+0x7c>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f012 fcf3 	bl	8015dba <strncmp>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <GPS_tokenOnList+0x72>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e0:	dbcf      	blt.n	8003382 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd90      	pop	{r4, r7, pc}
 80033ec:	0801ba30 	.word	0x0801ba30

080033f0 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f012 fcc5 	bl	8015d90 <strchr>
 8003406:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d018      	beq.n	8003444 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4293      	cmp	r3, r2
 8003426:	bfa8      	it	ge
 8003428:	4613      	movge	r3, r2
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	461a      	mov	r2, r3
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f012 fcd3 	bl	8015dde <strncpy>
		buff[len] = 0;
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e037      	b.n	80034b4 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003444:	212a      	movs	r1, #42	; 0x2a
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f012 fca2 	bl	8015d90 <strchr>
 800344c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4293      	cmp	r3, r2
 8003468:	bfa8      	it	ge
 800346a:	4613      	movge	r3, r2
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	461a      	mov	r2, r3
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68b8      	ldr	r0, [r7, #8]
 8003476:	f012 fcb2 	bl	8015dde <strncpy>
			buff[e - p] = 0;
 800347a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e013      	b.n	80034b4 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fc fea9 	bl	80001e4 <strlen>
 8003492:	4603      	mov	r3, r0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3b01      	subs	r3, #1
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	6a3a      	ldr	r2, [r7, #32]
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	4293      	cmp	r3, r2
 80034a2:	bfa8      	it	ge
 80034a4:	4613      	movge	r3, r2
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	461a      	mov	r2, r3
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68b8      	ldr	r0, [r7, #8]
 80034b0:	f012 fc95 	bl	8015dde <strncpy>
		}
	}
	return buff;
 80034b4:	68bb      	ldr	r3, [r7, #8]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3730      	adds	r7, #48	; 0x30
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
	if (',' != *pStart && '*' != *pStart && pStart != NULL) return false;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b2c      	cmp	r3, #44	; 0x2c
 80034ce:	d008      	beq.n	80034e2 <GPS_isEmpty+0x24>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b2a      	cmp	r3, #42	; 0x2a
 80034d6:	d004      	beq.n	80034e2 <GPS_isEmpty+0x24>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <GPS_isEmpty+0x24>
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <GPS_isEmpty+0x26>
	else return true;
 80034e2:	2301      	movs	r3, #1
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f011 fcda 	bl	8014eb4 <atol>
 8003500:	4603      	mov	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <GPS_parseTime+0x94>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0b5b      	lsrs	r3, r3, #13
 800350e:	b2da      	uxtb	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <GPS_parseTime+0x94>)
 800351a:	fba3 1302 	umull	r1, r3, r3, r2
 800351e:	0b5b      	lsrs	r3, r3, #13
 8003520:	f242 7110 	movw	r1, #10000	; 0x2710
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	4a17      	ldr	r2, [pc, #92]	; (8003588 <GPS_parseTime+0x98>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	b2da      	uxtb	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4b12      	ldr	r3, [pc, #72]	; (8003588 <GPS_parseTime+0x98>)
 800353e:	fba3 1302 	umull	r1, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2164      	movs	r1, #100	; 0x64
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003554:	212e      	movs	r1, #46	; 0x2e
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f012 fc1a 	bl	8015d90 <strchr>
 800355c:	4603      	mov	r3, r0
 800355e:	3301      	adds	r3, #1
 8003560:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f011 fca2 	bl	8014eac <atoi>
 8003568:	4603      	mov	r3, r0
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	d1b71759 	.word	0xd1b71759
 8003588:	51eb851f 	.word	0x51eb851f
 800358c:	00000000 	.word	0x00000000

08003590 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff8e 	bl	80034be <GPS_isEmpty>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80a3 	beq.w	80036f6 <GPS_parseLat+0x166>
	{
		strncpy(degreebuff, p, 2);
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	2202      	movs	r2, #2
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f012 fc10 	bl	8015dde <strncpy>
		p += 2;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	3302      	adds	r3, #2
 80035c2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80035c4:	2300      	movs	r3, #0
 80035c6:	72bb      	strb	r3, [r7, #10]
		degree = atol(degreebuff) * 10000000;
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	4618      	mov	r0, r3
 80035ce:	f011 fc71 	bl	8014eb4 <atol>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <GPS_parseLat+0x178>)
 80035d6:	fb03 f302 	mul.w	r3, r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80035dc:	f107 0308 	add.w	r3, r7, #8
 80035e0:	2202      	movs	r2, #2
 80035e2:	6839      	ldr	r1, [r7, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f012 fbfa 	bl	8015dde <strncpy>
		p += 3;										// skip decimal point
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	3303      	adds	r3, #3
 80035ee:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	3302      	adds	r3, #2
 80035f6:	2204      	movs	r2, #4
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f012 fbef 	bl	8015dde <strncpy>
		degreebuff[6] = '\0';
 8003600:	2300      	movs	r3, #0
 8003602:	73bb      	strb	r3, [r7, #14]
		minutes = 50 *	atol(degreebuff) / 3;
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	4618      	mov	r0, r3
 800360a:	f011 fc53 	bl	8014eb4 <atol>
 800360e:	4602      	mov	r2, r0
 8003610:	2332      	movs	r3, #50	; 0x32
 8003612:	fb03 f302 	mul.w	r3, r3, r2
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <GPS_parseLat+0x17c>)
 8003618:	fb82 1203 	smull	r1, r2, r2, r3
 800361c:	17db      	asrs	r3, r3, #31
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	441a      	add	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4a38      	ldr	r2, [pc, #224]	; (8003710 <GPS_parseLat+0x180>)
 8003630:	fb82 1203 	smull	r1, r2, r2, r3
 8003634:	1352      	asrs	r2, r2, #13
 8003636:	17db      	asrs	r3, r3, #31
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff82 	bl	8000544 <__aeabi_i2d>
 8003640:	4604      	mov	r4, r0
 8003642:	460d      	mov	r5, r1
 8003644:	69b8      	ldr	r0, [r7, #24]
 8003646:	f7fc ff7d 	bl	8000544 <__aeabi_i2d>
 800364a:	a32d      	add	r3, pc, #180	; (adr r3, 8003700 <GPS_parseLat+0x170>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f7fc ffe2 	bl	8000618 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc fe26 	bl	80002ac <__adddf3>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	4618      	mov	r0, r3
 8003666:	4621      	mov	r1, r4
 8003668:	f7fd face 	bl	8000c08 <__aeabi_d2f>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c
		float temp_lat = inst->latitudeDegrees;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	617b      	str	r3, [r7, #20]
		//println("[GPS] Lat should be: %.6f", (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0);
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003684:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003714 <GPS_parseLat+0x184>
 8003688:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800368c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003690:	ee17 2a90 	vmov	r2, s15
 8003694:	2364      	movs	r3, #100	; 0x64
 8003696:	fb03 f302 	mul.w	r3, r3, r2
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a6:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8003718 <GPS_parseLat+0x188>
 80036aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036c0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003714 <GPS_parseLat+0x184>
 80036c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		if (inst->latitudeDegrees < 30.0) inst->latitudeDegrees = temp_lat;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80036e0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d400      	bmi.n	80036f0 <GPS_parseLat+0x160>
	}
}
 80036ee:	e002      	b.n	80036f6 <GPS_parseLat+0x166>
		if (inst->latitudeDegrees < 30.0) inst->latitudeDegrees = temp_lat;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80036f6:	bf00      	nop
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bdb0      	pop	{r4, r5, r7, pc}
 80036fe:	bf00      	nop
 8003700:	7110e454 	.word	0x7110e454
 8003704:	3ed92a73 	.word	0x3ed92a73
 8003708:	00989680 	.word	0x00989680
 800370c:	55555556 	.word	0x55555556
 8003710:	14f8b589 	.word	0x14f8b589
 8003714:	42c80000 	.word	0x42c80000
 8003718:	42700000 	.word	0x42700000

0800371c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b53      	cmp	r3, #83	; 0x53
 800372c:	d11c      	bne.n	8003768 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2253      	movs	r2, #83	; 0x53
 8003732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff14 	bl	8000568 <__aeabi_f2d>
 8003740:	4603      	mov	r3, r0
 8003742:	460c      	mov	r4, r1
 8003744:	4618      	mov	r0, r3
 8003746:	4621      	mov	r1, r4
 8003748:	f7fd fa5e 	bl	8000c08 <__aeabi_d2f>
 800374c:	4603      	mov	r3, r0
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef1 7a67 	vneg.f32	s15, s15
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	425a      	negs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
 8003766:	e013      	b.n	8003790 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b4e      	cmp	r3, #78	; 0x4e
 800376e:	d104      	bne.n	800377a <GPS_parseLatDir+0x5e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	224e      	movs	r2, #78	; 0x4e
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003778:	e00a      	b.n	8003790 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b2c      	cmp	r3, #44	; 0x2c
 8003780:	d104      	bne.n	800378c <GPS_parseLatDir+0x70>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800378a:	e001      	b.n	8003790 <GPS_parseLatDir+0x74>
	else return false;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <GPS_parseLatDir+0x76>
	
	return true;
 8003790:	2301      	movs	r3, #1
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fe88 	bl	80034be <GPS_isEmpty>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f083 0301 	eor.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8088 	beq.w	80038cc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	2203      	movs	r2, #3
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f012 fb0a 	bl	8015dde <strncpy>
		p += 3;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	3303      	adds	r3, #3
 80037ce:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4618      	mov	r0, r3
 80037da:	f011 fb6b 	bl	8014eb4 <atol>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b3c      	ldr	r3, [pc, #240]	; (80038d4 <GPS_parseLon+0x138>)
 80037e2:	fb03 f302 	mul.w	r3, r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	2202      	movs	r2, #2
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f012 faf4 	bl	8015dde <strncpy>
		p += 3;										// skip decimal point
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3303      	adds	r3, #3
 80037fa:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	3302      	adds	r3, #2
 8003802:	2204      	movs	r2, #4
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f012 fae9 	bl	8015dde <strncpy>
		degreebuff[6] = '\0';
 800380c:	2300      	movs	r3, #0
 800380e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4618      	mov	r0, r3
 8003816:	f011 fb4d 	bl	8014eb4 <atol>
 800381a:	4602      	mov	r2, r0
 800381c:	2332      	movs	r3, #50	; 0x32
 800381e:	fb03 f302 	mul.w	r3, r3, r2
 8003822:	4a2d      	ldr	r2, [pc, #180]	; (80038d8 <GPS_parseLon+0x13c>)
 8003824:	fb82 1203 	smull	r1, r2, r2, r3
 8003828:	17db      	asrs	r3, r3, #31
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4a28      	ldr	r2, [pc, #160]	; (80038dc <GPS_parseLon+0x140>)
 800383c:	fb82 1203 	smull	r1, r2, r2, r3
 8003840:	1352      	asrs	r2, r2, #13
 8003842:	17db      	asrs	r3, r3, #31
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003858:	eddf 6a21 	vldr	s13, [pc, #132]	; 80038e0 <GPS_parseLon+0x144>
 800385c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003876:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80038e4 <GPS_parseLon+0x148>
 800387a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800387e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003882:	ee17 2a90 	vmov	r2, s15
 8003886:	2364      	movs	r3, #100	; 0x64
 8003888:	fb03 f302 	mul.w	r3, r3, r2
 800388c:	ee07 3a90 	vmov	s15, r3
 8003890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003898:	eddf 6a13 	vldr	s13, [pc, #76]	; 80038e8 <GPS_parseLon+0x14c>
 800389c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80038b2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80038e4 <GPS_parseLon+0x148>
 80038b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80038cc:	bf00      	nop
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	00989680 	.word	0x00989680
 80038d8:	55555556 	.word	0x55555556
 80038dc:	14f8b589 	.word	0x14f8b589
 80038e0:	36c9539c 	.word	0x36c9539c
 80038e4:	42c80000 	.word	0x42c80000
 80038e8:	42700000 	.word	0x42700000

080038ec <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 80038f6:	6839      	ldr	r1, [r7, #0]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fde0 	bl	80034be <GPS_isEmpty>
 80038fe:	4603      	mov	r3, r0
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d034      	beq.n	8003974 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b57      	cmp	r3, #87	; 0x57
 8003910:	d11c      	bne.n	800394c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2257      	movs	r2, #87	; 0x57
 8003916:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fe22 	bl	8000568 <__aeabi_f2d>
 8003924:	4603      	mov	r3, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4618      	mov	r0, r3
 800392a:	4621      	mov	r1, r4
 800392c:	f7fd f96c 	bl	8000c08 <__aeabi_d2f>
 8003930:	4603      	mov	r3, r0
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef1 7a67 	vneg.f32	s15, s15
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	425a      	negs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	649a      	str	r2, [r3, #72]	; 0x48
 800394a:	e013      	b.n	8003974 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b45      	cmp	r3, #69	; 0x45
 8003952:	d104      	bne.n	800395e <GPS_parseLonDir+0x72>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2245      	movs	r2, #69	; 0x45
 8003958:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800395c:	e00a      	b.n	8003974 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b2c      	cmp	r3, #44	; 0x2c
 8003964:	d104      	bne.n	8003970 <GPS_parseLonDir+0x84>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800396e:	e001      	b.n	8003974 <GPS_parseLonDir+0x88>
		else return false;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}

0800397e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b41      	cmp	r3, #65	; 0x41
 800398e:	d10a      	bne.n	80039a6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80039a4:	e00a      	b.n	80039bc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b56      	cmp	r3, #86	; 0x56
 80039ac:	d104      	bne.n	80039b8 <GPS_parseFix+0x3a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80039b6:	e001      	b.n	80039bc <GPS_parseFix+0x3e>
	else return false;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <GPS_parseFix+0x40>
	return true;
 80039bc:	2301      	movs	r3, #1
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	2b2f      	cmp	r3, #47	; 0x2f
 8003a18:	d801      	bhi.n	8003a1e <GPS_parseHex+0x16>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e013      	b.n	8003a46 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	2b39      	cmp	r3, #57	; 0x39
 8003a22:	d803      	bhi.n	8003a2c <GPS_parseHex+0x24>
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	3b30      	subs	r3, #48	; 0x30
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	e00c      	b.n	8003a46 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d801      	bhi.n	8003a36 <GPS_parseHex+0x2e>
 8003a32:	2300      	movs	r3, #0
 8003a34:	e007      	b.n	8003a46 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	2b46      	cmp	r3, #70	; 0x46
 8003a3a:	d803      	bhi.n	8003a44 <GPS_parseHex+0x3c>
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	3b37      	subs	r3, #55	; 0x37
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e000      	b.n	8003a46 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <MPU9250_writeByte>:
#include "stm32f4xx_hal_i2c.h"

// #################### Low level communication ####################

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af04      	add	r7, sp, #16
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	70fb      	strb	r3, [r7, #3]
 8003a72:	4613      	mov	r3, r2
 8003a74:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 10);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	b299      	uxth	r1, r3
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	230a      	movs	r3, #10
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	1cbb      	adds	r3, r7, #2
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2301      	movs	r3, #1
 8003a92:	f003 fcbd 	bl	8007410 <HAL_I2C_Mem_Write>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b088      	sub	sp, #32
 8003aa2:	af04      	add	r7, sp, #16
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 10);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	791b      	ldrb	r3, [r3, #4]
 8003ab2:	b299      	uxth	r1, r3
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	230a      	movs	r3, #10
 8003aba:	9302      	str	r3, [sp, #8]
 8003abc:	2301      	movs	r3, #1
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f003 fd9c 	bl	8007604 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003acc:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003ad6:	b590      	push	{r4, r7, lr}
 8003ad8:	b08f      	sub	sp, #60	; 0x3c
 8003ada:	af04      	add	r7, sp, #16
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	72fb      	strb	r3, [r7, #11]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 30);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	791b      	ldrb	r3, [r3, #4]
 8003af0:	b299      	uxth	r1, r3
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	b29c      	uxth	r4, r3
 8003af6:	7abb      	ldrb	r3, [r7, #10]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	221e      	movs	r2, #30
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2301      	movs	r3, #1
 8003b08:	4622      	mov	r2, r4
 8003b0a:	f003 fd7b 	bl	8007604 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	e00b      	b.n	8003b30 <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f107 0114 	add.w	r1, r7, #20
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	440a      	add	r2, r1
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	7abb      	ldrb	r3, [r7, #10]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	dbef      	blt.n	8003b18 <MPU9250_readBytes+0x42>
	}
}
 8003b38:	bf00      	nop
 8003b3a:	372c      	adds	r7, #44	; 0x2c
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}

08003b40 <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 10);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	795b      	ldrb	r3, [r3, #5]
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	230a      	movs	r3, #10
 8003b60:	9302      	str	r3, [sp, #8]
 8003b62:	2301      	movs	r3, #1
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	1cbb      	adds	r3, r7, #2
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f003 fc50 	bl	8007410 <HAL_I2C_Mem_Write>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 10);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	795b      	ldrb	r3, [r3, #5]
 8003b8c:	b299      	uxth	r1, r3
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	230a      	movs	r3, #10
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	2301      	movs	r3, #1
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f003 fd2f 	bl	8007604 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003ba6:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b08f      	sub	sp, #60	; 0x3c
 8003bb4:	af04      	add	r7, sp, #16
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	72fb      	strb	r3, [r7, #11]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 10);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	795b      	ldrb	r3, [r3, #5]
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	b29c      	uxth	r4, r3
 8003bd0:	7abb      	ldrb	r3, [r7, #10]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	220a      	movs	r2, #10
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2301      	movs	r3, #1
 8003be2:	4622      	mov	r2, r4
 8003be4:	f003 fd0e 	bl	8007604 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf0:	e00b      	b.n	8003c0a <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f107 0114 	add.w	r1, r7, #20
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfe:	440a      	add	r2, r1
 8003c00:	7812      	ldrb	r2, [r2, #0]
 8003c02:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	7abb      	ldrb	r3, [r7, #10]
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	dbef      	blt.n	8003bf2 <AK8963_readBytes+0x42>
	}
}
 8003c12:	bf00      	nop
 8003c14:	372c      	adds	r7, #44	; 0x2c
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}

08003c1a <MPU9250_readAccelData>:

static void MPU9250_readAccelData(MPU9250* inst)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	2206      	movs	r2, #6
 8003c28:	213b      	movs	r1, #59	; 0x3b
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ff53 	bl	8003ad6 <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 8003c30:	7a3b      	ldrb	r3, [r7, #8]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	7a7b      	ldrb	r3, [r7, #9]
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 8003c60:	7abb      	ldrb	r3, [r7, #10]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	7afb      	ldrb	r3, [r7, #11]
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 8003c90:	7b3b      	ldrb	r3, [r7, #12]
 8003c92:	021b      	lsls	r3, r3, #8
 8003c94:	b21a      	sxth	r2, r3
 8003c96:	7b7b      	ldrb	r3, [r7, #13]
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003cac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <MPU9250_readGyroData>:
static void MPU9250_readGyroData(MPU9250* inst)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	2143      	movs	r1, #67	; 0x43
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fefc 	bl	8003ad6 <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 8003cde:	7a3b      	ldrb	r3, [r7, #8]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	b21a      	sxth	r2, r3
 8003ce4:	7a7b      	ldrb	r3, [r7, #9]
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 8003d0e:	7abb      	ldrb	r3, [r7, #10]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	b21a      	sxth	r2, r3
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	ee07 3a90 	vmov	s15, r3
 8003d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 8003d3e:	7b3b      	ldrb	r3, [r7, #12]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	7b7b      	ldrb	r3, [r7, #13]
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <MPU9250_readMagData>:
static void MPU9250_readMagData(MPU9250* inst)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 8003d7e:	2102      	movs	r1, #2
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fef9 	bl	8003b78 <AK8963_readByte>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d064      	beq.n	8003e5a <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	2207      	movs	r2, #7
 8003d96:	2103      	movs	r1, #3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff09 	bl	8003bb0 <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d156      	bne.n	8003e5a <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 8003dac:	7a7b      	ldrb	r3, [r7, #9]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	b21a      	sxth	r2, r3
 8003db2:	7a3b      	ldrb	r3, [r7, #8]
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	b21b      	sxth	r3, r3
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	7abb      	ldrb	r3, [r7, #10]
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 8003e20:	7b7b      	ldrb	r3, [r7, #13]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	b21a      	sxth	r2, r3
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <MPU9250_getRes>:
	MPU9250_readBytes(inst, MPU9250_TEMP_OUT_H, 2, &rawData[0]);
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}
static void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	7b9b      	ldrb	r3, [r3, #14]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <MPU9250_getRes+0x18>
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d004      	beq.n	8003e84 <MPU9250_getRes+0x20>
 8003e7a:	e007      	b.n	8003e8c <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <MPU9250_getRes+0xbc>)
 8003e80:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e82:	e003      	b.n	8003e8c <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <MPU9250_getRes+0xc0>)
 8003e88:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e8a:	bf00      	nop
	}
	switch (config->Gscale)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7b5b      	ldrb	r3, [r3, #13]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d81b      	bhi.n	8003ecc <MPU9250_getRes+0x68>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <MPU9250_getRes+0x38>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb5 	.word	0x08003eb5
 8003ea4:	08003ebd 	.word	0x08003ebd
 8003ea8:	08003ec5 	.word	0x08003ec5
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <MPU9250_getRes+0xc4>)
 8003eb0:	649a      	str	r2, [r3, #72]	; 0x48
 8003eb2:	e00b      	b.n	8003ecc <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <MPU9250_getRes+0xc8>)
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
 8003eba:	e007      	b.n	8003ecc <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <MPU9250_getRes+0xcc>)
 8003ec0:	649a      	str	r2, [r3, #72]	; 0x48
 8003ec2:	e003      	b.n	8003ecc <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <MPU9250_getRes+0xd0>)
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48
 8003eca:	bf00      	nop
	}
	switch (config->Ascale)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	7b1b      	ldrb	r3, [r3, #12]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d81f      	bhi.n	8003f14 <MPU9250_getRes+0xb0>
 8003ed4:	a201      	add	r2, pc, #4	; (adr r2, 8003edc <MPU9250_getRes+0x78>)
 8003ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eda:	bf00      	nop
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003ef7 	.word	0x08003ef7
 8003ee4:	08003f01 	.word	0x08003f01
 8003ee8:	08003f0b 	.word	0x08003f0b
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ef4:	e00e      	b.n	8003f14 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
 8003efe:	e009      	b.n	8003f14 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44
 8003f08:	e004      	b.n	8003f14 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
 8003f12:	bf00      	nop
	}
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40bfebff 	.word	0x40bfebff
 8003f24:	3fbfebff 	.word	0x3fbfebff
 8003f28:	3bfa0000 	.word	0x3bfa0000
 8003f2c:	3c7a0000 	.word	0x3c7a0000
 8003f30:	3cfa0000 	.word	0x3cfa0000
 8003f34:	3d7a0000 	.word	0x3d7a0000

08003f38 <MPU9250_init>:

// #################### Public routines ####################

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	dd0a      	ble.n	8003f76 <MPU9250_init+0x3e>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
 8003f74:	e004      	b.n	8003f80 <MPU9250_init+0x48>
	else inst->alg_delay = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	inst->euler_delay = 1000000.0 / config->euler_rate;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fc faef 	bl	8000568 <__aeabi_f2d>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	a185      	add	r1, pc, #532	; (adr r1, 80041a8 <MPU9250_init+0x270>)
 8003f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f98:	f7fc fc68 	bl	800086c <__aeabi_ddiv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	f7fc fe10 	bl	8000bc8 <__aeabi_d2uiz>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	int i;
	for (i = 0; i < 3; i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e020      	b.n	8003ff8 <MPU9250_init+0xc0>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	332c      	adds	r3, #44	; 0x2c
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3326      	adds	r3, #38	; 0x26
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	3322      	adds	r3, #34	; 0x22
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	dddb      	ble.n	8003fb6 <MPU9250_init+0x7e>
	}
	inst->q[0] = 1.0f;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	//Self test was there
	delay(1000);
 8004008:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800400c:	f002 fa26 	bl	800645c <HAL_Delay>
	MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff26 	bl	8003e64 <MPU9250_getRes>

	if (config->calibrate)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	7c1b      	ldrb	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <MPU9250_init+0xf0>
	{
		MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f9ff 	bl	8004424 <MPU9250_calibrate>
 8004026:	e02f      	b.n	8004088 <MPU9250_init+0x150>
	}
	else
	{										// Or load biases from config
		for (i = 0; i < 3; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e029      	b.n	8004082 <MPU9250_init+0x14a>
		{
			inst->accelBias[i] = config->accelBias[i];
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	330a      	adds	r3, #10
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	3304      	adds	r3, #4
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	331a      	adds	r3, #26
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	601a      	str	r2, [r3, #0]
			inst->gyroBias[i] = config->gyroBias[i];
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3308      	adds	r3, #8
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3316      	adds	r3, #22
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3304      	adds	r3, #4
 8004060:	601a      	str	r2, [r3, #0]
			inst->magBias[i] = config->magBias[i];
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3304      	adds	r3, #4
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3314      	adds	r3, #20
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b02      	cmp	r3, #2
 8004086:	ddd2      	ble.n	800402e <MPU9250_init+0xf6>
		}
	}
	delay(1000);
 8004088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408c:	f002 f9e6 	bl	800645c <HAL_Delay>
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 8004090:	2200      	movs	r2, #0
 8004092:	216b      	movs	r1, #107	; 0x6b
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fce6 	bl	8003a66 <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 800409a:	2064      	movs	r0, #100	; 0x64
 800409c:	f002 f9de 	bl	800645c <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80040a0:	2201      	movs	r2, #1
 80040a2:	216b      	movs	r1, #107	; 0x6b
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fcde 	bl	8003a66 <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 80040aa:	2064      	movs	r0, #100	; 0x64
 80040ac:	f002 f9d6 	bl	800645c <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 80040b0:	2203      	movs	r2, #3
 80040b2:	211a      	movs	r1, #26
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff fcd6 	bl	8003a66 <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 80040ba:	2064      	movs	r0, #100	; 0x64
 80040bc:	f002 f9ce 	bl	800645c <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 80040c0:	2204      	movs	r2, #4
 80040c2:	2119      	movs	r1, #25
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff fcce 	bl	8003a66 <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 80040ca:	211b      	movs	r1, #27
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fce6 	bl	8003a9e <MPU9250_readByte>
 80040d2:	4603      	mov	r3, r0
 80040d4:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 80040d6:	7afb      	ldrb	r3, [r7, #11]
 80040d8:	f023 0303 	bic.w	r3, r3, #3
 80040dc:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80040de:	7afb      	ldrb	r3, [r7, #11]
 80040e0:	f023 0318 	bic.w	r3, r3, #24
 80040e4:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	7b5b      	ldrb	r3, [r3, #13]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	461a      	mov	r2, r3
 80040fc:	211b      	movs	r1, #27
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fcb1 	bl	8003a66 <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 8004104:	211c      	movs	r1, #28
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fcc9 	bl	8003a9e <MPU9250_readByte>
 800410c:	4603      	mov	r3, r0
 800410e:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8004110:	7afb      	ldrb	r3, [r7, #11]
 8004112:	f023 0318 	bic.w	r3, r3, #24
 8004116:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	7b1b      	ldrb	r3, [r3, #12]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	b25a      	sxtb	r2, r3
 8004120:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004124:	4313      	orrs	r3, r2
 8004126:	b25b      	sxtb	r3, r3
 8004128:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	461a      	mov	r2, r3
 800412e:	211c      	movs	r1, #28
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fc98 	bl	8003a66 <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 8004136:	211d      	movs	r1, #29
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fcb0 	bl	8003a9e <MPU9250_readByte>
 800413e:	4603      	mov	r3, r0
 8004140:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	f023 030f 	bic.w	r3, r3, #15
 8004148:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	f043 0303 	orr.w	r3, r3, #3
 8004150:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	461a      	mov	r2, r3
 8004156:	211d      	movs	r1, #29
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fc84 	bl	8003a66 <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 800415e:	2222      	movs	r2, #34	; 0x22
 8004160:	2137      	movs	r1, #55	; 0x37
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fc7f 	bl	8003a66 <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 8004168:	2201      	movs	r2, #1
 800416a:	2138      	movs	r1, #56	; 0x38
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fc7a 	bl	8003a66 <MPU9250_writeByte>
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}
	*/

	inst->mpu_active = true;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	799b      	ldrb	r3, [r3, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <MPU9250_init+0x254>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	79db      	ldrb	r3, [r3, #7]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MPU9250_init+0x254>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <MPU9250_init+0x256>
 800418c:	2300      	movs	r3, #0
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	721a      	strb	r2, [r3, #8]
	return true;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd90      	pop	{r4, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	f3af 8000 	nop.w
 80041a8:	00000000 	.word	0x00000000
 80041ac:	412e8480 	.word	0x412e8480

080041b0 <AK8963_init>:

bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	delay(1000);
 80041ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041be:	f002 f94d 	bl	800645c <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 80041c2:	2200      	movs	r2, #0
 80041c4:	210a      	movs	r1, #10
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff fcba 	bl	8003b40 <AK8963_writeByte>
	delay(10);
 80041cc:	200a      	movs	r0, #10
 80041ce:	f002 f945 	bl	800645c <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 80041d2:	220f      	movs	r2, #15
 80041d4:	210a      	movs	r1, #10
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fcb2 	bl	8003b40 <AK8963_writeByte>
	delay(10);
 80041dc:	200a      	movs	r0, #10
 80041de:	f002 f93d 	bl	800645c <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	2203      	movs	r2, #3
 80041e8:	2110      	movs	r1, #16
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff fce0 	bl	8003bb0 <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 80041f0:	7a3b      	ldrb	r3, [r7, #8]
 80041f2:	3b80      	subs	r3, #128	; 0x80
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041fc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80042f8 <AK8963_init+0x148>
 8004200:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8004212:	7a7b      	ldrb	r3, [r7, #9]
 8004214:	3b80      	subs	r3, #128	; 0x80
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800421e:	eddf 6a36 	vldr	s13, [pc, #216]	; 80042f8 <AK8963_init+0x148>
 8004222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800422a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8004234:	7abb      	ldrb	r3, [r7, #10]
 8004236:	3b80      	subs	r3, #128	; 0x80
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004240:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80042f8 <AK8963_init+0x148>
 8004244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800424c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004256:	2200      	movs	r2, #0
 8004258:	210a      	movs	r1, #10
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fc70 	bl	8003b40 <AK8963_writeByte>
	delay(10);
 8004260:	200a      	movs	r0, #10
 8004262:	f002 f8fb 	bl	800645c <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7b9b      	ldrb	r3, [r3, #14]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	b25a      	sxtb	r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	7bdb      	ldrb	r3, [r3, #15]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b25b      	sxtb	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	210a      	movs	r1, #10
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fc5e 	bl	8003b40 <AK8963_writeByte>
	delay(10);
 8004284:	200a      	movs	r0, #10
 8004286:	f002 f8e9 	bl	800645c <HAL_Delay>

	if (config->calibrate)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	7c1b      	ldrb	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fe26 	bl	8004ee4 <AK8963_calibrate>
 8004298:	e015      	b.n	80042c6 <AK8963_init+0x116>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e00f      	b.n	80042c0 <AK8963_init+0x110>
		{
			inst->magBias[i] = config->magBias[i];
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3314      	adds	r3, #20
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	ddec      	ble.n	80042a0 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	799b      	ldrb	r3, [r3, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <AK8963_init+0x130>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	79db      	ldrb	r3, [r3, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <AK8963_init+0x130>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <AK8963_init+0x132>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	721a      	strb	r2, [r3, #8]
	return true;
 80042ec:	2301      	movs	r3, #1
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	43800000 	.word	0x43800000

080042fc <MPU9250_present>:

bool MPU9250_present(MPU9250* inst) { MPU9250_reset(inst); return (MPU9250_readByte(inst, MPU9250_WHO_AM_I) == 0x71); }
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f87d 	bl	8004404 <MPU9250_reset>
 800430a:	2175      	movs	r1, #117	; 0x75
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fbc6 	bl	8003a9e <MPU9250_readByte>
 8004312:	4603      	mov	r3, r0
 8004314:	2b71      	cmp	r3, #113	; 0x71
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <AK8963_present>:
bool AK8963_present(MPU9250* inst) { MPU9250_reset(inst); return (AK8963_readByte(inst, AK8963_WHO_AM_I) == 0x48); }
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f868 	bl	8004404 <MPU9250_reset>
 8004334:	2100      	movs	r1, #0
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fc1e 	bl	8003b78 <AK8963_readByte>
 800433c:	4603      	mov	r3, r0
 800433e:	2b48      	cmp	r3, #72	; 0x48
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 8004358:	213a      	movs	r1, #58	; 0x3a
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fb9f 	bl	8003a9e <MPU9250_readByte>
 8004360:	4603      	mov	r3, r0
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff fc55 	bl	8003c1a <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fca9 	bl	8003cc8 <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fcfd 	bl	8003d76 <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 800437c:	f7ff fb69 	bl	8003a52 <micros>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004392:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004400 <MPU9250_update+0xb0>
 8004396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	if (inst->alg_deltat >= inst->alg_delay)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80043ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	db1f      	blt.n	80043f6 <MPU9250_update+0xa6>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 f886 	bl	80054c8 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80043bc:	f7ff fb49 	bl	8003a52 <micros>
 80043c0:	4602      	mov	r2, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80043c8:	f7ff fb43 	bl	8003a52 <micros>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043dc:	429a      	cmp	r2, r3
 80043de:	d30a      	bcc.n	80043f6 <MPU9250_update+0xa6>
		{
			MPU9250_updateEuler(inst);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fe91 	bl	8005108 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80043e6:	f7ff fb34 	bl	8003a52 <micros>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			return true;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <MPU9250_update+0xa8>
		}
	}
	return false;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	49742400 	.word	0x49742400

08004404 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	216b      	movs	r1, #107	; 0x6b
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff fb28 	bl	8003a66 <MPU9250_writeByte>
	delay(100);
 8004416:	2064      	movs	r0, #100	; 0x64
 8004418:	f002 f820 	bl	800645c <HAL_Delay>
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8004424:	b580      	push	{r7, lr}
 8004426:	b098      	sub	sp, #96	; 0x60
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 800442c:	2300      	movs	r3, #0
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
 8004430:	2300      	movs	r3, #0
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
 8004434:	2300      	movs	r3, #0
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004438:	2300      	movs	r3, #0
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	2300      	movs	r3, #0
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004440:	2300      	movs	r3, #0
 8004442:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ffdd 	bl	8004404 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 800444a:	2201      	movs	r2, #1
 800444c:	216b      	movs	r1, #107	; 0x6b
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fb09 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004454:	2200      	movs	r2, #0
 8004456:	216c      	movs	r1, #108	; 0x6c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fb04 	bl	8003a66 <MPU9250_writeByte>
	delay(200);
 800445e:	20c8      	movs	r0, #200	; 0xc8
 8004460:	f001 fffc 	bl	800645c <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8004464:	2200      	movs	r2, #0
 8004466:	2138      	movs	r1, #56	; 0x38
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fafc 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 800446e:	2200      	movs	r2, #0
 8004470:	2123      	movs	r1, #35	; 0x23
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff faf7 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 8004478:	2200      	movs	r2, #0
 800447a:	216b      	movs	r1, #107	; 0x6b
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff faf2 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8004482:	2200      	movs	r2, #0
 8004484:	2124      	movs	r1, #36	; 0x24
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff faed 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 800448c:	2200      	movs	r2, #0
 800448e:	216a      	movs	r1, #106	; 0x6a
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fae8 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 8004496:	220c      	movs	r2, #12
 8004498:	216a      	movs	r1, #106	; 0x6a
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fae3 	bl	8003a66 <MPU9250_writeByte>
	delay(15);
 80044a0:	200f      	movs	r0, #15
 80044a2:	f001 ffdb 	bl	800645c <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80044a6:	2201      	movs	r2, #1
 80044a8:	211a      	movs	r1, #26
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fadb 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80044b0:	2200      	movs	r2, #0
 80044b2:	2119      	movs	r1, #25
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff fad6 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80044ba:	2200      	movs	r2, #0
 80044bc:	211b      	movs	r1, #27
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff fad1 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80044c4:	2200      	movs	r2, #0
 80044c6:	211c      	movs	r1, #28
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff facc 	bl	8003a66 <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 80044ce:	2383      	movs	r3, #131	; 0x83
 80044d0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 80044d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 80044dc:	2240      	movs	r2, #64	; 0x40
 80044de:	216a      	movs	r1, #106	; 0x6a
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fac0 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80044e6:	2278      	movs	r2, #120	; 0x78
 80044e8:	2123      	movs	r1, #35	; 0x23
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fabb 	bl	8003a66 <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 80044f0:	2028      	movs	r0, #40	; 0x28
 80044f2:	f001 ffb3 	bl	800645c <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 80044f6:	2200      	movs	r2, #0
 80044f8:	2123      	movs	r1, #35	; 0x23
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fab3 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8004500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004504:	2202      	movs	r2, #2
 8004506:	2172      	movs	r1, #114	; 0x72
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fae4 	bl	8003ad6 <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 800450e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b21a      	sxth	r2, r3
 8004516:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800451a:	b21b      	sxth	r3, r3
 800451c:	4313      	orrs	r3, r2
 800451e:	b21b      	sxth	r3, r3
 8004520:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8004524:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004528:	4aa9      	ldr	r2, [pc, #676]	; (80047d0 <MPU9250_calibrate+0x3ac>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	08db      	lsrs	r3, r3, #3
 8004530:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800453a:	e071      	b.n	8004620 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 800453c:	2300      	movs	r3, #0
 800453e:	82bb      	strh	r3, [r7, #20]
 8004540:	2300      	movs	r3, #0
 8004542:	82fb      	strh	r3, [r7, #22]
 8004544:	2300      	movs	r3, #0
 8004546:	833b      	strh	r3, [r7, #24]
 8004548:	2300      	movs	r3, #0
 800454a:	81bb      	strh	r3, [r7, #12]
 800454c:	2300      	movs	r3, #0
 800454e:	81fb      	strh	r3, [r7, #14]
 8004550:	2300      	movs	r3, #0
 8004552:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8004554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004558:	220c      	movs	r2, #12
 800455a:	2174      	movs	r1, #116	; 0x74
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff faba 	bl	8003ad6 <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004562:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	b21a      	sxth	r2, r3
 800456a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800456e:	b21b      	sxth	r3, r3
 8004570:	4313      	orrs	r3, r2
 8004572:	b21b      	sxth	r3, r3
 8004574:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8004576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	b21a      	sxth	r2, r3
 800457e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004582:	b21b      	sxth	r3, r3
 8004584:	4313      	orrs	r3, r2
 8004586:	b21b      	sxth	r3, r3
 8004588:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800458a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	b21a      	sxth	r2, r3
 8004592:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004596:	b21b      	sxth	r3, r3
 8004598:	4313      	orrs	r3, r2
 800459a:	b21b      	sxth	r3, r3
 800459c:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800459e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	b21a      	sxth	r2, r3
 80045a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045aa:	b21b      	sxth	r3, r3
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b21b      	sxth	r3, r3
 80045b0:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80045b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	b21a      	sxth	r2, r3
 80045ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80045be:	b21b      	sxth	r3, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80045c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	b21a      	sxth	r2, r3
 80045ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045d2:	b21b      	sxth	r3, r3
 80045d4:	4313      	orrs	r3, r2
 80045d6:	b21b      	sxth	r3, r3
 80045d8:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 80045e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045ea:	4413      	add	r3, r2
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 80045ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80045f4:	4413      	add	r3, r2
 80045f6:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80045f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004608:	4413      	add	r3, r2
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 8004616:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800461a:	3301      	adds	r3, #1
 800461c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004620:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004624:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004628:	429a      	cmp	r2, r3
 800462a:	d387      	bcc.n	800453c <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 800462c:	2300      	movs	r3, #0
 800462e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004632:	e078      	b.n	8004726 <MPU9250_calibrate+0x302>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8004634:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800463e:	4413      	add	r3, r2
 8004640:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8004644:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004648:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800464c:	fb91 f2f2 	sdiv	r2, r1, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004656:	440b      	add	r3, r1
 8004658:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 800465c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004666:	4413      	add	r3, r2
 8004668:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 800466c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004670:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004674:	fb91 f2f2 	sdiv	r2, r1, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800467e:	440b      	add	r3, r1
 8004680:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8004684:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800468e:	4413      	add	r3, r2
 8004690:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004694:	425b      	negs	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	da00      	bge.n	800469c <MPU9250_calibrate+0x278>
 800469a:	3303      	adds	r3, #3
 800469c:	109b      	asrs	r3, r3, #2
 800469e:	121a      	asrs	r2, r3, #8
 80046a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046ac:	440b      	add	r3, r1
 80046ae:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80046b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046bc:	4413      	add	r3, r2
 80046be:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80046c2:	425b      	negs	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	da00      	bge.n	80046ca <MPU9250_calibrate+0x2a6>
 80046c8:	3303      	adds	r3, #3
 80046ca:	109b      	asrs	r3, r3, #2
 80046cc:	461a      	mov	r2, r3
 80046ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	3301      	adds	r3, #1
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80046dc:	440b      	add	r3, r1
 80046de:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 80046e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046ec:	4413      	add	r3, r2
 80046ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046fa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004706:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	3316      	adds	r3, #22
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	3304      	adds	r3, #4
 8004718:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 800471c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004720:	3301      	adds	r3, #1
 8004722:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004726:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800472a:	2b02      	cmp	r3, #2
 800472c:	d982      	bls.n	8004634 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 800472e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	dd05      	ble.n	8004740 <MPU9250_calibrate+0x31c>
 8004734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004736:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
 800473e:	e004      	b.n	800474a <MPU9250_calibrate+0x326>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8004740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004742:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004746:	4413      	add	r3, r2
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	2300      	movs	r3, #0
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
 8004752:	2300      	movs	r3, #0
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 8004756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800475a:	2202      	movs	r2, #2
 800475c:	2177      	movs	r1, #119	; 0x77
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff f9b9 	bl	8003ad6 <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004764:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b21b      	sxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004772:	4313      	orrs	r3, r2
 8004774:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 8004776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800477a:	2202      	movs	r2, #2
 800477c:	217a      	movs	r1, #122	; 0x7a
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff f9a9 	bl	8003ad6 <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	b21b      	sxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004792:	4313      	orrs	r3, r2
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 8004796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479a:	2202      	movs	r2, #2
 800479c:	217d      	movs	r1, #125	; 0x7d
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff f999 	bl	8003ad6 <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 80047a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	b21b      	sxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80047b2:	4313      	orrs	r3, r2
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80047b6:	2301      	movs	r3, #1
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 80047ba:	2300      	movs	r3, #0
 80047bc:	773b      	strb	r3, [r7, #28]
 80047be:	2300      	movs	r3, #0
 80047c0:	777b      	strb	r3, [r7, #29]
 80047c2:	2300      	movs	r3, #0
 80047c4:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80047cc:	e096      	b.n	80048fc <MPU9250_calibrate+0x4d8>
 80047ce:	bf00      	nop
 80047d0:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 80047d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047de:	4413      	add	r3, r2
 80047e0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <MPU9250_calibrate+0x3da>
 80047ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047f6:	4413      	add	r3, r2
 80047f8:	2201      	movs	r2, #1
 80047fa:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80047fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004808:	4413      	add	r3, r2
 800480a:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800480e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004818:	440b      	add	r3, r1
 800481a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da00      	bge.n	8004824 <MPU9250_calibrate+0x400>
 8004822:	3307      	adds	r3, #7
 8004824:	10db      	asrs	r3, r3, #3
 8004826:	425b      	negs	r3, r3
 8004828:	4619      	mov	r1, r3
 800482a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800482e:	440a      	add	r2, r1
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004836:	440b      	add	r3, r1
 8004838:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 800483c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004846:	4413      	add	r3, r2
 8004848:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800484c:	121a      	asrs	r2, r3, #8
 800484e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800485a:	440b      	add	r3, r1
 800485c:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8004860:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800486a:	4413      	add	r3, r2
 800486c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004870:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	3301      	adds	r3, #1
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800487e:	440b      	add	r3, r1
 8004880:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8004884:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	3301      	adds	r3, #1
 800488c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004890:	4413      	add	r3, r2
 8004892:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8004896:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800489a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800489e:	4413      	add	r3, r2
 80048a0:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 80048a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	3301      	adds	r3, #1
 80048ac:	430a      	orrs	r2, r1
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048b4:	440b      	add	r3, r1
 80048b6:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 80048ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048c4:	4413      	add	r3, r2
 80048c6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80048d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	331a      	adds	r3, #26
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 80048f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048f6:	3301      	adds	r3, #1
 80048f8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80048fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004900:	2b02      	cmp	r3, #2
 8004902:	f67f af67 	bls.w	80047d4 <MPU9250_calibrate+0x3b0>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 8004906:	bf00      	nop
 8004908:	3760      	adds	r7, #96	; 0x60
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop

08004910 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b0a2      	sub	sp, #136	; 0x88
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8004918:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
	inst->gRes = 1;											// Configuration values (must?) not affect readings
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800495c:	649a      	str	r2, [r3, #72]	; 0x48
	int i = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800496a:	e017      	b.n	800499c <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004972:	331a      	adds	r3, #26
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004984:	3316      	adds	r3, #22
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	3304      	adds	r3, #4
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004996:	3301      	adds	r3, #1
 8004998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800499c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	dde3      	ble.n	800496c <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 80049a4:	2200      	movs	r2, #0
 80049a6:	2119      	movs	r1, #25
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff f85c 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80049ae:	2202      	movs	r2, #2
 80049b0:	211a      	movs	r1, #26
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff f857 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 80049b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	211b      	movs	r1, #27
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff f84e 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80049ca:	2202      	movs	r2, #2
 80049cc:	211d      	movs	r1, #29
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f849 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 80049d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	211c      	movs	r1, #28
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff f840 	bl	8003a66 <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049ec:	e040      	b.n	8004a70 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff f913 	bl	8003c1a <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 80049f4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80049fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a02:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8004a06:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a14:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8004a18:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff f94c 	bl	8003cc8 <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8004a30:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8004a42:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a50:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8004a54:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a62:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a74:	2bc7      	cmp	r3, #199	; 0xc7
 8004a76:	ddba      	ble.n	80049ee <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a7e:	e030      	b.n	8004ae2 <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8004a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3b34      	subs	r3, #52	; 0x34
 8004a8e:	ed93 7a00 	vldr	s14, [r3]
 8004a92:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004d28 <MPU9250_SelfTest+0x418>
 8004a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3b34      	subs	r3, #52	; 0x34
 8004aa8:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 8004aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b28      	subs	r3, #40	; 0x28
 8004aba:	ed93 7a00 	vldr	s14, [r3]
 8004abe:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004d28 <MPU9250_SelfTest+0x418>
 8004ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b28      	subs	r3, #40	; 0x28
 8004ad4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004adc:	3301      	adds	r3, #1
 8004ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	ddca      	ble.n	8004a80 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8004aea:	22e0      	movs	r2, #224	; 0xe0
 8004aec:	211c      	movs	r1, #28
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe ffb9 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004af4:	22e0      	movs	r2, #224	; 0xe0
 8004af6:	211b      	movs	r1, #27
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fe ffb4 	bl	8003a66 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004afe:	2019      	movs	r0, #25
 8004b00:	f001 fcac 	bl	800645c <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004b04:	2300      	movs	r3, #0
 8004b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b0a:	e040      	b.n	8004b8e <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff f884 	bl	8003c1a <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 8004b12:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b20:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 8004b24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b32:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8004b36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b44:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff f8bd 	bl	8003cc8 <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 8004b4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8004b60:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 8004b72:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b80:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b92:	2bc7      	cmp	r3, #199	; 0xc7
 8004b94:	ddba      	ble.n	8004b0c <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b9c:	e030      	b.n	8004c00 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 8004b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b40      	subs	r3, #64	; 0x40
 8004bac:	ed93 7a00 	vldr	s14, [r3]
 8004bb0:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004d28 <MPU9250_SelfTest+0x418>
 8004bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3b40      	subs	r3, #64	; 0x40
 8004bc6:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 8004bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3b4c      	subs	r3, #76	; 0x4c
 8004bd8:	ed93 7a00 	vldr	s14, [r3]
 8004bdc:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004d28 <MPU9250_SelfTest+0x418>
 8004be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b4c      	subs	r3, #76	; 0x4c
 8004bf2:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	ddca      	ble.n	8004b9e <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 8004c08:	2200      	movs	r2, #0
 8004c0a:	211c      	movs	r1, #28
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7fe ff2a 	bl	8003a66 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 8004c12:	2200      	movs	r2, #0
 8004c14:	211b      	movs	r1, #27
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe ff25 	bl	8003a66 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004c1c:	2019      	movs	r0, #25
 8004c1e:	f001 fc1d 	bl	800645c <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 8004c22:	210d      	movs	r1, #13
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fe ff3a 	bl	8003a9e <MPU9250_readByte>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8004c30:	210e      	movs	r1, #14
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fe ff33 	bl	8003a9e <MPU9250_readByte>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 8004c3e:	210f      	movs	r1, #15
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fe ff2c 	bl	8003a9e <MPU9250_readByte>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe ff25 	bl	8003a9e <MPU9250_readByte>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fe ff1e 	bl	8003a9e <MPU9250_readByte>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8004c68:	2102      	movs	r1, #2
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe ff17 	bl	8003a9e <MPU9250_readByte>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c7c:	e048      	b.n	8004d10 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 8004c7e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004c82:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c92:	ee17 0a90 	vmov	r0, s15
 8004c96:	f7fb fc67 	bl	8000568 <__aeabi_f2d>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004ca2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ca6:	4413      	add	r3, r2
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb2:	ee17 0a90 	vmov	r0, s15
 8004cb6:	f7fb fc57 	bl	8000568 <__aeabi_f2d>
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <MPU9250_SelfTest+0x41c>)
 8004cc0:	f7fb faf2 	bl	80002a8 <__aeabi_dsub>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	ec43 2b17 	vmov	d7, r2, r3
 8004ccc:	eeb0 1a47 	vmov.f32	s2, s14
 8004cd0:	eef0 1a67 	vmov.f32	s3, s15
 8004cd4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004d20 <MPU9250_SelfTest+0x410>
 8004cd8:	f014 f820 	bl	8018d1c <pow>
 8004cdc:	ec53 2b10 	vmov	r2, r3, d0
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	f7fb fc98 	bl	8000618 <__aeabi_dmul>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	4618      	mov	r0, r3
 8004cee:	4621      	mov	r1, r4
 8004cf0:	f7fb ff8a 	bl	8000c08 <__aeabi_d2f>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004d00:	440b      	add	r3, r1
 8004d02:	3b64      	subs	r3, #100	; 0x64
 8004d04:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	ddb2      	ble.n	8004c7e <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004d18:	2300      	movs	r3, #0
 8004d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d1c:	e09b      	b.n	8004e56 <MPU9250_SelfTest+0x546>
 8004d1e:	bf00      	nop
 8004d20:	c28f5c29 	.word	0xc28f5c29
 8004d24:	3ff028f5 	.word	0x3ff028f5
 8004d28:	43480000 	.word	0x43480000
 8004d2c:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8004d30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d38:	4413      	add	r3, r2
 8004d3a:	3b40      	subs	r3, #64	; 0x40
 8004d3c:	ed93 7a00 	vldr	s14, [r3]
 8004d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d48:	4413      	add	r3, r2
 8004d4a:	3b34      	subs	r3, #52	; 0x34
 8004d4c:	edd3 7a00 	vldr	s15, [r3]
 8004d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d54:	ee17 0a90 	vmov	r0, s15
 8004d58:	f7fb fc06 	bl	8000568 <__aeabi_f2d>
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	4b5f      	ldr	r3, [pc, #380]	; (8004ee0 <MPU9250_SelfTest+0x5d0>)
 8004d62:	f7fb fc59 	bl	8000618 <__aeabi_dmul>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	4625      	mov	r5, r4
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004d76:	4413      	add	r3, r2
 8004d78:	3b64      	subs	r3, #100	; 0x64
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fbf3 	bl	8000568 <__aeabi_f2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fd6f 	bl	800086c <__aeabi_ddiv>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	4618      	mov	r0, r3
 8004d94:	4621      	mov	r1, r4
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	4b51      	ldr	r3, [pc, #324]	; (8004ee0 <MPU9250_SelfTest+0x5d0>)
 8004d9c:	f7fb fa84 	bl	80002a8 <__aeabi_dsub>
 8004da0:	4603      	mov	r3, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	4618      	mov	r0, r3
 8004da6:	4621      	mov	r1, r4
 8004da8:	f7fb ff2e 	bl	8000c08 <__aeabi_d2f>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004db6:	440b      	add	r3, r1
 8004db8:	3b7c      	subs	r3, #124	; 0x7c
 8004dba:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8004dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b4c      	subs	r3, #76	; 0x4c
 8004dc8:	ed93 7a00 	vldr	s14, [r3]
 8004dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3b28      	subs	r3, #40	; 0x28
 8004dd8:	edd3 7a00 	vldr	s15, [r3]
 8004ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de0:	ee17 0a90 	vmov	r0, s15
 8004de4:	f7fb fbc0 	bl	8000568 <__aeabi_f2d>
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <MPU9250_SelfTest+0x5d0>)
 8004dee:	f7fb fc13 	bl	8000618 <__aeabi_dmul>
 8004df2:	4603      	mov	r3, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	4625      	mov	r5, r4
 8004df8:	461c      	mov	r4, r3
 8004dfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dfc:	3303      	adds	r3, #3
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e04:	4413      	add	r3, r2
 8004e06:	3b64      	subs	r3, #100	; 0x64
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb fbac 	bl	8000568 <__aeabi_f2d>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fd28 	bl	800086c <__aeabi_ddiv>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4618      	mov	r0, r3
 8004e22:	4621      	mov	r1, r4
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <MPU9250_SelfTest+0x5d0>)
 8004e2a:	f7fb fa3d 	bl	80002a8 <__aeabi_dsub>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	460c      	mov	r4, r1
 8004e32:	4619      	mov	r1, r3
 8004e34:	4622      	mov	r2, r4
 8004e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e38:	1cdc      	adds	r4, r3, #3
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	f7fb fee3 	bl	8000c08 <__aeabi_d2f>
 8004e42:	4602      	mov	r2, r0
 8004e44:	00a3      	lsls	r3, r4, #2
 8004e46:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3b7c      	subs	r3, #124	; 0x7c
 8004e4e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e52:	3301      	adds	r3, #1
 8004e54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	f77f af69 	ble.w	8004d30 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
	#endif
	bool passed = true;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004e64:	2300      	movs	r3, #0
 8004e66:	677b      	str	r3, [r7, #116]	; 0x74
 8004e68:	e031      	b.n	8004ece <MPU9250_SelfTest+0x5be>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8004e6a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004e6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e76:	440a      	add	r2, r1
 8004e78:	3a7c      	subs	r2, #124	; 0x7c
 8004e7a:	edd2 7a00 	vldr	s15, [r2]
 8004e7e:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8004e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	bfcc      	ite	gt
 8004e8c:	2201      	movgt	r2, #1
 8004e8e:	2200      	movle	r2, #0
 8004e90:	b2d1      	uxtb	r1, r2
 8004e92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e94:	0092      	lsls	r2, r2, #2
 8004e96:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8004e9a:	4402      	add	r2, r0
 8004e9c:	3a7c      	subs	r2, #124	; 0x7c
 8004e9e:	edd2 7a00 	vldr	s15, [r2]
 8004ea2:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eae:	bf4c      	ite	mi
 8004eb0:	2201      	movmi	r2, #1
 8004eb2:	2200      	movpl	r2, #0
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	400a      	ands	r2, r1
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eca:	3301      	adds	r3, #1
 8004ecc:	677b      	str	r3, [r7, #116]	; 0x74
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	ddca      	ble.n	8004e6a <MPU9250_SelfTest+0x55a>
		#if MPU9250_DEBUG
			println("%f", results[i]);
		#endif
	}
	return passed;
 8004ed4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3788      	adds	r7, #136	; 0x88
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bdb0      	pop	{r4, r5, r7, pc}
 8004ee0:	40590000 	.word	0x40590000

08004ee4 <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	; 0x38
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8004ef8:	4a81      	ldr	r2, [pc, #516]	; (8005100 <AK8963_calibrate+0x21c>)
 8004efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f02:	6018      	str	r0, [r3, #0]
 8004f04:	3304      	adds	r3, #4
 8004f06:	8019      	strh	r1, [r3, #0]
 8004f08:	4a7e      	ldr	r2, [pc, #504]	; (8005104 <AK8963_calibrate+0x220>)
 8004f0a:	f107 031c 	add.w	r3, r7, #28
 8004f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f12:	6018      	str	r0, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	8019      	strh	r1, [r3, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	82bb      	strh	r3, [r7, #20]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	82fb      	strh	r3, [r7, #22]
 8004f20:	2300      	movs	r3, #0
 8004f22:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3a:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f42:	64da      	str	r2, [r3, #76]	; 0x4c
	for (i = 0; i < 3; i++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f48:	e013      	b.n	8004f72 <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 8004f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 8004f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	331c      	adds	r3, #28
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004f6a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f6e:	3301      	adds	r3, #1
 8004f70:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d9e8      	bls.n	8004f4a <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8004f78:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004f7c:	f001 fa6e 	bl	800645c <HAL_Delay>

	sample_count = 64;
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004f88:	e06a      	b.n	8005060 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fe fef3 	bl	8003d76 <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f9a:	ee17 3a90 	vmov	r3, s15
 8004f9e:	b21b      	sxth	r3, r3
 8004fa0:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	ee17 3a90 	vmov	r3, s15
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fbe:	ee17 3a90 	vmov	r3, s15
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004fca:	e040      	b.n	800504e <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 8004fcc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8004fda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	dd0e      	ble.n	800500a <AK8963_calibrate+0x126>
 8004fec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004fee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8004ffc:	0053      	lsls	r3, r2, #1
 8004ffe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005002:	4413      	add	r3, r2
 8005004:	460a      	mov	r2, r1
 8005006:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 800500a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005012:	4413      	add	r3, r2
 8005014:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8005018:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005020:	440b      	add	r3, r1
 8005022:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005026:	429a      	cmp	r2, r3
 8005028:	da0e      	bge.n	8005048 <AK8963_calibrate+0x164>
 800502a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800502c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005034:	440b      	add	r3, r1
 8005036:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800503a:	0053      	lsls	r3, r2, #1
 800503c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005040:	4413      	add	r3, r2
 8005042:	460a      	mov	r2, r1
 8005044:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8005048:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800504a:	3301      	adds	r3, #1
 800504c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800504e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005050:	2b02      	cmp	r3, #2
 8005052:	d9bb      	bls.n	8004fcc <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 8005054:	2087      	movs	r0, #135	; 0x87
 8005056:	f001 fa01 	bl	800645c <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 800505a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800505c:	3301      	adds	r3, #1
 800505e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005060:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005062:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005064:	429a      	cmp	r2, r3
 8005066:	d390      	bcc.n	8004f8a <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	64da      	str	r2, [r3, #76]	; 0x4c

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 800506e:	2300      	movs	r3, #0
 8005070:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005072:	e03d      	b.n	80050f0 <AK8963_calibrate+0x20c>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 8005074:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005078:	0092      	lsls	r2, r2, #2
 800507a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800507e:	440a      	add	r2, r1
 8005080:	3a30      	subs	r2, #48	; 0x30
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	331c      	adds	r3, #28
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3304      	adds	r3, #4
 800508e:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 8005090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005098:	4413      	add	r3, r2
 800509a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800509e:	461a      	mov	r2, r3
 80050a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050a8:	440b      	add	r3, r1
 80050aa:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80050ae:	4413      	add	r3, r2
 80050b0:	0fda      	lsrs	r2, r3, #31
 80050b2:	4413      	add	r3, r2
 80050b4:	105b      	asrs	r3, r3, #1
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80050c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	331c      	adds	r3, #28
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	3314      	adds	r3, #20
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80050ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ec:	3301      	adds	r3, #1
 80050ee:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d9be      	bls.n	8005074 <AK8963_calibrate+0x190>
	}
}
 80050f6:	bf00      	nop
 80050f8:	3738      	adds	r7, #56	; 0x38
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	0801bb78 	.word	0x0801bb78
 8005104:	0801bb80 	.word	0x0801bb80

08005108 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8005108:	b5b0      	push	{r4, r5, r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800511c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800512c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005134:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005138:	ee17 0a90 	vmov	r0, s15
 800513c:	f7fb fa14 	bl	8000568 <__aeabi_f2d>
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800518c:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005190:	ee17 0a90 	vmov	r0, s15
 8005194:	f7fb f9e8 	bl	8000568 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	ec43 2b11 	vmov	d1, r2, r3
 80051a0:	ec45 4b10 	vmov	d0, r4, r5
 80051a4:	f013 fd54 	bl	8018c50 <atan2>
 80051a8:	ec54 3b10 	vmov	r3, r4, d0
 80051ac:	4618      	mov	r0, r3
 80051ae:	4621      	mov	r1, r4
 80051b0:	f7fb fd2a 	bl	8000c08 <__aeabi_d2f>
 80051b4:	4602      	mov	r2, r0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80051c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80051d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051e2:	ee17 0a90 	vmov	r0, s15
 80051e6:	f7fb f9bf 	bl	8000568 <__aeabi_f2d>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	ec44 3b10 	vmov	d0, r3, r4
 80051f2:	f013 fcd5 	bl	8018ba0 <asin>
 80051f6:	ec54 3b10 	vmov	r3, r4, d0
 80051fa:	4618      	mov	r0, r3
 80051fc:	4621      	mov	r1, r4
 80051fe:	f7fb fd03 	bl	8000c08 <__aeabi_d2f>
 8005202:	4603      	mov	r3, r0
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eef1 7a67 	vneg.f32	s15, s15
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800521e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800522e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005236:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800523a:	ee17 0a90 	vmov	r0, s15
 800523e:	f7fb f993 	bl	8000568 <__aeabi_f2d>
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800527a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800528a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800528e:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 8005292:	ee17 0a90 	vmov	r0, s15
 8005296:	f7fb f967 	bl	8000568 <__aeabi_f2d>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	ec43 2b11 	vmov	d1, r2, r3
 80052a2:	ec45 4b10 	vmov	d0, r4, r5
 80052a6:	f013 fcd3 	bl	8018c50 <atan2>
 80052aa:	ec54 3b10 	vmov	r3, r4, d0
 80052ae:	4618      	mov	r0, r3
 80052b0:	4621      	mov	r1, r4
 80052b2:	f7fb fca9 	bl	8000c08 <__aeabi_d2f>
 80052b6:	4602      	mov	r2, r0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	615a      	str	r2, [r3, #20]
	inst->yaw	*= -180.0f / M_PI;			// Convert to degrees
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb f951 	bl	8000568 <__aeabi_f2d>
 80052c6:	a37c      	add	r3, pc, #496	; (adr r3, 80054b8 <MPU9250_updateEuler+0x3b0>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f7fb f9a4 	bl	8000618 <__aeabi_dmul>
 80052d0:	4603      	mov	r3, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	4618      	mov	r0, r3
 80052d6:	4621      	mov	r1, r4
 80052d8:	f7fb fc96 	bl	8000c08 <__aeabi_d2f>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb f93e 	bl	8000568 <__aeabi_f2d>
 80052ec:	a374      	add	r3, pc, #464	; (adr r3, 80054c0 <MPU9250_updateEuler+0x3b8>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fb f991 	bl	8000618 <__aeabi_dmul>
 80052f6:	4603      	mov	r3, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	4618      	mov	r0, r3
 80052fc:	4621      	mov	r1, r4
 80052fe:	f7fb fc83 	bl	8000c08 <__aeabi_d2f>
 8005302:	4602      	mov	r2, r0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb f92b 	bl	8000568 <__aeabi_f2d>
 8005312:	a36b      	add	r3, pc, #428	; (adr r3, 80054c0 <MPU9250_updateEuler+0x3b8>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fb f97e 	bl	8000618 <__aeabi_dmul>
 800531c:	4603      	mov	r3, r0
 800531e:	460c      	mov	r4, r1
 8005320:	4618      	mov	r0, r3
 8005322:	4621      	mov	r1, r4
 8005324:	f7fb fc70 	bl	8000c08 <__aeabi_d2f>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	615a      	str	r2, [r3, #20]

	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	ed93 7a03 	vldr	s14, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800533a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	ed93 7a04 	vldr	s14, [r3, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8005366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	edc3 7a05 	vstr	s15, [r3, #20]

	inst->yaw_dx = inst->yaw;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
	inst->yaw_dx -= inst->yaw;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	ed93 7a06 	vldr	s14, [r3, #24]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	edd3 7a03 	vldr	s15, [r3, #12]
 8005384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	edc3 7a06 	vstr	s15, [r3, #24]
	inst->yaw_dx *= (1000000.0f / (micros() - inst->euler_lastUpdate));
 800538e:	f7fe fb60 	bl	8003a52 <micros>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80054b0 <MPU9250_updateEuler+0x3a8>
 80053a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	edc3 7a06 	vstr	s15, [r3, #24]

	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	edd3 7a03 	vldr	s15, [r3, #12]
 80053c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	d50a      	bpl.n	80053e2 <MPU9250_updateEuler+0x2da>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80053d2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 80053d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	edc3 7a03 	vstr	s15, [r3, #12]
 80053e0:	e013      	b.n	800540a <MPU9250_updateEuler+0x302>
	else if (inst->yaw > 360) inst->yaw -= 360.0f;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80053e8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 80053ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f4:	dd09      	ble.n	800540a <MPU9250_updateEuler+0x302>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80053fc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 8005400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	d50a      	bpl.n	8005430 <MPU9250_updateEuler+0x328>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005420:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 8005424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	edc3 7a04 	vstr	s15, [r3, #16]
 800542e:	e013      	b.n	8005458 <MPU9250_updateEuler+0x350>
	else if (inst->pitch > 360) inst->pitch -= 360.0f;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	edd3 7a04 	vldr	s15, [r3, #16]
 8005436:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 800543a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005442:	dd09      	ble.n	8005458 <MPU9250_updateEuler+0x350>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	edd3 7a04 	vldr	s15, [r3, #16]
 800544a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 800544e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	edd3 7a05 	vldr	s15, [r3, #20]
 800545e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d50a      	bpl.n	800547e <MPU9250_updateEuler+0x376>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	edd3 7a05 	vldr	s15, [r3, #20]
 800546e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 8005472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	edc3 7a05 	vstr	s15, [r3, #20]
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 800547c:	e014      	b.n	80054a8 <MPU9250_updateEuler+0x3a0>
	else if (inst->roll > 360) inst->roll -= 360.0f;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	edd3 7a05 	vldr	s15, [r3, #20]
 8005484:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 8005488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005490:	dc00      	bgt.n	8005494 <MPU9250_updateEuler+0x38c>
}
 8005492:	e009      	b.n	80054a8 <MPU9250_updateEuler+0x3a0>
	else if (inst->roll > 360) inst->roll -= 360.0f;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	edd3 7a05 	vldr	s15, [r3, #20]
 800549a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80054b4 <MPU9250_updateEuler+0x3ac>
 800549e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bdb0      	pop	{r4, r5, r7, pc}
 80054b0:	49742400 	.word	0x49742400
 80054b4:	43b40000 	.word	0x43b40000
 80054b8:	1a63c1f8 	.word	0x1a63c1f8
 80054bc:	c04ca5dc 	.word	0xc04ca5dc
 80054c0:	1a63c1f8 	.word	0x1a63c1f8
 80054c4:	404ca5dc 	.word	0x404ca5dc

080054c8 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b0b2      	sub	sp, #200	; 0xc8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054de:	eef1 7a67 	vneg.f32	s15, s15
 80054e2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054ec:	eef1 7a67 	vneg.f32	s15, s15
 80054f0:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fb f835 	bl	8000568 <__aeabi_f2d>
 80054fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80057c0 <MadgwickQuaternionUpdate+0x2f8>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fb f888 	bl	8000618 <__aeabi_dmul>
 8005508:	4603      	mov	r3, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4618      	mov	r0, r3
 800550e:	4621      	mov	r1, r4
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	4bac      	ldr	r3, [pc, #688]	; (80057c8 <MadgwickQuaternionUpdate+0x300>)
 8005516:	f7fb f9a9 	bl	800086c <__aeabi_ddiv>
 800551a:	4603      	mov	r3, r0
 800551c:	460c      	mov	r4, r1
 800551e:	4618      	mov	r0, r3
 8005520:	4621      	mov	r1, r4
 8005522:	f7fb fb71 	bl	8000c08 <__aeabi_d2f>
 8005526:	4603      	mov	r3, r0
 8005528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005532:	eef1 7a67 	vneg.f32	s15, s15
 8005536:	ee17 3a90 	vmov	r3, s15
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb f814 	bl	8000568 <__aeabi_f2d>
 8005540:	a39f      	add	r3, pc, #636	; (adr r3, 80057c0 <MadgwickQuaternionUpdate+0x2f8>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fb f867 	bl	8000618 <__aeabi_dmul>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	4618      	mov	r0, r3
 8005550:	4621      	mov	r1, r4
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	4b9c      	ldr	r3, [pc, #624]	; (80057c8 <MadgwickQuaternionUpdate+0x300>)
 8005558:	f7fb f988 	bl	800086c <__aeabi_ddiv>
 800555c:	4603      	mov	r3, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4618      	mov	r0, r3
 8005562:	4621      	mov	r1, r4
 8005564:	f7fb fb50 	bl	8000c08 <__aeabi_d2f>
 8005568:	4603      	mov	r3, r0
 800556a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005574:	eef1 7a67 	vneg.f32	s15, s15
 8005578:	ee17 3a90 	vmov	r3, s15
 800557c:	4618      	mov	r0, r3
 800557e:	f7fa fff3 	bl	8000568 <__aeabi_f2d>
 8005582:	a38f      	add	r3, pc, #572	; (adr r3, 80057c0 <MadgwickQuaternionUpdate+0x2f8>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fb f846 	bl	8000618 <__aeabi_dmul>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4618      	mov	r0, r3
 8005592:	4621      	mov	r1, r4
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	4b8b      	ldr	r3, [pc, #556]	; (80057c8 <MadgwickQuaternionUpdate+0x300>)
 800559a:	f7fb f967 	bl	800086c <__aeabi_ddiv>
 800559e:	4603      	mov	r3, r0
 80055a0:	460c      	mov	r4, r1
 80055a2:	4618      	mov	r0, r3
 80055a4:	4621      	mov	r1, r4
 80055a6:	f7fb fb2f 	bl	8000c08 <__aeabi_d2f>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80055be:	eef1 7a67 	vneg.f32	s15, s15
 80055c2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 80055f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80055fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055fe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 8005602:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005606:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800560a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 800560e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005612:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005616:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 800561a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800561e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005622:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 8005626:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800562a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800562e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 800563a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800563e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005642:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 800564e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005652:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 800565e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005662:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 800566e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005672:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 800567e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005682:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 800568e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8005692:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 800569e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 80056ae:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056b2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 80056be:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056c2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 80056ce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056d2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 80056de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80056e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 80056ee:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80056f2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80056f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056fa:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80056fe:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570a:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800570e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800571a:	eeb0 0a67 	vmov.f32	s0, s15
 800571e:	f013 fc6d 	bl	8018ffc <sqrtf>
 8005722:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 8005726:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800572a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800572e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005732:	f000 8614 	beq.w	800635e <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 8005736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800573e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005742:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 8005746:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800574a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800574e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005752:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 8005756:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800575a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 8005766:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800576a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8005776:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800577a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800577e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005782:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005786:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800578a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800578e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005792:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005796:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800579a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800579e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a2:	eeb0 0a67 	vmov.f32	s0, s15
 80057a6:	f013 fc29 	bl	8018ffc <sqrtf>
 80057aa:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 80057ae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ba:	f000 85d2 	beq.w	8006362 <MadgwickQuaternionUpdate+0xe9a>
 80057be:	e005      	b.n	80057cc <MadgwickQuaternionUpdate+0x304>
 80057c0:	54442d18 	.word	0x54442d18
 80057c4:	400921fb 	.word	0x400921fb
 80057c8:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 80057cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80057d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 80057dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80057e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 80057ec:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80057f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 80057fc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005800:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005808:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 800580c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005810:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005814:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8005820:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005824:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005828:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 8005834:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005838:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800583c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005844:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8005848:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800584c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005850:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800585c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005860:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005868:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800586c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005878:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800587c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005888:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800588c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005898:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800589c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058a4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058b0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80058b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058bc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058cc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80058d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058d8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80058e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80058ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80058f0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058f8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80058fc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005908:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800590c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005918:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800591c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005928:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800592c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005934:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005938:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 800593c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005948:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800594c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005950:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005954:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005960:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005964:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005970:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 8005974:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005978:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800597c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005980:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8005984:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800598c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005990:	eeb0 0a67 	vmov.f32	s0, s15
 8005994:	f013 fb32 	bl	8018ffc <sqrtf>
 8005998:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800599c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059a0:	eeb1 7a67 	vneg.f32	s14, s15
 80059a4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80059a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059ac:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80059b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059bc:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80059c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80059c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059cc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80059d0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059dc:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80059e0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80059e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059ec:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80059f0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80059f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059f8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a04:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a08:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a14:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a18:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a24:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8005a28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a30:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8005a34:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005a40:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005a44:	eeb1 7a67 	vneg.f32	s14, s15
 8005a48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a4c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a50:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a58:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005a5c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a64:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005a68:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a6c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a74:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005a78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a7c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a88:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005a8c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005a90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005a98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005aa0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005aa4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005aa8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005aac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ab0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005ab4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ab8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005abc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ac0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ac4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ac8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005acc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ad8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005adc:	eef1 6a67 	vneg.f32	s13, s15
 8005ae0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ae4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ae8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005aec:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005af0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005af4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005af8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005afc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005b00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b0c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005b10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005b14:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005b18:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b20:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b24:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b34:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b38:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b40:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005b44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b54:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005b58:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005b5c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005b64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005b88:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005b90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b98:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ba0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ba8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005bac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005bb0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005bb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bb8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005bc0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bcc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005bd0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005bd4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005bd8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005bdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005be0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005be4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005be8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bf0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005bf4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005bf8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c04:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005c08:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c2c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005c30:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005c34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c44:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c54:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005c58:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c60:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005c64:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c70:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005c74:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005c78:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c84:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005c88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005c8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005c90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ca0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cac:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cb0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005cb8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005cbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cc8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005ccc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cd0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cdc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ce0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ce4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ce8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005cec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005cf0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cf4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005cf8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cfc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0c:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005d10:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d14:	eeb1 7a67 	vneg.f32	s14, s15
 8005d18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d1c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d20:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d28:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005d2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005d38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d3c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d44:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005d48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d58:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005d64:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005d68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005d70:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005d80:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005d84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005d94:	eef1 6a67 	vneg.f32	s13, s15
 8005d98:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005da0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005da4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005da8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005dac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005db0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005db4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005db8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dbc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005dc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005dc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005dcc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005dd0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005dd4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005dd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ddc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005de0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005de4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005de8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005df4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005df8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005dfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e00:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005e04:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e10:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005e14:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e18:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e24:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005e28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e2c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e3c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005e40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e4c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e50:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005e5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005e60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e68:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005e6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e7c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005e80:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005e84:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e8c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e94:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e9c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ea0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eac:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005eb0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005eb4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005eb8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ec8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ed0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ed4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ed8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005edc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ee0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005ee4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ee8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ef4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005ef8:	eef1 6a67 	vneg.f32	s13, s15
 8005efc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f04:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f08:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005f0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f18:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f1c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f20:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f30:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005f34:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f38:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f48:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f5c:	eef1 6a67 	vneg.f32	s13, s15
 8005f60:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005f64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f68:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f6c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f78:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005f7c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005f80:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f8c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005f90:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005f94:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005f98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fa0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fa4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005fa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fb4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005fb8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fc0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005fc4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005fc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fd4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005fd8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005fdc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fe0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fe4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fe8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ff0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ff4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ff8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006004:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8006008:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800600c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006014:	edd7 6a08 	vldr	s13, [r7, #32]
 8006018:	edd7 7a08 	vldr	s15, [r7, #32]
 800601c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006024:	edd7 6a07 	vldr	s13, [r7, #28]
 8006028:	edd7 7a07 	vldr	s15, [r7, #28]
 800602c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006034:	edd7 6a06 	vldr	s13, [r7, #24]
 8006038:	edd7 7a06 	vldr	s15, [r7, #24]
 800603c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006044:	eeb0 0a67 	vmov.f32	s0, s15
 8006048:	f012 ffd8 	bl	8018ffc <sqrtf>
 800604c:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8006050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006054:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 8006060:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006064:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 8006070:	ed97 7a08 	vldr	s14, [r7, #32]
 8006074:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 8006080:	ed97 7a07 	vldr	s14, [r7, #28]
 8006084:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608c:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 8006090:	ed97 7a06 	vldr	s14, [r7, #24]
 8006094:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609c:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 80060a0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80060a4:	eeb1 7a67 	vneg.f32	s14, s15
 80060a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80060ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b0:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80060b4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80060b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80060c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80060c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060d8:	ee17 0a90 	vmov	r0, s15
 80060dc:	f7fa fa44 	bl	8000568 <__aeabi_f2d>
 80060e0:	4604      	mov	r4, r0
 80060e2:	460d      	mov	r5, r1
 80060e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060e6:	f7fa fa3f 	bl	8000568 <__aeabi_f2d>
 80060ea:	a3a1      	add	r3, pc, #644	; (adr r3, 8006370 <MadgwickQuaternionUpdate+0xea8>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f7fa fa92 	bl	8000618 <__aeabi_dmul>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4620      	mov	r0, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7fa f8d4 	bl	80002a8 <__aeabi_dsub>
 8006100:	4603      	mov	r3, r0
 8006102:	460c      	mov	r4, r1
 8006104:	4618      	mov	r0, r3
 8006106:	4621      	mov	r1, r4
 8006108:	f7fa fd7e 	bl	8000c08 <__aeabi_d2f>
 800610c:	4603      	mov	r3, r0
 800610e:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8006110:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006114:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800611c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006120:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800612c:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006130:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800613c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006144:	ee17 0a90 	vmov	r0, s15
 8006148:	f7fa fa0e 	bl	8000568 <__aeabi_f2d>
 800614c:	4604      	mov	r4, r0
 800614e:	460d      	mov	r5, r1
 8006150:	6a38      	ldr	r0, [r7, #32]
 8006152:	f7fa fa09 	bl	8000568 <__aeabi_f2d>
 8006156:	a386      	add	r3, pc, #536	; (adr r3, 8006370 <MadgwickQuaternionUpdate+0xea8>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa fa5c 	bl	8000618 <__aeabi_dmul>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4620      	mov	r0, r4
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa f89e 	bl	80002a8 <__aeabi_dsub>
 800616c:	4603      	mov	r3, r0
 800616e:	460c      	mov	r4, r1
 8006170:	4618      	mov	r0, r3
 8006172:	4621      	mov	r1, r4
 8006174:	f7fa fd48 	bl	8000c08 <__aeabi_d2f>
 8006178:	4603      	mov	r3, r0
 800617a:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 800617c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006180:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006188:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800618c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006198:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800619c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061b0:	ee17 0a90 	vmov	r0, s15
 80061b4:	f7fa f9d8 	bl	8000568 <__aeabi_f2d>
 80061b8:	4604      	mov	r4, r0
 80061ba:	460d      	mov	r5, r1
 80061bc:	69f8      	ldr	r0, [r7, #28]
 80061be:	f7fa f9d3 	bl	8000568 <__aeabi_f2d>
 80061c2:	a36b      	add	r3, pc, #428	; (adr r3, 8006370 <MadgwickQuaternionUpdate+0xea8>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fa26 	bl	8000618 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa f868 	bl	80002a8 <__aeabi_dsub>
 80061d8:	4603      	mov	r3, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	4618      	mov	r0, r3
 80061de:	4621      	mov	r1, r4
 80061e0:	f7fa fd12 	bl	8000c08 <__aeabi_d2f>
 80061e4:	4603      	mov	r3, r0
 80061e6:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 80061e8:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80061ec:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80061f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f4:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80061f8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80061fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006204:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006208:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800620c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006214:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800621c:	ee17 0a90 	vmov	r0, s15
 8006220:	f7fa f9a2 	bl	8000568 <__aeabi_f2d>
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	69b8      	ldr	r0, [r7, #24]
 800622a:	f7fa f99d 	bl	8000568 <__aeabi_f2d>
 800622e:	a350      	add	r3, pc, #320	; (adr r3, 8006370 <MadgwickQuaternionUpdate+0xea8>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f7fa f9f0 	bl	8000618 <__aeabi_dmul>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa f832 	bl	80002a8 <__aeabi_dsub>
 8006244:	4603      	mov	r3, r0
 8006246:	460c      	mov	r4, r1
 8006248:	4618      	mov	r0, r3
 800624a:	4621      	mov	r1, r4
 800624c:	f7fa fcdc 	bl	8000c08 <__aeabi_d2f>
 8006250:	4603      	mov	r3, r0
 8006252:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800625a:	edd7 7a05 	vldr	s15, [r7, #20]
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800626a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8006274:	edd7 7a04 	vldr	s15, [r7, #16]
 8006278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627c:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006284:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800628e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006296:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800629a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800629e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80062a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80062ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80062bc:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80062c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80062c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062c8:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80062cc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80062d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062d8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80062dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80062e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062e8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80062ec:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80062f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f8:	eeb0 0a67 	vmov.f32	s0, s15
 80062fc:	f012 fe7e 	bl	8018ffc <sqrtf>
 8006300:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8006304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006308:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800630c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006310:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 8006314:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006318:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	inst->q[1] = q2 * norm;
 8006326:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800632a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	inst->q[2] = q3 * norm;
 8006338:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800633c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	inst->q[3] = q4 * norm;
 800634a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800634e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 800635c:	e002      	b.n	8006364 <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 8006362:	bf00      	nop
}
 8006364:	37c8      	adds	r7, #200	; 0xc8
 8006366:	46bd      	mov	sp, r7
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	bf00      	nop
 800636c:	f3af 8000 	nop.w
 8006370:	89f0ed0f 	.word	0x89f0ed0f
 8006374:	3fed0552 	.word	0x3fed0552

08006378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_Init+0x40>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0d      	ldr	r2, [pc, #52]	; (80063b8 <HAL_Init+0x40>)
 8006382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_Init+0x40>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <HAL_Init+0x40>)
 800638e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006394:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <HAL_Init+0x40>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a07      	ldr	r2, [pc, #28]	; (80063b8 <HAL_Init+0x40>)
 800639a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a0:	2003      	movs	r0, #3
 80063a2:	f000 f94d 	bl	8006640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063a6:	2000      	movs	r0, #0
 80063a8:	f000 f808 	bl	80063bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063ac:	f00d fc20 	bl	8013bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40023c00 	.word	0x40023c00

080063bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <HAL_InitTick+0x54>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b12      	ldr	r3, [pc, #72]	; (8006414 <HAL_InitTick+0x58>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f965 	bl	80066aa <HAL_SYSTICK_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e00e      	b.n	8006408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d80a      	bhi.n	8006406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063f0:	2200      	movs	r2, #0
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295
 80063f8:	f000 f92d 	bl	8006656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063fc:	4a06      	ldr	r2, [pc, #24]	; (8006418 <HAL_InitTick+0x5c>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000170 	.word	0x20000170
 8006414:	20000004 	.word	0x20000004
 8006418:	20000000 	.word	0x20000000

0800641c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_IncTick+0x20>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <HAL_IncTick+0x24>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4413      	add	r3, r2
 800642c:	4a04      	ldr	r2, [pc, #16]	; (8006440 <HAL_IncTick+0x24>)
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000004 	.word	0x20000004
 8006440:	20001d04 	.word	0x20001d04

08006444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return uwTick;
 8006448:	4b03      	ldr	r3, [pc, #12]	; (8006458 <HAL_GetTick+0x14>)
 800644a:	681b      	ldr	r3, [r3, #0]
}
 800644c:	4618      	mov	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20001d04 	.word	0x20001d04

0800645c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006464:	f7ff ffee 	bl	8006444 <HAL_GetTick>
 8006468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d005      	beq.n	8006482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006476:	4b09      	ldr	r3, [pc, #36]	; (800649c <HAL_Delay+0x40>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006482:	bf00      	nop
 8006484:	f7ff ffde 	bl	8006444 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d8f7      	bhi.n	8006484 <HAL_Delay+0x28>
  {
  }
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000004 	.word	0x20000004

080064a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <__NVIC_SetPriorityGrouping+0x44>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064bc:	4013      	ands	r3, r2
 80064be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064d2:	4a04      	ldr	r2, [pc, #16]	; (80064e4 <__NVIC_SetPriorityGrouping+0x44>)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	60d3      	str	r3, [r2, #12]
}
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <__NVIC_GetPriorityGrouping+0x18>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	f003 0307 	and.w	r3, r3, #7
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800650e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006512:	2b00      	cmp	r3, #0
 8006514:	db0b      	blt.n	800652e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	f003 021f 	and.w	r2, r3, #31
 800651c:	4907      	ldr	r1, [pc, #28]	; (800653c <__NVIC_EnableIRQ+0x38>)
 800651e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	2001      	movs	r0, #1
 8006526:	fa00 f202 	lsl.w	r2, r0, r2
 800652a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000e100 	.word	0xe000e100

08006540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800654c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006550:	2b00      	cmp	r3, #0
 8006552:	db0a      	blt.n	800656a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	490c      	ldr	r1, [pc, #48]	; (800658c <__NVIC_SetPriority+0x4c>)
 800655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655e:	0112      	lsls	r2, r2, #4
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	440b      	add	r3, r1
 8006564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006568:	e00a      	b.n	8006580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	4908      	ldr	r1, [pc, #32]	; (8006590 <__NVIC_SetPriority+0x50>)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	3b04      	subs	r3, #4
 8006578:	0112      	lsls	r2, r2, #4
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	440b      	add	r3, r1
 800657e:	761a      	strb	r2, [r3, #24]
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	e000e100 	.word	0xe000e100
 8006590:	e000ed00 	.word	0xe000ed00

08006594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	; 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f1c3 0307 	rsb	r3, r3, #7
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	bf28      	it	cs
 80065b2:	2304      	movcs	r3, #4
 80065b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3304      	adds	r3, #4
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	d902      	bls.n	80065c4 <NVIC_EncodePriority+0x30>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	3b03      	subs	r3, #3
 80065c2:	e000      	b.n	80065c6 <NVIC_EncodePriority+0x32>
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43da      	mvns	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	401a      	ands	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065dc:	f04f 31ff 	mov.w	r1, #4294967295
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	43d9      	mvns	r1, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ec:	4313      	orrs	r3, r2
         );
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3b01      	subs	r3, #1
 8006608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800660c:	d301      	bcc.n	8006612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800660e:	2301      	movs	r3, #1
 8006610:	e00f      	b.n	8006632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <SysTick_Config+0x40>)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3b01      	subs	r3, #1
 8006618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800661a:	210f      	movs	r1, #15
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	f7ff ff8e 	bl	8006540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <SysTick_Config+0x40>)
 8006626:	2200      	movs	r2, #0
 8006628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800662a:	4b04      	ldr	r3, [pc, #16]	; (800663c <SysTick_Config+0x40>)
 800662c:	2207      	movs	r2, #7
 800662e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	e000e010 	.word	0xe000e010

08006640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff ff29 	bl	80064a0 <__NVIC_SetPriorityGrouping>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006656:	b580      	push	{r7, lr}
 8006658:	b086      	sub	sp, #24
 800665a:	af00      	add	r7, sp, #0
 800665c:	4603      	mov	r3, r0
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006668:	f7ff ff3e 	bl	80064e8 <__NVIC_GetPriorityGrouping>
 800666c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	6978      	ldr	r0, [r7, #20]
 8006674:	f7ff ff8e 	bl	8006594 <NVIC_EncodePriority>
 8006678:	4602      	mov	r2, r0
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff5d 	bl	8006540 <__NVIC_SetPriority>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	4603      	mov	r3, r0
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff ff31 	bl	8006504 <__NVIC_EnableIRQ>
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff ffa2 	bl	80065fc <SysTick_Config>
 80066b8:	4603      	mov	r3, r0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066d0:	f7ff feb8 	bl	8006444 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e099      	b.n	8006814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006700:	e00f      	b.n	8006722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006702:	f7ff fe9f 	bl	8006444 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b05      	cmp	r3, #5
 800670e:	d908      	bls.n	8006722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e078      	b.n	8006814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e8      	bne.n	8006702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4b38      	ldr	r3, [pc, #224]	; (800681c <HAL_DMA_Init+0x158>)
 800673c:	4013      	ands	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800674e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800675a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b04      	cmp	r3, #4
 800677a:	d107      	bne.n	800678c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	4313      	orrs	r3, r2
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0307 	bic.w	r3, r3, #7
 80067a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d117      	bne.n	80067e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa99 	bl	8006d00 <DMA_CheckFifoParam>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067e2:	2301      	movs	r3, #1
 80067e4:	e016      	b.n	8006814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa50 	bl	8006c94 <DMA_CalcBaseAndBitshift>
 80067f4:	4603      	mov	r3, r0
 80067f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	223f      	movs	r2, #63	; 0x3f
 80067fe:	409a      	lsls	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	f010803f 	.word	0xf010803f

08006820 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006836:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_DMA_Start_IT+0x26>
 8006842:	2302      	movs	r3, #2
 8006844:	e048      	b.n	80068d8 <HAL_DMA_Start_IT+0xb8>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	d137      	bne.n	80068ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 f9e2 	bl	8006c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	223f      	movs	r2, #63	; 0x3f
 800687a:	409a      	lsls	r2, r3
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0216 	orr.w	r2, r2, #22
 800688e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695a      	ldr	r2, [r3, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800689e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d007      	beq.n	80068b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0208 	orr.w	r2, r2, #8
 80068b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e005      	b.n	80068d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068d2:	2302      	movs	r3, #2
 80068d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2280      	movs	r2, #128	; 0x80
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e00c      	b.n	8006918 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2205      	movs	r2, #5
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006930:	4b92      	ldr	r3, [pc, #584]	; (8006b7c <HAL_DMA_IRQHandler+0x258>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a92      	ldr	r2, [pc, #584]	; (8006b80 <HAL_DMA_IRQHandler+0x25c>)
 8006936:	fba2 2303 	umull	r2, r3, r2, r3
 800693a:	0a9b      	lsrs	r3, r3, #10
 800693c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	2208      	movs	r2, #8
 8006950:	409a      	lsls	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01a      	beq.n	8006990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0204 	bic.w	r2, r2, #4
 8006976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697c:	2208      	movs	r2, #8
 800697e:	409a      	lsls	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006988:	f043 0201 	orr.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006994:	2201      	movs	r2, #1
 8006996:	409a      	lsls	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4013      	ands	r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d012      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b2:	2201      	movs	r2, #1
 80069b4:	409a      	lsls	r2, r3
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f043 0202 	orr.w	r2, r3, #2
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ca:	2204      	movs	r2, #4
 80069cc:	409a      	lsls	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	2204      	movs	r2, #4
 80069ea:	409a      	lsls	r2, r3
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f4:	f043 0204 	orr.w	r2, r3, #4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	2210      	movs	r2, #16
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d043      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d03c      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1e:	2210      	movs	r2, #16
 8006a20:	409a      	lsls	r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d018      	beq.n	8006a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d024      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
 8006a52:	e01f      	b.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01b      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
 8006a64:	e016      	b.n	8006a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0208 	bic.w	r2, r2, #8
 8006a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	2220      	movs	r2, #32
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 808e 	beq.w	8006bc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0310 	and.w	r3, r3, #16
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8086 	beq.w	8006bc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aba:	2220      	movs	r2, #32
 8006abc:	409a      	lsls	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b05      	cmp	r3, #5
 8006acc:	d136      	bne.n	8006b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0216 	bic.w	r2, r2, #22
 8006adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <HAL_DMA_IRQHandler+0x1da>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0208 	bic.w	r2, r2, #8
 8006b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	223f      	movs	r2, #63	; 0x3f
 8006b14:	409a      	lsls	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d07d      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
        }
        return;
 8006b3a:	e078      	b.n	8006c2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d108      	bne.n	8006b6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d030      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
 8006b68:	e02b      	b.n	8006bc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d027      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
 8006b7a:	e022      	b.n	8006bc2 <HAL_DMA_IRQHandler+0x29e>
 8006b7c:	20000170 	.word	0x20000170
 8006b80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10f      	bne.n	8006bb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0210 	bic.w	r2, r2, #16
 8006ba0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d032      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d022      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2205      	movs	r2, #5
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d307      	bcc.n	8006c0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f2      	bne.n	8006bee <HAL_DMA_IRQHandler+0x2ca>
 8006c08:	e000      	b.n	8006c0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006c0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	e000      	b.n	8006c30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006c2e:	bf00      	nop
    }
  }
}
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d108      	bne.n	8006c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c76:	e007      	b.n	8006c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	60da      	str	r2, [r3, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	3b10      	subs	r3, #16
 8006ca4:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	091b      	lsrs	r3, r3, #4
 8006cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cae:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <DMA_CalcBaseAndBitshift+0x68>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d909      	bls.n	8006cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8006cd4:	e007      	b.n	8006ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	aaaaaaab 	.word	0xaaaaaaab
 8006cfc:	0801bdc4 	.word	0x0801bdc4

08006d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11f      	bne.n	8006d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d855      	bhi.n	8006dcc <DMA_CheckFifoParam+0xcc>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <DMA_CheckFifoParam+0x28>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d4b 	.word	0x08006d4b
 8006d30:	08006d39 	.word	0x08006d39
 8006d34:	08006dcd 	.word	0x08006dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d045      	beq.n	8006dd0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d48:	e042      	b.n	8006dd0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d52:	d13f      	bne.n	8006dd4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d58:	e03c      	b.n	8006dd4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d62:	d121      	bne.n	8006da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d836      	bhi.n	8006dd8 <DMA_CheckFifoParam+0xd8>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <DMA_CheckFifoParam+0x70>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d87 	.word	0x08006d87
 8006d78:	08006d81 	.word	0x08006d81
 8006d7c:	08006d99 	.word	0x08006d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	e02f      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d024      	beq.n	8006ddc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d96:	e021      	b.n	8006ddc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006da0:	d11e      	bne.n	8006de0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006da6:	e01b      	b.n	8006de0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d902      	bls.n	8006db4 <DMA_CheckFifoParam+0xb4>
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d003      	beq.n	8006dba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006db2:	e018      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
      break;
 8006db8:	e015      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dca:	e00b      	b.n	8006de4 <DMA_CheckFifoParam+0xe4>
      break;
 8006dcc:	bf00      	nop
 8006dce:	e00a      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dd0:	bf00      	nop
 8006dd2:	e008      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dd4:	bf00      	nop
 8006dd6:	e006      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006dd8:	bf00      	nop
 8006dda:	e004      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006ddc:	bf00      	nop
 8006dde:	e002      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;   
 8006de0:	bf00      	nop
 8006de2:	e000      	b.n	8006de6 <DMA_CheckFifoParam+0xe6>
      break;
 8006de4:	bf00      	nop
    }
  } 
  
  return status; 
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	; 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	e16b      	b.n	80070e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e10:	2201      	movs	r2, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	f040 815a 	bne.w	80070e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d003      	beq.n	8006e3e <HAL_GPIO_Init+0x4a>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b12      	cmp	r3, #18
 8006e3c:	d123      	bne.n	8006e86 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	08da      	lsrs	r2, r3, #3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3208      	adds	r2, #8
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	220f      	movs	r2, #15
 8006e56:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5a:	43db      	mvns	r3, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	08da      	lsrs	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3208      	adds	r2, #8
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	2203      	movs	r2, #3
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43db      	mvns	r3, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 0203 	and.w	r2, r3, #3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00b      	beq.n	8006eda <HAL_GPIO_Init+0xe6>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d007      	beq.n	8006eda <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ece:	2b11      	cmp	r3, #17
 8006ed0:	d003      	beq.n	8006eda <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b12      	cmp	r3, #18
 8006ed8:	d130      	bne.n	8006f3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f10:	2201      	movs	r2, #1
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	fa02 f303 	lsl.w	r3, r2, r3
 8006f18:	43db      	mvns	r3, r3
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 0201 	and.w	r2, r3, #1
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2203      	movs	r2, #3
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80b4 	beq.w	80070e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b5f      	ldr	r3, [pc, #380]	; (80070fc <HAL_GPIO_Init+0x308>)
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	4a5e      	ldr	r2, [pc, #376]	; (80070fc <HAL_GPIO_Init+0x308>)
 8006f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f88:	6453      	str	r3, [r2, #68]	; 0x44
 8006f8a:	4b5c      	ldr	r3, [pc, #368]	; (80070fc <HAL_GPIO_Init+0x308>)
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f96:	4a5a      	ldr	r2, [pc, #360]	; (8007100 <HAL_GPIO_Init+0x30c>)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	220f      	movs	r2, #15
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a51      	ldr	r2, [pc, #324]	; (8007104 <HAL_GPIO_Init+0x310>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02b      	beq.n	800701a <HAL_GPIO_Init+0x226>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a50      	ldr	r2, [pc, #320]	; (8007108 <HAL_GPIO_Init+0x314>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d025      	beq.n	8007016 <HAL_GPIO_Init+0x222>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a4f      	ldr	r2, [pc, #316]	; (800710c <HAL_GPIO_Init+0x318>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d01f      	beq.n	8007012 <HAL_GPIO_Init+0x21e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a4e      	ldr	r2, [pc, #312]	; (8007110 <HAL_GPIO_Init+0x31c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d019      	beq.n	800700e <HAL_GPIO_Init+0x21a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4d      	ldr	r2, [pc, #308]	; (8007114 <HAL_GPIO_Init+0x320>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <HAL_GPIO_Init+0x216>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a4c      	ldr	r2, [pc, #304]	; (8007118 <HAL_GPIO_Init+0x324>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00d      	beq.n	8007006 <HAL_GPIO_Init+0x212>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a4b      	ldr	r2, [pc, #300]	; (800711c <HAL_GPIO_Init+0x328>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d007      	beq.n	8007002 <HAL_GPIO_Init+0x20e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a4a      	ldr	r2, [pc, #296]	; (8007120 <HAL_GPIO_Init+0x32c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d101      	bne.n	8006ffe <HAL_GPIO_Init+0x20a>
 8006ffa:	2307      	movs	r3, #7
 8006ffc:	e00e      	b.n	800701c <HAL_GPIO_Init+0x228>
 8006ffe:	2308      	movs	r3, #8
 8007000:	e00c      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007002:	2306      	movs	r3, #6
 8007004:	e00a      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007006:	2305      	movs	r3, #5
 8007008:	e008      	b.n	800701c <HAL_GPIO_Init+0x228>
 800700a:	2304      	movs	r3, #4
 800700c:	e006      	b.n	800701c <HAL_GPIO_Init+0x228>
 800700e:	2303      	movs	r3, #3
 8007010:	e004      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007012:	2302      	movs	r3, #2
 8007014:	e002      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_GPIO_Init+0x228>
 800701a:	2300      	movs	r3, #0
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	f002 0203 	and.w	r2, r2, #3
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	4093      	lsls	r3, r2
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800702c:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_GPIO_Init+0x30c>)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	3302      	adds	r3, #2
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800703a:	4b3a      	ldr	r3, [pc, #232]	; (8007124 <HAL_GPIO_Init+0x330>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	43db      	mvns	r3, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4013      	ands	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800705e:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_GPIO_Init+0x330>)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007064:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <HAL_GPIO_Init+0x330>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007088:	4a26      	ldr	r2, [pc, #152]	; (8007124 <HAL_GPIO_Init+0x330>)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <HAL_GPIO_Init+0x330>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070b2:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_GPIO_Init+0x330>)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <HAL_GPIO_Init+0x330>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4013      	ands	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070dc:	4a11      	ldr	r2, [pc, #68]	; (8007124 <HAL_GPIO_Init+0x330>)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	f67f ae90 	bls.w	8006e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070f0:	bf00      	nop
 80070f2:	3724      	adds	r7, #36	; 0x24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40023800 	.word	0x40023800
 8007100:	40013800 	.word	0x40013800
 8007104:	40020000 	.word	0x40020000
 8007108:	40020400 	.word	0x40020400
 800710c:	40020800 	.word	0x40020800
 8007110:	40020c00 	.word	0x40020c00
 8007114:	40021000 	.word	0x40021000
 8007118:	40021400 	.word	0x40021400
 800711c:	40021800 	.word	0x40021800
 8007120:	40021c00 	.word	0x40021c00
 8007124:	40013c00 	.word	0x40013c00

08007128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	887b      	ldrh	r3, [r7, #2]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
 8007144:	e001      	b.n	800714a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	807b      	strh	r3, [r7, #2]
 8007164:	4613      	mov	r3, r2
 8007166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007168:	787b      	ldrb	r3, [r7, #1]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800716e:	887a      	ldrh	r2, [r7, #2]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007174:	e003      	b.n	800717e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007176:	887b      	ldrh	r3, [r7, #2]
 8007178:	041a      	lsls	r2, r3, #16
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	619a      	str	r2, [r3, #24]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	401a      	ands	r2, r3
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d104      	bne.n	80071ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	041a      	lsls	r2, r3, #16
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071ac:	e002      	b.n	80071b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071ae:	887a      	ldrh	r2, [r7, #2]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	619a      	str	r2, [r3, #24]
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e10f      	b.n	80073f2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f00c fd2a 	bl	8013c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007204:	f002 fcc8 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 8007208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4a7b      	ldr	r2, [pc, #492]	; (80073fc <HAL_I2C_Init+0x23c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d807      	bhi.n	8007224 <HAL_I2C_Init+0x64>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4a7a      	ldr	r2, [pc, #488]	; (8007400 <HAL_I2C_Init+0x240>)
 8007218:	4293      	cmp	r3, r2
 800721a:	bf94      	ite	ls
 800721c:	2301      	movls	r3, #1
 800721e:	2300      	movhi	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	e006      	b.n	8007232 <HAL_I2C_Init+0x72>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a77      	ldr	r2, [pc, #476]	; (8007404 <HAL_I2C_Init+0x244>)
 8007228:	4293      	cmp	r3, r2
 800722a:	bf94      	ite	ls
 800722c:	2301      	movls	r3, #1
 800722e:	2300      	movhi	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0db      	b.n	80073f2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a72      	ldr	r2, [pc, #456]	; (8007408 <HAL_I2C_Init+0x248>)
 800723e:	fba2 2303 	umull	r2, r3, r2, r3
 8007242:	0c9b      	lsrs	r3, r3, #18
 8007244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	4a64      	ldr	r2, [pc, #400]	; (80073fc <HAL_I2C_Init+0x23c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d802      	bhi.n	8007274 <HAL_I2C_Init+0xb4>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	3301      	adds	r3, #1
 8007272:	e009      	b.n	8007288 <HAL_I2C_Init+0xc8>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	4a63      	ldr	r2, [pc, #396]	; (800740c <HAL_I2C_Init+0x24c>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	099b      	lsrs	r3, r3, #6
 8007286:	3301      	adds	r3, #1
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	430b      	orrs	r3, r1
 800728e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800729a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4956      	ldr	r1, [pc, #344]	; (80073fc <HAL_I2C_Init+0x23c>)
 80072a4:	428b      	cmp	r3, r1
 80072a6:	d80d      	bhi.n	80072c4 <HAL_I2C_Init+0x104>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1e59      	subs	r1, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80072b6:	3301      	adds	r3, #1
 80072b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072bc:	2b04      	cmp	r3, #4
 80072be:	bf38      	it	cc
 80072c0:	2304      	movcc	r3, #4
 80072c2:	e04f      	b.n	8007364 <HAL_I2C_Init+0x1a4>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d111      	bne.n	80072f0 <HAL_I2C_Init+0x130>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	1e58      	subs	r0, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	440b      	add	r3, r1
 80072da:	fbb0 f3f3 	udiv	r3, r0, r3
 80072de:	3301      	adds	r3, #1
 80072e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bf0c      	ite	eq
 80072e8:	2301      	moveq	r3, #1
 80072ea:	2300      	movne	r3, #0
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	e012      	b.n	8007316 <HAL_I2C_Init+0x156>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	1e58      	subs	r0, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	440b      	add	r3, r1
 80072fe:	0099      	lsls	r1, r3, #2
 8007300:	440b      	add	r3, r1
 8007302:	fbb0 f3f3 	udiv	r3, r0, r3
 8007306:	3301      	adds	r3, #1
 8007308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800730c:	2b00      	cmp	r3, #0
 800730e:	bf0c      	ite	eq
 8007310:	2301      	moveq	r3, #1
 8007312:	2300      	movne	r3, #0
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_I2C_Init+0x15e>
 800731a:	2301      	movs	r3, #1
 800731c:	e022      	b.n	8007364 <HAL_I2C_Init+0x1a4>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10e      	bne.n	8007344 <HAL_I2C_Init+0x184>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1e58      	subs	r0, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6859      	ldr	r1, [r3, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	440b      	add	r3, r1
 8007334:	fbb0 f3f3 	udiv	r3, r0, r3
 8007338:	3301      	adds	r3, #1
 800733a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007342:	e00f      	b.n	8007364 <HAL_I2C_Init+0x1a4>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1e58      	subs	r0, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	0099      	lsls	r1, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	fbb0 f3f3 	udiv	r3, r0, r3
 800735a:	3301      	adds	r3, #1
 800735c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	6809      	ldr	r1, [r1, #0]
 8007368:	4313      	orrs	r3, r2
 800736a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6911      	ldr	r1, [r2, #16]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68d2      	ldr	r2, [r2, #12]
 800739e:	4311      	orrs	r1, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6812      	ldr	r2, [r2, #0]
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	000186a0 	.word	0x000186a0
 8007400:	001e847f 	.word	0x001e847f
 8007404:	003d08ff 	.word	0x003d08ff
 8007408:	431bde83 	.word	0x431bde83
 800740c:	10624dd3 	.word	0x10624dd3

08007410 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	461a      	mov	r2, r3
 800741e:	4603      	mov	r3, r0
 8007420:	817b      	strh	r3, [r7, #10]
 8007422:	460b      	mov	r3, r1
 8007424:	813b      	strh	r3, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800742a:	f7ff f80b 	bl	8006444 <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b20      	cmp	r3, #32
 800743a:	f040 80d9 	bne.w	80075f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	2319      	movs	r3, #25
 8007444:	2201      	movs	r2, #1
 8007446:	496d      	ldr	r1, [pc, #436]	; (80075fc <HAL_I2C_Mem_Write+0x1ec>)
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fc5b 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
 8007456:	e0cc      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_I2C_Mem_Write+0x56>
 8007462:	2302      	movs	r3, #2
 8007464:	e0c5      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d007      	beq.n	800748c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800749a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2221      	movs	r2, #33	; 0x21
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2240      	movs	r2, #64	; 0x40
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4a4d      	ldr	r2, [pc, #308]	; (8007600 <HAL_I2C_Mem_Write+0x1f0>)
 80074cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074ce:	88f8      	ldrh	r0, [r7, #6]
 80074d0:	893a      	ldrh	r2, [r7, #8]
 80074d2:	8979      	ldrh	r1, [r7, #10]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4603      	mov	r3, r0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fab6 	bl	8007a50 <I2C_RequestMemoryWrite>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d052      	beq.n	8007590 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e081      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 fcdc 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00d      	beq.n	800751a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	2b04      	cmp	r3, #4
 8007504:	d107      	bne.n	8007516 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e06b      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b04      	cmp	r3, #4
 8007556:	d11b      	bne.n	8007590 <HAL_I2C_Mem_Write+0x180>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d017      	beq.n	8007590 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1aa      	bne.n	80074ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fcc8 	bl	8007f32 <I2C_WaitOnBTFFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d107      	bne.n	80075c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e016      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e000      	b.n	80075f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	00100002 	.word	0x00100002
 8007600:	ffff0000 	.word	0xffff0000

08007604 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08c      	sub	sp, #48	; 0x30
 8007608:	af02      	add	r7, sp, #8
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	817b      	strh	r3, [r7, #10]
 8007616:	460b      	mov	r3, r1
 8007618:	813b      	strh	r3, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800761e:	f7fe ff11 	bl	8006444 <HAL_GetTick>
 8007622:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b20      	cmp	r3, #32
 800762e:	f040 8208 	bne.w	8007a42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2319      	movs	r3, #25
 8007638:	2201      	movs	r2, #1
 800763a:	497b      	ldr	r1, [pc, #492]	; (8007828 <HAL_I2C_Mem_Read+0x224>)
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fb61 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007648:	2302      	movs	r3, #2
 800764a:	e1fb      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <HAL_I2C_Mem_Read+0x56>
 8007656:	2302      	movs	r3, #2
 8007658:	e1f4      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b01      	cmp	r3, #1
 800766e:	d007      	beq.n	8007680 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800768e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2222      	movs	r2, #34	; 0x22
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80076b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4a5b      	ldr	r2, [pc, #364]	; (800782c <HAL_I2C_Mem_Read+0x228>)
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076c2:	88f8      	ldrh	r0, [r7, #6]
 80076c4:	893a      	ldrh	r2, [r7, #8]
 80076c6:	8979      	ldrh	r1, [r7, #10]
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4603      	mov	r3, r0
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fa46 	bl	8007b64 <I2C_RequestMemoryRead>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e1b0      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d113      	bne.n	8007712 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ea:	2300      	movs	r3, #0
 80076ec:	623b      	str	r3, [r7, #32]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	623b      	str	r3, [r7, #32]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e184      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	2b01      	cmp	r3, #1
 8007718:	d11b      	bne.n	8007752 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	e164      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007756:	2b02      	cmp	r3, #2
 8007758:	d11b      	bne.n	8007792 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007768:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777a:	2300      	movs	r3, #0
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	61bb      	str	r3, [r7, #24]
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	e144      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80077a8:	e138      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f200 80f1 	bhi.w	8007996 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d123      	bne.n	8007804 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fbf7 	bl	8007fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e139      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007802:	e10b      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007808:	2b02      	cmp	r3, #2
 800780a:	d14e      	bne.n	80078aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	2200      	movs	r2, #0
 8007814:	4906      	ldr	r1, [pc, #24]	; (8007830 <HAL_I2C_Mem_Read+0x22c>)
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fa74 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e10e      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
 8007826:	bf00      	nop
 8007828:	00100002 	.word	0x00100002
 800782c:	ffff0000 	.word	0xffff0000
 8007830:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007892:	3b01      	subs	r3, #1
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078a8:	e0b8      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	2200      	movs	r2, #0
 80078b2:	4966      	ldr	r1, [pc, #408]	; (8007a4c <HAL_I2C_Mem_Read+0x448>)
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 fa25 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0bf      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691a      	ldr	r2, [r3, #16]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f0:	3b01      	subs	r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2200      	movs	r2, #0
 800790e:	494f      	ldr	r1, [pc, #316]	; (8007a4c <HAL_I2C_Mem_Read+0x448>)
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f9f7 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e091      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800792e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	b2d2      	uxtb	r2, r2
 800793c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007994:	e042      	b.n	8007a1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fb0a 	bl	8007fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e04c      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d118      	bne.n	8007a1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	b2d2      	uxtb	r2, r2
 80079f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f47f aec2 	bne.w	80077aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e000      	b.n	8007a44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a42:	2302      	movs	r3, #2
  }
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	; 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	00010004 	.word	0x00010004

08007a50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	817b      	strh	r3, [r7, #10]
 8007a62:	460b      	mov	r3, r1
 8007a64:	813b      	strh	r3, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f93c 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e05f      	b.n	8007b56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a96:	897b      	ldrh	r3, [r7, #10]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	492d      	ldr	r1, [pc, #180]	; (8007b60 <I2C_RequestMemoryWrite+0x110>)
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f980 	bl	8007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e04c      	b.n	8007b56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad4:	6a39      	ldr	r1, [r7, #32]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f9ea 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d107      	bne.n	8007afa <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e02b      	b.n	8007b56 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d105      	bne.n	8007b10 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b04:	893b      	ldrh	r3, [r7, #8]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	611a      	str	r2, [r3, #16]
 8007b0e:	e021      	b.n	8007b54 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b10:	893b      	ldrh	r3, [r7, #8]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b20:	6a39      	ldr	r1, [r7, #32]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f9c4 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00d      	beq.n	8007b4a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d107      	bne.n	8007b46 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e005      	b.n	8007b56 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	00010002 	.word	0x00010002

08007b64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	817b      	strh	r3, [r7, #10]
 8007b76:	460b      	mov	r3, r1
 8007b78:	813b      	strh	r3, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f8aa 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e09e      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	6a3a      	ldr	r2, [r7, #32]
 8007bce:	494c      	ldr	r1, [pc, #304]	; (8007d00 <I2C_RequestMemoryRead+0x19c>)
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f8ee 	bl	8007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e08b      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	6a39      	ldr	r1, [r7, #32]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f958 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00d      	beq.n	8007c22 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d107      	bne.n	8007c1e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e06a      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c22:	88fb      	ldrh	r3, [r7, #6]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d105      	bne.n	8007c34 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c28:	893b      	ldrh	r3, [r7, #8]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	611a      	str	r2, [r3, #16]
 8007c32:	e021      	b.n	8007c78 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c34:	893b      	ldrh	r3, [r7, #8]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c44:	6a39      	ldr	r1, [r7, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f932 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00d      	beq.n	8007c6e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d107      	bne.n	8007c6a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e044      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6e:	893b      	ldrh	r3, [r7, #8]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7a:	6a39      	ldr	r1, [r7, #32]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f917 	bl	8007eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d107      	bne.n	8007ca0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e029      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f81f 	bl	8007d04 <I2C_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e013      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cd0:	897b      	ldrh	r3, [r7, #10]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	6a3a      	ldr	r2, [r7, #32]
 8007ce4:	4906      	ldr	r1, [pc, #24]	; (8007d00 <I2C_RequestMemoryRead+0x19c>)
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f863 	bl	8007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	00010002 	.word	0x00010002

08007d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	4613      	mov	r3, r2
 8007d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d14:	e025      	b.n	8007d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d021      	beq.n	8007d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1e:	f7fe fb91 	bl	8006444 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d302      	bcc.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d116      	bne.n	8007d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e023      	b.n	8007daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d10d      	bne.n	8007d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	43da      	mvns	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	e00c      	b.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	43da      	mvns	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4013      	ands	r3, r2
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d0b6      	beq.n	8007d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007dc0:	e051      	b.n	8007e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd0:	d123      	bne.n	8007e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f043 0204 	orr.w	r2, r3, #4
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e046      	b.n	8007ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d021      	beq.n	8007e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e22:	f7fe fb0f 	bl	8006444 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d302      	bcc.n	8007e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d116      	bne.n	8007e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f043 0220 	orr.w	r2, r3, #32
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e020      	b.n	8007ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	0c1b      	lsrs	r3, r3, #16
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d10c      	bne.n	8007e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	43da      	mvns	r2, r3
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	2300      	moveq	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	e00b      	b.n	8007ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	43da      	mvns	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4013      	ands	r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d18d      	bne.n	8007dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ebc:	e02d      	b.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f8ce 	bl	8008060 <I2C_IsAcknowledgeFailed>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e02d      	b.n	8007f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d021      	beq.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed6:	f7fe fab5 	bl	8006444 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d116      	bne.n	8007f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f043 0220 	orr.w	r2, r3, #32
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e007      	b.n	8007f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f24:	2b80      	cmp	r3, #128	; 0x80
 8007f26:	d1ca      	bne.n	8007ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f3e:	e02d      	b.n	8007f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f88d 	bl	8008060 <I2C_IsAcknowledgeFailed>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e02d      	b.n	8007fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d021      	beq.n	8007f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f58:	f7fe fa74 	bl	8006444 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d302      	bcc.n	8007f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d116      	bne.n	8007f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f043 0220 	orr.w	r2, r3, #32
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e007      	b.n	8007fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d1ca      	bne.n	8007f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fc0:	e042      	b.n	8008048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d119      	bne.n	8008004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0210 	mvn.w	r2, #16
 8007fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e029      	b.n	8008058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008004:	f7fe fa1e 	bl	8006444 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d116      	bne.n	8008048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e007      	b.n	8008058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008052:	2b40      	cmp	r3, #64	; 0x40
 8008054:	d1b5      	bne.n	8007fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008076:	d11b      	bne.n	80080b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	f043 0204 	orr.w	r2, r3, #4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080c0:	b08f      	sub	sp, #60	; 0x3c
 80080c2:	af0a      	add	r7, sp, #40	; 0x28
 80080c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e10f      	b.n	80082f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f00c faa4 	bl	8014638 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2203      	movs	r2, #3
 80080f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f006 f837 	bl	800e182 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	687e      	ldr	r6, [r7, #4]
 800811c:	466d      	mov	r5, sp
 800811e:	f106 0410 	add.w	r4, r6, #16
 8008122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800812a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800812e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008132:	1d33      	adds	r3, r6, #4
 8008134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008136:	6838      	ldr	r0, [r7, #0]
 8008138:	f005 ff0e 	bl	800df58 <USB_CoreInit>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e0d0      	b.n	80082f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f006 f825 	bl	800e1a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
 800815e:	e04a      	b.n	80081f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008160:	7bfa      	ldrb	r2, [r7, #15]
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	333d      	adds	r3, #61	; 0x3d
 8008170:	2201      	movs	r2, #1
 8008172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	333c      	adds	r3, #60	; 0x3c
 8008184:	7bfa      	ldrb	r2, [r7, #15]
 8008186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008188:	7bfa      	ldrb	r2, [r7, #15]
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	b298      	uxth	r0, r3
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	00db      	lsls	r3, r3, #3
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	3342      	adds	r3, #66	; 0x42
 800819c:	4602      	mov	r2, r0
 800819e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081a0:	7bfa      	ldrb	r2, [r7, #15]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	333f      	adds	r3, #63	; 0x3f
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081b4:	7bfa      	ldrb	r2, [r7, #15]
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	3344      	adds	r3, #68	; 0x44
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081c8:	7bfa      	ldrb	r2, [r7, #15]
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	4613      	mov	r3, r2
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	440b      	add	r3, r1
 80081d6:	3348      	adds	r3, #72	; 0x48
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081dc:	7bfa      	ldrb	r2, [r7, #15]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	3350      	adds	r3, #80	; 0x50
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	3301      	adds	r3, #1
 80081f4:	73fb      	strb	r3, [r7, #15]
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d3af      	bcc.n	8008160 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
 8008204:	e044      	b.n	8008290 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008206:	7bfa      	ldrb	r2, [r7, #15]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008218:	2200      	movs	r2, #0
 800821a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800821c:	7bfa      	ldrb	r2, [r7, #15]
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800822e:	7bfa      	ldrb	r2, [r7, #15]
 8008230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008232:	7bfa      	ldrb	r2, [r7, #15]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800825e:	7bfa      	ldrb	r2, [r7, #15]
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	4613      	mov	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	1a9b      	subs	r3, r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	440b      	add	r3, r1
 800826c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008274:	7bfa      	ldrb	r2, [r7, #15]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	1a9b      	subs	r3, r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	3301      	adds	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	7bfa      	ldrb	r2, [r7, #15]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	429a      	cmp	r2, r3
 8008298:	d3b5      	bcc.n	8008206 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	687e      	ldr	r6, [r7, #4]
 80082a2:	466d      	mov	r5, sp
 80082a4:	f106 0410 	add.w	r4, r6, #16
 80082a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80082b8:	1d33      	adds	r3, r6, #4
 80082ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082bc:	6838      	ldr	r0, [r7, #0]
 80082be:	f005 ff9b 	bl	800e1f8 <USB_DevInit>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e00d      	b.n	80082f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f006 ff90 	bl	800f20e <USB_DevDisconnect>

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_PCD_Start+0x1c>
 8008310:	2302      	movs	r3, #2
 8008312:	e020      	b.n	8008356 <HAL_PCD_Start+0x5e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	2b01      	cmp	r3, #1
 8008322:	d109      	bne.n	8008338 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008328:	2b01      	cmp	r3, #1
 800832a:	d005      	beq.n	8008338 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f006 ff4e 	bl	800f1de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f005 ff0a 	bl	800e160 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800835e:	b590      	push	{r4, r7, lr}
 8008360:	b08d      	sub	sp, #52	; 0x34
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f006 fff5 	bl	800f364 <USB_GetMode>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 838e 	bne.w	8008a9e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f006 ff59 	bl	800f23e <USB_ReadInterrupts>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 8384 	beq.w	8008a9c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f006 ff50 	bl	800f23e <USB_ReadInterrupts>
 800839e:	4603      	mov	r3, r0
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d107      	bne.n	80083b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f002 0202 	and.w	r2, r2, #2
 80083b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f006 ff3e 	bl	800f23e <USB_ReadInterrupts>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083cc:	d17b      	bne.n	80084c6 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f006 ff44 	bl	800f264 <USB_ReadDevAllOutEpInterrupt>
 80083dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80083de:	e06f      	b.n	80084c0 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d064      	beq.n	80084b4 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	b2d2      	uxtb	r2, r2
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f006 ff69 	bl	800f2cc <USB_ReadDevOutEPInterrupt>
 80083fa:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00c      	beq.n	8008420 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	2301      	movs	r3, #1
 8008416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fe0e 	bl	800903c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800842a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 ff0d 	bl	800924c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	461a      	mov	r2, r3
 8008440:	2308      	movs	r3, #8
 8008442:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	f003 0310 	and.w	r3, r3, #16
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	4413      	add	r3, r2
 8008456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845a:	461a      	mov	r2, r3
 800845c:	2310      	movs	r3, #16
 800845e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d015      	beq.n	8008496 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d108      	bne.n	8008484 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800847c:	461a      	mov	r2, r3
 800847e:	2101      	movs	r1, #1
 8008480:	f006 ffb4 	bl	800f3ec <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008490:	461a      	mov	r2, r3
 8008492:	2320      	movs	r3, #32
 8008494:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	461a      	mov	r2, r3
 80084ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	3301      	adds	r3, #1
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	085b      	lsrs	r3, r3, #1
 80084be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d18c      	bne.n	80083e0 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f006 feb7 	bl	800f23e <USB_ReadInterrupts>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084da:	f040 80c4 	bne.w	8008666 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f006 fed8 	bl	800f298 <USB_ReadDevAllInEpInterrupt>
 80084e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80084ee:	e0b6      	b.n	800865e <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80ab 	beq.w	8008652 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f006 fefe 	bl	800f308 <USB_ReadDevInEPInterrupt>
 800850c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d05b      	beq.n	80085d0 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	2201      	movs	r2, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	43db      	mvns	r3, r3
 8008532:	69f9      	ldr	r1, [r7, #28]
 8008534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008538:	4013      	ands	r3, r2
 800853a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	461a      	mov	r2, r3
 800854a:	2301      	movs	r3, #1
 800854c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d11b      	bne.n	800858e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855a:	4613      	mov	r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	3348      	adds	r3, #72	; 0x48
 8008566:	6819      	ldr	r1, [r3, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4403      	add	r3, r0
 8008576:	3344      	adds	r3, #68	; 0x44
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4419      	add	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008580:	4613      	mov	r3, r2
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4403      	add	r3, r0
 800858a:	3348      	adds	r3, #72	; 0x48
 800858c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	b2db      	uxtb	r3, r3
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f00c f8d0 	bl	801473a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d116      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d113      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x272>
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	3350      	adds	r3, #80	; 0x50
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d108      	bne.n	80085d0 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80085c8:	461a      	mov	r2, r3
 80085ca:	2101      	movs	r1, #1
 80085cc:	f006 ff0e 	bl	800f3ec <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d008      	beq.n	80085ec <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e6:	461a      	mov	r2, r3
 80085e8:	2308      	movs	r3, #8
 80085ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d008      	beq.n	8008608 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008602:	461a      	mov	r2, r3
 8008604:	2310      	movs	r3, #16
 8008606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	461a      	mov	r2, r3
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	461a      	mov	r2, r3
 800863c:	2302      	movs	r3, #2
 800863e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800864a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fc67 	bl	8008f20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	3301      	adds	r3, #1
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	2b00      	cmp	r3, #0
 8008662:	f47f af45 	bne.w	80084f0 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4618      	mov	r0, r3
 800866c:	f006 fde7 	bl	800f23e <USB_ReadInterrupts>
 8008670:	4603      	mov	r3, r0
 8008672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867a:	d122      	bne.n	80086c2 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008696:	2b01      	cmp	r3, #1
 8008698:	d108      	bne.n	80086ac <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80086a2:	2100      	movs	r1, #0
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fe89 	bl	80093bc <HAL_PCDEx_LPM_Callback>
 80086aa:	e002      	b.n	80086b2 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f00c f8bb 	bl	8014828 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695a      	ldr	r2, [r3, #20]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80086c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f006 fdb9 	bl	800f23e <USB_ReadInterrupts>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086d6:	d112      	bne.n	80086fe <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d102      	bne.n	80086ee <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f00c f877 	bl	80147dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695a      	ldr	r2, [r3, #20]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80086fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f006 fd9b 	bl	800f23e <USB_ReadInterrupts>
 8008708:	4603      	mov	r3, r0
 800870a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800870e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008712:	f040 80a7 	bne.w	8008864 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2110      	movs	r1, #16
 8008730:	4618      	mov	r0, r3
 8008732:	f005 fed3 	bl	800e4dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008736:	2300      	movs	r3, #0
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800873a:	e036      	b.n	80087aa <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008748:	461a      	mov	r2, r3
 800874a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800874e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800876e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877c:	461a      	mov	r2, r3
 800877e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008782:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	440a      	add	r2, r1
 800879a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800879e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	3301      	adds	r3, #1
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d3c3      	bcc.n	800873c <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80087c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d016      	beq.n	80087fe <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e0:	f043 030b 	orr.w	r3, r3, #11
 80087e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087f6:	f043 030b 	orr.w	r3, r3, #11
 80087fa:	6453      	str	r3, [r2, #68]	; 0x44
 80087fc:	e015      	b.n	800882a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800880c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008810:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008814:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008824:	f043 030b 	orr.w	r3, r3, #11
 8008828:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008838:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800883c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800884e:	461a      	mov	r2, r3
 8008850:	f006 fdcc 	bl	800f3ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f006 fce8 	bl	800f23e <USB_ReadInterrupts>
 800886e:	4603      	mov	r3, r0
 8008870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008878:	d124      	bne.n	80088c4 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f006 fd7e 	bl	800f380 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f005 fe88 	bl	800e59e <USB_GetDevSpeed>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681c      	ldr	r4, [r3, #0]
 800889a:	f001 f971 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 800889e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	4620      	mov	r0, r4
 80088aa:	f005 fbb7 	bl	800e01c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f00b ff6b 	bl	801478a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695a      	ldr	r2, [r3, #20]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80088c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f006 fcb8 	bl	800f23e <USB_ReadInterrupts>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b10      	cmp	r3, #16
 80088d6:	d161      	bne.n	800899c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0210 	bic.w	r2, r2, #16
 80088e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f003 020f 	and.w	r2, r3, #15
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	1a9b      	subs	r3, r3, r2
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	4413      	add	r3, r2
 8008904:	3304      	adds	r3, #4
 8008906:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	0c5b      	lsrs	r3, r3, #17
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	2b02      	cmp	r3, #2
 8008912:	d124      	bne.n	800895e <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d035      	beq.n	800898c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	091b      	lsrs	r3, r3, #4
 8008928:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800892a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800892e:	b29b      	uxth	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	6a38      	ldr	r0, [r7, #32]
 8008934:	f006 fb30 	bl	800ef98 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	091b      	lsrs	r3, r3, #4
 8008952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008956:	441a      	add	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	619a      	str	r2, [r3, #24]
 800895c:	e016      	b.n	800898c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	0c5b      	lsrs	r3, r3, #17
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	2b06      	cmp	r3, #6
 8008968:	d110      	bne.n	800898c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008970:	2208      	movs	r2, #8
 8008972:	4619      	mov	r1, r3
 8008974:	6a38      	ldr	r0, [r7, #32]
 8008976:	f006 fb0f 	bl	800ef98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	091b      	lsrs	r3, r3, #4
 8008982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008986:	441a      	add	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0210 	orr.w	r2, r2, #16
 800899a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f006 fc4c 	bl	800f23e <USB_ReadInterrupts>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	d10a      	bne.n	80089c6 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f00b fedc 	bl	801476e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f002 0208 	and.w	r2, r2, #8
 80089c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f006 fc37 	bl	800f23e <USB_ReadInterrupts>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089da:	d10f      	bne.n	80089fc <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f00b ff3e 	bl	8014868 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80089fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f006 fc1c 	bl	800f23e <USB_ReadInterrupts>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a10:	d10f      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f00b ff11 	bl	8014844 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695a      	ldr	r2, [r3, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f006 fc01 	bl	800f23e <USB_ReadInterrupts>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a46:	d10a      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f00b ff1f 	bl	801488c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695a      	ldr	r2, [r3, #20]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008a5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f006 fbeb 	bl	800f23e <USB_ReadInterrupts>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f003 0304 	and.w	r3, r3, #4
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d115      	bne.n	8008a9e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f00b ff0f 	bl	80148a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6859      	ldr	r1, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	e000      	b.n	8008a9e <HAL_PCD_IRQHandler+0x740>
      return;
 8008a9c:	bf00      	nop
    }
  }
}
 8008a9e:	3734      	adds	r7, #52	; 0x34
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <HAL_PCD_SetAddress+0x1a>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e013      	b.n	8008ae6 <HAL_PCD_SetAddress+0x42>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	78fa      	ldrb	r2, [r7, #3]
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f006 fb5b 	bl	800f192 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	4608      	mov	r0, r1
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	4603      	mov	r3, r0
 8008afe:	70fb      	strb	r3, [r7, #3]
 8008b00:	460b      	mov	r3, r1
 8008b02:	803b      	strh	r3, [r7, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da0f      	bge.n	8008b34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	f003 020f 	and.w	r2, r3, #15
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	3338      	adds	r3, #56	; 0x38
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	705a      	strb	r2, [r3, #1]
 8008b32:	e00f      	b.n	8008b54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	f003 020f 	and.w	r2, r3, #15
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b60:	883a      	ldrh	r2, [r7, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	78ba      	ldrb	r2, [r7, #2]
 8008b6a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d004      	beq.n	8008b7e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b7e:	78bb      	ldrb	r3, [r7, #2]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d102      	bne.n	8008b8a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_PCD_EP_Open+0xaa>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e00e      	b.n	8008bb6 <HAL_PCD_EP_Open+0xc8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f005 fd1e 	bl	800e5e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da0f      	bge.n	8008bf2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	f003 020f 	and.w	r2, r3, #15
 8008bd8:	4613      	mov	r3, r2
 8008bda:	00db      	lsls	r3, r3, #3
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	3338      	adds	r3, #56	; 0x38
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	3304      	adds	r3, #4
 8008be8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	705a      	strb	r2, [r3, #1]
 8008bf0:	e00f      	b.n	8008c12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	f003 020f 	and.w	r2, r3, #15
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	4413      	add	r3, r2
 8008c08:	3304      	adds	r3, #4
 8008c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_PCD_EP_Close+0x6e>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e00e      	b.n	8008c4a <HAL_PCD_EP_Close+0x8c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f005 fd5c 	bl	800e6f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b086      	sub	sp, #24
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	f003 020f 	and.w	r2, r3, #15
 8008c68:	4613      	mov	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	1a9b      	subs	r3, r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	3304      	adds	r3, #4
 8008c7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	2200      	movs	r2, #0
 8008c92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	f003 030f 	and.w	r3, r3, #15
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d102      	bne.n	8008cae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	f003 030f 	and.w	r3, r3, #15
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6979      	ldr	r1, [r7, #20]
 8008cc6:	f005 ffdf 	bl	800ec88 <USB_EP0StartXfer>
 8008cca:	e008      	b.n	8008cde <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	6979      	ldr	r1, [r7, #20]
 8008cda:	f005 fd91 	bl	800e800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	f003 020f 	and.w	r2, r3, #15
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008d0a:	681b      	ldr	r3, [r3, #0]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	460b      	mov	r3, r1
 8008d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	f003 020f 	and.w	r2, r3, #15
 8008d2e:	4613      	mov	r3, r2
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	3338      	adds	r3, #56	; 0x38
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2201      	movs	r2, #1
 8008d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d102      	bne.n	8008d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d109      	bne.n	8008d90 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	6979      	ldr	r1, [r7, #20]
 8008d8a:	f005 ff7d 	bl	800ec88 <USB_EP0StartXfer>
 8008d8e:	e008      	b.n	8008da2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6979      	ldr	r1, [r7, #20]
 8008d9e:	f005 fd2f 	bl	800e800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	f003 020f 	and.w	r2, r3, #15
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d901      	bls.n	8008dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e050      	b.n	8008e6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da0f      	bge.n	8008df2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	3338      	adds	r3, #56	; 0x38
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	3304      	adds	r3, #4
 8008de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	705a      	strb	r2, [r3, #1]
 8008df0:	e00d      	b.n	8008e0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008df2:	78fa      	ldrb	r2, [r7, #3]
 8008df4:	4613      	mov	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	1a9b      	subs	r3, r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	b2da      	uxtb	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <HAL_PCD_EP_SetStall+0x82>
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e01e      	b.n	8008e6c <HAL_PCD_EP_SetStall+0xc0>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f006 f8d4 	bl	800efea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	b2d9      	uxtb	r1, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f006 fac5 	bl	800f3ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	f003 020f 	and.w	r2, r3, #15
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d901      	bls.n	8008e92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e042      	b.n	8008f18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	da0f      	bge.n	8008eba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e9a:	78fb      	ldrb	r3, [r7, #3]
 8008e9c:	f003 020f 	and.w	r2, r3, #15
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	3338      	adds	r3, #56	; 0x38
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	705a      	strb	r2, [r3, #1]
 8008eb8:	e00f      	b.n	8008eda <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	f003 020f 	and.w	r2, r3, #15
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4413      	add	r3, r2
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	f003 030f 	and.w	r3, r3, #15
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_PCD_EP_ClrStall+0x86>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e00e      	b.n	8008f18 <HAL_PCD_EP_ClrStall+0xa4>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f006 f8dc 	bl	800f0c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	4613      	mov	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	3338      	adds	r3, #56	; 0x38
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	4413      	add	r3, r2
 8008f44:	3304      	adds	r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d901      	bls.n	8008f58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e06c      	b.n	8009032 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d902      	bls.n	8008f74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	3303      	adds	r3, #3
 8008f78:	089b      	lsrs	r3, r3, #2
 8008f7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008f7c:	e02b      	b.n	8008fd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d902      	bls.n	8008f9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	3303      	adds	r3, #3
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68d9      	ldr	r1, [r3, #12]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6978      	ldr	r0, [r7, #20]
 8008fba:	f005 ffb8 	bl	800ef2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d809      	bhi.n	8009000 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d203      	bcs.n	8009000 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1be      	bne.n	8008f7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	429a      	cmp	r2, r3
 800900a:	d811      	bhi.n	8009030 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	2201      	movs	r2, #1
 8009014:	fa02 f303 	lsl.w	r3, r2, r3
 8009018:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	43db      	mvns	r3, r3
 8009026:	6939      	ldr	r1, [r7, #16]
 8009028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800902c:	4013      	ands	r3, r2
 800902e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	333c      	adds	r3, #60	; 0x3c
 8009054:	3304      	adds	r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b01      	cmp	r3, #1
 8009070:	f040 80b3 	bne.w	80091da <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b00      	cmp	r3, #0
 800907c:	d028      	beq.n	80090d0 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4a70      	ldr	r2, [pc, #448]	; (8009244 <PCD_EP_OutXfrComplete_int+0x208>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d90e      	bls.n	80090a4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800908c:	2b00      	cmp	r3, #0
 800908e:	d009      	beq.n	80090a4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909c:	461a      	mov	r2, r3
 800909e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f00b fb1b 	bl	80146e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6818      	ldr	r0, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80090b4:	461a      	mov	r2, r3
 80090b6:	2101      	movs	r1, #1
 80090b8:	f006 f998 	bl	800f3ec <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	461a      	mov	r2, r3
 80090ca:	2308      	movs	r3, #8
 80090cc:	6093      	str	r3, [r2, #8]
 80090ce:	e0b3      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f003 0320 	and.w	r3, r3, #32
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	461a      	mov	r2, r3
 80090e8:	2320      	movs	r3, #32
 80090ea:	6093      	str	r3, [r2, #8]
 80090ec:	e0a4      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f040 809f 	bne.w	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4a51      	ldr	r2, [pc, #324]	; (8009244 <PCD_EP_OutXfrComplete_int+0x208>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d90f      	bls.n	8009122 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009118:	461a      	mov	r2, r3
 800911a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800911e:	6093      	str	r3, [r2, #8]
 8009120:	e08a      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	4613      	mov	r3, r2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009134:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	0159      	lsls	r1, r3, #5
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	440b      	add	r3, r1
 800913e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009148:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	4613      	mov	r3, r2
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4403      	add	r3, r0
 8009158:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800915c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	4613      	mov	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009170:	6819      	ldr	r1, [r3, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	4613      	mov	r3, r2
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	1a9b      	subs	r3, r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4403      	add	r3, r0
 8009180:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4419      	add	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4403      	add	r3, r0
 8009196:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800919a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f00b faae 	bl	8014704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d144      	bne.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	440b      	add	r3, r1
 80091bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d138      	bne.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091d0:	461a      	mov	r2, r3
 80091d2:	2101      	movs	r1, #1
 80091d4:	f006 f90a 	bl	800f3ec <USB_EP0_OutStart>
 80091d8:	e02e      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <PCD_EP_OutXfrComplete_int+0x20c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d124      	bne.n	800922c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	015a      	lsls	r2, r3, #5
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	4413      	add	r3, r2
 80091f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f8:	461a      	mov	r2, r3
 80091fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091fe:	6093      	str	r3, [r2, #8]
 8009200:	e01a      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009218:	461a      	mov	r2, r3
 800921a:	2320      	movs	r3, #32
 800921c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f00b fa6d 	bl	8014704 <HAL_PCD_DataOutStageCallback>
 800922a:	e005      	b.n	8009238 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f00b fa66 	bl	8014704 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	4f54300a 	.word	0x4f54300a
 8009248:	4f54310a 	.word	0x4f54310a

0800924c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	333c      	adds	r3, #60	; 0x3c
 8009264:	3304      	adds	r3, #4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d113      	bne.n	80092aa <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d922      	bls.n	80092d0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01d      	beq.n	80092d0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a0:	461a      	mov	r2, r3
 80092a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092a6:	6093      	str	r3, [r2, #8]
 80092a8:	e012      	b.n	80092d0 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4a16      	ldr	r2, [pc, #88]	; (8009308 <PCD_EP_OutSetupPacket_int+0xbc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d10e      	bne.n	80092d0 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d009      	beq.n	80092d0 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c8:	461a      	mov	r2, r3
 80092ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f00b fa05 	bl	80146e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <PCD_EP_OutSetupPacket_int+0xb8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d90c      	bls.n	80092f8 <PCD_EP_OutSetupPacket_int+0xac>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d108      	bne.n	80092f8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092f0:	461a      	mov	r2, r3
 80092f2:	2101      	movs	r1, #1
 80092f4:	f006 f87a 	bl	800f3ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	4f54300a 	.word	0x4f54300a
 8009308:	4f54310a 	.word	0x4f54310a

0800930c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
 8009318:	4613      	mov	r3, r2
 800931a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d107      	bne.n	800933a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800932a:	883b      	ldrh	r3, [r7, #0]
 800932c:	0419      	lsls	r1, r3, #16
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	430a      	orrs	r2, r1
 8009336:	629a      	str	r2, [r3, #40]	; 0x28
 8009338:	e028      	b.n	800938c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	4413      	add	r3, r2
 8009346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
 800934c:	e00d      	b.n	800936a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	3340      	adds	r3, #64	; 0x40
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	3301      	adds	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
 800936a:	7bfa      	ldrb	r2, [r7, #15]
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	3b01      	subs	r3, #1
 8009370:	429a      	cmp	r2, r3
 8009372:	d3ec      	bcc.n	800934e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009374:	883b      	ldrh	r3, [r7, #0]
 8009376:	0418      	lsls	r0, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6819      	ldr	r1, [r3, #0]
 800937c:	78fb      	ldrb	r3, [r7, #3]
 800937e:	3b01      	subs	r3, #1
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	4302      	orrs	r2, r0
 8009384:	3340      	adds	r3, #64	; 0x40
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	887a      	ldrh	r2, [r7, #2]
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e22d      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d075      	beq.n	80094de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093f2:	4ba3      	ldr	r3, [pc, #652]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 030c 	and.w	r3, r3, #12
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d00c      	beq.n	8009418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093fe:	4ba0      	ldr	r3, [pc, #640]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009406:	2b08      	cmp	r3, #8
 8009408:	d112      	bne.n	8009430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800940a:	4b9d      	ldr	r3, [pc, #628]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009416:	d10b      	bne.n	8009430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009418:	4b99      	ldr	r3, [pc, #612]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05b      	beq.n	80094dc <HAL_RCC_OscConfig+0x108>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d157      	bne.n	80094dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e208      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009438:	d106      	bne.n	8009448 <HAL_RCC_OscConfig+0x74>
 800943a:	4b91      	ldr	r3, [pc, #580]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a90      	ldr	r2, [pc, #576]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	e01d      	b.n	8009484 <HAL_RCC_OscConfig+0xb0>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009450:	d10c      	bne.n	800946c <HAL_RCC_OscConfig+0x98>
 8009452:	4b8b      	ldr	r3, [pc, #556]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a8a      	ldr	r2, [pc, #552]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	4b88      	ldr	r3, [pc, #544]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a87      	ldr	r2, [pc, #540]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	e00b      	b.n	8009484 <HAL_RCC_OscConfig+0xb0>
 800946c:	4b84      	ldr	r3, [pc, #528]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a83      	ldr	r2, [pc, #524]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	4b81      	ldr	r3, [pc, #516]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a80      	ldr	r2, [pc, #512]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 800947e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d013      	beq.n	80094b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800948c:	f7fc ffda 	bl	8006444 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009494:	f7fc ffd6 	bl	8006444 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b64      	cmp	r3, #100	; 0x64
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e1cd      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094a6:	4b76      	ldr	r3, [pc, #472]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0f0      	beq.n	8009494 <HAL_RCC_OscConfig+0xc0>
 80094b2:	e014      	b.n	80094de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094b4:	f7fc ffc6 	bl	8006444 <HAL_GetTick>
 80094b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094ba:	e008      	b.n	80094ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094bc:	f7fc ffc2 	bl	8006444 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b64      	cmp	r3, #100	; 0x64
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e1b9      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094ce:	4b6c      	ldr	r3, [pc, #432]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1f0      	bne.n	80094bc <HAL_RCC_OscConfig+0xe8>
 80094da:	e000      	b.n	80094de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d063      	beq.n	80095b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094ea:	4b65      	ldr	r3, [pc, #404]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 030c 	and.w	r3, r3, #12
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094f6:	4b62      	ldr	r3, [pc, #392]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d11c      	bne.n	800953c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009502:	4b5f      	ldr	r3, [pc, #380]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d116      	bne.n	800953c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800950e:	4b5c      	ldr	r3, [pc, #368]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d005      	beq.n	8009526 <HAL_RCC_OscConfig+0x152>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d001      	beq.n	8009526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e18d      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009526:	4b56      	ldr	r3, [pc, #344]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	4952      	ldr	r1, [pc, #328]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009536:	4313      	orrs	r3, r2
 8009538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800953a:	e03a      	b.n	80095b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d020      	beq.n	8009586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009544:	4b4f      	ldr	r3, [pc, #316]	; (8009684 <HAL_RCC_OscConfig+0x2b0>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954a:	f7fc ff7b 	bl	8006444 <HAL_GetTick>
 800954e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009550:	e008      	b.n	8009564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009552:	f7fc ff77 	bl	8006444 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e16e      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009564:	4b46      	ldr	r3, [pc, #280]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0f0      	beq.n	8009552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009570:	4b43      	ldr	r3, [pc, #268]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	4940      	ldr	r1, [pc, #256]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009580:	4313      	orrs	r3, r2
 8009582:	600b      	str	r3, [r1, #0]
 8009584:	e015      	b.n	80095b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009586:	4b3f      	ldr	r3, [pc, #252]	; (8009684 <HAL_RCC_OscConfig+0x2b0>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958c:	f7fc ff5a 	bl	8006444 <HAL_GetTick>
 8009590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009594:	f7fc ff56 	bl	8006444 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e14d      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095a6:	4b36      	ldr	r3, [pc, #216]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f0      	bne.n	8009594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d030      	beq.n	8009620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d016      	beq.n	80095f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095c6:	4b30      	ldr	r3, [pc, #192]	; (8009688 <HAL_RCC_OscConfig+0x2b4>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095cc:	f7fc ff3a 	bl	8006444 <HAL_GetTick>
 80095d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095d2:	e008      	b.n	80095e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095d4:	f7fc ff36 	bl	8006444 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d901      	bls.n	80095e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e12d      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095e6:	4b26      	ldr	r3, [pc, #152]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 80095e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0f0      	beq.n	80095d4 <HAL_RCC_OscConfig+0x200>
 80095f2:	e015      	b.n	8009620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <HAL_RCC_OscConfig+0x2b4>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095fa:	f7fc ff23 	bl	8006444 <HAL_GetTick>
 80095fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009600:	e008      	b.n	8009614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009602:	f7fc ff1f 	bl	8006444 <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d901      	bls.n	8009614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e116      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1f0      	bne.n	8009602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80a0 	beq.w	800976e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10f      	bne.n	800965e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	4a0e      	ldr	r2, [pc, #56]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800964c:	6413      	str	r3, [r2, #64]	; 0x40
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <HAL_RCC_OscConfig+0x2ac>)
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800965a:	2301      	movs	r3, #1
 800965c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <HAL_RCC_OscConfig+0x2b8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009666:	2b00      	cmp	r3, #0
 8009668:	d121      	bne.n	80096ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800966a:	4b08      	ldr	r3, [pc, #32]	; (800968c <HAL_RCC_OscConfig+0x2b8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a07      	ldr	r2, [pc, #28]	; (800968c <HAL_RCC_OscConfig+0x2b8>)
 8009670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009676:	f7fc fee5 	bl	8006444 <HAL_GetTick>
 800967a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800967c:	e011      	b.n	80096a2 <HAL_RCC_OscConfig+0x2ce>
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800
 8009684:	42470000 	.word	0x42470000
 8009688:	42470e80 	.word	0x42470e80
 800968c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009690:	f7fc fed8 	bl	8006444 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1ad3      	subs	r3, r2, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d901      	bls.n	80096a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800969e:	2303      	movs	r3, #3
 80096a0:	e0cf      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096a2:	4b6a      	ldr	r3, [pc, #424]	; (800984c <HAL_RCC_OscConfig+0x478>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d0f0      	beq.n	8009690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d106      	bne.n	80096c4 <HAL_RCC_OscConfig+0x2f0>
 80096b6:	4b66      	ldr	r3, [pc, #408]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ba:	4a65      	ldr	r2, [pc, #404]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096bc:	f043 0301 	orr.w	r3, r3, #1
 80096c0:	6713      	str	r3, [r2, #112]	; 0x70
 80096c2:	e01c      	b.n	80096fe <HAL_RCC_OscConfig+0x32a>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b05      	cmp	r3, #5
 80096ca:	d10c      	bne.n	80096e6 <HAL_RCC_OscConfig+0x312>
 80096cc:	4b60      	ldr	r3, [pc, #384]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	4a5f      	ldr	r2, [pc, #380]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096d2:	f043 0304 	orr.w	r3, r3, #4
 80096d6:	6713      	str	r3, [r2, #112]	; 0x70
 80096d8:	4b5d      	ldr	r3, [pc, #372]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096dc:	4a5c      	ldr	r2, [pc, #368]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	6713      	str	r3, [r2, #112]	; 0x70
 80096e4:	e00b      	b.n	80096fe <HAL_RCC_OscConfig+0x32a>
 80096e6:	4b5a      	ldr	r3, [pc, #360]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ea:	4a59      	ldr	r2, [pc, #356]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096ec:	f023 0301 	bic.w	r3, r3, #1
 80096f0:	6713      	str	r3, [r2, #112]	; 0x70
 80096f2:	4b57      	ldr	r3, [pc, #348]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4a56      	ldr	r2, [pc, #344]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80096f8:	f023 0304 	bic.w	r3, r3, #4
 80096fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d015      	beq.n	8009732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009706:	f7fc fe9d 	bl	8006444 <HAL_GetTick>
 800970a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800970c:	e00a      	b.n	8009724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800970e:	f7fc fe99 	bl	8006444 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	f241 3288 	movw	r2, #5000	; 0x1388
 800971c:	4293      	cmp	r3, r2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e08e      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009724:	4b4a      	ldr	r3, [pc, #296]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0ee      	beq.n	800970e <HAL_RCC_OscConfig+0x33a>
 8009730:	e014      	b.n	800975c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009732:	f7fc fe87 	bl	8006444 <HAL_GetTick>
 8009736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009738:	e00a      	b.n	8009750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800973a:	f7fc fe83 	bl	8006444 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	f241 3288 	movw	r2, #5000	; 0x1388
 8009748:	4293      	cmp	r3, r2
 800974a:	d901      	bls.n	8009750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e078      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009750:	4b3f      	ldr	r3, [pc, #252]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ee      	bne.n	800973a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d105      	bne.n	800976e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009762:	4b3b      	ldr	r3, [pc, #236]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	4a3a      	ldr	r2, [pc, #232]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800976c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d064      	beq.n	8009840 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009776:	4b36      	ldr	r3, [pc, #216]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 030c 	and.w	r3, r3, #12
 800977e:	2b08      	cmp	r3, #8
 8009780:	d05c      	beq.n	800983c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	2b02      	cmp	r3, #2
 8009788:	d141      	bne.n	800980e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800978a:	4b32      	ldr	r3, [pc, #200]	; (8009854 <HAL_RCC_OscConfig+0x480>)
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009790:	f7fc fe58 	bl	8006444 <HAL_GetTick>
 8009794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009796:	e008      	b.n	80097aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009798:	f7fc fe54 	bl	8006444 <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e04b      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f0      	bne.n	8009798 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	019b      	lsls	r3, r3, #6
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	085b      	lsrs	r3, r3, #1
 80097ce:	3b01      	subs	r3, #1
 80097d0:	041b      	lsls	r3, r3, #16
 80097d2:	431a      	orrs	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	061b      	lsls	r3, r3, #24
 80097da:	491d      	ldr	r1, [pc, #116]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097e0:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <HAL_RCC_OscConfig+0x480>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097e6:	f7fc fe2d 	bl	8006444 <HAL_GetTick>
 80097ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ec:	e008      	b.n	8009800 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097ee:	f7fc fe29 	bl	8006444 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e020      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0f0      	beq.n	80097ee <HAL_RCC_OscConfig+0x41a>
 800980c:	e018      	b.n	8009840 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800980e:	4b11      	ldr	r3, [pc, #68]	; (8009854 <HAL_RCC_OscConfig+0x480>)
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009814:	f7fc fe16 	bl	8006444 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800981a:	e008      	b.n	800982e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800981c:	f7fc fe12 	bl	8006444 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d901      	bls.n	800982e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e009      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800982e:	4b08      	ldr	r3, [pc, #32]	; (8009850 <HAL_RCC_OscConfig+0x47c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1f0      	bne.n	800981c <HAL_RCC_OscConfig+0x448>
 800983a:	e001      	b.n	8009840 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e000      	b.n	8009842 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40007000 	.word	0x40007000
 8009850:	40023800 	.word	0x40023800
 8009854:	42470060 	.word	0x42470060

08009858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0ca      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800986c:	4b67      	ldr	r3, [pc, #412]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d90c      	bls.n	8009894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800987a:	4b64      	ldr	r3, [pc, #400]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009882:	4b62      	ldr	r3, [pc, #392]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d001      	beq.n	8009894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e0b6      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d020      	beq.n	80098e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098ac:	4b58      	ldr	r3, [pc, #352]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	4a57      	ldr	r2, [pc, #348]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80098b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d005      	beq.n	80098d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098c4:	4b52      	ldr	r3, [pc, #328]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	4a51      	ldr	r2, [pc, #324]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80098ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d0:	4b4f      	ldr	r3, [pc, #316]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	494c      	ldr	r1, [pc, #304]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d044      	beq.n	8009978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d107      	bne.n	8009906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098f6:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d119      	bne.n	8009936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e07d      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d003      	beq.n	8009916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009912:	2b03      	cmp	r3, #3
 8009914:	d107      	bne.n	8009926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009916:	4b3e      	ldr	r3, [pc, #248]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d109      	bne.n	8009936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e06d      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009926:	4b3a      	ldr	r3, [pc, #232]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0302 	and.w	r3, r3, #2
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e065      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009936:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f023 0203 	bic.w	r2, r3, #3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4933      	ldr	r1, [pc, #204]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 8009944:	4313      	orrs	r3, r2
 8009946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009948:	f7fc fd7c 	bl	8006444 <HAL_GetTick>
 800994c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800994e:	e00a      	b.n	8009966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009950:	f7fc fd78 	bl	8006444 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	f241 3288 	movw	r2, #5000	; 0x1388
 800995e:	4293      	cmp	r3, r2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e04d      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009966:	4b2a      	ldr	r3, [pc, #168]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 020c 	and.w	r2, r3, #12
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	429a      	cmp	r2, r3
 8009976:	d1eb      	bne.n	8009950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009978:	4b24      	ldr	r3, [pc, #144]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	429a      	cmp	r2, r3
 8009984:	d20c      	bcs.n	80099a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009986:	4b21      	ldr	r3, [pc, #132]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800998e:	4b1f      	ldr	r3, [pc, #124]	; (8009a0c <HAL_RCC_ClockConfig+0x1b4>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	429a      	cmp	r2, r3
 800999a:	d001      	beq.n	80099a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e030      	b.n	8009a02 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d008      	beq.n	80099be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099ac:	4b18      	ldr	r3, [pc, #96]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	4915      	ldr	r1, [pc, #84]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d009      	beq.n	80099de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099ca:	4b11      	ldr	r3, [pc, #68]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	490d      	ldr	r1, [pc, #52]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099de:	f000 f81d 	bl	8009a1c <HAL_RCC_GetSysClockFreq>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <HAL_RCC_ClockConfig+0x1b8>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	091b      	lsrs	r3, r3, #4
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <HAL_RCC_ClockConfig+0x1bc>)
 80099f0:	5cd3      	ldrb	r3, [r2, r3]
 80099f2:	fa21 f303 	lsr.w	r3, r1, r3
 80099f6:	4a08      	ldr	r2, [pc, #32]	; (8009a18 <HAL_RCC_ClockConfig+0x1c0>)
 80099f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80099fa:	2000      	movs	r0, #0
 80099fc:	f7fc fcde 	bl	80063bc <HAL_InitTick>

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40023c00 	.word	0x40023c00
 8009a10:	40023800 	.word	0x40023800
 8009a14:	0801bde0 	.word	0x0801bde0
 8009a18:	20000170 	.word	0x20000170

08009a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	607b      	str	r3, [r7, #4]
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a32:	4b50      	ldr	r3, [pc, #320]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	f003 030c 	and.w	r3, r3, #12
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d007      	beq.n	8009a4e <HAL_RCC_GetSysClockFreq+0x32>
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d008      	beq.n	8009a54 <HAL_RCC_GetSysClockFreq+0x38>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f040 808d 	bne.w	8009b62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009a48:	4b4b      	ldr	r3, [pc, #300]	; (8009b78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009a4a:	60bb      	str	r3, [r7, #8]
       break;
 8009a4c:	e08c      	b.n	8009b68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a4e:	4b4b      	ldr	r3, [pc, #300]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8009a50:	60bb      	str	r3, [r7, #8]
      break;
 8009a52:	e089      	b.n	8009b68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a54:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a5e:	4b45      	ldr	r3, [pc, #276]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d023      	beq.n	8009ab2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a6a:	4b42      	ldr	r3, [pc, #264]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	099b      	lsrs	r3, r3, #6
 8009a70:	f04f 0400 	mov.w	r4, #0
 8009a74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	ea03 0501 	and.w	r5, r3, r1
 8009a80:	ea04 0602 	and.w	r6, r4, r2
 8009a84:	4a3d      	ldr	r2, [pc, #244]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8009a86:	fb02 f106 	mul.w	r1, r2, r6
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	fb02 f205 	mul.w	r2, r2, r5
 8009a90:	440a      	add	r2, r1
 8009a92:	493a      	ldr	r1, [pc, #232]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8009a94:	fba5 0101 	umull	r0, r1, r5, r1
 8009a98:	1853      	adds	r3, r2, r1
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f04f 0400 	mov.w	r4, #0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	f7f7 f94f 	bl	8000d48 <__aeabi_uldivmod>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e049      	b.n	8009b46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ab2:	4b30      	ldr	r3, [pc, #192]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	f04f 0400 	mov.w	r4, #0
 8009abc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ac0:	f04f 0200 	mov.w	r2, #0
 8009ac4:	ea03 0501 	and.w	r5, r3, r1
 8009ac8:	ea04 0602 	and.w	r6, r4, r2
 8009acc:	4629      	mov	r1, r5
 8009ace:	4632      	mov	r2, r6
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	f04f 0400 	mov.w	r4, #0
 8009ad8:	0154      	lsls	r4, r2, #5
 8009ada:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009ade:	014b      	lsls	r3, r1, #5
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	1b49      	subs	r1, r1, r5
 8009ae6:	eb62 0206 	sbc.w	r2, r2, r6
 8009aea:	f04f 0300 	mov.w	r3, #0
 8009aee:	f04f 0400 	mov.w	r4, #0
 8009af2:	0194      	lsls	r4, r2, #6
 8009af4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009af8:	018b      	lsls	r3, r1, #6
 8009afa:	1a5b      	subs	r3, r3, r1
 8009afc:	eb64 0402 	sbc.w	r4, r4, r2
 8009b00:	f04f 0100 	mov.w	r1, #0
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	00e2      	lsls	r2, r4, #3
 8009b0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b0e:	00d9      	lsls	r1, r3, #3
 8009b10:	460b      	mov	r3, r1
 8009b12:	4614      	mov	r4, r2
 8009b14:	195b      	adds	r3, r3, r5
 8009b16:	eb44 0406 	adc.w	r4, r4, r6
 8009b1a:	f04f 0100 	mov.w	r1, #0
 8009b1e:	f04f 0200 	mov.w	r2, #0
 8009b22:	02a2      	lsls	r2, r4, #10
 8009b24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009b28:	0299      	lsls	r1, r3, #10
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	4621      	mov	r1, r4
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f04f 0400 	mov.w	r4, #0
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4623      	mov	r3, r4
 8009b3c:	f7f7 f904 	bl	8000d48 <__aeabi_uldivmod>
 8009b40:	4603      	mov	r3, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x158>)
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	3301      	adds	r3, #1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5e:	60bb      	str	r3, [r7, #8]
      break;
 8009b60:	e002      	b.n	8009b68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009b64:	60bb      	str	r3, [r7, #8]
      break;
 8009b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b68:	68bb      	ldr	r3, [r7, #8]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40023800 	.word	0x40023800
 8009b78:	00f42400 	.word	0x00f42400
 8009b7c:	00b71b00 	.word	0x00b71b00

08009b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b84:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b86:	681b      	ldr	r3, [r3, #0]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	20000170 	.word	0x20000170

08009b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b9c:	f7ff fff0 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8009ba0:	4601      	mov	r1, r0
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	0a9b      	lsrs	r3, r3, #10
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	4a03      	ldr	r2, [pc, #12]	; (8009bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bae:	5cd3      	ldrb	r3, [r2, r3]
 8009bb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	40023800 	.word	0x40023800
 8009bbc:	0801bdf0 	.word	0x0801bdf0

08009bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009bc4:	f7ff ffdc 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	0b5b      	lsrs	r3, r3, #13
 8009bd0:	f003 0307 	and.w	r3, r3, #7
 8009bd4:	4a03      	ldr	r2, [pc, #12]	; (8009be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bd6:	5cd3      	ldrb	r3, [r2, r3]
 8009bd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40023800 	.word	0x40023800
 8009be4:	0801bdf0 	.word	0x0801bdf0

08009be8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d035      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c10:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c16:	f7fc fc15 	bl	8006444 <HAL_GetTick>
 8009c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c1c:	e008      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009c1e:	f7fc fc11 	bl	8006444 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e0b0      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c30:	4b5b      	ldr	r3, [pc, #364]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f0      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	019a      	lsls	r2, r3, #6
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	071b      	lsls	r3, r3, #28
 8009c48:	4955      	ldr	r1, [pc, #340]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009c50:	4b52      	ldr	r3, [pc, #328]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c56:	f7fc fbf5 	bl	8006444 <HAL_GetTick>
 8009c5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009c5e:	f7fc fbf1 	bl	8006444 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e090      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009c70:	4b4b      	ldr	r3, [pc, #300]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8083 	beq.w	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	4b44      	ldr	r3, [pc, #272]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	4a43      	ldr	r2, [pc, #268]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c98:	6413      	str	r3, [r2, #64]	; 0x40
 8009c9a:	4b41      	ldr	r3, [pc, #260]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009ca6:	4b3f      	ldr	r3, [pc, #252]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a3e      	ldr	r2, [pc, #248]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cb2:	f7fc fbc7 	bl	8006444 <HAL_GetTick>
 8009cb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009cb8:	e008      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009cba:	f7fc fbc3 	bl	8006444 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d901      	bls.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e062      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009ccc:	4b35      	ldr	r3, [pc, #212]	; (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0f0      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009cd8:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ce0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02f      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d028      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009cf6:	4b2a      	ldr	r3, [pc, #168]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009d00:	4b29      	ldr	r3, [pc, #164]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009d06:	4b28      	ldr	r3, [pc, #160]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009d0c:	4a24      	ldr	r2, [pc, #144]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009d12:	4b23      	ldr	r3, [pc, #140]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d114      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009d1e:	f7fc fb91 	bl	8006444 <HAL_GetTick>
 8009d22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d24:	e00a      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d26:	f7fc fb8d 	bl	8006444 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d901      	bls.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e02a      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d3c:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0ee      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d54:	d10d      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d6a:	490d      	ldr	r1, [pc, #52]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	608b      	str	r3, [r1, #8]
 8009d70:	e005      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009d7c:	6093      	str	r3, [r2, #8]
 8009d7e:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d8a:	4905      	ldr	r1, [pc, #20]	; (8009da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	42470068 	.word	0x42470068
 8009da0:	40023800 	.word	0x40023800
 8009da4:	40007000 	.word	0x40007000
 8009da8:	42470e40 	.word	0x42470e40

08009dac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e083      	b.n	8009ec6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	7f5b      	ldrb	r3, [r3, #29]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f009 ffb2 	bl	8013d38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	22ca      	movs	r2, #202	; 0xca
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2253      	movs	r2, #83	; 0x53
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f897 	bl	8009f1e <RTC_EnterInitMode>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d008      	beq.n	8009e08 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	22ff      	movs	r2, #255	; 0xff
 8009dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2204      	movs	r2, #4
 8009e02:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e05e      	b.n	8009ec6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e1a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6899      	ldr	r1, [r3, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685a      	ldr	r2, [r3, #4]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	68d2      	ldr	r2, [r2, #12]
 8009e42:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6919      	ldr	r1, [r3, #16]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	041a      	lsls	r2, r3, #16
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10e      	bne.n	8009e94 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f829 	bl	8009ece <HAL_RTC_WaitForSynchro>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d008      	beq.n	8009e94 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	22ff      	movs	r2, #255	; 0xff
 8009e88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e018      	b.n	8009ec6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ea2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699a      	ldr	r2, [r3, #24]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	22ff      	movs	r2, #255	; 0xff
 8009ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009ee8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009eea:	f7fc faab 	bl	8006444 <HAL_GetTick>
 8009eee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009ef0:	e009      	b.n	8009f06 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ef2:	f7fc faa7 	bl	8006444 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f00:	d901      	bls.n	8009f06 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e007      	b.n	8009f16 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0ee      	beq.n	8009ef2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d119      	bne.n	8009f6c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f42:	f7fc fa7f 	bl	8006444 <HAL_GetTick>
 8009f46:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f48:	e009      	b.n	8009f5e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f4a:	f7fc fa7b 	bl	8006444 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f58:	d901      	bls.n	8009f5e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e007      	b.n	8009f6e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0ee      	beq.n	8009f4a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e01d      	b.n	8009fc4 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d105      	bne.n	8009fa0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f009 fee2 	bl	8013d64 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f80f 	bl	8009fcc <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fcc:	b5b0      	push	{r4, r5, r7, lr}
 8009fce:	b08e      	sub	sp, #56	; 0x38
 8009fd0:	af04      	add	r7, sp, #16
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009fec:	2376      	movs	r3, #118	; 0x76
 8009fee:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681d      	ldr	r5, [r3, #0]
 8009ff4:	466c      	mov	r4, sp
 8009ff6:	f107 0318 	add.w	r3, r7, #24
 8009ffa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a002:	f107 030c 	add.w	r3, r7, #12
 800a006:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a008:	4628      	mov	r0, r5
 800a00a:	f003 fa45 	bl	800d498 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800a00e:	4b1c      	ldr	r3, [pc, #112]	; (800a080 <HAL_SD_InitCard+0xb4>)
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4618      	mov	r0, r3
 800a01a:	f003 fa86 	bl	800d52a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a01e:	4b18      	ldr	r3, [pc, #96]	; (800a080 <HAL_SD_InitCard+0xb4>)
 800a020:	2201      	movs	r2, #1
 800a022:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800a024:	2002      	movs	r0, #2
 800a026:	f7fc fa19 	bl	800645c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fffe 	bl	800b02c <SD_PowerON>
 800a030:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00b      	beq.n	800a050 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e013      	b.n	800a078 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 ff22 	bl	800ae9a <SD_InitCard>
 800a056:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00b      	beq.n	800a076 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3728      	adds	r7, #40	; 0x28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bdb0      	pop	{r4, r5, r7, pc}
 800a080:	422580a0 	.word	0x422580a0

0800a084 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08c      	sub	sp, #48	; 0x30
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a092:	2300      	movs	r3, #0
 800a094:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d107      	bne.n	800a0ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e0ad      	b.n	800a208 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	f040 80a6 	bne.w	800a206 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d907      	bls.n	800a0de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e094      	b.n	800a208 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2203      	movs	r2, #3
 800a0e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	4a42      	ldr	r2, [pc, #264]	; (800a210 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a108:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10e:	4a41      	ldr	r2, [pc, #260]	; (800a214 <HAL_SD_ReadBlocks_DMA+0x190>)
 800a110:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a116:	2200      	movs	r2, #0
 800a118:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3380      	adds	r3, #128	; 0x80
 800a124:	4619      	mov	r1, r3
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	025b      	lsls	r3, r3, #9
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	f7fc fb77 	bl	8006820 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a132:	4b39      	ldr	r3, [pc, #228]	; (800a218 <HAL_SD_ReadBlocks_DMA+0x194>)
 800a134:	2201      	movs	r2, #1
 800a136:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d002      	beq.n	800a146 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	025b      	lsls	r3, r3, #9
 800a144:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a146:	f04f 33ff 	mov.w	r3, #4294967295
 800a14a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	025b      	lsls	r3, r3, #9
 800a150:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a152:	2390      	movs	r3, #144	; 0x90
 800a154:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a156:	2302      	movs	r3, #2
 800a158:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a15e:	2301      	movs	r3, #1
 800a160:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f107 0214 	add.w	r2, r7, #20
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f003 fa44 	bl	800d5fa <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a17a:	4618      	mov	r0, r3
 800a17c:	f003 fa69 	bl	800d652 <SDMMC_CmdBlockLength>
 800a180:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	2b00      	cmp	r3, #0
 800a186:	d010      	beq.n	800a1aa <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e02e      	b.n	800a208 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d90a      	bls.n	800a1c6 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2282      	movs	r2, #130	; 0x82
 800a1b4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f003 fa90 	bl	800d6e2 <SDMMC_CmdReadMultiBlock>
 800a1c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1c4:	e009      	b.n	800a1da <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2281      	movs	r2, #129	; 0x81
 800a1ca:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f003 fa61 	bl	800d69a <SDMMC_CmdReadSingleBlock>
 800a1d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e002      	b.n	800a208 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	e000      	b.n	800a208 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a206:	2302      	movs	r3, #2
  }
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3730      	adds	r7, #48	; 0x30
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	0800acab 	.word	0x0800acab
 800a214:	0800ad19 	.word	0x0800ad19
 800a218:	4225858c 	.word	0x4225858c

0800a21c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08c      	sub	sp, #48	; 0x30
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d107      	bne.n	800a244 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a238:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e0ad      	b.n	800a3a0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	f040 80a6 	bne.w	800a39e <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	441a      	add	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a262:	429a      	cmp	r2, r3
 800a264:	d907      	bls.n	800a276 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e094      	b.n	800a3a0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2203      	movs	r2, #3
 800a27a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29e:	4a42      	ldr	r2, [pc, #264]	; (800a3a8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800a2a0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	4a41      	ldr	r2, [pc, #260]	; (800a3ac <HAL_SD_WriteBlocks_DMA+0x190>)
 800a2a8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d002      	beq.n	800a2c0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	025b      	lsls	r3, r3, #9
 800a2be:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f003 f9c2 	bl	800d652 <SDMMC_CmdBlockLength>
 800a2ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d010      	beq.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e053      	b.n	800a3a0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d90a      	bls.n	800a314 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	22a0      	movs	r2, #160	; 0xa0
 800a302:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f003 fa31 	bl	800d772 <SDMMC_CmdWriteMultiBlock>
 800a310:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a312:	e009      	b.n	800a328 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2290      	movs	r2, #144	; 0x90
 800a318:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4618      	mov	r0, r3
 800a322:	f003 fa02 	bl	800d72a <SDMMC_CmdWriteSingleBlock>
 800a326:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d010      	beq.n	800a350 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33e:	431a      	orrs	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e027      	b.n	800a3a0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a350:	4b17      	ldr	r3, [pc, #92]	; (800a3b0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800a352:	2201      	movs	r2, #1
 800a354:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3380      	adds	r3, #128	; 0x80
 800a362:	461a      	mov	r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	025b      	lsls	r3, r3, #9
 800a368:	089b      	lsrs	r3, r3, #2
 800a36a:	f7fc fa59 	bl	8006820 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a36e:	f04f 33ff 	mov.w	r3, #4294967295
 800a372:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	025b      	lsls	r3, r3, #9
 800a378:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a37a:	2390      	movs	r3, #144	; 0x90
 800a37c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a37e:	2300      	movs	r3, #0
 800a380:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a382:	2300      	movs	r3, #0
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a386:	2301      	movs	r3, #1
 800a388:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f107 0214 	add.w	r2, r7, #20
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f003 f930 	bl	800d5fa <SDIO_ConfigData>
    
    return HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e000      	b.n	800a3a0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800a39e:	2302      	movs	r3, #2
  }
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3730      	adds	r7, #48	; 0x30
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	0800ac81 	.word	0x0800ac81
 800a3ac:	0800ad19 	.word	0x0800ad19
 800a3b0:	4225858c 	.word	0x4225858c

0800a3b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 808d 	beq.w	800a4ea <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3d8:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6812      	ldr	r2, [r2, #0]
 800a3e4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a3e8:	f023 0302 	bic.w	r3, r3, #2
 800a3ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d03a      	beq.n	800a470 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fe:	f003 0302 	and.w	r3, r3, #2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d105      	bne.n	800a412 <HAL_SD_IRQHandler+0x5e>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	f003 0320 	and.w	r3, r3, #32
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d011      	beq.n	800a436 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f003 f9d0 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800a41c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d008      	beq.n	800a436 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f925 	bl	800a680 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d105      	bne.n	800a460 <HAL_SD_IRQHandler+0xac>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f007 f941 	bl	80116e8 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800a466:	e103      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f007 f933 	bl	80116d4 <HAL_SD_TxCpltCallback>
}
 800a46e:	e0ff      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 80f9 	beq.w	800a670 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	f003 0320 	and.w	r3, r3, #32
 800a486:	2b00      	cmp	r3, #0
 800a488:	d011      	beq.n	800a4ae <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f003 f994 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800a494:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f8e9 	bl	800a680 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f040 80da 	bne.w	800a670 <HAL_SD_IRQHandler+0x2bc>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 80d3 	bne.w	800a670 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0208 	bic.w	r2, r2, #8
 800a4d8:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f007 f8f6 	bl	80116d4 <HAL_SD_TxCpltCallback>
}
 800a4e8:	e0c2      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d008      	beq.n	800a50a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a500:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 ffef 	bl	800b4e6 <SD_Write_IT>
}
 800a508:	e0b2      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d008      	beq.n	800a52a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 ffb7 	bl	800b496 <SD_Read_IT>
}
 800a528:	e0a2      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a530:	f240 233a 	movw	r3, #570	; 0x23a
 800a534:	4013      	ands	r3, r2
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 809a 	beq.w	800a670 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d005      	beq.n	800a556 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	f043 0202 	orr.w	r2, r3, #2
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55c:	f003 0308 	and.w	r3, r3, #8
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	f043 0208 	orr.w	r2, r3, #8
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a582:	f043 0220 	orr.w	r2, r3, #32
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	f043 0210 	orr.w	r2, r3, #16
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b6:	f043 0208 	orr.w	r2, r3, #8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a5c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a5d6:	f023 0302 	bic.w	r3, r3, #2
 800a5da:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d036      	beq.n	800a656 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d011      	beq.n	800a614 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	4a20      	ldr	r2, [pc, #128]	; (800a678 <HAL_SD_IRQHandler+0x2c4>)
 800a5f6:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fc f96f 	bl	80068e0 <HAL_DMA_Abort_IT>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d033      	beq.n	800a670 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fbc8 	bl	800ada2 <SD_DMATxAbort>
}
 800a612:	e02d      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d011      	beq.n	800a640 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a620:	4a16      	ldr	r2, [pc, #88]	; (800a67c <HAL_SD_IRQHandler+0x2c8>)
 800a622:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fc f959 	bl	80068e0 <HAL_DMA_Abort_IT>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01d      	beq.n	800a670 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fbf0 	bl	800ae1e <SD_DMARxAbort>
}
 800a63e:	e017      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f007 f836 	bl	80116c0 <HAL_SD_AbortCallback>
}
 800a654:	e00c      	b.n	800a670 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d006      	beq.n	800a670 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f808 	bl	800a680 <HAL_SD_ErrorCallback>
}
 800a670:	bf00      	nop
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	0800ada3 	.word	0x0800ada3
 800a67c:	0800ae1f 	.word	0x0800ae1f

0800a680 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a6:	0e1b      	lsrs	r3, r3, #24
 800a6a8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	099b      	lsrs	r3, r3, #6
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	089b      	lsrs	r3, r3, #2
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6dc:	0c1b      	lsrs	r3, r3, #16
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a700:	b2db      	uxtb	r3, r3
 800a702:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	b2da      	uxtb	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a710:	0e1b      	lsrs	r3, r3, #24
 800a712:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	b29b      	uxth	r3, r3
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	b2db      	uxtb	r3, r3
 800a728:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	88db      	ldrh	r3, [r3, #6]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	091b      	lsrs	r3, r3, #4
 800a734:	b29b      	uxth	r3, r3
 800a736:	f003 030f 	and.w	r3, r3, #15
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b29a      	uxth	r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 030f 	and.w	r3, r3, #15
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a756:	0a1b      	lsrs	r3, r3, #8
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	09db      	lsrs	r3, r3, #7
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	b2da      	uxtb	r2, r3
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	099b      	lsrs	r3, r3, #6
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	b2da      	uxtb	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	091b      	lsrs	r3, r3, #4
 800a790:	b2db      	uxtb	r3, r3
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 8087 	bne.w	800a8ba <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	691a      	ldr	r2, [r3, #16]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d2:	0e1b      	lsrs	r3, r3, #24
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	099b      	lsrs	r3, r3, #6
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	08db      	lsrs	r3, r3, #3
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0307 	and.w	r3, r3, #7
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	095b      	lsrs	r3, r3, #5
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	089b      	lsrs	r3, r3, #2
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	f003 0306 	and.w	r3, r3, #6
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a848:	0a1b      	lsrs	r3, r3, #8
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	7e1b      	ldrb	r3, [r3, #24]
 800a852:	b2da      	uxtb	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	09db      	lsrs	r3, r3, #7
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	4313      	orrs	r3, r2
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	7e1b      	ldrb	r3, [r3, #24]
 800a876:	b2db      	uxtb	r3, r3
 800a878:	3302      	adds	r3, #2
 800a87a:	2201      	movs	r2, #1
 800a87c:	fa02 f303 	lsl.w	r3, r2, r3
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a884:	fb02 f203 	mul.w	r2, r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	7a1b      	ldrb	r3, [r3, #8]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	2301      	movs	r3, #1
 800a896:	fa03 f202 	lsl.w	r2, r3, r2
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a8a6:	0a52      	lsrs	r2, r2, #9
 800a8a8:	fb02 f203 	mul.w	r2, r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8b6:	661a      	str	r2, [r3, #96]	; 0x60
 800a8b8:	e04d      	b.n	800a956 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d138      	bne.n	800a934 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	041b      	lsls	r3, r3, #16
 800a8ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8da:	0e1b      	lsrs	r3, r3, #24
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f2:	0c1b      	lsrs	r3, r3, #16
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	431a      	orrs	r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a908:	0a1b      	lsrs	r3, r3, #8
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	3301      	adds	r3, #1
 800a914:	029a      	lsls	r2, r3, #10
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	655a      	str	r2, [r3, #84]	; 0x54
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a928:	659a      	str	r2, [r3, #88]	; 0x58
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	661a      	str	r2, [r3, #96]	; 0x60
 800a932:	e010      	b.n	800a956 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a93c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e0c1      	b.n	800aada <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	099b      	lsrs	r3, r3, #6
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	b2da      	uxtb	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	005b      	lsls	r3, r3, #1
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a972:	b2da      	uxtb	r2, r3
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	7e9b      	ldrb	r3, [r3, #26]
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	09db      	lsrs	r3, r3, #7
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	b2db      	uxtb	r3, r3
 800a992:	4313      	orrs	r3, r2
 800a994:	b2da      	uxtb	r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9a2:	b2da      	uxtb	r2, r3
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ac:	0e1b      	lsrs	r3, r3, #24
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	09db      	lsrs	r3, r3, #7
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	095b      	lsrs	r3, r3, #5
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	089b      	lsrs	r3, r3, #2
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 030c 	and.w	r3, r3, #12
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f8:	0c1b      	lsrs	r3, r3, #16
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	7fdb      	ldrb	r3, [r3, #31]
 800aa02:	b2da      	uxtb	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	099b      	lsrs	r3, r3, #6
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	4313      	orrs	r3, r2
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	095b      	lsrs	r3, r3, #5
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa46:	0a1b      	lsrs	r3, r3, #8
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	09db      	lsrs	r3, r3, #7
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	099b      	lsrs	r3, r3, #6
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	095b      	lsrs	r3, r3, #5
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	091b      	lsrs	r3, r3, #4
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	089b      	lsrs	r3, r3, #2
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	f003 0303 	and.w	r3, r3, #3
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	085b      	lsrs	r3, r3, #1
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ab3e:	b5b0      	push	{r4, r5, r7, lr}
 800ab40:	b08e      	sub	sp, #56	; 0x38
 800ab42:	af04      	add	r7, sp, #16
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2203      	movs	r2, #3
 800ab50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d02e      	beq.n	800abba <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab62:	d106      	bne.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38
 800ab70:	e029      	b.n	800abc6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab78:	d10a      	bne.n	800ab90 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fb28 	bl	800b1d0 <SD_WideBus_Enable>
 800ab80:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	639a      	str	r2, [r3, #56]	; 0x38
 800ab8e:	e01a      	b.n	800abc6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10a      	bne.n	800abac <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fb67 	bl	800b26a <SD_WideBus_Disable>
 800ab9c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	431a      	orrs	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	639a      	str	r2, [r3, #56]	; 0x38
 800abaa:	e00c      	b.n	800abc6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38
 800abb8:	e005      	b.n	800abc6 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800abd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e024      	b.n	800ac2e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681d      	ldr	r5, [r3, #0]
 800ac0a:	466c      	mov	r4, sp
 800ac0c:	f107 0318 	add.w	r3, r7, #24
 800ac10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f002 fc3a 	bl	800d498 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3728      	adds	r7, #40	; 0x28
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bdb0      	pop	{r4, r5, r7, pc}

0800ac36 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800ac3e:	2304      	movs	r3, #4
 800ac40:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800ac4a:	f107 030c 	add.w	r3, r7, #12
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa93 	bl	800b17c <SD_SendStatus>
 800ac56:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	431a      	orrs	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	0a5b      	lsrs	r3, r3, #9
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ac9e:	bf00      	nop
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800acb8:	2300      	movs	r3, #0
 800acba:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc0:	2b82      	cmp	r3, #130	; 0x82
 800acc2:	d111      	bne.n	800ace8 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 fd77 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800acce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d008      	beq.n	800ace8 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	431a      	orrs	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7ff fccc 	bl	800a680 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0208 	bic.w	r2, r2, #8
 800acf6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f006 fcec 	bl	80116e8 <HAL_SD_RxCpltCallback>
#endif
}
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d004      	beq.n	800ad3a <SD_DMAError+0x22>
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d12c      	bne.n	800ad94 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ad42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ad52:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff ff68 	bl	800ac36 <HAL_SD_GetCardState>
 800ad66:	4603      	mov	r3, r0
 800ad68:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad6a:	7afb      	ldrb	r3, [r7, #11]
 800ad6c:	2b06      	cmp	r3, #6
 800ad6e:	d002      	beq.n	800ad76 <SD_DMAError+0x5e>
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	2b05      	cmp	r3, #5
 800ad74:	d10a      	bne.n	800ad8c <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 fd1e 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800ad80:	4602      	mov	r2, r0
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad86:	431a      	orrs	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fc73 	bl	800a680 <HAL_SD_ErrorCallback>
#endif
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d127      	bne.n	800ae16 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff ff35 	bl	800ac36 <HAL_SD_GetCardState>
 800adcc:	4603      	mov	r3, r0
 800adce:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800adde:	7afb      	ldrb	r3, [r7, #11]
 800ade0:	2b06      	cmp	r3, #6
 800ade2:	d002      	beq.n	800adea <SD_DMATxAbort+0x48>
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	2b05      	cmp	r3, #5
 800ade8:	d115      	bne.n	800ae16 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4618      	mov	r0, r3
 800adf0:	f002 fce4 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	431a      	orrs	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f006 fc59 	bl	80116c0 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ae0e:	e002      	b.n	800ae16 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f7ff fc35 	bl	800a680 <HAL_SD_ErrorCallback>
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d127      	bne.n	800ae92 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff fef7 	bl	800ac36 <HAL_SD_GetCardState>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	2b06      	cmp	r3, #6
 800ae5e:	d002      	beq.n	800ae66 <SD_DMARxAbort+0x48>
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d115      	bne.n	800ae92 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f002 fca6 	bl	800d7bc <SDMMC_CmdStopTransfer>
 800ae70:	4602      	mov	r2, r0
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	431a      	orrs	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f006 fc1b 	bl	80116c0 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800ae8a:	e002      	b.n	800ae92 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fbf7 	bl	800a680 <HAL_SD_ErrorCallback>
}
 800ae92:	bf00      	nop
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae9a:	b5b0      	push	{r4, r5, r7, lr}
 800ae9c:	b094      	sub	sp, #80	; 0x50
 800ae9e:	af04      	add	r7, sp, #16
 800aea0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800aea6:	2301      	movs	r3, #1
 800aea8:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f002 fb49 	bl	800d546 <SDIO_GetPowerState>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aeba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aebe:	e0b1      	b.n	800b024 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d02f      	beq.n	800af28 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4618      	mov	r0, r3
 800aece:	f002 fd8f 	bl	800d9f0 <SDMMC_CmdSendCID>
 800aed2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <SD_InitCard+0x44>
    {
      return errorstate;
 800aeda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aedc:	e0a2      	b.n	800b024 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2100      	movs	r1, #0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 fb73 	bl	800d5d0 <SDIO_GetResponse>
 800aeea:	4602      	mov	r2, r0
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2104      	movs	r1, #4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 fb6a 	bl	800d5d0 <SDIO_GetResponse>
 800aefc:	4602      	mov	r2, r0
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2108      	movs	r1, #8
 800af08:	4618      	mov	r0, r3
 800af0a:	f002 fb61 	bl	800d5d0 <SDIO_GetResponse>
 800af0e:	4602      	mov	r2, r0
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	210c      	movs	r1, #12
 800af1a:	4618      	mov	r0, r3
 800af1c:	f002 fb58 	bl	800d5d0 <SDIO_GetResponse>
 800af20:	4602      	mov	r2, r0
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d00d      	beq.n	800af4c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f107 020e 	add.w	r2, r7, #14
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 fd99 	bl	800da72 <SDMMC_CmdSetRelAdd>
 800af40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <SD_InitCard+0xb2>
    {
      return errorstate;
 800af48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4a:	e06b      	b.n	800b024 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af50:	2b03      	cmp	r3, #3
 800af52:	d036      	beq.n	800afc2 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af54:	89fb      	ldrh	r3, [r7, #14]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af64:	041b      	lsls	r3, r3, #16
 800af66:	4619      	mov	r1, r3
 800af68:	4610      	mov	r0, r2
 800af6a:	f002 fd61 	bl	800da30 <SDMMC_CmdSendCSD>
 800af6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <SD_InitCard+0xe0>
    {
      return errorstate;
 800af76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af78:	e054      	b.n	800b024 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2100      	movs	r1, #0
 800af80:	4618      	mov	r0, r3
 800af82:	f002 fb25 	bl	800d5d0 <SDIO_GetResponse>
 800af86:	4602      	mov	r2, r0
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2104      	movs	r1, #4
 800af92:	4618      	mov	r0, r3
 800af94:	f002 fb1c 	bl	800d5d0 <SDIO_GetResponse>
 800af98:	4602      	mov	r2, r0
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	2108      	movs	r1, #8
 800afa4:	4618      	mov	r0, r3
 800afa6:	f002 fb13 	bl	800d5d0 <SDIO_GetResponse>
 800afaa:	4602      	mov	r2, r0
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	210c      	movs	r1, #12
 800afb6:	4618      	mov	r0, r3
 800afb8:	f002 fb0a 	bl	800d5d0 <SDIO_GetResponse>
 800afbc:	4602      	mov	r2, r0
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2104      	movs	r1, #4
 800afc8:	4618      	mov	r0, r3
 800afca:	f002 fb01 	bl	800d5d0 <SDIO_GetResponse>
 800afce:	4603      	mov	r3, r0
 800afd0:	0d1a      	lsrs	r2, r3, #20
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800afd6:	f107 0310 	add.w	r3, r7, #16
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fb59 	bl	800a694 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6819      	ldr	r1, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afea:	041b      	lsls	r3, r3, #16
 800afec:	f04f 0400 	mov.w	r4, #0
 800aff0:	461a      	mov	r2, r3
 800aff2:	4623      	mov	r3, r4
 800aff4:	4608      	mov	r0, r1
 800aff6:	f002 fc05 	bl	800d804 <SDMMC_CmdSelDesel>
 800affa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b004:	e00e      	b.n	800b024 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681d      	ldr	r5, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	466c      	mov	r4, sp
 800b00e:	f103 0210 	add.w	r2, r3, #16
 800b012:	ca07      	ldmia	r2, {r0, r1, r2}
 800b014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b018:	3304      	adds	r3, #4
 800b01a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b01c:	4628      	mov	r0, r5
 800b01e:	f002 fa3b 	bl	800d498 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3740      	adds	r7, #64	; 0x40
 800b028:	46bd      	mov	sp, r7
 800b02a:	bdb0      	pop	{r4, r5, r7, pc}

0800b02c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	2300      	movs	r3, #0
 800b03e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4618      	mov	r0, r3
 800b04a:	f002 fc00 	bl	800d84e <SDMMC_CmdGoIdleState>
 800b04e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <SD_PowerON+0x2e>
  {
    return errorstate;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	e08c      	b.n	800b174 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4618      	mov	r0, r3
 800b060:	f002 fc15 	bl	800d88e <SDMMC_CmdOperCond>
 800b064:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d03d      	beq.n	800b0e8 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b072:	e032      	b.n	800b0da <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	60ba      	str	r2, [r7, #8]
 800b07a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07e:	4293      	cmp	r3, r2
 800b080:	d102      	bne.n	800b088 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b082:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b086:	e075      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f002 fc1e 	bl	800d8d0 <SDMMC_CmdAppCommand>
 800b094:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b09c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0a0:	e068      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f002 fc35 	bl	800d918 <SDMMC_CmdAppOperCommand>
 800b0ae:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b0b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b0ba:	e05b      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f002 fa84 	bl	800d5d0 <SDIO_GetResponse>
 800b0c8:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	0fdb      	lsrs	r3, r3, #31
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <SD_PowerON+0xaa>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <SD_PowerON+0xac>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d0c9      	beq.n	800b074 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	645a      	str	r2, [r3, #68]	; 0x44
 800b0e6:	e044      	b.n	800b172 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b0ee:	e031      	b.n	800b154 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	60ba      	str	r2, [r7, #8]
 800b0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d102      	bne.n	800b104 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b0fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b102:	e037      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f002 fbe0 	bl	800d8d0 <SDMMC_CmdAppCommand>
 800b110:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <SD_PowerON+0xf0>
      {
        return errorstate;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	e02b      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b124:	4618      	mov	r0, r3
 800b126:	f002 fbf7 	bl	800d918 <SDMMC_CmdAppOperCommand>
 800b12a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <SD_PowerON+0x10a>
      {
        return errorstate;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	e01e      	b.n	800b174 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2100      	movs	r1, #0
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 fa47 	bl	800d5d0 <SDIO_GetResponse>
 800b142:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	0fdb      	lsrs	r3, r3, #31
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d101      	bne.n	800b150 <SD_PowerON+0x124>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e000      	b.n	800b152 <SD_PowerON+0x126>
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0ca      	beq.n	800b0f0 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	645a      	str	r2, [r3, #68]	; 0x44
 800b16a:	e002      	b.n	800b172 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b186:	2300      	movs	r3, #0
 800b188:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d102      	bne.n	800b196 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b194:	e018      	b.n	800b1c8 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b19e:	041b      	lsls	r3, r3, #16
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f002 fc88 	bl	800dab8 <SDMMC_CmdSendStatus>
 800b1a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <SD_SendStatus+0x38>
  {
    return errorstate;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	e009      	b.n	800b1c8 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f002 fa08 	bl	800d5d0 <SDIO_GetResponse>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f002 f9f0 	bl	800d5d0 <SDIO_GetResponse>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1fa:	d102      	bne.n	800b202 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b200:	e02f      	b.n	800b262 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b202:	f107 030c 	add.w	r3, r7, #12
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f87b 	bl	800b304 <SD_FindSCR>
 800b20e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	e023      	b.n	800b262 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01c      	beq.n	800b25e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	4619      	mov	r1, r3
 800b230:	4610      	mov	r0, r2
 800b232:	f002 fb4d 	bl	800d8d0 <SDMMC_CmdAppCommand>
 800b236:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	e00f      	b.n	800b262 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2102      	movs	r1, #2
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 fb8a 	bl	800d962 <SDMMC_CmdBusWidth>
 800b24e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	e003      	b.n	800b262 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	e001      	b.n	800b262 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b25e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	2300      	movs	r3, #0
 800b278:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f002 f9a3 	bl	800d5d0 <SDIO_GetResponse>
 800b28a:	4603      	mov	r3, r0
 800b28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b294:	d102      	bne.n	800b29c <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b29a:	e02f      	b.n	800b2fc <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f82e 	bl	800b304 <SD_FindSCR>
 800b2a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	e023      	b.n	800b2fc <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d01c      	beq.n	800b2f8 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c6:	041b      	lsls	r3, r3, #16
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f002 fb00 	bl	800d8d0 <SDMMC_CmdAppCommand>
 800b2d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	e00f      	b.n	800b2fc <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f002 fb3d 	bl	800d962 <SDMMC_CmdBusWidth>
 800b2e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	e003      	b.n	800b2fc <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e001      	b.n	800b2fc <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b304:	b590      	push	{r4, r7, lr}
 800b306:	b08f      	sub	sp, #60	; 0x3c
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b30e:	2300      	movs	r3, #0
 800b310:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800b312:	f7fb f897 	bl	8006444 <HAL_GetTick>
 800b316:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2108      	movs	r1, #8
 800b32a:	4618      	mov	r0, r3
 800b32c:	f002 f991 	bl	800d652 <SDMMC_CmdBlockLength>
 800b330:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	e0a8      	b.n	800b48e <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b344:	041b      	lsls	r3, r3, #16
 800b346:	4619      	mov	r1, r3
 800b348:	4610      	mov	r0, r2
 800b34a:	f002 fac1 	bl	800d8d0 <SDMMC_CmdAppCommand>
 800b34e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	e099      	b.n	800b48e <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b35a:	f04f 33ff 	mov.w	r3, #4294967295
 800b35e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800b360:	2308      	movs	r3, #8
 800b362:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b364:	2330      	movs	r3, #48	; 0x30
 800b366:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b368:	2302      	movs	r3, #2
 800b36a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b370:	2301      	movs	r3, #1
 800b372:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f107 0214 	add.w	r2, r7, #20
 800b37c:	4611      	mov	r1, r2
 800b37e:	4618      	mov	r0, r3
 800b380:	f002 f93b 	bl	800d5fa <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4618      	mov	r0, r3
 800b38a:	f002 fb0e 	bl	800d9aa <SDMMC_CmdSendSCR>
 800b38e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	2b00      	cmp	r3, #0
 800b394:	d022      	beq.n	800b3dc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	e079      	b.n	800b48e <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00e      	beq.n	800b3c6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6819      	ldr	r1, [r3, #0]
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	f107 020c 	add.w	r2, r7, #12
 800b3b4:	18d4      	adds	r4, r2, r3
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	f002 f899 	bl	800d4ee <SDIO_ReadFIFO>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	6023      	str	r3, [r4, #0]
      index++;
 800b3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3c6:	f7fb f83d 	bl	8006444 <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d4:	d102      	bne.n	800b3dc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3da:	e058      	b.n	800b48e <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3e2:	f240 432a 	movw	r3, #1066	; 0x42a
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0d6      	beq.n	800b39a <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2208      	movs	r2, #8
 800b400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b402:	2308      	movs	r3, #8
 800b404:	e043      	b.n	800b48e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2202      	movs	r2, #2
 800b41a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b41c:	2302      	movs	r3, #2
 800b41e:	e036      	b.n	800b48e <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2220      	movs	r2, #32
 800b434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800b436:	2320      	movs	r3, #32
 800b438:	e029      	b.n	800b48e <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b442:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	061a      	lsls	r2, r3, #24
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b450:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b45a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800b466:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800b468:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	061a      	lsls	r2, r3, #24
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	021b      	lsls	r3, r3, #8
 800b472:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b476:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	0a1b      	lsrs	r3, r3, #8
 800b47c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b480:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	0e1b      	lsrs	r3, r3, #24
 800b486:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	373c      	adds	r7, #60	; 0x3c
 800b492:	46bd      	mov	sp, r7
 800b494:	bd90      	pop	{r4, r7, pc}

0800b496 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b496:	b590      	push	{r4, r7, lr}
 800b498:	b085      	sub	sp, #20
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a6:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e00d      	b.n	800b4ca <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6819      	ldr	r1, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	18d4      	adds	r4, r2, r3
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	f002 f817 	bl	800d4ee <SDIO_ReadFIFO>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b07      	cmp	r3, #7
 800b4ce:	d9ee      	bls.n	800b4ae <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	f103 0220 	add.w	r2, r3, #32
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd90      	pop	{r4, r7, pc}

0800b4e6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b084      	sub	sp, #16
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e00b      	b.n	800b516 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	4413      	add	r3, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	f001 fffc 	bl	800d508 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3301      	adds	r3, #1
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b07      	cmp	r3, #7
 800b51a:	d9f0      	bls.n	800b4fe <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	f103 0220 	add.w	r2, r3, #32
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e056      	b.n	800b5f2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f008 fd00 	bl	8013f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b57a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	431a      	orrs	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	431a      	orrs	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	431a      	orrs	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	ea42 0103 	orr.w	r1, r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	f003 0104 	and.w	r1, r3, #4
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	69da      	ldr	r2, [r3, #28]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b088      	sub	sp, #32
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	603b      	str	r3, [r7, #0]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_SPI_Transmit+0x22>
 800b618:	2302      	movs	r3, #2
 800b61a:	e11e      	b.n	800b85a <HAL_SPI_Transmit+0x260>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b624:	f7fa ff0e 	bl	8006444 <HAL_GetTick>
 800b628:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b62a:	88fb      	ldrh	r3, [r7, #6]
 800b62c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b01      	cmp	r3, #1
 800b638:	d002      	beq.n	800b640 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b63a:	2302      	movs	r3, #2
 800b63c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b63e:	e103      	b.n	800b848 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <HAL_SPI_Transmit+0x52>
 800b646:	88fb      	ldrh	r3, [r7, #6]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b650:	e0fa      	b.n	800b848 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2203      	movs	r2, #3
 800b656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2200      	movs	r2, #0
 800b65e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	88fa      	ldrh	r2, [r7, #6]
 800b66a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	88fa      	ldrh	r2, [r7, #6]
 800b670:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b698:	d107      	bne.n	800b6aa <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b4:	2b40      	cmp	r3, #64	; 0x40
 800b6b6:	d007      	beq.n	800b6c8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d0:	d14b      	bne.n	800b76a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <HAL_SPI_Transmit+0xe6>
 800b6da:	8afb      	ldrh	r3, [r7, #22]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d13e      	bne.n	800b75e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e4:	881a      	ldrh	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f0:	1c9a      	adds	r2, r3, #2
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b704:	e02b      	b.n	800b75e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b02      	cmp	r3, #2
 800b712:	d112      	bne.n	800b73a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	1c9a      	adds	r2, r3, #2
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	86da      	strh	r2, [r3, #54]	; 0x36
 800b738:	e011      	b.n	800b75e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b73a:	f7fa fe83 	bl	8006444 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d803      	bhi.n	800b752 <HAL_SPI_Transmit+0x158>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b750:	d102      	bne.n	800b758 <HAL_SPI_Transmit+0x15e>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d102      	bne.n	800b75e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b75c:	e074      	b.n	800b848 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b762:	b29b      	uxth	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1ce      	bne.n	800b706 <HAL_SPI_Transmit+0x10c>
 800b768:	e04c      	b.n	800b804 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <HAL_SPI_Transmit+0x17e>
 800b772:	8afb      	ldrh	r3, [r7, #22]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d140      	bne.n	800b7fa <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	330c      	adds	r3, #12
 800b782:	7812      	ldrb	r2, [r2, #0]
 800b784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b794:	b29b      	uxth	r3, r3
 800b796:	3b01      	subs	r3, #1
 800b798:	b29a      	uxth	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b79e:	e02c      	b.n	800b7fa <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 0302 	and.w	r3, r3, #2
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d113      	bne.n	800b7d6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	330c      	adds	r3, #12
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	86da      	strh	r2, [r3, #54]	; 0x36
 800b7d4:	e011      	b.n	800b7fa <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7d6:	f7fa fe35 	bl	8006444 <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d803      	bhi.n	800b7ee <HAL_SPI_Transmit+0x1f4>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ec:	d102      	bne.n	800b7f4 <HAL_SPI_Transmit+0x1fa>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b7f8:	e026      	b.n	800b848 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1cd      	bne.n	800b7a0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b804:	69ba      	ldr	r2, [r7, #24]
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 fa37 	bl	800bc7c <SPI_EndRxTxTransaction>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2220      	movs	r2, #32
 800b818:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	77fb      	strb	r3, [r7, #31]
 800b844:	e000      	b.n	800b848 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b846:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b858:	7ffb      	ldrb	r3, [r7, #31]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3720      	adds	r7, #32
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b08c      	sub	sp, #48	; 0x30
 800b866:	af00      	add	r7, sp, #0
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b870:	2301      	movs	r3, #1
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b880:	2b01      	cmp	r3, #1
 800b882:	d101      	bne.n	800b888 <HAL_SPI_TransmitReceive+0x26>
 800b884:	2302      	movs	r3, #2
 800b886:	e18a      	b.n	800bb9e <HAL_SPI_TransmitReceive+0x33c>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b890:	f7fa fdd8 	bl	8006444 <HAL_GetTick>
 800b894:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b89c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8a6:	887b      	ldrh	r3, [r7, #2]
 800b8a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d00f      	beq.n	800b8d2 <HAL_SPI_TransmitReceive+0x70>
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8b8:	d107      	bne.n	800b8ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d103      	bne.n	800b8ca <HAL_SPI_TransmitReceive+0x68>
 800b8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	d003      	beq.n	800b8d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8d0:	e15b      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d005      	beq.n	800b8e4 <HAL_SPI_TransmitReceive+0x82>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <HAL_SPI_TransmitReceive+0x82>
 800b8de:	887b      	ldrh	r3, [r7, #2]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b8ea:	e14e      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d003      	beq.n	800b900 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2205      	movs	r2, #5
 800b8fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2200      	movs	r2, #0
 800b904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	887a      	ldrh	r2, [r7, #2]
 800b910:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	887a      	ldrh	r2, [r7, #2]
 800b916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	887a      	ldrh	r2, [r7, #2]
 800b922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	887a      	ldrh	r2, [r7, #2]
 800b928:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b940:	2b40      	cmp	r3, #64	; 0x40
 800b942:	d007      	beq.n	800b954 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b95c:	d178      	bne.n	800ba50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <HAL_SPI_TransmitReceive+0x10a>
 800b966:	8b7b      	ldrh	r3, [r7, #26]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d166      	bne.n	800ba3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b970:	881a      	ldrh	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b97c:	1c9a      	adds	r2, r3, #2
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b986:	b29b      	uxth	r3, r3
 800b988:	3b01      	subs	r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b990:	e053      	b.n	800ba3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d11b      	bne.n	800b9d8 <HAL_SPI_TransmitReceive+0x176>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d016      	beq.n	800b9d8 <HAL_SPI_TransmitReceive+0x176>
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d113      	bne.n	800b9d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b4:	881a      	ldrh	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c0:	1c9a      	adds	r2, r3, #2
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d119      	bne.n	800ba1a <HAL_SPI_TransmitReceive+0x1b8>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d014      	beq.n	800ba1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	b292      	uxth	r2, r2
 800b9fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	1c9a      	adds	r2, r3, #2
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba16:	2301      	movs	r3, #1
 800ba18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba1a:	f7fa fd13 	bl	8006444 <HAL_GetTick>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d807      	bhi.n	800ba3a <HAL_SPI_TransmitReceive+0x1d8>
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba30:	d003      	beq.n	800ba3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba32:	2303      	movs	r3, #3
 800ba34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba38:	e0a7      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1a6      	bne.n	800b992 <HAL_SPI_TransmitReceive+0x130>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1a1      	bne.n	800b992 <HAL_SPI_TransmitReceive+0x130>
 800ba4e:	e07c      	b.n	800bb4a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <HAL_SPI_TransmitReceive+0x1fc>
 800ba58:	8b7b      	ldrh	r3, [r7, #26]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d16b      	bne.n	800bb36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	330c      	adds	r3, #12
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba84:	e057      	b.n	800bb36 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d11c      	bne.n	800bace <HAL_SPI_TransmitReceive+0x26c>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d017      	beq.n	800bace <HAL_SPI_TransmitReceive+0x26c>
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d114      	bne.n	800bace <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	330c      	adds	r3, #12
 800baae:	7812      	ldrb	r2, [r2, #0]
 800bab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800baca:	2300      	movs	r3, #0
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d119      	bne.n	800bb10 <HAL_SPI_TransmitReceive+0x2ae>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d014      	beq.n	800bb10 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68da      	ldr	r2, [r3, #12]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb10:	f7fa fc98 	bl	8006444 <HAL_GetTick>
 800bb14:	4602      	mov	r2, r0
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d803      	bhi.n	800bb28 <HAL_SPI_TransmitReceive+0x2c6>
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb26:	d102      	bne.n	800bb2e <HAL_SPI_TransmitReceive+0x2cc>
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d103      	bne.n	800bb36 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb34:	e029      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1a2      	bne.n	800ba86 <HAL_SPI_TransmitReceive+0x224>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d19d      	bne.n	800ba86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 f894 	bl	800bc7c <SPI_EndRxTxTransaction>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d006      	beq.n	800bb68 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2220      	movs	r2, #32
 800bb64:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bb66:	e010      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10b      	bne.n	800bb88 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb70:	2300      	movs	r3, #0
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	e000      	b.n	800bb8a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bb88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3730      	adds	r7, #48	; 0x30
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	60f8      	str	r0, [r7, #12]
 800bbae:	60b9      	str	r1, [r7, #8]
 800bbb0:	603b      	str	r3, [r7, #0]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bbb6:	e04c      	b.n	800bc52 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbe:	d048      	beq.n	800bc52 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bbc0:	f7fa fc40 	bl	8006444 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d902      	bls.n	800bbd6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d13d      	bne.n	800bc52 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bbe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbee:	d111      	bne.n	800bc14 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbf8:	d004      	beq.n	800bc04 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc02:	d107      	bne.n	800bc14 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc1c:	d10f      	bne.n	800bc3e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e00f      	b.n	800bc72 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	68ba      	ldr	r2, [r7, #8]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	bf0c      	ite	eq
 800bc62:	2301      	moveq	r3, #1
 800bc64:	2300      	movne	r3, #0
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	461a      	mov	r2, r3
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d1a3      	bne.n	800bbb8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
	...

0800bc7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bc88:	4b1b      	ldr	r3, [pc, #108]	; (800bcf8 <SPI_EndRxTxTransaction+0x7c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a1b      	ldr	r2, [pc, #108]	; (800bcfc <SPI_EndRxTxTransaction+0x80>)
 800bc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc92:	0d5b      	lsrs	r3, r3, #21
 800bc94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc98:	fb02 f303 	mul.w	r3, r2, r3
 800bc9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bca6:	d112      	bne.n	800bcce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff ff77 	bl	800bba6 <SPI_WaitFlagStateUntilTimeout>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d016      	beq.n	800bcec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	f043 0220 	orr.w	r2, r3, #32
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e00f      	b.n	800bcee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce4:	2b80      	cmp	r3, #128	; 0x80
 800bce6:	d0f2      	beq.n	800bcce <SPI_EndRxTxTransaction+0x52>
 800bce8:	e000      	b.n	800bcec <SPI_EndRxTxTransaction+0x70>
        break;
 800bcea:	bf00      	nop
  }

  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000170 	.word	0x20000170
 800bcfc:	165e9f81 	.word	0x165e9f81

0800bd00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e01d      	b.n	800bd4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f008 f964 	bl	8013ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f000 fa76 	bl	800c230 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2202      	movs	r2, #2
 800bd62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b06      	cmp	r3, #6
 800bd76:	d007      	beq.n	800bd88 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f042 0201 	orr.w	r2, r2, #1
 800bd86:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e01d      	b.n	800bdec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 f815 	bl	800bdf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f000 fa27 	bl	800c230 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2201      	movs	r2, #1
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fcf2 	bl	800c804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a15      	ldr	r2, [pc, #84]	; (800be7c <HAL_TIM_PWM_Start+0x74>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d004      	beq.n	800be34 <HAL_TIM_PWM_Start+0x2c>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a14      	ldr	r2, [pc, #80]	; (800be80 <HAL_TIM_PWM_Start+0x78>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d101      	bne.n	800be38 <HAL_TIM_PWM_Start+0x30>
 800be34:	2301      	movs	r3, #1
 800be36:	e000      	b.n	800be3a <HAL_TIM_PWM_Start+0x32>
 800be38:	2300      	movs	r3, #0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d007      	beq.n	800be4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f003 0307 	and.w	r3, r3, #7
 800be58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2b06      	cmp	r3, #6
 800be5e:	d007      	beq.n	800be70 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f042 0201 	orr.w	r2, r2, #1
 800be6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	40010000 	.word	0x40010000
 800be80:	40010400 	.word	0x40010400

0800be84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2200      	movs	r2, #0
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	4618      	mov	r0, r3
 800be98:	f000 fcb4 	bl	800c804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a22      	ldr	r2, [pc, #136]	; (800bf2c <HAL_TIM_PWM_Stop+0xa8>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d004      	beq.n	800beb0 <HAL_TIM_PWM_Stop+0x2c>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a21      	ldr	r2, [pc, #132]	; (800bf30 <HAL_TIM_PWM_Stop+0xac>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d101      	bne.n	800beb4 <HAL_TIM_PWM_Stop+0x30>
 800beb0:	2301      	movs	r3, #1
 800beb2:	e000      	b.n	800beb6 <HAL_TIM_PWM_Stop+0x32>
 800beb4:	2300      	movs	r3, #0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d017      	beq.n	800beea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6a1a      	ldr	r2, [r3, #32]
 800bec0:	f241 1311 	movw	r3, #4369	; 0x1111
 800bec4:	4013      	ands	r3, r2
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10f      	bne.n	800beea <HAL_TIM_PWM_Stop+0x66>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	6a1a      	ldr	r2, [r3, #32]
 800bed0:	f240 4344 	movw	r3, #1092	; 0x444
 800bed4:	4013      	ands	r3, r2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d107      	bne.n	800beea <HAL_TIM_PWM_Stop+0x66>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6a1a      	ldr	r2, [r3, #32]
 800bef0:	f241 1311 	movw	r3, #4369	; 0x1111
 800bef4:	4013      	ands	r3, r2
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d10f      	bne.n	800bf1a <HAL_TIM_PWM_Stop+0x96>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	6a1a      	ldr	r2, [r3, #32]
 800bf00:	f240 4344 	movw	r3, #1092	; 0x444
 800bf04:	4013      	ands	r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d107      	bne.n	800bf1a <HAL_TIM_PWM_Stop+0x96>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0201 	bic.w	r2, r2, #1
 800bf18:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	40010000 	.word	0x40010000
 800bf30:	40010400 	.word	0x40010400

0800bf34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d101      	bne.n	800bf4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	e0b4      	b.n	800c0b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b0c      	cmp	r3, #12
 800bf62:	f200 809f 	bhi.w	800c0a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bf66:	a201      	add	r2, pc, #4	; (adr r2, 800bf6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6c:	0800bfa1 	.word	0x0800bfa1
 800bf70:	0800c0a5 	.word	0x0800c0a5
 800bf74:	0800c0a5 	.word	0x0800c0a5
 800bf78:	0800c0a5 	.word	0x0800c0a5
 800bf7c:	0800bfe1 	.word	0x0800bfe1
 800bf80:	0800c0a5 	.word	0x0800c0a5
 800bf84:	0800c0a5 	.word	0x0800c0a5
 800bf88:	0800c0a5 	.word	0x0800c0a5
 800bf8c:	0800c023 	.word	0x0800c023
 800bf90:	0800c0a5 	.word	0x0800c0a5
 800bf94:	0800c0a5 	.word	0x0800c0a5
 800bf98:	0800c0a5 	.word	0x0800c0a5
 800bf9c:	0800c063 	.word	0x0800c063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f000 f9e2 	bl	800c370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f042 0208 	orr.w	r2, r2, #8
 800bfba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	699a      	ldr	r2, [r3, #24]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0204 	bic.w	r2, r2, #4
 800bfca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6999      	ldr	r1, [r3, #24]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	691a      	ldr	r2, [r3, #16]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	619a      	str	r2, [r3, #24]
      break;
 800bfde:	e062      	b.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fa32 	bl	800c450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699a      	ldr	r2, [r3, #24]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	699a      	ldr	r2, [r3, #24]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c00a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6999      	ldr	r1, [r3, #24]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	021a      	lsls	r2, r3, #8
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	619a      	str	r2, [r3, #24]
      break;
 800c020:	e041      	b.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fa87 	bl	800c53c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f042 0208 	orr.w	r2, r2, #8
 800c03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69da      	ldr	r2, [r3, #28]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0204 	bic.w	r2, r2, #4
 800c04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69d9      	ldr	r1, [r3, #28]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	430a      	orrs	r2, r1
 800c05e:	61da      	str	r2, [r3, #28]
      break;
 800c060:	e021      	b.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68b9      	ldr	r1, [r7, #8]
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fadb 	bl	800c624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69da      	ldr	r2, [r3, #28]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c07c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c08c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69d9      	ldr	r1, [r3, #28]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	021a      	lsls	r2, r3, #8
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	61da      	str	r2, [r3, #28]
      break;
 800c0a2:	e000      	b.n	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c0a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d101      	bne.n	800c0d8 <HAL_TIM_ConfigClockSource+0x18>
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e0a6      	b.n	800c226 <HAL_TIM_ConfigClockSource+0x166>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b40      	cmp	r3, #64	; 0x40
 800c10e:	d067      	beq.n	800c1e0 <HAL_TIM_ConfigClockSource+0x120>
 800c110:	2b40      	cmp	r3, #64	; 0x40
 800c112:	d80b      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x6c>
 800c114:	2b10      	cmp	r3, #16
 800c116:	d073      	beq.n	800c200 <HAL_TIM_ConfigClockSource+0x140>
 800c118:	2b10      	cmp	r3, #16
 800c11a:	d802      	bhi.n	800c122 <HAL_TIM_ConfigClockSource+0x62>
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d06f      	beq.n	800c200 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c120:	e078      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c122:	2b20      	cmp	r3, #32
 800c124:	d06c      	beq.n	800c200 <HAL_TIM_ConfigClockSource+0x140>
 800c126:	2b30      	cmp	r3, #48	; 0x30
 800c128:	d06a      	beq.n	800c200 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c12a:	e073      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c12c:	2b70      	cmp	r3, #112	; 0x70
 800c12e:	d00d      	beq.n	800c14c <HAL_TIM_ConfigClockSource+0x8c>
 800c130:	2b70      	cmp	r3, #112	; 0x70
 800c132:	d804      	bhi.n	800c13e <HAL_TIM_ConfigClockSource+0x7e>
 800c134:	2b50      	cmp	r3, #80	; 0x50
 800c136:	d033      	beq.n	800c1a0 <HAL_TIM_ConfigClockSource+0xe0>
 800c138:	2b60      	cmp	r3, #96	; 0x60
 800c13a:	d041      	beq.n	800c1c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c13c:	e06a      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c142:	d066      	beq.n	800c212 <HAL_TIM_ConfigClockSource+0x152>
 800c144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c148:	d017      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c14a:	e063      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6818      	ldr	r0, [r3, #0]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	6899      	ldr	r1, [r3, #8]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	f000 fb32 	bl	800c7c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c16e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	609a      	str	r2, [r3, #8]
      break;
 800c178:	e04c      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	6899      	ldr	r1, [r3, #8]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f000 fb1b 	bl	800c7c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c19c:	609a      	str	r2, [r3, #8]
      break;
 800c19e:	e039      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6818      	ldr	r0, [r3, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	6859      	ldr	r1, [r3, #4]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	f000 fa8f 	bl	800c6d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2150      	movs	r1, #80	; 0x50
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 fae8 	bl	800c78e <TIM_ITRx_SetConfig>
      break;
 800c1be:	e029      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	6859      	ldr	r1, [r3, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f000 faae 	bl	800c72e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2160      	movs	r1, #96	; 0x60
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fad8 	bl	800c78e <TIM_ITRx_SetConfig>
      break;
 800c1de:	e019      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	6859      	ldr	r1, [r3, #4]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	f000 fa6f 	bl	800c6d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2140      	movs	r1, #64	; 0x40
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f000 fac8 	bl	800c78e <TIM_ITRx_SetConfig>
      break;
 800c1fe:	e009      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4619      	mov	r1, r3
 800c20a:	4610      	mov	r0, r2
 800c20c:	f000 fabf 	bl	800c78e <TIM_ITRx_SetConfig>
      break;
 800c210:	e000      	b.n	800c214 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a40      	ldr	r2, [pc, #256]	; (800c344 <TIM_Base_SetConfig+0x114>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d013      	beq.n	800c270 <TIM_Base_SetConfig+0x40>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24e:	d00f      	beq.n	800c270 <TIM_Base_SetConfig+0x40>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a3d      	ldr	r2, [pc, #244]	; (800c348 <TIM_Base_SetConfig+0x118>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00b      	beq.n	800c270 <TIM_Base_SetConfig+0x40>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a3c      	ldr	r2, [pc, #240]	; (800c34c <TIM_Base_SetConfig+0x11c>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d007      	beq.n	800c270 <TIM_Base_SetConfig+0x40>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a3b      	ldr	r2, [pc, #236]	; (800c350 <TIM_Base_SetConfig+0x120>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d003      	beq.n	800c270 <TIM_Base_SetConfig+0x40>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a3a      	ldr	r2, [pc, #232]	; (800c354 <TIM_Base_SetConfig+0x124>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d108      	bne.n	800c282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	4313      	orrs	r3, r2
 800c280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a2f      	ldr	r2, [pc, #188]	; (800c344 <TIM_Base_SetConfig+0x114>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d02b      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c290:	d027      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <TIM_Base_SetConfig+0x118>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d023      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a2b      	ldr	r2, [pc, #172]	; (800c34c <TIM_Base_SetConfig+0x11c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d01f      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a2a      	ldr	r2, [pc, #168]	; (800c350 <TIM_Base_SetConfig+0x120>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d01b      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a29      	ldr	r2, [pc, #164]	; (800c354 <TIM_Base_SetConfig+0x124>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d017      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a28      	ldr	r2, [pc, #160]	; (800c358 <TIM_Base_SetConfig+0x128>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d013      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a27      	ldr	r2, [pc, #156]	; (800c35c <TIM_Base_SetConfig+0x12c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00f      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a26      	ldr	r2, [pc, #152]	; (800c360 <TIM_Base_SetConfig+0x130>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d00b      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a25      	ldr	r2, [pc, #148]	; (800c364 <TIM_Base_SetConfig+0x134>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d007      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a24      	ldr	r2, [pc, #144]	; (800c368 <TIM_Base_SetConfig+0x138>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d003      	beq.n	800c2e2 <TIM_Base_SetConfig+0xb2>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a23      	ldr	r2, [pc, #140]	; (800c36c <TIM_Base_SetConfig+0x13c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d108      	bne.n	800c2f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a0a      	ldr	r2, [pc, #40]	; (800c344 <TIM_Base_SetConfig+0x114>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d003      	beq.n	800c328 <TIM_Base_SetConfig+0xf8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a0c      	ldr	r2, [pc, #48]	; (800c354 <TIM_Base_SetConfig+0x124>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d103      	bne.n	800c330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	691a      	ldr	r2, [r3, #16]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	615a      	str	r2, [r3, #20]
}
 800c336:	bf00      	nop
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	40010000 	.word	0x40010000
 800c348:	40000400 	.word	0x40000400
 800c34c:	40000800 	.word	0x40000800
 800c350:	40000c00 	.word	0x40000c00
 800c354:	40010400 	.word	0x40010400
 800c358:	40014000 	.word	0x40014000
 800c35c:	40014400 	.word	0x40014400
 800c360:	40014800 	.word	0x40014800
 800c364:	40001800 	.word	0x40001800
 800c368:	40001c00 	.word	0x40001c00
 800c36c:	40002000 	.word	0x40002000

0800c370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c370:	b480      	push	{r7}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	f023 0201 	bic.w	r2, r3, #1
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f023 0302 	bic.w	r3, r3, #2
 800c3b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a20      	ldr	r2, [pc, #128]	; (800c448 <TIM_OC1_SetConfig+0xd8>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d003      	beq.n	800c3d4 <TIM_OC1_SetConfig+0x64>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a1f      	ldr	r2, [pc, #124]	; (800c44c <TIM_OC1_SetConfig+0xdc>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d10c      	bne.n	800c3ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f023 0308 	bic.w	r3, r3, #8
 800c3da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f023 0304 	bic.w	r3, r3, #4
 800c3ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4a15      	ldr	r2, [pc, #84]	; (800c448 <TIM_OC1_SetConfig+0xd8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d003      	beq.n	800c3fe <TIM_OC1_SetConfig+0x8e>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	4a14      	ldr	r2, [pc, #80]	; (800c44c <TIM_OC1_SetConfig+0xdc>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d111      	bne.n	800c422 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c40c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	4313      	orrs	r3, r2
 800c416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	4313      	orrs	r3, r2
 800c420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	621a      	str	r2, [r3, #32]
}
 800c43c:	bf00      	nop
 800c43e:	371c      	adds	r7, #28
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	40010000 	.word	0x40010000
 800c44c:	40010400 	.word	0x40010400

0800c450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a1b      	ldr	r3, [r3, #32]
 800c45e:	f023 0210 	bic.w	r2, r3, #16
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	021b      	lsls	r3, r3, #8
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	4313      	orrs	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f023 0320 	bic.w	r3, r3, #32
 800c49a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	011b      	lsls	r3, r3, #4
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a22      	ldr	r2, [pc, #136]	; (800c534 <TIM_OC2_SetConfig+0xe4>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d003      	beq.n	800c4b8 <TIM_OC2_SetConfig+0x68>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a21      	ldr	r2, [pc, #132]	; (800c538 <TIM_OC2_SetConfig+0xe8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d10d      	bne.n	800c4d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	011b      	lsls	r3, r3, #4
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a17      	ldr	r2, [pc, #92]	; (800c534 <TIM_OC2_SetConfig+0xe4>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_OC2_SetConfig+0x94>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a16      	ldr	r2, [pc, #88]	; (800c538 <TIM_OC2_SetConfig+0xe8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d113      	bne.n	800c50c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	695b      	ldr	r3, [r3, #20]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	4313      	orrs	r3, r2
 800c50a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	697a      	ldr	r2, [r7, #20]
 800c524:	621a      	str	r2, [r3, #32]
}
 800c526:	bf00      	nop
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	40010000 	.word	0x40010000
 800c538:	40010400 	.word	0x40010400

0800c53c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	4313      	orrs	r3, r2
 800c590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a21      	ldr	r2, [pc, #132]	; (800c61c <TIM_OC3_SetConfig+0xe0>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d003      	beq.n	800c5a2 <TIM_OC3_SetConfig+0x66>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a20      	ldr	r2, [pc, #128]	; (800c620 <TIM_OC3_SetConfig+0xe4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d10d      	bne.n	800c5be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	021b      	lsls	r3, r3, #8
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a16      	ldr	r2, [pc, #88]	; (800c61c <TIM_OC3_SetConfig+0xe0>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d003      	beq.n	800c5ce <TIM_OC3_SetConfig+0x92>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a15      	ldr	r2, [pc, #84]	; (800c620 <TIM_OC3_SetConfig+0xe4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d113      	bne.n	800c5f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	011b      	lsls	r3, r3, #4
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	40010000 	.word	0x40010000
 800c620:	40010400 	.word	0x40010400

0800c624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	031b      	lsls	r3, r3, #12
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a12      	ldr	r2, [pc, #72]	; (800c6c8 <TIM_OC4_SetConfig+0xa4>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_OC4_SetConfig+0x68>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <TIM_OC4_SetConfig+0xa8>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d109      	bne.n	800c6a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	019b      	lsls	r3, r3, #6
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	621a      	str	r2, [r3, #32]
}
 800c6ba:	bf00      	nop
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	40010000 	.word	0x40010000
 800c6cc:	40010400 	.word	0x40010400

0800c6d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	f023 0201 	bic.w	r2, r3, #1
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	011b      	lsls	r3, r3, #4
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	4313      	orrs	r3, r2
 800c704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f023 030a 	bic.w	r3, r3, #10
 800c70c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	4313      	orrs	r3, r2
 800c714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	697a      	ldr	r2, [r7, #20]
 800c720:	621a      	str	r2, [r3, #32]
}
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c72e:	b480      	push	{r7}
 800c730:	b087      	sub	sp, #28
 800c732:	af00      	add	r7, sp, #0
 800c734:	60f8      	str	r0, [r7, #12]
 800c736:	60b9      	str	r1, [r7, #8]
 800c738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	f023 0210 	bic.w	r2, r3, #16
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6a1b      	ldr	r3, [r3, #32]
 800c750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	031b      	lsls	r3, r3, #12
 800c75e:	697a      	ldr	r2, [r7, #20]
 800c760:	4313      	orrs	r3, r2
 800c762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c76a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4313      	orrs	r3, r2
 800c774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	697a      	ldr	r2, [r7, #20]
 800c77a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	621a      	str	r2, [r3, #32]
}
 800c782:	bf00      	nop
 800c784:	371c      	adds	r7, #28
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c78e:	b480      	push	{r7}
 800c790:	b085      	sub	sp, #20
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	f043 0307 	orr.w	r3, r3, #7
 800c7b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	609a      	str	r2, [r3, #8]
}
 800c7b8:	bf00      	nop
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	021a      	lsls	r2, r3, #8
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	609a      	str	r2, [r3, #8]
}
 800c7f8:	bf00      	nop
 800c7fa:	371c      	adds	r7, #28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c804:	b480      	push	{r7}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	f003 031f 	and.w	r3, r3, #31
 800c816:	2201      	movs	r2, #1
 800c818:	fa02 f303 	lsl.w	r3, r2, r3
 800c81c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6a1a      	ldr	r2, [r3, #32]
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	43db      	mvns	r3, r3
 800c826:	401a      	ands	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6a1a      	ldr	r2, [r3, #32]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f003 031f 	and.w	r3, r3, #31
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	fa01 f303 	lsl.w	r3, r1, r3
 800c83c:	431a      	orrs	r2, r3
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	621a      	str	r2, [r3, #32]
}
 800c842:	bf00      	nop
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c84e:	b480      	push	{r7}
 800c850:	b085      	sub	sp, #20
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d101      	bne.n	800c866 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c862:	2302      	movs	r3, #2
 800c864:	e032      	b.n	800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2202      	movs	r2, #2
 800c872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c88c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c89e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e03f      	b.n	800c96a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d106      	bne.n	800c904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f007 fc6c 	bl	80141dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2224      	movs	r2, #36	; 0x24
 800c908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c91a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 fbb1 	bl	800d084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	695a      	ldr	r2, [r3, #20]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2220      	movs	r2, #32
 800c95c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2220      	movs	r2, #32
 800c964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b088      	sub	sp, #32
 800c976:	af02      	add	r7, sp, #8
 800c978:	60f8      	str	r0, [r7, #12]
 800c97a:	60b9      	str	r1, [r7, #8]
 800c97c:	603b      	str	r3, [r7, #0]
 800c97e:	4613      	mov	r3, r2
 800c980:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b20      	cmp	r3, #32
 800c990:	f040 8083 	bne.w	800ca9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <HAL_UART_Transmit+0x2e>
 800c99a:	88fb      	ldrh	r3, [r7, #6]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e07b      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d101      	bne.n	800c9b2 <HAL_UART_Transmit+0x40>
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	e074      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2221      	movs	r2, #33	; 0x21
 800c9c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c9c8:	f7f9 fd3c 	bl	8006444 <HAL_GetTick>
 800c9cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	88fa      	ldrh	r2, [r7, #6]
 800c9d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	88fa      	ldrh	r2, [r7, #6]
 800c9d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c9da:	e042      	b.n	800ca62 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f2:	d122      	bne.n	800ca3a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2180      	movs	r1, #128	; 0x80
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 f9d4 	bl	800cdac <UART_WaitOnFlagUntilTimeout>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d001      	beq.n	800ca0e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e046      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d103      	bne.n	800ca32 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	3302      	adds	r3, #2
 800ca2e:	60bb      	str	r3, [r7, #8]
 800ca30:	e017      	b.n	800ca62 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	3301      	adds	r3, #1
 800ca36:	60bb      	str	r3, [r7, #8]
 800ca38:	e013      	b.n	800ca62 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2200      	movs	r2, #0
 800ca42:	2180      	movs	r1, #128	; 0x80
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 f9b1 	bl	800cdac <UART_WaitOnFlagUntilTimeout>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800ca50:	2303      	movs	r3, #3
 800ca52:	e023      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	60ba      	str	r2, [r7, #8]
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1b7      	bne.n	800c9dc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2200      	movs	r2, #0
 800ca74:	2140      	movs	r1, #64	; 0x40
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 f998 	bl	800cdac <UART_WaitOnFlagUntilTimeout>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e00a      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e000      	b.n	800ca9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ca9a:	2302      	movs	r3, #2
  }
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	4613      	mov	r3, r2
 800cab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b20      	cmp	r3, #32
 800cabc:	d140      	bne.n	800cb40 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <HAL_UART_Receive_IT+0x26>
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e039      	b.n	800cb42 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_UART_Receive_IT+0x38>
 800cad8:	2302      	movs	r3, #2
 800cada:	e032      	b.n	800cb42 <HAL_UART_Receive_IT+0x9e>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	88fa      	ldrh	r2, [r7, #6]
 800caee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	88fa      	ldrh	r2, [r7, #6]
 800caf4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2222      	movs	r2, #34	; 0x22
 800cb00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68da      	ldr	r2, [r3, #12]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb1a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	695a      	ldr	r2, [r3, #20]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f042 0201 	orr.w	r2, r2, #1
 800cb2a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f042 0220 	orr.w	r2, r2, #32
 800cb3a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e000      	b.n	800cb42 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800cb40:	2302      	movs	r3, #2
  }
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3714      	adds	r7, #20
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
	...

0800cb50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	f003 030f 	and.w	r3, r3, #15
 800cb7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10d      	bne.n	800cba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	f003 0320 	and.w	r3, r3, #32
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d008      	beq.n	800cba2 <HAL_UART_IRQHandler+0x52>
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	f003 0320 	and.w	r3, r3, #32
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f9f0 	bl	800cf80 <UART_Receive_IT>
      return;
 800cba0:	e0cc      	b.n	800cd3c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f000 80ab 	beq.w	800cd00 <HAL_UART_IRQHandler+0x1b0>
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d105      	bne.n	800cbc0 <HAL_UART_IRQHandler+0x70>
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80a0 	beq.w	800cd00 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <HAL_UART_IRQHandler+0x90>
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd8:	f043 0201 	orr.w	r2, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	f003 0304 	and.w	r3, r3, #4
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <HAL_UART_IRQHandler+0xb0>
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d005      	beq.n	800cc00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf8:	f043 0202 	orr.w	r2, r3, #2
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00a      	beq.n	800cc20 <HAL_UART_IRQHandler+0xd0>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f003 0301 	and.w	r3, r3, #1
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d005      	beq.n	800cc20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	f043 0204 	orr.w	r2, r3, #4
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	f003 0308 	and.w	r3, r3, #8
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <HAL_UART_IRQHandler+0xf0>
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d005      	beq.n	800cc40 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc38:	f043 0208 	orr.w	r2, r3, #8
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d078      	beq.n	800cd3a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	f003 0320 	and.w	r3, r3, #32
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d007      	beq.n	800cc62 <HAL_UART_IRQHandler+0x112>
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f98f 	bl	800cf80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc6c:	2b40      	cmp	r3, #64	; 0x40
 800cc6e:	bf0c      	ite	eq
 800cc70:	2301      	moveq	r3, #1
 800cc72:	2300      	movne	r3, #0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc7c:	f003 0308 	and.w	r3, r3, #8
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <HAL_UART_IRQHandler+0x13a>
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d031      	beq.n	800ccee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f8d8 	bl	800ce40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9a:	2b40      	cmp	r3, #64	; 0x40
 800cc9c:	d123      	bne.n	800cce6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	695a      	ldr	r2, [r3, #20]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d013      	beq.n	800ccde <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccba:	4a22      	ldr	r2, [pc, #136]	; (800cd44 <HAL_UART_IRQHandler+0x1f4>)
 800ccbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f9 fe0c 	bl	80068e0 <HAL_DMA_Abort_IT>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d016      	beq.n	800ccfc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccdc:	e00e      	b.n	800ccfc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f83c 	bl	800cd5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce4:	e00a      	b.n	800ccfc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f838 	bl	800cd5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccec:	e006      	b.n	800ccfc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f834 	bl	800cd5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ccfa:	e01e      	b.n	800cd3a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccfc:	bf00      	nop
    return;
 800ccfe:	e01c      	b.n	800cd3a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d008      	beq.n	800cd1c <HAL_UART_IRQHandler+0x1cc>
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f8c5 	bl	800cea4 <UART_Transmit_IT>
    return;
 800cd1a:	e00f      	b.n	800cd3c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00a      	beq.n	800cd3c <HAL_UART_IRQHandler+0x1ec>
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f90d 	bl	800cf50 <UART_EndTransmit_IT>
    return;
 800cd36:	bf00      	nop
 800cd38:	e000      	b.n	800cd3c <HAL_UART_IRQHandler+0x1ec>
    return;
 800cd3a:	bf00      	nop
  }
}
 800cd3c:	3720      	adds	r7, #32
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	0800ce7d 	.word	0x0800ce7d

0800cd48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b2db      	uxtb	r3, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdbc:	e02c      	b.n	800ce18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc4:	d028      	beq.n	800ce18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d007      	beq.n	800cddc <UART_WaitOnFlagUntilTimeout+0x30>
 800cdcc:	f7f9 fb3a 	bl	8006444 <HAL_GetTick>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	1ad3      	subs	r3, r2, r3
 800cdd6:	69ba      	ldr	r2, [r7, #24]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d21d      	bcs.n	800ce18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68da      	ldr	r2, [r3, #12]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cdea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	695a      	ldr	r2, [r3, #20]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f022 0201 	bic.w	r2, r2, #1
 800cdfa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2220      	movs	r2, #32
 800ce08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e00f      	b.n	800ce38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	4013      	ands	r3, r2
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	bf0c      	ite	eq
 800ce28:	2301      	moveq	r3, #1
 800ce2a:	2300      	movne	r3, #0
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	79fb      	ldrb	r3, [r7, #7]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d0c3      	beq.n	800cdbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68da      	ldr	r2, [r3, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ce56:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	695a      	ldr	r2, [r3, #20]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0201 	bic.w	r2, r2, #1
 800ce66:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2220      	movs	r2, #32
 800ce6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ce70:	bf00      	nop
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff ff60 	bl	800cd5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	2b21      	cmp	r3, #33	; 0x21
 800ceb6:	d144      	bne.n	800cf42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cec0:	d11a      	bne.n	800cef8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	461a      	mov	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ced6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d105      	bne.n	800ceec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a1b      	ldr	r3, [r3, #32]
 800cee4:	1c9a      	adds	r2, r3, #2
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	621a      	str	r2, [r3, #32]
 800ceea:	e00e      	b.n	800cf0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	621a      	str	r2, [r3, #32]
 800cef6:	e008      	b.n	800cf0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	1c59      	adds	r1, r3, #1
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	6211      	str	r1, [r2, #32]
 800cf02:	781a      	ldrb	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	3b01      	subs	r3, #1
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	4619      	mov	r1, r3
 800cf18:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10f      	bne.n	800cf3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68da      	ldr	r2, [r3, #12]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68da      	ldr	r2, [r3, #12]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e000      	b.n	800cf44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cf42:	2302      	movs	r3, #2
  }
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff fee9 	bl	800cd48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b22      	cmp	r3, #34	; 0x22
 800cf92:	d171      	bne.n	800d078 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf9c:	d123      	bne.n	800cfe6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10e      	bne.n	800cfca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc2:	1c9a      	adds	r2, r3, #2
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	629a      	str	r2, [r3, #40]	; 0x28
 800cfc8:	e029      	b.n	800d01e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	629a      	str	r2, [r3, #40]	; 0x28
 800cfe4:	e01b      	b.n	800d01e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6858      	ldr	r0, [r3, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff8:	1c59      	adds	r1, r3, #1
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	6291      	str	r1, [r2, #40]	; 0x28
 800cffe:	b2c2      	uxtb	r2, r0
 800d000:	701a      	strb	r2, [r3, #0]
 800d002:	e00c      	b.n	800d01e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	1c58      	adds	r0, r3, #1
 800d012:	6879      	ldr	r1, [r7, #4]
 800d014:	6288      	str	r0, [r1, #40]	; 0x28
 800d016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d022:	b29b      	uxth	r3, r3
 800d024:	3b01      	subs	r3, #1
 800d026:	b29b      	uxth	r3, r3
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	4619      	mov	r1, r3
 800d02c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d120      	bne.n	800d074 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68da      	ldr	r2, [r3, #12]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f022 0220 	bic.w	r2, r2, #32
 800d040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	695a      	ldr	r2, [r3, #20]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f022 0201 	bic.w	r2, r2, #1
 800d060:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2220      	movs	r2, #32
 800d066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f005 ff42 	bl	8012ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	e002      	b.n	800d07a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	e000      	b.n	800d07a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d078:	2302      	movs	r3, #2
  }
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d084:	b5b0      	push	{r4, r5, r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	695b      	ldr	r3, [r3, #20]
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d0c4:	f023 030c 	bic.w	r3, r3, #12
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	6812      	ldr	r2, [r2, #0]
 800d0cc:	68f9      	ldr	r1, [r7, #12]
 800d0ce:	430b      	orrs	r3, r1
 800d0d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	699a      	ldr	r2, [r3, #24]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	430a      	orrs	r2, r1
 800d0e6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0f0:	f040 80e4 	bne.w	800d2bc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4aab      	ldr	r2, [pc, #684]	; (800d3a8 <UART_SetConfig+0x324>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d004      	beq.n	800d108 <UART_SetConfig+0x84>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4aaa      	ldr	r2, [pc, #680]	; (800d3ac <UART_SetConfig+0x328>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d16c      	bne.n	800d1e2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d108:	f7fc fd5a 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d10c:	4602      	mov	r2, r0
 800d10e:	4613      	mov	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	4413      	add	r3, r2
 800d114:	009a      	lsls	r2, r3, #2
 800d116:	441a      	add	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	005b      	lsls	r3, r3, #1
 800d11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d122:	4aa3      	ldr	r2, [pc, #652]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d124:	fba2 2303 	umull	r2, r3, r2, r3
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	011c      	lsls	r4, r3, #4
 800d12c:	f7fc fd48 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d130:	4602      	mov	r2, r0
 800d132:	4613      	mov	r3, r2
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4413      	add	r3, r2
 800d138:	009a      	lsls	r2, r3, #2
 800d13a:	441a      	add	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	fbb2 f5f3 	udiv	r5, r2, r3
 800d146:	f7fc fd3b 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4613      	mov	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	009a      	lsls	r2, r3, #2
 800d154:	441a      	add	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d160:	4a93      	ldr	r2, [pc, #588]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d162:	fba2 2303 	umull	r2, r3, r2, r3
 800d166:	095b      	lsrs	r3, r3, #5
 800d168:	2264      	movs	r2, #100	; 0x64
 800d16a:	fb02 f303 	mul.w	r3, r2, r3
 800d16e:	1aeb      	subs	r3, r5, r3
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	3332      	adds	r3, #50	; 0x32
 800d174:	4a8e      	ldr	r2, [pc, #568]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d176:	fba2 2303 	umull	r2, r3, r2, r3
 800d17a:	095b      	lsrs	r3, r3, #5
 800d17c:	005b      	lsls	r3, r3, #1
 800d17e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d182:	441c      	add	r4, r3
 800d184:	f7fc fd1c 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d188:	4602      	mov	r2, r0
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	009a      	lsls	r2, r3, #2
 800d192:	441a      	add	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	fbb2 f5f3 	udiv	r5, r2, r3
 800d19e:	f7fc fd0f 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009a      	lsls	r2, r3, #2
 800d1ac:	441a      	add	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	005b      	lsls	r3, r3, #1
 800d1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b8:	4a7d      	ldr	r2, [pc, #500]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d1ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d1be:	095b      	lsrs	r3, r3, #5
 800d1c0:	2264      	movs	r2, #100	; 0x64
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	1aeb      	subs	r3, r5, r3
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	3332      	adds	r3, #50	; 0x32
 800d1cc:	4a78      	ldr	r2, [pc, #480]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d2:	095b      	lsrs	r3, r3, #5
 800d1d4:	f003 0207 	and.w	r2, r3, #7
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4422      	add	r2, r4
 800d1de:	609a      	str	r2, [r3, #8]
 800d1e0:	e154      	b.n	800d48c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d1e2:	f7fc fcd9 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009a      	lsls	r2, r3, #2
 800d1f0:	441a      	add	r2, r3
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fc:	4a6c      	ldr	r2, [pc, #432]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d202:	095b      	lsrs	r3, r3, #5
 800d204:	011c      	lsls	r4, r3, #4
 800d206:	f7fc fcc7 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d20a:	4602      	mov	r2, r0
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	009a      	lsls	r2, r3, #2
 800d214:	441a      	add	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	fbb2 f5f3 	udiv	r5, r2, r3
 800d220:	f7fc fcba 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d224:	4602      	mov	r2, r0
 800d226:	4613      	mov	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	009a      	lsls	r2, r3, #2
 800d22e:	441a      	add	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23a:	4a5d      	ldr	r2, [pc, #372]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d23c:	fba2 2303 	umull	r2, r3, r2, r3
 800d240:	095b      	lsrs	r3, r3, #5
 800d242:	2264      	movs	r2, #100	; 0x64
 800d244:	fb02 f303 	mul.w	r3, r2, r3
 800d248:	1aeb      	subs	r3, r5, r3
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	3332      	adds	r3, #50	; 0x32
 800d24e:	4a58      	ldr	r2, [pc, #352]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d250:	fba2 2303 	umull	r2, r3, r2, r3
 800d254:	095b      	lsrs	r3, r3, #5
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d25c:	441c      	add	r4, r3
 800d25e:	f7fc fc9b 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d262:	4602      	mov	r2, r0
 800d264:	4613      	mov	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	009a      	lsls	r2, r3, #2
 800d26c:	441a      	add	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	fbb2 f5f3 	udiv	r5, r2, r3
 800d278:	f7fc fc8e 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d27c:	4602      	mov	r2, r0
 800d27e:	4613      	mov	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4413      	add	r3, r2
 800d284:	009a      	lsls	r2, r3, #2
 800d286:	441a      	add	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d292:	4a47      	ldr	r2, [pc, #284]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d294:	fba2 2303 	umull	r2, r3, r2, r3
 800d298:	095b      	lsrs	r3, r3, #5
 800d29a:	2264      	movs	r2, #100	; 0x64
 800d29c:	fb02 f303 	mul.w	r3, r2, r3
 800d2a0:	1aeb      	subs	r3, r5, r3
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	3332      	adds	r3, #50	; 0x32
 800d2a6:	4a42      	ldr	r2, [pc, #264]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ac:	095b      	lsrs	r3, r3, #5
 800d2ae:	f003 0207 	and.w	r2, r3, #7
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4422      	add	r2, r4
 800d2b8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800d2ba:	e0e7      	b.n	800d48c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a39      	ldr	r2, [pc, #228]	; (800d3a8 <UART_SetConfig+0x324>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d004      	beq.n	800d2d0 <UART_SetConfig+0x24c>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a38      	ldr	r2, [pc, #224]	; (800d3ac <UART_SetConfig+0x328>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d171      	bne.n	800d3b4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d2d0:	f7fc fc76 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009a      	lsls	r2, r3, #2
 800d2de:	441a      	add	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ea:	4a31      	ldr	r2, [pc, #196]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f0:	095b      	lsrs	r3, r3, #5
 800d2f2:	011c      	lsls	r4, r3, #4
 800d2f4:	f7fc fc64 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	009a      	lsls	r2, r3, #2
 800d302:	441a      	add	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	fbb2 f5f3 	udiv	r5, r2, r3
 800d30e:	f7fc fc57 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d312:	4602      	mov	r2, r0
 800d314:	4613      	mov	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	009a      	lsls	r2, r3, #2
 800d31c:	441a      	add	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	fbb2 f3f3 	udiv	r3, r2, r3
 800d328:	4a21      	ldr	r2, [pc, #132]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d32a:	fba2 2303 	umull	r2, r3, r2, r3
 800d32e:	095b      	lsrs	r3, r3, #5
 800d330:	2264      	movs	r2, #100	; 0x64
 800d332:	fb02 f303 	mul.w	r3, r2, r3
 800d336:	1aeb      	subs	r3, r5, r3
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	3332      	adds	r3, #50	; 0x32
 800d33c:	4a1c      	ldr	r2, [pc, #112]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	095b      	lsrs	r3, r3, #5
 800d344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d348:	441c      	add	r4, r3
 800d34a:	f7fc fc39 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d34e:	4602      	mov	r2, r0
 800d350:	4613      	mov	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4413      	add	r3, r2
 800d356:	009a      	lsls	r2, r3, #2
 800d358:	441a      	add	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	fbb2 f5f3 	udiv	r5, r2, r3
 800d364:	f7fc fc2c 	bl	8009bc0 <HAL_RCC_GetPCLK2Freq>
 800d368:	4602      	mov	r2, r0
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009a      	lsls	r2, r3, #2
 800d372:	441a      	add	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	685b      	ldr	r3, [r3, #4]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d37e:	4a0c      	ldr	r2, [pc, #48]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d380:	fba2 2303 	umull	r2, r3, r2, r3
 800d384:	095b      	lsrs	r3, r3, #5
 800d386:	2264      	movs	r2, #100	; 0x64
 800d388:	fb02 f303 	mul.w	r3, r2, r3
 800d38c:	1aeb      	subs	r3, r5, r3
 800d38e:	011b      	lsls	r3, r3, #4
 800d390:	3332      	adds	r3, #50	; 0x32
 800d392:	4a07      	ldr	r2, [pc, #28]	; (800d3b0 <UART_SetConfig+0x32c>)
 800d394:	fba2 2303 	umull	r2, r3, r2, r3
 800d398:	095b      	lsrs	r3, r3, #5
 800d39a:	f003 020f 	and.w	r2, r3, #15
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4422      	add	r2, r4
 800d3a4:	609a      	str	r2, [r3, #8]
 800d3a6:	e071      	b.n	800d48c <UART_SetConfig+0x408>
 800d3a8:	40011000 	.word	0x40011000
 800d3ac:	40011400 	.word	0x40011400
 800d3b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d3b4:	f7fc fbf0 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009a      	lsls	r2, r3, #2
 800d3c2:	441a      	add	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ce:	4a31      	ldr	r2, [pc, #196]	; (800d494 <UART_SetConfig+0x410>)
 800d3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d4:	095b      	lsrs	r3, r3, #5
 800d3d6:	011c      	lsls	r4, r3, #4
 800d3d8:	f7fc fbde 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	4613      	mov	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4413      	add	r3, r2
 800d3e4:	009a      	lsls	r2, r3, #2
 800d3e6:	441a      	add	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	fbb2 f5f3 	udiv	r5, r2, r3
 800d3f2:	f7fc fbd1 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009a      	lsls	r2, r3, #2
 800d400:	441a      	add	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	009b      	lsls	r3, r3, #2
 800d408:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40c:	4a21      	ldr	r2, [pc, #132]	; (800d494 <UART_SetConfig+0x410>)
 800d40e:	fba2 2303 	umull	r2, r3, r2, r3
 800d412:	095b      	lsrs	r3, r3, #5
 800d414:	2264      	movs	r2, #100	; 0x64
 800d416:	fb02 f303 	mul.w	r3, r2, r3
 800d41a:	1aeb      	subs	r3, r5, r3
 800d41c:	011b      	lsls	r3, r3, #4
 800d41e:	3332      	adds	r3, #50	; 0x32
 800d420:	4a1c      	ldr	r2, [pc, #112]	; (800d494 <UART_SetConfig+0x410>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	095b      	lsrs	r3, r3, #5
 800d428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d42c:	441c      	add	r4, r3
 800d42e:	f7fc fbb3 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d432:	4602      	mov	r2, r0
 800d434:	4613      	mov	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4413      	add	r3, r2
 800d43a:	009a      	lsls	r2, r3, #2
 800d43c:	441a      	add	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	fbb2 f5f3 	udiv	r5, r2, r3
 800d448:	f7fc fba6 	bl	8009b98 <HAL_RCC_GetPCLK1Freq>
 800d44c:	4602      	mov	r2, r0
 800d44e:	4613      	mov	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4413      	add	r3, r2
 800d454:	009a      	lsls	r2, r3, #2
 800d456:	441a      	add	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d462:	4a0c      	ldr	r2, [pc, #48]	; (800d494 <UART_SetConfig+0x410>)
 800d464:	fba2 2303 	umull	r2, r3, r2, r3
 800d468:	095b      	lsrs	r3, r3, #5
 800d46a:	2264      	movs	r2, #100	; 0x64
 800d46c:	fb02 f303 	mul.w	r3, r2, r3
 800d470:	1aeb      	subs	r3, r5, r3
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	3332      	adds	r3, #50	; 0x32
 800d476:	4a07      	ldr	r2, [pc, #28]	; (800d494 <UART_SetConfig+0x410>)
 800d478:	fba2 2303 	umull	r2, r3, r2, r3
 800d47c:	095b      	lsrs	r3, r3, #5
 800d47e:	f003 020f 	and.w	r2, r3, #15
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4422      	add	r2, r4
 800d488:	609a      	str	r2, [r3, #8]
}
 800d48a:	e7ff      	b.n	800d48c <UART_SetConfig+0x408>
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bdb0      	pop	{r4, r5, r7, pc}
 800d494:	51eb851f 	.word	0x51eb851f

0800d498 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d498:	b084      	sub	sp, #16
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	f107 001c 	add.w	r0, r7, #28
 800d4a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d4ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d4b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d4b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d4ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d4be:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d4c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d4d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	431a      	orrs	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	b004      	add	sp, #16
 800d4ec:	4770      	bx	lr

0800d4ee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b083      	sub	sp, #12
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2203      	movs	r2, #3
 800d536:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	370c      	adds	r7, #12
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr

0800d546 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d546:	b480      	push	{r7}
 800d548:	b083      	sub	sp, #12
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f003 0303 	and.w	r3, r3, #3
}
 800d556:	4618      	mov	r0, r3
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d562:	b480      	push	{r7}
 800d564:	b085      	sub	sp, #20
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d580:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d586:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d58c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	4313      	orrs	r3, r2
 800d592:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d59c:	f023 030f 	bic.w	r3, r3, #15
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3714      	adds	r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr

0800d5b6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	b2db      	uxtb	r3, r3
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b085      	sub	sp, #20
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3314      	adds	r3, #20
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
}  
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b085      	sub	sp, #20
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800d604:	2300      	movs	r3, #0
 800d606:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d620:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d626:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d62c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	4313      	orrs	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	431a      	orrs	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d644:	2300      	movs	r3, #0

}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b088      	sub	sp, #32
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d664:	2310      	movs	r3, #16
 800d666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d668:	2340      	movs	r3, #64	; 0x40
 800d66a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d66c:	2300      	movs	r3, #0
 800d66e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d674:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d676:	f107 0308 	add.w	r3, r7, #8
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff ff70 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d682:	f241 3288 	movw	r2, #5000	; 0x1388
 800d686:	2110      	movs	r1, #16
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fa63 	bl	800db54 <SDMMC_GetCmdResp1>
 800d68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d690:	69fb      	ldr	r3, [r7, #28]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3720      	adds	r7, #32
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d6ac:	2311      	movs	r3, #17
 800d6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6b0:	2340      	movs	r3, #64	; 0x40
 800d6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6be:	f107 0308 	add.w	r3, r7, #8
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff ff4c 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d6ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ce:	2111      	movs	r1, #17
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fa3f 	bl	800db54 <SDMMC_GetCmdResp1>
 800d6d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3720      	adds	r7, #32
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b088      	sub	sp, #32
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
 800d6ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d6f4:	2312      	movs	r3, #18
 800d6f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6f8:	2340      	movs	r3, #64	; 0x40
 800d6fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d704:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d706:	f107 0308 	add.w	r3, r7, #8
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f7ff ff28 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d712:	f241 3288 	movw	r2, #5000	; 0x1388
 800d716:	2112      	movs	r1, #18
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fa1b 	bl	800db54 <SDMMC_GetCmdResp1>
 800d71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d720:	69fb      	ldr	r3, [r7, #28]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3720      	adds	r7, #32
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b088      	sub	sp, #32
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d734:	2300      	movs	r3, #0
 800d736:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d73c:	2318      	movs	r3, #24
 800d73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d740:	2340      	movs	r3, #64	; 0x40
 800d742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d744:	2300      	movs	r3, #0
 800d746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d74e:	f107 0308 	add.w	r3, r7, #8
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ff04 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d75e:	2118      	movs	r1, #24
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f9f7 	bl	800db54 <SDMMC_GetCmdResp1>
 800d766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d768:	69fb      	ldr	r3, [r7, #28]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b088      	sub	sp, #32
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d77c:	2300      	movs	r3, #0
 800d77e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d784:	2319      	movs	r3, #25
 800d786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d788:	2340      	movs	r3, #64	; 0x40
 800d78a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d78c:	2300      	movs	r3, #0
 800d78e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d794:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d796:	f107 0308 	add.w	r3, r7, #8
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff fee0 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d7a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a6:	2119      	movs	r1, #25
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f9d3 	bl	800db54 <SDMMC_GetCmdResp1>
 800d7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d7cc:	230c      	movs	r3, #12
 800d7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7d0:	2340      	movs	r3, #64	; 0x40
 800d7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7dc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7de:	f107 0308 	add.w	r3, r7, #8
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f7ff febc 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800d7ea:	4a05      	ldr	r2, [pc, #20]	; (800d800 <SDMMC_CmdStopTransfer+0x44>)
 800d7ec:	210c      	movs	r1, #12
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f9b0 	bl	800db54 <SDMMC_GetCmdResp1>
 800d7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	05f5e100 	.word	0x05f5e100

0800d804 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	; 0x28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d810:	2300      	movs	r3, #0
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d818:	2307      	movs	r3, #7
 800d81a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d81c:	2340      	movs	r3, #64	; 0x40
 800d81e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d820:	2300      	movs	r3, #0
 800d822:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d828:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d82a:	f107 0310 	add.w	r3, r7, #16
 800d82e:	4619      	mov	r1, r3
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f7ff fe96 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d836:	f241 3288 	movw	r2, #5000	; 0x1388
 800d83a:	2107      	movs	r1, #7
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 f989 	bl	800db54 <SDMMC_GetCmdResp1>
 800d842:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d846:	4618      	mov	r0, r3
 800d848:	3728      	adds	r7, #40	; 0x28
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b088      	sub	sp, #32
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d856:	2300      	movs	r3, #0
 800d858:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d85e:	2300      	movs	r3, #0
 800d860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d862:	2300      	movs	r3, #0
 800d864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d866:	2300      	movs	r3, #0
 800d868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d86e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fe73 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f93f 	bl	800db00 <SDMMC_GetCmdError>
 800d882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d884:	69fb      	ldr	r3, [r7, #28]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3720      	adds	r7, #32
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b088      	sub	sp, #32
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d896:	2300      	movs	r3, #0
 800d898:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d89a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d89e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d8a0:	2308      	movs	r3, #8
 800d8a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8a4:	2340      	movs	r3, #64	; 0x40
 800d8a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8b0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8b2:	f107 0308 	add.w	r3, r7, #8
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff fe52 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fb10 	bl	800dee4 <SDMMC_GetCmdResp7>
 800d8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d8e2:	2337      	movs	r3, #55	; 0x37
 800d8e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8e6:	2340      	movs	r3, #64	; 0x40
 800d8e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8f2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8f4:	f107 0308 	add.w	r3, r7, #8
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7ff fe31 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d900:	f241 3288 	movw	r2, #5000	; 0x1388
 800d904:	2137      	movs	r1, #55	; 0x37
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f924 	bl	800db54 <SDMMC_GetCmdResp1>
 800d90c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d90e:	69fb      	ldr	r3, [r7, #28]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d922:	2300      	movs	r3, #0
 800d924:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d92c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d932:	2329      	movs	r3, #41	; 0x29
 800d934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d936:	2340      	movs	r3, #64	; 0x40
 800d938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d942:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d944:	f107 0308 	add.w	r3, r7, #8
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff fe09 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 fa25 	bl	800dda0 <SDMMC_GetCmdResp3>
 800d956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d958:	69fb      	ldr	r3, [r7, #28]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3720      	adds	r7, #32
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}

0800d962 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d962:	b580      	push	{r7, lr}
 800d964:	b088      	sub	sp, #32
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
 800d96a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d96c:	2300      	movs	r3, #0
 800d96e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d974:	2306      	movs	r3, #6
 800d976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d978:	2340      	movs	r3, #64	; 0x40
 800d97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d97c:	2300      	movs	r3, #0
 800d97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d984:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d986:	f107 0308 	add.w	r3, r7, #8
 800d98a:	4619      	mov	r1, r3
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fde8 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d992:	f241 3288 	movw	r2, #5000	; 0x1388
 800d996:	2106      	movs	r1, #6
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f8db 	bl	800db54 <SDMMC_GetCmdResp1>
 800d99e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9a0:	69fb      	ldr	r3, [r7, #28]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b088      	sub	sp, #32
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d9ba:	2333      	movs	r3, #51	; 0x33
 800d9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d9be:	2340      	movs	r3, #64	; 0x40
 800d9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d9cc:	f107 0308 	add.w	r3, r7, #8
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fdc5 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9dc:	2133      	movs	r1, #51	; 0x33
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f8b8 	bl	800db54 <SDMMC_GetCmdResp1>
 800d9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9e6:	69fb      	ldr	r3, [r7, #28]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3720      	adds	r7, #32
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800da00:	2302      	movs	r3, #2
 800da02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800da04:	23c0      	movs	r3, #192	; 0xc0
 800da06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da08:	2300      	movs	r3, #0
 800da0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da10:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da12:	f107 0308 	add.w	r3, r7, #8
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fda2 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 f97e 	bl	800dd20 <SDMMC_GetCmdResp2>
 800da24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da26:	69fb      	ldr	r3, [r7, #28]
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3720      	adds	r7, #32
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b088      	sub	sp, #32
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800da3a:	2300      	movs	r3, #0
 800da3c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800da42:	2309      	movs	r3, #9
 800da44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800da46:	23c0      	movs	r3, #192	; 0xc0
 800da48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da4a:	2300      	movs	r3, #0
 800da4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da52:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da54:	f107 0308 	add.w	r3, r7, #8
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7ff fd81 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f95d 	bl	800dd20 <SDMMC_GetCmdResp2>
 800da66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da68:	69fb      	ldr	r3, [r7, #28]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3720      	adds	r7, #32
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b088      	sub	sp, #32
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800da7c:	2300      	movs	r3, #0
 800da7e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800da80:	2300      	movs	r3, #0
 800da82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800da84:	2303      	movs	r3, #3
 800da86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800da88:	2340      	movs	r3, #64	; 0x40
 800da8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800da90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da94:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800da96:	f107 0308 	add.w	r3, r7, #8
 800da9a:	4619      	mov	r1, r3
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff fd60 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	2103      	movs	r1, #3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f9ae 	bl	800de08 <SDMMC_GetCmdResp6>
 800daac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daae:	69fb      	ldr	r3, [r7, #28]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3720      	adds	r7, #32
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dac2:	2300      	movs	r3, #0
 800dac4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800daca:	230d      	movs	r3, #13
 800dacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dace:	2340      	movs	r3, #64	; 0x40
 800dad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dad2:	2300      	movs	r3, #0
 800dad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dada:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dadc:	f107 0308 	add.w	r3, r7, #8
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fd3d 	bl	800d562 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800dae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800daec:	210d      	movs	r1, #13
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f830 	bl	800db54 <SDMMC_GetCmdResp1>
 800daf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800daf6:	69fb      	ldr	r3, [r7, #28]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3720      	adds	r7, #32
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800db00:	b490      	push	{r4, r7}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db08:	4b10      	ldr	r3, [pc, #64]	; (800db4c <SDMMC_GetCmdError+0x4c>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a10      	ldr	r2, [pc, #64]	; (800db50 <SDMMC_GetCmdError+0x50>)
 800db0e:	fba2 2303 	umull	r2, r3, r2, r3
 800db12:	0a5b      	lsrs	r3, r3, #9
 800db14:	f241 3288 	movw	r2, #5000	; 0x1388
 800db18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db1c:	4623      	mov	r3, r4
 800db1e:	1e5c      	subs	r4, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d102      	bne.n	800db2a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db28:	e00a      	b.n	800db40 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0f2      	beq.n	800db1c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800db3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bc90      	pop	{r4, r7}
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	20000170 	.word	0x20000170
 800db50:	10624dd3 	.word	0x10624dd3

0800db54 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b087      	sub	sp, #28
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	460b      	mov	r3, r1
 800db5e:	607a      	str	r2, [r7, #4]
 800db60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800db62:	4b6c      	ldr	r3, [pc, #432]	; (800dd14 <SDMMC_GetCmdResp1+0x1c0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a6c      	ldr	r2, [pc, #432]	; (800dd18 <SDMMC_GetCmdResp1+0x1c4>)
 800db68:	fba2 2303 	umull	r2, r3, r2, r3
 800db6c:	0a5b      	lsrs	r3, r3, #9
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800db74:	4623      	mov	r3, r4
 800db76:	1e5c      	subs	r4, r3, #1
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d102      	bne.n	800db82 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db80:	e0c3      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db86:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0f2      	beq.n	800db74 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db92:	f003 0304 	and.w	r3, r3, #4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d004      	beq.n	800dba4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2204      	movs	r2, #4
 800db9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dba0:	2304      	movs	r3, #4
 800dba2:	e0b2      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d004      	beq.n	800dbba <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e0a7      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f7ff fcfb 	bl	800d5b6 <SDIO_GetCommandResponse>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d001      	beq.n	800dbce <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e09d      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800dbd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f7ff fcf9 	bl	800d5d0 <SDIO_GetResponse>
 800dbde:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dbe0:	697a      	ldr	r2, [r7, #20]
 800dbe2:	4b4e      	ldr	r3, [pc, #312]	; (800dd1c <SDMMC_GetCmdResp1+0x1c8>)
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d101      	bne.n	800dbee <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e08d      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	da02      	bge.n	800dbfa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dbf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbf8:	e087      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dc04:	2340      	movs	r3, #64	; 0x40
 800dc06:	e080      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dc12:	2380      	movs	r3, #128	; 0x80
 800dc14:	e079      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dc20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc24:	e071      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dc30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc34:	e069      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d002      	beq.n	800dc46 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dc40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc44:	e061      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dc50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc54:	e059      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d002      	beq.n	800dc66 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc64:	e051      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc74:	e049      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dc80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dc84:	e041      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800dc90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc94:	e039      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dca4:	e031      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dcb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dcb4:	e029      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dcc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dcc4:	e021      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dcd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dcd4:	e019      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dce0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dce4:	e011      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dcf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dcf4:	e009      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	f003 0308 	and.w	r3, r3, #8
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dd00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dd04:	e001      	b.n	800dd0a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd90      	pop	{r4, r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20000170 	.word	0x20000170
 800dd18:	10624dd3 	.word	0x10624dd3
 800dd1c:	fdffe008 	.word	0xfdffe008

0800dd20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800dd20:	b490      	push	{r4, r7}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd28:	4b1b      	ldr	r3, [pc, #108]	; (800dd98 <SDMMC_GetCmdResp2+0x78>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a1b      	ldr	r2, [pc, #108]	; (800dd9c <SDMMC_GetCmdResp2+0x7c>)
 800dd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800dd32:	0a5b      	lsrs	r3, r3, #9
 800dd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd3c:	4623      	mov	r3, r4
 800dd3e:	1e5c      	subs	r4, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d102      	bne.n	800dd4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd48:	e020      	b.n	800dd8c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0f2      	beq.n	800dd3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5a:	f003 0304 	and.w	r3, r3, #4
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2204      	movs	r2, #4
 800dd66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd68:	2304      	movs	r3, #4
 800dd6a:	e00f      	b.n	800dd8c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d004      	beq.n	800dd82 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e004      	b.n	800dd8c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800dd88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bc90      	pop	{r4, r7}
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	20000170 	.word	0x20000170
 800dd9c:	10624dd3 	.word	0x10624dd3

0800dda0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dda0:	b490      	push	{r4, r7}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dda8:	4b15      	ldr	r3, [pc, #84]	; (800de00 <SDMMC_GetCmdResp3+0x60>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4a15      	ldr	r2, [pc, #84]	; (800de04 <SDMMC_GetCmdResp3+0x64>)
 800ddae:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb2:	0a5b      	lsrs	r3, r3, #9
 800ddb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddb8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ddbc:	4623      	mov	r3, r4
 800ddbe:	1e5c      	subs	r4, r3, #1
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d102      	bne.n	800ddca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddc8:	e015      	b.n	800ddf6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d0f2      	beq.n	800ddbc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddda:	f003 0304 	and.w	r3, r3, #4
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2204      	movs	r2, #4
 800dde6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dde8:	2304      	movs	r3, #4
 800ddea:	e004      	b.n	800ddf6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ddf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bc90      	pop	{r4, r7}
 800ddfe:	4770      	bx	lr
 800de00:	20000170 	.word	0x20000170
 800de04:	10624dd3 	.word	0x10624dd3

0800de08 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800de08:	b590      	push	{r4, r7, lr}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	460b      	mov	r3, r1
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de16:	4b31      	ldr	r3, [pc, #196]	; (800dedc <SDMMC_GetCmdResp6+0xd4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a31      	ldr	r2, [pc, #196]	; (800dee0 <SDMMC_GetCmdResp6+0xd8>)
 800de1c:	fba2 2303 	umull	r2, r3, r2, r3
 800de20:	0a5b      	lsrs	r3, r3, #9
 800de22:	f241 3288 	movw	r2, #5000	; 0x1388
 800de26:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800de2a:	4623      	mov	r3, r4
 800de2c:	1e5c      	subs	r4, r3, #1
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d102      	bne.n	800de38 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de36:	e04c      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0f2      	beq.n	800de2a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de48:	f003 0304 	and.w	r3, r3, #4
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d004      	beq.n	800de5a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2204      	movs	r2, #4
 800de54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de56:	2304      	movs	r3, #4
 800de58:	e03b      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	2b00      	cmp	r3, #0
 800de64:	d004      	beq.n	800de70 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2201      	movs	r2, #1
 800de6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e030      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff fba0 	bl	800d5b6 <SDIO_GetCommandResponse>
 800de76:	4603      	mov	r3, r0
 800de78:	461a      	mov	r2, r3
 800de7a:	7afb      	ldrb	r3, [r7, #11]
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d001      	beq.n	800de84 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de80:	2301      	movs	r3, #1
 800de82:	e026      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800de8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800de8c:	2100      	movs	r1, #0
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff fb9e 	bl	800d5d0 <SDIO_GetResponse>
 800de94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d106      	bne.n	800deae <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	0c1b      	lsrs	r3, r3, #16
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800deaa:	2300      	movs	r3, #0
 800deac:	e011      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800deb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800debc:	e009      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800decc:	e001      	b.n	800ded2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	371c      	adds	r7, #28
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd90      	pop	{r4, r7, pc}
 800deda:	bf00      	nop
 800dedc:	20000170 	.word	0x20000170
 800dee0:	10624dd3 	.word	0x10624dd3

0800dee4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dee4:	b490      	push	{r4, r7}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800deec:	4b18      	ldr	r3, [pc, #96]	; (800df50 <SDMMC_GetCmdResp7+0x6c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a18      	ldr	r2, [pc, #96]	; (800df54 <SDMMC_GetCmdResp7+0x70>)
 800def2:	fba2 2303 	umull	r2, r3, r2, r3
 800def6:	0a5b      	lsrs	r3, r3, #9
 800def8:	f241 3288 	movw	r2, #5000	; 0x1388
 800defc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800df00:	4623      	mov	r3, r4
 800df02:	1e5c      	subs	r4, r3, #1
 800df04:	2b00      	cmp	r3, #0
 800df06:	d102      	bne.n	800df0e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df0c:	e01a      	b.n	800df44 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0f2      	beq.n	800df00 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df1e:	f003 0304 	and.w	r3, r3, #4
 800df22:	2b00      	cmp	r3, #0
 800df24:	d004      	beq.n	800df30 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2240      	movs	r2, #64	; 0x40
 800df2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df2c:	2304      	movs	r3, #4
 800df2e:	e009      	b.n	800df44 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d002      	beq.n	800df42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2240      	movs	r2, #64	; 0x40
 800df40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800df42:	2300      	movs	r3, #0
  
}
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bc90      	pop	{r4, r7}
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	20000170 	.word	0x20000170
 800df54:	10624dd3 	.word	0x10624dd3

0800df58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df58:	b084      	sub	sp, #16
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	f107 001c 	add.w	r0, r7, #28
 800df66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d122      	bne.n	800dfb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800df84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800df98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d105      	bne.n	800dfaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f001 fa7c 	bl	800f4a8 <USB_CoreReset>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]
 800dfb4:	e01a      	b.n	800dfec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f001 fa70 	bl	800f4a8 <USB_CoreReset>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d106      	bne.n	800dfe0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	639a      	str	r2, [r3, #56]	; 0x38
 800dfde:	e005      	b.n	800dfec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d10b      	bne.n	800e00a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f043 0206 	orr.w	r2, r3, #6
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f043 0220 	orr.w	r2, r3, #32
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e016:	b004      	add	sp, #16
 800e018:	4770      	bx	lr
	...

0800e01c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b087      	sub	sp, #28
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	4613      	mov	r3, r2
 800e028:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d165      	bne.n	800e0fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	4a41      	ldr	r2, [pc, #260]	; (800e138 <USB_SetTurnaroundTime+0x11c>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d906      	bls.n	800e046 <USB_SetTurnaroundTime+0x2a>
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	4a40      	ldr	r2, [pc, #256]	; (800e13c <USB_SetTurnaroundTime+0x120>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d802      	bhi.n	800e046 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e040:	230f      	movs	r3, #15
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	e062      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	4a3c      	ldr	r2, [pc, #240]	; (800e13c <USB_SetTurnaroundTime+0x120>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d906      	bls.n	800e05c <USB_SetTurnaroundTime+0x40>
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	4a3b      	ldr	r2, [pc, #236]	; (800e140 <USB_SetTurnaroundTime+0x124>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d802      	bhi.n	800e05c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e056:	230e      	movs	r3, #14
 800e058:	617b      	str	r3, [r7, #20]
 800e05a:	e057      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	4a38      	ldr	r2, [pc, #224]	; (800e140 <USB_SetTurnaroundTime+0x124>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d906      	bls.n	800e072 <USB_SetTurnaroundTime+0x56>
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	4a37      	ldr	r2, [pc, #220]	; (800e144 <USB_SetTurnaroundTime+0x128>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d802      	bhi.n	800e072 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e06c:	230d      	movs	r3, #13
 800e06e:	617b      	str	r3, [r7, #20]
 800e070:	e04c      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	4a33      	ldr	r2, [pc, #204]	; (800e144 <USB_SetTurnaroundTime+0x128>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d906      	bls.n	800e088 <USB_SetTurnaroundTime+0x6c>
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	4a32      	ldr	r2, [pc, #200]	; (800e148 <USB_SetTurnaroundTime+0x12c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d802      	bhi.n	800e088 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e082:	230c      	movs	r3, #12
 800e084:	617b      	str	r3, [r7, #20]
 800e086:	e041      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	4a2f      	ldr	r2, [pc, #188]	; (800e148 <USB_SetTurnaroundTime+0x12c>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d906      	bls.n	800e09e <USB_SetTurnaroundTime+0x82>
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	4a2e      	ldr	r2, [pc, #184]	; (800e14c <USB_SetTurnaroundTime+0x130>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d802      	bhi.n	800e09e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e098:	230b      	movs	r3, #11
 800e09a:	617b      	str	r3, [r7, #20]
 800e09c:	e036      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	4a2a      	ldr	r2, [pc, #168]	; (800e14c <USB_SetTurnaroundTime+0x130>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d906      	bls.n	800e0b4 <USB_SetTurnaroundTime+0x98>
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	4a29      	ldr	r2, [pc, #164]	; (800e150 <USB_SetTurnaroundTime+0x134>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d802      	bhi.n	800e0b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e0ae:	230a      	movs	r3, #10
 800e0b0:	617b      	str	r3, [r7, #20]
 800e0b2:	e02b      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	4a26      	ldr	r2, [pc, #152]	; (800e150 <USB_SetTurnaroundTime+0x134>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d906      	bls.n	800e0ca <USB_SetTurnaroundTime+0xae>
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	4a25      	ldr	r2, [pc, #148]	; (800e154 <USB_SetTurnaroundTime+0x138>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d802      	bhi.n	800e0ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e0c4:	2309      	movs	r3, #9
 800e0c6:	617b      	str	r3, [r7, #20]
 800e0c8:	e020      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	4a21      	ldr	r2, [pc, #132]	; (800e154 <USB_SetTurnaroundTime+0x138>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d906      	bls.n	800e0e0 <USB_SetTurnaroundTime+0xc4>
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	4a20      	ldr	r2, [pc, #128]	; (800e158 <USB_SetTurnaroundTime+0x13c>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d802      	bhi.n	800e0e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e0da:	2308      	movs	r3, #8
 800e0dc:	617b      	str	r3, [r7, #20]
 800e0de:	e015      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	4a1d      	ldr	r2, [pc, #116]	; (800e158 <USB_SetTurnaroundTime+0x13c>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d906      	bls.n	800e0f6 <USB_SetTurnaroundTime+0xda>
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	4a1c      	ldr	r2, [pc, #112]	; (800e15c <USB_SetTurnaroundTime+0x140>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d802      	bhi.n	800e0f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e0f0:	2307      	movs	r3, #7
 800e0f2:	617b      	str	r3, [r7, #20]
 800e0f4:	e00a      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e0f6:	2306      	movs	r3, #6
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	e007      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e0fc:	79fb      	ldrb	r3, [r7, #7]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e102:	2309      	movs	r3, #9
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	e001      	b.n	800e10c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e108:	2309      	movs	r3, #9
 800e10a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	68da      	ldr	r2, [r3, #12]
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	029b      	lsls	r3, r3, #10
 800e120:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e124:	431a      	orrs	r2, r3
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	371c      	adds	r7, #28
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	00d8acbf 	.word	0x00d8acbf
 800e13c:	00e4e1bf 	.word	0x00e4e1bf
 800e140:	00f423ff 	.word	0x00f423ff
 800e144:	0106737f 	.word	0x0106737f
 800e148:	011a499f 	.word	0x011a499f
 800e14c:	01312cff 	.word	0x01312cff
 800e150:	014ca43f 	.word	0x014ca43f
 800e154:	016e35ff 	.word	0x016e35ff
 800e158:	01a6ab1f 	.word	0x01a6ab1f
 800e15c:	01e847ff 	.word	0x01e847ff

0800e160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	f043 0201 	orr.w	r2, r3, #1
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	370c      	adds	r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e182:	b480      	push	{r7}
 800e184:	b083      	sub	sp, #12
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f023 0201 	bic.w	r2, r3, #1
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d106      	bne.n	800e1d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	e00b      	b.n	800e1e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e1d0:	78fb      	ldrb	r3, [r7, #3]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	60da      	str	r2, [r3, #12]
 800e1e2:	e001      	b.n	800e1e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e003      	b.n	800e1f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e1e8:	2032      	movs	r0, #50	; 0x32
 800e1ea:	f7f8 f937 	bl	800645c <HAL_Delay>

  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b086      	sub	sp, #24
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e20a:	2300      	movs	r3, #0
 800e20c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e212:	2300      	movs	r3, #0
 800e214:	613b      	str	r3, [r7, #16]
 800e216:	e009      	b.n	800e22c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	3340      	adds	r3, #64	; 0x40
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	2200      	movs	r2, #0
 800e224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	3301      	adds	r3, #1
 800e22a:	613b      	str	r3, [r7, #16]
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b0e      	cmp	r3, #14
 800e230:	d9f2      	bls.n	800e218 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e234:	2b00      	cmp	r3, #0
 800e236:	d112      	bne.n	800e25e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e23c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e248:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e254:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	639a      	str	r2, [r3, #56]	; 0x38
 800e25c:	e00b      	b.n	800e276 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e27c:	461a      	mov	r2, r3
 800e27e:	2300      	movs	r3, #0
 800e280:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e288:	4619      	mov	r1, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e290:	461a      	mov	r2, r3
 800e292:	680b      	ldr	r3, [r1, #0]
 800e294:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d10c      	bne.n	800e2b6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d104      	bne.n	800e2ac <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f961 	bl	800e56c <USB_SetDevSpeed>
 800e2aa:	e008      	b.n	800e2be <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 f95c 	bl	800e56c <USB_SetDevSpeed>
 800e2b4:	e003      	b.n	800e2be <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e2b6:	2103      	movs	r1, #3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f957 	bl	800e56c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e2be:	2110      	movs	r1, #16
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f000 f90b 	bl	800e4dc <USB_FlushTxFifo>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f929 	bl	800e528 <USB_FlushRxFifo>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2fe:	461a      	mov	r2, r3
 800e300:	2300      	movs	r3, #0
 800e302:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e304:	2300      	movs	r3, #0
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	e043      	b.n	800e392 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	015a      	lsls	r2, r3, #5
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	4413      	add	r3, r2
 800e312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e31c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e320:	d118      	bne.n	800e354 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e334:	461a      	mov	r2, r3
 800e336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	e013      	b.n	800e366 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4413      	add	r3, r2
 800e346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e34a:	461a      	mov	r2, r3
 800e34c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e350:	6013      	str	r3, [r2, #0]
 800e352:	e008      	b.n	800e366 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	015a      	lsls	r2, r3, #5
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	4413      	add	r3, r2
 800e35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e360:	461a      	mov	r2, r3
 800e362:	2300      	movs	r3, #0
 800e364:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	015a      	lsls	r2, r3, #5
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e372:	461a      	mov	r2, r3
 800e374:	2300      	movs	r3, #0
 800e376:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e384:	461a      	mov	r2, r3
 800e386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e38a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	3301      	adds	r3, #1
 800e390:	613b      	str	r3, [r7, #16]
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	429a      	cmp	r2, r3
 800e398:	d3b7      	bcc.n	800e30a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e39a:	2300      	movs	r3, #0
 800e39c:	613b      	str	r3, [r7, #16]
 800e39e:	e043      	b.n	800e428 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	015a      	lsls	r2, r3, #5
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4413      	add	r3, r2
 800e3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3b6:	d118      	bne.n	800e3ea <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10a      	bne.n	800e3d4 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	015a      	lsls	r2, r3, #5
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3d0:	6013      	str	r3, [r2, #0]
 800e3d2:	e013      	b.n	800e3fc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e3e6:	6013      	str	r3, [r2, #0]
 800e3e8:	e008      	b.n	800e3fc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	015a      	lsls	r2, r3, #5
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	015a      	lsls	r2, r3, #5
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	4413      	add	r3, r2
 800e404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e408:	461a      	mov	r2, r3
 800e40a:	2300      	movs	r3, #0
 800e40c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	4413      	add	r3, r2
 800e416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e41a:	461a      	mov	r2, r3
 800e41c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e420:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	3301      	adds	r3, #1
 800e426:	613b      	str	r3, [r7, #16]
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	693a      	ldr	r2, [r7, #16]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d3b7      	bcc.n	800e3a0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	68fa      	ldr	r2, [r7, #12]
 800e43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e43e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e442:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	2b01      	cmp	r3, #1
 800e448:	d111      	bne.n	800e46e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e450:	461a      	mov	r2, r3
 800e452:	4b20      	ldr	r3, [pc, #128]	; (800e4d4 <USB_DevInit+0x2dc>)
 800e454:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e468:	f043 0303 	orr.w	r3, r3, #3
 800e46c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e47a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	f043 0210 	orr.w	r2, r3, #16
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	4b11      	ldr	r3, [pc, #68]	; (800e4d8 <USB_DevInit+0x2e0>)
 800e494:	4313      	orrs	r3, r2
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d005      	beq.n	800e4ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	f043 0208 	orr.w	r2, r3, #8
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d107      	bne.n	800e4c2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4ba:	f043 0304 	orr.w	r3, r3, #4
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4ce:	b004      	add	sp, #16
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	00800100 	.word	0x00800100
 800e4d8:	803c3800 	.word	0x803c3800

0800e4dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	019b      	lsls	r3, r3, #6
 800e4ee:	f043 0220 	orr.w	r2, r3, #32
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4a09      	ldr	r2, [pc, #36]	; (800e524 <USB_FlushTxFifo+0x48>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d901      	bls.n	800e508 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e006      	b.n	800e516 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	f003 0320 	and.w	r3, r3, #32
 800e510:	2b20      	cmp	r3, #32
 800e512:	d0f0      	beq.n	800e4f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	00030d40 	.word	0x00030d40

0800e528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2210      	movs	r2, #16
 800e538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	3301      	adds	r3, #1
 800e53e:	60fb      	str	r3, [r7, #12]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	4a09      	ldr	r2, [pc, #36]	; (800e568 <USB_FlushRxFifo+0x40>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d901      	bls.n	800e54c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e548:	2303      	movs	r3, #3
 800e54a:	e006      	b.n	800e55a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	f003 0310 	and.w	r3, r3, #16
 800e554:	2b10      	cmp	r3, #16
 800e556:	d0f0      	beq.n	800e53a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3714      	adds	r7, #20
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr
 800e566:	bf00      	nop
 800e568:	00030d40 	.word	0x00030d40

0800e56c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	460b      	mov	r3, r1
 800e576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	68f9      	ldr	r1, [r7, #12]
 800e588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e58c:	4313      	orrs	r3, r2
 800e58e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3714      	adds	r7, #20
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr

0800e59e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e59e:	b480      	push	{r7}
 800e5a0:	b087      	sub	sp, #28
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5b0:	689b      	ldr	r3, [r3, #8]
 800e5b2:	f003 0306 	and.w	r3, r3, #6
 800e5b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d102      	bne.n	800e5c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75fb      	strb	r3, [r7, #23]
 800e5c2:	e00a      	b.n	800e5da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d002      	beq.n	800e5d0 <USB_GetDevSpeed+0x32>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2b06      	cmp	r3, #6
 800e5ce:	d102      	bne.n	800e5d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	75fb      	strb	r3, [r7, #23]
 800e5d4:	e001      	b.n	800e5da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e5d6:	230f      	movs	r3, #15
 800e5d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	371c      	adds	r7, #28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	785b      	ldrb	r3, [r3, #1]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d13a      	bne.n	800e67a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e60a:	69da      	ldr	r2, [r3, #28]
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	2101      	movs	r1, #1
 800e616:	fa01 f303 	lsl.w	r3, r1, r3
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	68f9      	ldr	r1, [r7, #12]
 800e61e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e622:	4313      	orrs	r3, r2
 800e624:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	015a      	lsls	r2, r3, #5
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	4413      	add	r3, r2
 800e62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d155      	bne.n	800e6e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	78db      	ldrb	r3, [r3, #3]
 800e656:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e658:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	059b      	lsls	r3, r3, #22
 800e65e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e660:	4313      	orrs	r3, r2
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	0151      	lsls	r1, r2, #5
 800e666:	68fa      	ldr	r2, [r7, #12]
 800e668:	440a      	add	r2, r1
 800e66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e66e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e676:	6013      	str	r3, [r2, #0]
 800e678:	e036      	b.n	800e6e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e680:	69da      	ldr	r2, [r3, #28]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	f003 030f 	and.w	r3, r3, #15
 800e68a:	2101      	movs	r1, #1
 800e68c:	fa01 f303 	lsl.w	r3, r1, r3
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	68f9      	ldr	r1, [r7, #12]
 800e694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e698:	4313      	orrs	r3, r2
 800e69a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	015a      	lsls	r2, r3, #5
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d11a      	bne.n	800e6e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	015a      	lsls	r2, r3, #5
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	78db      	ldrb	r3, [r3, #3]
 800e6cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e6ce:	430b      	orrs	r3, r1
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	0151      	lsls	r1, r2, #5
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	440a      	add	r2, r1
 800e6da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d135      	bne.n	800e780 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e71a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	f003 030f 	and.w	r3, r3, #15
 800e724:	2101      	movs	r1, #1
 800e726:	fa01 f303 	lsl.w	r3, r1, r3
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	43db      	mvns	r3, r3
 800e72e:	68f9      	ldr	r1, [r7, #12]
 800e730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e734:	4013      	ands	r3, r2
 800e736:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e73e:	69da      	ldr	r2, [r3, #28]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	f003 030f 	and.w	r3, r3, #15
 800e748:	2101      	movs	r1, #1
 800e74a:	fa01 f303 	lsl.w	r3, r1, r3
 800e74e:	b29b      	uxth	r3, r3
 800e750:	43db      	mvns	r3, r3
 800e752:	68f9      	ldr	r1, [r7, #12]
 800e754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e758:	4013      	ands	r3, r2
 800e75a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	015a      	lsls	r2, r3, #5
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4413      	add	r3, r2
 800e764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	0159      	lsls	r1, r3, #5
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	440b      	add	r3, r1
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	4619      	mov	r1, r3
 800e778:	4b1f      	ldr	r3, [pc, #124]	; (800e7f8 <USB_DeactivateEndpoint+0x100>)
 800e77a:	4013      	ands	r3, r2
 800e77c:	600b      	str	r3, [r1, #0]
 800e77e:	e034      	b.n	800e7ea <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f003 030f 	and.w	r3, r3, #15
 800e790:	2101      	movs	r1, #1
 800e792:	fa01 f303 	lsl.w	r3, r1, r3
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	43db      	mvns	r3, r3
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7aa:	69da      	ldr	r2, [r3, #28]
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	f003 030f 	and.w	r3, r3, #15
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e7ba:	041b      	lsls	r3, r3, #16
 800e7bc:	43db      	mvns	r3, r3
 800e7be:	68f9      	ldr	r1, [r7, #12]
 800e7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	015a      	lsls	r2, r3, #5
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	0159      	lsls	r1, r3, #5
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	440b      	add	r3, r1
 800e7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <USB_DeactivateEndpoint+0x104>)
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	ec337800 	.word	0xec337800
 800e7fc:	eff37800 	.word	0xeff37800

0800e800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b08a      	sub	sp, #40	; 0x28
 800e804:	af02      	add	r7, sp, #8
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	785b      	ldrb	r3, [r3, #1]
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	f040 815c 	bne.w	800eada <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d132      	bne.n	800e890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	015a      	lsls	r2, r3, #5
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	4413      	add	r3, r2
 800e832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	69ba      	ldr	r2, [r7, #24]
 800e83a:	0151      	lsls	r1, r2, #5
 800e83c:	69fa      	ldr	r2, [r7, #28]
 800e83e:	440a      	add	r2, r1
 800e840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e84c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	015a      	lsls	r2, r3, #5
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	4413      	add	r3, r2
 800e856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e85a:	691b      	ldr	r3, [r3, #16]
 800e85c:	69ba      	ldr	r2, [r7, #24]
 800e85e:	0151      	lsls	r1, r2, #5
 800e860:	69fa      	ldr	r2, [r7, #28]
 800e862:	440a      	add	r2, r1
 800e864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e86c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	015a      	lsls	r2, r3, #5
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	4413      	add	r3, r2
 800e876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e87a:	691b      	ldr	r3, [r3, #16]
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	0151      	lsls	r1, r2, #5
 800e880:	69fa      	ldr	r2, [r7, #28]
 800e882:	440a      	add	r2, r1
 800e884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e888:	0cdb      	lsrs	r3, r3, #19
 800e88a:	04db      	lsls	r3, r3, #19
 800e88c:	6113      	str	r3, [r2, #16]
 800e88e:	e074      	b.n	800e97a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	69ba      	ldr	r2, [r7, #24]
 800e8a0:	0151      	lsls	r1, r2, #5
 800e8a2:	69fa      	ldr	r2, [r7, #28]
 800e8a4:	440a      	add	r2, r1
 800e8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8aa:	0cdb      	lsrs	r3, r3, #19
 800e8ac:	04db      	lsls	r3, r3, #19
 800e8ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	69ba      	ldr	r2, [r7, #24]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	69fa      	ldr	r2, [r7, #28]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e8ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e8d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8e0:	691a      	ldr	r2, [r3, #16]
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6959      	ldr	r1, [r3, #20]
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	440b      	add	r3, r1
 800e8ec:	1e59      	subs	r1, r3, #1
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800e8f6:	04d9      	lsls	r1, r3, #19
 800e8f8:	4b9d      	ldr	r3, [pc, #628]	; (800eb70 <USB_EPStartXfer+0x370>)
 800e8fa:	400b      	ands	r3, r1
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	0148      	lsls	r0, r1, #5
 800e900:	69f9      	ldr	r1, [r7, #28]
 800e902:	4401      	add	r1, r0
 800e904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e908:	4313      	orrs	r3, r2
 800e90a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	4413      	add	r3, r2
 800e914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e918:	691a      	ldr	r2, [r3, #16]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e922:	69b9      	ldr	r1, [r7, #24]
 800e924:	0148      	lsls	r0, r1, #5
 800e926:	69f9      	ldr	r1, [r7, #28]
 800e928:	4401      	add	r1, r0
 800e92a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e92e:	4313      	orrs	r3, r2
 800e930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	78db      	ldrb	r3, [r3, #3]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d11f      	bne.n	800e97a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	015a      	lsls	r2, r3, #5
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	4413      	add	r3, r2
 800e942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	69ba      	ldr	r2, [r7, #24]
 800e94a:	0151      	lsls	r1, r2, #5
 800e94c:	69fa      	ldr	r2, [r7, #28]
 800e94e:	440a      	add	r2, r1
 800e950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	015a      	lsls	r2, r3, #5
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	4413      	add	r3, r2
 800e962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	69ba      	ldr	r2, [r7, #24]
 800e96a:	0151      	lsls	r1, r2, #5
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	440a      	add	r2, r1
 800e970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e97a:	79fb      	ldrb	r3, [r7, #7]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d14b      	bne.n	800ea18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	691b      	ldr	r3, [r3, #16]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d009      	beq.n	800e99c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e994:	461a      	mov	r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	78db      	ldrb	r3, [r3, #3]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d128      	bne.n	800e9f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d110      	bne.n	800e9d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	e00f      	b.n	800e9f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	69ba      	ldr	r2, [r7, #24]
 800e9e6:	0151      	lsls	r1, r2, #5
 800e9e8:	69fa      	ldr	r2, [r7, #28]
 800e9ea:	440a      	add	r2, r1
 800e9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	015a      	lsls	r2, r3, #5
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	69ba      	ldr	r2, [r7, #24]
 800ea06:	0151      	lsls	r1, r2, #5
 800ea08:	69fa      	ldr	r2, [r7, #28]
 800ea0a:	440a      	add	r2, r1
 800ea0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	e12f      	b.n	800ec78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	0151      	lsls	r1, r2, #5
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	440a      	add	r2, r1
 800ea2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	78db      	ldrb	r3, [r3, #3]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d015      	beq.n	800ea6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 8117 	beq.w	800ec78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 030f 	and.w	r3, r3, #15
 800ea5a:	2101      	movs	r1, #1
 800ea5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea60:	69f9      	ldr	r1, [r7, #28]
 800ea62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea66:	4313      	orrs	r3, r2
 800ea68:	634b      	str	r3, [r1, #52]	; 0x34
 800ea6a:	e105      	b.n	800ec78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d110      	bne.n	800ea9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	69ba      	ldr	r2, [r7, #24]
 800ea8c:	0151      	lsls	r1, r2, #5
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	440a      	add	r2, r1
 800ea92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	e00f      	b.n	800eabe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	015a      	lsls	r2, r3, #5
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	69ba      	ldr	r2, [r7, #24]
 800eaae:	0151      	lsls	r1, r2, #5
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	440a      	add	r2, r1
 800eab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eabc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	68d9      	ldr	r1, [r3, #12]
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	781a      	ldrb	r2, [r3, #0]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	b298      	uxth	r0, r3
 800eacc:	79fb      	ldrb	r3, [r7, #7]
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	4603      	mov	r3, r0
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f000 fa2b 	bl	800ef2e <USB_WritePacket>
 800ead8:	e0ce      	b.n	800ec78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	69ba      	ldr	r2, [r7, #24]
 800eaea:	0151      	lsls	r1, r2, #5
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	440a      	add	r2, r1
 800eaf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaf4:	0cdb      	lsrs	r3, r3, #19
 800eaf6:	04db      	lsls	r3, r3, #19
 800eaf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	69ba      	ldr	r2, [r7, #24]
 800eb0a:	0151      	lsls	r1, r2, #5
 800eb0c:	69fa      	ldr	r2, [r7, #28]
 800eb0e:	440a      	add	r2, r1
 800eb10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eb18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eb1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d126      	bne.n	800eb74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	69fb      	ldr	r3, [r7, #28]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb32:	691a      	ldr	r2, [r3, #16]
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb3c:	69b9      	ldr	r1, [r7, #24]
 800eb3e:	0148      	lsls	r0, r1, #5
 800eb40:	69f9      	ldr	r1, [r7, #28]
 800eb42:	4401      	add	r1, r0
 800eb44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	015a      	lsls	r2, r3, #5
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	4413      	add	r3, r2
 800eb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	69ba      	ldr	r2, [r7, #24]
 800eb5c:	0151      	lsls	r1, r2, #5
 800eb5e:	69fa      	ldr	r2, [r7, #28]
 800eb60:	440a      	add	r2, r1
 800eb62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb6a:	6113      	str	r3, [r2, #16]
 800eb6c:	e036      	b.n	800ebdc <USB_EPStartXfer+0x3dc>
 800eb6e:	bf00      	nop
 800eb70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	695a      	ldr	r2, [r3, #20]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	1e5a      	subs	r2, r3, #1
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	015a      	lsls	r2, r3, #5
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	4413      	add	r3, r2
 800eb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb96:	691a      	ldr	r2, [r3, #16]
 800eb98:	8afb      	ldrh	r3, [r7, #22]
 800eb9a:	04d9      	lsls	r1, r3, #19
 800eb9c:	4b39      	ldr	r3, [pc, #228]	; (800ec84 <USB_EPStartXfer+0x484>)
 800eb9e:	400b      	ands	r3, r1
 800eba0:	69b9      	ldr	r1, [r7, #24]
 800eba2:	0148      	lsls	r0, r1, #5
 800eba4:	69f9      	ldr	r1, [r7, #28]
 800eba6:	4401      	add	r1, r0
 800eba8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ebac:	4313      	orrs	r3, r2
 800ebae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ebb0:	69bb      	ldr	r3, [r7, #24]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebbc:	691a      	ldr	r2, [r3, #16]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	8af9      	ldrh	r1, [r7, #22]
 800ebc4:	fb01 f303 	mul.w	r3, r1, r3
 800ebc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebcc:	69b9      	ldr	r1, [r7, #24]
 800ebce:	0148      	lsls	r0, r1, #5
 800ebd0:	69f9      	ldr	r1, [r7, #28]
 800ebd2:	4401      	add	r1, r0
 800ebd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d10d      	bne.n	800ebfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d009      	beq.n	800ebfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	68d9      	ldr	r1, [r3, #12]
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	015a      	lsls	r2, r3, #5
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebfa:	460a      	mov	r2, r1
 800ebfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	78db      	ldrb	r3, [r3, #3]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d128      	bne.n	800ec58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d110      	bne.n	800ec38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	69ba      	ldr	r2, [r7, #24]
 800ec26:	0151      	lsls	r1, r2, #5
 800ec28:	69fa      	ldr	r2, [r7, #28]
 800ec2a:	440a      	add	r2, r1
 800ec2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec34:	6013      	str	r3, [r2, #0]
 800ec36:	e00f      	b.n	800ec58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	015a      	lsls	r2, r3, #5
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	4413      	add	r3, r2
 800ec40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	0151      	lsls	r1, r2, #5
 800ec4a:	69fa      	ldr	r2, [r7, #28]
 800ec4c:	440a      	add	r2, r1
 800ec4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	015a      	lsls	r2, r3, #5
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	69ba      	ldr	r2, [r7, #24]
 800ec68:	0151      	lsls	r1, r2, #5
 800ec6a:	69fa      	ldr	r2, [r7, #28]
 800ec6c:	440a      	add	r2, r1
 800ec6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3720      	adds	r7, #32
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	1ff80000 	.word	0x1ff80000

0800ec88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b087      	sub	sp, #28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	4613      	mov	r3, r2
 800ec94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	785b      	ldrb	r3, [r3, #1]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	f040 80cd 	bne.w	800ee44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d132      	bne.n	800ed18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	015a      	lsls	r2, r3, #5
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	4413      	add	r3, r2
 800ecba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	693a      	ldr	r2, [r7, #16]
 800ecc2:	0151      	lsls	r1, r2, #5
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	440a      	add	r2, r1
 800ecc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ecd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ecd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	0151      	lsls	r1, r2, #5
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	440a      	add	r2, r1
 800ecec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	015a      	lsls	r2, r3, #5
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	693a      	ldr	r2, [r7, #16]
 800ed06:	0151      	lsls	r1, r2, #5
 800ed08:	697a      	ldr	r2, [r7, #20]
 800ed0a:	440a      	add	r2, r1
 800ed0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed10:	0cdb      	lsrs	r3, r3, #19
 800ed12:	04db      	lsls	r3, r3, #19
 800ed14:	6113      	str	r3, [r2, #16]
 800ed16:	e04e      	b.n	800edb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	015a      	lsls	r2, r3, #5
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	0151      	lsls	r1, r2, #5
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	440a      	add	r2, r1
 800ed2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed32:	0cdb      	lsrs	r3, r3, #19
 800ed34:	04db      	lsls	r3, r3, #19
 800ed36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	015a      	lsls	r2, r3, #5
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	4413      	add	r3, r2
 800ed40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	0151      	lsls	r1, r2, #5
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	440a      	add	r2, r1
 800ed4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ed56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ed5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	695a      	ldr	r2, [r3, #20]
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d903      	bls.n	800ed70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	015a      	lsls	r2, r3, #5
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	0151      	lsls	r1, r2, #5
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	440a      	add	r2, r1
 800ed86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	015a      	lsls	r2, r3, #5
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed9c:	691a      	ldr	r2, [r3, #16]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	695b      	ldr	r3, [r3, #20]
 800eda2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eda6:	6939      	ldr	r1, [r7, #16]
 800eda8:	0148      	lsls	r0, r1, #5
 800edaa:	6979      	ldr	r1, [r7, #20]
 800edac:	4401      	add	r1, r0
 800edae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800edb2:	4313      	orrs	r3, r2
 800edb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800edb6:	79fb      	ldrb	r3, [r7, #7]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d11e      	bne.n	800edfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd0:	461a      	mov	r2, r3
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	691b      	ldr	r3, [r3, #16]
 800edd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	015a      	lsls	r2, r3, #5
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	4413      	add	r3, r2
 800ede0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	693a      	ldr	r2, [r7, #16]
 800ede8:	0151      	lsls	r1, r2, #5
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	440a      	add	r2, r1
 800edee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800edf6:	6013      	str	r3, [r2, #0]
 800edf8:	e092      	b.n	800ef20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	015a      	lsls	r2, r3, #5
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	4413      	add	r3, r2
 800ee02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	0151      	lsls	r1, r2, #5
 800ee0c:	697a      	ldr	r2, [r7, #20]
 800ee0e:	440a      	add	r2, r1
 800ee10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d07e      	beq.n	800ef20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	f003 030f 	and.w	r3, r3, #15
 800ee32:	2101      	movs	r1, #1
 800ee34:	fa01 f303 	lsl.w	r3, r1, r3
 800ee38:	6979      	ldr	r1, [r7, #20]
 800ee3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	634b      	str	r3, [r1, #52]	; 0x34
 800ee42:	e06d      	b.n	800ef20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	015a      	lsls	r2, r3, #5
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	0151      	lsls	r1, r2, #5
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	440a      	add	r2, r1
 800ee5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee5e:	0cdb      	lsrs	r3, r3, #19
 800ee60:	04db      	lsls	r3, r3, #19
 800ee62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee70:	691b      	ldr	r3, [r3, #16]
 800ee72:	693a      	ldr	r2, [r7, #16]
 800ee74:	0151      	lsls	r1, r2, #5
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	440a      	add	r2, r1
 800ee7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d003      	beq.n	800ee98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	689a      	ldr	r2, [r3, #8]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	015a      	lsls	r2, r3, #5
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	4413      	add	r3, r2
 800eea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	0151      	lsls	r1, r2, #5
 800eeaa:	697a      	ldr	r2, [r7, #20]
 800eeac:	440a      	add	r2, r1
 800eeae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eeb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eeb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	015a      	lsls	r2, r3, #5
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	4413      	add	r3, r2
 800eec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eec4:	691a      	ldr	r2, [r3, #16]
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eece:	6939      	ldr	r1, [r7, #16]
 800eed0:	0148      	lsls	r0, r1, #5
 800eed2:	6979      	ldr	r1, [r7, #20]
 800eed4:	4401      	add	r1, r0
 800eed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eeda:	4313      	orrs	r3, r2
 800eedc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d10d      	bne.n	800ef00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d009      	beq.n	800ef00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	68d9      	ldr	r1, [r3, #12]
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	015a      	lsls	r2, r3, #5
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	4413      	add	r3, r2
 800eef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eefc:	460a      	mov	r2, r1
 800eefe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	015a      	lsls	r2, r3, #5
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	4413      	add	r3, r2
 800ef08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	693a      	ldr	r2, [r7, #16]
 800ef10:	0151      	lsls	r1, r2, #5
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	440a      	add	r2, r1
 800ef16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ef1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	371c      	adds	r7, #28
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr

0800ef2e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ef2e:	b480      	push	{r7}
 800ef30:	b089      	sub	sp, #36	; 0x24
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	60f8      	str	r0, [r7, #12]
 800ef36:	60b9      	str	r1, [r7, #8]
 800ef38:	4611      	mov	r1, r2
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	71fb      	strb	r3, [r7, #7]
 800ef40:	4613      	mov	r3, r2
 800ef42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ef4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d11a      	bne.n	800ef8a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ef54:	88bb      	ldrh	r3, [r7, #4]
 800ef56:	3303      	adds	r3, #3
 800ef58:	089b      	lsrs	r3, r3, #2
 800ef5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	61bb      	str	r3, [r7, #24]
 800ef60:	e00f      	b.n	800ef82 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	031a      	lsls	r2, r3, #12
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	4413      	add	r3, r2
 800ef6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef6e:	461a      	mov	r2, r3
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	61bb      	str	r3, [r7, #24]
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d3eb      	bcc.n	800ef62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3724      	adds	r7, #36	; 0x24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	b089      	sub	sp, #36	; 0x24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	4613      	mov	r3, r2
 800efa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800efae:	88fb      	ldrh	r3, [r7, #6]
 800efb0:	3303      	adds	r3, #3
 800efb2:	089b      	lsrs	r3, r3, #2
 800efb4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800efb6:	2300      	movs	r3, #0
 800efb8:	61bb      	str	r3, [r7, #24]
 800efba:	e00b      	b.n	800efd4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	601a      	str	r2, [r3, #0]
    pDest++;
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	3304      	adds	r3, #4
 800efcc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800efce:	69bb      	ldr	r3, [r7, #24]
 800efd0:	3301      	adds	r3, #1
 800efd2:	61bb      	str	r3, [r7, #24]
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d3ef      	bcc.n	800efbc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800efdc:	69fb      	ldr	r3, [r7, #28]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3724      	adds	r7, #36	; 0x24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800efea:	b480      	push	{r7}
 800efec:	b085      	sub	sp, #20
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
 800eff2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	785b      	ldrb	r3, [r3, #1]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d12c      	bne.n	800f060 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	015a      	lsls	r2, r3, #5
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4413      	add	r3, r2
 800f00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	db12      	blt.n	800f03e <USB_EPSetStall+0x54>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00f      	beq.n	800f03e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	015a      	lsls	r2, r3, #5
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	4413      	add	r3, r2
 800f026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	0151      	lsls	r1, r2, #5
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	440a      	add	r2, r1
 800f034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f038:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f03c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	015a      	lsls	r2, r3, #5
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	4413      	add	r3, r2
 800f046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68ba      	ldr	r2, [r7, #8]
 800f04e:	0151      	lsls	r1, r2, #5
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	440a      	add	r2, r1
 800f054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	e02b      	b.n	800f0b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	015a      	lsls	r2, r3, #5
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	4413      	add	r3, r2
 800f068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	db12      	blt.n	800f098 <USB_EPSetStall+0xae>
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00f      	beq.n	800f098 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	015a      	lsls	r2, r3, #5
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4413      	add	r3, r2
 800f080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	0151      	lsls	r1, r2, #5
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	440a      	add	r2, r1
 800f08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f096:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	0151      	lsls	r1, r2, #5
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f0b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d128      	bne.n	800f134 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	0151      	lsls	r1, r2, #5
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	440a      	add	r2, r1
 800f0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f100:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	78db      	ldrb	r3, [r3, #3]
 800f106:	2b03      	cmp	r3, #3
 800f108:	d003      	beq.n	800f112 <USB_EPClearStall+0x4c>
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	78db      	ldrb	r3, [r3, #3]
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d138      	bne.n	800f184 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	015a      	lsls	r2, r3, #5
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	4413      	add	r3, r2
 800f11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	0151      	lsls	r1, r2, #5
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	440a      	add	r2, r1
 800f128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f12c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f130:	6013      	str	r3, [r2, #0]
 800f132:	e027      	b.n	800f184 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	015a      	lsls	r2, r3, #5
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	0151      	lsls	r1, r2, #5
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	440a      	add	r2, r1
 800f14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f14e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	78db      	ldrb	r3, [r3, #3]
 800f158:	2b03      	cmp	r3, #3
 800f15a:	d003      	beq.n	800f164 <USB_EPClearStall+0x9e>
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	78db      	ldrb	r3, [r3, #3]
 800f160:	2b02      	cmp	r3, #2
 800f162:	d10f      	bne.n	800f184 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	015a      	lsls	r2, r3, #5
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4413      	add	r3, r2
 800f16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68ba      	ldr	r2, [r7, #8]
 800f174:	0151      	lsls	r1, r2, #5
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	440a      	add	r2, r1
 800f17a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f17e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f182:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3714      	adds	r7, #20
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f192:	b480      	push	{r7}
 800f194:	b085      	sub	sp, #20
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	460b      	mov	r3, r1
 800f19c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f1b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	78fb      	ldrb	r3, [r7, #3]
 800f1c0:	011b      	lsls	r3, r3, #4
 800f1c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f1c6:	68f9      	ldr	r1, [r7, #12]
 800f1c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3714      	adds	r7, #20
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr

0800f1de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b084      	sub	sp, #16
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1f8:	f023 0302 	bic.w	r3, r3, #2
 800f1fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f1fe:	2003      	movs	r0, #3
 800f200:	f7f7 f92c 	bl	800645c <HAL_Delay>

  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b084      	sub	sp, #16
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f228:	f043 0302 	orr.w	r3, r3, #2
 800f22c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f22e:	2003      	movs	r0, #3
 800f230:	f7f7 f914 	bl	800645c <HAL_Delay>

  return HAL_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f23e:	b480      	push	{r7}
 800f240:	b085      	sub	sp, #20
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	695b      	ldr	r3, [r3, #20]
 800f24a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4013      	ands	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f256:	68fb      	ldr	r3, [r7, #12]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3714      	adds	r7, #20
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f276:	699b      	ldr	r3, [r3, #24]
 800f278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f280:	69db      	ldr	r3, [r3, #28]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	4013      	ands	r3, r2
 800f286:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	0c1b      	lsrs	r3, r3, #16
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2b4:	69db      	ldr	r3, [r3, #28]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	b29b      	uxth	r3, r3
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3714      	adds	r7, #20
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	68ba      	ldr	r2, [r7, #8]
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f308:	b480      	push	{r7}
 800f30a:	b087      	sub	sp, #28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	460b      	mov	r3, r1
 800f312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f32c:	78fb      	ldrb	r3, [r7, #3]
 800f32e:	f003 030f 	and.w	r3, r3, #15
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	fa22 f303 	lsr.w	r3, r2, r3
 800f338:	01db      	lsls	r3, r3, #7
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	4313      	orrs	r3, r2
 800f340:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f342:	78fb      	ldrb	r3, [r7, #3]
 800f344:	015a      	lsls	r2, r3, #5
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	4413      	add	r3, r2
 800f34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	693a      	ldr	r2, [r7, #16]
 800f352:	4013      	ands	r3, r2
 800f354:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f356:	68bb      	ldr	r3, [r7, #8]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	371c      	adds	r7, #28
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	695b      	ldr	r3, [r3, #20]
 800f370:	f003 0301 	and.w	r3, r3, #1
}
 800f374:	4618      	mov	r0, r3
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f380:	b480      	push	{r7}
 800f382:	b085      	sub	sp, #20
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f39a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f39e:	f023 0307 	bic.w	r3, r3, #7
 800f3a2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	f003 0306 	and.w	r3, r3, #6
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	d109      	bne.n	800f3c8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3c2:	f043 0303 	orr.w	r3, r3, #3
 800f3c6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr
	...

0800f3ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b087      	sub	sp, #28
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	607a      	str	r2, [r7, #4]
 800f3f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	333c      	adds	r3, #60	; 0x3c
 800f402:	3304      	adds	r3, #4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	4a26      	ldr	r2, [pc, #152]	; (800f4a4 <USB_EP0_OutStart+0xb8>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d90a      	bls.n	800f426 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f41c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f420:	d101      	bne.n	800f426 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f422:	2300      	movs	r3, #0
 800f424:	e037      	b.n	800f496 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f42c:	461a      	mov	r2, r3
 800f42e:	2300      	movs	r3, #0
 800f430:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f438:	691b      	ldr	r3, [r3, #16]
 800f43a:	697a      	ldr	r2, [r7, #20]
 800f43c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f454:	f043 0318 	orr.w	r3, r3, #24
 800f458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f468:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f46c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f46e:	7afb      	ldrb	r3, [r7, #11]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d10f      	bne.n	800f494 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47a:	461a      	mov	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f48e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	371c      	adds	r7, #28
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	4f54300a 	.word	0x4f54300a

0800f4a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	60fb      	str	r3, [r7, #12]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	4a13      	ldr	r2, [pc, #76]	; (800f50c <USB_CoreReset+0x64>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d901      	bls.n	800f4c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e01b      	b.n	800f4fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	daf2      	bge.n	800f4b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	f043 0201 	orr.w	r2, r3, #1
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	4a09      	ldr	r2, [pc, #36]	; (800f50c <USB_CoreReset+0x64>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d901      	bls.n	800f4f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	e006      	b.n	800f4fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d0f0      	beq.n	800f4de <USB_CoreReset+0x36>

  return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3714      	adds	r7, #20
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	00030d40 	.word	0x00030d40

0800f510 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	460b      	mov	r3, r1
 800f51a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f51c:	2300      	movs	r3, #0
 800f51e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	7c1b      	ldrb	r3, [r3, #16]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d115      	bne.n	800f554 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f52c:	2202      	movs	r2, #2
 800f52e:	2181      	movs	r1, #129	; 0x81
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f005 fa2e 	bl	8014992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f540:	2202      	movs	r2, #2
 800f542:	2101      	movs	r1, #1
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f005 fa24 	bl	8014992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800f552:	e012      	b.n	800f57a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f554:	2340      	movs	r3, #64	; 0x40
 800f556:	2202      	movs	r2, #2
 800f558:	2181      	movs	r1, #129	; 0x81
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f005 fa19 	bl	8014992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f566:	2340      	movs	r3, #64	; 0x40
 800f568:	2202      	movs	r2, #2
 800f56a:	2101      	movs	r1, #1
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f005 fa10 	bl	8014992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2201      	movs	r2, #1
 800f576:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f57a:	2308      	movs	r3, #8
 800f57c:	2203      	movs	r2, #3
 800f57e:	2182      	movs	r1, #130	; 0x82
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f005 fa06 	bl	8014992 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2201      	movs	r2, #1
 800f58a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800f58c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f590:	f005 fcbe 	bl	8014f10 <malloc>
 800f594:	4603      	mov	r3, r0
 800f596:	461a      	mov	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d102      	bne.n	800f5ae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	73fb      	strb	r3, [r7, #15]
 800f5ac:	e026      	b.n	800f5fc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f5b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	7c1b      	ldrb	r3, [r3, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d109      	bne.n	800f5ec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f5de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f005 fac5 	bl	8014b74 <USBD_LL_PrepareReceive>
 800f5ea:	e007      	b.n	800f5fc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f5f2:	2340      	movs	r3, #64	; 0x40
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f005 fabc 	bl	8014b74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b084      	sub	sp, #16
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	460b      	mov	r3, r1
 800f610:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f616:	2181      	movs	r1, #129	; 0x81
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f005 f9e0 	bl	80149de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2200      	movs	r2, #0
 800f622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f624:	2101      	movs	r1, #1
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f005 f9d9 	bl	80149de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f634:	2182      	movs	r1, #130	; 0x82
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f005 f9d1 	bl	80149de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00e      	beq.n	800f66a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f65c:	4618      	mov	r0, r3
 800f65e:	f005 fc5f 	bl	8014f20 <free>
    pdev->pClassData = NULL;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800f66a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f684:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f68a:	2300      	movs	r3, #0
 800f68c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d039      	beq.n	800f712 <USBD_CDC_Setup+0x9e>
 800f69e:	2b20      	cmp	r3, #32
 800f6a0:	d17c      	bne.n	800f79c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	88db      	ldrh	r3, [r3, #6]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d029      	beq.n	800f6fe <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b25b      	sxtb	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da11      	bge.n	800f6d8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	683a      	ldr	r2, [r7, #0]
 800f6be:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800f6c0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f6c2:	683a      	ldr	r2, [r7, #0]
 800f6c4:	88d2      	ldrh	r2, [r2, #6]
 800f6c6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f6c8:	6939      	ldr	r1, [r7, #16]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	88db      	ldrh	r3, [r3, #6]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f001 f9c9 	bl	8010a68 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800f6d6:	e068      	b.n	800f7aa <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	785a      	ldrb	r2, [r3, #1]
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	88db      	ldrh	r3, [r3, #6]
 800f6e6:	b2da      	uxtb	r2, r3
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f6ee:	6939      	ldr	r1, [r7, #16]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	88db      	ldrh	r3, [r3, #6]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f001 f9e4 	bl	8010ac4 <USBD_CtlPrepareRx>
    break;
 800f6fc:	e055      	b.n	800f7aa <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	7850      	ldrb	r0, [r2, #1]
 800f70a:	2200      	movs	r2, #0
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	4798      	blx	r3
    break;
 800f710:	e04b      	b.n	800f7aa <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	785b      	ldrb	r3, [r3, #1]
 800f716:	2b0a      	cmp	r3, #10
 800f718:	d017      	beq.n	800f74a <USBD_CDC_Setup+0xd6>
 800f71a:	2b0b      	cmp	r3, #11
 800f71c:	d029      	beq.n	800f772 <USBD_CDC_Setup+0xfe>
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d133      	bne.n	800f78a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f728:	2b03      	cmp	r3, #3
 800f72a:	d107      	bne.n	800f73c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800f72c:	f107 030c 	add.w	r3, r7, #12
 800f730:	2202      	movs	r2, #2
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f001 f997 	bl	8010a68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f73a:	e02e      	b.n	800f79a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f001 f927 	bl	8010992 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f744:	2302      	movs	r3, #2
 800f746:	75fb      	strb	r3, [r7, #23]
      break;
 800f748:	e027      	b.n	800f79a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f750:	2b03      	cmp	r3, #3
 800f752:	d107      	bne.n	800f764 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800f754:	f107 030f 	add.w	r3, r7, #15
 800f758:	2201      	movs	r2, #1
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f001 f983 	bl	8010a68 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800f762:	e01a      	b.n	800f79a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800f764:	6839      	ldr	r1, [r7, #0]
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f001 f913 	bl	8010992 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f76c:	2302      	movs	r3, #2
 800f76e:	75fb      	strb	r3, [r7, #23]
      break;
 800f770:	e013      	b.n	800f79a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f778:	2b03      	cmp	r3, #3
 800f77a:	d00d      	beq.n	800f798 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800f77c:	6839      	ldr	r1, [r7, #0]
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f001 f907 	bl	8010992 <USBD_CtlError>
			  ret = USBD_FAIL;
 800f784:	2302      	movs	r3, #2
 800f786:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800f788:	e006      	b.n	800f798 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 f900 	bl	8010992 <USBD_CtlError>
      ret = USBD_FAIL;
 800f792:	2302      	movs	r3, #2
 800f794:	75fb      	strb	r3, [r7, #23]
      break;
 800f796:	e000      	b.n	800f79a <USBD_CDC_Setup+0x126>
      break;
 800f798:	bf00      	nop
    }
    break;
 800f79a:	e006      	b.n	800f7aa <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f001 f8f7 	bl	8010992 <USBD_CtlError>
    ret = USBD_FAIL;
 800f7a4:	2302      	movs	r3, #2
 800f7a6:	75fb      	strb	r3, [r7, #23]
    break;
 800f7a8:	bf00      	nop
  }

  return ret;
 800f7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3718      	adds	r7, #24
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f7c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f7ce:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d03a      	beq.n	800f850 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f7da:	78fa      	ldrb	r2, [r7, #3]
 800f7dc:	6879      	ldr	r1, [r7, #4]
 800f7de:	4613      	mov	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4413      	add	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	440b      	add	r3, r1
 800f7e8:	331c      	adds	r3, #28
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d029      	beq.n	800f844 <USBD_CDC_DataIn+0x90>
 800f7f0:	78fa      	ldrb	r2, [r7, #3]
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	4413      	add	r3, r2
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	440b      	add	r3, r1
 800f7fe:	331c      	adds	r3, #28
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	78f9      	ldrb	r1, [r7, #3]
 800f804:	68b8      	ldr	r0, [r7, #8]
 800f806:	460b      	mov	r3, r1
 800f808:	00db      	lsls	r3, r3, #3
 800f80a:	1a5b      	subs	r3, r3, r1
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	4403      	add	r3, r0
 800f810:	3344      	adds	r3, #68	; 0x44
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	fbb2 f1f3 	udiv	r1, r2, r3
 800f818:	fb03 f301 	mul.w	r3, r3, r1
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d110      	bne.n	800f844 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f822:	78fa      	ldrb	r2, [r7, #3]
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	440b      	add	r3, r1
 800f830:	331c      	adds	r3, #28
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800f836:	78f9      	ldrb	r1, [r7, #3]
 800f838:	2300      	movs	r3, #0
 800f83a:	2200      	movs	r2, #0
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f005 f976 	bl	8014b2e <USBD_LL_Transmit>
 800f842:	e003      	b.n	800f84c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f84c:	2300      	movs	r3, #0
 800f84e:	e000      	b.n	800f852 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f850:	2302      	movs	r3, #2
  }
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b084      	sub	sp, #16
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
 800f862:	460b      	mov	r3, r1
 800f864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f86c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800f86e:	78fb      	ldrb	r3, [r7, #3]
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f005 f9a1 	bl	8014bba <USBD_LL_GetRxDataSize>
 800f878:	4602      	mov	r2, r0
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00d      	beq.n	800f8a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f89e:	4611      	mov	r1, r2
 800f8a0:	4798      	blx	r3

    return USBD_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e000      	b.n	800f8a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f8a6:	2302      	movs	r3, #2
  }
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f8be:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d015      	beq.n	800f8f6 <USBD_CDC_EP0_RxReady+0x46>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f8d0:	2bff      	cmp	r3, #255	; 0xff
 800f8d2:	d010      	beq.n	800f8f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f8e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f8ea:	b292      	uxth	r2, r2
 800f8ec:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	22ff      	movs	r2, #255	; 0xff
 800f8f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f8f6:	2300      	movs	r3, #0
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800f900:	b480      	push	{r7}
 800f902:	b083      	sub	sp, #12
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2243      	movs	r2, #67	; 0x43
 800f90c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f90e:	4b03      	ldr	r3, [pc, #12]	; (800f91c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f910:	4618      	mov	r0, r3
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	20000090 	.word	0x20000090

0800f920 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2243      	movs	r2, #67	; 0x43
 800f92c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f92e:	4b03      	ldr	r3, [pc, #12]	; (800f93c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f930:	4618      	mov	r0, r3
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	2000004c 	.word	0x2000004c

0800f940 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2243      	movs	r2, #67	; 0x43
 800f94c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f94e:	4b03      	ldr	r3, [pc, #12]	; (800f95c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	200000d4 	.word	0x200000d4

0800f960 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	220a      	movs	r2, #10
 800f96c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f96e:	4b03      	ldr	r3, [pc, #12]	; (800f97c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f970:	4618      	mov	r0, r3
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr
 800f97c:	20000008 	.word	0x20000008

0800f980 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800f980:	b480      	push	{r7}
 800f982:	b085      	sub	sp, #20
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f98a:	2302      	movs	r3, #2
 800f98c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d005      	beq.n	800f9a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	683a      	ldr	r2, [r7, #0]
 800f998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800f99c:	2300      	movs	r3, #0
 800f99e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b087      	sub	sp, #28
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	60f8      	str	r0, [r7, #12]
 800f9b6:	60b9      	str	r1, [r7, #8]
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9c2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f9cc:	88fa      	ldrh	r2, [r7, #6]
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	371c      	adds	r7, #28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b085      	sub	sp, #20
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f9f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	683a      	ldr	r2, [r7, #0]
 800f9f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f9fc:	2300      	movs	r3, #0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3714      	adds	r7, #20
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b084      	sub	sp, #16
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa18:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d01c      	beq.n	800fa5e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d115      	bne.n	800fa5a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2201      	movs	r2, #1
 800fa32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	2181      	movs	r1, #129	; 0x81
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f005 f86c 	bl	8014b2e <USBD_LL_Transmit>

      return USBD_OK;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e002      	b.n	800fa60 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e000      	b.n	800fa60 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800fa5e:	2302      	movs	r3, #2
  }
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3710      	adds	r7, #16
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d017      	beq.n	800fab2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	7c1b      	ldrb	r3, [r3, #16]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d109      	bne.n	800fa9e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fa90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa94:	2101      	movs	r1, #1
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f005 f86c 	bl	8014b74 <USBD_LL_PrepareReceive>
 800fa9c:	e007      	b.n	800faae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800faa4:	2340      	movs	r3, #64	; 0x40
 800faa6:	2101      	movs	r1, #1
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f005 f863 	bl	8014b74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800faae:	2300      	movs	r3, #0
 800fab0:	e000      	b.n	800fab4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800fab2:	2302      	movs	r3, #2
  }
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4613      	mov	r3, r2
 800fac8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fad0:	2302      	movs	r3, #2
 800fad2:	e01a      	b.n	800fb0a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d003      	beq.n	800fae6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d003      	beq.n	800faf4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	79fa      	ldrb	r2, [r7, #7]
 800fb00:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f004 fede 	bl	80148c4 <USBD_LL_Init>

  return USBD_OK;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b085      	sub	sp, #20
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
 800fb1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d006      	beq.n	800fb34 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	683a      	ldr	r2, [r7, #0]
 800fb2a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73fb      	strb	r3, [r7, #15]
 800fb32:	e001      	b.n	800fb38 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800fb34:	2302      	movs	r3, #2
 800fb36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr

0800fb46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b082      	sub	sp, #8
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f004 ff04 	bl	801495c <USBD_LL_Start>

  return USBD_OK;
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800fb5e:	b480      	push	{r7}
 800fb60:	b083      	sub	sp, #12
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800fb80:	2302      	movs	r3, #2
 800fb82:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00c      	beq.n	800fba8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	78fa      	ldrb	r2, [r7, #3]
 800fb98:	4611      	mov	r1, r2
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	4798      	blx	r3
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b082      	sub	sp, #8
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	460b      	mov	r3, r1
 800fbbc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	78fa      	ldrb	r2, [r7, #3]
 800fbc8:	4611      	mov	r1, r2
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	4798      	blx	r3
  return USBD_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fbe8:	6839      	ldr	r1, [r7, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 fe94 	bl	8010918 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800fbfe:	461a      	mov	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800fc0c:	f003 031f 	and.w	r3, r3, #31
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d00c      	beq.n	800fc2e <USBD_LL_SetupStage+0x56>
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d302      	bcc.n	800fc1e <USBD_LL_SetupStage+0x46>
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d010      	beq.n	800fc3e <USBD_LL_SetupStage+0x66>
 800fc1c:	e017      	b.n	800fc4e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 fa04 	bl	8010034 <USBD_StdDevReq>
    break;
 800fc2c:	e01a      	b.n	800fc64 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fc34:	4619      	mov	r1, r3
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 fa66 	bl	8010108 <USBD_StdItfReq>
    break;
 800fc3c:	e012      	b.n	800fc64 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fc44:	4619      	mov	r1, r3
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 faa4 	bl	8010194 <USBD_StdEPReq>
    break;
 800fc4c:	e00a      	b.n	800fc64 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800fc54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f004 fedd 	bl	8014a1c <USBD_LL_StallEP>
    break;
 800fc62:	bf00      	nop
  }

  return USBD_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b086      	sub	sp, #24
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	60f8      	str	r0, [r7, #12]
 800fc76:	460b      	mov	r3, r1
 800fc78:	607a      	str	r2, [r7, #4]
 800fc7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800fc7c:	7afb      	ldrb	r3, [r7, #11]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d14b      	bne.n	800fd1a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fc88:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fc90:	2b03      	cmp	r3, #3
 800fc92:	d134      	bne.n	800fcfe <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	68da      	ldr	r2, [r3, #12]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d919      	bls.n	800fcd4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	68da      	ldr	r2, [r3, #12]
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	1ad2      	subs	r2, r2, r3
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d203      	bcs.n	800fcc2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	e002      	b.n	800fcc8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6879      	ldr	r1, [r7, #4]
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 ff17 	bl	8010b00 <USBD_CtlContinueRx>
 800fcd2:	e038      	b.n	800fd46 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00a      	beq.n	800fcf6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d105      	bne.n	800fcf6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fcf0:	691b      	ldr	r3, [r3, #16]
 800fcf2:	68f8      	ldr	r0, [r7, #12]
 800fcf4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f000 ff14 	bl	8010b24 <USBD_CtlSendStatus>
 800fcfc:	e023      	b.n	800fd46 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fd04:	2b05      	cmp	r3, #5
 800fd06:	d11e      	bne.n	800fd46 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800fd10:	2100      	movs	r1, #0
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f004 fe82 	bl	8014a1c <USBD_LL_StallEP>
 800fd18:	e015      	b.n	800fd46 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd20:	699b      	ldr	r3, [r3, #24]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d00d      	beq.n	800fd42 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800fd2c:	2b03      	cmp	r3, #3
 800fd2e:	d108      	bne.n	800fd42 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fd36:	699b      	ldr	r3, [r3, #24]
 800fd38:	7afa      	ldrb	r2, [r7, #11]
 800fd3a:	4611      	mov	r1, r2
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	4798      	blx	r3
 800fd40:	e001      	b.n	800fd46 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fd42:	2302      	movs	r3, #2
 800fd44:	e000      	b.n	800fd48 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3718      	adds	r7, #24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800fd5e:	7afb      	ldrb	r3, [r7, #11]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d17f      	bne.n	800fe64 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	3314      	adds	r3, #20
 800fd68:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d15c      	bne.n	800fe2e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	68da      	ldr	r2, [r3, #12]
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d915      	bls.n	800fdac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	68da      	ldr	r2, [r3, #12]
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	1ad2      	subs	r2, r2, r3
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	461a      	mov	r2, r3
 800fd96:	6879      	ldr	r1, [r7, #4]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f000 fe81 	bl	8010aa0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fd9e:	2300      	movs	r3, #0
 800fda0:	2200      	movs	r2, #0
 800fda2:	2100      	movs	r1, #0
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f004 fee5 	bl	8014b74 <USBD_LL_PrepareReceive>
 800fdaa:	e04e      	b.n	800fe4a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	6912      	ldr	r2, [r2, #16]
 800fdb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdb8:	fb02 f201 	mul.w	r2, r2, r1
 800fdbc:	1a9b      	subs	r3, r3, r2
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d11c      	bne.n	800fdfc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	689a      	ldr	r2, [r3, #8]
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d316      	bcc.n	800fdfc <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	689a      	ldr	r2, [r3, #8]
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d20f      	bcs.n	800fdfc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fddc:	2200      	movs	r2, #0
 800fdde:	2100      	movs	r1, #0
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 fe5d 	bl	8010aa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800fdee:	2300      	movs	r3, #0
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f004 febd 	bl	8014b74 <USBD_LL_PrepareReceive>
 800fdfa:	e026      	b.n	800fe4a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00a      	beq.n	800fe1e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800fe0e:	2b03      	cmp	r3, #3
 800fe10:	d105      	bne.n	800fe1e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fe1e:	2180      	movs	r1, #128	; 0x80
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f004 fdfb 	bl	8014a1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f000 fe8f 	bl	8010b4a <USBD_CtlReceiveStatus>
 800fe2c:	e00d      	b.n	800fe4a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800fe34:	2b04      	cmp	r3, #4
 800fe36:	d004      	beq.n	800fe42 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d103      	bne.n	800fe4a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fe42:	2180      	movs	r1, #128	; 0x80
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f004 fde9 	bl	8014a1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d11d      	bne.n	800fe90 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff fe82 	bl	800fb5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800fe62:	e015      	b.n	800fe90 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe6a:	695b      	ldr	r3, [r3, #20]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00d      	beq.n	800fe8c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d108      	bne.n	800fe8c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	7afa      	ldrb	r2, [r7, #11]
 800fe84:	4611      	mov	r1, r2
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	4798      	blx	r3
 800fe8a:	e001      	b.n	800fe90 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	e000      	b.n	800fe92 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fea2:	2340      	movs	r3, #64	; 0x40
 800fea4:	2200      	movs	r2, #0
 800fea6:	2100      	movs	r1, #0
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f004 fd72 	bl	8014992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2201      	movs	r2, #1
 800feb2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2240      	movs	r2, #64	; 0x40
 800feba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800febe:	2340      	movs	r3, #64	; 0x40
 800fec0:	2200      	movs	r2, #0
 800fec2:	2180      	movs	r1, #128	; 0x80
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f004 fd64 	bl	8014992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2201      	movs	r2, #1
 800fece:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2240      	movs	r2, #64	; 0x40
 800fed4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2201      	movs	r2, #1
 800feda:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	2200      	movs	r2, #0
 800fee2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d009      	beq.n	800ff12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6852      	ldr	r2, [r2, #4]
 800ff0a:	b2d2      	uxtb	r2, r2
 800ff0c:	4611      	mov	r1, r2
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	4798      	blx	r3
  }

  return USBD_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3708      	adds	r7, #8
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	460b      	mov	r3, r1
 800ff26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	78fa      	ldrb	r2, [r7, #3]
 800ff2c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2204      	movs	r2, #4
 800ff54:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800ff66:	b480      	push	{r7}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ff96:	2b03      	cmp	r3, #3
 800ff98:	d10b      	bne.n	800ffb2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ffa0:	69db      	ldr	r3, [r3, #28]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d005      	beq.n	800ffb2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ffac:	69db      	ldr	r3, [r3, #28]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	370c      	adds	r7, #12
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ffd6:	b480      	push	{r7}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	460b      	mov	r3, r1
 800ffe0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ffe2:	2300      	movs	r3, #0
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010006:	b580      	push	{r7, lr}
 8010008:	b082      	sub	sp, #8
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2201      	movs	r2, #1
 8010012:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	6852      	ldr	r2, [r2, #4]
 8010022:	b2d2      	uxtb	r2, r2
 8010024:	4611      	mov	r1, r2
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	4798      	blx	r3

  return USBD_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3708      	adds	r7, #8
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}

08010034 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801003e:	2300      	movs	r3, #0
 8010040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801004a:	2b20      	cmp	r3, #32
 801004c:	d004      	beq.n	8010058 <USBD_StdDevReq+0x24>
 801004e:	2b40      	cmp	r3, #64	; 0x40
 8010050:	d002      	beq.n	8010058 <USBD_StdDevReq+0x24>
 8010052:	2b00      	cmp	r3, #0
 8010054:	d008      	beq.n	8010068 <USBD_StdDevReq+0x34>
 8010056:	e04c      	b.n	80100f2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	4798      	blx	r3
    break;
 8010066:	e049      	b.n	80100fc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	785b      	ldrb	r3, [r3, #1]
 801006c:	2b09      	cmp	r3, #9
 801006e:	d83a      	bhi.n	80100e6 <USBD_StdDevReq+0xb2>
 8010070:	a201      	add	r2, pc, #4	; (adr r2, 8010078 <USBD_StdDevReq+0x44>)
 8010072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010076:	bf00      	nop
 8010078:	080100c9 	.word	0x080100c9
 801007c:	080100dd 	.word	0x080100dd
 8010080:	080100e7 	.word	0x080100e7
 8010084:	080100d3 	.word	0x080100d3
 8010088:	080100e7 	.word	0x080100e7
 801008c:	080100ab 	.word	0x080100ab
 8010090:	080100a1 	.word	0x080100a1
 8010094:	080100e7 	.word	0x080100e7
 8010098:	080100bf 	.word	0x080100bf
 801009c:	080100b5 	.word	0x080100b5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80100a0:	6839      	ldr	r1, [r7, #0]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f9d2 	bl	801044c <USBD_GetDescriptor>
      break;
 80100a8:	e022      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fac7 	bl	8010640 <USBD_SetAddress>
      break;
 80100b2:	e01d      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fb04 	bl	80106c4 <USBD_SetConfig>
      break;
 80100bc:	e018      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fb8d 	bl	80107e0 <USBD_GetConfig>
      break;
 80100c6:	e013      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80100c8:	6839      	ldr	r1, [r7, #0]
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f000 fbbc 	bl	8010848 <USBD_GetStatus>
      break;
 80100d0:	e00e      	b.n	80100f0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 fbea 	bl	80108ae <USBD_SetFeature>
      break;
 80100da:	e009      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80100dc:	6839      	ldr	r1, [r7, #0]
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fbf9 	bl	80108d6 <USBD_ClrFeature>
      break;
 80100e4:	e004      	b.n	80100f0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 fc52 	bl	8010992 <USBD_CtlError>
      break;
 80100ee:	bf00      	nop
    }
    break;
 80100f0:	e004      	b.n	80100fc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80100f2:	6839      	ldr	r1, [r7, #0]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fc4c 	bl	8010992 <USBD_CtlError>
    break;
 80100fa:	bf00      	nop
  }

  return ret;
 80100fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop

08010108 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801011e:	2b20      	cmp	r3, #32
 8010120:	d003      	beq.n	801012a <USBD_StdItfReq+0x22>
 8010122:	2b40      	cmp	r3, #64	; 0x40
 8010124:	d001      	beq.n	801012a <USBD_StdItfReq+0x22>
 8010126:	2b00      	cmp	r3, #0
 8010128:	d12a      	bne.n	8010180 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010130:	3b01      	subs	r3, #1
 8010132:	2b02      	cmp	r3, #2
 8010134:	d81d      	bhi.n	8010172 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	889b      	ldrh	r3, [r3, #4]
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b01      	cmp	r3, #1
 801013e:	d813      	bhi.n	8010168 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	6839      	ldr	r1, [r7, #0]
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	4798      	blx	r3
 801014e:	4603      	mov	r3, r0
 8010150:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	88db      	ldrh	r3, [r3, #6]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d110      	bne.n	801017c <USBD_StdItfReq+0x74>
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10d      	bne.n	801017c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fcdf 	bl	8010b24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010166:	e009      	b.n	801017c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fc11 	bl	8010992 <USBD_CtlError>
      break;
 8010170:	e004      	b.n	801017c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010172:	6839      	ldr	r1, [r7, #0]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fc0c 	bl	8010992 <USBD_CtlError>
      break;
 801017a:	e000      	b.n	801017e <USBD_StdItfReq+0x76>
      break;
 801017c:	bf00      	nop
    }
    break;
 801017e:	e004      	b.n	801018a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fc05 	bl	8010992 <USBD_CtlError>
    break;
 8010188:	bf00      	nop
  }

  return USBD_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	889b      	ldrh	r3, [r3, #4]
 80101a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101b0:	2b20      	cmp	r3, #32
 80101b2:	d004      	beq.n	80101be <USBD_StdEPReq+0x2a>
 80101b4:	2b40      	cmp	r3, #64	; 0x40
 80101b6:	d002      	beq.n	80101be <USBD_StdEPReq+0x2a>
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d008      	beq.n	80101ce <USBD_StdEPReq+0x3a>
 80101bc:	e13b      	b.n	8010436 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	4798      	blx	r3
    break;
 80101cc:	e138      	b.n	8010440 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101d6:	2b20      	cmp	r3, #32
 80101d8:	d10a      	bne.n	80101f0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	6839      	ldr	r1, [r7, #0]
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	4798      	blx	r3
 80101e8:	4603      	mov	r3, r0
 80101ea:	73fb      	strb	r3, [r7, #15]

      return ret;
 80101ec:	7bfb      	ldrb	r3, [r7, #15]
 80101ee:	e128      	b.n	8010442 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	785b      	ldrb	r3, [r3, #1]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d03e      	beq.n	8010276 <USBD_StdEPReq+0xe2>
 80101f8:	2b03      	cmp	r3, #3
 80101fa:	d002      	beq.n	8010202 <USBD_StdEPReq+0x6e>
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d070      	beq.n	80102e2 <USBD_StdEPReq+0x14e>
 8010200:	e113      	b.n	801042a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010208:	2b02      	cmp	r3, #2
 801020a:	d002      	beq.n	8010212 <USBD_StdEPReq+0x7e>
 801020c:	2b03      	cmp	r3, #3
 801020e:	d015      	beq.n	801023c <USBD_StdEPReq+0xa8>
 8010210:	e02b      	b.n	801026a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010212:	7bbb      	ldrb	r3, [r7, #14]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00c      	beq.n	8010232 <USBD_StdEPReq+0x9e>
 8010218:	7bbb      	ldrb	r3, [r7, #14]
 801021a:	2b80      	cmp	r3, #128	; 0x80
 801021c:	d009      	beq.n	8010232 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 801021e:	7bbb      	ldrb	r3, [r7, #14]
 8010220:	4619      	mov	r1, r3
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f004 fbfa 	bl	8014a1c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010228:	2180      	movs	r1, #128	; 0x80
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f004 fbf6 	bl	8014a1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010230:	e020      	b.n	8010274 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fbac 	bl	8010992 <USBD_CtlError>
        break;
 801023a:	e01b      	b.n	8010274 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	885b      	ldrh	r3, [r3, #2]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d10e      	bne.n	8010262 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010244:	7bbb      	ldrb	r3, [r7, #14]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00b      	beq.n	8010262 <USBD_StdEPReq+0xce>
 801024a:	7bbb      	ldrb	r3, [r7, #14]
 801024c:	2b80      	cmp	r3, #128	; 0x80
 801024e:	d008      	beq.n	8010262 <USBD_StdEPReq+0xce>
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	88db      	ldrh	r3, [r3, #6]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d104      	bne.n	8010262 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010258:	7bbb      	ldrb	r3, [r7, #14]
 801025a:	4619      	mov	r1, r3
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f004 fbdd 	bl	8014a1c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 fc5e 	bl	8010b24 <USBD_CtlSendStatus>

        break;
 8010268:	e004      	b.n	8010274 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 fb90 	bl	8010992 <USBD_CtlError>
        break;
 8010272:	bf00      	nop
      }
      break;
 8010274:	e0de      	b.n	8010434 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801027c:	2b02      	cmp	r3, #2
 801027e:	d002      	beq.n	8010286 <USBD_StdEPReq+0xf2>
 8010280:	2b03      	cmp	r3, #3
 8010282:	d015      	beq.n	80102b0 <USBD_StdEPReq+0x11c>
 8010284:	e026      	b.n	80102d4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010286:	7bbb      	ldrb	r3, [r7, #14]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00c      	beq.n	80102a6 <USBD_StdEPReq+0x112>
 801028c:	7bbb      	ldrb	r3, [r7, #14]
 801028e:	2b80      	cmp	r3, #128	; 0x80
 8010290:	d009      	beq.n	80102a6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010292:	7bbb      	ldrb	r3, [r7, #14]
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f004 fbc0 	bl	8014a1c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 801029c:	2180      	movs	r1, #128	; 0x80
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f004 fbbc 	bl	8014a1c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80102a4:	e01c      	b.n	80102e0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 fb72 	bl	8010992 <USBD_CtlError>
        break;
 80102ae:	e017      	b.n	80102e0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	885b      	ldrh	r3, [r3, #2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d112      	bne.n	80102de <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80102b8:	7bbb      	ldrb	r3, [r7, #14]
 80102ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d004      	beq.n	80102cc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80102c2:	7bbb      	ldrb	r3, [r7, #14]
 80102c4:	4619      	mov	r1, r3
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f004 fbc7 	bl	8014a5a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 fc29 	bl	8010b24 <USBD_CtlSendStatus>
        }
        break;
 80102d2:	e004      	b.n	80102de <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80102d4:	6839      	ldr	r1, [r7, #0]
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 fb5b 	bl	8010992 <USBD_CtlError>
        break;
 80102dc:	e000      	b.n	80102e0 <USBD_StdEPReq+0x14c>
        break;
 80102de:	bf00      	nop
      }
      break;
 80102e0:	e0a8      	b.n	8010434 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d002      	beq.n	80102f2 <USBD_StdEPReq+0x15e>
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	d031      	beq.n	8010354 <USBD_StdEPReq+0x1c0>
 80102f0:	e095      	b.n	801041e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102f2:	7bbb      	ldrb	r3, [r7, #14]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d007      	beq.n	8010308 <USBD_StdEPReq+0x174>
 80102f8:	7bbb      	ldrb	r3, [r7, #14]
 80102fa:	2b80      	cmp	r3, #128	; 0x80
 80102fc:	d004      	beq.n	8010308 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80102fe:	6839      	ldr	r1, [r7, #0]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 fb46 	bl	8010992 <USBD_CtlError>
          break;
 8010306:	e08f      	b.n	8010428 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801030c:	2b00      	cmp	r3, #0
 801030e:	da0b      	bge.n	8010328 <USBD_StdEPReq+0x194>
 8010310:	7bbb      	ldrb	r3, [r7, #14]
 8010312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010316:	4613      	mov	r3, r2
 8010318:	009b      	lsls	r3, r3, #2
 801031a:	4413      	add	r3, r2
 801031c:	009b      	lsls	r3, r3, #2
 801031e:	3310      	adds	r3, #16
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	4413      	add	r3, r2
 8010324:	3304      	adds	r3, #4
 8010326:	e00a      	b.n	801033e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010328:	7bbb      	ldrb	r3, [r7, #14]
 801032a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801032e:	4613      	mov	r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	4413      	add	r3, r2
 801033e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	2200      	movs	r2, #0
 8010344:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2202      	movs	r2, #2
 801034a:	4619      	mov	r1, r3
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 fb8b 	bl	8010a68 <USBD_CtlSendData>
          break;
 8010352:	e069      	b.n	8010428 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010358:	2b00      	cmp	r3, #0
 801035a:	da11      	bge.n	8010380 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801035c:	7bbb      	ldrb	r3, [r7, #14]
 801035e:	f003 020f 	and.w	r2, r3, #15
 8010362:	6879      	ldr	r1, [r7, #4]
 8010364:	4613      	mov	r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	4413      	add	r3, r2
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	440b      	add	r3, r1
 801036e:	3318      	adds	r3, #24
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d117      	bne.n	80103a6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 fb0a 	bl	8010992 <USBD_CtlError>
            break;
 801037e:	e053      	b.n	8010428 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010380:	7bbb      	ldrb	r3, [r7, #14]
 8010382:	f003 020f 	and.w	r2, r3, #15
 8010386:	6879      	ldr	r1, [r7, #4]
 8010388:	4613      	mov	r3, r2
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	4413      	add	r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	440b      	add	r3, r1
 8010392:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d104      	bne.n	80103a6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801039c:	6839      	ldr	r1, [r7, #0]
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 faf7 	bl	8010992 <USBD_CtlError>
            break;
 80103a4:	e040      	b.n	8010428 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80103a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	da0b      	bge.n	80103c6 <USBD_StdEPReq+0x232>
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
 80103b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103b4:	4613      	mov	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	4413      	add	r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	3310      	adds	r3, #16
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	4413      	add	r3, r2
 80103c2:	3304      	adds	r3, #4
 80103c4:	e00a      	b.n	80103dc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80103c6:	7bbb      	ldrb	r3, [r7, #14]
 80103c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80103cc:	4613      	mov	r3, r2
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	4413      	add	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	4413      	add	r3, r2
 80103dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80103de:	7bbb      	ldrb	r3, [r7, #14]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <USBD_StdEPReq+0x256>
 80103e4:	7bbb      	ldrb	r3, [r7, #14]
 80103e6:	2b80      	cmp	r3, #128	; 0x80
 80103e8:	d103      	bne.n	80103f2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]
 80103f0:	e00e      	b.n	8010410 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80103f2:	7bbb      	ldrb	r3, [r7, #14]
 80103f4:	4619      	mov	r1, r3
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f004 fb4e 	bl	8014a98 <USBD_LL_IsStallEP>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d003      	beq.n	801040a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2201      	movs	r2, #1
 8010406:	601a      	str	r2, [r3, #0]
 8010408:	e002      	b.n	8010410 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	2202      	movs	r2, #2
 8010414:	4619      	mov	r1, r3
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fb26 	bl	8010a68 <USBD_CtlSendData>
          break;
 801041c:	e004      	b.n	8010428 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 801041e:	6839      	ldr	r1, [r7, #0]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f000 fab6 	bl	8010992 <USBD_CtlError>
        break;
 8010426:	bf00      	nop
      }
      break;
 8010428:	e004      	b.n	8010434 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 801042a:	6839      	ldr	r1, [r7, #0]
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 fab0 	bl	8010992 <USBD_CtlError>
      break;
 8010432:	bf00      	nop
    }
    break;
 8010434:	e004      	b.n	8010440 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 faaa 	bl	8010992 <USBD_CtlError>
    break;
 801043e:	bf00      	nop
  }

  return ret;
 8010440:	7bfb      	ldrb	r3, [r7, #15]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
	...

0801044c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	885b      	ldrh	r3, [r3, #2]
 801045a:	0a1b      	lsrs	r3, r3, #8
 801045c:	b29b      	uxth	r3, r3
 801045e:	3b01      	subs	r3, #1
 8010460:	2b06      	cmp	r3, #6
 8010462:	f200 80c9 	bhi.w	80105f8 <USBD_GetDescriptor+0x1ac>
 8010466:	a201      	add	r2, pc, #4	; (adr r2, 801046c <USBD_GetDescriptor+0x20>)
 8010468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801046c:	08010489 	.word	0x08010489
 8010470:	080104a1 	.word	0x080104a1
 8010474:	080104e1 	.word	0x080104e1
 8010478:	080105f9 	.word	0x080105f9
 801047c:	080105f9 	.word	0x080105f9
 8010480:	080105a5 	.word	0x080105a5
 8010484:	080105cb 	.word	0x080105cb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	7c12      	ldrb	r2, [r2, #16]
 8010494:	f107 010a 	add.w	r1, r7, #10
 8010498:	4610      	mov	r0, r2
 801049a:	4798      	blx	r3
 801049c:	60f8      	str	r0, [r7, #12]
    break;
 801049e:	e0b0      	b.n	8010602 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	7c1b      	ldrb	r3, [r3, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10d      	bne.n	80104c4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b0:	f107 020a 	add.w	r2, r7, #10
 80104b4:	4610      	mov	r0, r2
 80104b6:	4798      	blx	r3
 80104b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3301      	adds	r3, #1
 80104be:	2202      	movs	r2, #2
 80104c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80104c2:	e09e      	b.n	8010602 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80104ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104cc:	f107 020a 	add.w	r2, r7, #10
 80104d0:	4610      	mov	r0, r2
 80104d2:	4798      	blx	r3
 80104d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	3301      	adds	r3, #1
 80104da:	2202      	movs	r2, #2
 80104dc:	701a      	strb	r2, [r3, #0]
    break;
 80104de:	e090      	b.n	8010602 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	885b      	ldrh	r3, [r3, #2]
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	2b05      	cmp	r3, #5
 80104e8:	d856      	bhi.n	8010598 <USBD_GetDescriptor+0x14c>
 80104ea:	a201      	add	r2, pc, #4	; (adr r2, 80104f0 <USBD_GetDescriptor+0xa4>)
 80104ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f0:	08010509 	.word	0x08010509
 80104f4:	08010521 	.word	0x08010521
 80104f8:	08010539 	.word	0x08010539
 80104fc:	08010551 	.word	0x08010551
 8010500:	08010569 	.word	0x08010569
 8010504:	08010581 	.word	0x08010581
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	7c12      	ldrb	r2, [r2, #16]
 8010514:	f107 010a 	add.w	r1, r7, #10
 8010518:	4610      	mov	r0, r2
 801051a:	4798      	blx	r3
 801051c:	60f8      	str	r0, [r7, #12]
      break;
 801051e:	e040      	b.n	80105a2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	7c12      	ldrb	r2, [r2, #16]
 801052c:	f107 010a 	add.w	r1, r7, #10
 8010530:	4610      	mov	r0, r2
 8010532:	4798      	blx	r3
 8010534:	60f8      	str	r0, [r7, #12]
      break;
 8010536:	e034      	b.n	80105a2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	7c12      	ldrb	r2, [r2, #16]
 8010544:	f107 010a 	add.w	r1, r7, #10
 8010548:	4610      	mov	r0, r2
 801054a:	4798      	blx	r3
 801054c:	60f8      	str	r0, [r7, #12]
      break;
 801054e:	e028      	b.n	80105a2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010556:	691b      	ldr	r3, [r3, #16]
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	7c12      	ldrb	r2, [r2, #16]
 801055c:	f107 010a 	add.w	r1, r7, #10
 8010560:	4610      	mov	r0, r2
 8010562:	4798      	blx	r3
 8010564:	60f8      	str	r0, [r7, #12]
      break;
 8010566:	e01c      	b.n	80105a2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	7c12      	ldrb	r2, [r2, #16]
 8010574:	f107 010a 	add.w	r1, r7, #10
 8010578:	4610      	mov	r0, r2
 801057a:	4798      	blx	r3
 801057c:	60f8      	str	r0, [r7, #12]
      break;
 801057e:	e010      	b.n	80105a2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010586:	699b      	ldr	r3, [r3, #24]
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	7c12      	ldrb	r2, [r2, #16]
 801058c:	f107 010a 	add.w	r1, r7, #10
 8010590:	4610      	mov	r0, r2
 8010592:	4798      	blx	r3
 8010594:	60f8      	str	r0, [r7, #12]
      break;
 8010596:	e004      	b.n	80105a2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010598:	6839      	ldr	r1, [r7, #0]
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f9f9 	bl	8010992 <USBD_CtlError>
      return;
 80105a0:	e04b      	b.n	801063a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80105a2:	e02e      	b.n	8010602 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7c1b      	ldrb	r3, [r3, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d109      	bne.n	80105c0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b4:	f107 020a 	add.w	r2, r7, #10
 80105b8:	4610      	mov	r0, r2
 80105ba:	4798      	blx	r3
 80105bc:	60f8      	str	r0, [r7, #12]
      break;
 80105be:	e020      	b.n	8010602 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80105c0:	6839      	ldr	r1, [r7, #0]
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f9e5 	bl	8010992 <USBD_CtlError>
      return;
 80105c8:	e037      	b.n	801063a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	7c1b      	ldrb	r3, [r3, #16]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d10d      	bne.n	80105ee <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105da:	f107 020a 	add.w	r2, r7, #10
 80105de:	4610      	mov	r0, r2
 80105e0:	4798      	blx	r3
 80105e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3301      	adds	r3, #1
 80105e8:	2207      	movs	r2, #7
 80105ea:	701a      	strb	r2, [r3, #0]
      break;
 80105ec:	e009      	b.n	8010602 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80105ee:	6839      	ldr	r1, [r7, #0]
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f9ce 	bl	8010992 <USBD_CtlError>
      return;
 80105f6:	e020      	b.n	801063a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80105f8:	6839      	ldr	r1, [r7, #0]
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f9c9 	bl	8010992 <USBD_CtlError>
    return;
 8010600:	e01b      	b.n	801063a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010602:	897b      	ldrh	r3, [r7, #10]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d011      	beq.n	801062c <USBD_GetDescriptor+0x1e0>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	88db      	ldrh	r3, [r3, #6]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00d      	beq.n	801062c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	88da      	ldrh	r2, [r3, #6]
 8010614:	897b      	ldrh	r3, [r7, #10]
 8010616:	4293      	cmp	r3, r2
 8010618:	bf28      	it	cs
 801061a:	4613      	movcs	r3, r2
 801061c:	b29b      	uxth	r3, r3
 801061e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010620:	897b      	ldrh	r3, [r7, #10]
 8010622:	461a      	mov	r2, r3
 8010624:	68f9      	ldr	r1, [r7, #12]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f000 fa1e 	bl	8010a68 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	88db      	ldrh	r3, [r3, #6]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d102      	bne.n	801063a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fa75 	bl	8010b24 <USBD_CtlSendStatus>
  }
}
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	889b      	ldrh	r3, [r3, #4]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d130      	bne.n	80106b4 <USBD_SetAddress+0x74>
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	88db      	ldrh	r3, [r3, #6]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d12c      	bne.n	80106b4 <USBD_SetAddress+0x74>
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	885b      	ldrh	r3, [r3, #2]
 801065e:	2b7f      	cmp	r3, #127	; 0x7f
 8010660:	d828      	bhi.n	80106b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	885b      	ldrh	r3, [r3, #2]
 8010666:	b2db      	uxtb	r3, r3
 8010668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801066c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010674:	2b03      	cmp	r3, #3
 8010676:	d104      	bne.n	8010682 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f989 	bl	8010992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010680:	e01c      	b.n	80106bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	7bfa      	ldrb	r2, [r7, #15]
 8010686:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	4619      	mov	r1, r3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f004 fa2e 	bl	8014af0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 fa45 	bl	8010b24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801069a:	7bfb      	ldrb	r3, [r7, #15]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2202      	movs	r2, #2
 80106a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106a8:	e008      	b.n	80106bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2201      	movs	r2, #1
 80106ae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106b2:	e003      	b.n	80106bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 f96b 	bl	8010992 <USBD_CtlError>
  }
}
 80106bc:	bf00      	nop
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	885b      	ldrh	r3, [r3, #2]
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b41      	ldr	r3, [pc, #260]	; (80107dc <USBD_SetConfig+0x118>)
 80106d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80106d8:	4b40      	ldr	r3, [pc, #256]	; (80107dc <USBD_SetConfig+0x118>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d904      	bls.n	80106ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80106e0:	6839      	ldr	r1, [r7, #0]
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 f955 	bl	8010992 <USBD_CtlError>
 80106e8:	e075      	b.n	80107d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d002      	beq.n	80106fa <USBD_SetConfig+0x36>
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	d023      	beq.n	8010740 <USBD_SetConfig+0x7c>
 80106f8:	e062      	b.n	80107c0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80106fa:	4b38      	ldr	r3, [pc, #224]	; (80107dc <USBD_SetConfig+0x118>)
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d01a      	beq.n	8010738 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010702:	4b36      	ldr	r3, [pc, #216]	; (80107dc <USBD_SetConfig+0x118>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2203      	movs	r2, #3
 8010710:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010714:	4b31      	ldr	r3, [pc, #196]	; (80107dc <USBD_SetConfig+0x118>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	4619      	mov	r1, r3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7ff fa2a 	bl	800fb74 <USBD_SetClassConfig>
 8010720:	4603      	mov	r3, r0
 8010722:	2b02      	cmp	r3, #2
 8010724:	d104      	bne.n	8010730 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010726:	6839      	ldr	r1, [r7, #0]
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f000 f932 	bl	8010992 <USBD_CtlError>
          return;
 801072e:	e052      	b.n	80107d6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 f9f7 	bl	8010b24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010736:	e04e      	b.n	80107d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 f9f3 	bl	8010b24 <USBD_CtlSendStatus>
      break;
 801073e:	e04a      	b.n	80107d6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010740:	4b26      	ldr	r3, [pc, #152]	; (80107dc <USBD_SetConfig+0x118>)
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d112      	bne.n	801076e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2202      	movs	r2, #2
 801074c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010750:	4b22      	ldr	r3, [pc, #136]	; (80107dc <USBD_SetConfig+0x118>)
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	461a      	mov	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801075a:	4b20      	ldr	r3, [pc, #128]	; (80107dc <USBD_SetConfig+0x118>)
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	4619      	mov	r1, r3
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7ff fa26 	bl	800fbb2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f9dc 	bl	8010b24 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 801076c:	e033      	b.n	80107d6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 801076e:	4b1b      	ldr	r3, [pc, #108]	; (80107dc <USBD_SetConfig+0x118>)
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	461a      	mov	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	429a      	cmp	r2, r3
 801077a:	d01d      	beq.n	80107b8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	b2db      	uxtb	r3, r3
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff fa14 	bl	800fbb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801078a:	4b14      	ldr	r3, [pc, #80]	; (80107dc <USBD_SetConfig+0x118>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	461a      	mov	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010794:	4b11      	ldr	r3, [pc, #68]	; (80107dc <USBD_SetConfig+0x118>)
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7ff f9ea 	bl	800fb74 <USBD_SetClassConfig>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d104      	bne.n	80107b0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80107a6:	6839      	ldr	r1, [r7, #0]
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 f8f2 	bl	8010992 <USBD_CtlError>
          return;
 80107ae:	e012      	b.n	80107d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 f9b7 	bl	8010b24 <USBD_CtlSendStatus>
      break;
 80107b6:	e00e      	b.n	80107d6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 f9b3 	bl	8010b24 <USBD_CtlSendStatus>
      break;
 80107be:	e00a      	b.n	80107d6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80107c0:	6839      	ldr	r1, [r7, #0]
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 f8e5 	bl	8010992 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80107c8:	4b04      	ldr	r3, [pc, #16]	; (80107dc <USBD_SetConfig+0x118>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	4619      	mov	r1, r3
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7ff f9ef 	bl	800fbb2 <USBD_ClrClassConfig>
      break;
 80107d4:	bf00      	nop
    }
  }
}
 80107d6:	3708      	adds	r7, #8
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	20000de4 	.word	0x20000de4

080107e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	88db      	ldrh	r3, [r3, #6]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d004      	beq.n	80107fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f8cc 	bl	8010992 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80107fa:	e021      	b.n	8010840 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010802:	2b01      	cmp	r3, #1
 8010804:	db17      	blt.n	8010836 <USBD_GetConfig+0x56>
 8010806:	2b02      	cmp	r3, #2
 8010808:	dd02      	ble.n	8010810 <USBD_GetConfig+0x30>
 801080a:	2b03      	cmp	r3, #3
 801080c:	d00b      	beq.n	8010826 <USBD_GetConfig+0x46>
 801080e:	e012      	b.n	8010836 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	3308      	adds	r3, #8
 801081a:	2201      	movs	r2, #1
 801081c:	4619      	mov	r1, r3
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f000 f922 	bl	8010a68 <USBD_CtlSendData>
      break;
 8010824:	e00c      	b.n	8010840 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	3304      	adds	r3, #4
 801082a:	2201      	movs	r2, #1
 801082c:	4619      	mov	r1, r3
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f91a 	bl	8010a68 <USBD_CtlSendData>
      break;
 8010834:	e004      	b.n	8010840 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8010836:	6839      	ldr	r1, [r7, #0]
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f000 f8aa 	bl	8010992 <USBD_CtlError>
      break;
 801083e:	bf00      	nop
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010858:	3b01      	subs	r3, #1
 801085a:	2b02      	cmp	r3, #2
 801085c:	d81e      	bhi.n	801089c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	88db      	ldrh	r3, [r3, #6]
 8010862:	2b02      	cmp	r3, #2
 8010864:	d004      	beq.n	8010870 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8010866:	6839      	ldr	r1, [r7, #0]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f892 	bl	8010992 <USBD_CtlError>
      break;
 801086e:	e01a      	b.n	80108a6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2201      	movs	r2, #1
 8010874:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d005      	beq.n	801088c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	f043 0202 	orr.w	r2, r3, #2
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	330c      	adds	r3, #12
 8010890:	2202      	movs	r2, #2
 8010892:	4619      	mov	r1, r3
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 f8e7 	bl	8010a68 <USBD_CtlSendData>
    break;
 801089a:	e004      	b.n	80108a6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 801089c:	6839      	ldr	r1, [r7, #0]
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f000 f877 	bl	8010992 <USBD_CtlError>
    break;
 80108a4:	bf00      	nop
  }
}
 80108a6:	bf00      	nop
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	885b      	ldrh	r3, [r3, #2]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d106      	bne.n	80108ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 f92b 	bl	8010b24 <USBD_CtlSendStatus>
  }

}
 80108ce:	bf00      	nop
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b082      	sub	sp, #8
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
 80108de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80108e6:	3b01      	subs	r3, #1
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d80b      	bhi.n	8010904 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	885b      	ldrh	r3, [r3, #2]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d10c      	bne.n	801090e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 f911 	bl	8010b24 <USBD_CtlSendStatus>
    }
    break;
 8010902:	e004      	b.n	801090e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f843 	bl	8010992 <USBD_CtlError>
    break;
 801090c:	e000      	b.n	8010910 <USBD_ClrFeature+0x3a>
    break;
 801090e:	bf00      	nop
  }
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	781a      	ldrb	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	785a      	ldrb	r2, [r3, #1]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	3302      	adds	r3, #2
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	b29a      	uxth	r2, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	3303      	adds	r3, #3
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	b29b      	uxth	r3, r3
 8010942:	021b      	lsls	r3, r3, #8
 8010944:	b29b      	uxth	r3, r3
 8010946:	4413      	add	r3, r2
 8010948:	b29a      	uxth	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	3304      	adds	r3, #4
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	b29a      	uxth	r2, r3
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	3305      	adds	r3, #5
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	b29b      	uxth	r3, r3
 801095e:	021b      	lsls	r3, r3, #8
 8010960:	b29b      	uxth	r3, r3
 8010962:	4413      	add	r3, r2
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	3306      	adds	r3, #6
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	b29a      	uxth	r2, r3
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	3307      	adds	r3, #7
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	b29b      	uxth	r3, r3
 801097a:	021b      	lsls	r3, r3, #8
 801097c:	b29b      	uxth	r3, r3
 801097e:	4413      	add	r3, r2
 8010980:	b29a      	uxth	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	80da      	strh	r2, [r3, #6]

}
 8010986:	bf00      	nop
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr

08010992 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010992:	b580      	push	{r7, lr}
 8010994:	b082      	sub	sp, #8
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
 801099a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 801099c:	2180      	movs	r1, #128	; 0x80
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f004 f83c 	bl	8014a1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80109a4:	2100      	movs	r1, #0
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f004 f838 	bl	8014a1c <USBD_LL_StallEP>
}
 80109ac:	bf00      	nop
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b086      	sub	sp, #24
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80109c0:	2300      	movs	r3, #0
 80109c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d032      	beq.n	8010a30 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 f834 	bl	8010a38 <USBD_GetLen>
 80109d0:	4603      	mov	r3, r0
 80109d2:	3301      	adds	r3, #1
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	b29a      	uxth	r2, r3
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80109de:	7dfb      	ldrb	r3, [r7, #23]
 80109e0:	1c5a      	adds	r2, r3, #1
 80109e2:	75fa      	strb	r2, [r7, #23]
 80109e4:	461a      	mov	r2, r3
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	4413      	add	r3, r2
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	7812      	ldrb	r2, [r2, #0]
 80109ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80109f0:	7dfb      	ldrb	r3, [r7, #23]
 80109f2:	1c5a      	adds	r2, r3, #1
 80109f4:	75fa      	strb	r2, [r7, #23]
 80109f6:	461a      	mov	r2, r3
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	4413      	add	r3, r2
 80109fc:	2203      	movs	r2, #3
 80109fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010a00:	e012      	b.n	8010a28 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	1c5a      	adds	r2, r3, #1
 8010a06:	60fa      	str	r2, [r7, #12]
 8010a08:	7dfa      	ldrb	r2, [r7, #23]
 8010a0a:	1c51      	adds	r1, r2, #1
 8010a0c:	75f9      	strb	r1, [r7, #23]
 8010a0e:	4611      	mov	r1, r2
 8010a10:	68ba      	ldr	r2, [r7, #8]
 8010a12:	440a      	add	r2, r1
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	75fa      	strb	r2, [r7, #23]
 8010a1e:	461a      	mov	r2, r3
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	4413      	add	r3, r2
 8010a24:	2200      	movs	r2, #0
 8010a26:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1e8      	bne.n	8010a02 <USBD_GetString+0x4e>
    }
  }
}
 8010a30:	bf00      	nop
 8010a32:	3718      	adds	r7, #24
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b085      	sub	sp, #20
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8010a44:	e005      	b.n	8010a52 <USBD_GetLen+0x1a>
    {
        len++;
 8010a46:	7bfb      	ldrb	r3, [r7, #15]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1f5      	bne.n	8010a46 <USBD_GetLen+0xe>
    }

    return len;
 8010a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3714      	adds	r7, #20
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	4613      	mov	r3, r2
 8010a74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2202      	movs	r2, #2
 8010a7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8010a7e:	88fa      	ldrh	r2, [r7, #6]
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010a84:	88fa      	ldrh	r2, [r7, #6]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010a8a:	88fb      	ldrh	r3, [r7, #6]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	2100      	movs	r1, #0
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f004 f84c 	bl	8014b2e <USBD_LL_Transmit>

  return USBD_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	4613      	mov	r3, r2
 8010aac:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8010aae:	88fb      	ldrh	r3, [r7, #6]
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f004 f83a 	bl	8014b2e <USBD_LL_Transmit>

  return USBD_OK;
 8010aba:	2300      	movs	r3, #0
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3710      	adds	r7, #16
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2203      	movs	r2, #3
 8010ad6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8010ada:	88fa      	ldrh	r2, [r7, #6]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8010ae2:	88fa      	ldrh	r2, [r7, #6]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8010aea:	88fb      	ldrh	r3, [r7, #6]
 8010aec:	68ba      	ldr	r2, [r7, #8]
 8010aee:	2100      	movs	r1, #0
 8010af0:	68f8      	ldr	r0, [r7, #12]
 8010af2:	f004 f83f 	bl	8014b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010b0e:	88fb      	ldrh	r3, [r7, #6]
 8010b10:	68ba      	ldr	r2, [r7, #8]
 8010b12:	2100      	movs	r1, #0
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f004 f82d 	bl	8014b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2204      	movs	r2, #4
 8010b30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010b34:	2300      	movs	r3, #0
 8010b36:	2200      	movs	r2, #0
 8010b38:	2100      	movs	r1, #0
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f003 fff7 	bl	8014b2e <USBD_LL_Transmit>

  return USBD_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b082      	sub	sp, #8
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2205      	movs	r2, #5
 8010b56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2100      	movs	r1, #0
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f004 f807 	bl	8014b74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b66:	2300      	movs	r3, #0
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	4603      	mov	r3, r0
 8010b78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010b7a:	79fb      	ldrb	r3, [r7, #7]
 8010b7c:	4a08      	ldr	r2, [pc, #32]	; (8010ba0 <disk_status+0x30>)
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4413      	add	r3, r2
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	79fa      	ldrb	r2, [r7, #7]
 8010b88:	4905      	ldr	r1, [pc, #20]	; (8010ba0 <disk_status+0x30>)
 8010b8a:	440a      	add	r2, r1
 8010b8c:	7a12      	ldrb	r2, [r2, #8]
 8010b8e:	4610      	mov	r0, r2
 8010b90:	4798      	blx	r3
 8010b92:	4603      	mov	r3, r0
 8010b94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20000e10 	.word	0x20000e10

08010ba4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	4603      	mov	r3, r0
 8010bac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	4a0d      	ldr	r2, [pc, #52]	; (8010bec <disk_initialize+0x48>)
 8010bb6:	5cd3      	ldrb	r3, [r2, r3]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d111      	bne.n	8010be0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010bbc:	79fb      	ldrb	r3, [r7, #7]
 8010bbe:	4a0b      	ldr	r2, [pc, #44]	; (8010bec <disk_initialize+0x48>)
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010bc4:	79fb      	ldrb	r3, [r7, #7]
 8010bc6:	4a09      	ldr	r2, [pc, #36]	; (8010bec <disk_initialize+0x48>)
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4413      	add	r3, r2
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	79fa      	ldrb	r2, [r7, #7]
 8010bd2:	4906      	ldr	r1, [pc, #24]	; (8010bec <disk_initialize+0x48>)
 8010bd4:	440a      	add	r2, r1
 8010bd6:	7a12      	ldrb	r2, [r2, #8]
 8010bd8:	4610      	mov	r0, r2
 8010bda:	4798      	blx	r3
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	20000e10 	.word	0x20000e10

08010bf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b087      	sub	sp, #28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60b9      	str	r1, [r7, #8]
 8010bf8:	607a      	str	r2, [r7, #4]
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	4a0a      	ldr	r2, [pc, #40]	; (8010c2c <disk_read+0x3c>)
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	689c      	ldr	r4, [r3, #8]
 8010c0c:	7bfb      	ldrb	r3, [r7, #15]
 8010c0e:	4a07      	ldr	r2, [pc, #28]	; (8010c2c <disk_read+0x3c>)
 8010c10:	4413      	add	r3, r2
 8010c12:	7a18      	ldrb	r0, [r3, #8]
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	68b9      	ldr	r1, [r7, #8]
 8010c1a:	47a0      	blx	r4
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	371c      	adds	r7, #28
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd90      	pop	{r4, r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	20000e10 	.word	0x20000e10

08010c30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010c30:	b590      	push	{r4, r7, lr}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60b9      	str	r1, [r7, #8]
 8010c38:	607a      	str	r2, [r7, #4]
 8010c3a:	603b      	str	r3, [r7, #0]
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	4a0a      	ldr	r2, [pc, #40]	; (8010c6c <disk_write+0x3c>)
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4413      	add	r3, r2
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	68dc      	ldr	r4, [r3, #12]
 8010c4c:	7bfb      	ldrb	r3, [r7, #15]
 8010c4e:	4a07      	ldr	r2, [pc, #28]	; (8010c6c <disk_write+0x3c>)
 8010c50:	4413      	add	r3, r2
 8010c52:	7a18      	ldrb	r0, [r3, #8]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	68b9      	ldr	r1, [r7, #8]
 8010c5a:	47a0      	blx	r4
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	371c      	adds	r7, #28
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd90      	pop	{r4, r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	20000e10 	.word	0x20000e10

08010c70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	603a      	str	r2, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	4a09      	ldr	r2, [pc, #36]	; (8010ca8 <disk_ioctl+0x38>)
 8010c84:	009b      	lsls	r3, r3, #2
 8010c86:	4413      	add	r3, r2
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	79fa      	ldrb	r2, [r7, #7]
 8010c8e:	4906      	ldr	r1, [pc, #24]	; (8010ca8 <disk_ioctl+0x38>)
 8010c90:	440a      	add	r2, r1
 8010c92:	7a10      	ldrb	r0, [r2, #8]
 8010c94:	79b9      	ldrb	r1, [r7, #6]
 8010c96:	683a      	ldr	r2, [r7, #0]
 8010c98:	4798      	blx	r3
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8010c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3710      	adds	r7, #16
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20000e10 	.word	0x20000e10

08010cac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010cbc:	89fb      	ldrh	r3, [r7, #14]
 8010cbe:	021b      	lsls	r3, r3, #8
 8010cc0:	b21a      	sxth	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	b21b      	sxth	r3, r3
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	b21b      	sxth	r3, r3
 8010ccc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010cce:	89fb      	ldrh	r3, [r7, #14]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3714      	adds	r7, #20
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr

08010cdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b085      	sub	sp, #20
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	3303      	adds	r3, #3
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	021b      	lsls	r3, r3, #8
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	3202      	adds	r2, #2
 8010cf4:	7812      	ldrb	r2, [r2, #0]
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	021b      	lsls	r3, r3, #8
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	3201      	adds	r2, #1
 8010d02:	7812      	ldrb	r2, [r2, #0]
 8010d04:	4313      	orrs	r3, r2
 8010d06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	021b      	lsls	r3, r3, #8
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	7812      	ldrb	r2, [r2, #0]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d14:	68fb      	ldr	r3, [r7, #12]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
	...

08010d24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	e010      	b.n	8010d54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010d32:	4a0d      	ldr	r2, [pc, #52]	; (8010d68 <clear_lock+0x44>)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	011b      	lsls	r3, r3, #4
 8010d38:	4413      	add	r3, r2
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	687a      	ldr	r2, [r7, #4]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d105      	bne.n	8010d4e <clear_lock+0x2a>
 8010d42:	4a09      	ldr	r2, [pc, #36]	; (8010d68 <clear_lock+0x44>)
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	011b      	lsls	r3, r3, #4
 8010d48:	4413      	add	r3, r2
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	3301      	adds	r3, #1
 8010d52:	60fb      	str	r3, [r7, #12]
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	d9eb      	bls.n	8010d32 <clear_lock+0xe>
	}
}
 8010d5a:	bf00      	nop
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	20000df0 	.word	0x20000df0

08010d6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010d74:	2300      	movs	r3, #0
 8010d76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	78db      	ldrb	r3, [r3, #3]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d034      	beq.n	8010dea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	7858      	ldrb	r0, [r3, #1]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010d90:	2301      	movs	r3, #1
 8010d92:	697a      	ldr	r2, [r7, #20]
 8010d94:	f7ff ff4c 	bl	8010c30 <disk_write>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	73fb      	strb	r3, [r7, #15]
 8010da2:	e022      	b.n	8010dea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2200      	movs	r2, #0
 8010da8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dae:	697a      	ldr	r2, [r7, #20]
 8010db0:	1ad2      	subs	r2, r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	69db      	ldr	r3, [r3, #28]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d217      	bcs.n	8010dea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	789b      	ldrb	r3, [r3, #2]
 8010dbe:	613b      	str	r3, [r7, #16]
 8010dc0:	e010      	b.n	8010de4 <sync_window+0x78>
					wsect += fs->fsize;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	69db      	ldr	r3, [r3, #28]
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	4413      	add	r3, r2
 8010dca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	7858      	ldrb	r0, [r3, #1]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	697a      	ldr	r2, [r7, #20]
 8010dda:	f7ff ff29 	bl	8010c30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	3b01      	subs	r3, #1
 8010de2:	613b      	str	r3, [r7, #16]
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d8eb      	bhi.n	8010dc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3718      	adds	r7, #24
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e06:	683a      	ldr	r2, [r7, #0]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d01b      	beq.n	8010e44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff ffad 	bl	8010d6c <sync_window>
 8010e12:	4603      	mov	r3, r0
 8010e14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d113      	bne.n	8010e44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	7858      	ldrb	r0, [r3, #1]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e26:	2301      	movs	r3, #1
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	f7ff fee1 	bl	8010bf0 <disk_read>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d004      	beq.n	8010e3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010e34:	f04f 33ff 	mov.w	r3, #4294967295
 8010e38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	683a      	ldr	r2, [r7, #0]
 8010e42:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010e4e:	b480      	push	{r7}
 8010e50:	b087      	sub	sp, #28
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010e56:	f04f 33ff 	mov.w	r3, #4294967295
 8010e5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d031      	beq.n	8010ec8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	617b      	str	r3, [r7, #20]
 8010e6a:	e002      	b.n	8010e72 <get_ldnumber+0x24>
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	2b20      	cmp	r3, #32
 8010e78:	d903      	bls.n	8010e82 <get_ldnumber+0x34>
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	2b3a      	cmp	r3, #58	; 0x3a
 8010e80:	d1f4      	bne.n	8010e6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	2b3a      	cmp	r3, #58	; 0x3a
 8010e88:	d11c      	bne.n	8010ec4 <get_ldnumber+0x76>
			tp = *path;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	1c5a      	adds	r2, r3, #1
 8010e94:	60fa      	str	r2, [r7, #12]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	3b30      	subs	r3, #48	; 0x30
 8010e9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	2b09      	cmp	r3, #9
 8010ea0:	d80e      	bhi.n	8010ec0 <get_ldnumber+0x72>
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d10a      	bne.n	8010ec0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d107      	bne.n	8010ec0 <get_ldnumber+0x72>
					vol = (int)i;
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	617b      	str	r3, [r7, #20]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	697a      	ldr	r2, [r7, #20]
 8010ebe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ec0:	693b      	ldr	r3, [r7, #16]
 8010ec2:	e002      	b.n	8010eca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ec8:	693b      	ldr	r3, [r7, #16]
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	371c      	adds	r7, #28
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
	...

08010ed8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	70da      	strb	r2, [r3, #3]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f04f 32ff 	mov.w	r2, #4294967295
 8010eee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff ff7e 	bl	8010df4 <move_window>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <check_fs+0x2a>
 8010efe:	2304      	movs	r3, #4
 8010f00:	e038      	b.n	8010f74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	3334      	adds	r3, #52	; 0x34
 8010f06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff fece 	bl	8010cac <ld_word>
 8010f10:	4603      	mov	r3, r0
 8010f12:	461a      	mov	r2, r3
 8010f14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d001      	beq.n	8010f20 <check_fs+0x48>
 8010f1c:	2303      	movs	r3, #3
 8010f1e:	e029      	b.n	8010f74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f26:	2be9      	cmp	r3, #233	; 0xe9
 8010f28:	d009      	beq.n	8010f3e <check_fs+0x66>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f30:	2beb      	cmp	r3, #235	; 0xeb
 8010f32:	d11e      	bne.n	8010f72 <check_fs+0x9a>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010f3a:	2b90      	cmp	r3, #144	; 0x90
 8010f3c:	d119      	bne.n	8010f72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	3334      	adds	r3, #52	; 0x34
 8010f42:	3336      	adds	r3, #54	; 0x36
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fec9 	bl	8010cdc <ld_dword>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010f50:	4a0a      	ldr	r2, [pc, #40]	; (8010f7c <check_fs+0xa4>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d101      	bne.n	8010f5a <check_fs+0x82>
 8010f56:	2300      	movs	r3, #0
 8010f58:	e00c      	b.n	8010f74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	3334      	adds	r3, #52	; 0x34
 8010f5e:	3352      	adds	r3, #82	; 0x52
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7ff febb 	bl	8010cdc <ld_dword>
 8010f66:	4602      	mov	r2, r0
 8010f68:	4b05      	ldr	r3, [pc, #20]	; (8010f80 <check_fs+0xa8>)
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d101      	bne.n	8010f72 <check_fs+0x9a>
 8010f6e:	2300      	movs	r3, #0
 8010f70:	e000      	b.n	8010f74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010f72:	2302      	movs	r3, #2
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	00544146 	.word	0x00544146
 8010f80:	33544146 	.word	0x33544146

08010f84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b096      	sub	sp, #88	; 0x58
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2200      	movs	r2, #0
 8010f96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7ff ff58 	bl	8010e4e <get_ldnumber>
 8010f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	da01      	bge.n	8010faa <find_volume+0x26>
 8010fa6:	230b      	movs	r3, #11
 8010fa8:	e265      	b.n	8011476 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010faa:	4ab0      	ldr	r2, [pc, #704]	; (801126c <find_volume+0x2e8>)
 8010fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d101      	bne.n	8010fbe <find_volume+0x3a>
 8010fba:	230c      	movs	r3, #12
 8010fbc:	e25b      	b.n	8011476 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010fc4:	79fb      	ldrb	r3, [r7, #7]
 8010fc6:	f023 0301 	bic.w	r3, r3, #1
 8010fca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d01a      	beq.n	801100a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd6:	785b      	ldrb	r3, [r3, #1]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff fdc9 	bl	8010b70 <disk_status>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe8:	f003 0301 	and.w	r3, r3, #1
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10c      	bne.n	801100a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010ff0:	79fb      	ldrb	r3, [r7, #7]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d007      	beq.n	8011006 <find_volume+0x82>
 8010ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ffa:	f003 0304 	and.w	r3, r3, #4
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011002:	230a      	movs	r3, #10
 8011004:	e237      	b.n	8011476 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011006:	2300      	movs	r3, #0
 8011008:	e235      	b.n	8011476 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801100a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100c:	2200      	movs	r2, #0
 801100e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011012:	b2da      	uxtb	r2, r3
 8011014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011016:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101a:	785b      	ldrb	r3, [r3, #1]
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff fdc1 	bl	8010ba4 <disk_initialize>
 8011022:	4603      	mov	r3, r0
 8011024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801102c:	f003 0301 	and.w	r3, r3, #1
 8011030:	2b00      	cmp	r3, #0
 8011032:	d001      	beq.n	8011038 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011034:	2303      	movs	r3, #3
 8011036:	e21e      	b.n	8011476 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011038:	79fb      	ldrb	r3, [r7, #7]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d007      	beq.n	801104e <find_volume+0xca>
 801103e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011042:	f003 0304 	and.w	r3, r3, #4
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801104a:	230a      	movs	r3, #10
 801104c:	e213      	b.n	8011476 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011050:	7858      	ldrb	r0, [r3, #1]
 8011052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011054:	330c      	adds	r3, #12
 8011056:	461a      	mov	r2, r3
 8011058:	2102      	movs	r1, #2
 801105a:	f7ff fe09 	bl	8010c70 <disk_ioctl>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d001      	beq.n	8011068 <find_volume+0xe4>
 8011064:	2301      	movs	r3, #1
 8011066:	e206      	b.n	8011476 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106a:	899b      	ldrh	r3, [r3, #12]
 801106c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011070:	d80d      	bhi.n	801108e <find_volume+0x10a>
 8011072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011074:	899b      	ldrh	r3, [r3, #12]
 8011076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801107a:	d308      	bcc.n	801108e <find_volume+0x10a>
 801107c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107e:	899b      	ldrh	r3, [r3, #12]
 8011080:	461a      	mov	r2, r3
 8011082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	3b01      	subs	r3, #1
 8011088:	4013      	ands	r3, r2
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <find_volume+0x10e>
 801108e:	2301      	movs	r3, #1
 8011090:	e1f1      	b.n	8011476 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011092:	2300      	movs	r3, #0
 8011094:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801109a:	f7ff ff1d 	bl	8010ed8 <check_fs>
 801109e:	4603      	mov	r3, r0
 80110a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80110a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d14b      	bne.n	8011144 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110ac:	2300      	movs	r3, #0
 80110ae:	643b      	str	r3, [r7, #64]	; 0x40
 80110b0:	e01f      	b.n	80110f2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80110b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80110b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ba:	011b      	lsls	r3, r3, #4
 80110bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80110c0:	4413      	add	r3, r2
 80110c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80110c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c6:	3304      	adds	r3, #4
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d006      	beq.n	80110dc <find_volume+0x158>
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	3308      	adds	r3, #8
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fe02 	bl	8010cdc <ld_dword>
 80110d8:	4602      	mov	r2, r0
 80110da:	e000      	b.n	80110de <find_volume+0x15a>
 80110dc:	2200      	movs	r2, #0
 80110de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80110e6:	440b      	add	r3, r1
 80110e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80110ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110ee:	3301      	adds	r3, #1
 80110f0:	643b      	str	r3, [r7, #64]	; 0x40
 80110f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	d9dc      	bls.n	80110b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80110f8:	2300      	movs	r3, #0
 80110fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80110fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d002      	beq.n	8011108 <find_volume+0x184>
 8011102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011104:	3b01      	subs	r3, #1
 8011106:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011110:	4413      	add	r3, r2
 8011112:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011116:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801111a:	2b00      	cmp	r3, #0
 801111c:	d005      	beq.n	801112a <find_volume+0x1a6>
 801111e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011120:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011122:	f7ff fed9 	bl	8010ed8 <check_fs>
 8011126:	4603      	mov	r3, r0
 8011128:	e000      	b.n	801112c <find_volume+0x1a8>
 801112a:	2303      	movs	r3, #3
 801112c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011134:	2b01      	cmp	r3, #1
 8011136:	d905      	bls.n	8011144 <find_volume+0x1c0>
 8011138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801113a:	3301      	adds	r3, #1
 801113c:	643b      	str	r3, [r7, #64]	; 0x40
 801113e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011140:	2b03      	cmp	r3, #3
 8011142:	d9e1      	bls.n	8011108 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011148:	2b04      	cmp	r3, #4
 801114a:	d101      	bne.n	8011150 <find_volume+0x1cc>
 801114c:	2301      	movs	r3, #1
 801114e:	e192      	b.n	8011476 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011154:	2b01      	cmp	r3, #1
 8011156:	d901      	bls.n	801115c <find_volume+0x1d8>
 8011158:	230d      	movs	r3, #13
 801115a:	e18c      	b.n	8011476 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	3334      	adds	r3, #52	; 0x34
 8011160:	330b      	adds	r3, #11
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff fda2 	bl	8010cac <ld_word>
 8011168:	4603      	mov	r3, r0
 801116a:	461a      	mov	r2, r3
 801116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116e:	899b      	ldrh	r3, [r3, #12]
 8011170:	429a      	cmp	r2, r3
 8011172:	d001      	beq.n	8011178 <find_volume+0x1f4>
 8011174:	230d      	movs	r3, #13
 8011176:	e17e      	b.n	8011476 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	3334      	adds	r3, #52	; 0x34
 801117c:	3316      	adds	r3, #22
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff fd94 	bl	8010cac <ld_word>
 8011184:	4603      	mov	r3, r0
 8011186:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <find_volume+0x218>
 801118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011190:	3334      	adds	r3, #52	; 0x34
 8011192:	3324      	adds	r3, #36	; 0x24
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fda1 	bl	8010cdc <ld_dword>
 801119a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801119c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111a0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80111a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80111ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ae:	789b      	ldrb	r3, [r3, #2]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d005      	beq.n	80111c0 <find_volume+0x23c>
 80111b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b6:	789b      	ldrb	r3, [r3, #2]
 80111b8:	2b02      	cmp	r3, #2
 80111ba:	d001      	beq.n	80111c0 <find_volume+0x23c>
 80111bc:	230d      	movs	r3, #13
 80111be:	e15a      	b.n	8011476 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80111c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c2:	789b      	ldrb	r3, [r3, #2]
 80111c4:	461a      	mov	r2, r3
 80111c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c8:	fb02 f303 	mul.w	r3, r2, r3
 80111cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	895b      	ldrh	r3, [r3, #10]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d008      	beq.n	80111f4 <find_volume+0x270>
 80111e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e4:	895b      	ldrh	r3, [r3, #10]
 80111e6:	461a      	mov	r2, r3
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	895b      	ldrh	r3, [r3, #10]
 80111ec:	3b01      	subs	r3, #1
 80111ee:	4013      	ands	r3, r2
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d001      	beq.n	80111f8 <find_volume+0x274>
 80111f4:	230d      	movs	r3, #13
 80111f6:	e13e      	b.n	8011476 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	3334      	adds	r3, #52	; 0x34
 80111fc:	3311      	adds	r3, #17
 80111fe:	4618      	mov	r0, r3
 8011200:	f7ff fd54 	bl	8010cac <ld_word>
 8011204:	4603      	mov	r3, r0
 8011206:	461a      	mov	r2, r3
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120e:	891b      	ldrh	r3, [r3, #8]
 8011210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011212:	8992      	ldrh	r2, [r2, #12]
 8011214:	0952      	lsrs	r2, r2, #5
 8011216:	b292      	uxth	r2, r2
 8011218:	fbb3 f1f2 	udiv	r1, r3, r2
 801121c:	fb02 f201 	mul.w	r2, r2, r1
 8011220:	1a9b      	subs	r3, r3, r2
 8011222:	b29b      	uxth	r3, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d001      	beq.n	801122c <find_volume+0x2a8>
 8011228:	230d      	movs	r3, #13
 801122a:	e124      	b.n	8011476 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	3334      	adds	r3, #52	; 0x34
 8011230:	3313      	adds	r3, #19
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff fd3a 	bl	8010cac <ld_word>
 8011238:	4603      	mov	r3, r0
 801123a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801123c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <find_volume+0x2cc>
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	3334      	adds	r3, #52	; 0x34
 8011246:	3320      	adds	r3, #32
 8011248:	4618      	mov	r0, r3
 801124a:	f7ff fd47 	bl	8010cdc <ld_dword>
 801124e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011252:	3334      	adds	r3, #52	; 0x34
 8011254:	330e      	adds	r3, #14
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fd28 	bl	8010cac <ld_word>
 801125c:	4603      	mov	r3, r0
 801125e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011262:	2b00      	cmp	r3, #0
 8011264:	d104      	bne.n	8011270 <find_volume+0x2ec>
 8011266:	230d      	movs	r3, #13
 8011268:	e105      	b.n	8011476 <find_volume+0x4f2>
 801126a:	bf00      	nop
 801126c:	20000de8 	.word	0x20000de8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011274:	4413      	add	r3, r2
 8011276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011278:	8911      	ldrh	r1, [r2, #8]
 801127a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801127c:	8992      	ldrh	r2, [r2, #12]
 801127e:	0952      	lsrs	r2, r2, #5
 8011280:	b292      	uxth	r2, r2
 8011282:	fbb1 f2f2 	udiv	r2, r1, r2
 8011286:	b292      	uxth	r2, r2
 8011288:	4413      	add	r3, r2
 801128a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801128c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011290:	429a      	cmp	r2, r3
 8011292:	d201      	bcs.n	8011298 <find_volume+0x314>
 8011294:	230d      	movs	r3, #13
 8011296:	e0ee      	b.n	8011476 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112a0:	8952      	ldrh	r2, [r2, #10]
 80112a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80112a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d101      	bne.n	80112b2 <find_volume+0x32e>
 80112ae:	230d      	movs	r3, #13
 80112b0:	e0e1      	b.n	8011476 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80112b2:	2303      	movs	r3, #3
 80112b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80112b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80112be:	4293      	cmp	r3, r2
 80112c0:	d802      	bhi.n	80112c8 <find_volume+0x344>
 80112c2:	2302      	movs	r3, #2
 80112c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	f640 72f5 	movw	r2, #4085	; 0xff5
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d802      	bhi.n	80112d8 <find_volume+0x354>
 80112d2:	2301      	movs	r3, #1
 80112d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	1c9a      	adds	r2, r3, #2
 80112dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112de:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112e4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80112e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80112e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ea:	441a      	add	r2, r3
 80112ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80112f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80112f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f4:	441a      	add	r2, r3
 80112f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80112fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d11e      	bne.n	8011340 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011304:	3334      	adds	r3, #52	; 0x34
 8011306:	332a      	adds	r3, #42	; 0x2a
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff fccf 	bl	8010cac <ld_word>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d001      	beq.n	8011318 <find_volume+0x394>
 8011314:	230d      	movs	r3, #13
 8011316:	e0ae      	b.n	8011476 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	891b      	ldrh	r3, [r3, #8]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <find_volume+0x3a0>
 8011320:	230d      	movs	r3, #13
 8011322:	e0a8      	b.n	8011476 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	3334      	adds	r3, #52	; 0x34
 8011328:	332c      	adds	r3, #44	; 0x2c
 801132a:	4618      	mov	r0, r3
 801132c:	f7ff fcd6 	bl	8010cdc <ld_dword>
 8011330:	4602      	mov	r2, r0
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011338:	699b      	ldr	r3, [r3, #24]
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	647b      	str	r3, [r7, #68]	; 0x44
 801133e:	e01f      	b.n	8011380 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	891b      	ldrh	r3, [r3, #8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <find_volume+0x3c8>
 8011348:	230d      	movs	r3, #13
 801134a:	e094      	b.n	8011476 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011352:	441a      	add	r2, r3
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801135c:	2b02      	cmp	r3, #2
 801135e:	d103      	bne.n	8011368 <find_volume+0x3e4>
 8011360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011362:	699b      	ldr	r3, [r3, #24]
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	e00a      	b.n	801137e <find_volume+0x3fa>
 8011368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136a:	699a      	ldr	r2, [r3, #24]
 801136c:	4613      	mov	r3, r2
 801136e:	005b      	lsls	r3, r3, #1
 8011370:	4413      	add	r3, r2
 8011372:	085a      	lsrs	r2, r3, #1
 8011374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011376:	699b      	ldr	r3, [r3, #24]
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801137e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	69da      	ldr	r2, [r3, #28]
 8011384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011386:	899b      	ldrh	r3, [r3, #12]
 8011388:	4619      	mov	r1, r3
 801138a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801138c:	440b      	add	r3, r1
 801138e:	3b01      	subs	r3, #1
 8011390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011392:	8989      	ldrh	r1, [r1, #12]
 8011394:	fbb3 f3f1 	udiv	r3, r3, r1
 8011398:	429a      	cmp	r2, r3
 801139a:	d201      	bcs.n	80113a0 <find_volume+0x41c>
 801139c:	230d      	movs	r3, #13
 801139e:	e06a      	b.n	8011476 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80113a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a2:	f04f 32ff 	mov.w	r2, #4294967295
 80113a6:	615a      	str	r2, [r3, #20]
 80113a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113aa:	695a      	ldr	r2, [r3, #20]
 80113ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	2280      	movs	r2, #128	; 0x80
 80113b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80113b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113ba:	2b03      	cmp	r3, #3
 80113bc:	d149      	bne.n	8011452 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80113be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c0:	3334      	adds	r3, #52	; 0x34
 80113c2:	3330      	adds	r3, #48	; 0x30
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7ff fc71 	bl	8010cac <ld_word>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d140      	bne.n	8011452 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80113d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d2:	3301      	adds	r3, #1
 80113d4:	4619      	mov	r1, r3
 80113d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113d8:	f7ff fd0c 	bl	8010df4 <move_window>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d137      	bne.n	8011452 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	2200      	movs	r2, #0
 80113e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	3334      	adds	r3, #52	; 0x34
 80113ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7ff fc5b 	bl	8010cac <ld_word>
 80113f6:	4603      	mov	r3, r0
 80113f8:	461a      	mov	r2, r3
 80113fa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80113fe:	429a      	cmp	r2, r3
 8011400:	d127      	bne.n	8011452 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011404:	3334      	adds	r3, #52	; 0x34
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff fc68 	bl	8010cdc <ld_dword>
 801140c:	4602      	mov	r2, r0
 801140e:	4b1c      	ldr	r3, [pc, #112]	; (8011480 <find_volume+0x4fc>)
 8011410:	429a      	cmp	r2, r3
 8011412:	d11e      	bne.n	8011452 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011416:	3334      	adds	r3, #52	; 0x34
 8011418:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff fc5d 	bl	8010cdc <ld_dword>
 8011422:	4602      	mov	r2, r0
 8011424:	4b17      	ldr	r3, [pc, #92]	; (8011484 <find_volume+0x500>)
 8011426:	429a      	cmp	r2, r3
 8011428:	d113      	bne.n	8011452 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	3334      	adds	r3, #52	; 0x34
 801142e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011432:	4618      	mov	r0, r3
 8011434:	f7ff fc52 	bl	8010cdc <ld_dword>
 8011438:	4602      	mov	r2, r0
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011440:	3334      	adds	r3, #52	; 0x34
 8011442:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011446:	4618      	mov	r0, r3
 8011448:	f7ff fc48 	bl	8010cdc <ld_dword>
 801144c:	4602      	mov	r2, r0
 801144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011450:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011454:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011458:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801145a:	4b0b      	ldr	r3, [pc, #44]	; (8011488 <find_volume+0x504>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	3301      	adds	r3, #1
 8011460:	b29a      	uxth	r2, r3
 8011462:	4b09      	ldr	r3, [pc, #36]	; (8011488 <find_volume+0x504>)
 8011464:	801a      	strh	r2, [r3, #0]
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <find_volume+0x504>)
 8011468:	881a      	ldrh	r2, [r3, #0]
 801146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801146e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011470:	f7ff fc58 	bl	8010d24 <clear_lock>
#endif
	return FR_OK;
 8011474:	2300      	movs	r3, #0
}
 8011476:	4618      	mov	r0, r3
 8011478:	3758      	adds	r7, #88	; 0x58
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	41615252 	.word	0x41615252
 8011484:	61417272 	.word	0x61417272
 8011488:	20000dec 	.word	0x20000dec

0801148c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b088      	sub	sp, #32
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	4613      	mov	r3, r2
 8011498:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801149e:	f107 0310 	add.w	r3, r7, #16
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff fcd3 	bl	8010e4e <get_ldnumber>
 80114a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	da01      	bge.n	80114b4 <f_mount+0x28>
 80114b0:	230b      	movs	r3, #11
 80114b2:	e02b      	b.n	801150c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80114b4:	4a17      	ldr	r2, [pc, #92]	; (8011514 <f_mount+0x88>)
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d005      	beq.n	80114d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80114c4:	69b8      	ldr	r0, [r7, #24]
 80114c6:	f7ff fc2d 	bl	8010d24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	2200      	movs	r2, #0
 80114ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d002      	beq.n	80114dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80114dc:	68fa      	ldr	r2, [r7, #12]
 80114de:	490d      	ldr	r1, [pc, #52]	; (8011514 <f_mount+0x88>)
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d002      	beq.n	80114f2 <f_mount+0x66>
 80114ec:	79fb      	ldrb	r3, [r7, #7]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d001      	beq.n	80114f6 <f_mount+0x6a>
 80114f2:	2300      	movs	r3, #0
 80114f4:	e00a      	b.n	801150c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80114f6:	f107 010c 	add.w	r1, r7, #12
 80114fa:	f107 0308 	add.w	r3, r7, #8
 80114fe:	2200      	movs	r2, #0
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff fd3f 	bl	8010f84 <find_volume>
 8011506:	4603      	mov	r3, r0
 8011508:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801150a:	7dfb      	ldrb	r3, [r7, #23]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3720      	adds	r7, #32
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	20000de8 	.word	0x20000de8

08011518 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011518:	b480      	push	{r7}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	4613      	mov	r3, r2
 8011524:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011526:	2301      	movs	r3, #1
 8011528:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801152a:	2300      	movs	r3, #0
 801152c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801152e:	4b1f      	ldr	r3, [pc, #124]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011530:	7a5b      	ldrb	r3, [r3, #9]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	d131      	bne.n	801159c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011538:	4b1c      	ldr	r3, [pc, #112]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 801153a:	7a5b      	ldrb	r3, [r3, #9]
 801153c:	b2db      	uxtb	r3, r3
 801153e:	461a      	mov	r2, r3
 8011540:	4b1a      	ldr	r3, [pc, #104]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011542:	2100      	movs	r1, #0
 8011544:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011546:	4b19      	ldr	r3, [pc, #100]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011548:	7a5b      	ldrb	r3, [r3, #9]
 801154a:	b2db      	uxtb	r3, r3
 801154c:	4a17      	ldr	r2, [pc, #92]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4413      	add	r3, r2
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011556:	4b15      	ldr	r3, [pc, #84]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011558:	7a5b      	ldrb	r3, [r3, #9]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	461a      	mov	r2, r3
 801155e:	4b13      	ldr	r3, [pc, #76]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011560:	4413      	add	r3, r2
 8011562:	79fa      	ldrb	r2, [r7, #7]
 8011564:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011566:	4b11      	ldr	r3, [pc, #68]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011568:	7a5b      	ldrb	r3, [r3, #9]
 801156a:	b2db      	uxtb	r3, r3
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	b2d1      	uxtb	r1, r2
 8011570:	4a0e      	ldr	r2, [pc, #56]	; (80115ac <FATFS_LinkDriverEx+0x94>)
 8011572:	7251      	strb	r1, [r2, #9]
 8011574:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011576:	7dbb      	ldrb	r3, [r7, #22]
 8011578:	3330      	adds	r3, #48	; 0x30
 801157a:	b2da      	uxtb	r2, r3
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	3301      	adds	r3, #1
 8011584:	223a      	movs	r2, #58	; 0x3a
 8011586:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	3302      	adds	r3, #2
 801158c:	222f      	movs	r2, #47	; 0x2f
 801158e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	3303      	adds	r3, #3
 8011594:	2200      	movs	r2, #0
 8011596:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011598:	2300      	movs	r3, #0
 801159a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801159c:	7dfb      	ldrb	r3, [r7, #23]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	371c      	adds	r7, #28
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	20000e10 	.word	0x20000e10

080115b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80115ba:	2200      	movs	r2, #0
 80115bc:	6839      	ldr	r1, [r7, #0]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff ffaa 	bl	8011518 <FATFS_LinkDriverEx>
 80115c4:	4603      	mov	r3, r0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80115d6:	2300      	movs	r3, #0
 80115d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80115da:	f000 f896 	bl	801170a <BSP_SD_IsDetected>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d001      	beq.n	80115e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	e012      	b.n	801160e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80115e8:	480b      	ldr	r0, [pc, #44]	; (8011618 <BSP_SD_Init+0x48>)
 80115ea:	f7f8 fcc4 	bl	8009f76 <HAL_SD_Init>
 80115ee:	4603      	mov	r3, r0
 80115f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80115f2:	79fb      	ldrb	r3, [r7, #7]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d109      	bne.n	801160c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80115f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80115fc:	4806      	ldr	r0, [pc, #24]	; (8011618 <BSP_SD_Init+0x48>)
 80115fe:	f7f9 fa9e 	bl	800ab3e <HAL_SD_ConfigWideBusOperation>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d001      	beq.n	801160c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011608:	2301      	movs	r3, #1
 801160a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801160c:	79fb      	ldrb	r3, [r7, #7]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	20003fbc 	.word	0x20003fbc

0801161c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	68ba      	ldr	r2, [r7, #8]
 8011630:	68f9      	ldr	r1, [r7, #12]
 8011632:	4806      	ldr	r0, [pc, #24]	; (801164c <BSP_SD_ReadBlocks_DMA+0x30>)
 8011634:	f7f8 fd26 	bl	800a084 <HAL_SD_ReadBlocks_DMA>
 8011638:	4603      	mov	r3, r0
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801163e:	2301      	movs	r3, #1
 8011640:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8011642:	7dfb      	ldrb	r3, [r7, #23]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3718      	adds	r7, #24
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	20003fbc 	.word	0x20003fbc

08011650 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801165c:	2300      	movs	r3, #0
 801165e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	68ba      	ldr	r2, [r7, #8]
 8011664:	68f9      	ldr	r1, [r7, #12]
 8011666:	4806      	ldr	r0, [pc, #24]	; (8011680 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011668:	f7f8 fdd8 	bl	800a21c <HAL_SD_WriteBlocks_DMA>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	d001      	beq.n	8011676 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011672:	2301      	movs	r3, #1
 8011674:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8011676:	7dfb      	ldrb	r3, [r7, #23]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3718      	adds	r7, #24
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	20003fbc 	.word	0x20003fbc

08011684 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011688:	4805      	ldr	r0, [pc, #20]	; (80116a0 <BSP_SD_GetCardState+0x1c>)
 801168a:	f7f9 fad4 	bl	800ac36 <HAL_SD_GetCardState>
 801168e:	4603      	mov	r3, r0
 8011690:	2b04      	cmp	r3, #4
 8011692:	bf14      	ite	ne
 8011694:	2301      	movne	r3, #1
 8011696:	2300      	moveq	r3, #0
 8011698:	b2db      	uxtb	r3, r3
}
 801169a:	4618      	mov	r0, r3
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	20003fbc 	.word	0x20003fbc

080116a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80116ac:	6879      	ldr	r1, [r7, #4]
 80116ae:	4803      	ldr	r0, [pc, #12]	; (80116bc <BSP_SD_GetCardInfo+0x18>)
 80116b0:	f7f9 fa19 	bl	800aae6 <HAL_SD_GetCardInfo>
}
 80116b4:	bf00      	nop
 80116b6:	3708      	adds	r7, #8
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	20003fbc 	.word	0x20003fbc

080116c0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80116c8:	f000 f818 	bl	80116fc <BSP_SD_AbortCallback>
}
 80116cc:	bf00      	nop
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80116dc:	f002 fa70 	bl	8013bc0 <BSP_SD_WriteCpltCallback>
}
 80116e0:	bf00      	nop
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80116f0:	f002 fa72 	bl	8013bd8 <BSP_SD_ReadCpltCallback>
}
 80116f4:	bf00      	nop
 80116f6:	3708      	adds	r7, #8
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80116fc:	b480      	push	{r7}
 80116fe:	af00      	add	r7, sp, #0

}
 8011700:	bf00      	nop
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801170a:	b580      	push	{r7, lr}
 801170c:	b082      	sub	sp, #8
 801170e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011710:	2301      	movs	r3, #1
 8011712:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8011714:	f000 f81e 	bl	8011754 <BSP_PlatformIsDetected>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d101      	bne.n	8011722 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801171e:	2300      	movs	r3, #0
 8011720:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011722:	79fb      	ldrb	r3, [r7, #7]
 8011724:	b2db      	uxtb	r3, r3
}
 8011726:	4618      	mov	r0, r3
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
	...

08011730 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011730:	b580      	push	{r7, lr}
 8011732:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011734:	4904      	ldr	r1, [pc, #16]	; (8011748 <MX_FATFS_Init+0x18>)
 8011736:	4805      	ldr	r0, [pc, #20]	; (801174c <MX_FATFS_Init+0x1c>)
 8011738:	f7ff ff3a 	bl	80115b0 <FATFS_LinkDriver>
 801173c:	4603      	mov	r3, r0
 801173e:	461a      	mov	r2, r3
 8011740:	4b03      	ldr	r3, [pc, #12]	; (8011750 <MX_FATFS_Init+0x20>)
 8011742:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8011744:	bf00      	nop
 8011746:	bd80      	pop	{r7, pc}
 8011748:	20001d0c 	.word	0x20001d0c
 801174c:	0801bdcc 	.word	0x0801bdcc
 8011750:	20001d08 	.word	0x20001d08

08011754 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801175a:	2301      	movs	r3, #1
 801175c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011762:	4806      	ldr	r0, [pc, #24]	; (801177c <BSP_PlatformIsDetected+0x28>)
 8011764:	f7f5 fce0 	bl	8007128 <HAL_GPIO_ReadPin>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d001      	beq.n	8011772 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801176e:	2300      	movs	r3, #0
 8011770:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8011772:	79fb      	ldrb	r3, [r7, #7]
}  
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	40020000 	.word	0x40020000

08011780 <micros>:
 8011780:	b480      	push	{r7}
 8011782:	af00      	add	r7, sp, #0
 8011784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178a:	4618      	mov	r0, r3
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8011794:	b480      	push	{r7}
 8011796:	af00      	add	r7, sp, #0
 8011798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179e:	4a04      	ldr	r2, [pc, #16]	; (80117b0 <millis+0x1c>)
 80117a0:	fba2 2303 	umull	r2, r3, r2, r3
 80117a4:	099b      	lsrs	r3, r3, #6
 80117a6:	4618      	mov	r0, r3
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	10624dd3 	.word	0x10624dd3

080117b4 <println>:
{
 80117b4:	b40f      	push	{r0, r1, r2, r3}
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
	if (usbPresent)
 80117bc:	4b28      	ldr	r3, [pc, #160]	; (8011860 <println+0xac>)
 80117be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d143      	bne.n	801184e <println+0x9a>
		va_start(argptr, format);
 80117c6:	f107 031c 	add.w	r3, r7, #28
 80117ca:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	69b9      	ldr	r1, [r7, #24]
 80117d0:	4824      	ldr	r0, [pc, #144]	; (8011864 <println+0xb0>)
 80117d2:	f005 fa07 	bl	8016be4 <vsiprintf>
 80117d6:	4603      	mov	r3, r0
 80117d8:	461a      	mov	r2, r3
 80117da:	4b23      	ldr	r3, [pc, #140]	; (8011868 <println+0xb4>)
 80117dc:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 80117de:	4b22      	ldr	r3, [pc, #136]	; (8011868 <println+0xb4>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4a20      	ldr	r2, [pc, #128]	; (8011864 <println+0xb0>)
 80117e4:	210d      	movs	r1, #13
 80117e6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 80117e8:	4b1f      	ldr	r3, [pc, #124]	; (8011868 <println+0xb4>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3301      	adds	r3, #1
 80117ee:	4a1d      	ldr	r2, [pc, #116]	; (8011864 <println+0xb0>)
 80117f0:	210a      	movs	r1, #10
 80117f2:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 80117f4:	4b1c      	ldr	r3, [pc, #112]	; (8011868 <println+0xb4>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	3302      	adds	r3, #2
 80117fa:	4a1a      	ldr	r2, [pc, #104]	; (8011864 <println+0xb0>)
 80117fc:	2100      	movs	r1, #0
 80117fe:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8011800:	4b19      	ldr	r3, [pc, #100]	; (8011868 <println+0xb4>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3303      	adds	r3, #3
 8011806:	4a18      	ldr	r2, [pc, #96]	; (8011868 <println+0xb4>)
 8011808:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 801180a:	f7ff ffb9 	bl	8011780 <micros>
 801180e:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8011810:	4b15      	ldr	r3, [pc, #84]	; (8011868 <println+0xb4>)
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	4613      	mov	r3, r2
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	4413      	add	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	3346      	adds	r3, #70	; 0x46
 801181e:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8011820:	e009      	b.n	8011836 <println+0x82>
			if (micros() - printStart > timeout)
 8011822:	f7ff ffad 	bl	8011780 <micros>
 8011826:	4602      	mov	r2, r0
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	68ba      	ldr	r2, [r7, #8]
 801182e:	429a      	cmp	r2, r3
 8011830:	d201      	bcs.n	8011836 <println+0x82>
				return false;
 8011832:	2300      	movs	r3, #0
 8011834:	e00c      	b.n	8011850 <println+0x9c>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <println+0xb4>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	b29b      	uxth	r3, r3
 801183c:	4619      	mov	r1, r3
 801183e:	4809      	ldr	r0, [pc, #36]	; (8011864 <println+0xb0>)
 8011840:	f002 fed4 	bl	80145ec <CDC_Transmit_FS>
 8011844:	4603      	mov	r3, r0
 8011846:	2b01      	cmp	r3, #1
 8011848:	d0eb      	beq.n	8011822 <println+0x6e>
		return true;
 801184a:	2301      	movs	r3, #1
 801184c:	e000      	b.n	8011850 <println+0x9c>
	return false;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3710      	adds	r7, #16
 8011854:	46bd      	mov	sp, r7
 8011856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801185a:	b004      	add	sp, #16
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	20001a3c 	.word	0x20001a3c
 8011864:	20001624 	.word	0x20001624
 8011868:	20001620 	.word	0x20001620

0801186c <floatToBytes>:
			now.dayM, now.month, now.year,
			now.hour, now.minute, now.second, now.msecond);
}

// ############### Useful #################
static inline void floatToBytes(float* value, uint8_t* buffer) { for (uint8_t i = 0; i < 4; i++) buffer[i] = *((uint8_t*)(value) + i); }
 801186c:	b480      	push	{r7}
 801186e:	b085      	sub	sp, #20
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
 8011876:	2300      	movs	r3, #0
 8011878:	73fb      	strb	r3, [r7, #15]
 801187a:	e00a      	b.n	8011892 <floatToBytes+0x26>
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	441a      	add	r2, r3
 8011882:	7bfb      	ldrb	r3, [r7, #15]
 8011884:	6839      	ldr	r1, [r7, #0]
 8011886:	440b      	add	r3, r1
 8011888:	7812      	ldrb	r2, [r2, #0]
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	7bfb      	ldrb	r3, [r7, #15]
 801188e:	3301      	adds	r3, #1
 8011890:	73fb      	strb	r3, [r7, #15]
 8011892:	7bfb      	ldrb	r3, [r7, #15]
 8011894:	2b03      	cmp	r3, #3
 8011896:	d9f1      	bls.n	801187c <floatToBytes+0x10>
 8011898:	bf00      	nop
 801189a:	3714      	adds	r7, #20
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <bytesToFloat>:
static inline void bytesToFloat(uint8_t* buffer, float* value) { for (uint8_t i = 0; i < 4; i++) *((uint8_t*)(value) + i) = buffer[i]; }
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
 80118ae:	2300      	movs	r3, #0
 80118b0:	73fb      	strb	r3, [r7, #15]
 80118b2:	e00a      	b.n	80118ca <bytesToFloat+0x26>
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	441a      	add	r2, r3
 80118ba:	7bfb      	ldrb	r3, [r7, #15]
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	440b      	add	r3, r1
 80118c0:	7812      	ldrb	r2, [r2, #0]
 80118c2:	701a      	strb	r2, [r3, #0]
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
 80118c6:	3301      	adds	r3, #1
 80118c8:	73fb      	strb	r3, [r7, #15]
 80118ca:	7bfb      	ldrb	r3, [r7, #15]
 80118cc:	2b03      	cmp	r3, #3
 80118ce:	d9f1      	bls.n	80118b4 <bytesToFloat+0x10>
 80118d0:	bf00      	nop
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <log_print_dummy>:

//void log_new();
char logBuffer[4096];
uint16_t logBufferIndex;
//void log_print(const char* format, ...);
static void log_print_dummy(const char* format, ...) { return; }
 80118dc:	b40f      	push	{r0, r1, r2, r3}
 80118de:	b480      	push	{r7}
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	bf00      	nop
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	b004      	add	sp, #16
 80118ec:	4770      	bx	lr
	...

080118f0 <loging_setup>:
	}
}


static bool loging_setup(void)		// Writes test file to SD card, if successful creates new log folder
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	af00      	add	r7, sp, #0
			sdActive = false;
			Common.log_print = &log_print_dummy;
			return false;

	#else // SD_ENABLE
		SD_deinit();
 80118f4:	f7ef fd26 	bl	8001344 <SD_deinit>
		println("warning: [LOGING] SD DISABLED!");
 80118f8:	4804      	ldr	r0, [pc, #16]	; (801190c <loging_setup+0x1c>)
 80118fa:	f7ff ff5b 	bl	80117b4 <println>
		Common.log_print = &log_print_dummy;
 80118fe:	4b04      	ldr	r3, [pc, #16]	; (8011910 <loging_setup+0x20>)
 8011900:	4a04      	ldr	r2, [pc, #16]	; (8011914 <loging_setup+0x24>)
 8011902:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		return false;
 8011906:	2300      	movs	r3, #0
	#endif
}
 8011908:	4618      	mov	r0, r3
 801190a:	bd80      	pop	{r7, pc}
 801190c:	0801bcc0 	.word	0x0801bcc0
 8011910:	20000e1c 	.word	0x20000e1c
 8011914:	080118dd 	.word	0x080118dd

08011918 <loging_loop>:

static void loging_loop(void)
{
 8011918:	b480      	push	{r7}
 801191a:	af00      	add	r7, sp, #0
				println("Operation mode: %s", operation_string);
			#endif
			lastDataPrint = millis();
		}
	#endif
	return;
 801191c:	bf00      	nop
}
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr
	...

08011928 <send_info_packet>:

bool transmitting;
uint8_t packetNumber;

static void send_info_packet(void)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	af00      	add	r7, sp, #0
	SX1278_transmit(&(Common.radio), Common.radio.txBuffer, 22);	
 801192c:	2216      	movs	r2, #22
 801192e:	4903      	ldr	r1, [pc, #12]	; (801193c <send_info_packet+0x14>)
 8011930:	4803      	ldr	r0, [pc, #12]	; (8011940 <send_info_packet+0x18>)
 8011932:	f7ef ff15 	bl	8001760 <SX1278_transmit>
}
 8011936:	bf00      	nop
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	200012b8 	.word	0x200012b8
 8011940:	20001170 	.word	0x20001170

08011944 <duplex_setup>:

static bool duplex_setup(void)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
	(*Common.log_print)("*D00"); // [DUPLEX] Hello!
 801194a:	4b32      	ldr	r3, [pc, #200]	; (8011a14 <duplex_setup+0xd0>)
 801194c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011950:	4831      	ldr	r0, [pc, #196]	; (8011a18 <duplex_setup+0xd4>)
 8011952:	4798      	blx	r3
	#if RADIO_ENABLE
		Common.radio.reset = LR_RESET_Pin;		Common.radio.reset_port = LR_RESET_GPIO_Port;
 8011954:	4b2f      	ldr	r3, [pc, #188]	; (8011a14 <duplex_setup+0xd0>)
 8011956:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801195a:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
 801195e:	4b2d      	ldr	r3, [pc, #180]	; (8011a14 <duplex_setup+0xd0>)
 8011960:	4a2e      	ldr	r2, [pc, #184]	; (8011a1c <duplex_setup+0xd8>)
 8011962:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
		Common.radio.dio0 = LR_DIO0_Pin;		Common.radio.dio0_port = LR_DIO0_GPIO_Port;
 8011966:	4b2b      	ldr	r3, [pc, #172]	; (8011a14 <duplex_setup+0xd0>)
 8011968:	2210      	movs	r2, #16
 801196a:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
 801196e:	4b29      	ldr	r3, [pc, #164]	; (8011a14 <duplex_setup+0xd0>)
 8011970:	4a2b      	ldr	r2, [pc, #172]	; (8011a20 <duplex_setup+0xdc>)
 8011972:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
		Common.radio.nss = LR_NSS_Pin;			Common.radio.nss_port = LR_NSS_GPIO_Port;
 8011976:	4b27      	ldr	r3, [pc, #156]	; (8011a14 <duplex_setup+0xd0>)
 8011978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801197c:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
 8011980:	4b24      	ldr	r3, [pc, #144]	; (8011a14 <duplex_setup+0xd0>)
 8011982:	4a27      	ldr	r2, [pc, #156]	; (8011a20 <duplex_setup+0xdc>)
 8011984:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		Common.radio.spi = Get_SPI1_Instance();
 8011988:	f001 fee8 	bl	801375c <Get_SPI1_Instance>
 801198c:	4602      	mov	r2, r0
 801198e:	4b21      	ldr	r3, [pc, #132]	; (8011a14 <duplex_setup+0xd0>)
 8011990:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
		Common.radio.config = sx1278_default_config;
 8011994:	4b1f      	ldr	r3, [pc, #124]	; (8011a14 <duplex_setup+0xd0>)
 8011996:	4a23      	ldr	r2, [pc, #140]	; (8011a24 <duplex_setup+0xe0>)
 8011998:	f503 7355 	add.w	r3, r3, #852	; 0x354
 801199c:	ca07      	ldmia	r2, {r0, r1, r2}
 801199e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Common.radio.useDio0IRQ = true;
 80119a2:	4b1c      	ldr	r3, [pc, #112]	; (8011a14 <duplex_setup+0xd0>)
 80119a4:	2201      	movs	r2, #1
 80119a6:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

		#if DUPLEX_DEBUG
			println("[DUPLEX] Initializing SX1278");
		#endif
		(*Common.log_print)("*D01");
 80119aa:	4b1a      	ldr	r3, [pc, #104]	; (8011a14 <duplex_setup+0xd0>)
 80119ac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80119b0:	481d      	ldr	r0, [pc, #116]	; (8011a28 <duplex_setup+0xe4>)
 80119b2:	4798      	blx	r3

		uint8_t attempts = 0;
 80119b4:	2300      	movs	r3, #0
 80119b6:	71fb      	strb	r3, [r7, #7]
		while (!SX1278_init(&(Common.radio)))
 80119b8:	e010      	b.n	80119dc <duplex_setup+0x98>
		{
			if (++attempts > 5)
 80119ba:	79fb      	ldrb	r3, [r7, #7]
 80119bc:	3301      	adds	r3, #1
 80119be:	71fb      	strb	r3, [r7, #7]
 80119c0:	79fb      	ldrb	r3, [r7, #7]
 80119c2:	2b05      	cmp	r3, #5
 80119c4:	d906      	bls.n	80119d4 <duplex_setup+0x90>
			{
				#if DUPLEX_DEBUG
					println("error: [DUPLEX] No connection with SX1278, radio is not active");
				#endif
				(*Common.log_print)("*ED01");
 80119c6:	4b13      	ldr	r3, [pc, #76]	; (8011a14 <duplex_setup+0xd0>)
 80119c8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80119cc:	4817      	ldr	r0, [pc, #92]	; (8011a2c <duplex_setup+0xe8>)
 80119ce:	4798      	blx	r3
				return false;
 80119d0:	2300      	movs	r3, #0
 80119d2:	e01a      	b.n	8011a0a <duplex_setup+0xc6>
			}

			#if DUPLEX_DEBUG
				println("[DUPLEX] Init unsuccessful, retrying...");
			#endif
			delay(500);
 80119d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80119d8:	f7f4 fd40 	bl	800645c <HAL_Delay>
		while (!SX1278_init(&(Common.radio)))
 80119dc:	4814      	ldr	r0, [pc, #80]	; (8011a30 <duplex_setup+0xec>)
 80119de:	f7ef fdc7 	bl	8001570 <SX1278_init>
 80119e2:	4603      	mov	r3, r0
 80119e4:	f083 0301 	eor.w	r3, r3, #1
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d1e5      	bne.n	80119ba <duplex_setup+0x76>
		}
		#if DUPLEX_DEBUG
			println("[DUPLEX] Successful radio init");
		#endif
		(*Common.log_print)("*D02");
 80119ee:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <duplex_setup+0xd0>)
 80119f0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80119f4:	480f      	ldr	r0, [pc, #60]	; (8011a34 <duplex_setup+0xf0>)
 80119f6:	4798      	blx	r3
		
		packetNumber = 1;
 80119f8:	4b0f      	ldr	r3, [pc, #60]	; (8011a38 <duplex_setup+0xf4>)
 80119fa:	2201      	movs	r2, #1
 80119fc:	701a      	strb	r2, [r3, #0]
		transmitting = true;
 80119fe:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <duplex_setup+0xf8>)
 8011a00:	2201      	movs	r2, #1
 8011a02:	701a      	strb	r2, [r3, #0]

		send_info_packet(); // Send packet to kickstart duplex
 8011a04:	f7ff ff90 	bl	8011928 <send_info_packet>
		return true;
 8011a08:	2301      	movs	r3, #1
		#endif
		(*Common.log_print)("*WD00");
		Common.radio.active = false;
		return false;
	#endif
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	20000e1c 	.word	0x20000e1c
 8011a18:	0801bce0 	.word	0x0801bce0
 8011a1c:	40020000 	.word	0x40020000
 8011a20:	40020800 	.word	0x40020800
 8011a24:	20000118 	.word	0x20000118
 8011a28:	0801bce8 	.word	0x0801bce8
 8011a2c:	0801bcf0 	.word	0x0801bcf0
 8011a30:	20001170 	.word	0x20001170
 8011a34:	0801bcf8 	.word	0x0801bcf8
 8011a38:	20001ce2 	.word	0x20001ce2
 8011a3c:	20001ce3 	.word	0x20001ce3

08011a40 <duplex_checkINT>:

static bool duplex_checkINT(void)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	af00      	add	r7, sp, #0
	return ((Common.radio.pendingIRQ && HAL_GPIO_ReadPin(Common.radio.dio0_port, Common.radio.dio0) == HIGH) || SX1278_intTimeout(&(Common.radio)));
 8011a44:	4b0f      	ldr	r3, [pc, #60]	; (8011a84 <duplex_checkINT+0x44>)
 8011a46:	f893 3399 	ldrb.w	r3, [r3, #921]	; 0x399
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00c      	beq.n	8011a68 <duplex_checkINT+0x28>
 8011a4e:	4b0d      	ldr	r3, [pc, #52]	; (8011a84 <duplex_checkINT+0x44>)
 8011a50:	f8d3 2370 	ldr.w	r2, [r3, #880]	; 0x370
 8011a54:	4b0b      	ldr	r3, [pc, #44]	; (8011a84 <duplex_checkINT+0x44>)
 8011a56:	f8b3 3364 	ldrh.w	r3, [r3, #868]	; 0x364
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	f7f5 fb63 	bl	8007128 <HAL_GPIO_ReadPin>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d005      	beq.n	8011a74 <duplex_checkINT+0x34>
 8011a68:	4807      	ldr	r0, [pc, #28]	; (8011a88 <duplex_checkINT+0x48>)
 8011a6a:	f7f0 f907 	bl	8001c7c <SX1278_intTimeout>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d001      	beq.n	8011a78 <duplex_checkINT+0x38>
 8011a74:	2301      	movs	r3, #1
 8011a76:	e000      	b.n	8011a7a <duplex_checkINT+0x3a>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	f003 0301 	and.w	r3, r3, #1
 8011a7e:	b2db      	uxtb	r3, r3
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	20000e1c 	.word	0x20000e1c
 8011a88:	20001170 	.word	0x20001170
 8011a8c:	00000000 	.word	0x00000000

08011a90 <decodePacket>:

static void decodePacket()
{
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
	if (Common.radio.newPacket)
 8011a96:	4b50      	ldr	r3, [pc, #320]	; (8011bd8 <decodePacket+0x148>)
 8011a98:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 8090 	beq.w	8011bc2 <decodePacket+0x132>
	{
		// format: MOT-1/8, SER-1/8, OPMOD-6/8, ANG-1, LAT-4, LON-4, ALT-2
		uint32_t temv = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	607b      	str	r3, [r7, #4]

		temv = (uint32_t)Common.radio.rxBuffer[0];
 8011aa6:	4b4c      	ldr	r3, [pc, #304]	; (8011bd8 <decodePacket+0x148>)
 8011aa8:	f893 339c 	ldrb.w	r3, [r3, #924]	; 0x39c
 8011aac:	607b      	str	r3, [r7, #4]
		Common.operation_mode = temv >> 2;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	089b      	lsrs	r3, r3, #2
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b48      	ldr	r3, [pc, #288]	; (8011bd8 <decodePacket+0x148>)
 8011ab6:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
		if (Common.operation_mode == 3)
 8011aba:	4b47      	ldr	r3, [pc, #284]	; (8011bd8 <decodePacket+0x148>)
 8011abc:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011ac0:	2b03      	cmp	r3, #3
 8011ac2:	d116      	bne.n	8011af2 <decodePacket+0x62>
		{
			Common.motors_enabled = temv & (1 << 0);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f003 0301 	and.w	r3, r3, #1
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	bf14      	ite	ne
 8011ace:	2301      	movne	r3, #1
 8011ad0:	2300      	moveq	r3, #0
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	4b40      	ldr	r3, [pc, #256]	; (8011bd8 <decodePacket+0x148>)
 8011ad6:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8
			Common.servo_enabled = temv & (1 << 1);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f003 0302 	and.w	r3, r3, #2
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	bf14      	ite	ne
 8011ae4:	2301      	movne	r3, #1
 8011ae6:	2300      	moveq	r3, #0
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	4b3b      	ldr	r3, [pc, #236]	; (8011bd8 <decodePacket+0x148>)
 8011aec:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8011af0:	e00d      	b.n	8011b0e <decodePacket+0x7e>
		}
		else if (Common.operation_mode > 3 && Common.operation_mode != 31) Common.operation_mode = 0;
 8011af2:	4b39      	ldr	r3, [pc, #228]	; (8011bd8 <decodePacket+0x148>)
 8011af4:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	d908      	bls.n	8011b0e <decodePacket+0x7e>
 8011afc:	4b36      	ldr	r3, [pc, #216]	; (8011bd8 <decodePacket+0x148>)
 8011afe:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011b02:	2b1f      	cmp	r3, #31
 8011b04:	d003      	beq.n	8011b0e <decodePacket+0x7e>
 8011b06:	4b34      	ldr	r3, [pc, #208]	; (8011bd8 <decodePacket+0x148>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc

		if (Common.operation_mode == 2 || Common.operation_mode == 3)
 8011b0e:	4b32      	ldr	r3, [pc, #200]	; (8011bd8 <decodePacket+0x148>)
 8011b10:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011b14:	2b02      	cmp	r3, #2
 8011b16:	d004      	beq.n	8011b22 <decodePacket+0x92>
 8011b18:	4b2f      	ldr	r3, [pc, #188]	; (8011bd8 <decodePacket+0x148>)
 8011b1a:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011b1e:	2b03      	cmp	r3, #3
 8011b20:	d125      	bne.n	8011b6e <decodePacket+0xde>
		{
			temv = (uint32_t)Common.radio.rxBuffer[1];
 8011b22:	4b2d      	ldr	r3, [pc, #180]	; (8011bd8 <decodePacket+0x148>)
 8011b24:	f893 339d 	ldrb.w	r3, [r3, #925]	; 0x39d
 8011b28:	607b      	str	r3, [r7, #4]
			Common.target_yaw = (float)(temv) * 360.0 / 255.0;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	ee07 3a90 	vmov	s15, r3
 8011b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b34:	ee17 0a90 	vmov	r0, s15
 8011b38:	f7ee fd16 	bl	8000568 <__aeabi_f2d>
 8011b3c:	f04f 0200 	mov.w	r2, #0
 8011b40:	4b26      	ldr	r3, [pc, #152]	; (8011bdc <decodePacket+0x14c>)
 8011b42:	f7ee fd69 	bl	8000618 <__aeabi_dmul>
 8011b46:	4603      	mov	r3, r0
 8011b48:	460c      	mov	r4, r1
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	a320      	add	r3, pc, #128	; (adr r3, 8011bd0 <decodePacket+0x140>)
 8011b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b54:	f7ee fe8a 	bl	800086c <__aeabi_ddiv>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	460c      	mov	r4, r1
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	4621      	mov	r1, r4
 8011b60:	f7ef f852 	bl	8000c08 <__aeabi_d2f>
 8011b64:	4602      	mov	r2, r0
 8011b66:	4b1c      	ldr	r3, [pc, #112]	; (8011bd8 <decodePacket+0x148>)
 8011b68:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8011b6c:	601a      	str	r2, [r3, #0]
		}
		if (Common.radio.rxLen == 13 && Common.operation_mode == 1)
 8011b6e:	4b1a      	ldr	r3, [pc, #104]	; (8011bd8 <decodePacket+0x148>)
 8011b70:	f893 339b 	ldrb.w	r3, [r3, #923]	; 0x39b
 8011b74:	2b0d      	cmp	r3, #13
 8011b76:	d120      	bne.n	8011bba <decodePacket+0x12a>
 8011b78:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <decodePacket+0x148>)
 8011b7a:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d11b      	bne.n	8011bba <decodePacket+0x12a>
		{
			bytesToFloat(Common.radio.rxBuffer + 3, &(Common.target_lat));
 8011b82:	4b17      	ldr	r3, [pc, #92]	; (8011be0 <decodePacket+0x150>)
 8011b84:	4917      	ldr	r1, [pc, #92]	; (8011be4 <decodePacket+0x154>)
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7ff fe8c 	bl	80118a4 <bytesToFloat>
			bytesToFloat(Common.radio.rxBuffer + 7, &(Common.target_lon));
 8011b8c:	4b16      	ldr	r3, [pc, #88]	; (8011be8 <decodePacket+0x158>)
 8011b8e:	4917      	ldr	r1, [pc, #92]	; (8011bec <decodePacket+0x15c>)
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7ff fe87 	bl	80118a4 <bytesToFloat>
			
			memcpy((uint8_t*)&temv, Common.radio.rxBuffer + 11, 2);
 8011b96:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <decodePacket+0x160>)
 8011b98:	881b      	ldrh	r3, [r3, #0]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	80bb      	strh	r3, [r7, #4]
			Common.target_alt = (float)(temv) / 10;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	ee07 3a90 	vmov	s15, r3
 8011ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011ba8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8011bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011bb0:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <decodePacket+0x148>)
 8011bb2:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8011bb6:	edc3 7a00 	vstr	s15, [r3]
		}
		togglePin(LEDB);
 8011bba:	2102      	movs	r1, #2
 8011bbc:	480d      	ldr	r0, [pc, #52]	; (8011bf4 <decodePacket+0x164>)
 8011bbe:	f7f5 fae4 	bl	800718a <HAL_GPIO_TogglePin>
	}
}
 8011bc2:	bf00      	nop
 8011bc4:	370c      	adds	r7, #12
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd90      	pop	{r4, r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	f3af 8000 	nop.w
 8011bd0:	00000000 	.word	0x00000000
 8011bd4:	406fe000 	.word	0x406fe000
 8011bd8:	20000e1c 	.word	0x20000e1c
 8011bdc:	40768000 	.word	0x40768000
 8011be0:	200011bb 	.word	0x200011bb
 8011be4:	20001608 	.word	0x20001608
 8011be8:	200011bf 	.word	0x200011bf
 8011bec:	2000160c 	.word	0x2000160c
 8011bf0:	200011c3 	.word	0x200011c3
 8011bf4:	40020800 	.word	0x40020800

08011bf8 <preparePacket>:

static void preparePacket()
{
 8011bf8:	b590      	push	{r4, r7, lr}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
	// format: TEMP-2, PRES-3, LAT-4, LON-4, ALT-2, YAW-1, PITCH-1, ROLL-1, SPS1-1, SPS10-1, OPMODE-1, PN-1
	uint32_t temv = 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	607b      	str	r3, [r7, #4]

	temv = (uint32_t)((Common.bmp.temperature + 10) * 1000);
 8011c02:	4b63      	ldr	r3, [pc, #396]	; (8011d90 <preparePacket+0x198>)
 8011c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8011c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c10:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8011d94 <preparePacket+0x19c>
 8011c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c1c:	ee17 3a90 	vmov	r3, s15
 8011c20:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 0, (uint8_t*)&temv, 2);	// 0:1
 8011c22:	88ba      	ldrh	r2, [r7, #4]
 8011c24:	4b5a      	ldr	r3, [pc, #360]	; (8011d90 <preparePacket+0x198>)
 8011c26:	f8a3 249c 	strh.w	r2, [r3, #1180]	; 0x49c

	temv = (uint32_t)(Common.bmp.pressure * 10000);
 8011c2a:	4b59      	ldr	r3, [pc, #356]	; (8011d90 <preparePacket+0x198>)
 8011c2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011c30:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8011d98 <preparePacket+0x1a0>
 8011c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c3c:	ee17 3a90 	vmov	r3, s15
 8011c40:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 2, (uint8_t*)&temv, 3);	// 2:5
 8011c42:	4856      	ldr	r0, [pc, #344]	; (8011d9c <preparePacket+0x1a4>)
 8011c44:	1d3b      	adds	r3, r7, #4
 8011c46:	2203      	movs	r2, #3
 8011c48:	4619      	mov	r1, r3
 8011c4a:	f003 f971 	bl	8014f30 <memcpy>

	floatToBytes(&(Common.gps.latitudeDegrees), Common.radio.txBuffer + 6);		// 6:9
 8011c4e:	4b54      	ldr	r3, [pc, #336]	; (8011da0 <preparePacket+0x1a8>)
 8011c50:	4619      	mov	r1, r3
 8011c52:	4854      	ldr	r0, [pc, #336]	; (8011da4 <preparePacket+0x1ac>)
 8011c54:	f7ff fe0a 	bl	801186c <floatToBytes>
	floatToBytes(&(Common.gps.longitudeDegrees), Common.radio.txBuffer + 10);	// 10:13
 8011c58:	4b53      	ldr	r3, [pc, #332]	; (8011da8 <preparePacket+0x1b0>)
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	4853      	ldr	r0, [pc, #332]	; (8011dac <preparePacket+0x1b4>)
 8011c5e:	f7ff fe05 	bl	801186c <floatToBytes>

	temv = (uint32_t)(Common.gps.altitude * 10);
 8011c62:	4b4b      	ldr	r3, [pc, #300]	; (8011d90 <preparePacket+0x198>)
 8011c64:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8011c68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011c74:	ee17 3a90 	vmov	r3, s15
 8011c78:	607b      	str	r3, [r7, #4]
	memcpy(Common.radio.txBuffer + 14, (uint8_t*)&temv, 2);	// 14:15
 8011c7a:	4a4d      	ldr	r2, [pc, #308]	; (8011db0 <preparePacket+0x1b8>)
 8011c7c:	88bb      	ldrh	r3, [r7, #4]
 8011c7e:	8013      	strh	r3, [r2, #0]

	Common.radio.txBuffer[16] = (uint8_t)(Common.mpu.yaw * (255.0 / 360.0));	// 16
 8011c80:	4b43      	ldr	r3, [pc, #268]	; (8011d90 <preparePacket+0x198>)
 8011c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ee fc6f 	bl	8000568 <__aeabi_f2d>
 8011c8a:	a33d      	add	r3, pc, #244	; (adr r3, 8011d80 <preparePacket+0x188>)
 8011c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c90:	f7ee fcc2 	bl	8000618 <__aeabi_dmul>
 8011c94:	4603      	mov	r3, r0
 8011c96:	460c      	mov	r4, r1
 8011c98:	4618      	mov	r0, r3
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	f7ee ff94 	bl	8000bc8 <__aeabi_d2uiz>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	4b3a      	ldr	r3, [pc, #232]	; (8011d90 <preparePacket+0x198>)
 8011ca6:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
	Common.radio.txBuffer[17] = (uint8_t)(Common.mpu.pitch * (255.0 / 360.0));	// 17
 8011caa:	4b39      	ldr	r3, [pc, #228]	; (8011d90 <preparePacket+0x198>)
 8011cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ee fc5a 	bl	8000568 <__aeabi_f2d>
 8011cb4:	a332      	add	r3, pc, #200	; (adr r3, 8011d80 <preparePacket+0x188>)
 8011cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cba:	f7ee fcad 	bl	8000618 <__aeabi_dmul>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	4621      	mov	r1, r4
 8011cc6:	f7ee ff7f 	bl	8000bc8 <__aeabi_d2uiz>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	b2da      	uxtb	r2, r3
 8011cce:	4b30      	ldr	r3, [pc, #192]	; (8011d90 <preparePacket+0x198>)
 8011cd0:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
	Common.radio.txBuffer[18] = (uint8_t)(Common.mpu.roll * (255.0 / 360.0));	// 18
 8011cd4:	4b2e      	ldr	r3, [pc, #184]	; (8011d90 <preparePacket+0x198>)
 8011cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ee fc45 	bl	8000568 <__aeabi_f2d>
 8011cde:	a328      	add	r3, pc, #160	; (adr r3, 8011d80 <preparePacket+0x188>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	f7ee fc98 	bl	8000618 <__aeabi_dmul>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	460c      	mov	r4, r1
 8011cec:	4618      	mov	r0, r3
 8011cee:	4621      	mov	r1, r4
 8011cf0:	f7ee ff6a 	bl	8000bc8 <__aeabi_d2uiz>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	4b25      	ldr	r3, [pc, #148]	; (8011d90 <preparePacket+0x198>)
 8011cfa:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae

	Common.radio.txBuffer[19] = (uint8_t)(Common.sps.pm1 * (255.0 / 50.0));	// 19
 8011cfe:	4b24      	ldr	r3, [pc, #144]	; (8011d90 <preparePacket+0x198>)
 8011d00:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7ee fc2e 	bl	8000568 <__aeabi_f2d>
 8011d0c:	a31e      	add	r3, pc, #120	; (adr r3, 8011d88 <preparePacket+0x190>)
 8011d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d12:	f7ee fc81 	bl	8000618 <__aeabi_dmul>
 8011d16:	4603      	mov	r3, r0
 8011d18:	460c      	mov	r4, r1
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	f7ee ff53 	bl	8000bc8 <__aeabi_d2uiz>
 8011d22:	4603      	mov	r3, r0
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4b1a      	ldr	r3, [pc, #104]	; (8011d90 <preparePacket+0x198>)
 8011d28:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
	Common.radio.txBuffer[20] = (uint8_t)(Common.sps.pm10 * (255.0 / 50.0));	// 20
 8011d2c:	4b18      	ldr	r3, [pc, #96]	; (8011d90 <preparePacket+0x198>)
 8011d2e:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7ee fc17 	bl	8000568 <__aeabi_f2d>
 8011d3a:	a313      	add	r3, pc, #76	; (adr r3, 8011d88 <preparePacket+0x190>)
 8011d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d40:	f7ee fc6a 	bl	8000618 <__aeabi_dmul>
 8011d44:	4603      	mov	r3, r0
 8011d46:	460c      	mov	r4, r1
 8011d48:	4618      	mov	r0, r3
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	f7ee ff3c 	bl	8000bc8 <__aeabi_d2uiz>
 8011d50:	4603      	mov	r3, r0
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	4b0e      	ldr	r3, [pc, #56]	; (8011d90 <preparePacket+0x198>)
 8011d56:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0

	Common.radio.txBuffer[21] = Common.operation_mode;	// 21
 8011d5a:	4b0d      	ldr	r3, [pc, #52]	; (8011d90 <preparePacket+0x198>)
 8011d5c:	f893 27fc 	ldrb.w	r2, [r3, #2044]	; 0x7fc
 8011d60:	4b0b      	ldr	r3, [pc, #44]	; (8011d90 <preparePacket+0x198>)
 8011d62:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
	Common.radio.txBuffer[22] = packetNumber;			// 22
 8011d66:	4b13      	ldr	r3, [pc, #76]	; (8011db4 <preparePacket+0x1bc>)
 8011d68:	781a      	ldrb	r2, [r3, #0]
 8011d6a:	4b09      	ldr	r3, [pc, #36]	; (8011d90 <preparePacket+0x198>)
 8011d6c:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
	Common.radio.txLen = 23;
 8011d70:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <preparePacket+0x198>)
 8011d72:	2217      	movs	r2, #23
 8011d74:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
}
 8011d78:	bf00      	nop
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd90      	pop	{r4, r7, pc}
 8011d80:	aaaaaaab 	.word	0xaaaaaaab
 8011d84:	3fe6aaaa 	.word	0x3fe6aaaa
 8011d88:	66666666 	.word	0x66666666
 8011d8c:	40146666 	.word	0x40146666
 8011d90:	20000e1c 	.word	0x20000e1c
 8011d94:	447a0000 	.word	0x447a0000
 8011d98:	461c4000 	.word	0x461c4000
 8011d9c:	200012ba 	.word	0x200012ba
 8011da0:	200012be 	.word	0x200012be
 8011da4:	20000f5c 	.word	0x20000f5c
 8011da8:	200012c2 	.word	0x200012c2
 8011dac:	20000f60 	.word	0x20000f60
 8011db0:	200012c6 	.word	0x200012c6
 8011db4:	20001ce2 	.word	0x20001ce2

08011db8 <duplex_loop>:

static void duplex_loop(void)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	af00      	add	r7, sp, #0
	#if RADIO_ENABLE
		if (Common.radio.active && Common.radio.useDio0IRQ && duplex_checkINT())	// Manually check for interrupt
 8011dbc:	4b21      	ldr	r3, [pc, #132]	; (8011e44 <duplex_loop+0x8c>)
 8011dbe:	f893 359c 	ldrb.w	r3, [r3, #1436]	; 0x59c
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d03b      	beq.n	8011e3e <duplex_loop+0x86>
 8011dc6:	4b1f      	ldr	r3, [pc, #124]	; (8011e44 <duplex_loop+0x8c>)
 8011dc8:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d036      	beq.n	8011e3e <duplex_loop+0x86>
 8011dd0:	f7ff fe36 	bl	8011a40 <duplex_checkINT>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d031      	beq.n	8011e3e <duplex_loop+0x86>
		{
			SX1278_dio0_IRQ(&(Common.radio));
 8011dda:	481b      	ldr	r0, [pc, #108]	; (8011e48 <duplex_loop+0x90>)
 8011ddc:	f7ef ff21 	bl	8001c22 <SX1278_dio0_IRQ>
			if (!transmitting)	// If in receiving mode: decode packet
 8011de0:	4b1a      	ldr	r3, [pc, #104]	; (8011e4c <duplex_loop+0x94>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	f083 0301 	eor.w	r3, r3, #1
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <duplex_loop+0x3a>
			{
				decodePacket();
 8011dee:	f7ff fe4f 	bl	8011a90 <decodePacket>
						println("[DUPLEX] Receive timeout.");
					}
				#endif
			}

			transmitting = true;
 8011df2:	4b16      	ldr	r3, [pc, #88]	; (8011e4c <duplex_loop+0x94>)
 8011df4:	2201      	movs	r2, #1
 8011df6:	701a      	strb	r2, [r3, #0]

			if (packetNumber == DUPLEX_TX_COUNT)
 8011df8:	4b15      	ldr	r3, [pc, #84]	; (8011e50 <duplex_loop+0x98>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b05      	cmp	r3, #5
 8011dfe:	d109      	bne.n	8011e14 <duplex_loop+0x5c>
			{
				SX1278_receive(&(Common.radio));
 8011e00:	4811      	ldr	r0, [pc, #68]	; (8011e48 <duplex_loop+0x90>)
 8011e02:	f7ef fce9 	bl	80017d8 <SX1278_receive>
					if (Common.radio.rxTimeout)
					{
						println("[DUPLEX] Receive start.");
					}
				#endif
				packetNumber = 0;
 8011e06:	4b12      	ldr	r3, [pc, #72]	; (8011e50 <duplex_loop+0x98>)
 8011e08:	2200      	movs	r2, #0
 8011e0a:	701a      	strb	r2, [r3, #0]
				transmitting = false;
 8011e0c:	4b0f      	ldr	r3, [pc, #60]	; (8011e4c <duplex_loop+0x94>)
 8011e0e:	2200      	movs	r2, #0
 8011e10:	701a      	strb	r2, [r3, #0]
				return;
 8011e12:	e015      	b.n	8011e40 <duplex_loop+0x88>
			}
			else
			{
				preparePacket();
 8011e14:	f7ff fef0 	bl	8011bf8 <preparePacket>
				SX1278_transmit(&(Common.radio), Common.radio.txBuffer, Common.radio.txLen);	// Packet is written directly to memory buffer of the instance
 8011e18:	4b0a      	ldr	r3, [pc, #40]	; (8011e44 <duplex_loop+0x8c>)
 8011e1a:	f893 339a 	ldrb.w	r3, [r3, #922]	; 0x39a
 8011e1e:	461a      	mov	r2, r3
 8011e20:	490c      	ldr	r1, [pc, #48]	; (8011e54 <duplex_loop+0x9c>)
 8011e22:	4809      	ldr	r0, [pc, #36]	; (8011e48 <duplex_loop+0x90>)
 8011e24:	f7ef fc9c 	bl	8001760 <SX1278_transmit>
				togglePin(LEDA);
 8011e28:	2101      	movs	r1, #1
 8011e2a:	480b      	ldr	r0, [pc, #44]	; (8011e58 <duplex_loop+0xa0>)
 8011e2c:	f7f5 f9ad 	bl	800718a <HAL_GPIO_TogglePin>
				packetNumber++;
 8011e30:	4b07      	ldr	r3, [pc, #28]	; (8011e50 <duplex_loop+0x98>)
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	3301      	adds	r3, #1
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <duplex_loop+0x98>)
 8011e3a:	701a      	strb	r2, [r3, #0]
				return;
 8011e3c:	e000      	b.n	8011e40 <duplex_loop+0x88>
			}
		}
	#endif
	return;
 8011e3e:	bf00      	nop
}
 8011e40:	bd80      	pop	{r7, pc}
 8011e42:	bf00      	nop
 8011e44:	20000e1c 	.word	0x20000e1c
 8011e48:	20001170 	.word	0x20001170
 8011e4c:	20001ce3 	.word	0x20001ce3
 8011e50:	20001ce2 	.word	0x20001ce2
 8011e54:	200012b8 	.word	0x200012b8
 8011e58:	40020800 	.word	0x40020800

08011e5c <sensing_setup>:

uint32_t lastBmpRead;
uint32_t lastSpsRead;

static bool sensing_setup(void)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
	(*Common.log_print)("*S00"); // [SENSING] Hello!
 8011e62:	4baa      	ldr	r3, [pc, #680]	; (801210c <sensing_setup+0x2b0>)
 8011e64:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011e68:	48a9      	ldr	r0, [pc, #676]	; (8012110 <sensing_setup+0x2b4>)
 8011e6a:	4798      	blx	r3
	uint8_t attempts;
	#if BMP_ENABLE
		attempts = 0;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	71fb      	strb	r3, [r7, #7]
		Common.bmp.i2c_addr = BMP280_I2C_ADDRESS;
 8011e70:	4ba6      	ldr	r3, [pc, #664]	; (801210c <sensing_setup+0x2b0>)
 8011e72:	22ee      	movs	r2, #238	; 0xee
 8011e74:	809a      	strh	r2, [r3, #4]
		Common.bmp.i2c = Get_I2C1_Instance();
 8011e76:	f001 fc67 	bl	8013748 <Get_I2C1_Instance>
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	4ba3      	ldr	r3, [pc, #652]	; (801210c <sensing_setup+0x2b0>)
 8011e7e:	601a      	str	r2, [r3, #0]
		#if SENSING_DEBUG
			println("[SENSING] Initializing BMP280");
		#endif
		(*Common.log_print)("*S10");
 8011e80:	4ba2      	ldr	r3, [pc, #648]	; (801210c <sensing_setup+0x2b0>)
 8011e82:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011e86:	48a3      	ldr	r0, [pc, #652]	; (8012114 <sensing_setup+0x2b8>)
 8011e88:	4798      	blx	r3
		
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 8011e8a:	e00f      	b.n	8011eac <sensing_setup+0x50>
		{
			if (++attempts > 5)
 8011e8c:	79fb      	ldrb	r3, [r7, #7]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	71fb      	strb	r3, [r7, #7]
 8011e92:	79fb      	ldrb	r3, [r7, #7]
 8011e94:	2b05      	cmp	r3, #5
 8011e96:	d905      	bls.n	8011ea4 <sensing_setup+0x48>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with BMP280, sensor is not active");
				#endif
				(*Common.log_print)("*ES10");
 8011e98:	4b9c      	ldr	r3, [pc, #624]	; (801210c <sensing_setup+0x2b0>)
 8011e9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011e9e:	489e      	ldr	r0, [pc, #632]	; (8012118 <sensing_setup+0x2bc>)
 8011ea0:	4798      	blx	r3
				break;
 8011ea2:	e00d      	b.n	8011ec0 <sensing_setup+0x64>
			}

			delay(500);
 8011ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011ea8:	f7f4 fad8 	bl	800645c <HAL_Delay>
		while (!bmp280_init(&(Common.bmp), &bmp280_default_config))
 8011eac:	499b      	ldr	r1, [pc, #620]	; (801211c <sensing_setup+0x2c0>)
 8011eae:	4897      	ldr	r0, [pc, #604]	; (801210c <sensing_setup+0x2b0>)
 8011eb0:	f7f0 fa7f 	bl	80023b2 <bmp280_init>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	f083 0301 	eor.w	r3, r3, #1
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1e5      	bne.n	8011e8c <sensing_setup+0x30>
		(*Common.log_print)("*WS10");
		Common.bmp.active = false;
	#endif

	#if GPS_ENABLE
		attempts = 0;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	71fb      	strb	r3, [r7, #7]
		Common.gps.uart = Get_UART1_Instance();
 8011ec4:	f001 fc54 	bl	8013770 <Get_UART1_Instance>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	4b90      	ldr	r3, [pc, #576]	; (801210c <sensing_setup+0x2b0>)
 8011ecc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		#if SENSING_DEBUG
			println("[SENSING] Initializing L86");
		#endif
		(*Common.log_print)("*S20");
 8011ed0:	4b8e      	ldr	r3, [pc, #568]	; (801210c <sensing_setup+0x2b0>)
 8011ed2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011ed6:	4892      	ldr	r0, [pc, #584]	; (8012120 <sensing_setup+0x2c4>)
 8011ed8:	4798      	blx	r3

		while (!GPS_init(&(Common.gps)))
 8011eda:	e00f      	b.n	8011efc <sensing_setup+0xa0>
		{
			if (++attempts > 5)
 8011edc:	79fb      	ldrb	r3, [r7, #7]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	71fb      	strb	r3, [r7, #7]
 8011ee2:	79fb      	ldrb	r3, [r7, #7]
 8011ee4:	2b05      	cmp	r3, #5
 8011ee6:	d905      	bls.n	8011ef4 <sensing_setup+0x98>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with L86, no GPS data will be avaliable");
				#endif
				(*Common.log_print)("*ES20");
 8011ee8:	4b88      	ldr	r3, [pc, #544]	; (801210c <sensing_setup+0x2b0>)
 8011eea:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011eee:	488d      	ldr	r0, [pc, #564]	; (8012124 <sensing_setup+0x2c8>)
 8011ef0:	4798      	blx	r3
				break;
 8011ef2:	e00c      	b.n	8011f0e <sensing_setup+0xb2>
			}

			delay(500);
 8011ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011ef8:	f7f4 fab0 	bl	800645c <HAL_Delay>
		while (!GPS_init(&(Common.gps)))
 8011efc:	488a      	ldr	r0, [pc, #552]	; (8012128 <sensing_setup+0x2cc>)
 8011efe:	f7f0 fc15 	bl	800272c <GPS_init>
 8011f02:	4603      	mov	r3, r0
 8011f04:	f083 0301 	eor.w	r3, r3, #1
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d1e6      	bne.n	8011edc <sensing_setup+0x80>
			#if SENSING_DEBUG
				println("[SENSING] L86 init unsuccesfull, retrying...");
			#endif
		}
		Common.gps.active = true; //######################
 8011f0e:	4b7f      	ldr	r3, [pc, #508]	; (801210c <sensing_setup+0x2b0>)
 8011f10:	2201      	movs	r2, #1
 8011f12:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
		Common.gps.paused = false;
 8011f16:	4b7d      	ldr	r3, [pc, #500]	; (801210c <sensing_setup+0x2b0>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
		if (Common.gps.active && !Common.gps.fix)
 8011f1e:	4b7b      	ldr	r3, [pc, #492]	; (801210c <sensing_setup+0x2b0>)
 8011f20:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d013      	beq.n	8011f50 <sensing_setup+0xf4>
 8011f28:	4b78      	ldr	r3, [pc, #480]	; (801210c <sensing_setup+0x2b0>)
 8011f2a:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8011f2e:	f083 0301 	eor.w	r3, r3, #1
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00b      	beq.n	8011f50 <sensing_setup+0xf4>
		{
			Common.gps.latitudeDegrees = DEFAULT_TARGET_LAT;
 8011f38:	4b74      	ldr	r3, [pc, #464]	; (801210c <sensing_setup+0x2b0>)
 8011f3a:	4a7c      	ldr	r2, [pc, #496]	; (801212c <sensing_setup+0x2d0>)
 8011f3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			Common.gps.longitudeDegrees = DEFAULT_TARGET_LON;
 8011f40:	4b72      	ldr	r3, [pc, #456]	; (801210c <sensing_setup+0x2b0>)
 8011f42:	4a7b      	ldr	r2, [pc, #492]	; (8012130 <sensing_setup+0x2d4>)
 8011f44:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
			Common.gps.altitude = DEFAULT_TARGET_ALT;
 8011f48:	4b70      	ldr	r3, [pc, #448]	; (801210c <sensing_setup+0x2b0>)
 8011f4a:	4a7a      	ldr	r2, [pc, #488]	; (8012134 <sensing_setup+0x2d8>)
 8011f4c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		(*Common.log_print)("*WS20");
		Common.gps.active = false;
	#endif

	#if IMU_ENABLE
		attempts = 0;
 8011f50:	2300      	movs	r3, #0
 8011f52:	71fb      	strb	r3, [r7, #7]
		Common.mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 8011f54:	4b6d      	ldr	r3, [pc, #436]	; (801210c <sensing_setup+0x2b0>)
 8011f56:	22d2      	movs	r2, #210	; 0xd2
 8011f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		Common.mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 8011f5c:	4b6b      	ldr	r3, [pc, #428]	; (801210c <sensing_setup+0x2b0>)
 8011f5e:	2218      	movs	r2, #24
 8011f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		Common.mpu.i2c = Get_I2C1_Instance();
 8011f64:	f001 fbf0 	bl	8013748 <Get_I2C1_Instance>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	4b68      	ldr	r3, [pc, #416]	; (801210c <sensing_setup+0x2b0>)
 8011f6c:	639a      	str	r2, [r3, #56]	; 0x38
		#if SENSING_DEBUG
			println("[SENSING] Initializing MPU9250");
		#endif
		(*Common.log_print)("*S30");
 8011f6e:	4b67      	ldr	r3, [pc, #412]	; (801210c <sensing_setup+0x2b0>)
 8011f70:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011f74:	4870      	ldr	r0, [pc, #448]	; (8012138 <sensing_setup+0x2dc>)
 8011f76:	4798      	blx	r3

		Common.mpu.active = true;
 8011f78:	4b64      	ldr	r3, [pc, #400]	; (801210c <sensing_setup+0x2b0>)
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		while (!MPU9250_present(&(Common.mpu)))
 8011f80:	e013      	b.n	8011faa <sensing_setup+0x14e>
		{
			if (++attempts > 5)
 8011f82:	79fb      	ldrb	r3, [r7, #7]
 8011f84:	3301      	adds	r3, #1
 8011f86:	71fb      	strb	r3, [r7, #7]
 8011f88:	79fb      	ldrb	r3, [r7, #7]
 8011f8a:	2b05      	cmp	r3, #5
 8011f8c:	d909      	bls.n	8011fa2 <sensing_setup+0x146>
			{
				#if SENSING_DEBUG
					println("error: [SENSING] No connection with MPU9250, no IMU data will be avaliable");
				#endif
				(*Common.log_print)("*ES30");
 8011f8e:	4b5f      	ldr	r3, [pc, #380]	; (801210c <sensing_setup+0x2b0>)
 8011f90:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011f94:	4869      	ldr	r0, [pc, #420]	; (801213c <sensing_setup+0x2e0>)
 8011f96:	4798      	blx	r3
				Common.mpu.active = false;
 8011f98:	4b5c      	ldr	r3, [pc, #368]	; (801210c <sensing_setup+0x2b0>)
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
				break;
 8011fa0:	e00c      	b.n	8011fbc <sensing_setup+0x160>
			}

			delay(500);
 8011fa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011fa6:	f7f4 fa59 	bl	800645c <HAL_Delay>
		while (!MPU9250_present(&(Common.mpu)))
 8011faa:	4865      	ldr	r0, [pc, #404]	; (8012140 <sensing_setup+0x2e4>)
 8011fac:	f7f2 f9a6 	bl	80042fc <MPU9250_present>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	f083 0301 	eor.w	r3, r3, #1
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1e2      	bne.n	8011f82 <sensing_setup+0x126>
			#if SENSING_DEBUG
				println("[SENSING] MPU9250 init unsuccesfull, retrying...");
			#endif
		}
		if (Common.mpu.active)
 8011fbc:	4b53      	ldr	r3, [pc, #332]	; (801210c <sensing_setup+0x2b0>)
 8011fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d008      	beq.n	8011fd8 <sensing_setup+0x17c>
		{
			#if SENSING_DEBUG
				println("[SENSING] Initializing AK8963");
			#endif
			(*Common.log_print)("*S31");
 8011fc6:	4b51      	ldr	r3, [pc, #324]	; (801210c <sensing_setup+0x2b0>)
 8011fc8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011fcc:	485d      	ldr	r0, [pc, #372]	; (8012144 <sensing_setup+0x2e8>)
 8011fce:	4798      	blx	r3
			while (!AK8963_present(&(Common.mpu)) && false) //####################
 8011fd0:	bf00      	nop
 8011fd2:	485b      	ldr	r0, [pc, #364]	; (8012140 <sensing_setup+0x2e4>)
 8011fd4:	f7f2 f9a7 	bl	8004326 <AK8963_present>
				#if SENSING_DEBUG
					println("[SENSING] AK8963 init unsuccesfull, retrying...");
				#endif
			}
		}
		if (Common.mpu.active)
 8011fd8:	4b4c      	ldr	r3, [pc, #304]	; (801210c <sensing_setup+0x2b0>)
 8011fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d04e      	beq.n	8012080 <sensing_setup+0x224>
		{	
			#if SENSING_DEBUG
					println("[SENSING] Checking MPU9250 readings. Don't move the board!");
			#endif
			(*Common.log_print)("*S32");
 8011fe2:	4b4a      	ldr	r3, [pc, #296]	; (801210c <sensing_setup+0x2b0>)
 8011fe4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8011fe8:	4857      	ldr	r0, [pc, #348]	; (8012148 <sensing_setup+0x2ec>)
 8011fea:	4798      	blx	r3
			attempts = 0;
 8011fec:	2300      	movs	r3, #0
 8011fee:	71fb      	strb	r3, [r7, #7]
			writePin(LEDA, HIGH);
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	4855      	ldr	r0, [pc, #340]	; (801214c <sensing_setup+0x2f0>)
 8011ff6:	f7f5 f8af 	bl	8007158 <HAL_GPIO_WritePin>
			delay(500);
 8011ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011ffe:	f7f4 fa2d 	bl	800645c <HAL_Delay>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8012002:	e00f      	b.n	8012024 <sensing_setup+0x1c8>
			{
				if (++attempts > 5)
 8012004:	79fb      	ldrb	r3, [r7, #7]
 8012006:	3301      	adds	r3, #1
 8012008:	71fb      	strb	r3, [r7, #7]
 801200a:	79fb      	ldrb	r3, [r7, #7]
 801200c:	2b05      	cmp	r3, #5
 801200e:	d905      	bls.n	801201c <sensing_setup+0x1c0>
				{
					#if SENSING_DEBUG
						println("warning: [SENSING] MPU9250 SelfTest not passed, performance issues may occur");
					#endif
					(*Common.log_print)("*WS32");
 8012010:	4b3e      	ldr	r3, [pc, #248]	; (801210c <sensing_setup+0x2b0>)
 8012012:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8012016:	484e      	ldr	r0, [pc, #312]	; (8012150 <sensing_setup+0x2f4>)
 8012018:	4798      	blx	r3
					break;
 801201a:	e00c      	b.n	8012036 <sensing_setup+0x1da>
				}
				
				delay(500);
 801201c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012020:	f7f4 fa1c 	bl	800645c <HAL_Delay>
			while (!MPU9250_SelfTest(&(Common.mpu)))
 8012024:	4846      	ldr	r0, [pc, #280]	; (8012140 <sensing_setup+0x2e4>)
 8012026:	f7f2 fc73 	bl	8004910 <MPU9250_SelfTest>
 801202a:	4603      	mov	r3, r0
 801202c:	f083 0301 	eor.w	r3, r3, #1
 8012030:	b2db      	uxtb	r3, r3
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1e6      	bne.n	8012004 <sensing_setup+0x1a8>
				#if SENSING_DEBUG
					println("[SENSING] MPU9250 SelfTest failed, retrying...");
				#endif
			}
			(*Common.log_print)("*S33");
 8012036:	4b35      	ldr	r3, [pc, #212]	; (801210c <sensing_setup+0x2b0>)
 8012038:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801203c:	4845      	ldr	r0, [pc, #276]	; (8012154 <sensing_setup+0x2f8>)
 801203e:	4798      	blx	r3
			if (mpu9250_default_config.calibrate)
 8012040:	4b45      	ldr	r3, [pc, #276]	; (8012158 <sensing_setup+0x2fc>)
 8012042:	7c1b      	ldrb	r3, [r3, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d104      	bne.n	8012052 <sensing_setup+0x1f6>
			else
			{
				#if SENSING_DEBUG
					println("warning: [SENSING] Skipping IMU calibration!");
				#endif
				(*Common.log_print)("*WS33");
 8012048:	4b30      	ldr	r3, [pc, #192]	; (801210c <sensing_setup+0x2b0>)
 801204a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801204e:	4843      	ldr	r0, [pc, #268]	; (801215c <sensing_setup+0x300>)
 8012050:	4798      	blx	r3
			}
			MPU9250_init(&(Common.mpu), &mpu9250_default_config);
 8012052:	4941      	ldr	r1, [pc, #260]	; (8012158 <sensing_setup+0x2fc>)
 8012054:	483a      	ldr	r0, [pc, #232]	; (8012140 <sensing_setup+0x2e4>)
 8012056:	f7f1 ff6f 	bl	8003f38 <MPU9250_init>
			writePin(LEDA, LOW);
 801205a:	2200      	movs	r2, #0
 801205c:	2101      	movs	r1, #1
 801205e:	483b      	ldr	r0, [pc, #236]	; (801214c <sensing_setup+0x2f0>)
 8012060:	f7f5 f87a 	bl	8007158 <HAL_GPIO_WritePin>
			writePin(LEDB, HIGH);
 8012064:	2201      	movs	r2, #1
 8012066:	2102      	movs	r1, #2
 8012068:	4838      	ldr	r0, [pc, #224]	; (801214c <sensing_setup+0x2f0>)
 801206a:	f7f5 f875 	bl	8007158 <HAL_GPIO_WritePin>
			{
				#if SENSING_DEBUG
					println("[SENSING] Performing AK8963 calibration. Rotate the board.");
				#endif
			}
			AK8963_init(&(Common.mpu), &mpu9250_default_config);
 801206e:	493a      	ldr	r1, [pc, #232]	; (8012158 <sensing_setup+0x2fc>)
 8012070:	4833      	ldr	r0, [pc, #204]	; (8012140 <sensing_setup+0x2e4>)
 8012072:	f7f2 f89d 	bl	80041b0 <AK8963_init>
			writePin(LEDB, LOW);
 8012076:	2200      	movs	r2, #0
 8012078:	2102      	movs	r1, #2
 801207a:	4834      	ldr	r0, [pc, #208]	; (801214c <sensing_setup+0x2f0>)
 801207c:	f7f5 f86c 	bl	8007158 <HAL_GPIO_WritePin>
		}
	#else
		#if SENSING_DEBUG
			println("warning: [SENSING] SPS30 DISABLED!");
		#endif
		(*Common.log_print)("*WS40");
 8012080:	4b22      	ldr	r3, [pc, #136]	; (801210c <sensing_setup+0x2b0>)
 8012082:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8012086:	4836      	ldr	r0, [pc, #216]	; (8012160 <sensing_setup+0x304>)
 8012088:	4798      	blx	r3
		Common.sps.active = false;
 801208a:	4b20      	ldr	r3, [pc, #128]	; (801210c <sensing_setup+0x2b0>)
 801208c:	2200      	movs	r2, #0
 801208e:	f883 27dd 	strb.w	r2, [r3, #2013]	; 0x7dd
		println("- BMP %s", Common.bmp.active ? "active" : "not active");
		println("- GPS %s", Common.gps.active ? "active" : "not active");
		println("- IMU %s", Common.mpu.active ? "active" : "not active");
		println("- SPS %s", Common.sps.active ? "active" : "not active");
	#endif
	if (!Common.bmp.active || !Common.gps.active || !Common.mpu.active || !Common.sps.active) (*Common.log_print)("*WS00");
 8012092:	4b1e      	ldr	r3, [pc, #120]	; (801210c <sensing_setup+0x2b0>)
 8012094:	7f1b      	ldrb	r3, [r3, #28]
 8012096:	f083 0301 	eor.w	r3, r3, #1
 801209a:	b2db      	uxtb	r3, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	d117      	bne.n	80120d0 <sensing_setup+0x274>
 80120a0:	4b1a      	ldr	r3, [pc, #104]	; (801210c <sensing_setup+0x2b0>)
 80120a2:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80120a6:	f083 0301 	eor.w	r3, r3, #1
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10f      	bne.n	80120d0 <sensing_setup+0x274>
 80120b0:	4b16      	ldr	r3, [pc, #88]	; (801210c <sensing_setup+0x2b0>)
 80120b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120b6:	f083 0301 	eor.w	r3, r3, #1
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d107      	bne.n	80120d0 <sensing_setup+0x274>
 80120c0:	4b12      	ldr	r3, [pc, #72]	; (801210c <sensing_setup+0x2b0>)
 80120c2:	f893 37dd 	ldrb.w	r3, [r3, #2013]	; 0x7dd
 80120c6:	f083 0301 	eor.w	r3, r3, #1
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d004      	beq.n	80120da <sensing_setup+0x27e>
 80120d0:	4b0e      	ldr	r3, [pc, #56]	; (801210c <sensing_setup+0x2b0>)
 80120d2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80120d6:	4823      	ldr	r0, [pc, #140]	; (8012164 <sensing_setup+0x308>)
 80120d8:	4798      	blx	r3

	return (Common.bmp.active || !BMP_ENABLE) && (Common.gps.active || !GPS_ENABLE) && (Common.mpu.active || !IMU_ENABLE) && (Common.sps.active || !SPS_ENABLE);
 80120da:	4b0c      	ldr	r3, [pc, #48]	; (801210c <sensing_setup+0x2b0>)
 80120dc:	7f1b      	ldrb	r3, [r3, #28]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00b      	beq.n	80120fa <sensing_setup+0x29e>
 80120e2:	4b0a      	ldr	r3, [pc, #40]	; (801210c <sensing_setup+0x2b0>)
 80120e4:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d006      	beq.n	80120fa <sensing_setup+0x29e>
 80120ec:	4b07      	ldr	r3, [pc, #28]	; (801210c <sensing_setup+0x2b0>)
 80120ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <sensing_setup+0x29e>
 80120f6:	2301      	movs	r3, #1
 80120f8:	e000      	b.n	80120fc <sensing_setup+0x2a0>
 80120fa:	2300      	movs	r3, #0
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	b2db      	uxtb	r3, r3
}
 8012102:	4618      	mov	r0, r3
 8012104:	3708      	adds	r7, #8
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20000e1c 	.word	0x20000e1c
 8012110:	0801bd00 	.word	0x0801bd00
 8012114:	0801bd08 	.word	0x0801bd08
 8012118:	0801bd10 	.word	0x0801bd10
 801211c:	20000124 	.word	0x20000124
 8012120:	0801bd18 	.word	0x0801bd18
 8012124:	0801bd20 	.word	0x0801bd20
 8012128:	20000f10 	.word	0x20000f10
 801212c:	424b5597 	.word	0x424b5597
 8012130:	41844107 	.word	0x41844107
 8012134:	42200000 	.word	0x42200000
 8012138:	0801bd28 	.word	0x0801bd28
 801213c:	0801bd30 	.word	0x0801bd30
 8012140:	20000e54 	.word	0x20000e54
 8012144:	0801bd38 	.word	0x0801bd38
 8012148:	0801bd40 	.word	0x0801bd40
 801214c:	40020800 	.word	0x40020800
 8012150:	0801bd48 	.word	0x0801bd48
 8012154:	0801bd50 	.word	0x0801bd50
 8012158:	2000012c 	.word	0x2000012c
 801215c:	0801bd58 	.word	0x0801bd58
 8012160:	0801bd60 	.word	0x0801bd60
 8012164:	0801bd68 	.word	0x0801bd68

08012168 <sensing_loop>:

static void sensing_loop(void)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	af00      	add	r7, sp, #0
	#if BMP_ENABLE
		if (Common.bmp.active && millis() - lastBmpRead >= SENSING_BMP_DELAY)
 801216c:	4b25      	ldr	r3, [pc, #148]	; (8012204 <sensing_loop+0x9c>)
 801216e:	7f1b      	ldrb	r3, [r3, #28]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d034      	beq.n	80121de <sensing_loop+0x76>
 8012174:	f7ff fb0e 	bl	8011794 <millis>
 8012178:	4602      	mov	r2, r0
 801217a:	4b23      	ldr	r3, [pc, #140]	; (8012208 <sensing_loop+0xa0>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	2b31      	cmp	r3, #49	; 0x31
 8012182:	d92c      	bls.n	80121de <sensing_loop+0x76>
		{
			Common.bmp.alt_dx = Common.bmp.altitude;
 8012184:	4b1f      	ldr	r3, [pc, #124]	; (8012204 <sensing_loop+0x9c>)
 8012186:	695b      	ldr	r3, [r3, #20]
 8012188:	4a1e      	ldr	r2, [pc, #120]	; (8012204 <sensing_loop+0x9c>)
 801218a:	6193      	str	r3, [r2, #24]
			bmp280_update(&(Common.bmp));
 801218c:	481d      	ldr	r0, [pc, #116]	; (8012204 <sensing_loop+0x9c>)
 801218e:	f7f0 f997 	bl	80024c0 <bmp280_update>
			Common.bmp.alt_dx -= Common.bmp.altitude;
 8012192:	4b1c      	ldr	r3, [pc, #112]	; (8012204 <sensing_loop+0x9c>)
 8012194:	ed93 7a06 	vldr	s14, [r3, #24]
 8012198:	4b1a      	ldr	r3, [pc, #104]	; (8012204 <sensing_loop+0x9c>)
 801219a:	edd3 7a05 	vldr	s15, [r3, #20]
 801219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121a2:	4b18      	ldr	r3, [pc, #96]	; (8012204 <sensing_loop+0x9c>)
 80121a4:	edc3 7a06 	vstr	s15, [r3, #24]
			Common.bmp.alt_dx *= 1000 / (millis() - lastBmpRead);
 80121a8:	f7ff faf4 	bl	8011794 <millis>
 80121ac:	4602      	mov	r2, r0
 80121ae:	4b16      	ldr	r3, [pc, #88]	; (8012208 <sensing_loop+0xa0>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	1ad3      	subs	r3, r2, r3
 80121b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80121b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80121bc:	4b11      	ldr	r3, [pc, #68]	; (8012204 <sensing_loop+0x9c>)
 80121be:	ed93 7a06 	vldr	s14, [r3, #24]
 80121c2:	ee07 2a90 	vmov	s15, r2
 80121c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121ce:	4b0d      	ldr	r3, [pc, #52]	; (8012204 <sensing_loop+0x9c>)
 80121d0:	edc3 7a06 	vstr	s15, [r3, #24]
			lastBmpRead = millis();
 80121d4:	f7ff fade 	bl	8011794 <millis>
 80121d8:	4602      	mov	r2, r0
 80121da:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <sensing_loop+0xa0>)
 80121dc:	601a      	str	r2, [r3, #0]
		}
	#endif

	#if GPS_ENABLE
		if (Common.gps.active)
 80121de:	4b09      	ldr	r3, [pc, #36]	; (8012204 <sensing_loop+0x9c>)
 80121e0:	f893 3311 	ldrb.w	r3, [r3, #785]	; 0x311
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d002      	beq.n	80121ee <sensing_loop+0x86>
		{
			GPS_update(&(Common.gps));
 80121e8:	4808      	ldr	r0, [pc, #32]	; (801220c <sensing_loop+0xa4>)
 80121ea:	f7f0 fc73 	bl	8002ad4 <GPS_update>
			//writePin(LEDC, Common.gps.fix);
		}
	#endif

	#if IMU_ENABLE
		if (Common.mpu.active) MPU9250_update(&(Common.mpu));
 80121ee:	4b05      	ldr	r3, [pc, #20]	; (8012204 <sensing_loop+0x9c>)
 80121f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <sensing_loop+0x96>
 80121f8:	4805      	ldr	r0, [pc, #20]	; (8012210 <sensing_loop+0xa8>)
 80121fa:	f7f2 f8a9 	bl	8004350 <MPU9250_update>
	#if SPS_ENABLE
		if (Common.sps.active && millis() - lastSpsRead >= SENSING_SPS_DELAY) { SPS30_update(&(Common.sps)); lastSpsRead = millis(); }
	#endif

	//SPS30
}
 80121fe:	bf00      	nop
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	20000e1c 	.word	0x20000e1c
 8012208:	20001ce8 	.word	0x20001ce8
 801220c:	20000f10 	.word	0x20000f10
 8012210:	20000e54 	.word	0x20000e54
 8012214:	00000000 	.word	0x00000000

08012218 <PID>:
uint32_t lastAlgo;

float yaw_last_error;

static void PID(float yaw, float target_yaw)
{
 8012218:	b5b0      	push	{r4, r5, r7, lr}
 801221a:	ed2d 8b02 	vpush	{d8}
 801221e:	b08a      	sub	sp, #40	; 0x28
 8012220:	af00      	add	r7, sp, #0
 8012222:	ed87 0a01 	vstr	s0, [r7, #4]
 8012226:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.85;	// scale of motor power
 801222a:	4b97      	ldr	r3, [pc, #604]	; (8012488 <PID+0x270>)
 801222c:	61bb      	str	r3, [r7, #24]
	float TurboMode= 50.0;
 801222e:	4b97      	ldr	r3, [pc, #604]	; (801248c <PID+0x274>)
 8012230:	617b      	str	r3, [r7, #20]
	float error= target_yaw-yaw;
 8012232:	ed97 7a00 	vldr	s14, [r7]
 8012236:	edd7 7a01 	vldr	s15, [r7, #4]
 801223a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801223e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float thrust;

	if (error<-180.0) //ulomne modulo
 8012242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012246:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8012490 <PID+0x278>
 801224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012252:	d50c      	bpl.n	801226e <PID+0x56>
		error = target_yaw-yaw+360.0;
 8012254:	ed97 7a00 	vldr	s14, [r7]
 8012258:	edd7 7a01 	vldr	s15, [r7, #4]
 801225c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012260:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8012494 <PID+0x27c>
 8012264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012268:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 801226c:	e014      	b.n	8012298 <PID+0x80>
	else if (error>180.0)
 801226e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012272:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8012498 <PID+0x280>
 8012276:	eef4 7ac7 	vcmpe.f32	s15, s14
 801227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801227e:	dd0b      	ble.n	8012298 <PID+0x80>
		error = target_yaw-yaw-360.0;
 8012280:	ed97 7a00 	vldr	s14, [r7]
 8012284:	edd7 7a01 	vldr	s15, [r7, #4]
 8012288:	ee77 7a67 	vsub.f32	s15, s14, s15
 801228c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8012494 <PID+0x27c>
 8012290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012294:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (error>-10 && error<10)
 8012298:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801229c:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80122a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a8:	dd0b      	ble.n	80122c2 <PID+0xaa>
 80122aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80122ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80122b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122ba:	d502      	bpl.n	80122c2 <PID+0xaa>
		thrust = 340.0;
 80122bc:	4b77      	ldr	r3, [pc, #476]	; (801249c <PID+0x284>)
 80122be:	623b      	str	r3, [r7, #32]
 80122c0:	e007      	b.n	80122d2 <PID+0xba>
	else
		thrust = 180.0+TurboMode;
 80122c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80122c6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8012498 <PID+0x280>
 80122ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122ce:	edc7 7a08 	vstr	s15, [r7, #32]

	float pid_p, pid_i, pid_d;

	pid_p=PID_kp*error;
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	613b      	str	r3, [r7, #16]
	pid_d=PID_kd*((error-yaw_last_error)/(millis() - lastAlgo));
 80122d6:	4b72      	ldr	r3, [pc, #456]	; (80124a0 <PID+0x288>)
 80122d8:	edd3 7a00 	vldr	s15, [r3]
 80122dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80122e0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80122e4:	f7ff fa56 	bl	8011794 <millis>
 80122e8:	4602      	mov	r2, r0
 80122ea:	4b6e      	ldr	r3, [pc, #440]	; (80124a4 <PID+0x28c>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	1ad3      	subs	r3, r2, r3
 80122f0:	ee07 3a90 	vmov	s15, r3
 80122f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80122f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80122fc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80124a8 <PID+0x290>
 8012300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012304:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID_coef;
	//if (error>-15 && error <15)
	//	PID_coef=pid_p+pid_d+pid_i;
	//else
		PID_coef=pid_p+pid_d;
 8012308:	ed97 7a04 	vldr	s14, [r7, #16]
 801230c:	edd7 7a03 	vldr	s15, [r7, #12]
 8012310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012314:	edc7 7a07 	vstr	s15, [r7, #28]

	if (PID_coef>180.0-TurboMode)
 8012318:	69f8      	ldr	r0, [r7, #28]
 801231a:	f7ee f925 	bl	8000568 <__aeabi_f2d>
 801231e:	4604      	mov	r4, r0
 8012320:	460d      	mov	r5, r1
 8012322:	6978      	ldr	r0, [r7, #20]
 8012324:	f7ee f920 	bl	8000568 <__aeabi_f2d>
 8012328:	4602      	mov	r2, r0
 801232a:	460b      	mov	r3, r1
 801232c:	f04f 0000 	mov.w	r0, #0
 8012330:	495e      	ldr	r1, [pc, #376]	; (80124ac <PID+0x294>)
 8012332:	f7ed ffb9 	bl	80002a8 <__aeabi_dsub>
 8012336:	4602      	mov	r2, r0
 8012338:	460b      	mov	r3, r1
 801233a:	4620      	mov	r0, r4
 801233c:	4629      	mov	r1, r5
 801233e:	f7ee fbfb 	bl	8000b38 <__aeabi_dcmpgt>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d008      	beq.n	801235a <PID+0x142>
			PID_coef=180.0-TurboMode;
 8012348:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8012498 <PID+0x280>
 801234c:	edd7 7a05 	vldr	s15, [r7, #20]
 8012350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012354:	edc7 7a07 	vstr	s15, [r7, #28]
 8012358:	e01d      	b.n	8012396 <PID+0x17e>
		else if (PID_coef<-180.0+TurboMode)
 801235a:	69f8      	ldr	r0, [r7, #28]
 801235c:	f7ee f904 	bl	8000568 <__aeabi_f2d>
 8012360:	4604      	mov	r4, r0
 8012362:	460d      	mov	r5, r1
 8012364:	6978      	ldr	r0, [r7, #20]
 8012366:	f7ee f8ff 	bl	8000568 <__aeabi_f2d>
 801236a:	f04f 0200 	mov.w	r2, #0
 801236e:	4b4f      	ldr	r3, [pc, #316]	; (80124ac <PID+0x294>)
 8012370:	f7ed ff9a 	bl	80002a8 <__aeabi_dsub>
 8012374:	4602      	mov	r2, r0
 8012376:	460b      	mov	r3, r1
 8012378:	4620      	mov	r0, r4
 801237a:	4629      	mov	r1, r5
 801237c:	f7ee fbbe 	bl	8000afc <__aeabi_dcmplt>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d007      	beq.n	8012396 <PID+0x17e>
			PID_coef=-180.0+TurboMode;
 8012386:	edd7 7a05 	vldr	s15, [r7, #20]
 801238a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012498 <PID+0x280>
 801238e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012392:	edc7 7a07 	vstr	s15, [r7, #28]

	setMotors(0.2 * ((thrust - PID_coef) * maxPower * (1.0 / 360.0)) + 0.6, 0.2 * ((thrust + PID_coef) * maxPower * (1.0 / 360.0)) + 0.6);
 8012396:	ed97 7a08 	vldr	s14, [r7, #32]
 801239a:	edd7 7a07 	vldr	s15, [r7, #28]
 801239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80123a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80123a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123aa:	ee17 0a90 	vmov	r0, s15
 80123ae:	f7ee f8db 	bl	8000568 <__aeabi_f2d>
 80123b2:	a32f      	add	r3, pc, #188	; (adr r3, 8012470 <PID+0x258>)
 80123b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b8:	f7ee f92e 	bl	8000618 <__aeabi_dmul>
 80123bc:	4603      	mov	r3, r0
 80123be:	460c      	mov	r4, r1
 80123c0:	4618      	mov	r0, r3
 80123c2:	4621      	mov	r1, r4
 80123c4:	a32c      	add	r3, pc, #176	; (adr r3, 8012478 <PID+0x260>)
 80123c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ca:	f7ee f925 	bl	8000618 <__aeabi_dmul>
 80123ce:	4603      	mov	r3, r0
 80123d0:	460c      	mov	r4, r1
 80123d2:	4618      	mov	r0, r3
 80123d4:	4621      	mov	r1, r4
 80123d6:	a32a      	add	r3, pc, #168	; (adr r3, 8012480 <PID+0x268>)
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	f7ed ff66 	bl	80002ac <__adddf3>
 80123e0:	4603      	mov	r3, r0
 80123e2:	460c      	mov	r4, r1
 80123e4:	4618      	mov	r0, r3
 80123e6:	4621      	mov	r1, r4
 80123e8:	f7ee fc0e 	bl	8000c08 <__aeabi_d2f>
 80123ec:	4605      	mov	r5, r0
 80123ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80123f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80123f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80123fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80123fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012402:	ee17 0a90 	vmov	r0, s15
 8012406:	f7ee f8af 	bl	8000568 <__aeabi_f2d>
 801240a:	a319      	add	r3, pc, #100	; (adr r3, 8012470 <PID+0x258>)
 801240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012410:	f7ee f902 	bl	8000618 <__aeabi_dmul>
 8012414:	4603      	mov	r3, r0
 8012416:	460c      	mov	r4, r1
 8012418:	4618      	mov	r0, r3
 801241a:	4621      	mov	r1, r4
 801241c:	a316      	add	r3, pc, #88	; (adr r3, 8012478 <PID+0x260>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	f7ee f8f9 	bl	8000618 <__aeabi_dmul>
 8012426:	4603      	mov	r3, r0
 8012428:	460c      	mov	r4, r1
 801242a:	4618      	mov	r0, r3
 801242c:	4621      	mov	r1, r4
 801242e:	a314      	add	r3, pc, #80	; (adr r3, 8012480 <PID+0x268>)
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	f7ed ff3a 	bl	80002ac <__adddf3>
 8012438:	4603      	mov	r3, r0
 801243a:	460c      	mov	r4, r1
 801243c:	4618      	mov	r0, r3
 801243e:	4621      	mov	r1, r4
 8012440:	f7ee fbe2 	bl	8000c08 <__aeabi_d2f>
 8012444:	4603      	mov	r3, r0
 8012446:	ee00 3a90 	vmov	s1, r3
 801244a:	ee00 5a10 	vmov	s0, r5
 801244e:	f7ee fe61 	bl	8001114 <setMotors>

	//setMotors(maxPower, maxPower*0.9); //prawie skalibrowane
	//setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	yaw_last_error=error;
 8012452:	4a13      	ldr	r2, [pc, #76]	; (80124a0 <PID+0x288>)
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8012458:	f7ff f99c 	bl	8011794 <millis>
 801245c:	4602      	mov	r2, r0
 801245e:	4b11      	ldr	r3, [pc, #68]	; (80124a4 <PID+0x28c>)
 8012460:	601a      	str	r2, [r3, #0]
}
 8012462:	bf00      	nop
 8012464:	3728      	adds	r7, #40	; 0x28
 8012466:	46bd      	mov	sp, r7
 8012468:	ecbd 8b02 	vpop	{d8}
 801246c:	bdb0      	pop	{r4, r5, r7, pc}
 801246e:	bf00      	nop
 8012470:	16c16c17 	.word	0x16c16c17
 8012474:	3f66c16c 	.word	0x3f66c16c
 8012478:	9999999a 	.word	0x9999999a
 801247c:	3fc99999 	.word	0x3fc99999
 8012480:	33333333 	.word	0x33333333
 8012484:	3fe33333 	.word	0x3fe33333
 8012488:	3f59999a 	.word	0x3f59999a
 801248c:	42480000 	.word	0x42480000
 8012490:	c3340000 	.word	0xc3340000
 8012494:	43b40000 	.word	0x43b40000
 8012498:	43340000 	.word	0x43340000
 801249c:	43aa0000 	.word	0x43aa0000
 80124a0:	20001cf8 	.word	0x20001cf8
 80124a4:	20001cf0 	.word	0x20001cf0
 80124a8:	43fa0000 	.word	0x43fa0000
 80124ac:	40668000 	.word	0x40668000

080124b0 <bearing>:

static float bearing(float lat, float lon, float lat2, float lon2)
{
 80124b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80124b4:	b08c      	sub	sp, #48	; 0x30
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	ed87 0a03 	vstr	s0, [r7, #12]
 80124bc:	edc7 0a02 	vstr	s1, [r7, #8]
 80124c0:	ed87 1a01 	vstr	s2, [r7, #4]
 80124c4:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7ee f84d 	bl	8000568 <__aeabi_f2d>
 80124ce:	a39e      	add	r3, pc, #632	; (adr r3, 8012748 <bearing+0x298>)
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f7ee f8a0 	bl	8000618 <__aeabi_dmul>
 80124d8:	4603      	mov	r3, r0
 80124da:	460c      	mov	r4, r1
 80124dc:	4618      	mov	r0, r3
 80124de:	4621      	mov	r1, r4
 80124e0:	f04f 0200 	mov.w	r2, #0
 80124e4:	4b9c      	ldr	r3, [pc, #624]	; (8012758 <bearing+0x2a8>)
 80124e6:	f7ee f9c1 	bl	800086c <__aeabi_ddiv>
 80124ea:	4603      	mov	r3, r0
 80124ec:	460c      	mov	r4, r1
 80124ee:	4618      	mov	r0, r3
 80124f0:	4621      	mov	r1, r4
 80124f2:	f7ee fb89 	bl	8000c08 <__aeabi_d2f>
 80124f6:	4603      	mov	r3, r0
 80124f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f7ee f834 	bl	8000568 <__aeabi_f2d>
 8012500:	a391      	add	r3, pc, #580	; (adr r3, 8012748 <bearing+0x298>)
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f7ee f887 	bl	8000618 <__aeabi_dmul>
 801250a:	4603      	mov	r3, r0
 801250c:	460c      	mov	r4, r1
 801250e:	4618      	mov	r0, r3
 8012510:	4621      	mov	r1, r4
 8012512:	f04f 0200 	mov.w	r2, #0
 8012516:	4b90      	ldr	r3, [pc, #576]	; (8012758 <bearing+0x2a8>)
 8012518:	f7ee f9a8 	bl	800086c <__aeabi_ddiv>
 801251c:	4603      	mov	r3, r0
 801251e:	460c      	mov	r4, r1
 8012520:	4618      	mov	r0, r3
 8012522:	4621      	mov	r1, r4
 8012524:	f7ee fb70 	bl	8000c08 <__aeabi_d2f>
 8012528:	4603      	mov	r3, r0
 801252a:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 801252c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012530:	edd7 7a03 	vldr	s15, [r7, #12]
 8012534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012538:	ee17 0a90 	vmov	r0, s15
 801253c:	f7ee f814 	bl	8000568 <__aeabi_f2d>
 8012540:	a381      	add	r3, pc, #516	; (adr r3, 8012748 <bearing+0x298>)
 8012542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012546:	f7ee f867 	bl	8000618 <__aeabi_dmul>
 801254a:	4603      	mov	r3, r0
 801254c:	460c      	mov	r4, r1
 801254e:	4618      	mov	r0, r3
 8012550:	4621      	mov	r1, r4
 8012552:	f04f 0200 	mov.w	r2, #0
 8012556:	4b80      	ldr	r3, [pc, #512]	; (8012758 <bearing+0x2a8>)
 8012558:	f7ee f988 	bl	800086c <__aeabi_ddiv>
 801255c:	4603      	mov	r3, r0
 801255e:	460c      	mov	r4, r1
 8012560:	4618      	mov	r0, r3
 8012562:	4621      	mov	r1, r4
 8012564:	f7ee fb50 	bl	8000c08 <__aeabi_d2f>
 8012568:	4603      	mov	r3, r0
 801256a:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 801256c:	ed97 7a00 	vldr	s14, [r7]
 8012570:	edd7 7a02 	vldr	s15, [r7, #8]
 8012574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012578:	ee17 0a90 	vmov	r0, s15
 801257c:	f7ed fff4 	bl	8000568 <__aeabi_f2d>
 8012580:	a371      	add	r3, pc, #452	; (adr r3, 8012748 <bearing+0x298>)
 8012582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012586:	f7ee f847 	bl	8000618 <__aeabi_dmul>
 801258a:	4603      	mov	r3, r0
 801258c:	460c      	mov	r4, r1
 801258e:	4618      	mov	r0, r3
 8012590:	4621      	mov	r1, r4
 8012592:	f04f 0200 	mov.w	r2, #0
 8012596:	4b70      	ldr	r3, [pc, #448]	; (8012758 <bearing+0x2a8>)
 8012598:	f7ee f968 	bl	800086c <__aeabi_ddiv>
 801259c:	4603      	mov	r3, r0
 801259e:	460c      	mov	r4, r1
 80125a0:	4618      	mov	r0, r3
 80125a2:	4621      	mov	r1, r4
 80125a4:	f7ee fb30 	bl	8000c08 <__aeabi_d2f>
 80125a8:	4603      	mov	r3, r0
 80125aa:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 80125ac:	6a38      	ldr	r0, [r7, #32]
 80125ae:	f7ed ffdb 	bl	8000568 <__aeabi_f2d>
 80125b2:	4603      	mov	r3, r0
 80125b4:	460c      	mov	r4, r1
 80125b6:	ec44 3b10 	vmov	d0, r3, r4
 80125ba:	f006 faa9 	bl	8018b10 <sin>
 80125be:	ec55 4b10 	vmov	r4, r5, d0
 80125c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125c4:	f7ed ffd0 	bl	8000568 <__aeabi_f2d>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	ec43 2b10 	vmov	d0, r2, r3
 80125d0:	f006 fa5a 	bl	8018a88 <cos>
 80125d4:	ec53 2b10 	vmov	r2, r3, d0
 80125d8:	4620      	mov	r0, r4
 80125da:	4629      	mov	r1, r5
 80125dc:	f7ee f81c 	bl	8000618 <__aeabi_dmul>
 80125e0:	4603      	mov	r3, r0
 80125e2:	460c      	mov	r4, r1
 80125e4:	4618      	mov	r0, r3
 80125e6:	4621      	mov	r1, r4
 80125e8:	f7ee fb0e 	bl	8000c08 <__aeabi_d2f>
 80125ec:	4603      	mov	r3, r0
 80125ee:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 80125f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125f2:	f7ed ffb9 	bl	8000568 <__aeabi_f2d>
 80125f6:	4603      	mov	r3, r0
 80125f8:	460c      	mov	r4, r1
 80125fa:	ec44 3b10 	vmov	d0, r3, r4
 80125fe:	f006 fa43 	bl	8018a88 <cos>
 8012602:	ec55 4b10 	vmov	r4, r5, d0
 8012606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012608:	f7ed ffae 	bl	8000568 <__aeabi_f2d>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	ec43 2b10 	vmov	d0, r2, r3
 8012614:	f006 fa7c 	bl	8018b10 <sin>
 8012618:	ec53 2b10 	vmov	r2, r3, d0
 801261c:	4620      	mov	r0, r4
 801261e:	4629      	mov	r1, r5
 8012620:	f7ed fffa 	bl	8000618 <__aeabi_dmul>
 8012624:	4603      	mov	r3, r0
 8012626:	460c      	mov	r4, r1
 8012628:	4625      	mov	r5, r4
 801262a:	461c      	mov	r4, r3
 801262c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801262e:	f7ed ff9b 	bl	8000568 <__aeabi_f2d>
 8012632:	4602      	mov	r2, r0
 8012634:	460b      	mov	r3, r1
 8012636:	ec43 2b10 	vmov	d0, r2, r3
 801263a:	f006 fa69 	bl	8018b10 <sin>
 801263e:	ec59 8b10 	vmov	r8, r9, d0
 8012642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012644:	f7ed ff90 	bl	8000568 <__aeabi_f2d>
 8012648:	4602      	mov	r2, r0
 801264a:	460b      	mov	r3, r1
 801264c:	ec43 2b10 	vmov	d0, r2, r3
 8012650:	f006 fa1a 	bl	8018a88 <cos>
 8012654:	ec53 2b10 	vmov	r2, r3, d0
 8012658:	4640      	mov	r0, r8
 801265a:	4649      	mov	r1, r9
 801265c:	f7ed ffdc 	bl	8000618 <__aeabi_dmul>
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	4690      	mov	r8, r2
 8012666:	4699      	mov	r9, r3
 8012668:	6a38      	ldr	r0, [r7, #32]
 801266a:	f7ed ff7d 	bl	8000568 <__aeabi_f2d>
 801266e:	4602      	mov	r2, r0
 8012670:	460b      	mov	r3, r1
 8012672:	ec43 2b10 	vmov	d0, r2, r3
 8012676:	f006 fa07 	bl	8018a88 <cos>
 801267a:	ec53 2b10 	vmov	r2, r3, d0
 801267e:	4640      	mov	r0, r8
 8012680:	4649      	mov	r1, r9
 8012682:	f7ed ffc9 	bl	8000618 <__aeabi_dmul>
 8012686:	4602      	mov	r2, r0
 8012688:	460b      	mov	r3, r1
 801268a:	4620      	mov	r0, r4
 801268c:	4629      	mov	r1, r5
 801268e:	f7ed fe0b 	bl	80002a8 <__aeabi_dsub>
 8012692:	4603      	mov	r3, r0
 8012694:	460c      	mov	r4, r1
 8012696:	4618      	mov	r0, r3
 8012698:	4621      	mov	r1, r4
 801269a:	f7ee fab5 	bl	8000c08 <__aeabi_d2f>
 801269e:	4603      	mov	r3, r0
 80126a0:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 80126a2:	69f8      	ldr	r0, [r7, #28]
 80126a4:	f7ed ff60 	bl	8000568 <__aeabi_f2d>
 80126a8:	4604      	mov	r4, r0
 80126aa:	460d      	mov	r5, r1
 80126ac:	69b8      	ldr	r0, [r7, #24]
 80126ae:	f7ed ff5b 	bl	8000568 <__aeabi_f2d>
 80126b2:	4602      	mov	r2, r0
 80126b4:	460b      	mov	r3, r1
 80126b6:	ec43 2b11 	vmov	d1, r2, r3
 80126ba:	ec45 4b10 	vmov	d0, r4, r5
 80126be:	f006 fac7 	bl	8018c50 <atan2>
 80126c2:	ec54 3b10 	vmov	r3, r4, d0
 80126c6:	4618      	mov	r0, r3
 80126c8:	4621      	mov	r1, r4
 80126ca:	f7ee fa9d 	bl	8000c08 <__aeabi_d2f>
 80126ce:	4603      	mov	r3, r0
 80126d0:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;			// radians to degrees
 80126d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80126d6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801275c <bearing+0x2ac>
 80126da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126de:	ee17 0a90 	vmov	r0, s15
 80126e2:	f7ed ff41 	bl	8000568 <__aeabi_f2d>
 80126e6:	a318      	add	r3, pc, #96	; (adr r3, 8012748 <bearing+0x298>)
 80126e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ec:	f7ee f8be 	bl	800086c <__aeabi_ddiv>
 80126f0:	4603      	mov	r3, r0
 80126f2:	460c      	mov	r4, r1
 80126f4:	4618      	mov	r0, r3
 80126f6:	4621      	mov	r1, r4
 80126f8:	f7ee fa86 	bl	8000c08 <__aeabi_d2f>
 80126fc:	4603      	mov	r3, r0
 80126fe:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8012700:	edd7 7a05 	vldr	s15, [r7, #20]
 8012704:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8012760 <bearing+0x2b0>
 8012708:	ee77 7a87 	vadd.f32	s15, s15, s14
 801270c:	ee17 0a90 	vmov	r0, s15
 8012710:	f7ed ff2a 	bl	8000568 <__aeabi_f2d>
 8012714:	4603      	mov	r3, r0
 8012716:	460c      	mov	r4, r1
 8012718:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8012750 <bearing+0x2a0>
 801271c:	ec44 3b10 	vmov	d0, r3, r4
 8012720:	f006 fa98 	bl	8018c54 <fmod>
 8012724:	ec54 3b10 	vmov	r3, r4, d0
 8012728:	4618      	mov	r0, r3
 801272a:	4621      	mov	r1, r4
 801272c:	f7ee fa6c 	bl	8000c08 <__aeabi_d2f>
 8012730:	4603      	mov	r3, r0
 8012732:	617b      	str	r3, [r7, #20]

    return brng;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	ee07 3a90 	vmov	s15, r3
}
 801273a:	eeb0 0a67 	vmov.f32	s0, s15
 801273e:	3730      	adds	r7, #48	; 0x30
 8012740:	46bd      	mov	sp, r7
 8012742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012746:	bf00      	nop
 8012748:	54442d18 	.word	0x54442d18
 801274c:	400921fb 	.word	0x400921fb
 8012750:	00000000 	.word	0x00000000
 8012754:	40768000 	.word	0x40768000
 8012758:	40668000 	.word	0x40668000
 801275c:	43340000 	.word	0x43340000
 8012760:	43b40000 	.word	0x43b40000

08012764 <steering_setup>:

static bool steering_setup(void)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
		#if STEERING_DEBUG
			println("[STEERING] Activating PID algorithm");
		#endif
		(*Common.log_print)("*P00");
 8012768:	4b22      	ldr	r3, [pc, #136]	; (80127f4 <steering_setup+0x90>)
 801276a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 801276e:	4822      	ldr	r0, [pc, #136]	; (80127f8 <steering_setup+0x94>)
 8012770:	4798      	blx	r3

		yaw_last_error=0.0;
 8012772:	4b22      	ldr	r3, [pc, #136]	; (80127fc <steering_setup+0x98>)
 8012774:	f04f 0200 	mov.w	r2, #0
 8012778:	601a      	str	r2, [r3, #0]
		Common.target_lat = DEFAULT_TARGET_LAT;
 801277a:	4b1e      	ldr	r3, [pc, #120]	; (80127f4 <steering_setup+0x90>)
 801277c:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8012780:	4a1f      	ldr	r2, [pc, #124]	; (8012800 <steering_setup+0x9c>)
 8012782:	601a      	str	r2, [r3, #0]
		Common.target_lon = DEFAULT_TARGET_LON;
 8012784:	4b1b      	ldr	r3, [pc, #108]	; (80127f4 <steering_setup+0x90>)
 8012786:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801278a:	4a1e      	ldr	r2, [pc, #120]	; (8012804 <steering_setup+0xa0>)
 801278c:	601a      	str	r2, [r3, #0]
		Common.target_alt = DEFAULT_TARGET_ALT;
 801278e:	4b19      	ldr	r3, [pc, #100]	; (80127f4 <steering_setup+0x90>)
 8012790:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8012794:	4a1c      	ldr	r2, [pc, #112]	; (8012808 <steering_setup+0xa4>)
 8012796:	601a      	str	r2, [r3, #0]
		Common.target_yaw = DEFAULT_TARGET_YAW;
 8012798:	4b16      	ldr	r3, [pc, #88]	; (80127f4 <steering_setup+0x90>)
 801279a:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 801279e:	f04f 0200 	mov.w	r2, #0
 80127a2:	601a      	str	r2, [r3, #0]
		motorsRunning = false;
 80127a4:	4b19      	ldr	r3, [pc, #100]	; (801280c <steering_setup+0xa8>)
 80127a6:	2200      	movs	r2, #0
 80127a8:	701a      	strb	r2, [r3, #0]
		enableMotors();
 80127aa:	f7ee fd6b 	bl	8001284 <enableMotors>
		setMotors(0.9, 0.9);
 80127ae:	eddf 0a18 	vldr	s1, [pc, #96]	; 8012810 <steering_setup+0xac>
 80127b2:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8012810 <steering_setup+0xac>
 80127b6:	f7ee fcad 	bl	8001114 <setMotors>
		delay(200);
 80127ba:	20c8      	movs	r0, #200	; 0xc8
 80127bc:	f7f3 fe4e 	bl	800645c <HAL_Delay>
		setMotors(0, 0);
 80127c0:	eddf 0a14 	vldr	s1, [pc, #80]	; 8012814 <steering_setup+0xb0>
 80127c4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012814 <steering_setup+0xb0>
 80127c8:	f7ee fca4 	bl	8001114 <setMotors>
		disableMotors();
 80127cc:	f7ee fd96 	bl	80012fc <disableMotors>
		if (!Common.mpu.active)
 80127d0:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <steering_setup+0x90>)
 80127d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127d6:	f083 0301 	eor.w	r3, r3, #1
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d006      	beq.n	80127ee <steering_setup+0x8a>
		{
			#if STEERING_DEBUG
				println("error: [STEERING] PID cannot function because IMU is not active!");
			#endif
			(*Common.log_print)("*EP00");
 80127e0:	4b04      	ldr	r3, [pc, #16]	; (80127f4 <steering_setup+0x90>)
 80127e2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80127e6:	480c      	ldr	r0, [pc, #48]	; (8012818 <steering_setup+0xb4>)
 80127e8:	4798      	blx	r3
			return false;
 80127ea:	2300      	movs	r3, #0
 80127ec:	e000      	b.n	80127f0 <steering_setup+0x8c>
		}
		return true;
 80127ee:	2301      	movs	r3, #1
		(*Common.log_print)("*WP00");
		disableMotors();
		Common.motors_enabled = false;
		return false;
	#endif
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	20000e1c 	.word	0x20000e1c
 80127f8:	0801bd70 	.word	0x0801bd70
 80127fc:	20001cf8 	.word	0x20001cf8
 8012800:	424b5597 	.word	0x424b5597
 8012804:	41844107 	.word	0x41844107
 8012808:	42200000 	.word	0x42200000
 801280c:	20001824 	.word	0x20001824
 8012810:	3f666666 	.word	0x3f666666
 8012814:	00000000 	.word	0x00000000
 8012818:	0801bd78 	.word	0x0801bd78

0801281c <steering_loop>:

static void steering_loop(void)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	af00      	add	r7, sp, #0
	#if STEERING_ENABLE
	if (Common.mpu.active && Common.operation_mode != 31 && Common.motors_enabled && Common.servo_enabled) 
 8012820:	4b4d      	ldr	r3, [pc, #308]	; (8012958 <steering_loop+0x13c>)
 8012822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012826:	2b00      	cmp	r3, #0
 8012828:	f000 8094 	beq.w	8012954 <steering_loop+0x138>
 801282c:	4b4a      	ldr	r3, [pc, #296]	; (8012958 <steering_loop+0x13c>)
 801282e:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8012832:	2b1f      	cmp	r3, #31
 8012834:	f000 808e 	beq.w	8012954 <steering_loop+0x138>
 8012838:	4b47      	ldr	r3, [pc, #284]	; (8012958 <steering_loop+0x13c>)
 801283a:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 801283e:	2b00      	cmp	r3, #0
 8012840:	f000 8088 	beq.w	8012954 <steering_loop+0x138>
 8012844:	4b44      	ldr	r3, [pc, #272]	; (8012958 <steering_loop+0x13c>)
 8012846:	f893 37e9 	ldrb.w	r3, [r3, #2025]	; 0x7e9
 801284a:	2b00      	cmp	r3, #0
 801284c:	f000 8082 	beq.w	8012954 <steering_loop+0x138>
	{
		if (millis() - lastMotUpdate >= STEERING_PID_DELAY)	// run motor alogrithm
 8012850:	f7fe ffa0 	bl	8011794 <millis>
 8012854:	4602      	mov	r2, r0
 8012856:	4b41      	ldr	r3, [pc, #260]	; (801295c <steering_loop+0x140>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	2b09      	cmp	r3, #9
 801285e:	d93c      	bls.n	80128da <steering_loop+0xbe>
		{	
			PID(Common.mpu.yaw, Common.target_yaw);
 8012860:	4b3d      	ldr	r3, [pc, #244]	; (8012958 <steering_loop+0x13c>)
 8012862:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8012866:	4b3c      	ldr	r3, [pc, #240]	; (8012958 <steering_loop+0x13c>)
 8012868:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 801286c:	ed93 7a00 	vldr	s14, [r3]
 8012870:	eef0 0a47 	vmov.f32	s1, s14
 8012874:	eeb0 0a67 	vmov.f32	s0, s15
 8012878:	f7ff fcce 	bl	8012218 <PID>
			lastMotUpdate = millis();
 801287c:	f7fe ff8a 	bl	8011794 <millis>
 8012880:	4602      	mov	r2, r0
 8012882:	4b36      	ldr	r3, [pc, #216]	; (801295c <steering_loop+0x140>)
 8012884:	601a      	str	r2, [r3, #0]
			writePin(LEDD, abs(Common.mpu.yaw - Common.target_yaw) < 3);
 8012886:	4b34      	ldr	r3, [pc, #208]	; (8012958 <steering_loop+0x13c>)
 8012888:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801288c:	4b32      	ldr	r3, [pc, #200]	; (8012958 <steering_loop+0x13c>)
 801288e:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8012892:	edd3 7a00 	vldr	s15, [r3]
 8012896:	ee77 7a67 	vsub.f32	s15, s14, s15
 801289a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801289e:	ee17 3a90 	vmov	r3, s15
 80128a2:	f113 0f02 	cmn.w	r3, #2
 80128a6:	db11      	blt.n	80128cc <steering_loop+0xb0>
 80128a8:	4b2b      	ldr	r3, [pc, #172]	; (8012958 <steering_loop+0x13c>)
 80128aa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80128ae:	4b2a      	ldr	r3, [pc, #168]	; (8012958 <steering_loop+0x13c>)
 80128b0:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 80128b4:	edd3 7a00 	vldr	s15, [r3]
 80128b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80128c0:	ee17 3a90 	vmov	r3, s15
 80128c4:	2b02      	cmp	r3, #2
 80128c6:	dc01      	bgt.n	80128cc <steering_loop+0xb0>
 80128c8:	2301      	movs	r3, #1
 80128ca:	e000      	b.n	80128ce <steering_loop+0xb2>
 80128cc:	2300      	movs	r3, #0
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	2108      	movs	r1, #8
 80128d4:	4822      	ldr	r0, [pc, #136]	; (8012960 <steering_loop+0x144>)
 80128d6:	f7f4 fc3f 	bl	8007158 <HAL_GPIO_WritePin>
		}

		if ((Common.operation_mode == 0 || Common.operation_mode == 1) && millis() - lastYawUpdate >= STEERING_YAW_DELAY && Common.gps.fix)
 80128da:	4b1f      	ldr	r3, [pc, #124]	; (8012958 <steering_loop+0x13c>)
 80128dc:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d004      	beq.n	80128ee <steering_loop+0xd2>
 80128e4:	4b1c      	ldr	r3, [pc, #112]	; (8012958 <steering_loop+0x13c>)
 80128e6:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	d132      	bne.n	8012954 <steering_loop+0x138>
 80128ee:	f7fe ff51 	bl	8011794 <millis>
 80128f2:	4602      	mov	r2, r0
 80128f4:	4b1b      	ldr	r3, [pc, #108]	; (8012964 <steering_loop+0x148>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	1ad3      	subs	r3, r2, r3
 80128fa:	2b63      	cmp	r3, #99	; 0x63
 80128fc:	d92a      	bls.n	8012954 <steering_loop+0x138>
 80128fe:	4b16      	ldr	r3, [pc, #88]	; (8012958 <steering_loop+0x13c>)
 8012900:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8012904:	2b00      	cmp	r3, #0
 8012906:	d025      	beq.n	8012954 <steering_loop+0x138>
		{
			Common.target_yaw = bearing(Common.gps.latitudeDegrees, Common.gps.longitudeDegrees, Common.target_lat, Common.target_lon); // target_yaw wyliczane z pozycji anteny
 8012908:	4b13      	ldr	r3, [pc, #76]	; (8012958 <steering_loop+0x13c>)
 801290a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 801290e:	4b12      	ldr	r3, [pc, #72]	; (8012958 <steering_loop+0x13c>)
 8012910:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8012914:	4b10      	ldr	r3, [pc, #64]	; (8012958 <steering_loop+0x13c>)
 8012916:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 801291a:	edd3 6a00 	vldr	s13, [r3]
 801291e:	4b0e      	ldr	r3, [pc, #56]	; (8012958 <steering_loop+0x13c>)
 8012920:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8012924:	ed93 6a00 	vldr	s12, [r3]
 8012928:	eef0 1a46 	vmov.f32	s3, s12
 801292c:	eeb0 1a66 	vmov.f32	s2, s13
 8012930:	eef0 0a47 	vmov.f32	s1, s14
 8012934:	eeb0 0a67 	vmov.f32	s0, s15
 8012938:	f7ff fdba 	bl	80124b0 <bearing>
 801293c:	eef0 7a40 	vmov.f32	s15, s0
 8012940:	4b05      	ldr	r3, [pc, #20]	; (8012958 <steering_loop+0x13c>)
 8012942:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8012946:	edc3 7a00 	vstr	s15, [r3]
			lastYawUpdate = millis();
 801294a:	f7fe ff23 	bl	8011794 <millis>
 801294e:	4602      	mov	r2, r0
 8012950:	4b04      	ldr	r3, [pc, #16]	; (8012964 <steering_loop+0x148>)
 8012952:	601a      	str	r2, [r3, #0]
		}
	}
	#endif
}
 8012954:	bf00      	nop
 8012956:	bd80      	pop	{r7, pc}
 8012958:	20000e1c 	.word	0x20000e1c
 801295c:	20001cec 	.word	0x20001cec
 8012960:	40020800 	.word	0x40020800
 8012964:	20001cf4 	.word	0x20001cf4

08012968 <play_animation>:

uint32_t animation_timer;
uint16_t animation_step;
int8_t animation_dir;

static void play_animation(void (*animation)(void), uint32_t duration) { animation_timer = millis(); while (millis() - animation_timer <= duration) { (*animation)(); delay(1); } }
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
 8012972:	f7fe ff0f 	bl	8011794 <millis>
 8012976:	4602      	mov	r2, r0
 8012978:	4b0a      	ldr	r3, [pc, #40]	; (80129a4 <play_animation+0x3c>)
 801297a:	601a      	str	r2, [r3, #0]
 801297c:	e004      	b.n	8012988 <play_animation+0x20>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	4798      	blx	r3
 8012982:	2001      	movs	r0, #1
 8012984:	f7f3 fd6a 	bl	800645c <HAL_Delay>
 8012988:	f7fe ff04 	bl	8011794 <millis>
 801298c:	4602      	mov	r2, r0
 801298e:	4b05      	ldr	r3, [pc, #20]	; (80129a4 <play_animation+0x3c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	683a      	ldr	r2, [r7, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d2f1      	bcs.n	801297e <play_animation+0x16>
 801299a:	bf00      	nop
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	20001cdc 	.word	0x20001cdc

080129a8 <leds_low>:

static const void leds_low(void) { writePin(LEDA, LOW); writePin(LEDB, LOW); writePin(LEDC, LOW); writePin(LEDD, LOW); }
 80129a8:	b580      	push	{r7, lr}
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	2200      	movs	r2, #0
 80129ae:	2101      	movs	r1, #1
 80129b0:	4809      	ldr	r0, [pc, #36]	; (80129d8 <leds_low+0x30>)
 80129b2:	f7f4 fbd1 	bl	8007158 <HAL_GPIO_WritePin>
 80129b6:	2200      	movs	r2, #0
 80129b8:	2102      	movs	r1, #2
 80129ba:	4807      	ldr	r0, [pc, #28]	; (80129d8 <leds_low+0x30>)
 80129bc:	f7f4 fbcc 	bl	8007158 <HAL_GPIO_WritePin>
 80129c0:	2200      	movs	r2, #0
 80129c2:	2104      	movs	r1, #4
 80129c4:	4804      	ldr	r0, [pc, #16]	; (80129d8 <leds_low+0x30>)
 80129c6:	f7f4 fbc7 	bl	8007158 <HAL_GPIO_WritePin>
 80129ca:	2200      	movs	r2, #0
 80129cc:	2108      	movs	r1, #8
 80129ce:	4802      	ldr	r0, [pc, #8]	; (80129d8 <leds_low+0x30>)
 80129d0:	f7f4 fbc2 	bl	8007158 <HAL_GPIO_WritePin>
 80129d4:	bf00      	nop
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	40020800 	.word	0x40020800

080129dc <leds_fill>:
	animation_step += animation_dir;
	if (animation_step > 500) { animation_dir *= -1; }
}

static const void leds_fill(void)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
	writePin(LEDA, (animation_step >= 100));
 80129e0:	4b26      	ldr	r3, [pc, #152]	; (8012a7c <leds_fill+0xa0>)
 80129e2:	881b      	ldrh	r3, [r3, #0]
 80129e4:	2b63      	cmp	r3, #99	; 0x63
 80129e6:	bf8c      	ite	hi
 80129e8:	2301      	movhi	r3, #1
 80129ea:	2300      	movls	r3, #0
 80129ec:	b2db      	uxtb	r3, r3
 80129ee:	461a      	mov	r2, r3
 80129f0:	2101      	movs	r1, #1
 80129f2:	4823      	ldr	r0, [pc, #140]	; (8012a80 <leds_fill+0xa4>)
 80129f4:	f7f4 fbb0 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDB, (animation_step >= 200));
 80129f8:	4b20      	ldr	r3, [pc, #128]	; (8012a7c <leds_fill+0xa0>)
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	2bc7      	cmp	r3, #199	; 0xc7
 80129fe:	bf8c      	ite	hi
 8012a00:	2301      	movhi	r3, #1
 8012a02:	2300      	movls	r3, #0
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	461a      	mov	r2, r3
 8012a08:	2102      	movs	r1, #2
 8012a0a:	481d      	ldr	r0, [pc, #116]	; (8012a80 <leds_fill+0xa4>)
 8012a0c:	f7f4 fba4 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDC, (animation_step >= 300));
 8012a10:	4b1a      	ldr	r3, [pc, #104]	; (8012a7c <leds_fill+0xa0>)
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	f240 122b 	movw	r2, #299	; 0x12b
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	bf8c      	ite	hi
 8012a1c:	2301      	movhi	r3, #1
 8012a1e:	2300      	movls	r3, #0
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	461a      	mov	r2, r3
 8012a24:	2104      	movs	r1, #4
 8012a26:	4816      	ldr	r0, [pc, #88]	; (8012a80 <leds_fill+0xa4>)
 8012a28:	f7f4 fb96 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDD, (animation_step >= 400));
 8012a2c:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <leds_fill+0xa0>)
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	f240 128f 	movw	r2, #399	; 0x18f
 8012a34:	4293      	cmp	r3, r2
 8012a36:	bf8c      	ite	hi
 8012a38:	2301      	movhi	r3, #1
 8012a3a:	2300      	movls	r3, #0
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	461a      	mov	r2, r3
 8012a40:	2108      	movs	r1, #8
 8012a42:	480f      	ldr	r0, [pc, #60]	; (8012a80 <leds_fill+0xa4>)
 8012a44:	f7f4 fb88 	bl	8007158 <HAL_GPIO_WritePin>
	animation_step += animation_dir;
 8012a48:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <leds_fill+0xa8>)
 8012a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	4b0a      	ldr	r3, [pc, #40]	; (8012a7c <leds_fill+0xa0>)
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	4413      	add	r3, r2
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	4b08      	ldr	r3, [pc, #32]	; (8012a7c <leds_fill+0xa0>)
 8012a5a:	801a      	strh	r2, [r3, #0]
	if (animation_step > 500) { animation_dir *= -1; }
 8012a5c:	4b07      	ldr	r3, [pc, #28]	; (8012a7c <leds_fill+0xa0>)
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012a64:	d908      	bls.n	8012a78 <leds_fill+0x9c>
 8012a66:	4b07      	ldr	r3, [pc, #28]	; (8012a84 <leds_fill+0xa8>)
 8012a68:	f993 3000 	ldrsb.w	r3, [r3]
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	425b      	negs	r3, r3
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	b25a      	sxtb	r2, r3
 8012a74:	4b03      	ldr	r3, [pc, #12]	; (8012a84 <leds_fill+0xa8>)
 8012a76:	701a      	strb	r2, [r3, #0]
}
 8012a78:	bf00      	nop
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	20001ce0 	.word	0x20001ce0
 8012a80:	40020800 	.word	0x40020800
 8012a84:	20001cd8 	.word	0x20001cd8

08012a88 <latchArms>:

uint16_t flight_safety;
bool armsOpen, setupSuccess;
uint8_t terminate;

static void latchArms(void) { if (armsOpen)  { TIM5->CCR4 = 00; armsOpen = false; }}
 8012a88:	b480      	push	{r7}
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	4b07      	ldr	r3, [pc, #28]	; (8012aac <latchArms+0x24>)
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d005      	beq.n	8012aa0 <latchArms+0x18>
 8012a94:	4b06      	ldr	r3, [pc, #24]	; (8012ab0 <latchArms+0x28>)
 8012a96:	2200      	movs	r2, #0
 8012a98:	641a      	str	r2, [r3, #64]	; 0x40
 8012a9a:	4b04      	ldr	r3, [pc, #16]	; (8012aac <latchArms+0x24>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	701a      	strb	r2, [r3, #0]
 8012aa0:	bf00      	nop
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	20001cfc 	.word	0x20001cfc
 8012ab0:	40000c00 	.word	0x40000c00

08012ab4 <openArms>:
static void openArms(void)  { if (!armsOpen) { TIM5->CCR4 = 1000; armsOpen = true; }}
 8012ab4:	b480      	push	{r7}
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	4b09      	ldr	r3, [pc, #36]	; (8012ae0 <openArms+0x2c>)
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	f083 0301 	eor.w	r3, r3, #1
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d006      	beq.n	8012ad4 <openArms+0x20>
 8012ac6:	4b07      	ldr	r3, [pc, #28]	; (8012ae4 <openArms+0x30>)
 8012ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012acc:	641a      	str	r2, [r3, #64]	; 0x40
 8012ace:	4b04      	ldr	r3, [pc, #16]	; (8012ae0 <openArms+0x2c>)
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	701a      	strb	r2, [r3, #0]
 8012ad4:	bf00      	nop
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	20001cfc 	.word	0x20001cfc
 8012ae4:	40000c00 	.word	0x40000c00

08012ae8 <terminator>:

static void terminator(void)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	af00      	add	r7, sp, #0
	terminate = 0;
 8012aec:	4bb0      	ldr	r3, [pc, #704]	; (8012db0 <terminator+0x2c8>)
 8012aee:	2200      	movs	r2, #0
 8012af0:	701a      	strb	r2, [r3, #0]
	terminate |= ((Common.bmp.active) && (abs(Common.bmp.alt_dx) > TERMINAL_ALT_DX)) << 1; // Falling too fast
 8012af2:	4bb0      	ldr	r3, [pc, #704]	; (8012db4 <terminator+0x2cc>)
 8012af4:	7f1b      	ldrb	r3, [r3, #28]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d016      	beq.n	8012b28 <terminator+0x40>
 8012afa:	4bae      	ldr	r3, [pc, #696]	; (8012db4 <terminator+0x2cc>)
 8012afc:	edd3 7a06 	vldr	s15, [r3, #24]
 8012b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b04:	ee17 3a90 	vmov	r3, s15
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	bfb8      	it	lt
 8012b0c:	425b      	neglt	r3, r3
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7ed fd18 	bl	8000544 <__aeabi_i2d>
 8012b14:	f04f 0200 	mov.w	r2, #0
 8012b18:	4ba7      	ldr	r3, [pc, #668]	; (8012db8 <terminator+0x2d0>)
 8012b1a:	f7ee f80d 	bl	8000b38 <__aeabi_dcmpgt>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <terminator+0x40>
 8012b24:	2301      	movs	r3, #1
 8012b26:	e000      	b.n	8012b2a <terminator+0x42>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	005b      	lsls	r3, r3, #1
 8012b2c:	b25a      	sxtb	r2, r3
 8012b2e:	4ba0      	ldr	r3, [pc, #640]	; (8012db0 <terminator+0x2c8>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	b25b      	sxtb	r3, r3
 8012b34:	4313      	orrs	r3, r2
 8012b36:	b25b      	sxtb	r3, r3
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	4b9d      	ldr	r3, [pc, #628]	; (8012db0 <terminator+0x2c8>)
 8012b3c:	701a      	strb	r2, [r3, #0]
	terminate |= (abs(Common.mpu.yaw_dx) > TERMINAL_YAW_DX) << 2;	// Spinning too fast
 8012b3e:	4b9d      	ldr	r3, [pc, #628]	; (8012db4 <terminator+0x2cc>)
 8012b40:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8012b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b48:	ee17 3a90 	vmov	r3, s15
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	bfb8      	it	lt
 8012b50:	425b      	neglt	r3, r3
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ed fcf6 	bl	8000544 <__aeabi_i2d>
 8012b58:	f04f 0200 	mov.w	r2, #0
 8012b5c:	4b97      	ldr	r3, [pc, #604]	; (8012dbc <terminator+0x2d4>)
 8012b5e:	f7ed ffeb 	bl	8000b38 <__aeabi_dcmpgt>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <terminator+0x84>
 8012b68:	2204      	movs	r2, #4
 8012b6a:	e000      	b.n	8012b6e <terminator+0x86>
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4b90      	ldr	r3, [pc, #576]	; (8012db0 <terminator+0x2c8>)
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	b25b      	sxtb	r3, r3
 8012b74:	4313      	orrs	r3, r2
 8012b76:	b25b      	sxtb	r3, r3
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	4b8d      	ldr	r3, [pc, #564]	; (8012db0 <terminator+0x2c8>)
 8012b7c:	701a      	strb	r2, [r3, #0]
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 8012b7e:	4b8d      	ldr	r3, [pc, #564]	; (8012db4 <terminator+0x2cc>)
 8012b80:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8012b84:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8012dc0 <terminator+0x2d8>
 8012b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b90:	ee17 3a90 	vmov	r3, s15
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	bfb8      	it	lt
 8012b98:	425b      	neglt	r3, r3
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7ed fcd2 	bl	8000544 <__aeabi_i2d>
 8012ba0:	f04f 0200 	mov.w	r2, #0
 8012ba4:	4b87      	ldr	r3, [pc, #540]	; (8012dc4 <terminator+0x2dc>)
 8012ba6:	f7ed ffc7 	bl	8000b38 <__aeabi_dcmpgt>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d118      	bne.n	8012be2 <terminator+0xfa>
				  (abs(Common.mpu.roll - 90) > TERMINAL_HOR)) << 3;		// In vertical position
 8012bb0:	4b80      	ldr	r3, [pc, #512]	; (8012db4 <terminator+0x2cc>)
 8012bb2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8012bb6:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8012dc0 <terminator+0x2d8>
 8012bba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bc2:	ee17 3a90 	vmov	r3, s15
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	bfb8      	it	lt
 8012bca:	425b      	neglt	r3, r3
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ed fcb9 	bl	8000544 <__aeabi_i2d>
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 8012bd2:	f04f 0200 	mov.w	r2, #0
 8012bd6:	4b7b      	ldr	r3, [pc, #492]	; (8012dc4 <terminator+0x2dc>)
 8012bd8:	f7ed ffae 	bl	8000b38 <__aeabi_dcmpgt>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <terminator+0xfe>
 8012be2:	2301      	movs	r3, #1
 8012be4:	e000      	b.n	8012be8 <terminator+0x100>
 8012be6:	2300      	movs	r3, #0
				  (abs(Common.mpu.roll - 90) > TERMINAL_HOR)) << 3;		// In vertical position
 8012be8:	00db      	lsls	r3, r3, #3
	terminate |= ((abs(Common.mpu.pitch - 90) > TERMINAL_HOR) ||
 8012bea:	b25a      	sxtb	r2, r3
 8012bec:	4b70      	ldr	r3, [pc, #448]	; (8012db0 <terminator+0x2c8>)
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	b25b      	sxtb	r3, r3
 8012bf2:	4313      	orrs	r3, r2
 8012bf4:	b25b      	sxtb	r3, r3
 8012bf6:	b2da      	uxtb	r2, r3
 8012bf8:	4b6d      	ldr	r3, [pc, #436]	; (8012db0 <terminator+0x2c8>)
 8012bfa:	701a      	strb	r2, [r3, #0]
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 8012bfc:	4b6d      	ldr	r3, [pc, #436]	; (8012db4 <terminator+0x2cc>)
 8012bfe:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8012c02:	4b6c      	ldr	r3, [pc, #432]	; (8012db4 <terminator+0x2cc>)
 8012c04:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8012c08:	edd3 7a00 	vldr	s15, [r3]
 8012c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c14:	ee17 3a90 	vmov	r3, s15
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	bfb8      	it	lt
 8012c1c:	425b      	neglt	r3, r3
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ed fc90 	bl	8000544 <__aeabi_i2d>
 8012c24:	a360      	add	r3, pc, #384	; (adr r3, 8012da8 <terminator+0x2c0>)
 8012c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2a:	f7ed ff67 	bl	8000afc <__aeabi_dcmplt>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d01d      	beq.n	8012c70 <terminator+0x188>
				  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 8012c34:	4b5f      	ldr	r3, [pc, #380]	; (8012db4 <terminator+0x2cc>)
 8012c36:	ed93 7a51 	vldr	s14, [r3, #324]	; 0x144
 8012c3a:	4b5e      	ldr	r3, [pc, #376]	; (8012db4 <terminator+0x2cc>)
 8012c3c:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8012c40:	edd3 7a00 	vldr	s15, [r3]
 8012c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c4c:	ee17 3a90 	vmov	r3, s15
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bfb8      	it	lt
 8012c54:	425b      	neglt	r3, r3
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7ed fc74 	bl	8000544 <__aeabi_i2d>
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 8012c5c:	a352      	add	r3, pc, #328	; (adr r3, 8012da8 <terminator+0x2c0>)
 8012c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c62:	f7ed ff4b 	bl	8000afc <__aeabi_dcmplt>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d001      	beq.n	8012c70 <terminator+0x188>
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e000      	b.n	8012c72 <terminator+0x18a>
 8012c70:	2300      	movs	r3, #0
				  (abs(Common.gps.longitudeDegrees - Common.target_lon) < KEEPOUT_LON)) << 4;	// At the destination (planar)
 8012c72:	011b      	lsls	r3, r3, #4
	terminate |= ((abs(Common.gps.latitudeDegrees - Common.target_lat) < KEEPOUT_LAT) &&
 8012c74:	b25a      	sxtb	r2, r3
 8012c76:	4b4e      	ldr	r3, [pc, #312]	; (8012db0 <terminator+0x2c8>)
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	b25b      	sxtb	r3, r3
 8012c7c:	4313      	orrs	r3, r2
 8012c7e:	b25b      	sxtb	r3, r3
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	4b4b      	ldr	r3, [pc, #300]	; (8012db0 <terminator+0x2c8>)
 8012c84:	701a      	strb	r2, [r3, #0]
	//terminate |= (Common.bmp.altitude - Common.target_alt < KEEPOUT_ALT) << 5;	// Close to the ground
	terminate |= (Common.gps.fix && ((Common.gps.altitude - Common.target_alt) < KEEPOUT_ALT)) << 5;	// Close to the ground
 8012c86:	4b4b      	ldr	r3, [pc, #300]	; (8012db4 <terminator+0x2cc>)
 8012c88:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d012      	beq.n	8012cb6 <terminator+0x1ce>
 8012c90:	4b48      	ldr	r3, [pc, #288]	; (8012db4 <terminator+0x2cc>)
 8012c92:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8012c96:	4b47      	ldr	r3, [pc, #284]	; (8012db4 <terminator+0x2cc>)
 8012c98:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8012c9c:	edd3 7a00 	vldr	s15, [r3]
 8012ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ca4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8012ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	d501      	bpl.n	8012cb6 <terminator+0x1ce>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e000      	b.n	8012cb8 <terminator+0x1d0>
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	015b      	lsls	r3, r3, #5
 8012cba:	b25a      	sxtb	r2, r3
 8012cbc:	4b3c      	ldr	r3, [pc, #240]	; (8012db0 <terminator+0x2c8>)
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	b25b      	sxtb	r3, r3
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	b25b      	sxtb	r3, r3
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	4b39      	ldr	r3, [pc, #228]	; (8012db0 <terminator+0x2c8>)
 8012cca:	701a      	strb	r2, [r3, #0]

	if (Common.operation_mode != 31)
 8012ccc:	4b39      	ldr	r3, [pc, #228]	; (8012db4 <terminator+0x2cc>)
 8012cce:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8012cd2:	2b1f      	cmp	r3, #31
 8012cd4:	d052      	beq.n	8012d7c <terminator+0x294>
	{
		if (Common.operation_mode == 3) flight_safety = FLIGHT_START_THRE;
 8012cd6:	4b37      	ldr	r3, [pc, #220]	; (8012db4 <terminator+0x2cc>)
 8012cd8:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8012cdc:	2b03      	cmp	r3, #3
 8012cde:	d104      	bne.n	8012cea <terminator+0x202>
 8012ce0:	4b39      	ldr	r3, [pc, #228]	; (8012dc8 <terminator+0x2e0>)
 8012ce2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8012ce6:	801a      	strh	r2, [r3, #0]
 8012ce8:	e01f      	b.n	8012d2a <terminator+0x242>
		else if (terminate > 0)
 8012cea:	4b31      	ldr	r3, [pc, #196]	; (8012db0 <terminator+0x2c8>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d01b      	beq.n	8012d2a <terminator+0x242>
		{
			Common.operation_mode = 31;
 8012cf2:	4b30      	ldr	r3, [pc, #192]	; (8012db4 <terminator+0x2cc>)
 8012cf4:	221f      	movs	r2, #31
 8012cf6:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
			#if RUN_DEBUG
				println("warning: [RUN] Flight terminated! Code: 0x%x", terminate);
			#endif
			(*Common.log_print)("*T0x%x", terminate);
 8012cfa:	4b2e      	ldr	r3, [pc, #184]	; (8012db4 <terminator+0x2cc>)
 8012cfc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8012d00:	4a2b      	ldr	r2, [pc, #172]	; (8012db0 <terminator+0x2c8>)
 8012d02:	7812      	ldrb	r2, [r2, #0]
 8012d04:	4611      	mov	r1, r2
 8012d06:	4831      	ldr	r0, [pc, #196]	; (8012dcc <terminator+0x2e4>)
 8012d08:	4798      	blx	r3
			flight_safety = 0;
 8012d0a:	4b2f      	ldr	r3, [pc, #188]	; (8012dc8 <terminator+0x2e0>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	801a      	strh	r2, [r3, #0]
			Common.servo_enabled = false;
 8012d10:	4b28      	ldr	r3, [pc, #160]	; (8012db4 <terminator+0x2cc>)
 8012d12:	2200      	movs	r2, #0
 8012d14:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
			Common.motors_enabled = false;
 8012d18:	4b26      	ldr	r3, [pc, #152]	; (8012db4 <terminator+0x2cc>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8
			latchArms();
 8012d20:	f7ff feb2 	bl	8012a88 <latchArms>
			disableMotors();
 8012d24:	f7ee faea 	bl	80012fc <disableMotors>
			return;
 8012d28:	e03d      	b.n	8012da6 <terminator+0x2be>
		}

		if (flight_safety >= FLIGHT_START_THRE)
 8012d2a:	4b27      	ldr	r3, [pc, #156]	; (8012dc8 <terminator+0x2e0>)
 8012d2c:	881b      	ldrh	r3, [r3, #0]
 8012d2e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d91b      	bls.n	8012d6e <terminator+0x286>
		{
			if (Common.operation_mode != 3)
 8012d36:	4b1f      	ldr	r3, [pc, #124]	; (8012db4 <terminator+0x2cc>)
 8012d38:	f893 37fc 	ldrb.w	r3, [r3, #2044]	; 0x7fc
 8012d3c:	2b03      	cmp	r3, #3
 8012d3e:	d007      	beq.n	8012d50 <terminator+0x268>
			{
				Common.servo_enabled = true;
 8012d40:	4b1c      	ldr	r3, [pc, #112]	; (8012db4 <terminator+0x2cc>)
 8012d42:	2201      	movs	r2, #1
 8012d44:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
				Common.motors_enabled = true;
 8012d48:	4b1a      	ldr	r3, [pc, #104]	; (8012db4 <terminator+0x2cc>)
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8
			}

			if (Common.servo_enabled) openArms();
 8012d50:	4b18      	ldr	r3, [pc, #96]	; (8012db4 <terminator+0x2cc>)
 8012d52:	f893 37e9 	ldrb.w	r3, [r3, #2025]	; 0x7e9
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d001      	beq.n	8012d5e <terminator+0x276>
 8012d5a:	f7ff feab 	bl	8012ab4 <openArms>
			if (Common.motors_enabled) enableMotors();
 8012d5e:	4b15      	ldr	r3, [pc, #84]	; (8012db4 <terminator+0x2cc>)
 8012d60:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d01e      	beq.n	8012da6 <terminator+0x2be>
 8012d68:	f7ee fa8c 	bl	8001284 <enableMotors>
 8012d6c:	e01b      	b.n	8012da6 <terminator+0x2be>
		}
		else flight_safety++;
 8012d6e:	4b16      	ldr	r3, [pc, #88]	; (8012dc8 <terminator+0x2e0>)
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	3301      	adds	r3, #1
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	4b14      	ldr	r3, [pc, #80]	; (8012dc8 <terminator+0x2e0>)
 8012d78:	801a      	strh	r2, [r3, #0]
 8012d7a:	e014      	b.n	8012da6 <terminator+0x2be>

	}
	else
	{
		if (terminate == 0) Common.operation_mode = 0;
 8012d7c:	4b0c      	ldr	r3, [pc, #48]	; (8012db0 <terminator+0x2c8>)
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d104      	bne.n	8012d8e <terminator+0x2a6>
 8012d84:	4b0b      	ldr	r3, [pc, #44]	; (8012db4 <terminator+0x2cc>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8012d8c:	e00b      	b.n	8012da6 <terminator+0x2be>
		else
		{
			Common.servo_enabled = false;
 8012d8e:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <terminator+0x2cc>)
 8012d90:	2200      	movs	r2, #0
 8012d92:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
			Common.motors_enabled = false;
 8012d96:	4b07      	ldr	r3, [pc, #28]	; (8012db4 <terminator+0x2cc>)
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8
			latchArms();
 8012d9e:	f7ff fe73 	bl	8012a88 <latchArms>
			disableMotors();
 8012da2:	f7ee faab 	bl	80012fc <disableMotors>
		}
	}
}
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	eb1c432d 	.word	0xeb1c432d
 8012dac:	3f1a36e2 	.word	0x3f1a36e2
 8012db0:	20001d01 	.word	0x20001d01
 8012db4:	20000e1c 	.word	0x20000e1c
 8012db8:	402e0000 	.word	0x402e0000
 8012dbc:	40440000 	.word	0x40440000
 8012dc0:	42b40000 	.word	0x42b40000
 8012dc4:	40468000 	.word	0x40468000
 8012dc8:	20001cfe 	.word	0x20001cfe
 8012dcc:	0801bd80 	.word	0x0801bd80

08012dd0 <setup>:

static void setup(void)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	af00      	add	r7, sp, #0
		co[0] = Common.gps.uartBuffer[0];
		print(co);
	}
*/

	setupSuccess = true;
 8012dd4:	4b34      	ldr	r3, [pc, #208]	; (8012ea8 <setup+0xd8>)
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	701a      	strb	r2, [r3, #0]
	animation_dir = 1;
 8012dda:	4b34      	ldr	r3, [pc, #208]	; (8012eac <setup+0xdc>)
 8012ddc:	2201      	movs	r2, #1
 8012dde:	701a      	strb	r2, [r3, #0]

	#if INTERFACE_BTN
		while (readPin(BTN_1) == LOW) { leds_bounce(); delay(1); }
	#endif
	play_animation(&leds_fill, 2000);
 8012de0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8012de4:	4832      	ldr	r0, [pc, #200]	; (8012eb0 <setup+0xe0>)
 8012de6:	f7ff fdbf 	bl	8012968 <play_animation>
	leds_low();
 8012dea:	f7ff fddd 	bl	80129a8 <leds_low>

	armsOpen = true;
 8012dee:	4b31      	ldr	r3, [pc, #196]	; (8012eb4 <setup+0xe4>)
 8012df0:	2201      	movs	r2, #1
 8012df2:	701a      	strb	r2, [r3, #0]
	flight_safety = 0;
 8012df4:	4b30      	ldr	r3, [pc, #192]	; (8012eb8 <setup+0xe8>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	801a      	strh	r2, [r3, #0]
	latchArms();
 8012dfa:	f7ff fe45 	bl	8012a88 <latchArms>
	Common.servo_enabled = false;
 8012dfe:	4b2f      	ldr	r3, [pc, #188]	; (8012ebc <setup+0xec>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
	Common.motors_enabled = false;
 8012e06:	4b2d      	ldr	r3, [pc, #180]	; (8012ebc <setup+0xec>)
 8012e08:	2200      	movs	r2, #0
 8012e0a:	f883 27e8 	strb.w	r2, [r3, #2024]	; 0x7e8

	setupSuccess &= loging_setup();
 8012e0e:	f7fe fd6f 	bl	80118f0 <loging_setup>
 8012e12:	4603      	mov	r3, r0
 8012e14:	4619      	mov	r1, r3
 8012e16:	4b24      	ldr	r3, [pc, #144]	; (8012ea8 <setup+0xd8>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	460b      	mov	r3, r1
 8012e1e:	4013      	ands	r3, r2
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	bf14      	ite	ne
 8012e24:	2301      	movne	r3, #1
 8012e26:	2300      	moveq	r3, #0
 8012e28:	b2da      	uxtb	r2, r3
 8012e2a:	4b1f      	ldr	r3, [pc, #124]	; (8012ea8 <setup+0xd8>)
 8012e2c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= duplex_setup();
 8012e2e:	f7fe fd89 	bl	8011944 <duplex_setup>
 8012e32:	4603      	mov	r3, r0
 8012e34:	4619      	mov	r1, r3
 8012e36:	4b1c      	ldr	r3, [pc, #112]	; (8012ea8 <setup+0xd8>)
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	4013      	ands	r3, r2
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	bf14      	ite	ne
 8012e44:	2301      	movne	r3, #1
 8012e46:	2300      	moveq	r3, #0
 8012e48:	b2da      	uxtb	r2, r3
 8012e4a:	4b17      	ldr	r3, [pc, #92]	; (8012ea8 <setup+0xd8>)
 8012e4c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= sensing_setup();
 8012e4e:	f7ff f805 	bl	8011e5c <sensing_setup>
 8012e52:	4603      	mov	r3, r0
 8012e54:	4619      	mov	r1, r3
 8012e56:	4b14      	ldr	r3, [pc, #80]	; (8012ea8 <setup+0xd8>)
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	4013      	ands	r3, r2
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	bf14      	ite	ne
 8012e64:	2301      	movne	r3, #1
 8012e66:	2300      	moveq	r3, #0
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	4b0f      	ldr	r3, [pc, #60]	; (8012ea8 <setup+0xd8>)
 8012e6c:	701a      	strb	r2, [r3, #0]
	setupSuccess &= steering_setup();
 8012e6e:	f7ff fc79 	bl	8012764 <steering_setup>
 8012e72:	4603      	mov	r3, r0
 8012e74:	4619      	mov	r1, r3
 8012e76:	4b0c      	ldr	r3, [pc, #48]	; (8012ea8 <setup+0xd8>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	4013      	ands	r3, r2
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	bf14      	ite	ne
 8012e84:	2301      	movne	r3, #1
 8012e86:	2300      	moveq	r3, #0
 8012e88:	b2da      	uxtb	r2, r3
 8012e8a:	4b07      	ldr	r3, [pc, #28]	; (8012ea8 <setup+0xd8>)
 8012e8c:	701a      	strb	r2, [r3, #0]

	#if INTERFACE_BTN
		while (readPin(BTN_1) == LOW) { setupSuccess ? leds_confirm() : leds_negate(); delay(1); }
	#endif
	play_animation(&leds_fill, 2000);
 8012e8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8012e92:	4807      	ldr	r0, [pc, #28]	; (8012eb0 <setup+0xe0>)
 8012e94:	f7ff fd68 	bl	8012968 <play_animation>
	leds_low();
 8012e98:	f7ff fd86 	bl	80129a8 <leds_low>

	Common.operation_mode = 0;
 8012e9c:	4b07      	ldr	r3, [pc, #28]	; (8012ebc <setup+0xec>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
}
 8012ea4:	bf00      	nop
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	20001d00 	.word	0x20001d00
 8012eac:	20001cd8 	.word	0x20001cd8
 8012eb0:	080129dd 	.word	0x080129dd
 8012eb4:	20001cfc 	.word	0x20001cfc
 8012eb8:	20001cfe 	.word	0x20001cfe
 8012ebc:	20000e1c 	.word	0x20000e1c

08012ec0 <loop>:

static void loop(void)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	af00      	add	r7, sp, #0
	sensing_loop();
 8012ec4:	f7ff f950 	bl	8012168 <sensing_loop>

	duplex_loop();
 8012ec8:	f7fe ff76 	bl	8011db8 <duplex_loop>

	writePin(LEDC, Common.motors_enabled);
 8012ecc:	4b07      	ldr	r3, [pc, #28]	; (8012eec <loop+0x2c>)
 8012ece:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	2104      	movs	r1, #4
 8012ed6:	4806      	ldr	r0, [pc, #24]	; (8012ef0 <loop+0x30>)
 8012ed8:	f7f4 f93e 	bl	8007158 <HAL_GPIO_WritePin>

	terminator();
 8012edc:	f7ff fe04 	bl	8012ae8 <terminator>

	steering_loop();
 8012ee0:	f7ff fc9c 	bl	801281c <steering_loop>

	loging_loop();
 8012ee4:	f7fe fd18 	bl	8011918 <loging_loop>
}
 8012ee8:	bf00      	nop
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	20000e1c 	.word	0x20000e1c
 8012ef0:	40020800 	.word	0x40020800

08012ef4 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
	//if (huart == Common.gps.uart)
	//{
	//println("Got someting");
		HAL_UART_Receive_IT(huart, Common.gps.uartBuffer, 1);
 8012efc:	2201      	movs	r2, #1
 8012efe:	4905      	ldr	r1, [pc, #20]	; (8012f14 <HAL_UART_RxCpltCallback+0x20>)
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7f9 fdcf 	bl	800caa4 <HAL_UART_Receive_IT>
		GPS_read(&Common.gps);
 8012f06:	4804      	ldr	r0, [pc, #16]	; (8012f18 <HAL_UART_RxCpltCallback+0x24>)
 8012f08:	f7ef fb80 	bl	800260c <GPS_read>
	//}
}
 8012f0c:	bf00      	nop
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	2000112f 	.word	0x2000112f
 8012f18:	20000f10 	.word	0x20000f10

08012f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012f20:	f7f3 fa2a 	bl	8006378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012f24:	f000 f840 	bl	8012fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012f28:	f000 fb30 	bl	801358c <MX_GPIO_Init>
  MX_DMA_Init();
 8012f2c:	f000 fb06 	bl	801353c <MX_DMA_Init>
  MX_I2C1_Init();
 8012f30:	f000 f8bc 	bl	80130ac <MX_I2C1_Init>
  MX_RTC_Init();
 8012f34:	f000 f916 	bl	8013164 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8012f38:	f000 f93a 	bl	80131b0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8012f3c:	f000 f958 	bl	80131f0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8012f40:	f000 f98c 	bl	801325c <MX_TIM2_Init>
  MX_TIM3_Init();
 8012f44:	f000 f9d8 	bl	80132f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8012f48:	f000 fa58 	bl	80133fc <MX_TIM5_Init>
  MX_FATFS_Init();
 8012f4c:	f7fe fbf0 	bl	8011730 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8012f50:	f001 fa56 	bl	8014400 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8012f54:	f000 fac8 	bl	80134e8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8012f58:	f000 f8d6 	bl	8013108 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8012f5c:	480f      	ldr	r0, [pc, #60]	; (8012f9c <main+0x80>)
 8012f5e:	f7f8 fefa 	bl	800bd56 <HAL_TIM_Base_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8012f62:	210c      	movs	r1, #12
 8012f64:	480e      	ldr	r0, [pc, #56]	; (8012fa0 <main+0x84>)
 8012f66:	f7f8 ff4f 	bl	800be08 <HAL_TIM_PWM_Start>

	// Setup pins
	writePin(LEDA, LOW);
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	480d      	ldr	r0, [pc, #52]	; (8012fa4 <main+0x88>)
 8012f70:	f7f4 f8f2 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDB, LOW);
 8012f74:	2200      	movs	r2, #0
 8012f76:	2102      	movs	r1, #2
 8012f78:	480a      	ldr	r0, [pc, #40]	; (8012fa4 <main+0x88>)
 8012f7a:	f7f4 f8ed 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDC, LOW);
 8012f7e:	2200      	movs	r2, #0
 8012f80:	2104      	movs	r1, #4
 8012f82:	4808      	ldr	r0, [pc, #32]	; (8012fa4 <main+0x88>)
 8012f84:	f7f4 f8e8 	bl	8007158 <HAL_GPIO_WritePin>
	writePin(LEDD, LOW);
 8012f88:	2200      	movs	r2, #0
 8012f8a:	2108      	movs	r1, #8
 8012f8c:	4805      	ldr	r0, [pc, #20]	; (8012fa4 <main+0x88>)
 8012f8e:	f7f4 f8e3 	bl	8007158 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8012f92:	f7ff ff1d 	bl	8012dd0 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8012f96:	f7ff ff93 	bl	8012ec0 <loop>
 8012f9a:	e7fc      	b.n	8012f96 <main+0x7a>
 8012f9c:	20004098 	.word	0x20004098
 8012fa0:	20003e7c 	.word	0x20003e7c
 8012fa4:	40020800 	.word	0x40020800

08012fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b098      	sub	sp, #96	; 0x60
 8012fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012fae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012fb2:	2230      	movs	r2, #48	; 0x30
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f001 ffc5 	bl	8014f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012fbc:	f107 031c 	add.w	r3, r7, #28
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	601a      	str	r2, [r3, #0]
 8012fc4:	605a      	str	r2, [r3, #4]
 8012fc6:	609a      	str	r2, [r3, #8]
 8012fc8:	60da      	str	r2, [r3, #12]
 8012fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012fcc:	f107 030c 	add.w	r3, r7, #12
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	601a      	str	r2, [r3, #0]
 8012fd4:	605a      	str	r2, [r3, #4]
 8012fd6:	609a      	str	r2, [r3, #8]
 8012fd8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012fda:	2300      	movs	r3, #0
 8012fdc:	60bb      	str	r3, [r7, #8]
 8012fde:	4b31      	ldr	r3, [pc, #196]	; (80130a4 <SystemClock_Config+0xfc>)
 8012fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fe2:	4a30      	ldr	r2, [pc, #192]	; (80130a4 <SystemClock_Config+0xfc>)
 8012fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8012fea:	4b2e      	ldr	r3, [pc, #184]	; (80130a4 <SystemClock_Config+0xfc>)
 8012fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ff2:	60bb      	str	r3, [r7, #8]
 8012ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	607b      	str	r3, [r7, #4]
 8012ffa:	4b2b      	ldr	r3, [pc, #172]	; (80130a8 <SystemClock_Config+0x100>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	4a2a      	ldr	r2, [pc, #168]	; (80130a8 <SystemClock_Config+0x100>)
 8013000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013004:	6013      	str	r3, [r2, #0]
 8013006:	4b28      	ldr	r3, [pc, #160]	; (80130a8 <SystemClock_Config+0x100>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801300e:	607b      	str	r3, [r7, #4]
 8013010:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8013012:	2305      	movs	r3, #5
 8013014:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801301a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801301c:	2301      	movs	r3, #1
 801301e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013020:	2302      	movs	r3, #2
 8013022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013028:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 801302a:	2306      	movs	r3, #6
 801302c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 801302e:	23a8      	movs	r3, #168	; 0xa8
 8013030:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013032:	2302      	movs	r3, #2
 8013034:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013036:	2307      	movs	r3, #7
 8013038:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801303a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801303e:	4618      	mov	r0, r3
 8013040:	f7f6 f9c8 	bl	80093d4 <HAL_RCC_OscConfig>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d001      	beq.n	801304e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 801304a:	f000 fba5 	bl	8013798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801304e:	230f      	movs	r3, #15
 8013050:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013052:	2302      	movs	r3, #2
 8013054:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013056:	2300      	movs	r3, #0
 8013058:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801305a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801305e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013064:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013066:	f107 031c 	add.w	r3, r7, #28
 801306a:	2105      	movs	r1, #5
 801306c:	4618      	mov	r0, r3
 801306e:	f7f6 fbf3 	bl	8009858 <HAL_RCC_ClockConfig>
 8013072:	4603      	mov	r3, r0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d001      	beq.n	801307c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8013078:	f000 fb8e 	bl	8013798 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 801307c:	2302      	movs	r3, #2
 801307e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8013080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013084:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013086:	f107 030c 	add.w	r3, r7, #12
 801308a:	4618      	mov	r0, r3
 801308c:	f7f6 fdac 	bl	8009be8 <HAL_RCCEx_PeriphCLKConfig>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d001      	beq.n	801309a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8013096:	f000 fb7f 	bl	8013798 <Error_Handler>
  }
}
 801309a:	bf00      	nop
 801309c:	3760      	adds	r7, #96	; 0x60
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	40023800 	.word	0x40023800
 80130a8:	40007000 	.word	0x40007000

080130ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80130b0:	4b12      	ldr	r3, [pc, #72]	; (80130fc <MX_I2C1_Init+0x50>)
 80130b2:	4a13      	ldr	r2, [pc, #76]	; (8013100 <MX_I2C1_Init+0x54>)
 80130b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80130b6:	4b11      	ldr	r3, [pc, #68]	; (80130fc <MX_I2C1_Init+0x50>)
 80130b8:	4a12      	ldr	r2, [pc, #72]	; (8013104 <MX_I2C1_Init+0x58>)
 80130ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80130bc:	4b0f      	ldr	r3, [pc, #60]	; (80130fc <MX_I2C1_Init+0x50>)
 80130be:	2200      	movs	r2, #0
 80130c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80130c2:	4b0e      	ldr	r3, [pc, #56]	; (80130fc <MX_I2C1_Init+0x50>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80130c8:	4b0c      	ldr	r3, [pc, #48]	; (80130fc <MX_I2C1_Init+0x50>)
 80130ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80130ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80130d0:	4b0a      	ldr	r3, [pc, #40]	; (80130fc <MX_I2C1_Init+0x50>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80130d6:	4b09      	ldr	r3, [pc, #36]	; (80130fc <MX_I2C1_Init+0x50>)
 80130d8:	2200      	movs	r2, #0
 80130da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80130dc:	4b07      	ldr	r3, [pc, #28]	; (80130fc <MX_I2C1_Init+0x50>)
 80130de:	2200      	movs	r2, #0
 80130e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80130e2:	4b06      	ldr	r3, [pc, #24]	; (80130fc <MX_I2C1_Init+0x50>)
 80130e4:	2200      	movs	r2, #0
 80130e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80130e8:	4804      	ldr	r0, [pc, #16]	; (80130fc <MX_I2C1_Init+0x50>)
 80130ea:	f7f4 f869 	bl	80071c0 <HAL_I2C_Init>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d001      	beq.n	80130f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80130f4:	f000 fb50 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80130f8:	bf00      	nop
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	20003dd4 	.word	0x20003dd4
 8013100:	40005400 	.word	0x40005400
 8013104:	00061a80 	.word	0x00061a80

08013108 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 801310c:	4b12      	ldr	r3, [pc, #72]	; (8013158 <MX_I2C2_Init+0x50>)
 801310e:	4a13      	ldr	r2, [pc, #76]	; (801315c <MX_I2C2_Init+0x54>)
 8013110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8013112:	4b11      	ldr	r3, [pc, #68]	; (8013158 <MX_I2C2_Init+0x50>)
 8013114:	4a12      	ldr	r2, [pc, #72]	; (8013160 <MX_I2C2_Init+0x58>)
 8013116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013118:	4b0f      	ldr	r3, [pc, #60]	; (8013158 <MX_I2C2_Init+0x50>)
 801311a:	2200      	movs	r2, #0
 801311c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 801311e:	4b0e      	ldr	r3, [pc, #56]	; (8013158 <MX_I2C2_Init+0x50>)
 8013120:	2200      	movs	r2, #0
 8013122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013124:	4b0c      	ldr	r3, [pc, #48]	; (8013158 <MX_I2C2_Init+0x50>)
 8013126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801312a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801312c:	4b0a      	ldr	r3, [pc, #40]	; (8013158 <MX_I2C2_Init+0x50>)
 801312e:	2200      	movs	r2, #0
 8013130:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8013132:	4b09      	ldr	r3, [pc, #36]	; (8013158 <MX_I2C2_Init+0x50>)
 8013134:	2200      	movs	r2, #0
 8013136:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013138:	4b07      	ldr	r3, [pc, #28]	; (8013158 <MX_I2C2_Init+0x50>)
 801313a:	2200      	movs	r2, #0
 801313c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801313e:	4b06      	ldr	r3, [pc, #24]	; (8013158 <MX_I2C2_Init+0x50>)
 8013140:	2200      	movs	r2, #0
 8013142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013144:	4804      	ldr	r0, [pc, #16]	; (8013158 <MX_I2C2_Init+0x50>)
 8013146:	f7f4 f83b 	bl	80071c0 <HAL_I2C_Init>
 801314a:	4603      	mov	r3, r0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d001      	beq.n	8013154 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8013150:	f000 fb22 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013154:	bf00      	nop
 8013156:	bd80      	pop	{r7, pc}
 8013158:	20003e28 	.word	0x20003e28
 801315c:	40005800 	.word	0x40005800
 8013160:	000186a0 	.word	0x000186a0

08013164 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8013168:	4b0f      	ldr	r3, [pc, #60]	; (80131a8 <MX_RTC_Init+0x44>)
 801316a:	4a10      	ldr	r2, [pc, #64]	; (80131ac <MX_RTC_Init+0x48>)
 801316c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801316e:	4b0e      	ldr	r3, [pc, #56]	; (80131a8 <MX_RTC_Init+0x44>)
 8013170:	2200      	movs	r2, #0
 8013172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8013174:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <MX_RTC_Init+0x44>)
 8013176:	227f      	movs	r2, #127	; 0x7f
 8013178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801317a:	4b0b      	ldr	r3, [pc, #44]	; (80131a8 <MX_RTC_Init+0x44>)
 801317c:	22ff      	movs	r2, #255	; 0xff
 801317e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013180:	4b09      	ldr	r3, [pc, #36]	; (80131a8 <MX_RTC_Init+0x44>)
 8013182:	2200      	movs	r2, #0
 8013184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8013186:	4b08      	ldr	r3, [pc, #32]	; (80131a8 <MX_RTC_Init+0x44>)
 8013188:	2200      	movs	r2, #0
 801318a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <MX_RTC_Init+0x44>)
 801318e:	2200      	movs	r2, #0
 8013190:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013192:	4805      	ldr	r0, [pc, #20]	; (80131a8 <MX_RTC_Init+0x44>)
 8013194:	f7f6 fe0a 	bl	8009dac <HAL_RTC_Init>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d001      	beq.n	80131a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 801319e:	f000 fafb 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80131a2:	bf00      	nop
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	20003f3c 	.word	0x20003f3c
 80131ac:	40002800 	.word	0x40002800

080131b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80131b0:	b480      	push	{r7}
 80131b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80131b4:	4b0c      	ldr	r3, [pc, #48]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131b6:	4a0d      	ldr	r2, [pc, #52]	; (80131ec <MX_SDIO_SD_Init+0x3c>)
 80131b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80131ba:	4b0b      	ldr	r3, [pc, #44]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131bc:	2200      	movs	r2, #0
 80131be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80131c0:	4b09      	ldr	r3, [pc, #36]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80131c6:	4b08      	ldr	r3, [pc, #32]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131c8:	2200      	movs	r2, #0
 80131ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80131cc:	4b06      	ldr	r3, [pc, #24]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131ce:	2200      	movs	r2, #0
 80131d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80131d2:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80131d8:	4b03      	ldr	r3, [pc, #12]	; (80131e8 <MX_SDIO_SD_Init+0x38>)
 80131da:	2200      	movs	r2, #0
 80131dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80131de:	bf00      	nop
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr
 80131e8:	20003fbc 	.word	0x20003fbc
 80131ec:	40012c00 	.word	0x40012c00

080131f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80131f4:	4b17      	ldr	r3, [pc, #92]	; (8013254 <MX_SPI1_Init+0x64>)
 80131f6:	4a18      	ldr	r2, [pc, #96]	; (8013258 <MX_SPI1_Init+0x68>)
 80131f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80131fa:	4b16      	ldr	r3, [pc, #88]	; (8013254 <MX_SPI1_Init+0x64>)
 80131fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013202:	4b14      	ldr	r3, [pc, #80]	; (8013254 <MX_SPI1_Init+0x64>)
 8013204:	2200      	movs	r2, #0
 8013206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013208:	4b12      	ldr	r3, [pc, #72]	; (8013254 <MX_SPI1_Init+0x64>)
 801320a:	2200      	movs	r2, #0
 801320c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801320e:	4b11      	ldr	r3, [pc, #68]	; (8013254 <MX_SPI1_Init+0x64>)
 8013210:	2200      	movs	r2, #0
 8013212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013214:	4b0f      	ldr	r3, [pc, #60]	; (8013254 <MX_SPI1_Init+0x64>)
 8013216:	2200      	movs	r2, #0
 8013218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801321a:	4b0e      	ldr	r3, [pc, #56]	; (8013254 <MX_SPI1_Init+0x64>)
 801321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8013222:	4b0c      	ldr	r3, [pc, #48]	; (8013254 <MX_SPI1_Init+0x64>)
 8013224:	2218      	movs	r2, #24
 8013226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013228:	4b0a      	ldr	r3, [pc, #40]	; (8013254 <MX_SPI1_Init+0x64>)
 801322a:	2200      	movs	r2, #0
 801322c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801322e:	4b09      	ldr	r3, [pc, #36]	; (8013254 <MX_SPI1_Init+0x64>)
 8013230:	2200      	movs	r2, #0
 8013232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013234:	4b07      	ldr	r3, [pc, #28]	; (8013254 <MX_SPI1_Init+0x64>)
 8013236:	2200      	movs	r2, #0
 8013238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801323a:	4b06      	ldr	r3, [pc, #24]	; (8013254 <MX_SPI1_Init+0x64>)
 801323c:	220a      	movs	r2, #10
 801323e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013240:	4804      	ldr	r0, [pc, #16]	; (8013254 <MX_SPI1_Init+0x64>)
 8013242:	f7f8 f976 	bl	800b532 <HAL_SPI_Init>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d001      	beq.n	8013250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 801324c:	f000 faa4 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013250:	bf00      	nop
 8013252:	bd80      	pop	{r7, pc}
 8013254:	20004040 	.word	0x20004040
 8013258:	40013000 	.word	0x40013000

0801325c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013262:	f107 0308 	add.w	r3, r7, #8
 8013266:	2200      	movs	r2, #0
 8013268:	601a      	str	r2, [r3, #0]
 801326a:	605a      	str	r2, [r3, #4]
 801326c:	609a      	str	r2, [r3, #8]
 801326e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013270:	463b      	mov	r3, r7
 8013272:	2200      	movs	r2, #0
 8013274:	601a      	str	r2, [r3, #0]
 8013276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013278:	4b1d      	ldr	r3, [pc, #116]	; (80132f0 <MX_TIM2_Init+0x94>)
 801327a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801327e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8013280:	4b1b      	ldr	r3, [pc, #108]	; (80132f0 <MX_TIM2_Init+0x94>)
 8013282:	2253      	movs	r2, #83	; 0x53
 8013284:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013286:	4b1a      	ldr	r3, [pc, #104]	; (80132f0 <MX_TIM2_Init+0x94>)
 8013288:	2200      	movs	r2, #0
 801328a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 801328c:	4b18      	ldr	r3, [pc, #96]	; (80132f0 <MX_TIM2_Init+0x94>)
 801328e:	4a19      	ldr	r2, [pc, #100]	; (80132f4 <MX_TIM2_Init+0x98>)
 8013290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013292:	4b17      	ldr	r3, [pc, #92]	; (80132f0 <MX_TIM2_Init+0x94>)
 8013294:	2200      	movs	r2, #0
 8013296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013298:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <MX_TIM2_Init+0x94>)
 801329a:	2200      	movs	r2, #0
 801329c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801329e:	4814      	ldr	r0, [pc, #80]	; (80132f0 <MX_TIM2_Init+0x94>)
 80132a0:	f7f8 fd2e 	bl	800bd00 <HAL_TIM_Base_Init>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d001      	beq.n	80132ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80132aa:	f000 fa75 	bl	8013798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80132ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80132b4:	f107 0308 	add.w	r3, r7, #8
 80132b8:	4619      	mov	r1, r3
 80132ba:	480d      	ldr	r0, [pc, #52]	; (80132f0 <MX_TIM2_Init+0x94>)
 80132bc:	f7f8 ff00 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d001      	beq.n	80132ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80132c6:	f000 fa67 	bl	8013798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80132ca:	2300      	movs	r3, #0
 80132cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80132ce:	2300      	movs	r3, #0
 80132d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80132d2:	463b      	mov	r3, r7
 80132d4:	4619      	mov	r1, r3
 80132d6:	4806      	ldr	r0, [pc, #24]	; (80132f0 <MX_TIM2_Init+0x94>)
 80132d8:	f7f9 fab9 	bl	800c84e <HAL_TIMEx_MasterConfigSynchronization>
 80132dc:	4603      	mov	r3, r0
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d001      	beq.n	80132e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80132e2:	f000 fa59 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80132e6:	bf00      	nop
 80132e8:	3718      	adds	r7, #24
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20004098 	.word	0x20004098
 80132f4:	fa56ea00 	.word	0xfa56ea00

080132f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08e      	sub	sp, #56	; 0x38
 80132fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80132fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	605a      	str	r2, [r3, #4]
 8013308:	609a      	str	r2, [r3, #8]
 801330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801330c:	f107 0320 	add.w	r3, r7, #32
 8013310:	2200      	movs	r2, #0
 8013312:	601a      	str	r2, [r3, #0]
 8013314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013316:	1d3b      	adds	r3, r7, #4
 8013318:	2200      	movs	r2, #0
 801331a:	601a      	str	r2, [r3, #0]
 801331c:	605a      	str	r2, [r3, #4]
 801331e:	609a      	str	r2, [r3, #8]
 8013320:	60da      	str	r2, [r3, #12]
 8013322:	611a      	str	r2, [r3, #16]
 8013324:	615a      	str	r2, [r3, #20]
 8013326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013328:	4b32      	ldr	r3, [pc, #200]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801332a:	4a33      	ldr	r2, [pc, #204]	; (80133f8 <MX_TIM3_Init+0x100>)
 801332c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 801332e:	4b31      	ldr	r3, [pc, #196]	; (80133f4 <MX_TIM3_Init+0xfc>)
 8013330:	2201      	movs	r2, #1
 8013332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013334:	4b2f      	ldr	r3, [pc, #188]	; (80133f4 <MX_TIM3_Init+0xfc>)
 8013336:	2200      	movs	r2, #0
 8013338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 801333a:	4b2e      	ldr	r3, [pc, #184]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801333c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013342:	4b2c      	ldr	r3, [pc, #176]	; (80133f4 <MX_TIM3_Init+0xfc>)
 8013344:	2200      	movs	r2, #0
 8013346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013348:	4b2a      	ldr	r3, [pc, #168]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801334a:	2200      	movs	r2, #0
 801334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801334e:	4829      	ldr	r0, [pc, #164]	; (80133f4 <MX_TIM3_Init+0xfc>)
 8013350:	f7f8 fcd6 	bl	800bd00 <HAL_TIM_Base_Init>
 8013354:	4603      	mov	r3, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	d001      	beq.n	801335e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 801335a:	f000 fa1d 	bl	8013798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8013364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013368:	4619      	mov	r1, r3
 801336a:	4822      	ldr	r0, [pc, #136]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801336c:	f7f8 fea8 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8013376:	f000 fa0f 	bl	8013798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801337a:	481e      	ldr	r0, [pc, #120]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801337c:	f7f8 fd0f 	bl	800bd9e <HAL_TIM_PWM_Init>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8013386:	f000 fa07 	bl	8013798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801338a:	2300      	movs	r3, #0
 801338c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801338e:	2300      	movs	r3, #0
 8013390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013392:	f107 0320 	add.w	r3, r7, #32
 8013396:	4619      	mov	r1, r3
 8013398:	4816      	ldr	r0, [pc, #88]	; (80133f4 <MX_TIM3_Init+0xfc>)
 801339a:	f7f9 fa58 	bl	800c84e <HAL_TIMEx_MasterConfigSynchronization>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d001      	beq.n	80133a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80133a4:	f000 f9f8 	bl	8013798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80133a8:	2360      	movs	r3, #96	; 0x60
 80133aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80133ac:	2300      	movs	r3, #0
 80133ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80133b0:	2302      	movs	r3, #2
 80133b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80133b4:	2300      	movs	r3, #0
 80133b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80133b8:	1d3b      	adds	r3, r7, #4
 80133ba:	2204      	movs	r2, #4
 80133bc:	4619      	mov	r1, r3
 80133be:	480d      	ldr	r0, [pc, #52]	; (80133f4 <MX_TIM3_Init+0xfc>)
 80133c0:	f7f8 fdb8 	bl	800bf34 <HAL_TIM_PWM_ConfigChannel>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80133ca:	f000 f9e5 	bl	8013798 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80133ce:	1d3b      	adds	r3, r7, #4
 80133d0:	2208      	movs	r2, #8
 80133d2:	4619      	mov	r1, r3
 80133d4:	4807      	ldr	r0, [pc, #28]	; (80133f4 <MX_TIM3_Init+0xfc>)
 80133d6:	f7f8 fdad 	bl	800bf34 <HAL_TIM_PWM_ConfigChannel>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80133e0:	f000 f9da 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80133e4:	4803      	ldr	r0, [pc, #12]	; (80133f4 <MX_TIM3_Init+0xfc>)
 80133e6:	f000 fe77 	bl	80140d8 <HAL_TIM_MspPostInit>

}
 80133ea:	bf00      	nop
 80133ec:	3738      	adds	r7, #56	; 0x38
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	20003ebc 	.word	0x20003ebc
 80133f8:	40000400 	.word	0x40000400

080133fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b08e      	sub	sp, #56	; 0x38
 8013400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	605a      	str	r2, [r3, #4]
 801340c:	609a      	str	r2, [r3, #8]
 801340e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013410:	f107 0320 	add.w	r3, r7, #32
 8013414:	2200      	movs	r2, #0
 8013416:	601a      	str	r2, [r3, #0]
 8013418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801341a:	1d3b      	adds	r3, r7, #4
 801341c:	2200      	movs	r2, #0
 801341e:	601a      	str	r2, [r3, #0]
 8013420:	605a      	str	r2, [r3, #4]
 8013422:	609a      	str	r2, [r3, #8]
 8013424:	60da      	str	r2, [r3, #12]
 8013426:	611a      	str	r2, [r3, #16]
 8013428:	615a      	str	r2, [r3, #20]
 801342a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801342c:	4b2c      	ldr	r3, [pc, #176]	; (80134e0 <MX_TIM5_Init+0xe4>)
 801342e:	4a2d      	ldr	r2, [pc, #180]	; (80134e4 <MX_TIM5_Init+0xe8>)
 8013430:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 8013432:	4b2b      	ldr	r3, [pc, #172]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013434:	22a7      	movs	r2, #167	; 0xa7
 8013436:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013438:	4b29      	ldr	r3, [pc, #164]	; (80134e0 <MX_TIM5_Init+0xe4>)
 801343a:	2200      	movs	r2, #0
 801343c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 801343e:	4b28      	ldr	r3, [pc, #160]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013440:	f242 7210 	movw	r2, #10000	; 0x2710
 8013444:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013446:	4b26      	ldr	r3, [pc, #152]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013448:	2200      	movs	r2, #0
 801344a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801344c:	4b24      	ldr	r3, [pc, #144]	; (80134e0 <MX_TIM5_Init+0xe4>)
 801344e:	2200      	movs	r2, #0
 8013450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8013452:	4823      	ldr	r0, [pc, #140]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013454:	f7f8 fc54 	bl	800bd00 <HAL_TIM_Base_Init>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d001      	beq.n	8013462 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801345e:	f000 f99b 	bl	8013798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013466:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8013468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801346c:	4619      	mov	r1, r3
 801346e:	481c      	ldr	r0, [pc, #112]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013470:	f7f8 fe26 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 8013474:	4603      	mov	r3, r0
 8013476:	2b00      	cmp	r3, #0
 8013478:	d001      	beq.n	801347e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 801347a:	f000 f98d 	bl	8013798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801347e:	4818      	ldr	r0, [pc, #96]	; (80134e0 <MX_TIM5_Init+0xe4>)
 8013480:	f7f8 fc8d 	bl	800bd9e <HAL_TIM_PWM_Init>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d001      	beq.n	801348e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 801348a:	f000 f985 	bl	8013798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801348e:	2300      	movs	r3, #0
 8013490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013492:	2300      	movs	r3, #0
 8013494:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8013496:	f107 0320 	add.w	r3, r7, #32
 801349a:	4619      	mov	r1, r3
 801349c:	4810      	ldr	r0, [pc, #64]	; (80134e0 <MX_TIM5_Init+0xe4>)
 801349e:	f7f9 f9d6 	bl	800c84e <HAL_TIMEx_MasterConfigSynchronization>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80134a8:	f000 f976 	bl	8013798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80134ac:	2360      	movs	r3, #96	; 0x60
 80134ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80134b0:	2300      	movs	r3, #0
 80134b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80134b4:	2300      	movs	r3, #0
 80134b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80134b8:	2300      	movs	r3, #0
 80134ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80134bc:	1d3b      	adds	r3, r7, #4
 80134be:	220c      	movs	r2, #12
 80134c0:	4619      	mov	r1, r3
 80134c2:	4807      	ldr	r0, [pc, #28]	; (80134e0 <MX_TIM5_Init+0xe4>)
 80134c4:	f7f8 fd36 	bl	800bf34 <HAL_TIM_PWM_ConfigChannel>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d001      	beq.n	80134d2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80134ce:	f000 f963 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80134d2:	4803      	ldr	r0, [pc, #12]	; (80134e0 <MX_TIM5_Init+0xe4>)
 80134d4:	f000 fe00 	bl	80140d8 <HAL_TIM_MspPostInit>

}
 80134d8:	bf00      	nop
 80134da:	3738      	adds	r7, #56	; 0x38
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	20003e7c 	.word	0x20003e7c
 80134e4:	40000c00 	.word	0x40000c00

080134e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80134ec:	4b11      	ldr	r3, [pc, #68]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 80134ee:	4a12      	ldr	r2, [pc, #72]	; (8013538 <MX_USART1_UART_Init+0x50>)
 80134f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80134f2:	4b10      	ldr	r3, [pc, #64]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 80134f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80134f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80134fa:	4b0e      	ldr	r3, [pc, #56]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 80134fc:	2200      	movs	r2, #0
 80134fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013500:	4b0c      	ldr	r3, [pc, #48]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 8013502:	2200      	movs	r2, #0
 8013504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013506:	4b0b      	ldr	r3, [pc, #44]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 8013508:	2200      	movs	r2, #0
 801350a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801350c:	4b09      	ldr	r3, [pc, #36]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 801350e:	220c      	movs	r2, #12
 8013510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013512:	4b08      	ldr	r3, [pc, #32]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 8013514:	2200      	movs	r2, #0
 8013516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013518:	4b06      	ldr	r3, [pc, #24]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 801351a:	2200      	movs	r2, #0
 801351c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801351e:	4805      	ldr	r0, [pc, #20]	; (8013534 <MX_USART1_UART_Init+0x4c>)
 8013520:	f7f9 f9da 	bl	800c8d8 <HAL_UART_Init>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d001      	beq.n	801352e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 801352a:	f000 f935 	bl	8013798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801352e:	bf00      	nop
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	20003efc 	.word	0x20003efc
 8013538:	40011000 	.word	0x40011000

0801353c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013542:	2300      	movs	r3, #0
 8013544:	607b      	str	r3, [r7, #4]
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <MX_DMA_Init+0x4c>)
 8013548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801354a:	4a0f      	ldr	r2, [pc, #60]	; (8013588 <MX_DMA_Init+0x4c>)
 801354c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013550:	6313      	str	r3, [r2, #48]	; 0x30
 8013552:	4b0d      	ldr	r3, [pc, #52]	; (8013588 <MX_DMA_Init+0x4c>)
 8013554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801355a:	607b      	str	r3, [r7, #4]
 801355c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 801355e:	2200      	movs	r2, #0
 8013560:	2100      	movs	r1, #0
 8013562:	203b      	movs	r0, #59	; 0x3b
 8013564:	f7f3 f877 	bl	8006656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8013568:	203b      	movs	r0, #59	; 0x3b
 801356a:	f7f3 f890 	bl	800668e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 801356e:	2200      	movs	r2, #0
 8013570:	2100      	movs	r1, #0
 8013572:	2045      	movs	r0, #69	; 0x45
 8013574:	f7f3 f86f 	bl	8006656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8013578:	2045      	movs	r0, #69	; 0x45
 801357a:	f7f3 f888 	bl	800668e <HAL_NVIC_EnableIRQ>

}
 801357e:	bf00      	nop
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	40023800 	.word	0x40023800

0801358c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08a      	sub	sp, #40	; 0x28
 8013590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013592:	f107 0314 	add.w	r3, r7, #20
 8013596:	2200      	movs	r2, #0
 8013598:	601a      	str	r2, [r3, #0]
 801359a:	605a      	str	r2, [r3, #4]
 801359c:	609a      	str	r2, [r3, #8]
 801359e:	60da      	str	r2, [r3, #12]
 80135a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80135a2:	2300      	movs	r3, #0
 80135a4:	613b      	str	r3, [r7, #16]
 80135a6:	4b64      	ldr	r3, [pc, #400]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135aa:	4a63      	ldr	r2, [pc, #396]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135ac:	f043 0304 	orr.w	r3, r3, #4
 80135b0:	6313      	str	r3, [r2, #48]	; 0x30
 80135b2:	4b61      	ldr	r3, [pc, #388]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b6:	f003 0304 	and.w	r3, r3, #4
 80135ba:	613b      	str	r3, [r7, #16]
 80135bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80135be:	2300      	movs	r3, #0
 80135c0:	60fb      	str	r3, [r7, #12]
 80135c2:	4b5d      	ldr	r3, [pc, #372]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135c6:	4a5c      	ldr	r2, [pc, #368]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135cc:	6313      	str	r3, [r2, #48]	; 0x30
 80135ce:	4b5a      	ldr	r3, [pc, #360]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135d6:	60fb      	str	r3, [r7, #12]
 80135d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80135da:	2300      	movs	r3, #0
 80135dc:	60bb      	str	r3, [r7, #8]
 80135de:	4b56      	ldr	r3, [pc, #344]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135e2:	4a55      	ldr	r2, [pc, #340]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135e4:	f043 0301 	orr.w	r3, r3, #1
 80135e8:	6313      	str	r3, [r2, #48]	; 0x30
 80135ea:	4b53      	ldr	r3, [pc, #332]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ee:	f003 0301 	and.w	r3, r3, #1
 80135f2:	60bb      	str	r3, [r7, #8]
 80135f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80135f6:	2300      	movs	r3, #0
 80135f8:	607b      	str	r3, [r7, #4]
 80135fa:	4b4f      	ldr	r3, [pc, #316]	; (8013738 <MX_GPIO_Init+0x1ac>)
 80135fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135fe:	4a4e      	ldr	r2, [pc, #312]	; (8013738 <MX_GPIO_Init+0x1ac>)
 8013600:	f043 0302 	orr.w	r3, r3, #2
 8013604:	6313      	str	r3, [r2, #48]	; 0x30
 8013606:	4b4c      	ldr	r3, [pc, #304]	; (8013738 <MX_GPIO_Init+0x1ac>)
 8013608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801360a:	f003 0302 	and.w	r3, r3, #2
 801360e:	607b      	str	r3, [r7, #4]
 8013610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013612:	2300      	movs	r3, #0
 8013614:	603b      	str	r3, [r7, #0]
 8013616:	4b48      	ldr	r3, [pc, #288]	; (8013738 <MX_GPIO_Init+0x1ac>)
 8013618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801361a:	4a47      	ldr	r2, [pc, #284]	; (8013738 <MX_GPIO_Init+0x1ac>)
 801361c:	f043 0308 	orr.w	r3, r3, #8
 8013620:	6313      	str	r3, [r2, #48]	; 0x30
 8013622:	4b45      	ldr	r3, [pc, #276]	; (8013738 <MX_GPIO_Init+0x1ac>)
 8013624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013626:	f003 0308 	and.w	r3, r3, #8
 801362a:	603b      	str	r3, [r7, #0]
 801362c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LR_NSS_Pin|LEDA_Pin|LEDB_Pin|LEDC_Pin 
 801362e:	2200      	movs	r2, #0
 8013630:	f242 010f 	movw	r1, #8207	; 0x200f
 8013634:	4841      	ldr	r0, [pc, #260]	; (801373c <MX_GPIO_Init+0x1b0>)
 8013636:	f7f3 fd8f 	bl	8007158 <HAL_GPIO_WritePin>
                          |LEDD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT_STBY_Pin|PH_R_Pin|PH_L_Pin, GPIO_PIN_RESET);
 801363a:	2200      	movs	r2, #0
 801363c:	f245 0104 	movw	r1, #20484	; 0x5004
 8013640:	483f      	ldr	r0, [pc, #252]	; (8013740 <MX_GPIO_Init+0x1b4>)
 8013642:	f7f3 fd89 	bl	8007158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LR_RESET_GPIO_Port, LR_RESET_Pin, GPIO_PIN_RESET);
 8013646:	2200      	movs	r2, #0
 8013648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801364c:	483d      	ldr	r0, [pc, #244]	; (8013744 <MX_GPIO_Init+0x1b8>)
 801364e:	f7f3 fd83 	bl	8007158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8013652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013658:	2301      	movs	r3, #1
 801365a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801365c:	2302      	movs	r3, #2
 801365e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013660:	2300      	movs	r3, #0
 8013662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8013664:	f107 0314 	add.w	r3, r7, #20
 8013668:	4619      	mov	r1, r3
 801366a:	4834      	ldr	r0, [pc, #208]	; (801373c <MX_GPIO_Init+0x1b0>)
 801366c:	f7f3 fbc2 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 8013670:	230f      	movs	r3, #15
 8013672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013674:	2301      	movs	r3, #1
 8013676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013678:	2300      	movs	r3, #0
 801367a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801367c:	2300      	movs	r3, #0
 801367e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013680:	f107 0314 	add.w	r3, r7, #20
 8013684:	4619      	mov	r1, r3
 8013686:	482d      	ldr	r0, [pc, #180]	; (801373c <MX_GPIO_Init+0x1b0>)
 8013688:	f7f3 fbb4 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_DIO1_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_DIO1_Pin;
 801368c:	2330      	movs	r3, #48	; 0x30
 801368e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013690:	2300      	movs	r3, #0
 8013692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013694:	2302      	movs	r3, #2
 8013696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013698:	f107 0314 	add.w	r3, r7, #20
 801369c:	4619      	mov	r1, r3
 801369e:	4827      	ldr	r0, [pc, #156]	; (801373c <MX_GPIO_Init+0x1b0>)
 80136a0:	f7f3 fba8 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT_STBY_Pin */
  GPIO_InitStruct.Pin = MOT_STBY_Pin;
 80136a4:	2304      	movs	r3, #4
 80136a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80136a8:	2301      	movs	r3, #1
 80136aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136b0:	2300      	movs	r3, #0
 80136b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT_STBY_GPIO_Port, &GPIO_InitStruct);
 80136b4:	f107 0314 	add.w	r3, r7, #20
 80136b8:	4619      	mov	r1, r3
 80136ba:	4821      	ldr	r0, [pc, #132]	; (8013740 <MX_GPIO_Init+0x1b4>)
 80136bc:	f7f3 fb9a 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_R_Pin PH_L_Pin */
  GPIO_InitStruct.Pin = PH_R_Pin|PH_L_Pin;
 80136c0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80136c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80136c6:	2301      	movs	r3, #1
 80136c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80136ca:	2302      	movs	r3, #2
 80136cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80136ce:	2300      	movs	r3, #0
 80136d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80136d2:	f107 0314 	add.w	r3, r7, #20
 80136d6:	4619      	mov	r1, r3
 80136d8:	4819      	ldr	r0, [pc, #100]	; (8013740 <MX_GPIO_Init+0x1b4>)
 80136da:	f7f3 fb8b 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 80136de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80136e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80136e4:	2300      	movs	r3, #0
 80136e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80136e8:	2301      	movs	r3, #1
 80136ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 80136ec:	f107 0314 	add.w	r3, r7, #20
 80136f0:	4619      	mov	r1, r3
 80136f2:	4814      	ldr	r0, [pc, #80]	; (8013744 <MX_GPIO_Init+0x1b8>)
 80136f4:	f7f3 fb7e 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 80136f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80136fe:	2301      	movs	r3, #1
 8013700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013702:	2302      	movs	r3, #2
 8013704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013706:	2300      	movs	r3, #0
 8013708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 801370a:	f107 0314 	add.w	r3, r7, #20
 801370e:	4619      	mov	r1, r3
 8013710:	480c      	ldr	r0, [pc, #48]	; (8013744 <MX_GPIO_Init+0x1b8>)
 8013712:	f7f3 fb6f 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8013716:	f44f 7340 	mov.w	r3, #768	; 0x300
 801371a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801371c:	2300      	movs	r3, #0
 801371e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013720:	2302      	movs	r3, #2
 8013722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013724:	f107 0314 	add.w	r3, r7, #20
 8013728:	4619      	mov	r1, r3
 801372a:	4805      	ldr	r0, [pc, #20]	; (8013740 <MX_GPIO_Init+0x1b4>)
 801372c:	f7f3 fb62 	bl	8006df4 <HAL_GPIO_Init>

}
 8013730:	bf00      	nop
 8013732:	3728      	adds	r7, #40	; 0x28
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}
 8013738:	40023800 	.word	0x40023800
 801373c:	40020800 	.word	0x40020800
 8013740:	40020400 	.word	0x40020400
 8013744:	40020000 	.word	0x40020000

08013748 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
 801374c:	4b02      	ldr	r3, [pc, #8]	; (8013758 <Get_I2C1_Instance+0x10>)
 801374e:	4618      	mov	r0, r3
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr
 8013758:	20003dd4 	.word	0x20003dd4

0801375c <Get_SPI1_Instance>:
I2C_HandleTypeDef* Get_I2C2_Instance(void) { return &hi2c2; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 801375c:	b480      	push	{r7}
 801375e:	af00      	add	r7, sp, #0
 8013760:	4b02      	ldr	r3, [pc, #8]	; (801376c <Get_SPI1_Instance+0x10>)
 8013762:	4618      	mov	r0, r3
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr
 801376c:	20004040 	.word	0x20004040

08013770 <Get_UART1_Instance>:
UART_HandleTypeDef* Get_UART1_Instance(void) { return &huart1; }
 8013770:	b480      	push	{r7}
 8013772:	af00      	add	r7, sp, #0
 8013774:	4b02      	ldr	r3, [pc, #8]	; (8013780 <Get_UART1_Instance+0x10>)
 8013776:	4618      	mov	r0, r3
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr
 8013780:	20003efc 	.word	0x20003efc

08013784 <Get_TIM3_Instance>:
//UART_HandleTypeDef* Get_UART2_Instance(void) { return &huart2; }
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 8013784:	b480      	push	{r7}
 8013786:	af00      	add	r7, sp, #0
 8013788:	4b02      	ldr	r3, [pc, #8]	; (8013794 <Get_TIM3_Instance+0x10>)
 801378a:	4618      	mov	r0, r3
 801378c:	46bd      	mov	sp, r7
 801378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013792:	4770      	bx	lr
 8013794:	20003ebc 	.word	0x20003ebc

08013798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013798:	b480      	push	{r7}
 801379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801379c:	bf00      	nop
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b084      	sub	sp, #16
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80137ae:	f7f2 fe49 	bl	8006444 <HAL_GetTick>
 80137b2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80137b4:	e006      	b.n	80137c4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80137b6:	f7fd ff65 	bl	8011684 <BSP_SD_GetCardState>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d101      	bne.n	80137c4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80137c0:	2300      	movs	r3, #0
 80137c2:	e009      	b.n	80137d8 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80137c4:	f7f2 fe3e 	bl	8006444 <HAL_GetTick>
 80137c8:	4602      	mov	r2, r0
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	1ad3      	subs	r3, r2, r3
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d8f0      	bhi.n	80137b6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80137d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	4603      	mov	r3, r0
 80137e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80137ea:	4b0b      	ldr	r3, [pc, #44]	; (8013818 <SD_CheckStatus+0x38>)
 80137ec:	2201      	movs	r2, #1
 80137ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80137f0:	f7fd ff48 	bl	8011684 <BSP_SD_GetCardState>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d107      	bne.n	801380a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80137fa:	4b07      	ldr	r3, [pc, #28]	; (8013818 <SD_CheckStatus+0x38>)
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	f023 0301 	bic.w	r3, r3, #1
 8013804:	b2da      	uxtb	r2, r3
 8013806:	4b04      	ldr	r3, [pc, #16]	; (8013818 <SD_CheckStatus+0x38>)
 8013808:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801380a:	4b03      	ldr	r3, [pc, #12]	; (8013818 <SD_CheckStatus+0x38>)
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	b2db      	uxtb	r3, r3
}
 8013810:	4618      	mov	r0, r3
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	2000016c 	.word	0x2000016c

0801381c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013826:	f7fd fed3 	bl	80115d0 <BSP_SD_Init>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d107      	bne.n	8013840 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	4618      	mov	r0, r3
 8013834:	f7ff ffd4 	bl	80137e0 <SD_CheckStatus>
 8013838:	4603      	mov	r3, r0
 801383a:	461a      	mov	r2, r3
 801383c:	4b04      	ldr	r3, [pc, #16]	; (8013850 <SD_initialize+0x34>)
 801383e:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8013840:	4b03      	ldr	r3, [pc, #12]	; (8013850 <SD_initialize+0x34>)
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	b2db      	uxtb	r3, r3
}
 8013846:	4618      	mov	r0, r3
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	2000016c 	.word	0x2000016c

08013854 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	4603      	mov	r3, r0
 801385c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801385e:	79fb      	ldrb	r3, [r7, #7]
 8013860:	4618      	mov	r0, r3
 8013862:	f7ff ffbd 	bl	80137e0 <SD_CheckStatus>
 8013866:	4603      	mov	r3, r0
}
 8013868:	4618      	mov	r0, r3
 801386a:	3708      	adds	r7, #8
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b088      	sub	sp, #32
 8013874:	af00      	add	r7, sp, #0
 8013876:	60b9      	str	r1, [r7, #8]
 8013878:	607a      	str	r2, [r7, #4]
 801387a:	603b      	str	r3, [r7, #0]
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013880:	2301      	movs	r3, #1
 8013882:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013884:	f247 5030 	movw	r0, #30000	; 0x7530
 8013888:	f7ff ff8d 	bl	80137a6 <SD_CheckStatusWithTimeout>
 801388c:	4603      	mov	r3, r0
 801388e:	2b00      	cmp	r3, #0
 8013890:	da01      	bge.n	8013896 <SD_read+0x26>
  {
    return res;
 8013892:	7ffb      	ldrb	r3, [r7, #31]
 8013894:	e08b      	b.n	80139ae <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	f003 0303 	and.w	r3, r3, #3
 801389c:	2b00      	cmp	r3, #0
 801389e:	f040 8085 	bne.w	80139ac <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	6879      	ldr	r1, [r7, #4]
 80138a6:	68b8      	ldr	r0, [r7, #8]
 80138a8:	f7fd feb8 	bl	801161c <BSP_SD_ReadBlocks_DMA>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d133      	bne.n	801391a <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80138b2:	4b41      	ldr	r3, [pc, #260]	; (80139b8 <SD_read+0x148>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80138b8:	f7f2 fdc4 	bl	8006444 <HAL_GetTick>
 80138bc:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80138be:	bf00      	nop
 80138c0:	4b3d      	ldr	r3, [pc, #244]	; (80139b8 <SD_read+0x148>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d108      	bne.n	80138da <SD_read+0x6a>
 80138c8:	f7f2 fdbc 	bl	8006444 <HAL_GetTick>
 80138cc:	4602      	mov	r2, r0
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80138d6:	4293      	cmp	r3, r2
 80138d8:	d9f2      	bls.n	80138c0 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80138da:	4b37      	ldr	r3, [pc, #220]	; (80139b8 <SD_read+0x148>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d102      	bne.n	80138e8 <SD_read+0x78>
      {
        res = RES_ERROR;
 80138e2:	2301      	movs	r3, #1
 80138e4:	77fb      	strb	r3, [r7, #31]
 80138e6:	e061      	b.n	80139ac <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80138e8:	4b33      	ldr	r3, [pc, #204]	; (80139b8 <SD_read+0x148>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80138ee:	f7f2 fda9 	bl	8006444 <HAL_GetTick>
 80138f2:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80138f4:	e007      	b.n	8013906 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80138f6:	f7fd fec5 	bl	8011684 <BSP_SD_GetCardState>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d102      	bne.n	8013906 <SD_read+0x96>
          {
            res = RES_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013904:	e052      	b.n	80139ac <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013906:	f7f2 fd9d 	bl	8006444 <HAL_GetTick>
 801390a:	4602      	mov	r2, r0
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	f247 522f 	movw	r2, #29999	; 0x752f
 8013914:	4293      	cmp	r3, r2
 8013916:	d9ee      	bls.n	80138f6 <SD_read+0x86>
 8013918:	e048      	b.n	80139ac <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801391a:	2300      	movs	r3, #0
 801391c:	61bb      	str	r3, [r7, #24]
 801391e:	e034      	b.n	801398a <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	1c5a      	adds	r2, r3, #1
 8013924:	607a      	str	r2, [r7, #4]
 8013926:	2201      	movs	r2, #1
 8013928:	4619      	mov	r1, r3
 801392a:	4824      	ldr	r0, [pc, #144]	; (80139bc <SD_read+0x14c>)
 801392c:	f7fd fe76 	bl	801161c <BSP_SD_ReadBlocks_DMA>
 8013930:	4603      	mov	r3, r0
 8013932:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8013934:	7fbb      	ldrb	r3, [r7, #30]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d12c      	bne.n	8013994 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 801393a:	4b1f      	ldr	r3, [pc, #124]	; (80139b8 <SD_read+0x148>)
 801393c:	2200      	movs	r2, #0
 801393e:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8013940:	f7f2 fd80 	bl	8006444 <HAL_GetTick>
 8013944:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013946:	bf00      	nop
 8013948:	4b1b      	ldr	r3, [pc, #108]	; (80139b8 <SD_read+0x148>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d108      	bne.n	8013962 <SD_read+0xf2>
 8013950:	f7f2 fd78 	bl	8006444 <HAL_GetTick>
 8013954:	4602      	mov	r2, r0
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	1ad3      	subs	r3, r2, r3
 801395a:	f247 522f 	movw	r2, #29999	; 0x752f
 801395e:	4293      	cmp	r3, r2
 8013960:	d9f2      	bls.n	8013948 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8013962:	4b15      	ldr	r3, [pc, #84]	; (80139b8 <SD_read+0x148>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d016      	beq.n	8013998 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	4a13      	ldr	r2, [pc, #76]	; (80139bc <SD_read+0x14c>)
 801396e:	4618      	mov	r0, r3
 8013970:	4611      	mov	r1, r2
 8013972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013976:	461a      	mov	r2, r3
 8013978:	f001 fada 	bl	8014f30 <memcpy>
          buff += BLOCKSIZE;
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013982:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	3301      	adds	r3, #1
 8013988:	61bb      	str	r3, [r7, #24]
 801398a:	69bb      	ldr	r3, [r7, #24]
 801398c:	683a      	ldr	r2, [r7, #0]
 801398e:	429a      	cmp	r2, r3
 8013990:	d8c6      	bhi.n	8013920 <SD_read+0xb0>
 8013992:	e002      	b.n	801399a <SD_read+0x12a>
        }
        else
        {
          break;
 8013994:	bf00      	nop
 8013996:	e000      	b.n	801399a <SD_read+0x12a>
            break;
 8013998:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	683a      	ldr	r2, [r7, #0]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d104      	bne.n	80139ac <SD_read+0x13c>
 80139a2:	7fbb      	ldrb	r3, [r7, #30]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <SD_read+0x13c>
        res = RES_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80139ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3720      	adds	r7, #32
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	20001a2c 	.word	0x20001a2c
 80139bc:	20001828 	.word	0x20001828

080139c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b088      	sub	sp, #32
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60b9      	str	r1, [r7, #8]
 80139c8:	607a      	str	r2, [r7, #4]
 80139ca:	603b      	str	r3, [r7, #0]
 80139cc:	4603      	mov	r3, r0
 80139ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80139d0:	2301      	movs	r3, #1
 80139d2:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80139d4:	4b4c      	ldr	r3, [pc, #304]	; (8013b08 <SD_write+0x148>)
 80139d6:	2200      	movs	r2, #0
 80139d8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80139da:	f247 5030 	movw	r0, #30000	; 0x7530
 80139de:	f7ff fee2 	bl	80137a6 <SD_CheckStatusWithTimeout>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	da01      	bge.n	80139ec <SD_write+0x2c>
  {
    return res;
 80139e8:	7ffb      	ldrb	r3, [r7, #31]
 80139ea:	e088      	b.n	8013afe <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	f003 0303 	and.w	r3, r3, #3
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f040 8082 	bne.w	8013afc <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	6879      	ldr	r1, [r7, #4]
 80139fc:	68b8      	ldr	r0, [r7, #8]
 80139fe:	f7fd fe27 	bl	8011650 <BSP_SD_WriteBlocks_DMA>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d130      	bne.n	8013a6a <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013a08:	f7f2 fd1c 	bl	8006444 <HAL_GetTick>
 8013a0c:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013a0e:	bf00      	nop
 8013a10:	4b3d      	ldr	r3, [pc, #244]	; (8013b08 <SD_write+0x148>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d108      	bne.n	8013a2a <SD_write+0x6a>
 8013a18:	f7f2 fd14 	bl	8006444 <HAL_GetTick>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	f247 522f 	movw	r2, #29999	; 0x752f
 8013a26:	4293      	cmp	r3, r2
 8013a28:	d9f2      	bls.n	8013a10 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013a2a:	4b37      	ldr	r3, [pc, #220]	; (8013b08 <SD_write+0x148>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d102      	bne.n	8013a38 <SD_write+0x78>
      {
        res = RES_ERROR;
 8013a32:	2301      	movs	r3, #1
 8013a34:	77fb      	strb	r3, [r7, #31]
 8013a36:	e061      	b.n	8013afc <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8013a38:	4b33      	ldr	r3, [pc, #204]	; (8013b08 <SD_write+0x148>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013a3e:	f7f2 fd01 	bl	8006444 <HAL_GetTick>
 8013a42:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013a44:	e007      	b.n	8013a56 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013a46:	f7fd fe1d 	bl	8011684 <BSP_SD_GetCardState>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d102      	bne.n	8013a56 <SD_write+0x96>
          {
            res = RES_OK;
 8013a50:	2300      	movs	r3, #0
 8013a52:	77fb      	strb	r3, [r7, #31]
            break;
 8013a54:	e052      	b.n	8013afc <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013a56:	f7f2 fcf5 	bl	8006444 <HAL_GetTick>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	f247 522f 	movw	r2, #29999	; 0x752f
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d9ee      	bls.n	8013a46 <SD_write+0x86>
 8013a68:	e048      	b.n	8013afc <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	61bb      	str	r3, [r7, #24]
 8013a6e:	e034      	b.n	8013ada <SD_write+0x11a>
      {
        WriteStatus = 0;
 8013a70:	4b25      	ldr	r3, [pc, #148]	; (8013b08 <SD_write+0x148>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	1c5a      	adds	r2, r3, #1
 8013a7a:	607a      	str	r2, [r7, #4]
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	4619      	mov	r1, r3
 8013a80:	4822      	ldr	r0, [pc, #136]	; (8013b0c <SD_write+0x14c>)
 8013a82:	f7fd fde5 	bl	8011650 <BSP_SD_WriteBlocks_DMA>
 8013a86:	4603      	mov	r3, r0
 8013a88:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8013a8a:	7fbb      	ldrb	r3, [r7, #30]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d129      	bne.n	8013ae4 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8013a90:	f7f2 fcd8 	bl	8006444 <HAL_GetTick>
 8013a94:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013a96:	bf00      	nop
 8013a98:	4b1b      	ldr	r3, [pc, #108]	; (8013b08 <SD_write+0x148>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d108      	bne.n	8013ab2 <SD_write+0xf2>
 8013aa0:	f7f2 fcd0 	bl	8006444 <HAL_GetTick>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	1ad3      	subs	r3, r2, r3
 8013aaa:	f247 522f 	movw	r2, #29999	; 0x752f
 8013aae:	4293      	cmp	r3, r2
 8013ab0:	d9f2      	bls.n	8013a98 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8013ab2:	4b15      	ldr	r3, [pc, #84]	; (8013b08 <SD_write+0x148>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d016      	beq.n	8013ae8 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	4a13      	ldr	r2, [pc, #76]	; (8013b0c <SD_write+0x14c>)
 8013abe:	4618      	mov	r0, r3
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	f001 fa32 	bl	8014f30 <memcpy>
          buff += BLOCKSIZE;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013ad2:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8013ad4:	69bb      	ldr	r3, [r7, #24]
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	61bb      	str	r3, [r7, #24]
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	683a      	ldr	r2, [r7, #0]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d8c6      	bhi.n	8013a70 <SD_write+0xb0>
 8013ae2:	e002      	b.n	8013aea <SD_write+0x12a>
        }
        else
        {
          break;
 8013ae4:	bf00      	nop
 8013ae6:	e000      	b.n	8013aea <SD_write+0x12a>
            break;
 8013ae8:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8013aea:	69bb      	ldr	r3, [r7, #24]
 8013aec:	683a      	ldr	r2, [r7, #0]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d104      	bne.n	8013afc <SD_write+0x13c>
 8013af2:	7fbb      	ldrb	r3, [r7, #30]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <SD_write+0x13c>
        res = RES_OK;
 8013af8:	2300      	movs	r3, #0
 8013afa:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8013afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3720      	adds	r7, #32
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	20001a28 	.word	0x20001a28
 8013b0c:	20001828 	.word	0x20001828

08013b10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08c      	sub	sp, #48	; 0x30
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	603a      	str	r2, [r7, #0]
 8013b1a:	71fb      	strb	r3, [r7, #7]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013b20:	2301      	movs	r3, #1
 8013b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013b26:	4b25      	ldr	r3, [pc, #148]	; (8013bbc <SD_ioctl+0xac>)
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d001      	beq.n	8013b38 <SD_ioctl+0x28>
 8013b34:	2303      	movs	r3, #3
 8013b36:	e03c      	b.n	8013bb2 <SD_ioctl+0xa2>

  switch (cmd)
 8013b38:	79bb      	ldrb	r3, [r7, #6]
 8013b3a:	2b03      	cmp	r3, #3
 8013b3c:	d834      	bhi.n	8013ba8 <SD_ioctl+0x98>
 8013b3e:	a201      	add	r2, pc, #4	; (adr r2, 8013b44 <SD_ioctl+0x34>)
 8013b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b44:	08013b55 	.word	0x08013b55
 8013b48:	08013b5d 	.word	0x08013b5d
 8013b4c:	08013b75 	.word	0x08013b75
 8013b50:	08013b8f 	.word	0x08013b8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013b5a:	e028      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b5c:	f107 030c 	add.w	r3, r7, #12
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fd fd9f 	bl	80116a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013b72:	e01c      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b74:	f107 030c 	add.w	r3, r7, #12
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fd fd93 	bl	80116a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013b86:	2300      	movs	r3, #0
 8013b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013b8c:	e00f      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b8e:	f107 030c 	add.w	r3, r7, #12
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7fd fd86 	bl	80116a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9a:	0a5a      	lsrs	r2, r3, #9
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013ba6:	e002      	b.n	8013bae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013ba8:	2304      	movs	r3, #4
 8013baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3730      	adds	r7, #48	; 0x30
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	2000016c 	.word	0x2000016c

08013bc0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8013bc4:	4b03      	ldr	r3, [pc, #12]	; (8013bd4 <BSP_SD_WriteCpltCallback+0x14>)
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	601a      	str	r2, [r3, #0]
}
 8013bca:	bf00      	nop
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	20001a28 	.word	0x20001a28

08013bd8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013bdc:	4b03      	ldr	r3, [pc, #12]	; (8013bec <BSP_SD_ReadCpltCallback+0x14>)
 8013bde:	2201      	movs	r2, #1
 8013be0:	601a      	str	r2, [r3, #0]
}
 8013be2:	bf00      	nop
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr
 8013bec:	20001a2c 	.word	0x20001a2c

08013bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	607b      	str	r3, [r7, #4]
 8013bfa:	4b10      	ldr	r3, [pc, #64]	; (8013c3c <HAL_MspInit+0x4c>)
 8013bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bfe:	4a0f      	ldr	r2, [pc, #60]	; (8013c3c <HAL_MspInit+0x4c>)
 8013c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c04:	6453      	str	r3, [r2, #68]	; 0x44
 8013c06:	4b0d      	ldr	r3, [pc, #52]	; (8013c3c <HAL_MspInit+0x4c>)
 8013c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c0e:	607b      	str	r3, [r7, #4]
 8013c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013c12:	2300      	movs	r3, #0
 8013c14:	603b      	str	r3, [r7, #0]
 8013c16:	4b09      	ldr	r3, [pc, #36]	; (8013c3c <HAL_MspInit+0x4c>)
 8013c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c1a:	4a08      	ldr	r2, [pc, #32]	; (8013c3c <HAL_MspInit+0x4c>)
 8013c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c20:	6413      	str	r3, [r2, #64]	; 0x40
 8013c22:	4b06      	ldr	r3, [pc, #24]	; (8013c3c <HAL_MspInit+0x4c>)
 8013c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c2a:	603b      	str	r3, [r7, #0]
 8013c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013c2e:	bf00      	nop
 8013c30:	370c      	adds	r7, #12
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	40023800 	.word	0x40023800

08013c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b08c      	sub	sp, #48	; 0x30
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c48:	f107 031c 	add.w	r3, r7, #28
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	605a      	str	r2, [r3, #4]
 8013c52:	609a      	str	r2, [r3, #8]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	4a32      	ldr	r2, [pc, #200]	; (8013d28 <HAL_I2C_MspInit+0xe8>)
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d12c      	bne.n	8013cbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013c62:	2300      	movs	r3, #0
 8013c64:	61bb      	str	r3, [r7, #24]
 8013c66:	4b31      	ldr	r3, [pc, #196]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c6a:	4a30      	ldr	r2, [pc, #192]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013c6c:	f043 0302 	orr.w	r3, r3, #2
 8013c70:	6313      	str	r3, [r2, #48]	; 0x30
 8013c72:	4b2e      	ldr	r3, [pc, #184]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c76:	f003 0302 	and.w	r3, r3, #2
 8013c7a:	61bb      	str	r3, [r7, #24]
 8013c7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8013c7e:	23c0      	movs	r3, #192	; 0xc0
 8013c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013c82:	2312      	movs	r3, #18
 8013c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c86:	2300      	movs	r3, #0
 8013c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c8a:	2303      	movs	r3, #3
 8013c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013c8e:	2304      	movs	r3, #4
 8013c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013c92:	f107 031c 	add.w	r3, r7, #28
 8013c96:	4619      	mov	r1, r3
 8013c98:	4825      	ldr	r0, [pc, #148]	; (8013d30 <HAL_I2C_MspInit+0xf0>)
 8013c9a:	f7f3 f8ab 	bl	8006df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	617b      	str	r3, [r7, #20]
 8013ca2:	4b22      	ldr	r3, [pc, #136]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ca6:	4a21      	ldr	r2, [pc, #132]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cac:	6413      	str	r3, [r2, #64]	; 0x40
 8013cae:	4b1f      	ldr	r3, [pc, #124]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013cb6:	617b      	str	r3, [r7, #20]
 8013cb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8013cba:	e031      	b.n	8013d20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	4a1c      	ldr	r2, [pc, #112]	; (8013d34 <HAL_I2C_MspInit+0xf4>)
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	d12c      	bne.n	8013d20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	613b      	str	r3, [r7, #16]
 8013cca:	4b18      	ldr	r3, [pc, #96]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cce:	4a17      	ldr	r2, [pc, #92]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013cd0:	f043 0302 	orr.w	r3, r3, #2
 8013cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8013cd6:	4b15      	ldr	r3, [pc, #84]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cda:	f003 0302 	and.w	r3, r3, #2
 8013cde:	613b      	str	r3, [r7, #16]
 8013ce0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8013ce2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8013ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013ce8:	2312      	movs	r3, #18
 8013cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013cec:	2301      	movs	r3, #1
 8013cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cf0:	2303      	movs	r3, #3
 8013cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013cf4:	2304      	movs	r3, #4
 8013cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013cf8:	f107 031c 	add.w	r3, r7, #28
 8013cfc:	4619      	mov	r1, r3
 8013cfe:	480c      	ldr	r0, [pc, #48]	; (8013d30 <HAL_I2C_MspInit+0xf0>)
 8013d00:	f7f3 f878 	bl	8006df4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013d04:	2300      	movs	r3, #0
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	4b08      	ldr	r3, [pc, #32]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d0c:	4a07      	ldr	r2, [pc, #28]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013d12:	6413      	str	r3, [r2, #64]	; 0x40
 8013d14:	4b05      	ldr	r3, [pc, #20]	; (8013d2c <HAL_I2C_MspInit+0xec>)
 8013d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d1c:	60fb      	str	r3, [r7, #12]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
}
 8013d20:	bf00      	nop
 8013d22:	3730      	adds	r7, #48	; 0x30
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	40005400 	.word	0x40005400
 8013d2c:	40023800 	.word	0x40023800
 8013d30:	40020400 	.word	0x40020400
 8013d34:	40005800 	.word	0x40005800

08013d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	4a05      	ldr	r2, [pc, #20]	; (8013d5c <HAL_RTC_MspInit+0x24>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d102      	bne.n	8013d50 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8013d4a:	4b05      	ldr	r3, [pc, #20]	; (8013d60 <HAL_RTC_MspInit+0x28>)
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8013d50:	bf00      	nop
 8013d52:	370c      	adds	r7, #12
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr
 8013d5c:	40002800 	.word	0x40002800
 8013d60:	42470e3c 	.word	0x42470e3c

08013d64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b08a      	sub	sp, #40	; 0x28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013d6c:	f107 0314 	add.w	r3, r7, #20
 8013d70:	2200      	movs	r2, #0
 8013d72:	601a      	str	r2, [r3, #0]
 8013d74:	605a      	str	r2, [r3, #4]
 8013d76:	609a      	str	r2, [r3, #8]
 8013d78:	60da      	str	r2, [r3, #12]
 8013d7a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a70      	ldr	r2, [pc, #448]	; (8013f44 <HAL_SD_MspInit+0x1e0>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	f040 80da 	bne.w	8013f3c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8013d88:	2300      	movs	r3, #0
 8013d8a:	613b      	str	r3, [r7, #16]
 8013d8c:	4b6e      	ldr	r3, [pc, #440]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d90:	4a6d      	ldr	r2, [pc, #436]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013d96:	6453      	str	r3, [r2, #68]	; 0x44
 8013d98:	4b6b      	ldr	r3, [pc, #428]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013da0:	613b      	str	r3, [r7, #16]
 8013da2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013da4:	2300      	movs	r3, #0
 8013da6:	60fb      	str	r3, [r7, #12]
 8013da8:	4b67      	ldr	r3, [pc, #412]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dac:	4a66      	ldr	r2, [pc, #408]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013dae:	f043 0304 	orr.w	r3, r3, #4
 8013db2:	6313      	str	r3, [r2, #48]	; 0x30
 8013db4:	4b64      	ldr	r3, [pc, #400]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013db8:	f003 0304 	and.w	r3, r3, #4
 8013dbc:	60fb      	str	r3, [r7, #12]
 8013dbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	60bb      	str	r3, [r7, #8]
 8013dc4:	4b60      	ldr	r3, [pc, #384]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dc8:	4a5f      	ldr	r2, [pc, #380]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013dca:	f043 0308 	orr.w	r3, r3, #8
 8013dce:	6313      	str	r3, [r2, #48]	; 0x30
 8013dd0:	4b5d      	ldr	r3, [pc, #372]	; (8013f48 <HAL_SD_MspInit+0x1e4>)
 8013dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013dd4:	f003 0308 	and.w	r3, r3, #8
 8013dd8:	60bb      	str	r3, [r7, #8]
 8013dda:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8013ddc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8013de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013de2:	2302      	movs	r3, #2
 8013de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013de6:	2301      	movs	r3, #1
 8013de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013dea:	2303      	movs	r3, #3
 8013dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013dee:	230c      	movs	r3, #12
 8013df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013df2:	f107 0314 	add.w	r3, r7, #20
 8013df6:	4619      	mov	r1, r3
 8013df8:	4854      	ldr	r0, [pc, #336]	; (8013f4c <HAL_SD_MspInit+0x1e8>)
 8013dfa:	f7f2 fffb 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013dfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e04:	2302      	movs	r3, #2
 8013e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e0c:	2303      	movs	r3, #3
 8013e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013e10:	230c      	movs	r3, #12
 8013e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013e14:	f107 0314 	add.w	r3, r7, #20
 8013e18:	4619      	mov	r1, r3
 8013e1a:	484c      	ldr	r0, [pc, #304]	; (8013f4c <HAL_SD_MspInit+0x1e8>)
 8013e1c:	f7f2 ffea 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8013e20:	2304      	movs	r3, #4
 8013e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e24:	2302      	movs	r3, #2
 8013e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013e28:	2301      	movs	r3, #1
 8013e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e2c:	2303      	movs	r3, #3
 8013e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013e30:	230c      	movs	r3, #12
 8013e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013e34:	f107 0314 	add.w	r3, r7, #20
 8013e38:	4619      	mov	r1, r3
 8013e3a:	4845      	ldr	r0, [pc, #276]	; (8013f50 <HAL_SD_MspInit+0x1ec>)
 8013e3c:	f7f2 ffda 	bl	8006df4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8013e40:	4b44      	ldr	r3, [pc, #272]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e42:	4a45      	ldr	r2, [pc, #276]	; (8013f58 <HAL_SD_MspInit+0x1f4>)
 8013e44:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8013e46:	4b43      	ldr	r3, [pc, #268]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013e4c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013e4e:	4b41      	ldr	r3, [pc, #260]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e50:	2200      	movs	r2, #0
 8013e52:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013e54:	4b3f      	ldr	r3, [pc, #252]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e56:	2200      	movs	r2, #0
 8013e58:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013e5a:	4b3e      	ldr	r3, [pc, #248]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e60:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013e62:	4b3c      	ldr	r3, [pc, #240]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013e68:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013e6a:	4b3a      	ldr	r3, [pc, #232]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013e70:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8013e72:	4b38      	ldr	r3, [pc, #224]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e74:	2220      	movs	r2, #32
 8013e76:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013e78:	4b36      	ldr	r3, [pc, #216]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013e7e:	4b35      	ldr	r3, [pc, #212]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e80:	2204      	movs	r2, #4
 8013e82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013e84:	4b33      	ldr	r3, [pc, #204]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e86:	2203      	movs	r2, #3
 8013e88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8013e8a:	4b32      	ldr	r3, [pc, #200]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013e90:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013e92:	4b30      	ldr	r3, [pc, #192]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013e98:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8013e9a:	482e      	ldr	r0, [pc, #184]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013e9c:	f7f2 fc12 	bl	80066c4 <HAL_DMA_Init>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d001      	beq.n	8013eaa <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8013ea6:	f7ff fc77 	bl	8013798 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	4a29      	ldr	r2, [pc, #164]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8013eb0:	4a28      	ldr	r2, [pc, #160]	; (8013f54 <HAL_SD_MspInit+0x1f0>)
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8013eb6:	4b29      	ldr	r3, [pc, #164]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013eb8:	4a29      	ldr	r2, [pc, #164]	; (8013f60 <HAL_SD_MspInit+0x1fc>)
 8013eba:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8013ebc:	4b27      	ldr	r3, [pc, #156]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013ec2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013ec4:	4b25      	ldr	r3, [pc, #148]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ec6:	2240      	movs	r2, #64	; 0x40
 8013ec8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013eca:	4b24      	ldr	r3, [pc, #144]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ecc:	2200      	movs	r2, #0
 8013ece:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013ed0:	4b22      	ldr	r3, [pc, #136]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013ed6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013ed8:	4b20      	ldr	r3, [pc, #128]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013ede:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013ee0:	4b1e      	ldr	r3, [pc, #120]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013ee6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8013ee8:	4b1c      	ldr	r3, [pc, #112]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013eea:	2220      	movs	r2, #32
 8013eec:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013eee:	4b1b      	ldr	r3, [pc, #108]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013ef4:	4b19      	ldr	r3, [pc, #100]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013ef6:	2204      	movs	r2, #4
 8013ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013efa:	4b18      	ldr	r3, [pc, #96]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013efc:	2203      	movs	r2, #3
 8013efe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8013f00:	4b16      	ldr	r3, [pc, #88]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013f02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013f06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013f08:	4b14      	ldr	r3, [pc, #80]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013f0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013f0e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8013f10:	4812      	ldr	r0, [pc, #72]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013f12:	f7f2 fbd7 	bl	80066c4 <HAL_DMA_Init>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d001      	beq.n	8013f20 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8013f1c:	f7ff fc3c 	bl	8013798 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	4a0e      	ldr	r2, [pc, #56]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013f24:	641a      	str	r2, [r3, #64]	; 0x40
 8013f26:	4a0d      	ldr	r2, [pc, #52]	; (8013f5c <HAL_SD_MspInit+0x1f8>)
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	2100      	movs	r1, #0
 8013f30:	2031      	movs	r0, #49	; 0x31
 8013f32:	f7f2 fb90 	bl	8006656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8013f36:	2031      	movs	r0, #49	; 0x31
 8013f38:	f7f2 fba9 	bl	800668e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8013f3c:	bf00      	nop
 8013f3e:	3728      	adds	r7, #40	; 0x28
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	40012c00 	.word	0x40012c00
 8013f48:	40023800 	.word	0x40023800
 8013f4c:	40020800 	.word	0x40020800
 8013f50:	40020c00 	.word	0x40020c00
 8013f54:	20003d74 	.word	0x20003d74
 8013f58:	40026458 	.word	0x40026458
 8013f5c:	20003f5c 	.word	0x20003f5c
 8013f60:	400264a0 	.word	0x400264a0

08013f64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b08a      	sub	sp, #40	; 0x28
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f6c:	f107 0314 	add.w	r3, r7, #20
 8013f70:	2200      	movs	r2, #0
 8013f72:	601a      	str	r2, [r3, #0]
 8013f74:	605a      	str	r2, [r3, #4]
 8013f76:	609a      	str	r2, [r3, #8]
 8013f78:	60da      	str	r2, [r3, #12]
 8013f7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4a19      	ldr	r2, [pc, #100]	; (8013fe8 <HAL_SPI_MspInit+0x84>)
 8013f82:	4293      	cmp	r3, r2
 8013f84:	d12b      	bne.n	8013fde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013f86:	2300      	movs	r3, #0
 8013f88:	613b      	str	r3, [r7, #16]
 8013f8a:	4b18      	ldr	r3, [pc, #96]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f8e:	4a17      	ldr	r2, [pc, #92]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013f94:	6453      	str	r3, [r2, #68]	; 0x44
 8013f96:	4b15      	ldr	r3, [pc, #84]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013f9e:	613b      	str	r3, [r7, #16]
 8013fa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	60fb      	str	r3, [r7, #12]
 8013fa6:	4b11      	ldr	r3, [pc, #68]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013faa:	4a10      	ldr	r2, [pc, #64]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013fac:	f043 0302 	orr.w	r3, r3, #2
 8013fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8013fb2:	4b0e      	ldr	r3, [pc, #56]	; (8013fec <HAL_SPI_MspInit+0x88>)
 8013fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fb6:	f003 0302 	and.w	r3, r3, #2
 8013fba:	60fb      	str	r3, [r7, #12]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8013fbe:	2338      	movs	r3, #56	; 0x38
 8013fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fc2:	2302      	movs	r3, #2
 8013fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013fca:	2303      	movs	r3, #3
 8013fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013fce:	2305      	movs	r3, #5
 8013fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013fd2:	f107 0314 	add.w	r3, r7, #20
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4805      	ldr	r0, [pc, #20]	; (8013ff0 <HAL_SPI_MspInit+0x8c>)
 8013fda:	f7f2 ff0b 	bl	8006df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8013fde:	bf00      	nop
 8013fe0:	3728      	adds	r7, #40	; 0x28
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	40013000 	.word	0x40013000
 8013fec:	40023800 	.word	0x40023800
 8013ff0:	40020400 	.word	0x40020400

08013ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08c      	sub	sp, #48	; 0x30
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ffc:	f107 031c 	add.w	r3, r7, #28
 8014000:	2200      	movs	r2, #0
 8014002:	601a      	str	r2, [r3, #0]
 8014004:	605a      	str	r2, [r3, #4]
 8014006:	609a      	str	r2, [r3, #8]
 8014008:	60da      	str	r2, [r3, #12]
 801400a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014014:	d10e      	bne.n	8014034 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014016:	2300      	movs	r3, #0
 8014018:	61bb      	str	r3, [r7, #24]
 801401a:	4b2b      	ldr	r3, [pc, #172]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 801401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801401e:	4a2a      	ldr	r2, [pc, #168]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014020:	f043 0301 	orr.w	r3, r3, #1
 8014024:	6413      	str	r3, [r2, #64]	; 0x40
 8014026:	4b28      	ldr	r3, [pc, #160]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801402a:	f003 0301 	and.w	r3, r3, #1
 801402e:	61bb      	str	r3, [r7, #24]
 8014030:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8014032:	e044      	b.n	80140be <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	4a24      	ldr	r2, [pc, #144]	; (80140cc <HAL_TIM_Base_MspInit+0xd8>)
 801403a:	4293      	cmp	r3, r2
 801403c:	d10e      	bne.n	801405c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801403e:	2300      	movs	r3, #0
 8014040:	617b      	str	r3, [r7, #20]
 8014042:	4b21      	ldr	r3, [pc, #132]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014046:	4a20      	ldr	r2, [pc, #128]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014048:	f043 0302 	orr.w	r3, r3, #2
 801404c:	6413      	str	r3, [r2, #64]	; 0x40
 801404e:	4b1e      	ldr	r3, [pc, #120]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014052:	f003 0302 	and.w	r3, r3, #2
 8014056:	617b      	str	r3, [r7, #20]
 8014058:	697b      	ldr	r3, [r7, #20]
}
 801405a:	e030      	b.n	80140be <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a1b      	ldr	r2, [pc, #108]	; (80140d0 <HAL_TIM_Base_MspInit+0xdc>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d12b      	bne.n	80140be <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014066:	2300      	movs	r3, #0
 8014068:	613b      	str	r3, [r7, #16]
 801406a:	4b17      	ldr	r3, [pc, #92]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 801406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801406e:	4a16      	ldr	r2, [pc, #88]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014070:	f043 0308 	orr.w	r3, r3, #8
 8014074:	6413      	str	r3, [r2, #64]	; 0x40
 8014076:	4b14      	ldr	r3, [pc, #80]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801407a:	f003 0308 	and.w	r3, r3, #8
 801407e:	613b      	str	r3, [r7, #16]
 8014080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014082:	2300      	movs	r3, #0
 8014084:	60fb      	str	r3, [r7, #12]
 8014086:	4b10      	ldr	r3, [pc, #64]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801408a:	4a0f      	ldr	r2, [pc, #60]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 801408c:	f043 0301 	orr.w	r3, r3, #1
 8014090:	6313      	str	r3, [r2, #48]	; 0x30
 8014092:	4b0d      	ldr	r3, [pc, #52]	; (80140c8 <HAL_TIM_Base_MspInit+0xd4>)
 8014094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014096:	f003 0301 	and.w	r3, r3, #1
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801409e:	2302      	movs	r3, #2
 80140a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80140a2:	2302      	movs	r3, #2
 80140a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80140a6:	2300      	movs	r3, #0
 80140a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80140aa:	2300      	movs	r3, #0
 80140ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80140ae:	2302      	movs	r3, #2
 80140b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80140b2:	f107 031c 	add.w	r3, r7, #28
 80140b6:	4619      	mov	r1, r3
 80140b8:	4806      	ldr	r0, [pc, #24]	; (80140d4 <HAL_TIM_Base_MspInit+0xe0>)
 80140ba:	f7f2 fe9b 	bl	8006df4 <HAL_GPIO_Init>
}
 80140be:	bf00      	nop
 80140c0:	3730      	adds	r7, #48	; 0x30
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	40023800 	.word	0x40023800
 80140cc:	40000400 	.word	0x40000400
 80140d0:	40000c00 	.word	0x40000c00
 80140d4:	40020000 	.word	0x40020000

080140d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b08a      	sub	sp, #40	; 0x28
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80140e0:	f107 0314 	add.w	r3, r7, #20
 80140e4:	2200      	movs	r2, #0
 80140e6:	601a      	str	r2, [r3, #0]
 80140e8:	605a      	str	r2, [r3, #4]
 80140ea:	609a      	str	r2, [r3, #8]
 80140ec:	60da      	str	r2, [r3, #12]
 80140ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4a33      	ldr	r2, [pc, #204]	; (80141c4 <HAL_TIM_MspPostInit+0xec>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d13c      	bne.n	8014174 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80140fa:	2300      	movs	r3, #0
 80140fc:	613b      	str	r3, [r7, #16]
 80140fe:	4b32      	ldr	r3, [pc, #200]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014102:	4a31      	ldr	r2, [pc, #196]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014104:	f043 0302 	orr.w	r3, r3, #2
 8014108:	6313      	str	r3, [r2, #48]	; 0x30
 801410a:	4b2f      	ldr	r3, [pc, #188]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 801410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801410e:	f003 0302 	and.w	r3, r3, #2
 8014112:	613b      	str	r3, [r7, #16]
 8014114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014116:	2300      	movs	r3, #0
 8014118:	60fb      	str	r3, [r7, #12]
 801411a:	4b2b      	ldr	r3, [pc, #172]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 801411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801411e:	4a2a      	ldr	r2, [pc, #168]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014120:	f043 0304 	orr.w	r3, r3, #4
 8014124:	6313      	str	r3, [r2, #48]	; 0x30
 8014126:	4b28      	ldr	r3, [pc, #160]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801412a:	f003 0304 	and.w	r3, r3, #4
 801412e:	60fb      	str	r3, [r7, #12]
 8014130:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 8014132:	2301      	movs	r3, #1
 8014134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014136:	2302      	movs	r3, #2
 8014138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801413a:	2300      	movs	r3, #0
 801413c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801413e:	2300      	movs	r3, #0
 8014140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014142:	2302      	movs	r3, #2
 8014144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 8014146:	f107 0314 	add.w	r3, r7, #20
 801414a:	4619      	mov	r1, r3
 801414c:	481f      	ldr	r0, [pc, #124]	; (80141cc <HAL_TIM_MspPostInit+0xf4>)
 801414e:	f7f2 fe51 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EN_L_Pin;
 8014152:	2380      	movs	r3, #128	; 0x80
 8014154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014156:	2302      	movs	r3, #2
 8014158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801415a:	2300      	movs	r3, #0
 801415c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801415e:	2300      	movs	r3, #0
 8014160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014162:	2302      	movs	r3, #2
 8014164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_L_GPIO_Port, &GPIO_InitStruct);
 8014166:	f107 0314 	add.w	r3, r7, #20
 801416a:	4619      	mov	r1, r3
 801416c:	4818      	ldr	r0, [pc, #96]	; (80141d0 <HAL_TIM_MspPostInit+0xf8>)
 801416e:	f7f2 fe41 	bl	8006df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8014172:	e022      	b.n	80141ba <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4a16      	ldr	r2, [pc, #88]	; (80141d4 <HAL_TIM_MspPostInit+0xfc>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d11d      	bne.n	80141ba <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801417e:	2300      	movs	r3, #0
 8014180:	60bb      	str	r3, [r7, #8]
 8014182:	4b11      	ldr	r3, [pc, #68]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014186:	4a10      	ldr	r2, [pc, #64]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014188:	f043 0301 	orr.w	r3, r3, #1
 801418c:	6313      	str	r3, [r2, #48]	; 0x30
 801418e:	4b0e      	ldr	r3, [pc, #56]	; (80141c8 <HAL_TIM_MspPostInit+0xf0>)
 8014190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014192:	f003 0301 	and.w	r3, r3, #1
 8014196:	60bb      	str	r3, [r7, #8]
 8014198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801419a:	2308      	movs	r3, #8
 801419c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801419e:	2302      	movs	r3, #2
 80141a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141a2:	2300      	movs	r3, #0
 80141a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80141a6:	2300      	movs	r3, #0
 80141a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80141aa:	2302      	movs	r3, #2
 80141ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141ae:	f107 0314 	add.w	r3, r7, #20
 80141b2:	4619      	mov	r1, r3
 80141b4:	4808      	ldr	r0, [pc, #32]	; (80141d8 <HAL_TIM_MspPostInit+0x100>)
 80141b6:	f7f2 fe1d 	bl	8006df4 <HAL_GPIO_Init>
}
 80141ba:	bf00      	nop
 80141bc:	3728      	adds	r7, #40	; 0x28
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	40000400 	.word	0x40000400
 80141c8:	40023800 	.word	0x40023800
 80141cc:	40020400 	.word	0x40020400
 80141d0:	40020800 	.word	0x40020800
 80141d4:	40000c00 	.word	0x40000c00
 80141d8:	40020000 	.word	0x40020000

080141dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b08a      	sub	sp, #40	; 0x28
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80141e4:	f107 0314 	add.w	r3, r7, #20
 80141e8:	2200      	movs	r2, #0
 80141ea:	601a      	str	r2, [r3, #0]
 80141ec:	605a      	str	r2, [r3, #4]
 80141ee:	609a      	str	r2, [r3, #8]
 80141f0:	60da      	str	r2, [r3, #12]
 80141f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4a1d      	ldr	r2, [pc, #116]	; (8014270 <HAL_UART_MspInit+0x94>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d134      	bne.n	8014268 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80141fe:	2300      	movs	r3, #0
 8014200:	613b      	str	r3, [r7, #16]
 8014202:	4b1c      	ldr	r3, [pc, #112]	; (8014274 <HAL_UART_MspInit+0x98>)
 8014204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014206:	4a1b      	ldr	r2, [pc, #108]	; (8014274 <HAL_UART_MspInit+0x98>)
 8014208:	f043 0310 	orr.w	r3, r3, #16
 801420c:	6453      	str	r3, [r2, #68]	; 0x44
 801420e:	4b19      	ldr	r3, [pc, #100]	; (8014274 <HAL_UART_MspInit+0x98>)
 8014210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014212:	f003 0310 	and.w	r3, r3, #16
 8014216:	613b      	str	r3, [r7, #16]
 8014218:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801421a:	2300      	movs	r3, #0
 801421c:	60fb      	str	r3, [r7, #12]
 801421e:	4b15      	ldr	r3, [pc, #84]	; (8014274 <HAL_UART_MspInit+0x98>)
 8014220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014222:	4a14      	ldr	r2, [pc, #80]	; (8014274 <HAL_UART_MspInit+0x98>)
 8014224:	f043 0301 	orr.w	r3, r3, #1
 8014228:	6313      	str	r3, [r2, #48]	; 0x30
 801422a:	4b12      	ldr	r3, [pc, #72]	; (8014274 <HAL_UART_MspInit+0x98>)
 801422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801422e:	f003 0301 	and.w	r3, r3, #1
 8014232:	60fb      	str	r3, [r7, #12]
 8014234:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8014236:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801423a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801423c:	2302      	movs	r3, #2
 801423e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014240:	2301      	movs	r3, #1
 8014242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014244:	2303      	movs	r3, #3
 8014246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014248:	2307      	movs	r3, #7
 801424a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801424c:	f107 0314 	add.w	r3, r7, #20
 8014250:	4619      	mov	r1, r3
 8014252:	4809      	ldr	r0, [pc, #36]	; (8014278 <HAL_UART_MspInit+0x9c>)
 8014254:	f7f2 fdce 	bl	8006df4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8014258:	2200      	movs	r2, #0
 801425a:	2100      	movs	r1, #0
 801425c:	2025      	movs	r0, #37	; 0x25
 801425e:	f7f2 f9fa 	bl	8006656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014262:	2025      	movs	r0, #37	; 0x25
 8014264:	f7f2 fa13 	bl	800668e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8014268:	bf00      	nop
 801426a:	3728      	adds	r7, #40	; 0x28
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	40011000 	.word	0x40011000
 8014274:	40023800 	.word	0x40023800
 8014278:	40020000 	.word	0x40020000

0801427c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801427c:	b480      	push	{r7}
 801427e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014280:	bf00      	nop
 8014282:	46bd      	mov	sp, r7
 8014284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014288:	4770      	bx	lr

0801428a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801428a:	b480      	push	{r7}
 801428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801428e:	e7fe      	b.n	801428e <HardFault_Handler+0x4>

08014290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014290:	b480      	push	{r7}
 8014292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014294:	e7fe      	b.n	8014294 <MemManage_Handler+0x4>

08014296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014296:	b480      	push	{r7}
 8014298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801429a:	e7fe      	b.n	801429a <BusFault_Handler+0x4>

0801429c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801429c:	b480      	push	{r7}
 801429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80142a0:	e7fe      	b.n	80142a0 <UsageFault_Handler+0x4>

080142a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80142a2:	b480      	push	{r7}
 80142a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80142a6:	bf00      	nop
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80142b0:	b480      	push	{r7}
 80142b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80142b4:	bf00      	nop
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80142be:	b480      	push	{r7}
 80142c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80142c2:	bf00      	nop
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr

080142cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80142d0:	f7f2 f8a4 	bl	800641c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80142d4:	bf00      	nop
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80142dc:	4802      	ldr	r0, [pc, #8]	; (80142e8 <USART1_IRQHandler+0x10>)
 80142de:	f7f8 fc37 	bl	800cb50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80142e2:	bf00      	nop
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	20003efc 	.word	0x20003efc

080142ec <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80142f0:	4802      	ldr	r0, [pc, #8]	; (80142fc <SDIO_IRQHandler+0x10>)
 80142f2:	f7f6 f85f 	bl	800a3b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80142f6:	bf00      	nop
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	20003fbc 	.word	0x20003fbc

08014300 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8014304:	4802      	ldr	r0, [pc, #8]	; (8014310 <DMA2_Stream3_IRQHandler+0x10>)
 8014306:	f7f2 fb0d 	bl	8006924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801430a:	bf00      	nop
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	20003d74 	.word	0x20003d74

08014314 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8014318:	4802      	ldr	r0, [pc, #8]	; (8014324 <OTG_FS_IRQHandler+0x10>)
 801431a:	f7f4 f820 	bl	800835e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801431e:	bf00      	nop
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	200050d8 	.word	0x200050d8

08014328 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 801432c:	4802      	ldr	r0, [pc, #8]	; (8014338 <DMA2_Stream6_IRQHandler+0x10>)
 801432e:	f7f2 faf9 	bl	8006924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8014332:	bf00      	nop
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	20003f5c 	.word	0x20003f5c

0801433c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8014344:	4b11      	ldr	r3, [pc, #68]	; (801438c <_sbrk+0x50>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d102      	bne.n	8014352 <_sbrk+0x16>
		heap_end = &end;
 801434c:	4b0f      	ldr	r3, [pc, #60]	; (801438c <_sbrk+0x50>)
 801434e:	4a10      	ldr	r2, [pc, #64]	; (8014390 <_sbrk+0x54>)
 8014350:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014352:	4b0e      	ldr	r3, [pc, #56]	; (801438c <_sbrk+0x50>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014358:	4b0c      	ldr	r3, [pc, #48]	; (801438c <_sbrk+0x50>)
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	4413      	add	r3, r2
 8014360:	466a      	mov	r2, sp
 8014362:	4293      	cmp	r3, r2
 8014364:	d907      	bls.n	8014376 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8014366:	f000 fda9 	bl	8014ebc <__errno>
 801436a:	4602      	mov	r2, r0
 801436c:	230c      	movs	r3, #12
 801436e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8014370:	f04f 33ff 	mov.w	r3, #4294967295
 8014374:	e006      	b.n	8014384 <_sbrk+0x48>
	}

	heap_end += incr;
 8014376:	4b05      	ldr	r3, [pc, #20]	; (801438c <_sbrk+0x50>)
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4413      	add	r3, r2
 801437e:	4a03      	ldr	r2, [pc, #12]	; (801438c <_sbrk+0x50>)
 8014380:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014382:	68fb      	ldr	r3, [r7, #12]
}
 8014384:	4618      	mov	r0, r3
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	20001a30 	.word	0x20001a30
 8014390:	200056e8 	.word	0x200056e8

08014394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014394:	b480      	push	{r7}
 8014396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014398:	4b16      	ldr	r3, [pc, #88]	; (80143f4 <SystemInit+0x60>)
 801439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801439e:	4a15      	ldr	r2, [pc, #84]	; (80143f4 <SystemInit+0x60>)
 80143a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80143a8:	4b13      	ldr	r3, [pc, #76]	; (80143f8 <SystemInit+0x64>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4a12      	ldr	r2, [pc, #72]	; (80143f8 <SystemInit+0x64>)
 80143ae:	f043 0301 	orr.w	r3, r3, #1
 80143b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80143b4:	4b10      	ldr	r3, [pc, #64]	; (80143f8 <SystemInit+0x64>)
 80143b6:	2200      	movs	r2, #0
 80143b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80143ba:	4b0f      	ldr	r3, [pc, #60]	; (80143f8 <SystemInit+0x64>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	4a0e      	ldr	r2, [pc, #56]	; (80143f8 <SystemInit+0x64>)
 80143c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80143c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80143c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80143ca:	4b0b      	ldr	r3, [pc, #44]	; (80143f8 <SystemInit+0x64>)
 80143cc:	4a0b      	ldr	r2, [pc, #44]	; (80143fc <SystemInit+0x68>)
 80143ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80143d0:	4b09      	ldr	r3, [pc, #36]	; (80143f8 <SystemInit+0x64>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a08      	ldr	r2, [pc, #32]	; (80143f8 <SystemInit+0x64>)
 80143d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80143da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80143dc:	4b06      	ldr	r3, [pc, #24]	; (80143f8 <SystemInit+0x64>)
 80143de:	2200      	movs	r2, #0
 80143e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80143e2:	4b04      	ldr	r3, [pc, #16]	; (80143f4 <SystemInit+0x60>)
 80143e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80143e8:	609a      	str	r2, [r3, #8]
#endif
}
 80143ea:	bf00      	nop
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr
 80143f4:	e000ed00 	.word	0xe000ed00
 80143f8:	40023800 	.word	0x40023800
 80143fc:	24003010 	.word	0x24003010

08014400 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014404:	2200      	movs	r2, #0
 8014406:	4912      	ldr	r1, [pc, #72]	; (8014450 <MX_USB_DEVICE_Init+0x50>)
 8014408:	4812      	ldr	r0, [pc, #72]	; (8014454 <MX_USB_DEVICE_Init+0x54>)
 801440a:	f7fb fb57 	bl	800fabc <USBD_Init>
 801440e:	4603      	mov	r3, r0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d001      	beq.n	8014418 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014414:	f7ff f9c0 	bl	8013798 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014418:	490f      	ldr	r1, [pc, #60]	; (8014458 <MX_USB_DEVICE_Init+0x58>)
 801441a:	480e      	ldr	r0, [pc, #56]	; (8014454 <MX_USB_DEVICE_Init+0x54>)
 801441c:	f7fb fb79 	bl	800fb12 <USBD_RegisterClass>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014426:	f7ff f9b7 	bl	8013798 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801442a:	490c      	ldr	r1, [pc, #48]	; (801445c <MX_USB_DEVICE_Init+0x5c>)
 801442c:	4809      	ldr	r0, [pc, #36]	; (8014454 <MX_USB_DEVICE_Init+0x54>)
 801442e:	f7fb faa7 	bl	800f980 <USBD_CDC_RegisterInterface>
 8014432:	4603      	mov	r3, r0
 8014434:	2b00      	cmp	r3, #0
 8014436:	d001      	beq.n	801443c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014438:	f7ff f9ae 	bl	8013798 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801443c:	4805      	ldr	r0, [pc, #20]	; (8014454 <MX_USB_DEVICE_Init+0x54>)
 801443e:	f7fb fb82 	bl	800fb46 <USBD_Start>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d001      	beq.n	801444c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014448:	f7ff f9a6 	bl	8013798 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801444c:	bf00      	nop
 801444e:	bd80      	pop	{r7, pc}
 8014450:	20000184 	.word	0x20000184
 8014454:	20001a3c 	.word	0x20001a3c
 8014458:	20000014 	.word	0x20000014
 801445c:	20000174 	.word	0x20000174

08014460 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014464:	2200      	movs	r2, #0
 8014466:	4905      	ldr	r1, [pc, #20]	; (801447c <CDC_Init_FS+0x1c>)
 8014468:	4805      	ldr	r0, [pc, #20]	; (8014480 <CDC_Init_FS+0x20>)
 801446a:	f7fb faa0 	bl	800f9ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801446e:	4905      	ldr	r1, [pc, #20]	; (8014484 <CDC_Init_FS+0x24>)
 8014470:	4803      	ldr	r0, [pc, #12]	; (8014480 <CDC_Init_FS+0x20>)
 8014472:	f7fb fab6 	bl	800f9e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014476:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014478:	4618      	mov	r0, r3
 801447a:	bd80      	pop	{r7, pc}
 801447c:	200048d8 	.word	0x200048d8
 8014480:	20001a3c 	.word	0x20001a3c
 8014484:	200040d8 	.word	0x200040d8

08014488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014488:	b480      	push	{r7}
 801448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801448c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801448e:	4618      	mov	r0, r3
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014498:	b480      	push	{r7}
 801449a:	b085      	sub	sp, #20
 801449c:	af00      	add	r7, sp, #0
 801449e:	4603      	mov	r3, r0
 80144a0:	6039      	str	r1, [r7, #0]
 80144a2:	71fb      	strb	r3, [r7, #7]
 80144a4:	4613      	mov	r3, r2
 80144a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80144a8:	f107 0308 	add.w	r3, r7, #8
 80144ac:	2200      	movs	r2, #0
 80144ae:	601a      	str	r2, [r3, #0]
 80144b0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80144b4:	79fb      	ldrb	r3, [r7, #7]
 80144b6:	2b23      	cmp	r3, #35	; 0x23
 80144b8:	d87c      	bhi.n	80145b4 <CDC_Control_FS+0x11c>
 80144ba:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <CDC_Control_FS+0x28>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	080145b5 	.word	0x080145b5
 80144c4:	080145b5 	.word	0x080145b5
 80144c8:	080145b5 	.word	0x080145b5
 80144cc:	080145b5 	.word	0x080145b5
 80144d0:	080145b5 	.word	0x080145b5
 80144d4:	080145b5 	.word	0x080145b5
 80144d8:	080145b5 	.word	0x080145b5
 80144dc:	080145b5 	.word	0x080145b5
 80144e0:	080145b5 	.word	0x080145b5
 80144e4:	080145b5 	.word	0x080145b5
 80144e8:	080145b5 	.word	0x080145b5
 80144ec:	080145b5 	.word	0x080145b5
 80144f0:	080145b5 	.word	0x080145b5
 80144f4:	080145b5 	.word	0x080145b5
 80144f8:	080145b5 	.word	0x080145b5
 80144fc:	080145b5 	.word	0x080145b5
 8014500:	080145b5 	.word	0x080145b5
 8014504:	080145b5 	.word	0x080145b5
 8014508:	080145b5 	.word	0x080145b5
 801450c:	080145b5 	.word	0x080145b5
 8014510:	080145b5 	.word	0x080145b5
 8014514:	080145b5 	.word	0x080145b5
 8014518:	080145b5 	.word	0x080145b5
 801451c:	080145b5 	.word	0x080145b5
 8014520:	080145b5 	.word	0x080145b5
 8014524:	080145b5 	.word	0x080145b5
 8014528:	080145b5 	.word	0x080145b5
 801452c:	080145b5 	.word	0x080145b5
 8014530:	080145b5 	.word	0x080145b5
 8014534:	080145b5 	.word	0x080145b5
 8014538:	080145b5 	.word	0x080145b5
 801453c:	080145b5 	.word	0x080145b5
 8014540:	08014551 	.word	0x08014551
 8014544:	0801457d 	.word	0x0801457d
 8014548:	080145b5 	.word	0x080145b5
 801454c:	080145b5 	.word	0x080145b5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	785b      	ldrb	r3, [r3, #1]
 801455a:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	789b      	ldrb	r3, [r3, #2]
 8014560:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	78db      	ldrb	r3, [r3, #3]
 8014566:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	791b      	ldrb	r3, [r3, #4]
 801456c:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 801456e:	683b      	ldr	r3, [r7, #0]
 8014570:	795b      	ldrb	r3, [r3, #5]
 8014572:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	799b      	ldrb	r3, [r3, #6]
 8014578:	73bb      	strb	r3, [r7, #14]
        	break;
 801457a:	e01c      	b.n	80145b6 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 801457c:	7a3a      	ldrb	r2, [r7, #8]
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	3301      	adds	r3, #1
 8014586:	7a7a      	ldrb	r2, [r7, #9]
 8014588:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	3302      	adds	r3, #2
 801458e:	7aba      	ldrb	r2, [r7, #10]
 8014590:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	3303      	adds	r3, #3
 8014596:	7afa      	ldrb	r2, [r7, #11]
 8014598:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	3304      	adds	r3, #4
 801459e:	7b3a      	ldrb	r2, [r7, #12]
 80145a0:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	3305      	adds	r3, #5
 80145a6:	7b7a      	ldrb	r2, [r7, #13]
 80145a8:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	3306      	adds	r3, #6
 80145ae:	7bba      	ldrb	r2, [r7, #14]
 80145b0:	701a      	strb	r2, [r3, #0]
        	break;
 80145b2:	e000      	b.n	80145b6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80145b4:	bf00      	nop
  }

  return (USBD_OK);
 80145b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3714      	adds	r7, #20
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80145ce:	6879      	ldr	r1, [r7, #4]
 80145d0:	4805      	ldr	r0, [pc, #20]	; (80145e8 <CDC_Receive_FS+0x24>)
 80145d2:	f7fb fa06 	bl	800f9e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80145d6:	4804      	ldr	r0, [pc, #16]	; (80145e8 <CDC_Receive_FS+0x24>)
 80145d8:	f7fb fa46 	bl	800fa68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80145dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20001a3c 	.word	0x20001a3c

080145ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	460b      	mov	r3, r1
 80145f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80145fc:	4b0d      	ldr	r3, [pc, #52]	; (8014634 <CDC_Transmit_FS+0x48>)
 80145fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014602:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801460a:	2b00      	cmp	r3, #0
 801460c:	d001      	beq.n	8014612 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801460e:	2301      	movs	r3, #1
 8014610:	e00b      	b.n	801462a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014612:	887b      	ldrh	r3, [r7, #2]
 8014614:	461a      	mov	r2, r3
 8014616:	6879      	ldr	r1, [r7, #4]
 8014618:	4806      	ldr	r0, [pc, #24]	; (8014634 <CDC_Transmit_FS+0x48>)
 801461a:	f7fb f9c8 	bl	800f9ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801461e:	4805      	ldr	r0, [pc, #20]	; (8014634 <CDC_Transmit_FS+0x48>)
 8014620:	f7fb f9f3 	bl	800fa0a <USBD_CDC_TransmitPacket>
 8014624:	4603      	mov	r3, r0
 8014626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014628:	7bfb      	ldrb	r3, [r7, #15]
}
 801462a:	4618      	mov	r0, r3
 801462c:	3710      	adds	r7, #16
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	20001a3c 	.word	0x20001a3c

08014638 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b08a      	sub	sp, #40	; 0x28
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014640:	f107 0314 	add.w	r3, r7, #20
 8014644:	2200      	movs	r2, #0
 8014646:	601a      	str	r2, [r3, #0]
 8014648:	605a      	str	r2, [r3, #4]
 801464a:	609a      	str	r2, [r3, #8]
 801464c:	60da      	str	r2, [r3, #12]
 801464e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014658:	d13a      	bne.n	80146d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801465a:	2300      	movs	r3, #0
 801465c:	613b      	str	r3, [r7, #16]
 801465e:	4b1e      	ldr	r3, [pc, #120]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 8014660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014662:	4a1d      	ldr	r2, [pc, #116]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 8014664:	f043 0301 	orr.w	r3, r3, #1
 8014668:	6313      	str	r3, [r2, #48]	; 0x30
 801466a:	4b1b      	ldr	r3, [pc, #108]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 801466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801466e:	f003 0301 	and.w	r3, r3, #1
 8014672:	613b      	str	r3, [r7, #16]
 8014674:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8014676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801467c:	2302      	movs	r3, #2
 801467e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014680:	2300      	movs	r3, #0
 8014682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014684:	2303      	movs	r3, #3
 8014686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014688:	230a      	movs	r3, #10
 801468a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801468c:	f107 0314 	add.w	r3, r7, #20
 8014690:	4619      	mov	r1, r3
 8014692:	4812      	ldr	r0, [pc, #72]	; (80146dc <HAL_PCD_MspInit+0xa4>)
 8014694:	f7f2 fbae 	bl	8006df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014698:	4b0f      	ldr	r3, [pc, #60]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 801469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801469c:	4a0e      	ldr	r2, [pc, #56]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 801469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146a2:	6353      	str	r3, [r2, #52]	; 0x34
 80146a4:	2300      	movs	r3, #0
 80146a6:	60fb      	str	r3, [r7, #12]
 80146a8:	4b0b      	ldr	r3, [pc, #44]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 80146aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ac:	4a0a      	ldr	r2, [pc, #40]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 80146ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80146b2:	6453      	str	r3, [r2, #68]	; 0x44
 80146b4:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <HAL_PCD_MspInit+0xa0>)
 80146b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80146bc:	60fb      	str	r3, [r7, #12]
 80146be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80146c0:	2200      	movs	r2, #0
 80146c2:	2100      	movs	r1, #0
 80146c4:	2043      	movs	r0, #67	; 0x43
 80146c6:	f7f1 ffc6 	bl	8006656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80146ca:	2043      	movs	r0, #67	; 0x43
 80146cc:	f7f1 ffdf 	bl	800668e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80146d0:	bf00      	nop
 80146d2:	3728      	adds	r7, #40	; 0x28
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	40023800 	.word	0x40023800
 80146dc:	40020000 	.word	0x40020000

080146e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80146f4:	4619      	mov	r1, r3
 80146f6:	4610      	mov	r0, r2
 80146f8:	f7fb fa6e 	bl	800fbd8 <USBD_LL_SetupStage>
}
 80146fc:	bf00      	nop
 80146fe:	3708      	adds	r7, #8
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	460b      	mov	r3, r1
 801470e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014716:	78fa      	ldrb	r2, [r7, #3]
 8014718:	6879      	ldr	r1, [r7, #4]
 801471a:	4613      	mov	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	1a9b      	subs	r3, r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	440b      	add	r3, r1
 8014724:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014728:	681a      	ldr	r2, [r3, #0]
 801472a:	78fb      	ldrb	r3, [r7, #3]
 801472c:	4619      	mov	r1, r3
 801472e:	f7fb fa9e 	bl	800fc6e <USBD_LL_DataOutStage>
}
 8014732:	bf00      	nop
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}

0801473a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801473a:	b580      	push	{r7, lr}
 801473c:	b082      	sub	sp, #8
 801473e:	af00      	add	r7, sp, #0
 8014740:	6078      	str	r0, [r7, #4]
 8014742:	460b      	mov	r3, r1
 8014744:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801474c:	78fa      	ldrb	r2, [r7, #3]
 801474e:	6879      	ldr	r1, [r7, #4]
 8014750:	4613      	mov	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	1a9b      	subs	r3, r3, r2
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	440b      	add	r3, r1
 801475a:	3348      	adds	r3, #72	; 0x48
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	78fb      	ldrb	r3, [r7, #3]
 8014760:	4619      	mov	r1, r3
 8014762:	f7fb faf5 	bl	800fd50 <USBD_LL_DataInStage>
}
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}

0801476e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801476e:	b580      	push	{r7, lr}
 8014770:	b082      	sub	sp, #8
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801477c:	4618      	mov	r0, r3
 801477e:	f7fb fc03 	bl	800ff88 <USBD_LL_SOF>
}
 8014782:	bf00      	nop
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801478a:	b580      	push	{r7, lr}
 801478c:	b084      	sub	sp, #16
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014792:	2301      	movs	r3, #1
 8014794:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d102      	bne.n	80147a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801479e:	2300      	movs	r3, #0
 80147a0:	73fb      	strb	r3, [r7, #15]
 80147a2:	e008      	b.n	80147b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	2b02      	cmp	r3, #2
 80147aa:	d102      	bne.n	80147b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80147ac:	2301      	movs	r3, #1
 80147ae:	73fb      	strb	r3, [r7, #15]
 80147b0:	e001      	b.n	80147b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80147b2:	f7fe fff1 	bl	8013798 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147bc:	7bfa      	ldrb	r2, [r7, #15]
 80147be:	4611      	mov	r1, r2
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fb fbab 	bl	800ff1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fb fb64 	bl	800fe9a <USBD_LL_Reset>
}
 80147d2:	bf00      	nop
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
	...

080147dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fb fba6 	bl	800ff3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	6812      	ldr	r2, [r2, #0]
 80147fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014802:	f043 0301 	orr.w	r3, r3, #1
 8014806:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6a1b      	ldr	r3, [r3, #32]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d005      	beq.n	801481c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014810:	4b04      	ldr	r3, [pc, #16]	; (8014824 <HAL_PCD_SuspendCallback+0x48>)
 8014812:	691b      	ldr	r3, [r3, #16]
 8014814:	4a03      	ldr	r2, [pc, #12]	; (8014824 <HAL_PCD_SuspendCallback+0x48>)
 8014816:	f043 0306 	orr.w	r3, r3, #6
 801481a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	e000ed00 	.word	0xe000ed00

08014828 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014836:	4618      	mov	r0, r3
 8014838:	f7fb fb95 	bl	800ff66 <USBD_LL_Resume>
}
 801483c:	bf00      	nop
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}

08014844 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	460b      	mov	r3, r1
 801484e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014856:	78fa      	ldrb	r2, [r7, #3]
 8014858:	4611      	mov	r1, r2
 801485a:	4618      	mov	r0, r3
 801485c:	f7fb fbbb 	bl	800ffd6 <USBD_LL_IsoOUTIncomplete>
}
 8014860:	bf00      	nop
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	460b      	mov	r3, r1
 8014872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801487a:	78fa      	ldrb	r2, [r7, #3]
 801487c:	4611      	mov	r1, r2
 801487e:	4618      	mov	r0, r3
 8014880:	f7fb fb9c 	bl	800ffbc <USBD_LL_IsoINIncomplete>
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801489a:	4618      	mov	r0, r3
 801489c:	f7fb fba8 	bl	800fff0 <USBD_LL_DevConnected>
}
 80148a0:	bf00      	nop
 80148a2:	3708      	adds	r7, #8
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7fb fba5 	bl	8010006 <USBD_LL_DevDisconnected>
}
 80148bc:	bf00      	nop
 80148be:	3708      	adds	r7, #8
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	781b      	ldrb	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d13c      	bne.n	801494e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80148d4:	4a20      	ldr	r2, [pc, #128]	; (8014958 <USBD_LL_Init+0x94>)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	4a1e      	ldr	r2, [pc, #120]	; (8014958 <USBD_LL_Init+0x94>)
 80148e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80148e4:	4b1c      	ldr	r3, [pc, #112]	; (8014958 <USBD_LL_Init+0x94>)
 80148e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80148ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80148ec:	4b1a      	ldr	r3, [pc, #104]	; (8014958 <USBD_LL_Init+0x94>)
 80148ee:	2204      	movs	r2, #4
 80148f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80148f2:	4b19      	ldr	r3, [pc, #100]	; (8014958 <USBD_LL_Init+0x94>)
 80148f4:	2202      	movs	r2, #2
 80148f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80148f8:	4b17      	ldr	r3, [pc, #92]	; (8014958 <USBD_LL_Init+0x94>)
 80148fa:	2200      	movs	r2, #0
 80148fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80148fe:	4b16      	ldr	r3, [pc, #88]	; (8014958 <USBD_LL_Init+0x94>)
 8014900:	2202      	movs	r2, #2
 8014902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014904:	4b14      	ldr	r3, [pc, #80]	; (8014958 <USBD_LL_Init+0x94>)
 8014906:	2200      	movs	r2, #0
 8014908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801490a:	4b13      	ldr	r3, [pc, #76]	; (8014958 <USBD_LL_Init+0x94>)
 801490c:	2200      	movs	r2, #0
 801490e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014910:	4b11      	ldr	r3, [pc, #68]	; (8014958 <USBD_LL_Init+0x94>)
 8014912:	2200      	movs	r2, #0
 8014914:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014916:	4b10      	ldr	r3, [pc, #64]	; (8014958 <USBD_LL_Init+0x94>)
 8014918:	2200      	movs	r2, #0
 801491a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801491c:	4b0e      	ldr	r3, [pc, #56]	; (8014958 <USBD_LL_Init+0x94>)
 801491e:	2200      	movs	r2, #0
 8014920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014922:	480d      	ldr	r0, [pc, #52]	; (8014958 <USBD_LL_Init+0x94>)
 8014924:	f7f3 fbcb 	bl	80080be <HAL_PCD_Init>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	d001      	beq.n	8014932 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801492e:	f7fe ff33 	bl	8013798 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014932:	2180      	movs	r1, #128	; 0x80
 8014934:	4808      	ldr	r0, [pc, #32]	; (8014958 <USBD_LL_Init+0x94>)
 8014936:	f7f4 fd30 	bl	800939a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801493a:	2240      	movs	r2, #64	; 0x40
 801493c:	2100      	movs	r1, #0
 801493e:	4806      	ldr	r0, [pc, #24]	; (8014958 <USBD_LL_Init+0x94>)
 8014940:	f7f4 fce4 	bl	800930c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014944:	2280      	movs	r2, #128	; 0x80
 8014946:	2101      	movs	r1, #1
 8014948:	4803      	ldr	r0, [pc, #12]	; (8014958 <USBD_LL_Init+0x94>)
 801494a:	f7f4 fcdf 	bl	800930c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}
 8014958:	200050d8 	.word	0x200050d8

0801495c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014964:	2300      	movs	r3, #0
 8014966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014968:	2300      	movs	r3, #0
 801496a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014972:	4618      	mov	r0, r3
 8014974:	f7f3 fcc0 	bl	80082f8 <HAL_PCD_Start>
 8014978:	4603      	mov	r3, r0
 801497a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801497c:	7bfb      	ldrb	r3, [r7, #15]
 801497e:	4618      	mov	r0, r3
 8014980:	f000 f92e 	bl	8014be0 <USBD_Get_USB_Status>
 8014984:	4603      	mov	r3, r0
 8014986:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014988:	7bbb      	ldrb	r3, [r7, #14]
}
 801498a:	4618      	mov	r0, r3
 801498c:	3710      	adds	r7, #16
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b084      	sub	sp, #16
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
 801499a:	4608      	mov	r0, r1
 801499c:	4611      	mov	r1, r2
 801499e:	461a      	mov	r2, r3
 80149a0:	4603      	mov	r3, r0
 80149a2:	70fb      	strb	r3, [r7, #3]
 80149a4:	460b      	mov	r3, r1
 80149a6:	70bb      	strb	r3, [r7, #2]
 80149a8:	4613      	mov	r3, r2
 80149aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149ac:	2300      	movs	r3, #0
 80149ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149b0:	2300      	movs	r3, #0
 80149b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80149ba:	78bb      	ldrb	r3, [r7, #2]
 80149bc:	883a      	ldrh	r2, [r7, #0]
 80149be:	78f9      	ldrb	r1, [r7, #3]
 80149c0:	f7f4 f895 	bl	8008aee <HAL_PCD_EP_Open>
 80149c4:	4603      	mov	r3, r0
 80149c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80149c8:	7bfb      	ldrb	r3, [r7, #15]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f000 f908 	bl	8014be0 <USBD_Get_USB_Status>
 80149d0:	4603      	mov	r3, r0
 80149d2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80149d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3710      	adds	r7, #16
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}

080149de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	b084      	sub	sp, #16
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	6078      	str	r0, [r7, #4]
 80149e6:	460b      	mov	r3, r1
 80149e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80149ee:	2300      	movs	r3, #0
 80149f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80149f8:	78fa      	ldrb	r2, [r7, #3]
 80149fa:	4611      	mov	r1, r2
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7f4 f8de 	bl	8008bbe <HAL_PCD_EP_Close>
 8014a02:	4603      	mov	r3, r0
 8014a04:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8014a06:	7bfb      	ldrb	r3, [r7, #15]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f000 f8e9 	bl	8014be0 <USBD_Get_USB_Status>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8014a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3710      	adds	r7, #16
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	460b      	mov	r3, r1
 8014a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a36:	78fa      	ldrb	r2, [r7, #3]
 8014a38:	4611      	mov	r1, r2
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7f4 f9b6 	bl	8008dac <HAL_PCD_EP_SetStall>
 8014a40:	4603      	mov	r3, r0
 8014a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
 8014a46:	4618      	mov	r0, r3
 8014a48:	f000 f8ca 	bl	8014be0 <USBD_Get_USB_Status>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b084      	sub	sp, #16
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	6078      	str	r0, [r7, #4]
 8014a62:	460b      	mov	r3, r1
 8014a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a66:	2300      	movs	r3, #0
 8014a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014a74:	78fa      	ldrb	r2, [r7, #3]
 8014a76:	4611      	mov	r1, r2
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f7f4 f9fb 	bl	8008e74 <HAL_PCD_EP_ClrStall>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014a82:	7bfb      	ldrb	r3, [r7, #15]
 8014a84:	4618      	mov	r0, r3
 8014a86:	f000 f8ab 	bl	8014be0 <USBD_Get_USB_Status>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a90:	4618      	mov	r0, r3
 8014a92:	3710      	adds	r7, #16
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014a98:	b480      	push	{r7}
 8014a9a:	b085      	sub	sp, #20
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	460b      	mov	r3, r1
 8014aa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014aaa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	da0b      	bge.n	8014acc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014ab4:	78fb      	ldrb	r3, [r7, #3]
 8014ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014aba:	68f9      	ldr	r1, [r7, #12]
 8014abc:	4613      	mov	r3, r2
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	1a9b      	subs	r3, r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	440b      	add	r3, r1
 8014ac6:	333e      	adds	r3, #62	; 0x3e
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	e00b      	b.n	8014ae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014acc:	78fb      	ldrb	r3, [r7, #3]
 8014ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ad2:	68f9      	ldr	r1, [r7, #12]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	00db      	lsls	r3, r3, #3
 8014ad8:	1a9b      	subs	r3, r3, r2
 8014ada:	009b      	lsls	r3, r3, #2
 8014adc:	440b      	add	r3, r1
 8014ade:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014ae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3714      	adds	r7, #20
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aee:	4770      	bx	lr

08014af0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	460b      	mov	r3, r1
 8014afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014afc:	2300      	movs	r3, #0
 8014afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b00:	2300      	movs	r3, #0
 8014b02:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014b0a:	78fa      	ldrb	r2, [r7, #3]
 8014b0c:	4611      	mov	r1, r2
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7f3 ffc8 	bl	8008aa4 <HAL_PCD_SetAddress>
 8014b14:	4603      	mov	r3, r0
 8014b16:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b18:	7bfb      	ldrb	r3, [r7, #15]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f000 f860 	bl	8014be0 <USBD_Get_USB_Status>
 8014b20:	4603      	mov	r3, r0
 8014b22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8014b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3710      	adds	r7, #16
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}

08014b2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b086      	sub	sp, #24
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	60f8      	str	r0, [r7, #12]
 8014b36:	607a      	str	r2, [r7, #4]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	72fb      	strb	r3, [r7, #11]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b42:	2300      	movs	r3, #0
 8014b44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b46:	2300      	movs	r3, #0
 8014b48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b50:	893b      	ldrh	r3, [r7, #8]
 8014b52:	7af9      	ldrb	r1, [r7, #11]
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	f7f4 f8df 	bl	8008d18 <HAL_PCD_EP_Transmit>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014b5e:	7dfb      	ldrb	r3, [r7, #23]
 8014b60:	4618      	mov	r0, r3
 8014b62:	f000 f83d 	bl	8014be0 <USBD_Get_USB_Status>
 8014b66:	4603      	mov	r3, r0
 8014b68:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8014b6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3718      	adds	r7, #24
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b086      	sub	sp, #24
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	607a      	str	r2, [r7, #4]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	460b      	mov	r3, r1
 8014b82:	72fb      	strb	r3, [r7, #11]
 8014b84:	4613      	mov	r3, r2
 8014b86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8014b96:	893b      	ldrh	r3, [r7, #8]
 8014b98:	7af9      	ldrb	r1, [r7, #11]
 8014b9a:	687a      	ldr	r2, [r7, #4]
 8014b9c:	f7f4 f859 	bl	8008c52 <HAL_PCD_EP_Receive>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014ba4:	7dfb      	ldrb	r3, [r7, #23]
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f000 f81a 	bl	8014be0 <USBD_Get_USB_Status>
 8014bac:	4603      	mov	r3, r0
 8014bae:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014bb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3718      	adds	r7, #24
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bba:	b580      	push	{r7, lr}
 8014bbc:	b082      	sub	sp, #8
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014bcc:	78fa      	ldrb	r2, [r7, #3]
 8014bce:	4611      	mov	r1, r2
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7f4 f889 	bl	8008ce8 <HAL_PCD_EP_GetRxCount>
 8014bd6:	4603      	mov	r3, r0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b085      	sub	sp, #20
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	4603      	mov	r3, r0
 8014be8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014bee:	79fb      	ldrb	r3, [r7, #7]
 8014bf0:	2b03      	cmp	r3, #3
 8014bf2:	d817      	bhi.n	8014c24 <USBD_Get_USB_Status+0x44>
 8014bf4:	a201      	add	r2, pc, #4	; (adr r2, 8014bfc <USBD_Get_USB_Status+0x1c>)
 8014bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bfa:	bf00      	nop
 8014bfc:	08014c0d 	.word	0x08014c0d
 8014c00:	08014c13 	.word	0x08014c13
 8014c04:	08014c19 	.word	0x08014c19
 8014c08:	08014c1f 	.word	0x08014c1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8014c10:	e00b      	b.n	8014c2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014c12:	2302      	movs	r3, #2
 8014c14:	73fb      	strb	r3, [r7, #15]
    break;
 8014c16:	e008      	b.n	8014c2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014c18:	2301      	movs	r3, #1
 8014c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c1c:	e005      	b.n	8014c2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014c1e:	2302      	movs	r3, #2
 8014c20:	73fb      	strb	r3, [r7, #15]
    break;
 8014c22:	e002      	b.n	8014c2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014c24:	2302      	movs	r3, #2
 8014c26:	73fb      	strb	r3, [r7, #15]
    break;
 8014c28:	bf00      	nop
  }
  return usb_status;
 8014c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c36:	4770      	bx	lr

08014c38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	4603      	mov	r3, r0
 8014c40:	6039      	str	r1, [r7, #0]
 8014c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	2212      	movs	r2, #18
 8014c48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014c4a:	4b03      	ldr	r3, [pc, #12]	; (8014c58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	370c      	adds	r7, #12
 8014c50:	46bd      	mov	sp, r7
 8014c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c56:	4770      	bx	lr
 8014c58:	200001a0 	.word	0x200001a0

08014c5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	4603      	mov	r3, r0
 8014c64:	6039      	str	r1, [r7, #0]
 8014c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	2204      	movs	r2, #4
 8014c6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014c6e:	4b03      	ldr	r3, [pc, #12]	; (8014c7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr
 8014c7c:	200001b4 	.word	0x200001b4

08014c80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	6039      	str	r1, [r7, #0]
 8014c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014c8c:	79fb      	ldrb	r3, [r7, #7]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d105      	bne.n	8014c9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014c92:	683a      	ldr	r2, [r7, #0]
 8014c94:	4907      	ldr	r1, [pc, #28]	; (8014cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8014c96:	4808      	ldr	r0, [pc, #32]	; (8014cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8014c98:	f7fb fe8c 	bl	80109b4 <USBD_GetString>
 8014c9c:	e004      	b.n	8014ca8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014c9e:	683a      	ldr	r2, [r7, #0]
 8014ca0:	4904      	ldr	r1, [pc, #16]	; (8014cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8014ca2:	4805      	ldr	r0, [pc, #20]	; (8014cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8014ca4:	f7fb fe86 	bl	80109b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ca8:	4b02      	ldr	r3, [pc, #8]	; (8014cb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3708      	adds	r7, #8
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	200054e0 	.word	0x200054e0
 8014cb8:	0801bd88 	.word	0x0801bd88

08014cbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	6039      	str	r1, [r7, #0]
 8014cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014cc8:	683a      	ldr	r2, [r7, #0]
 8014cca:	4904      	ldr	r1, [pc, #16]	; (8014cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014ccc:	4804      	ldr	r0, [pc, #16]	; (8014ce0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014cce:	f7fb fe71 	bl	80109b4 <USBD_GetString>
  return USBD_StrDesc;
 8014cd2:	4b02      	ldr	r3, [pc, #8]	; (8014cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	200054e0 	.word	0x200054e0
 8014ce0:	0801bd94 	.word	0x0801bd94

08014ce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	4603      	mov	r3, r0
 8014cec:	6039      	str	r1, [r7, #0]
 8014cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	221a      	movs	r2, #26
 8014cf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014cf6:	f000 f843 	bl	8014d80 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8014cfa:	4b02      	ldr	r3, [pc, #8]	; (8014d04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3708      	adds	r7, #8
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	200001b8 	.word	0x200001b8

08014d08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	4603      	mov	r3, r0
 8014d10:	6039      	str	r1, [r7, #0]
 8014d12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014d14:	79fb      	ldrb	r3, [r7, #7]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d105      	bne.n	8014d26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d1a:	683a      	ldr	r2, [r7, #0]
 8014d1c:	4907      	ldr	r1, [pc, #28]	; (8014d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d1e:	4808      	ldr	r0, [pc, #32]	; (8014d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d20:	f7fb fe48 	bl	80109b4 <USBD_GetString>
 8014d24:	e004      	b.n	8014d30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014d26:	683a      	ldr	r2, [r7, #0]
 8014d28:	4904      	ldr	r1, [pc, #16]	; (8014d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8014d2a:	4805      	ldr	r0, [pc, #20]	; (8014d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014d2c:	f7fb fe42 	bl	80109b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d30:	4b02      	ldr	r3, [pc, #8]	; (8014d3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	200054e0 	.word	0x200054e0
 8014d40:	0801bda8 	.word	0x0801bda8

08014d44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b082      	sub	sp, #8
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	6039      	str	r1, [r7, #0]
 8014d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d50:	79fb      	ldrb	r3, [r7, #7]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d105      	bne.n	8014d62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	4907      	ldr	r1, [pc, #28]	; (8014d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014d5a:	4808      	ldr	r0, [pc, #32]	; (8014d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014d5c:	f7fb fe2a 	bl	80109b4 <USBD_GetString>
 8014d60:	e004      	b.n	8014d6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014d62:	683a      	ldr	r2, [r7, #0]
 8014d64:	4904      	ldr	r1, [pc, #16]	; (8014d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014d66:	4805      	ldr	r0, [pc, #20]	; (8014d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014d68:	f7fb fe24 	bl	80109b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d6c:	4b02      	ldr	r3, [pc, #8]	; (8014d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3708      	adds	r7, #8
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	200054e0 	.word	0x200054e0
 8014d7c:	0801bdb4 	.word	0x0801bdb4

08014d80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014d86:	4b0f      	ldr	r3, [pc, #60]	; (8014dc4 <Get_SerialNum+0x44>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014d8c:	4b0e      	ldr	r3, [pc, #56]	; (8014dc8 <Get_SerialNum+0x48>)
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014d92:	4b0e      	ldr	r3, [pc, #56]	; (8014dcc <Get_SerialNum+0x4c>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014d98:	68fa      	ldr	r2, [r7, #12]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d009      	beq.n	8014dba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014da6:	2208      	movs	r2, #8
 8014da8:	4909      	ldr	r1, [pc, #36]	; (8014dd0 <Get_SerialNum+0x50>)
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	f000 f814 	bl	8014dd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014db0:	2204      	movs	r2, #4
 8014db2:	4908      	ldr	r1, [pc, #32]	; (8014dd4 <Get_SerialNum+0x54>)
 8014db4:	68b8      	ldr	r0, [r7, #8]
 8014db6:	f000 f80f 	bl	8014dd8 <IntToUnicode>
  }
}
 8014dba:	bf00      	nop
 8014dbc:	3710      	adds	r7, #16
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	1fff7a10 	.word	0x1fff7a10
 8014dc8:	1fff7a14 	.word	0x1fff7a14
 8014dcc:	1fff7a18 	.word	0x1fff7a18
 8014dd0:	200001ba 	.word	0x200001ba
 8014dd4:	200001ca 	.word	0x200001ca

08014dd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b087      	sub	sp, #28
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	4613      	mov	r3, r2
 8014de4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014de6:	2300      	movs	r3, #0
 8014de8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014dea:	2300      	movs	r3, #0
 8014dec:	75fb      	strb	r3, [r7, #23]
 8014dee:	e027      	b.n	8014e40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	0f1b      	lsrs	r3, r3, #28
 8014df4:	2b09      	cmp	r3, #9
 8014df6:	d80b      	bhi.n	8014e10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	0f1b      	lsrs	r3, r3, #28
 8014dfc:	b2da      	uxtb	r2, r3
 8014dfe:	7dfb      	ldrb	r3, [r7, #23]
 8014e00:	005b      	lsls	r3, r3, #1
 8014e02:	4619      	mov	r1, r3
 8014e04:	68bb      	ldr	r3, [r7, #8]
 8014e06:	440b      	add	r3, r1
 8014e08:	3230      	adds	r2, #48	; 0x30
 8014e0a:	b2d2      	uxtb	r2, r2
 8014e0c:	701a      	strb	r2, [r3, #0]
 8014e0e:	e00a      	b.n	8014e26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	0f1b      	lsrs	r3, r3, #28
 8014e14:	b2da      	uxtb	r2, r3
 8014e16:	7dfb      	ldrb	r3, [r7, #23]
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	4619      	mov	r1, r3
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	440b      	add	r3, r1
 8014e20:	3237      	adds	r2, #55	; 0x37
 8014e22:	b2d2      	uxtb	r2, r2
 8014e24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	011b      	lsls	r3, r3, #4
 8014e2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014e2c:	7dfb      	ldrb	r3, [r7, #23]
 8014e2e:	005b      	lsls	r3, r3, #1
 8014e30:	3301      	adds	r3, #1
 8014e32:	68ba      	ldr	r2, [r7, #8]
 8014e34:	4413      	add	r3, r2
 8014e36:	2200      	movs	r2, #0
 8014e38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014e3a:	7dfb      	ldrb	r3, [r7, #23]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	75fb      	strb	r3, [r7, #23]
 8014e40:	7dfa      	ldrb	r2, [r7, #23]
 8014e42:	79fb      	ldrb	r3, [r7, #7]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d3d3      	bcc.n	8014df0 <IntToUnicode+0x18>
  }
}
 8014e48:	bf00      	nop
 8014e4a:	371c      	adds	r7, #28
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr

08014e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014e5a:	e003      	b.n	8014e64 <LoopCopyDataInit>

08014e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014e5c:	4b0c      	ldr	r3, [pc, #48]	; (8014e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014e62:	3104      	adds	r1, #4

08014e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014e64:	480b      	ldr	r0, [pc, #44]	; (8014e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014e66:	4b0c      	ldr	r3, [pc, #48]	; (8014e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014e6c:	d3f6      	bcc.n	8014e5c <CopyDataInit>
  ldr  r2, =_sbss
 8014e6e:	4a0b      	ldr	r2, [pc, #44]	; (8014e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014e70:	e002      	b.n	8014e78 <LoopFillZerobss>

08014e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014e74:	f842 3b04 	str.w	r3, [r2], #4

08014e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014e78:	4b09      	ldr	r3, [pc, #36]	; (8014ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014e7c:	d3f9      	bcc.n	8014e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014e7e:	f7ff fa89 	bl	8014394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014e82:	f000 f821 	bl	8014ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014e86:	f7fe f849 	bl	8012f1c <main>
  bx  lr    
 8014e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8014e8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014e90:	0801c340 	.word	0x0801c340
  ldr  r0, =_sdata
 8014e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014e98:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 8014e9c:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 8014ea0:	200056e4 	.word	0x200056e4

08014ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014ea4:	e7fe      	b.n	8014ea4 <ADC_IRQHandler>

08014ea6 <atof>:
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	f001 bdce 	b.w	8016a48 <strtod>

08014eac <atoi>:
 8014eac:	220a      	movs	r2, #10
 8014eae:	2100      	movs	r1, #0
 8014eb0:	f001 be6c 	b.w	8016b8c <strtol>

08014eb4 <atol>:
 8014eb4:	220a      	movs	r2, #10
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	f001 be68 	b.w	8016b8c <strtol>

08014ebc <__errno>:
 8014ebc:	4b01      	ldr	r3, [pc, #4]	; (8014ec4 <__errno+0x8>)
 8014ebe:	6818      	ldr	r0, [r3, #0]
 8014ec0:	4770      	bx	lr
 8014ec2:	bf00      	nop
 8014ec4:	200001d4 	.word	0x200001d4

08014ec8 <__libc_init_array>:
 8014ec8:	b570      	push	{r4, r5, r6, lr}
 8014eca:	4e0d      	ldr	r6, [pc, #52]	; (8014f00 <__libc_init_array+0x38>)
 8014ecc:	4c0d      	ldr	r4, [pc, #52]	; (8014f04 <__libc_init_array+0x3c>)
 8014ece:	1ba4      	subs	r4, r4, r6
 8014ed0:	10a4      	asrs	r4, r4, #2
 8014ed2:	2500      	movs	r5, #0
 8014ed4:	42a5      	cmp	r5, r4
 8014ed6:	d109      	bne.n	8014eec <__libc_init_array+0x24>
 8014ed8:	4e0b      	ldr	r6, [pc, #44]	; (8014f08 <__libc_init_array+0x40>)
 8014eda:	4c0c      	ldr	r4, [pc, #48]	; (8014f0c <__libc_init_array+0x44>)
 8014edc:	f006 fcaa 	bl	801b834 <_init>
 8014ee0:	1ba4      	subs	r4, r4, r6
 8014ee2:	10a4      	asrs	r4, r4, #2
 8014ee4:	2500      	movs	r5, #0
 8014ee6:	42a5      	cmp	r5, r4
 8014ee8:	d105      	bne.n	8014ef6 <__libc_init_array+0x2e>
 8014eea:	bd70      	pop	{r4, r5, r6, pc}
 8014eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ef0:	4798      	blx	r3
 8014ef2:	3501      	adds	r5, #1
 8014ef4:	e7ee      	b.n	8014ed4 <__libc_init_array+0xc>
 8014ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014efa:	4798      	blx	r3
 8014efc:	3501      	adds	r5, #1
 8014efe:	e7f2      	b.n	8014ee6 <__libc_init_array+0x1e>
 8014f00:	0801c338 	.word	0x0801c338
 8014f04:	0801c338 	.word	0x0801c338
 8014f08:	0801c338 	.word	0x0801c338
 8014f0c:	0801c33c 	.word	0x0801c33c

08014f10 <malloc>:
 8014f10:	4b02      	ldr	r3, [pc, #8]	; (8014f1c <malloc+0xc>)
 8014f12:	4601      	mov	r1, r0
 8014f14:	6818      	ldr	r0, [r3, #0]
 8014f16:	f000 b86d 	b.w	8014ff4 <_malloc_r>
 8014f1a:	bf00      	nop
 8014f1c:	200001d4 	.word	0x200001d4

08014f20 <free>:
 8014f20:	4b02      	ldr	r3, [pc, #8]	; (8014f2c <free+0xc>)
 8014f22:	4601      	mov	r1, r0
 8014f24:	6818      	ldr	r0, [r3, #0]
 8014f26:	f000 b817 	b.w	8014f58 <_free_r>
 8014f2a:	bf00      	nop
 8014f2c:	200001d4 	.word	0x200001d4

08014f30 <memcpy>:
 8014f30:	b510      	push	{r4, lr}
 8014f32:	1e43      	subs	r3, r0, #1
 8014f34:	440a      	add	r2, r1
 8014f36:	4291      	cmp	r1, r2
 8014f38:	d100      	bne.n	8014f3c <memcpy+0xc>
 8014f3a:	bd10      	pop	{r4, pc}
 8014f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f44:	e7f7      	b.n	8014f36 <memcpy+0x6>

08014f46 <memset>:
 8014f46:	4402      	add	r2, r0
 8014f48:	4603      	mov	r3, r0
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d100      	bne.n	8014f50 <memset+0xa>
 8014f4e:	4770      	bx	lr
 8014f50:	f803 1b01 	strb.w	r1, [r3], #1
 8014f54:	e7f9      	b.n	8014f4a <memset+0x4>
	...

08014f58 <_free_r>:
 8014f58:	b538      	push	{r3, r4, r5, lr}
 8014f5a:	4605      	mov	r5, r0
 8014f5c:	2900      	cmp	r1, #0
 8014f5e:	d045      	beq.n	8014fec <_free_r+0x94>
 8014f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f64:	1f0c      	subs	r4, r1, #4
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	bfb8      	it	lt
 8014f6a:	18e4      	addlt	r4, r4, r3
 8014f6c:	f002 ffd4 	bl	8017f18 <__malloc_lock>
 8014f70:	4a1f      	ldr	r2, [pc, #124]	; (8014ff0 <_free_r+0x98>)
 8014f72:	6813      	ldr	r3, [r2, #0]
 8014f74:	4610      	mov	r0, r2
 8014f76:	b933      	cbnz	r3, 8014f86 <_free_r+0x2e>
 8014f78:	6063      	str	r3, [r4, #4]
 8014f7a:	6014      	str	r4, [r2, #0]
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f82:	f002 bfca 	b.w	8017f1a <__malloc_unlock>
 8014f86:	42a3      	cmp	r3, r4
 8014f88:	d90c      	bls.n	8014fa4 <_free_r+0x4c>
 8014f8a:	6821      	ldr	r1, [r4, #0]
 8014f8c:	1862      	adds	r2, r4, r1
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	bf04      	itt	eq
 8014f92:	681a      	ldreq	r2, [r3, #0]
 8014f94:	685b      	ldreq	r3, [r3, #4]
 8014f96:	6063      	str	r3, [r4, #4]
 8014f98:	bf04      	itt	eq
 8014f9a:	1852      	addeq	r2, r2, r1
 8014f9c:	6022      	streq	r2, [r4, #0]
 8014f9e:	6004      	str	r4, [r0, #0]
 8014fa0:	e7ec      	b.n	8014f7c <_free_r+0x24>
 8014fa2:	4613      	mov	r3, r2
 8014fa4:	685a      	ldr	r2, [r3, #4]
 8014fa6:	b10a      	cbz	r2, 8014fac <_free_r+0x54>
 8014fa8:	42a2      	cmp	r2, r4
 8014faa:	d9fa      	bls.n	8014fa2 <_free_r+0x4a>
 8014fac:	6819      	ldr	r1, [r3, #0]
 8014fae:	1858      	adds	r0, r3, r1
 8014fb0:	42a0      	cmp	r0, r4
 8014fb2:	d10b      	bne.n	8014fcc <_free_r+0x74>
 8014fb4:	6820      	ldr	r0, [r4, #0]
 8014fb6:	4401      	add	r1, r0
 8014fb8:	1858      	adds	r0, r3, r1
 8014fba:	4282      	cmp	r2, r0
 8014fbc:	6019      	str	r1, [r3, #0]
 8014fbe:	d1dd      	bne.n	8014f7c <_free_r+0x24>
 8014fc0:	6810      	ldr	r0, [r2, #0]
 8014fc2:	6852      	ldr	r2, [r2, #4]
 8014fc4:	605a      	str	r2, [r3, #4]
 8014fc6:	4401      	add	r1, r0
 8014fc8:	6019      	str	r1, [r3, #0]
 8014fca:	e7d7      	b.n	8014f7c <_free_r+0x24>
 8014fcc:	d902      	bls.n	8014fd4 <_free_r+0x7c>
 8014fce:	230c      	movs	r3, #12
 8014fd0:	602b      	str	r3, [r5, #0]
 8014fd2:	e7d3      	b.n	8014f7c <_free_r+0x24>
 8014fd4:	6820      	ldr	r0, [r4, #0]
 8014fd6:	1821      	adds	r1, r4, r0
 8014fd8:	428a      	cmp	r2, r1
 8014fda:	bf04      	itt	eq
 8014fdc:	6811      	ldreq	r1, [r2, #0]
 8014fde:	6852      	ldreq	r2, [r2, #4]
 8014fe0:	6062      	str	r2, [r4, #4]
 8014fe2:	bf04      	itt	eq
 8014fe4:	1809      	addeq	r1, r1, r0
 8014fe6:	6021      	streq	r1, [r4, #0]
 8014fe8:	605c      	str	r4, [r3, #4]
 8014fea:	e7c7      	b.n	8014f7c <_free_r+0x24>
 8014fec:	bd38      	pop	{r3, r4, r5, pc}
 8014fee:	bf00      	nop
 8014ff0:	20001a34 	.word	0x20001a34

08014ff4 <_malloc_r>:
 8014ff4:	b570      	push	{r4, r5, r6, lr}
 8014ff6:	1ccd      	adds	r5, r1, #3
 8014ff8:	f025 0503 	bic.w	r5, r5, #3
 8014ffc:	3508      	adds	r5, #8
 8014ffe:	2d0c      	cmp	r5, #12
 8015000:	bf38      	it	cc
 8015002:	250c      	movcc	r5, #12
 8015004:	2d00      	cmp	r5, #0
 8015006:	4606      	mov	r6, r0
 8015008:	db01      	blt.n	801500e <_malloc_r+0x1a>
 801500a:	42a9      	cmp	r1, r5
 801500c:	d903      	bls.n	8015016 <_malloc_r+0x22>
 801500e:	230c      	movs	r3, #12
 8015010:	6033      	str	r3, [r6, #0]
 8015012:	2000      	movs	r0, #0
 8015014:	bd70      	pop	{r4, r5, r6, pc}
 8015016:	f002 ff7f 	bl	8017f18 <__malloc_lock>
 801501a:	4a21      	ldr	r2, [pc, #132]	; (80150a0 <_malloc_r+0xac>)
 801501c:	6814      	ldr	r4, [r2, #0]
 801501e:	4621      	mov	r1, r4
 8015020:	b991      	cbnz	r1, 8015048 <_malloc_r+0x54>
 8015022:	4c20      	ldr	r4, [pc, #128]	; (80150a4 <_malloc_r+0xb0>)
 8015024:	6823      	ldr	r3, [r4, #0]
 8015026:	b91b      	cbnz	r3, 8015030 <_malloc_r+0x3c>
 8015028:	4630      	mov	r0, r6
 801502a:	f000 fe7b 	bl	8015d24 <_sbrk_r>
 801502e:	6020      	str	r0, [r4, #0]
 8015030:	4629      	mov	r1, r5
 8015032:	4630      	mov	r0, r6
 8015034:	f000 fe76 	bl	8015d24 <_sbrk_r>
 8015038:	1c43      	adds	r3, r0, #1
 801503a:	d124      	bne.n	8015086 <_malloc_r+0x92>
 801503c:	230c      	movs	r3, #12
 801503e:	6033      	str	r3, [r6, #0]
 8015040:	4630      	mov	r0, r6
 8015042:	f002 ff6a 	bl	8017f1a <__malloc_unlock>
 8015046:	e7e4      	b.n	8015012 <_malloc_r+0x1e>
 8015048:	680b      	ldr	r3, [r1, #0]
 801504a:	1b5b      	subs	r3, r3, r5
 801504c:	d418      	bmi.n	8015080 <_malloc_r+0x8c>
 801504e:	2b0b      	cmp	r3, #11
 8015050:	d90f      	bls.n	8015072 <_malloc_r+0x7e>
 8015052:	600b      	str	r3, [r1, #0]
 8015054:	50cd      	str	r5, [r1, r3]
 8015056:	18cc      	adds	r4, r1, r3
 8015058:	4630      	mov	r0, r6
 801505a:	f002 ff5e 	bl	8017f1a <__malloc_unlock>
 801505e:	f104 000b 	add.w	r0, r4, #11
 8015062:	1d23      	adds	r3, r4, #4
 8015064:	f020 0007 	bic.w	r0, r0, #7
 8015068:	1ac3      	subs	r3, r0, r3
 801506a:	d0d3      	beq.n	8015014 <_malloc_r+0x20>
 801506c:	425a      	negs	r2, r3
 801506e:	50e2      	str	r2, [r4, r3]
 8015070:	e7d0      	b.n	8015014 <_malloc_r+0x20>
 8015072:	428c      	cmp	r4, r1
 8015074:	684b      	ldr	r3, [r1, #4]
 8015076:	bf16      	itet	ne
 8015078:	6063      	strne	r3, [r4, #4]
 801507a:	6013      	streq	r3, [r2, #0]
 801507c:	460c      	movne	r4, r1
 801507e:	e7eb      	b.n	8015058 <_malloc_r+0x64>
 8015080:	460c      	mov	r4, r1
 8015082:	6849      	ldr	r1, [r1, #4]
 8015084:	e7cc      	b.n	8015020 <_malloc_r+0x2c>
 8015086:	1cc4      	adds	r4, r0, #3
 8015088:	f024 0403 	bic.w	r4, r4, #3
 801508c:	42a0      	cmp	r0, r4
 801508e:	d005      	beq.n	801509c <_malloc_r+0xa8>
 8015090:	1a21      	subs	r1, r4, r0
 8015092:	4630      	mov	r0, r6
 8015094:	f000 fe46 	bl	8015d24 <_sbrk_r>
 8015098:	3001      	adds	r0, #1
 801509a:	d0cf      	beq.n	801503c <_malloc_r+0x48>
 801509c:	6025      	str	r5, [r4, #0]
 801509e:	e7db      	b.n	8015058 <_malloc_r+0x64>
 80150a0:	20001a34 	.word	0x20001a34
 80150a4:	20001a38 	.word	0x20001a38

080150a8 <__cvt>:
 80150a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150ac:	ec55 4b10 	vmov	r4, r5, d0
 80150b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80150b2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80150b6:	2d00      	cmp	r5, #0
 80150b8:	460e      	mov	r6, r1
 80150ba:	4691      	mov	r9, r2
 80150bc:	4619      	mov	r1, r3
 80150be:	bfb8      	it	lt
 80150c0:	4622      	movlt	r2, r4
 80150c2:	462b      	mov	r3, r5
 80150c4:	f027 0720 	bic.w	r7, r7, #32
 80150c8:	bfbb      	ittet	lt
 80150ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80150ce:	461d      	movlt	r5, r3
 80150d0:	2300      	movge	r3, #0
 80150d2:	232d      	movlt	r3, #45	; 0x2d
 80150d4:	bfb8      	it	lt
 80150d6:	4614      	movlt	r4, r2
 80150d8:	2f46      	cmp	r7, #70	; 0x46
 80150da:	700b      	strb	r3, [r1, #0]
 80150dc:	d004      	beq.n	80150e8 <__cvt+0x40>
 80150de:	2f45      	cmp	r7, #69	; 0x45
 80150e0:	d100      	bne.n	80150e4 <__cvt+0x3c>
 80150e2:	3601      	adds	r6, #1
 80150e4:	2102      	movs	r1, #2
 80150e6:	e000      	b.n	80150ea <__cvt+0x42>
 80150e8:	2103      	movs	r1, #3
 80150ea:	ab03      	add	r3, sp, #12
 80150ec:	9301      	str	r3, [sp, #4]
 80150ee:	ab02      	add	r3, sp, #8
 80150f0:	9300      	str	r3, [sp, #0]
 80150f2:	4632      	mov	r2, r6
 80150f4:	4653      	mov	r3, sl
 80150f6:	ec45 4b10 	vmov	d0, r4, r5
 80150fa:	f001 fe09 	bl	8016d10 <_dtoa_r>
 80150fe:	2f47      	cmp	r7, #71	; 0x47
 8015100:	4680      	mov	r8, r0
 8015102:	d102      	bne.n	801510a <__cvt+0x62>
 8015104:	f019 0f01 	tst.w	r9, #1
 8015108:	d026      	beq.n	8015158 <__cvt+0xb0>
 801510a:	2f46      	cmp	r7, #70	; 0x46
 801510c:	eb08 0906 	add.w	r9, r8, r6
 8015110:	d111      	bne.n	8015136 <__cvt+0x8e>
 8015112:	f898 3000 	ldrb.w	r3, [r8]
 8015116:	2b30      	cmp	r3, #48	; 0x30
 8015118:	d10a      	bne.n	8015130 <__cvt+0x88>
 801511a:	2200      	movs	r2, #0
 801511c:	2300      	movs	r3, #0
 801511e:	4620      	mov	r0, r4
 8015120:	4629      	mov	r1, r5
 8015122:	f7eb fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 8015126:	b918      	cbnz	r0, 8015130 <__cvt+0x88>
 8015128:	f1c6 0601 	rsb	r6, r6, #1
 801512c:	f8ca 6000 	str.w	r6, [sl]
 8015130:	f8da 3000 	ldr.w	r3, [sl]
 8015134:	4499      	add	r9, r3
 8015136:	2200      	movs	r2, #0
 8015138:	2300      	movs	r3, #0
 801513a:	4620      	mov	r0, r4
 801513c:	4629      	mov	r1, r5
 801513e:	f7eb fcd3 	bl	8000ae8 <__aeabi_dcmpeq>
 8015142:	b938      	cbnz	r0, 8015154 <__cvt+0xac>
 8015144:	2230      	movs	r2, #48	; 0x30
 8015146:	9b03      	ldr	r3, [sp, #12]
 8015148:	454b      	cmp	r3, r9
 801514a:	d205      	bcs.n	8015158 <__cvt+0xb0>
 801514c:	1c59      	adds	r1, r3, #1
 801514e:	9103      	str	r1, [sp, #12]
 8015150:	701a      	strb	r2, [r3, #0]
 8015152:	e7f8      	b.n	8015146 <__cvt+0x9e>
 8015154:	f8cd 900c 	str.w	r9, [sp, #12]
 8015158:	9b03      	ldr	r3, [sp, #12]
 801515a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801515c:	eba3 0308 	sub.w	r3, r3, r8
 8015160:	4640      	mov	r0, r8
 8015162:	6013      	str	r3, [r2, #0]
 8015164:	b004      	add	sp, #16
 8015166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801516a <__exponent>:
 801516a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801516c:	2900      	cmp	r1, #0
 801516e:	4604      	mov	r4, r0
 8015170:	bfba      	itte	lt
 8015172:	4249      	neglt	r1, r1
 8015174:	232d      	movlt	r3, #45	; 0x2d
 8015176:	232b      	movge	r3, #43	; 0x2b
 8015178:	2909      	cmp	r1, #9
 801517a:	f804 2b02 	strb.w	r2, [r4], #2
 801517e:	7043      	strb	r3, [r0, #1]
 8015180:	dd20      	ble.n	80151c4 <__exponent+0x5a>
 8015182:	f10d 0307 	add.w	r3, sp, #7
 8015186:	461f      	mov	r7, r3
 8015188:	260a      	movs	r6, #10
 801518a:	fb91 f5f6 	sdiv	r5, r1, r6
 801518e:	fb06 1115 	mls	r1, r6, r5, r1
 8015192:	3130      	adds	r1, #48	; 0x30
 8015194:	2d09      	cmp	r5, #9
 8015196:	f803 1c01 	strb.w	r1, [r3, #-1]
 801519a:	f103 32ff 	add.w	r2, r3, #4294967295
 801519e:	4629      	mov	r1, r5
 80151a0:	dc09      	bgt.n	80151b6 <__exponent+0x4c>
 80151a2:	3130      	adds	r1, #48	; 0x30
 80151a4:	3b02      	subs	r3, #2
 80151a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80151aa:	42bb      	cmp	r3, r7
 80151ac:	4622      	mov	r2, r4
 80151ae:	d304      	bcc.n	80151ba <__exponent+0x50>
 80151b0:	1a10      	subs	r0, r2, r0
 80151b2:	b003      	add	sp, #12
 80151b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b6:	4613      	mov	r3, r2
 80151b8:	e7e7      	b.n	801518a <__exponent+0x20>
 80151ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151be:	f804 2b01 	strb.w	r2, [r4], #1
 80151c2:	e7f2      	b.n	80151aa <__exponent+0x40>
 80151c4:	2330      	movs	r3, #48	; 0x30
 80151c6:	4419      	add	r1, r3
 80151c8:	7083      	strb	r3, [r0, #2]
 80151ca:	1d02      	adds	r2, r0, #4
 80151cc:	70c1      	strb	r1, [r0, #3]
 80151ce:	e7ef      	b.n	80151b0 <__exponent+0x46>

080151d0 <_printf_float>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	b08d      	sub	sp, #52	; 0x34
 80151d6:	460c      	mov	r4, r1
 80151d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80151dc:	4616      	mov	r6, r2
 80151de:	461f      	mov	r7, r3
 80151e0:	4605      	mov	r5, r0
 80151e2:	f002 fe79 	bl	8017ed8 <_localeconv_r>
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	9304      	str	r3, [sp, #16]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7ea fffa 	bl	80001e4 <strlen>
 80151f0:	2300      	movs	r3, #0
 80151f2:	930a      	str	r3, [sp, #40]	; 0x28
 80151f4:	f8d8 3000 	ldr.w	r3, [r8]
 80151f8:	9005      	str	r0, [sp, #20]
 80151fa:	3307      	adds	r3, #7
 80151fc:	f023 0307 	bic.w	r3, r3, #7
 8015200:	f103 0208 	add.w	r2, r3, #8
 8015204:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015208:	f8d4 b000 	ldr.w	fp, [r4]
 801520c:	f8c8 2000 	str.w	r2, [r8]
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015218:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801521c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015220:	9307      	str	r3, [sp, #28]
 8015222:	f8cd 8018 	str.w	r8, [sp, #24]
 8015226:	f04f 32ff 	mov.w	r2, #4294967295
 801522a:	4ba7      	ldr	r3, [pc, #668]	; (80154c8 <_printf_float+0x2f8>)
 801522c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015230:	f7eb fc8c 	bl	8000b4c <__aeabi_dcmpun>
 8015234:	bb70      	cbnz	r0, 8015294 <_printf_float+0xc4>
 8015236:	f04f 32ff 	mov.w	r2, #4294967295
 801523a:	4ba3      	ldr	r3, [pc, #652]	; (80154c8 <_printf_float+0x2f8>)
 801523c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015240:	f7eb fc66 	bl	8000b10 <__aeabi_dcmple>
 8015244:	bb30      	cbnz	r0, 8015294 <_printf_float+0xc4>
 8015246:	2200      	movs	r2, #0
 8015248:	2300      	movs	r3, #0
 801524a:	4640      	mov	r0, r8
 801524c:	4649      	mov	r1, r9
 801524e:	f7eb fc55 	bl	8000afc <__aeabi_dcmplt>
 8015252:	b110      	cbz	r0, 801525a <_printf_float+0x8a>
 8015254:	232d      	movs	r3, #45	; 0x2d
 8015256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801525a:	4a9c      	ldr	r2, [pc, #624]	; (80154cc <_printf_float+0x2fc>)
 801525c:	4b9c      	ldr	r3, [pc, #624]	; (80154d0 <_printf_float+0x300>)
 801525e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015262:	bf8c      	ite	hi
 8015264:	4690      	movhi	r8, r2
 8015266:	4698      	movls	r8, r3
 8015268:	2303      	movs	r3, #3
 801526a:	f02b 0204 	bic.w	r2, fp, #4
 801526e:	6123      	str	r3, [r4, #16]
 8015270:	6022      	str	r2, [r4, #0]
 8015272:	f04f 0900 	mov.w	r9, #0
 8015276:	9700      	str	r7, [sp, #0]
 8015278:	4633      	mov	r3, r6
 801527a:	aa0b      	add	r2, sp, #44	; 0x2c
 801527c:	4621      	mov	r1, r4
 801527e:	4628      	mov	r0, r5
 8015280:	f000 f9e6 	bl	8015650 <_printf_common>
 8015284:	3001      	adds	r0, #1
 8015286:	f040 808d 	bne.w	80153a4 <_printf_float+0x1d4>
 801528a:	f04f 30ff 	mov.w	r0, #4294967295
 801528e:	b00d      	add	sp, #52	; 0x34
 8015290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015294:	4642      	mov	r2, r8
 8015296:	464b      	mov	r3, r9
 8015298:	4640      	mov	r0, r8
 801529a:	4649      	mov	r1, r9
 801529c:	f7eb fc56 	bl	8000b4c <__aeabi_dcmpun>
 80152a0:	b110      	cbz	r0, 80152a8 <_printf_float+0xd8>
 80152a2:	4a8c      	ldr	r2, [pc, #560]	; (80154d4 <_printf_float+0x304>)
 80152a4:	4b8c      	ldr	r3, [pc, #560]	; (80154d8 <_printf_float+0x308>)
 80152a6:	e7da      	b.n	801525e <_printf_float+0x8e>
 80152a8:	6861      	ldr	r1, [r4, #4]
 80152aa:	1c4b      	adds	r3, r1, #1
 80152ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80152b0:	a80a      	add	r0, sp, #40	; 0x28
 80152b2:	d13e      	bne.n	8015332 <_printf_float+0x162>
 80152b4:	2306      	movs	r3, #6
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	2300      	movs	r3, #0
 80152ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80152be:	ab09      	add	r3, sp, #36	; 0x24
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	ec49 8b10 	vmov	d0, r8, r9
 80152c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80152ca:	6022      	str	r2, [r4, #0]
 80152cc:	f8cd a004 	str.w	sl, [sp, #4]
 80152d0:	6861      	ldr	r1, [r4, #4]
 80152d2:	4628      	mov	r0, r5
 80152d4:	f7ff fee8 	bl	80150a8 <__cvt>
 80152d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80152dc:	2b47      	cmp	r3, #71	; 0x47
 80152de:	4680      	mov	r8, r0
 80152e0:	d109      	bne.n	80152f6 <_printf_float+0x126>
 80152e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e4:	1cd8      	adds	r0, r3, #3
 80152e6:	db02      	blt.n	80152ee <_printf_float+0x11e>
 80152e8:	6862      	ldr	r2, [r4, #4]
 80152ea:	4293      	cmp	r3, r2
 80152ec:	dd47      	ble.n	801537e <_printf_float+0x1ae>
 80152ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80152f2:	fa5f fa8a 	uxtb.w	sl, sl
 80152f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80152fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152fc:	d824      	bhi.n	8015348 <_printf_float+0x178>
 80152fe:	3901      	subs	r1, #1
 8015300:	4652      	mov	r2, sl
 8015302:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015306:	9109      	str	r1, [sp, #36]	; 0x24
 8015308:	f7ff ff2f 	bl	801516a <__exponent>
 801530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801530e:	1813      	adds	r3, r2, r0
 8015310:	2a01      	cmp	r2, #1
 8015312:	4681      	mov	r9, r0
 8015314:	6123      	str	r3, [r4, #16]
 8015316:	dc02      	bgt.n	801531e <_printf_float+0x14e>
 8015318:	6822      	ldr	r2, [r4, #0]
 801531a:	07d1      	lsls	r1, r2, #31
 801531c:	d501      	bpl.n	8015322 <_printf_float+0x152>
 801531e:	3301      	adds	r3, #1
 8015320:	6123      	str	r3, [r4, #16]
 8015322:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015326:	2b00      	cmp	r3, #0
 8015328:	d0a5      	beq.n	8015276 <_printf_float+0xa6>
 801532a:	232d      	movs	r3, #45	; 0x2d
 801532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015330:	e7a1      	b.n	8015276 <_printf_float+0xa6>
 8015332:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015336:	f000 8177 	beq.w	8015628 <_printf_float+0x458>
 801533a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801533e:	d1bb      	bne.n	80152b8 <_printf_float+0xe8>
 8015340:	2900      	cmp	r1, #0
 8015342:	d1b9      	bne.n	80152b8 <_printf_float+0xe8>
 8015344:	2301      	movs	r3, #1
 8015346:	e7b6      	b.n	80152b6 <_printf_float+0xe6>
 8015348:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801534c:	d119      	bne.n	8015382 <_printf_float+0x1b2>
 801534e:	2900      	cmp	r1, #0
 8015350:	6863      	ldr	r3, [r4, #4]
 8015352:	dd0c      	ble.n	801536e <_printf_float+0x19e>
 8015354:	6121      	str	r1, [r4, #16]
 8015356:	b913      	cbnz	r3, 801535e <_printf_float+0x18e>
 8015358:	6822      	ldr	r2, [r4, #0]
 801535a:	07d2      	lsls	r2, r2, #31
 801535c:	d502      	bpl.n	8015364 <_printf_float+0x194>
 801535e:	3301      	adds	r3, #1
 8015360:	440b      	add	r3, r1
 8015362:	6123      	str	r3, [r4, #16]
 8015364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015366:	65a3      	str	r3, [r4, #88]	; 0x58
 8015368:	f04f 0900 	mov.w	r9, #0
 801536c:	e7d9      	b.n	8015322 <_printf_float+0x152>
 801536e:	b913      	cbnz	r3, 8015376 <_printf_float+0x1a6>
 8015370:	6822      	ldr	r2, [r4, #0]
 8015372:	07d0      	lsls	r0, r2, #31
 8015374:	d501      	bpl.n	801537a <_printf_float+0x1aa>
 8015376:	3302      	adds	r3, #2
 8015378:	e7f3      	b.n	8015362 <_printf_float+0x192>
 801537a:	2301      	movs	r3, #1
 801537c:	e7f1      	b.n	8015362 <_printf_float+0x192>
 801537e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015382:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015386:	4293      	cmp	r3, r2
 8015388:	db05      	blt.n	8015396 <_printf_float+0x1c6>
 801538a:	6822      	ldr	r2, [r4, #0]
 801538c:	6123      	str	r3, [r4, #16]
 801538e:	07d1      	lsls	r1, r2, #31
 8015390:	d5e8      	bpl.n	8015364 <_printf_float+0x194>
 8015392:	3301      	adds	r3, #1
 8015394:	e7e5      	b.n	8015362 <_printf_float+0x192>
 8015396:	2b00      	cmp	r3, #0
 8015398:	bfd4      	ite	le
 801539a:	f1c3 0302 	rsble	r3, r3, #2
 801539e:	2301      	movgt	r3, #1
 80153a0:	4413      	add	r3, r2
 80153a2:	e7de      	b.n	8015362 <_printf_float+0x192>
 80153a4:	6823      	ldr	r3, [r4, #0]
 80153a6:	055a      	lsls	r2, r3, #21
 80153a8:	d407      	bmi.n	80153ba <_printf_float+0x1ea>
 80153aa:	6923      	ldr	r3, [r4, #16]
 80153ac:	4642      	mov	r2, r8
 80153ae:	4631      	mov	r1, r6
 80153b0:	4628      	mov	r0, r5
 80153b2:	47b8      	blx	r7
 80153b4:	3001      	adds	r0, #1
 80153b6:	d12b      	bne.n	8015410 <_printf_float+0x240>
 80153b8:	e767      	b.n	801528a <_printf_float+0xba>
 80153ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80153be:	f240 80dc 	bls.w	801557a <_printf_float+0x3aa>
 80153c2:	2200      	movs	r2, #0
 80153c4:	2300      	movs	r3, #0
 80153c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80153ca:	f7eb fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	d033      	beq.n	801543a <_printf_float+0x26a>
 80153d2:	2301      	movs	r3, #1
 80153d4:	4a41      	ldr	r2, [pc, #260]	; (80154dc <_printf_float+0x30c>)
 80153d6:	4631      	mov	r1, r6
 80153d8:	4628      	mov	r0, r5
 80153da:	47b8      	blx	r7
 80153dc:	3001      	adds	r0, #1
 80153de:	f43f af54 	beq.w	801528a <_printf_float+0xba>
 80153e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153e6:	429a      	cmp	r2, r3
 80153e8:	db02      	blt.n	80153f0 <_printf_float+0x220>
 80153ea:	6823      	ldr	r3, [r4, #0]
 80153ec:	07d8      	lsls	r0, r3, #31
 80153ee:	d50f      	bpl.n	8015410 <_printf_float+0x240>
 80153f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153f4:	4631      	mov	r1, r6
 80153f6:	4628      	mov	r0, r5
 80153f8:	47b8      	blx	r7
 80153fa:	3001      	adds	r0, #1
 80153fc:	f43f af45 	beq.w	801528a <_printf_float+0xba>
 8015400:	f04f 0800 	mov.w	r8, #0
 8015404:	f104 091a 	add.w	r9, r4, #26
 8015408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801540a:	3b01      	subs	r3, #1
 801540c:	4543      	cmp	r3, r8
 801540e:	dc09      	bgt.n	8015424 <_printf_float+0x254>
 8015410:	6823      	ldr	r3, [r4, #0]
 8015412:	079b      	lsls	r3, r3, #30
 8015414:	f100 8103 	bmi.w	801561e <_printf_float+0x44e>
 8015418:	68e0      	ldr	r0, [r4, #12]
 801541a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801541c:	4298      	cmp	r0, r3
 801541e:	bfb8      	it	lt
 8015420:	4618      	movlt	r0, r3
 8015422:	e734      	b.n	801528e <_printf_float+0xbe>
 8015424:	2301      	movs	r3, #1
 8015426:	464a      	mov	r2, r9
 8015428:	4631      	mov	r1, r6
 801542a:	4628      	mov	r0, r5
 801542c:	47b8      	blx	r7
 801542e:	3001      	adds	r0, #1
 8015430:	f43f af2b 	beq.w	801528a <_printf_float+0xba>
 8015434:	f108 0801 	add.w	r8, r8, #1
 8015438:	e7e6      	b.n	8015408 <_printf_float+0x238>
 801543a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543c:	2b00      	cmp	r3, #0
 801543e:	dc2b      	bgt.n	8015498 <_printf_float+0x2c8>
 8015440:	2301      	movs	r3, #1
 8015442:	4a26      	ldr	r2, [pc, #152]	; (80154dc <_printf_float+0x30c>)
 8015444:	4631      	mov	r1, r6
 8015446:	4628      	mov	r0, r5
 8015448:	47b8      	blx	r7
 801544a:	3001      	adds	r0, #1
 801544c:	f43f af1d 	beq.w	801528a <_printf_float+0xba>
 8015450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015452:	b923      	cbnz	r3, 801545e <_printf_float+0x28e>
 8015454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015456:	b913      	cbnz	r3, 801545e <_printf_float+0x28e>
 8015458:	6823      	ldr	r3, [r4, #0]
 801545a:	07d9      	lsls	r1, r3, #31
 801545c:	d5d8      	bpl.n	8015410 <_printf_float+0x240>
 801545e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015462:	4631      	mov	r1, r6
 8015464:	4628      	mov	r0, r5
 8015466:	47b8      	blx	r7
 8015468:	3001      	adds	r0, #1
 801546a:	f43f af0e 	beq.w	801528a <_printf_float+0xba>
 801546e:	f04f 0900 	mov.w	r9, #0
 8015472:	f104 0a1a 	add.w	sl, r4, #26
 8015476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015478:	425b      	negs	r3, r3
 801547a:	454b      	cmp	r3, r9
 801547c:	dc01      	bgt.n	8015482 <_printf_float+0x2b2>
 801547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015480:	e794      	b.n	80153ac <_printf_float+0x1dc>
 8015482:	2301      	movs	r3, #1
 8015484:	4652      	mov	r2, sl
 8015486:	4631      	mov	r1, r6
 8015488:	4628      	mov	r0, r5
 801548a:	47b8      	blx	r7
 801548c:	3001      	adds	r0, #1
 801548e:	f43f aefc 	beq.w	801528a <_printf_float+0xba>
 8015492:	f109 0901 	add.w	r9, r9, #1
 8015496:	e7ee      	b.n	8015476 <_printf_float+0x2a6>
 8015498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801549a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801549c:	429a      	cmp	r2, r3
 801549e:	bfa8      	it	ge
 80154a0:	461a      	movge	r2, r3
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	4691      	mov	r9, r2
 80154a6:	dd07      	ble.n	80154b8 <_printf_float+0x2e8>
 80154a8:	4613      	mov	r3, r2
 80154aa:	4631      	mov	r1, r6
 80154ac:	4642      	mov	r2, r8
 80154ae:	4628      	mov	r0, r5
 80154b0:	47b8      	blx	r7
 80154b2:	3001      	adds	r0, #1
 80154b4:	f43f aee9 	beq.w	801528a <_printf_float+0xba>
 80154b8:	f104 031a 	add.w	r3, r4, #26
 80154bc:	f04f 0b00 	mov.w	fp, #0
 80154c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80154c4:	9306      	str	r3, [sp, #24]
 80154c6:	e015      	b.n	80154f4 <_printf_float+0x324>
 80154c8:	7fefffff 	.word	0x7fefffff
 80154cc:	0801bdfc 	.word	0x0801bdfc
 80154d0:	0801bdf8 	.word	0x0801bdf8
 80154d4:	0801be04 	.word	0x0801be04
 80154d8:	0801be00 	.word	0x0801be00
 80154dc:	0801be08 	.word	0x0801be08
 80154e0:	2301      	movs	r3, #1
 80154e2:	9a06      	ldr	r2, [sp, #24]
 80154e4:	4631      	mov	r1, r6
 80154e6:	4628      	mov	r0, r5
 80154e8:	47b8      	blx	r7
 80154ea:	3001      	adds	r0, #1
 80154ec:	f43f aecd 	beq.w	801528a <_printf_float+0xba>
 80154f0:	f10b 0b01 	add.w	fp, fp, #1
 80154f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80154f8:	ebaa 0309 	sub.w	r3, sl, r9
 80154fc:	455b      	cmp	r3, fp
 80154fe:	dcef      	bgt.n	80154e0 <_printf_float+0x310>
 8015500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015504:	429a      	cmp	r2, r3
 8015506:	44d0      	add	r8, sl
 8015508:	db15      	blt.n	8015536 <_printf_float+0x366>
 801550a:	6823      	ldr	r3, [r4, #0]
 801550c:	07da      	lsls	r2, r3, #31
 801550e:	d412      	bmi.n	8015536 <_printf_float+0x366>
 8015510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015512:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015514:	eba3 020a 	sub.w	r2, r3, sl
 8015518:	eba3 0a01 	sub.w	sl, r3, r1
 801551c:	4592      	cmp	sl, r2
 801551e:	bfa8      	it	ge
 8015520:	4692      	movge	sl, r2
 8015522:	f1ba 0f00 	cmp.w	sl, #0
 8015526:	dc0e      	bgt.n	8015546 <_printf_float+0x376>
 8015528:	f04f 0800 	mov.w	r8, #0
 801552c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015530:	f104 091a 	add.w	r9, r4, #26
 8015534:	e019      	b.n	801556a <_printf_float+0x39a>
 8015536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801553a:	4631      	mov	r1, r6
 801553c:	4628      	mov	r0, r5
 801553e:	47b8      	blx	r7
 8015540:	3001      	adds	r0, #1
 8015542:	d1e5      	bne.n	8015510 <_printf_float+0x340>
 8015544:	e6a1      	b.n	801528a <_printf_float+0xba>
 8015546:	4653      	mov	r3, sl
 8015548:	4642      	mov	r2, r8
 801554a:	4631      	mov	r1, r6
 801554c:	4628      	mov	r0, r5
 801554e:	47b8      	blx	r7
 8015550:	3001      	adds	r0, #1
 8015552:	d1e9      	bne.n	8015528 <_printf_float+0x358>
 8015554:	e699      	b.n	801528a <_printf_float+0xba>
 8015556:	2301      	movs	r3, #1
 8015558:	464a      	mov	r2, r9
 801555a:	4631      	mov	r1, r6
 801555c:	4628      	mov	r0, r5
 801555e:	47b8      	blx	r7
 8015560:	3001      	adds	r0, #1
 8015562:	f43f ae92 	beq.w	801528a <_printf_float+0xba>
 8015566:	f108 0801 	add.w	r8, r8, #1
 801556a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801556e:	1a9b      	subs	r3, r3, r2
 8015570:	eba3 030a 	sub.w	r3, r3, sl
 8015574:	4543      	cmp	r3, r8
 8015576:	dcee      	bgt.n	8015556 <_printf_float+0x386>
 8015578:	e74a      	b.n	8015410 <_printf_float+0x240>
 801557a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801557c:	2a01      	cmp	r2, #1
 801557e:	dc01      	bgt.n	8015584 <_printf_float+0x3b4>
 8015580:	07db      	lsls	r3, r3, #31
 8015582:	d53a      	bpl.n	80155fa <_printf_float+0x42a>
 8015584:	2301      	movs	r3, #1
 8015586:	4642      	mov	r2, r8
 8015588:	4631      	mov	r1, r6
 801558a:	4628      	mov	r0, r5
 801558c:	47b8      	blx	r7
 801558e:	3001      	adds	r0, #1
 8015590:	f43f ae7b 	beq.w	801528a <_printf_float+0xba>
 8015594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015598:	4631      	mov	r1, r6
 801559a:	4628      	mov	r0, r5
 801559c:	47b8      	blx	r7
 801559e:	3001      	adds	r0, #1
 80155a0:	f108 0801 	add.w	r8, r8, #1
 80155a4:	f43f ae71 	beq.w	801528a <_printf_float+0xba>
 80155a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155aa:	2200      	movs	r2, #0
 80155ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80155b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155b4:	2300      	movs	r3, #0
 80155b6:	f7eb fa97 	bl	8000ae8 <__aeabi_dcmpeq>
 80155ba:	b9c8      	cbnz	r0, 80155f0 <_printf_float+0x420>
 80155bc:	4653      	mov	r3, sl
 80155be:	4642      	mov	r2, r8
 80155c0:	4631      	mov	r1, r6
 80155c2:	4628      	mov	r0, r5
 80155c4:	47b8      	blx	r7
 80155c6:	3001      	adds	r0, #1
 80155c8:	d10e      	bne.n	80155e8 <_printf_float+0x418>
 80155ca:	e65e      	b.n	801528a <_printf_float+0xba>
 80155cc:	2301      	movs	r3, #1
 80155ce:	4652      	mov	r2, sl
 80155d0:	4631      	mov	r1, r6
 80155d2:	4628      	mov	r0, r5
 80155d4:	47b8      	blx	r7
 80155d6:	3001      	adds	r0, #1
 80155d8:	f43f ae57 	beq.w	801528a <_printf_float+0xba>
 80155dc:	f108 0801 	add.w	r8, r8, #1
 80155e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e2:	3b01      	subs	r3, #1
 80155e4:	4543      	cmp	r3, r8
 80155e6:	dcf1      	bgt.n	80155cc <_printf_float+0x3fc>
 80155e8:	464b      	mov	r3, r9
 80155ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80155ee:	e6de      	b.n	80153ae <_printf_float+0x1de>
 80155f0:	f04f 0800 	mov.w	r8, #0
 80155f4:	f104 0a1a 	add.w	sl, r4, #26
 80155f8:	e7f2      	b.n	80155e0 <_printf_float+0x410>
 80155fa:	2301      	movs	r3, #1
 80155fc:	e7df      	b.n	80155be <_printf_float+0x3ee>
 80155fe:	2301      	movs	r3, #1
 8015600:	464a      	mov	r2, r9
 8015602:	4631      	mov	r1, r6
 8015604:	4628      	mov	r0, r5
 8015606:	47b8      	blx	r7
 8015608:	3001      	adds	r0, #1
 801560a:	f43f ae3e 	beq.w	801528a <_printf_float+0xba>
 801560e:	f108 0801 	add.w	r8, r8, #1
 8015612:	68e3      	ldr	r3, [r4, #12]
 8015614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015616:	1a9b      	subs	r3, r3, r2
 8015618:	4543      	cmp	r3, r8
 801561a:	dcf0      	bgt.n	80155fe <_printf_float+0x42e>
 801561c:	e6fc      	b.n	8015418 <_printf_float+0x248>
 801561e:	f04f 0800 	mov.w	r8, #0
 8015622:	f104 0919 	add.w	r9, r4, #25
 8015626:	e7f4      	b.n	8015612 <_printf_float+0x442>
 8015628:	2900      	cmp	r1, #0
 801562a:	f43f ae8b 	beq.w	8015344 <_printf_float+0x174>
 801562e:	2300      	movs	r3, #0
 8015630:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015634:	ab09      	add	r3, sp, #36	; 0x24
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	ec49 8b10 	vmov	d0, r8, r9
 801563c:	6022      	str	r2, [r4, #0]
 801563e:	f8cd a004 	str.w	sl, [sp, #4]
 8015642:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015646:	4628      	mov	r0, r5
 8015648:	f7ff fd2e 	bl	80150a8 <__cvt>
 801564c:	4680      	mov	r8, r0
 801564e:	e648      	b.n	80152e2 <_printf_float+0x112>

08015650 <_printf_common>:
 8015650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015654:	4691      	mov	r9, r2
 8015656:	461f      	mov	r7, r3
 8015658:	688a      	ldr	r2, [r1, #8]
 801565a:	690b      	ldr	r3, [r1, #16]
 801565c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015660:	4293      	cmp	r3, r2
 8015662:	bfb8      	it	lt
 8015664:	4613      	movlt	r3, r2
 8015666:	f8c9 3000 	str.w	r3, [r9]
 801566a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801566e:	4606      	mov	r6, r0
 8015670:	460c      	mov	r4, r1
 8015672:	b112      	cbz	r2, 801567a <_printf_common+0x2a>
 8015674:	3301      	adds	r3, #1
 8015676:	f8c9 3000 	str.w	r3, [r9]
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	0699      	lsls	r1, r3, #26
 801567e:	bf42      	ittt	mi
 8015680:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015684:	3302      	addmi	r3, #2
 8015686:	f8c9 3000 	strmi.w	r3, [r9]
 801568a:	6825      	ldr	r5, [r4, #0]
 801568c:	f015 0506 	ands.w	r5, r5, #6
 8015690:	d107      	bne.n	80156a2 <_printf_common+0x52>
 8015692:	f104 0a19 	add.w	sl, r4, #25
 8015696:	68e3      	ldr	r3, [r4, #12]
 8015698:	f8d9 2000 	ldr.w	r2, [r9]
 801569c:	1a9b      	subs	r3, r3, r2
 801569e:	42ab      	cmp	r3, r5
 80156a0:	dc28      	bgt.n	80156f4 <_printf_common+0xa4>
 80156a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80156a6:	6822      	ldr	r2, [r4, #0]
 80156a8:	3300      	adds	r3, #0
 80156aa:	bf18      	it	ne
 80156ac:	2301      	movne	r3, #1
 80156ae:	0692      	lsls	r2, r2, #26
 80156b0:	d42d      	bmi.n	801570e <_printf_common+0xbe>
 80156b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156b6:	4639      	mov	r1, r7
 80156b8:	4630      	mov	r0, r6
 80156ba:	47c0      	blx	r8
 80156bc:	3001      	adds	r0, #1
 80156be:	d020      	beq.n	8015702 <_printf_common+0xb2>
 80156c0:	6823      	ldr	r3, [r4, #0]
 80156c2:	68e5      	ldr	r5, [r4, #12]
 80156c4:	f8d9 2000 	ldr.w	r2, [r9]
 80156c8:	f003 0306 	and.w	r3, r3, #6
 80156cc:	2b04      	cmp	r3, #4
 80156ce:	bf08      	it	eq
 80156d0:	1aad      	subeq	r5, r5, r2
 80156d2:	68a3      	ldr	r3, [r4, #8]
 80156d4:	6922      	ldr	r2, [r4, #16]
 80156d6:	bf0c      	ite	eq
 80156d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80156dc:	2500      	movne	r5, #0
 80156de:	4293      	cmp	r3, r2
 80156e0:	bfc4      	itt	gt
 80156e2:	1a9b      	subgt	r3, r3, r2
 80156e4:	18ed      	addgt	r5, r5, r3
 80156e6:	f04f 0900 	mov.w	r9, #0
 80156ea:	341a      	adds	r4, #26
 80156ec:	454d      	cmp	r5, r9
 80156ee:	d11a      	bne.n	8015726 <_printf_common+0xd6>
 80156f0:	2000      	movs	r0, #0
 80156f2:	e008      	b.n	8015706 <_printf_common+0xb6>
 80156f4:	2301      	movs	r3, #1
 80156f6:	4652      	mov	r2, sl
 80156f8:	4639      	mov	r1, r7
 80156fa:	4630      	mov	r0, r6
 80156fc:	47c0      	blx	r8
 80156fe:	3001      	adds	r0, #1
 8015700:	d103      	bne.n	801570a <_printf_common+0xba>
 8015702:	f04f 30ff 	mov.w	r0, #4294967295
 8015706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801570a:	3501      	adds	r5, #1
 801570c:	e7c3      	b.n	8015696 <_printf_common+0x46>
 801570e:	18e1      	adds	r1, r4, r3
 8015710:	1c5a      	adds	r2, r3, #1
 8015712:	2030      	movs	r0, #48	; 0x30
 8015714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015718:	4422      	add	r2, r4
 801571a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801571e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015722:	3302      	adds	r3, #2
 8015724:	e7c5      	b.n	80156b2 <_printf_common+0x62>
 8015726:	2301      	movs	r3, #1
 8015728:	4622      	mov	r2, r4
 801572a:	4639      	mov	r1, r7
 801572c:	4630      	mov	r0, r6
 801572e:	47c0      	blx	r8
 8015730:	3001      	adds	r0, #1
 8015732:	d0e6      	beq.n	8015702 <_printf_common+0xb2>
 8015734:	f109 0901 	add.w	r9, r9, #1
 8015738:	e7d8      	b.n	80156ec <_printf_common+0x9c>
	...

0801573c <_printf_i>:
 801573c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015740:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015744:	460c      	mov	r4, r1
 8015746:	7e09      	ldrb	r1, [r1, #24]
 8015748:	b085      	sub	sp, #20
 801574a:	296e      	cmp	r1, #110	; 0x6e
 801574c:	4617      	mov	r7, r2
 801574e:	4606      	mov	r6, r0
 8015750:	4698      	mov	r8, r3
 8015752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015754:	f000 80b3 	beq.w	80158be <_printf_i+0x182>
 8015758:	d822      	bhi.n	80157a0 <_printf_i+0x64>
 801575a:	2963      	cmp	r1, #99	; 0x63
 801575c:	d036      	beq.n	80157cc <_printf_i+0x90>
 801575e:	d80a      	bhi.n	8015776 <_printf_i+0x3a>
 8015760:	2900      	cmp	r1, #0
 8015762:	f000 80b9 	beq.w	80158d8 <_printf_i+0x19c>
 8015766:	2958      	cmp	r1, #88	; 0x58
 8015768:	f000 8083 	beq.w	8015872 <_printf_i+0x136>
 801576c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015770:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015774:	e032      	b.n	80157dc <_printf_i+0xa0>
 8015776:	2964      	cmp	r1, #100	; 0x64
 8015778:	d001      	beq.n	801577e <_printf_i+0x42>
 801577a:	2969      	cmp	r1, #105	; 0x69
 801577c:	d1f6      	bne.n	801576c <_printf_i+0x30>
 801577e:	6820      	ldr	r0, [r4, #0]
 8015780:	6813      	ldr	r3, [r2, #0]
 8015782:	0605      	lsls	r5, r0, #24
 8015784:	f103 0104 	add.w	r1, r3, #4
 8015788:	d52a      	bpl.n	80157e0 <_printf_i+0xa4>
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	6011      	str	r1, [r2, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	da03      	bge.n	801579a <_printf_i+0x5e>
 8015792:	222d      	movs	r2, #45	; 0x2d
 8015794:	425b      	negs	r3, r3
 8015796:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801579a:	486f      	ldr	r0, [pc, #444]	; (8015958 <_printf_i+0x21c>)
 801579c:	220a      	movs	r2, #10
 801579e:	e039      	b.n	8015814 <_printf_i+0xd8>
 80157a0:	2973      	cmp	r1, #115	; 0x73
 80157a2:	f000 809d 	beq.w	80158e0 <_printf_i+0x1a4>
 80157a6:	d808      	bhi.n	80157ba <_printf_i+0x7e>
 80157a8:	296f      	cmp	r1, #111	; 0x6f
 80157aa:	d020      	beq.n	80157ee <_printf_i+0xb2>
 80157ac:	2970      	cmp	r1, #112	; 0x70
 80157ae:	d1dd      	bne.n	801576c <_printf_i+0x30>
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	f043 0320 	orr.w	r3, r3, #32
 80157b6:	6023      	str	r3, [r4, #0]
 80157b8:	e003      	b.n	80157c2 <_printf_i+0x86>
 80157ba:	2975      	cmp	r1, #117	; 0x75
 80157bc:	d017      	beq.n	80157ee <_printf_i+0xb2>
 80157be:	2978      	cmp	r1, #120	; 0x78
 80157c0:	d1d4      	bne.n	801576c <_printf_i+0x30>
 80157c2:	2378      	movs	r3, #120	; 0x78
 80157c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80157c8:	4864      	ldr	r0, [pc, #400]	; (801595c <_printf_i+0x220>)
 80157ca:	e055      	b.n	8015878 <_printf_i+0x13c>
 80157cc:	6813      	ldr	r3, [r2, #0]
 80157ce:	1d19      	adds	r1, r3, #4
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	6011      	str	r1, [r2, #0]
 80157d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80157dc:	2301      	movs	r3, #1
 80157de:	e08c      	b.n	80158fa <_printf_i+0x1be>
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	6011      	str	r1, [r2, #0]
 80157e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157e8:	bf18      	it	ne
 80157ea:	b21b      	sxthne	r3, r3
 80157ec:	e7cf      	b.n	801578e <_printf_i+0x52>
 80157ee:	6813      	ldr	r3, [r2, #0]
 80157f0:	6825      	ldr	r5, [r4, #0]
 80157f2:	1d18      	adds	r0, r3, #4
 80157f4:	6010      	str	r0, [r2, #0]
 80157f6:	0628      	lsls	r0, r5, #24
 80157f8:	d501      	bpl.n	80157fe <_printf_i+0xc2>
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	e002      	b.n	8015804 <_printf_i+0xc8>
 80157fe:	0668      	lsls	r0, r5, #25
 8015800:	d5fb      	bpl.n	80157fa <_printf_i+0xbe>
 8015802:	881b      	ldrh	r3, [r3, #0]
 8015804:	4854      	ldr	r0, [pc, #336]	; (8015958 <_printf_i+0x21c>)
 8015806:	296f      	cmp	r1, #111	; 0x6f
 8015808:	bf14      	ite	ne
 801580a:	220a      	movne	r2, #10
 801580c:	2208      	moveq	r2, #8
 801580e:	2100      	movs	r1, #0
 8015810:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015814:	6865      	ldr	r5, [r4, #4]
 8015816:	60a5      	str	r5, [r4, #8]
 8015818:	2d00      	cmp	r5, #0
 801581a:	f2c0 8095 	blt.w	8015948 <_printf_i+0x20c>
 801581e:	6821      	ldr	r1, [r4, #0]
 8015820:	f021 0104 	bic.w	r1, r1, #4
 8015824:	6021      	str	r1, [r4, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d13d      	bne.n	80158a6 <_printf_i+0x16a>
 801582a:	2d00      	cmp	r5, #0
 801582c:	f040 808e 	bne.w	801594c <_printf_i+0x210>
 8015830:	4665      	mov	r5, ip
 8015832:	2a08      	cmp	r2, #8
 8015834:	d10b      	bne.n	801584e <_printf_i+0x112>
 8015836:	6823      	ldr	r3, [r4, #0]
 8015838:	07db      	lsls	r3, r3, #31
 801583a:	d508      	bpl.n	801584e <_printf_i+0x112>
 801583c:	6923      	ldr	r3, [r4, #16]
 801583e:	6862      	ldr	r2, [r4, #4]
 8015840:	429a      	cmp	r2, r3
 8015842:	bfde      	ittt	le
 8015844:	2330      	movle	r3, #48	; 0x30
 8015846:	f805 3c01 	strble.w	r3, [r5, #-1]
 801584a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801584e:	ebac 0305 	sub.w	r3, ip, r5
 8015852:	6123      	str	r3, [r4, #16]
 8015854:	f8cd 8000 	str.w	r8, [sp]
 8015858:	463b      	mov	r3, r7
 801585a:	aa03      	add	r2, sp, #12
 801585c:	4621      	mov	r1, r4
 801585e:	4630      	mov	r0, r6
 8015860:	f7ff fef6 	bl	8015650 <_printf_common>
 8015864:	3001      	adds	r0, #1
 8015866:	d14d      	bne.n	8015904 <_printf_i+0x1c8>
 8015868:	f04f 30ff 	mov.w	r0, #4294967295
 801586c:	b005      	add	sp, #20
 801586e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015872:	4839      	ldr	r0, [pc, #228]	; (8015958 <_printf_i+0x21c>)
 8015874:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015878:	6813      	ldr	r3, [r2, #0]
 801587a:	6821      	ldr	r1, [r4, #0]
 801587c:	1d1d      	adds	r5, r3, #4
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	6015      	str	r5, [r2, #0]
 8015882:	060a      	lsls	r2, r1, #24
 8015884:	d50b      	bpl.n	801589e <_printf_i+0x162>
 8015886:	07ca      	lsls	r2, r1, #31
 8015888:	bf44      	itt	mi
 801588a:	f041 0120 	orrmi.w	r1, r1, #32
 801588e:	6021      	strmi	r1, [r4, #0]
 8015890:	b91b      	cbnz	r3, 801589a <_printf_i+0x15e>
 8015892:	6822      	ldr	r2, [r4, #0]
 8015894:	f022 0220 	bic.w	r2, r2, #32
 8015898:	6022      	str	r2, [r4, #0]
 801589a:	2210      	movs	r2, #16
 801589c:	e7b7      	b.n	801580e <_printf_i+0xd2>
 801589e:	064d      	lsls	r5, r1, #25
 80158a0:	bf48      	it	mi
 80158a2:	b29b      	uxthmi	r3, r3
 80158a4:	e7ef      	b.n	8015886 <_printf_i+0x14a>
 80158a6:	4665      	mov	r5, ip
 80158a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ac:	fb02 3311 	mls	r3, r2, r1, r3
 80158b0:	5cc3      	ldrb	r3, [r0, r3]
 80158b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80158b6:	460b      	mov	r3, r1
 80158b8:	2900      	cmp	r1, #0
 80158ba:	d1f5      	bne.n	80158a8 <_printf_i+0x16c>
 80158bc:	e7b9      	b.n	8015832 <_printf_i+0xf6>
 80158be:	6813      	ldr	r3, [r2, #0]
 80158c0:	6825      	ldr	r5, [r4, #0]
 80158c2:	6961      	ldr	r1, [r4, #20]
 80158c4:	1d18      	adds	r0, r3, #4
 80158c6:	6010      	str	r0, [r2, #0]
 80158c8:	0628      	lsls	r0, r5, #24
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	d501      	bpl.n	80158d2 <_printf_i+0x196>
 80158ce:	6019      	str	r1, [r3, #0]
 80158d0:	e002      	b.n	80158d8 <_printf_i+0x19c>
 80158d2:	066a      	lsls	r2, r5, #25
 80158d4:	d5fb      	bpl.n	80158ce <_printf_i+0x192>
 80158d6:	8019      	strh	r1, [r3, #0]
 80158d8:	2300      	movs	r3, #0
 80158da:	6123      	str	r3, [r4, #16]
 80158dc:	4665      	mov	r5, ip
 80158de:	e7b9      	b.n	8015854 <_printf_i+0x118>
 80158e0:	6813      	ldr	r3, [r2, #0]
 80158e2:	1d19      	adds	r1, r3, #4
 80158e4:	6011      	str	r1, [r2, #0]
 80158e6:	681d      	ldr	r5, [r3, #0]
 80158e8:	6862      	ldr	r2, [r4, #4]
 80158ea:	2100      	movs	r1, #0
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7ea fc87 	bl	8000200 <memchr>
 80158f2:	b108      	cbz	r0, 80158f8 <_printf_i+0x1bc>
 80158f4:	1b40      	subs	r0, r0, r5
 80158f6:	6060      	str	r0, [r4, #4]
 80158f8:	6863      	ldr	r3, [r4, #4]
 80158fa:	6123      	str	r3, [r4, #16]
 80158fc:	2300      	movs	r3, #0
 80158fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015902:	e7a7      	b.n	8015854 <_printf_i+0x118>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	462a      	mov	r2, r5
 8015908:	4639      	mov	r1, r7
 801590a:	4630      	mov	r0, r6
 801590c:	47c0      	blx	r8
 801590e:	3001      	adds	r0, #1
 8015910:	d0aa      	beq.n	8015868 <_printf_i+0x12c>
 8015912:	6823      	ldr	r3, [r4, #0]
 8015914:	079b      	lsls	r3, r3, #30
 8015916:	d413      	bmi.n	8015940 <_printf_i+0x204>
 8015918:	68e0      	ldr	r0, [r4, #12]
 801591a:	9b03      	ldr	r3, [sp, #12]
 801591c:	4298      	cmp	r0, r3
 801591e:	bfb8      	it	lt
 8015920:	4618      	movlt	r0, r3
 8015922:	e7a3      	b.n	801586c <_printf_i+0x130>
 8015924:	2301      	movs	r3, #1
 8015926:	464a      	mov	r2, r9
 8015928:	4639      	mov	r1, r7
 801592a:	4630      	mov	r0, r6
 801592c:	47c0      	blx	r8
 801592e:	3001      	adds	r0, #1
 8015930:	d09a      	beq.n	8015868 <_printf_i+0x12c>
 8015932:	3501      	adds	r5, #1
 8015934:	68e3      	ldr	r3, [r4, #12]
 8015936:	9a03      	ldr	r2, [sp, #12]
 8015938:	1a9b      	subs	r3, r3, r2
 801593a:	42ab      	cmp	r3, r5
 801593c:	dcf2      	bgt.n	8015924 <_printf_i+0x1e8>
 801593e:	e7eb      	b.n	8015918 <_printf_i+0x1dc>
 8015940:	2500      	movs	r5, #0
 8015942:	f104 0919 	add.w	r9, r4, #25
 8015946:	e7f5      	b.n	8015934 <_printf_i+0x1f8>
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1ac      	bne.n	80158a6 <_printf_i+0x16a>
 801594c:	7803      	ldrb	r3, [r0, #0]
 801594e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015956:	e76c      	b.n	8015832 <_printf_i+0xf6>
 8015958:	0801be0a 	.word	0x0801be0a
 801595c:	0801be1b 	.word	0x0801be1b

08015960 <_scanf_float>:
 8015960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015964:	469a      	mov	sl, r3
 8015966:	688b      	ldr	r3, [r1, #8]
 8015968:	4616      	mov	r6, r2
 801596a:	1e5a      	subs	r2, r3, #1
 801596c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015970:	b087      	sub	sp, #28
 8015972:	bf83      	ittte	hi
 8015974:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015978:	189b      	addhi	r3, r3, r2
 801597a:	9301      	strhi	r3, [sp, #4]
 801597c:	2300      	movls	r3, #0
 801597e:	bf86      	itte	hi
 8015980:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015984:	608b      	strhi	r3, [r1, #8]
 8015986:	9301      	strls	r3, [sp, #4]
 8015988:	680b      	ldr	r3, [r1, #0]
 801598a:	4688      	mov	r8, r1
 801598c:	f04f 0b00 	mov.w	fp, #0
 8015990:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015994:	f848 3b1c 	str.w	r3, [r8], #28
 8015998:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801599c:	4607      	mov	r7, r0
 801599e:	460c      	mov	r4, r1
 80159a0:	4645      	mov	r5, r8
 80159a2:	465a      	mov	r2, fp
 80159a4:	46d9      	mov	r9, fp
 80159a6:	f8cd b008 	str.w	fp, [sp, #8]
 80159aa:	68a1      	ldr	r1, [r4, #8]
 80159ac:	b181      	cbz	r1, 80159d0 <_scanf_float+0x70>
 80159ae:	6833      	ldr	r3, [r6, #0]
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	2b49      	cmp	r3, #73	; 0x49
 80159b4:	d071      	beq.n	8015a9a <_scanf_float+0x13a>
 80159b6:	d84d      	bhi.n	8015a54 <_scanf_float+0xf4>
 80159b8:	2b39      	cmp	r3, #57	; 0x39
 80159ba:	d840      	bhi.n	8015a3e <_scanf_float+0xde>
 80159bc:	2b31      	cmp	r3, #49	; 0x31
 80159be:	f080 8088 	bcs.w	8015ad2 <_scanf_float+0x172>
 80159c2:	2b2d      	cmp	r3, #45	; 0x2d
 80159c4:	f000 8090 	beq.w	8015ae8 <_scanf_float+0x188>
 80159c8:	d815      	bhi.n	80159f6 <_scanf_float+0x96>
 80159ca:	2b2b      	cmp	r3, #43	; 0x2b
 80159cc:	f000 808c 	beq.w	8015ae8 <_scanf_float+0x188>
 80159d0:	f1b9 0f00 	cmp.w	r9, #0
 80159d4:	d003      	beq.n	80159de <_scanf_float+0x7e>
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80159dc:	6023      	str	r3, [r4, #0]
 80159de:	3a01      	subs	r2, #1
 80159e0:	2a01      	cmp	r2, #1
 80159e2:	f200 80ea 	bhi.w	8015bba <_scanf_float+0x25a>
 80159e6:	4545      	cmp	r5, r8
 80159e8:	f200 80dc 	bhi.w	8015ba4 <_scanf_float+0x244>
 80159ec:	2601      	movs	r6, #1
 80159ee:	4630      	mov	r0, r6
 80159f0:	b007      	add	sp, #28
 80159f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f6:	2b2e      	cmp	r3, #46	; 0x2e
 80159f8:	f000 809f 	beq.w	8015b3a <_scanf_float+0x1da>
 80159fc:	2b30      	cmp	r3, #48	; 0x30
 80159fe:	d1e7      	bne.n	80159d0 <_scanf_float+0x70>
 8015a00:	6820      	ldr	r0, [r4, #0]
 8015a02:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015a06:	d064      	beq.n	8015ad2 <_scanf_float+0x172>
 8015a08:	9b01      	ldr	r3, [sp, #4]
 8015a0a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015a0e:	6020      	str	r0, [r4, #0]
 8015a10:	f109 0901 	add.w	r9, r9, #1
 8015a14:	b11b      	cbz	r3, 8015a1e <_scanf_float+0xbe>
 8015a16:	3b01      	subs	r3, #1
 8015a18:	3101      	adds	r1, #1
 8015a1a:	9301      	str	r3, [sp, #4]
 8015a1c:	60a1      	str	r1, [r4, #8]
 8015a1e:	68a3      	ldr	r3, [r4, #8]
 8015a20:	3b01      	subs	r3, #1
 8015a22:	60a3      	str	r3, [r4, #8]
 8015a24:	6923      	ldr	r3, [r4, #16]
 8015a26:	3301      	adds	r3, #1
 8015a28:	6123      	str	r3, [r4, #16]
 8015a2a:	6873      	ldr	r3, [r6, #4]
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	6073      	str	r3, [r6, #4]
 8015a32:	f340 80ac 	ble.w	8015b8e <_scanf_float+0x22e>
 8015a36:	6833      	ldr	r3, [r6, #0]
 8015a38:	3301      	adds	r3, #1
 8015a3a:	6033      	str	r3, [r6, #0]
 8015a3c:	e7b5      	b.n	80159aa <_scanf_float+0x4a>
 8015a3e:	2b45      	cmp	r3, #69	; 0x45
 8015a40:	f000 8085 	beq.w	8015b4e <_scanf_float+0x1ee>
 8015a44:	2b46      	cmp	r3, #70	; 0x46
 8015a46:	d06a      	beq.n	8015b1e <_scanf_float+0x1be>
 8015a48:	2b41      	cmp	r3, #65	; 0x41
 8015a4a:	d1c1      	bne.n	80159d0 <_scanf_float+0x70>
 8015a4c:	2a01      	cmp	r2, #1
 8015a4e:	d1bf      	bne.n	80159d0 <_scanf_float+0x70>
 8015a50:	2202      	movs	r2, #2
 8015a52:	e046      	b.n	8015ae2 <_scanf_float+0x182>
 8015a54:	2b65      	cmp	r3, #101	; 0x65
 8015a56:	d07a      	beq.n	8015b4e <_scanf_float+0x1ee>
 8015a58:	d818      	bhi.n	8015a8c <_scanf_float+0x12c>
 8015a5a:	2b54      	cmp	r3, #84	; 0x54
 8015a5c:	d066      	beq.n	8015b2c <_scanf_float+0x1cc>
 8015a5e:	d811      	bhi.n	8015a84 <_scanf_float+0x124>
 8015a60:	2b4e      	cmp	r3, #78	; 0x4e
 8015a62:	d1b5      	bne.n	80159d0 <_scanf_float+0x70>
 8015a64:	2a00      	cmp	r2, #0
 8015a66:	d146      	bne.n	8015af6 <_scanf_float+0x196>
 8015a68:	f1b9 0f00 	cmp.w	r9, #0
 8015a6c:	d145      	bne.n	8015afa <_scanf_float+0x19a>
 8015a6e:	6821      	ldr	r1, [r4, #0]
 8015a70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015a74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015a78:	d13f      	bne.n	8015afa <_scanf_float+0x19a>
 8015a7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015a7e:	6021      	str	r1, [r4, #0]
 8015a80:	2201      	movs	r2, #1
 8015a82:	e02e      	b.n	8015ae2 <_scanf_float+0x182>
 8015a84:	2b59      	cmp	r3, #89	; 0x59
 8015a86:	d01e      	beq.n	8015ac6 <_scanf_float+0x166>
 8015a88:	2b61      	cmp	r3, #97	; 0x61
 8015a8a:	e7de      	b.n	8015a4a <_scanf_float+0xea>
 8015a8c:	2b6e      	cmp	r3, #110	; 0x6e
 8015a8e:	d0e9      	beq.n	8015a64 <_scanf_float+0x104>
 8015a90:	d815      	bhi.n	8015abe <_scanf_float+0x15e>
 8015a92:	2b66      	cmp	r3, #102	; 0x66
 8015a94:	d043      	beq.n	8015b1e <_scanf_float+0x1be>
 8015a96:	2b69      	cmp	r3, #105	; 0x69
 8015a98:	d19a      	bne.n	80159d0 <_scanf_float+0x70>
 8015a9a:	f1bb 0f00 	cmp.w	fp, #0
 8015a9e:	d138      	bne.n	8015b12 <_scanf_float+0x1b2>
 8015aa0:	f1b9 0f00 	cmp.w	r9, #0
 8015aa4:	d197      	bne.n	80159d6 <_scanf_float+0x76>
 8015aa6:	6821      	ldr	r1, [r4, #0]
 8015aa8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015aac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ab0:	d195      	bne.n	80159de <_scanf_float+0x7e>
 8015ab2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015ab6:	6021      	str	r1, [r4, #0]
 8015ab8:	f04f 0b01 	mov.w	fp, #1
 8015abc:	e011      	b.n	8015ae2 <_scanf_float+0x182>
 8015abe:	2b74      	cmp	r3, #116	; 0x74
 8015ac0:	d034      	beq.n	8015b2c <_scanf_float+0x1cc>
 8015ac2:	2b79      	cmp	r3, #121	; 0x79
 8015ac4:	d184      	bne.n	80159d0 <_scanf_float+0x70>
 8015ac6:	f1bb 0f07 	cmp.w	fp, #7
 8015aca:	d181      	bne.n	80159d0 <_scanf_float+0x70>
 8015acc:	f04f 0b08 	mov.w	fp, #8
 8015ad0:	e007      	b.n	8015ae2 <_scanf_float+0x182>
 8015ad2:	eb12 0f0b 	cmn.w	r2, fp
 8015ad6:	f47f af7b 	bne.w	80159d0 <_scanf_float+0x70>
 8015ada:	6821      	ldr	r1, [r4, #0]
 8015adc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015ae0:	6021      	str	r1, [r4, #0]
 8015ae2:	702b      	strb	r3, [r5, #0]
 8015ae4:	3501      	adds	r5, #1
 8015ae6:	e79a      	b.n	8015a1e <_scanf_float+0xbe>
 8015ae8:	6821      	ldr	r1, [r4, #0]
 8015aea:	0608      	lsls	r0, r1, #24
 8015aec:	f57f af70 	bpl.w	80159d0 <_scanf_float+0x70>
 8015af0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015af4:	e7f4      	b.n	8015ae0 <_scanf_float+0x180>
 8015af6:	2a02      	cmp	r2, #2
 8015af8:	d047      	beq.n	8015b8a <_scanf_float+0x22a>
 8015afa:	f1bb 0f01 	cmp.w	fp, #1
 8015afe:	d003      	beq.n	8015b08 <_scanf_float+0x1a8>
 8015b00:	f1bb 0f04 	cmp.w	fp, #4
 8015b04:	f47f af64 	bne.w	80159d0 <_scanf_float+0x70>
 8015b08:	f10b 0b01 	add.w	fp, fp, #1
 8015b0c:	fa5f fb8b 	uxtb.w	fp, fp
 8015b10:	e7e7      	b.n	8015ae2 <_scanf_float+0x182>
 8015b12:	f1bb 0f03 	cmp.w	fp, #3
 8015b16:	d0f7      	beq.n	8015b08 <_scanf_float+0x1a8>
 8015b18:	f1bb 0f05 	cmp.w	fp, #5
 8015b1c:	e7f2      	b.n	8015b04 <_scanf_float+0x1a4>
 8015b1e:	f1bb 0f02 	cmp.w	fp, #2
 8015b22:	f47f af55 	bne.w	80159d0 <_scanf_float+0x70>
 8015b26:	f04f 0b03 	mov.w	fp, #3
 8015b2a:	e7da      	b.n	8015ae2 <_scanf_float+0x182>
 8015b2c:	f1bb 0f06 	cmp.w	fp, #6
 8015b30:	f47f af4e 	bne.w	80159d0 <_scanf_float+0x70>
 8015b34:	f04f 0b07 	mov.w	fp, #7
 8015b38:	e7d3      	b.n	8015ae2 <_scanf_float+0x182>
 8015b3a:	6821      	ldr	r1, [r4, #0]
 8015b3c:	0588      	lsls	r0, r1, #22
 8015b3e:	f57f af47 	bpl.w	80159d0 <_scanf_float+0x70>
 8015b42:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015b46:	6021      	str	r1, [r4, #0]
 8015b48:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b4c:	e7c9      	b.n	8015ae2 <_scanf_float+0x182>
 8015b4e:	6821      	ldr	r1, [r4, #0]
 8015b50:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015b54:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015b58:	d006      	beq.n	8015b68 <_scanf_float+0x208>
 8015b5a:	0548      	lsls	r0, r1, #21
 8015b5c:	f57f af38 	bpl.w	80159d0 <_scanf_float+0x70>
 8015b60:	f1b9 0f00 	cmp.w	r9, #0
 8015b64:	f43f af3b 	beq.w	80159de <_scanf_float+0x7e>
 8015b68:	0588      	lsls	r0, r1, #22
 8015b6a:	bf58      	it	pl
 8015b6c:	9802      	ldrpl	r0, [sp, #8]
 8015b6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015b72:	bf58      	it	pl
 8015b74:	eba9 0000 	subpl.w	r0, r9, r0
 8015b78:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015b7c:	bf58      	it	pl
 8015b7e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015b82:	6021      	str	r1, [r4, #0]
 8015b84:	f04f 0900 	mov.w	r9, #0
 8015b88:	e7ab      	b.n	8015ae2 <_scanf_float+0x182>
 8015b8a:	2203      	movs	r2, #3
 8015b8c:	e7a9      	b.n	8015ae2 <_scanf_float+0x182>
 8015b8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b92:	9205      	str	r2, [sp, #20]
 8015b94:	4631      	mov	r1, r6
 8015b96:	4638      	mov	r0, r7
 8015b98:	4798      	blx	r3
 8015b9a:	9a05      	ldr	r2, [sp, #20]
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f43f af04 	beq.w	80159aa <_scanf_float+0x4a>
 8015ba2:	e715      	b.n	80159d0 <_scanf_float+0x70>
 8015ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ba8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015bac:	4632      	mov	r2, r6
 8015bae:	4638      	mov	r0, r7
 8015bb0:	4798      	blx	r3
 8015bb2:	6923      	ldr	r3, [r4, #16]
 8015bb4:	3b01      	subs	r3, #1
 8015bb6:	6123      	str	r3, [r4, #16]
 8015bb8:	e715      	b.n	80159e6 <_scanf_float+0x86>
 8015bba:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015bbe:	2b06      	cmp	r3, #6
 8015bc0:	d80a      	bhi.n	8015bd8 <_scanf_float+0x278>
 8015bc2:	f1bb 0f02 	cmp.w	fp, #2
 8015bc6:	d968      	bls.n	8015c9a <_scanf_float+0x33a>
 8015bc8:	f1ab 0b03 	sub.w	fp, fp, #3
 8015bcc:	fa5f fb8b 	uxtb.w	fp, fp
 8015bd0:	eba5 0b0b 	sub.w	fp, r5, fp
 8015bd4:	455d      	cmp	r5, fp
 8015bd6:	d14b      	bne.n	8015c70 <_scanf_float+0x310>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	05da      	lsls	r2, r3, #23
 8015bdc:	d51f      	bpl.n	8015c1e <_scanf_float+0x2be>
 8015bde:	055b      	lsls	r3, r3, #21
 8015be0:	d468      	bmi.n	8015cb4 <_scanf_float+0x354>
 8015be2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015be6:	6923      	ldr	r3, [r4, #16]
 8015be8:	2965      	cmp	r1, #101	; 0x65
 8015bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8015bee:	f105 3bff 	add.w	fp, r5, #4294967295
 8015bf2:	6123      	str	r3, [r4, #16]
 8015bf4:	d00d      	beq.n	8015c12 <_scanf_float+0x2b2>
 8015bf6:	2945      	cmp	r1, #69	; 0x45
 8015bf8:	d00b      	beq.n	8015c12 <_scanf_float+0x2b2>
 8015bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bfe:	4632      	mov	r2, r6
 8015c00:	4638      	mov	r0, r7
 8015c02:	4798      	blx	r3
 8015c04:	6923      	ldr	r3, [r4, #16]
 8015c06:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015c10:	6123      	str	r3, [r4, #16]
 8015c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c16:	4632      	mov	r2, r6
 8015c18:	4638      	mov	r0, r7
 8015c1a:	4798      	blx	r3
 8015c1c:	465d      	mov	r5, fp
 8015c1e:	6826      	ldr	r6, [r4, #0]
 8015c20:	f016 0610 	ands.w	r6, r6, #16
 8015c24:	d17a      	bne.n	8015d1c <_scanf_float+0x3bc>
 8015c26:	702e      	strb	r6, [r5, #0]
 8015c28:	6823      	ldr	r3, [r4, #0]
 8015c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c32:	d142      	bne.n	8015cba <_scanf_float+0x35a>
 8015c34:	9b02      	ldr	r3, [sp, #8]
 8015c36:	eba9 0303 	sub.w	r3, r9, r3
 8015c3a:	425a      	negs	r2, r3
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d149      	bne.n	8015cd4 <_scanf_float+0x374>
 8015c40:	2200      	movs	r2, #0
 8015c42:	4641      	mov	r1, r8
 8015c44:	4638      	mov	r0, r7
 8015c46:	f000 feef 	bl	8016a28 <_strtod_r>
 8015c4a:	6825      	ldr	r5, [r4, #0]
 8015c4c:	f8da 3000 	ldr.w	r3, [sl]
 8015c50:	f015 0f02 	tst.w	r5, #2
 8015c54:	f103 0204 	add.w	r2, r3, #4
 8015c58:	ec59 8b10 	vmov	r8, r9, d0
 8015c5c:	f8ca 2000 	str.w	r2, [sl]
 8015c60:	d043      	beq.n	8015cea <_scanf_float+0x38a>
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	e9c3 8900 	strd	r8, r9, [r3]
 8015c68:	68e3      	ldr	r3, [r4, #12]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	60e3      	str	r3, [r4, #12]
 8015c6e:	e6be      	b.n	80159ee <_scanf_float+0x8e>
 8015c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c78:	4632      	mov	r2, r6
 8015c7a:	4638      	mov	r0, r7
 8015c7c:	4798      	blx	r3
 8015c7e:	6923      	ldr	r3, [r4, #16]
 8015c80:	3b01      	subs	r3, #1
 8015c82:	6123      	str	r3, [r4, #16]
 8015c84:	e7a6      	b.n	8015bd4 <_scanf_float+0x274>
 8015c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c8a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c8e:	4632      	mov	r2, r6
 8015c90:	4638      	mov	r0, r7
 8015c92:	4798      	blx	r3
 8015c94:	6923      	ldr	r3, [r4, #16]
 8015c96:	3b01      	subs	r3, #1
 8015c98:	6123      	str	r3, [r4, #16]
 8015c9a:	4545      	cmp	r5, r8
 8015c9c:	d8f3      	bhi.n	8015c86 <_scanf_float+0x326>
 8015c9e:	e6a5      	b.n	80159ec <_scanf_float+0x8c>
 8015ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ca4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ca8:	4632      	mov	r2, r6
 8015caa:	4638      	mov	r0, r7
 8015cac:	4798      	blx	r3
 8015cae:	6923      	ldr	r3, [r4, #16]
 8015cb0:	3b01      	subs	r3, #1
 8015cb2:	6123      	str	r3, [r4, #16]
 8015cb4:	4545      	cmp	r5, r8
 8015cb6:	d8f3      	bhi.n	8015ca0 <_scanf_float+0x340>
 8015cb8:	e698      	b.n	80159ec <_scanf_float+0x8c>
 8015cba:	9b03      	ldr	r3, [sp, #12]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d0bf      	beq.n	8015c40 <_scanf_float+0x2e0>
 8015cc0:	9904      	ldr	r1, [sp, #16]
 8015cc2:	230a      	movs	r3, #10
 8015cc4:	4632      	mov	r2, r6
 8015cc6:	3101      	adds	r1, #1
 8015cc8:	4638      	mov	r0, r7
 8015cca:	f000 ff4d 	bl	8016b68 <_strtol_r>
 8015cce:	9b03      	ldr	r3, [sp, #12]
 8015cd0:	9d04      	ldr	r5, [sp, #16]
 8015cd2:	1ac2      	subs	r2, r0, r3
 8015cd4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015cd8:	429d      	cmp	r5, r3
 8015cda:	bf28      	it	cs
 8015cdc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015ce0:	490f      	ldr	r1, [pc, #60]	; (8015d20 <_scanf_float+0x3c0>)
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f000 f834 	bl	8015d50 <siprintf>
 8015ce8:	e7aa      	b.n	8015c40 <_scanf_float+0x2e0>
 8015cea:	f015 0504 	ands.w	r5, r5, #4
 8015cee:	d1b8      	bne.n	8015c62 <_scanf_float+0x302>
 8015cf0:	681f      	ldr	r7, [r3, #0]
 8015cf2:	ee10 2a10 	vmov	r2, s0
 8015cf6:	464b      	mov	r3, r9
 8015cf8:	ee10 0a10 	vmov	r0, s0
 8015cfc:	4649      	mov	r1, r9
 8015cfe:	f7ea ff25 	bl	8000b4c <__aeabi_dcmpun>
 8015d02:	b128      	cbz	r0, 8015d10 <_scanf_float+0x3b0>
 8015d04:	4628      	mov	r0, r5
 8015d06:	f000 f81d 	bl	8015d44 <nanf>
 8015d0a:	ed87 0a00 	vstr	s0, [r7]
 8015d0e:	e7ab      	b.n	8015c68 <_scanf_float+0x308>
 8015d10:	4640      	mov	r0, r8
 8015d12:	4649      	mov	r1, r9
 8015d14:	f7ea ff78 	bl	8000c08 <__aeabi_d2f>
 8015d18:	6038      	str	r0, [r7, #0]
 8015d1a:	e7a5      	b.n	8015c68 <_scanf_float+0x308>
 8015d1c:	2600      	movs	r6, #0
 8015d1e:	e666      	b.n	80159ee <_scanf_float+0x8e>
 8015d20:	0801be2c 	.word	0x0801be2c

08015d24 <_sbrk_r>:
 8015d24:	b538      	push	{r3, r4, r5, lr}
 8015d26:	4c06      	ldr	r4, [pc, #24]	; (8015d40 <_sbrk_r+0x1c>)
 8015d28:	2300      	movs	r3, #0
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	4608      	mov	r0, r1
 8015d2e:	6023      	str	r3, [r4, #0]
 8015d30:	f7fe fb04 	bl	801433c <_sbrk>
 8015d34:	1c43      	adds	r3, r0, #1
 8015d36:	d102      	bne.n	8015d3e <_sbrk_r+0x1a>
 8015d38:	6823      	ldr	r3, [r4, #0]
 8015d3a:	b103      	cbz	r3, 8015d3e <_sbrk_r+0x1a>
 8015d3c:	602b      	str	r3, [r5, #0]
 8015d3e:	bd38      	pop	{r3, r4, r5, pc}
 8015d40:	200056e0 	.word	0x200056e0

08015d44 <nanf>:
 8015d44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d4c <nanf+0x8>
 8015d48:	4770      	bx	lr
 8015d4a:	bf00      	nop
 8015d4c:	7fc00000 	.word	0x7fc00000

08015d50 <siprintf>:
 8015d50:	b40e      	push	{r1, r2, r3}
 8015d52:	b500      	push	{lr}
 8015d54:	b09c      	sub	sp, #112	; 0x70
 8015d56:	ab1d      	add	r3, sp, #116	; 0x74
 8015d58:	9002      	str	r0, [sp, #8]
 8015d5a:	9006      	str	r0, [sp, #24]
 8015d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d60:	4809      	ldr	r0, [pc, #36]	; (8015d88 <siprintf+0x38>)
 8015d62:	9107      	str	r1, [sp, #28]
 8015d64:	9104      	str	r1, [sp, #16]
 8015d66:	4909      	ldr	r1, [pc, #36]	; (8015d8c <siprintf+0x3c>)
 8015d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d6c:	9105      	str	r1, [sp, #20]
 8015d6e:	6800      	ldr	r0, [r0, #0]
 8015d70:	9301      	str	r3, [sp, #4]
 8015d72:	a902      	add	r1, sp, #8
 8015d74:	f002 fd3a 	bl	80187ec <_svfiprintf_r>
 8015d78:	9b02      	ldr	r3, [sp, #8]
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	701a      	strb	r2, [r3, #0]
 8015d7e:	b01c      	add	sp, #112	; 0x70
 8015d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d84:	b003      	add	sp, #12
 8015d86:	4770      	bx	lr
 8015d88:	200001d4 	.word	0x200001d4
 8015d8c:	ffff0208 	.word	0xffff0208

08015d90 <strchr>:
 8015d90:	b2c9      	uxtb	r1, r1
 8015d92:	4603      	mov	r3, r0
 8015d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d98:	b11a      	cbz	r2, 8015da2 <strchr+0x12>
 8015d9a:	428a      	cmp	r2, r1
 8015d9c:	d1f9      	bne.n	8015d92 <strchr+0x2>
 8015d9e:	4618      	mov	r0, r3
 8015da0:	4770      	bx	lr
 8015da2:	2900      	cmp	r1, #0
 8015da4:	bf18      	it	ne
 8015da6:	2300      	movne	r3, #0
 8015da8:	e7f9      	b.n	8015d9e <strchr+0xe>

08015daa <strcpy>:
 8015daa:	4603      	mov	r3, r0
 8015dac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015db0:	f803 2b01 	strb.w	r2, [r3], #1
 8015db4:	2a00      	cmp	r2, #0
 8015db6:	d1f9      	bne.n	8015dac <strcpy+0x2>
 8015db8:	4770      	bx	lr

08015dba <strncmp>:
 8015dba:	b510      	push	{r4, lr}
 8015dbc:	b16a      	cbz	r2, 8015dda <strncmp+0x20>
 8015dbe:	3901      	subs	r1, #1
 8015dc0:	1884      	adds	r4, r0, r2
 8015dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015dc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d103      	bne.n	8015dd6 <strncmp+0x1c>
 8015dce:	42a0      	cmp	r0, r4
 8015dd0:	d001      	beq.n	8015dd6 <strncmp+0x1c>
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1f5      	bne.n	8015dc2 <strncmp+0x8>
 8015dd6:	1a98      	subs	r0, r3, r2
 8015dd8:	bd10      	pop	{r4, pc}
 8015dda:	4610      	mov	r0, r2
 8015ddc:	e7fc      	b.n	8015dd8 <strncmp+0x1e>

08015dde <strncpy>:
 8015dde:	b570      	push	{r4, r5, r6, lr}
 8015de0:	3901      	subs	r1, #1
 8015de2:	4604      	mov	r4, r0
 8015de4:	b902      	cbnz	r2, 8015de8 <strncpy+0xa>
 8015de6:	bd70      	pop	{r4, r5, r6, pc}
 8015de8:	4623      	mov	r3, r4
 8015dea:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8015dee:	f803 5b01 	strb.w	r5, [r3], #1
 8015df2:	1e56      	subs	r6, r2, #1
 8015df4:	b92d      	cbnz	r5, 8015e02 <strncpy+0x24>
 8015df6:	4414      	add	r4, r2
 8015df8:	42a3      	cmp	r3, r4
 8015dfa:	d0f4      	beq.n	8015de6 <strncpy+0x8>
 8015dfc:	f803 5b01 	strb.w	r5, [r3], #1
 8015e00:	e7fa      	b.n	8015df8 <strncpy+0x1a>
 8015e02:	461c      	mov	r4, r3
 8015e04:	4632      	mov	r2, r6
 8015e06:	e7ed      	b.n	8015de4 <strncpy+0x6>

08015e08 <sulp>:
 8015e08:	b570      	push	{r4, r5, r6, lr}
 8015e0a:	4604      	mov	r4, r0
 8015e0c:	460d      	mov	r5, r1
 8015e0e:	ec45 4b10 	vmov	d0, r4, r5
 8015e12:	4616      	mov	r6, r2
 8015e14:	f002 fb4e 	bl	80184b4 <__ulp>
 8015e18:	ec51 0b10 	vmov	r0, r1, d0
 8015e1c:	b17e      	cbz	r6, 8015e3e <sulp+0x36>
 8015e1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	dd09      	ble.n	8015e3e <sulp+0x36>
 8015e2a:	051b      	lsls	r3, r3, #20
 8015e2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e30:	2400      	movs	r4, #0
 8015e32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e36:	4622      	mov	r2, r4
 8015e38:	462b      	mov	r3, r5
 8015e3a:	f7ea fbed 	bl	8000618 <__aeabi_dmul>
 8015e3e:	bd70      	pop	{r4, r5, r6, pc}

08015e40 <_strtod_l>:
 8015e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	461f      	mov	r7, r3
 8015e46:	b0a1      	sub	sp, #132	; 0x84
 8015e48:	2300      	movs	r3, #0
 8015e4a:	4681      	mov	r9, r0
 8015e4c:	4638      	mov	r0, r7
 8015e4e:	460e      	mov	r6, r1
 8015e50:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e52:	931c      	str	r3, [sp, #112]	; 0x70
 8015e54:	f002 f83d 	bl	8017ed2 <__localeconv_l>
 8015e58:	4680      	mov	r8, r0
 8015e5a:	6800      	ldr	r0, [r0, #0]
 8015e5c:	f7ea f9c2 	bl	80001e4 <strlen>
 8015e60:	f04f 0a00 	mov.w	sl, #0
 8015e64:	4604      	mov	r4, r0
 8015e66:	f04f 0b00 	mov.w	fp, #0
 8015e6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e6e:	781a      	ldrb	r2, [r3, #0]
 8015e70:	2a0d      	cmp	r2, #13
 8015e72:	d832      	bhi.n	8015eda <_strtod_l+0x9a>
 8015e74:	2a09      	cmp	r2, #9
 8015e76:	d236      	bcs.n	8015ee6 <_strtod_l+0xa6>
 8015e78:	2a00      	cmp	r2, #0
 8015e7a:	d03e      	beq.n	8015efa <_strtod_l+0xba>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8015e80:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015e82:	782b      	ldrb	r3, [r5, #0]
 8015e84:	2b30      	cmp	r3, #48	; 0x30
 8015e86:	f040 80ac 	bne.w	8015fe2 <_strtod_l+0x1a2>
 8015e8a:	786b      	ldrb	r3, [r5, #1]
 8015e8c:	2b58      	cmp	r3, #88	; 0x58
 8015e8e:	d001      	beq.n	8015e94 <_strtod_l+0x54>
 8015e90:	2b78      	cmp	r3, #120	; 0x78
 8015e92:	d167      	bne.n	8015f64 <_strtod_l+0x124>
 8015e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e96:	9301      	str	r3, [sp, #4]
 8015e98:	ab1c      	add	r3, sp, #112	; 0x70
 8015e9a:	9300      	str	r3, [sp, #0]
 8015e9c:	9702      	str	r7, [sp, #8]
 8015e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8015ea0:	4a88      	ldr	r2, [pc, #544]	; (80160c4 <_strtod_l+0x284>)
 8015ea2:	a91b      	add	r1, sp, #108	; 0x6c
 8015ea4:	4648      	mov	r0, r9
 8015ea6:	f001 fd3a 	bl	801791e <__gethex>
 8015eaa:	f010 0407 	ands.w	r4, r0, #7
 8015eae:	4606      	mov	r6, r0
 8015eb0:	d005      	beq.n	8015ebe <_strtod_l+0x7e>
 8015eb2:	2c06      	cmp	r4, #6
 8015eb4:	d12b      	bne.n	8015f0e <_strtod_l+0xce>
 8015eb6:	3501      	adds	r5, #1
 8015eb8:	2300      	movs	r3, #0
 8015eba:	951b      	str	r5, [sp, #108]	; 0x6c
 8015ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8015ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f040 859a 	bne.w	80169fa <_strtod_l+0xbba>
 8015ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ec8:	b1e3      	cbz	r3, 8015f04 <_strtod_l+0xc4>
 8015eca:	4652      	mov	r2, sl
 8015ecc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015ed0:	ec43 2b10 	vmov	d0, r2, r3
 8015ed4:	b021      	add	sp, #132	; 0x84
 8015ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eda:	2a2b      	cmp	r2, #43	; 0x2b
 8015edc:	d015      	beq.n	8015f0a <_strtod_l+0xca>
 8015ede:	2a2d      	cmp	r2, #45	; 0x2d
 8015ee0:	d004      	beq.n	8015eec <_strtod_l+0xac>
 8015ee2:	2a20      	cmp	r2, #32
 8015ee4:	d1ca      	bne.n	8015e7c <_strtod_l+0x3c>
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	931b      	str	r3, [sp, #108]	; 0x6c
 8015eea:	e7bf      	b.n	8015e6c <_strtod_l+0x2c>
 8015eec:	2201      	movs	r2, #1
 8015eee:	920d      	str	r2, [sp, #52]	; 0x34
 8015ef0:	1c5a      	adds	r2, r3, #1
 8015ef2:	921b      	str	r2, [sp, #108]	; 0x6c
 8015ef4:	785b      	ldrb	r3, [r3, #1]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d1c2      	bne.n	8015e80 <_strtod_l+0x40>
 8015efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015efc:	961b      	str	r6, [sp, #108]	; 0x6c
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	f040 8579 	bne.w	80169f6 <_strtod_l+0xbb6>
 8015f04:	4652      	mov	r2, sl
 8015f06:	465b      	mov	r3, fp
 8015f08:	e7e2      	b.n	8015ed0 <_strtod_l+0x90>
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	e7ef      	b.n	8015eee <_strtod_l+0xae>
 8015f0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f10:	b13a      	cbz	r2, 8015f22 <_strtod_l+0xe2>
 8015f12:	2135      	movs	r1, #53	; 0x35
 8015f14:	a81e      	add	r0, sp, #120	; 0x78
 8015f16:	f002 fbc5 	bl	80186a4 <__copybits>
 8015f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f1c:	4648      	mov	r0, r9
 8015f1e:	f002 f831 	bl	8017f84 <_Bfree>
 8015f22:	3c01      	subs	r4, #1
 8015f24:	2c04      	cmp	r4, #4
 8015f26:	d806      	bhi.n	8015f36 <_strtod_l+0xf6>
 8015f28:	e8df f004 	tbb	[pc, r4]
 8015f2c:	1714030a 	.word	0x1714030a
 8015f30:	0a          	.byte	0x0a
 8015f31:	00          	.byte	0x00
 8015f32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015f36:	0730      	lsls	r0, r6, #28
 8015f38:	d5c1      	bpl.n	8015ebe <_strtod_l+0x7e>
 8015f3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f3e:	e7be      	b.n	8015ebe <_strtod_l+0x7e>
 8015f40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015f44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015f46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015f52:	e7f0      	b.n	8015f36 <_strtod_l+0xf6>
 8015f54:	f8df b170 	ldr.w	fp, [pc, #368]	; 80160c8 <_strtod_l+0x288>
 8015f58:	e7ed      	b.n	8015f36 <_strtod_l+0xf6>
 8015f5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8015f62:	e7e8      	b.n	8015f36 <_strtod_l+0xf6>
 8015f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f66:	1c5a      	adds	r2, r3, #1
 8015f68:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f6a:	785b      	ldrb	r3, [r3, #1]
 8015f6c:	2b30      	cmp	r3, #48	; 0x30
 8015f6e:	d0f9      	beq.n	8015f64 <_strtod_l+0x124>
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d0a4      	beq.n	8015ebe <_strtod_l+0x7e>
 8015f74:	2301      	movs	r3, #1
 8015f76:	2500      	movs	r5, #0
 8015f78:	9306      	str	r3, [sp, #24]
 8015f7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f7c:	9308      	str	r3, [sp, #32]
 8015f7e:	9507      	str	r5, [sp, #28]
 8015f80:	9505      	str	r5, [sp, #20]
 8015f82:	220a      	movs	r2, #10
 8015f84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015f86:	7807      	ldrb	r7, [r0, #0]
 8015f88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015f8c:	b2d9      	uxtb	r1, r3
 8015f8e:	2909      	cmp	r1, #9
 8015f90:	d929      	bls.n	8015fe6 <_strtod_l+0x1a6>
 8015f92:	4622      	mov	r2, r4
 8015f94:	f8d8 1000 	ldr.w	r1, [r8]
 8015f98:	f7ff ff0f 	bl	8015dba <strncmp>
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d031      	beq.n	8016004 <_strtod_l+0x1c4>
 8015fa0:	2000      	movs	r0, #0
 8015fa2:	9c05      	ldr	r4, [sp, #20]
 8015fa4:	9004      	str	r0, [sp, #16]
 8015fa6:	463b      	mov	r3, r7
 8015fa8:	4602      	mov	r2, r0
 8015faa:	2b65      	cmp	r3, #101	; 0x65
 8015fac:	d001      	beq.n	8015fb2 <_strtod_l+0x172>
 8015fae:	2b45      	cmp	r3, #69	; 0x45
 8015fb0:	d114      	bne.n	8015fdc <_strtod_l+0x19c>
 8015fb2:	b924      	cbnz	r4, 8015fbe <_strtod_l+0x17e>
 8015fb4:	b910      	cbnz	r0, 8015fbc <_strtod_l+0x17c>
 8015fb6:	9b06      	ldr	r3, [sp, #24]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d09e      	beq.n	8015efa <_strtod_l+0xba>
 8015fbc:	2400      	movs	r4, #0
 8015fbe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015fc0:	1c73      	adds	r3, r6, #1
 8015fc2:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fc4:	7873      	ldrb	r3, [r6, #1]
 8015fc6:	2b2b      	cmp	r3, #43	; 0x2b
 8015fc8:	d078      	beq.n	80160bc <_strtod_l+0x27c>
 8015fca:	2b2d      	cmp	r3, #45	; 0x2d
 8015fcc:	d070      	beq.n	80160b0 <_strtod_l+0x270>
 8015fce:	f04f 0c00 	mov.w	ip, #0
 8015fd2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015fd6:	2f09      	cmp	r7, #9
 8015fd8:	d97c      	bls.n	80160d4 <_strtod_l+0x294>
 8015fda:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fdc:	f04f 0e00 	mov.w	lr, #0
 8015fe0:	e09a      	b.n	8016118 <_strtod_l+0x2d8>
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e7c7      	b.n	8015f76 <_strtod_l+0x136>
 8015fe6:	9905      	ldr	r1, [sp, #20]
 8015fe8:	2908      	cmp	r1, #8
 8015fea:	bfdd      	ittte	le
 8015fec:	9907      	ldrle	r1, [sp, #28]
 8015fee:	fb02 3301 	mlale	r3, r2, r1, r3
 8015ff2:	9307      	strle	r3, [sp, #28]
 8015ff4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015ff8:	9b05      	ldr	r3, [sp, #20]
 8015ffa:	3001      	adds	r0, #1
 8015ffc:	3301      	adds	r3, #1
 8015ffe:	9305      	str	r3, [sp, #20]
 8016000:	901b      	str	r0, [sp, #108]	; 0x6c
 8016002:	e7bf      	b.n	8015f84 <_strtod_l+0x144>
 8016004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016006:	191a      	adds	r2, r3, r4
 8016008:	921b      	str	r2, [sp, #108]	; 0x6c
 801600a:	9a05      	ldr	r2, [sp, #20]
 801600c:	5d1b      	ldrb	r3, [r3, r4]
 801600e:	2a00      	cmp	r2, #0
 8016010:	d037      	beq.n	8016082 <_strtod_l+0x242>
 8016012:	9c05      	ldr	r4, [sp, #20]
 8016014:	4602      	mov	r2, r0
 8016016:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801601a:	2909      	cmp	r1, #9
 801601c:	d913      	bls.n	8016046 <_strtod_l+0x206>
 801601e:	2101      	movs	r1, #1
 8016020:	9104      	str	r1, [sp, #16]
 8016022:	e7c2      	b.n	8015faa <_strtod_l+0x16a>
 8016024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016026:	1c5a      	adds	r2, r3, #1
 8016028:	921b      	str	r2, [sp, #108]	; 0x6c
 801602a:	785b      	ldrb	r3, [r3, #1]
 801602c:	3001      	adds	r0, #1
 801602e:	2b30      	cmp	r3, #48	; 0x30
 8016030:	d0f8      	beq.n	8016024 <_strtod_l+0x1e4>
 8016032:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016036:	2a08      	cmp	r2, #8
 8016038:	f200 84e4 	bhi.w	8016a04 <_strtod_l+0xbc4>
 801603c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801603e:	9208      	str	r2, [sp, #32]
 8016040:	4602      	mov	r2, r0
 8016042:	2000      	movs	r0, #0
 8016044:	4604      	mov	r4, r0
 8016046:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801604a:	f100 0101 	add.w	r1, r0, #1
 801604e:	d012      	beq.n	8016076 <_strtod_l+0x236>
 8016050:	440a      	add	r2, r1
 8016052:	eb00 0c04 	add.w	ip, r0, r4
 8016056:	4621      	mov	r1, r4
 8016058:	270a      	movs	r7, #10
 801605a:	458c      	cmp	ip, r1
 801605c:	d113      	bne.n	8016086 <_strtod_l+0x246>
 801605e:	1821      	adds	r1, r4, r0
 8016060:	2908      	cmp	r1, #8
 8016062:	f104 0401 	add.w	r4, r4, #1
 8016066:	4404      	add	r4, r0
 8016068:	dc19      	bgt.n	801609e <_strtod_l+0x25e>
 801606a:	9b07      	ldr	r3, [sp, #28]
 801606c:	210a      	movs	r1, #10
 801606e:	fb01 e303 	mla	r3, r1, r3, lr
 8016072:	9307      	str	r3, [sp, #28]
 8016074:	2100      	movs	r1, #0
 8016076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016078:	1c58      	adds	r0, r3, #1
 801607a:	901b      	str	r0, [sp, #108]	; 0x6c
 801607c:	785b      	ldrb	r3, [r3, #1]
 801607e:	4608      	mov	r0, r1
 8016080:	e7c9      	b.n	8016016 <_strtod_l+0x1d6>
 8016082:	9805      	ldr	r0, [sp, #20]
 8016084:	e7d3      	b.n	801602e <_strtod_l+0x1ee>
 8016086:	2908      	cmp	r1, #8
 8016088:	f101 0101 	add.w	r1, r1, #1
 801608c:	dc03      	bgt.n	8016096 <_strtod_l+0x256>
 801608e:	9b07      	ldr	r3, [sp, #28]
 8016090:	437b      	muls	r3, r7
 8016092:	9307      	str	r3, [sp, #28]
 8016094:	e7e1      	b.n	801605a <_strtod_l+0x21a>
 8016096:	2910      	cmp	r1, #16
 8016098:	bfd8      	it	le
 801609a:	437d      	mulle	r5, r7
 801609c:	e7dd      	b.n	801605a <_strtod_l+0x21a>
 801609e:	2c10      	cmp	r4, #16
 80160a0:	bfdc      	itt	le
 80160a2:	210a      	movle	r1, #10
 80160a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80160a8:	e7e4      	b.n	8016074 <_strtod_l+0x234>
 80160aa:	2301      	movs	r3, #1
 80160ac:	9304      	str	r3, [sp, #16]
 80160ae:	e781      	b.n	8015fb4 <_strtod_l+0x174>
 80160b0:	f04f 0c01 	mov.w	ip, #1
 80160b4:	1cb3      	adds	r3, r6, #2
 80160b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80160b8:	78b3      	ldrb	r3, [r6, #2]
 80160ba:	e78a      	b.n	8015fd2 <_strtod_l+0x192>
 80160bc:	f04f 0c00 	mov.w	ip, #0
 80160c0:	e7f8      	b.n	80160b4 <_strtod_l+0x274>
 80160c2:	bf00      	nop
 80160c4:	0801be34 	.word	0x0801be34
 80160c8:	7ff00000 	.word	0x7ff00000
 80160cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160ce:	1c5f      	adds	r7, r3, #1
 80160d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80160d2:	785b      	ldrb	r3, [r3, #1]
 80160d4:	2b30      	cmp	r3, #48	; 0x30
 80160d6:	d0f9      	beq.n	80160cc <_strtod_l+0x28c>
 80160d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80160dc:	2f08      	cmp	r7, #8
 80160de:	f63f af7d 	bhi.w	8015fdc <_strtod_l+0x19c>
 80160e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80160e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160e8:	930a      	str	r3, [sp, #40]	; 0x28
 80160ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160ec:	1c5f      	adds	r7, r3, #1
 80160ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80160f0:	785b      	ldrb	r3, [r3, #1]
 80160f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80160f6:	f1b8 0f09 	cmp.w	r8, #9
 80160fa:	d937      	bls.n	801616c <_strtod_l+0x32c>
 80160fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80160fe:	1a7f      	subs	r7, r7, r1
 8016100:	2f08      	cmp	r7, #8
 8016102:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016106:	dc37      	bgt.n	8016178 <_strtod_l+0x338>
 8016108:	45be      	cmp	lr, r7
 801610a:	bfa8      	it	ge
 801610c:	46be      	movge	lr, r7
 801610e:	f1bc 0f00 	cmp.w	ip, #0
 8016112:	d001      	beq.n	8016118 <_strtod_l+0x2d8>
 8016114:	f1ce 0e00 	rsb	lr, lr, #0
 8016118:	2c00      	cmp	r4, #0
 801611a:	d151      	bne.n	80161c0 <_strtod_l+0x380>
 801611c:	2800      	cmp	r0, #0
 801611e:	f47f aece 	bne.w	8015ebe <_strtod_l+0x7e>
 8016122:	9a06      	ldr	r2, [sp, #24]
 8016124:	2a00      	cmp	r2, #0
 8016126:	f47f aeca 	bne.w	8015ebe <_strtod_l+0x7e>
 801612a:	9a04      	ldr	r2, [sp, #16]
 801612c:	2a00      	cmp	r2, #0
 801612e:	f47f aee4 	bne.w	8015efa <_strtod_l+0xba>
 8016132:	2b4e      	cmp	r3, #78	; 0x4e
 8016134:	d027      	beq.n	8016186 <_strtod_l+0x346>
 8016136:	dc21      	bgt.n	801617c <_strtod_l+0x33c>
 8016138:	2b49      	cmp	r3, #73	; 0x49
 801613a:	f47f aede 	bne.w	8015efa <_strtod_l+0xba>
 801613e:	49a0      	ldr	r1, [pc, #640]	; (80163c0 <_strtod_l+0x580>)
 8016140:	a81b      	add	r0, sp, #108	; 0x6c
 8016142:	f001 fe1f 	bl	8017d84 <__match>
 8016146:	2800      	cmp	r0, #0
 8016148:	f43f aed7 	beq.w	8015efa <_strtod_l+0xba>
 801614c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801614e:	499d      	ldr	r1, [pc, #628]	; (80163c4 <_strtod_l+0x584>)
 8016150:	3b01      	subs	r3, #1
 8016152:	a81b      	add	r0, sp, #108	; 0x6c
 8016154:	931b      	str	r3, [sp, #108]	; 0x6c
 8016156:	f001 fe15 	bl	8017d84 <__match>
 801615a:	b910      	cbnz	r0, 8016162 <_strtod_l+0x322>
 801615c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801615e:	3301      	adds	r3, #1
 8016160:	931b      	str	r3, [sp, #108]	; 0x6c
 8016162:	f8df b274 	ldr.w	fp, [pc, #628]	; 80163d8 <_strtod_l+0x598>
 8016166:	f04f 0a00 	mov.w	sl, #0
 801616a:	e6a8      	b.n	8015ebe <_strtod_l+0x7e>
 801616c:	210a      	movs	r1, #10
 801616e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016172:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016176:	e7b8      	b.n	80160ea <_strtod_l+0x2aa>
 8016178:	46be      	mov	lr, r7
 801617a:	e7c8      	b.n	801610e <_strtod_l+0x2ce>
 801617c:	2b69      	cmp	r3, #105	; 0x69
 801617e:	d0de      	beq.n	801613e <_strtod_l+0x2fe>
 8016180:	2b6e      	cmp	r3, #110	; 0x6e
 8016182:	f47f aeba 	bne.w	8015efa <_strtod_l+0xba>
 8016186:	4990      	ldr	r1, [pc, #576]	; (80163c8 <_strtod_l+0x588>)
 8016188:	a81b      	add	r0, sp, #108	; 0x6c
 801618a:	f001 fdfb 	bl	8017d84 <__match>
 801618e:	2800      	cmp	r0, #0
 8016190:	f43f aeb3 	beq.w	8015efa <_strtod_l+0xba>
 8016194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	2b28      	cmp	r3, #40	; 0x28
 801619a:	d10e      	bne.n	80161ba <_strtod_l+0x37a>
 801619c:	aa1e      	add	r2, sp, #120	; 0x78
 801619e:	498b      	ldr	r1, [pc, #556]	; (80163cc <_strtod_l+0x58c>)
 80161a0:	a81b      	add	r0, sp, #108	; 0x6c
 80161a2:	f001 fe03 	bl	8017dac <__hexnan>
 80161a6:	2805      	cmp	r0, #5
 80161a8:	d107      	bne.n	80161ba <_strtod_l+0x37a>
 80161aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80161ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80161b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80161b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80161b8:	e681      	b.n	8015ebe <_strtod_l+0x7e>
 80161ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80163e0 <_strtod_l+0x5a0>
 80161be:	e7d2      	b.n	8016166 <_strtod_l+0x326>
 80161c0:	ebae 0302 	sub.w	r3, lr, r2
 80161c4:	9306      	str	r3, [sp, #24]
 80161c6:	9b05      	ldr	r3, [sp, #20]
 80161c8:	9807      	ldr	r0, [sp, #28]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	bf08      	it	eq
 80161ce:	4623      	moveq	r3, r4
 80161d0:	2c10      	cmp	r4, #16
 80161d2:	9305      	str	r3, [sp, #20]
 80161d4:	46a0      	mov	r8, r4
 80161d6:	bfa8      	it	ge
 80161d8:	f04f 0810 	movge.w	r8, #16
 80161dc:	f7ea f9a2 	bl	8000524 <__aeabi_ui2d>
 80161e0:	2c09      	cmp	r4, #9
 80161e2:	4682      	mov	sl, r0
 80161e4:	468b      	mov	fp, r1
 80161e6:	dc13      	bgt.n	8016210 <_strtod_l+0x3d0>
 80161e8:	9b06      	ldr	r3, [sp, #24]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f43f ae67 	beq.w	8015ebe <_strtod_l+0x7e>
 80161f0:	9b06      	ldr	r3, [sp, #24]
 80161f2:	dd7a      	ble.n	80162ea <_strtod_l+0x4aa>
 80161f4:	2b16      	cmp	r3, #22
 80161f6:	dc61      	bgt.n	80162bc <_strtod_l+0x47c>
 80161f8:	4a75      	ldr	r2, [pc, #468]	; (80163d0 <_strtod_l+0x590>)
 80161fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80161fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8016202:	4652      	mov	r2, sl
 8016204:	465b      	mov	r3, fp
 8016206:	f7ea fa07 	bl	8000618 <__aeabi_dmul>
 801620a:	4682      	mov	sl, r0
 801620c:	468b      	mov	fp, r1
 801620e:	e656      	b.n	8015ebe <_strtod_l+0x7e>
 8016210:	4b6f      	ldr	r3, [pc, #444]	; (80163d0 <_strtod_l+0x590>)
 8016212:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016216:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801621a:	f7ea f9fd 	bl	8000618 <__aeabi_dmul>
 801621e:	4606      	mov	r6, r0
 8016220:	4628      	mov	r0, r5
 8016222:	460f      	mov	r7, r1
 8016224:	f7ea f97e 	bl	8000524 <__aeabi_ui2d>
 8016228:	4602      	mov	r2, r0
 801622a:	460b      	mov	r3, r1
 801622c:	4630      	mov	r0, r6
 801622e:	4639      	mov	r1, r7
 8016230:	f7ea f83c 	bl	80002ac <__adddf3>
 8016234:	2c0f      	cmp	r4, #15
 8016236:	4682      	mov	sl, r0
 8016238:	468b      	mov	fp, r1
 801623a:	ddd5      	ble.n	80161e8 <_strtod_l+0x3a8>
 801623c:	9b06      	ldr	r3, [sp, #24]
 801623e:	eba4 0808 	sub.w	r8, r4, r8
 8016242:	4498      	add	r8, r3
 8016244:	f1b8 0f00 	cmp.w	r8, #0
 8016248:	f340 8096 	ble.w	8016378 <_strtod_l+0x538>
 801624c:	f018 030f 	ands.w	r3, r8, #15
 8016250:	d00a      	beq.n	8016268 <_strtod_l+0x428>
 8016252:	495f      	ldr	r1, [pc, #380]	; (80163d0 <_strtod_l+0x590>)
 8016254:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016258:	4652      	mov	r2, sl
 801625a:	465b      	mov	r3, fp
 801625c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016260:	f7ea f9da 	bl	8000618 <__aeabi_dmul>
 8016264:	4682      	mov	sl, r0
 8016266:	468b      	mov	fp, r1
 8016268:	f038 080f 	bics.w	r8, r8, #15
 801626c:	d073      	beq.n	8016356 <_strtod_l+0x516>
 801626e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016272:	dd47      	ble.n	8016304 <_strtod_l+0x4c4>
 8016274:	2400      	movs	r4, #0
 8016276:	46a0      	mov	r8, r4
 8016278:	9407      	str	r4, [sp, #28]
 801627a:	9405      	str	r4, [sp, #20]
 801627c:	2322      	movs	r3, #34	; 0x22
 801627e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80163d8 <_strtod_l+0x598>
 8016282:	f8c9 3000 	str.w	r3, [r9]
 8016286:	f04f 0a00 	mov.w	sl, #0
 801628a:	9b07      	ldr	r3, [sp, #28]
 801628c:	2b00      	cmp	r3, #0
 801628e:	f43f ae16 	beq.w	8015ebe <_strtod_l+0x7e>
 8016292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016294:	4648      	mov	r0, r9
 8016296:	f001 fe75 	bl	8017f84 <_Bfree>
 801629a:	9905      	ldr	r1, [sp, #20]
 801629c:	4648      	mov	r0, r9
 801629e:	f001 fe71 	bl	8017f84 <_Bfree>
 80162a2:	4641      	mov	r1, r8
 80162a4:	4648      	mov	r0, r9
 80162a6:	f001 fe6d 	bl	8017f84 <_Bfree>
 80162aa:	9907      	ldr	r1, [sp, #28]
 80162ac:	4648      	mov	r0, r9
 80162ae:	f001 fe69 	bl	8017f84 <_Bfree>
 80162b2:	4621      	mov	r1, r4
 80162b4:	4648      	mov	r0, r9
 80162b6:	f001 fe65 	bl	8017f84 <_Bfree>
 80162ba:	e600      	b.n	8015ebe <_strtod_l+0x7e>
 80162bc:	9a06      	ldr	r2, [sp, #24]
 80162be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80162c2:	4293      	cmp	r3, r2
 80162c4:	dbba      	blt.n	801623c <_strtod_l+0x3fc>
 80162c6:	4d42      	ldr	r5, [pc, #264]	; (80163d0 <_strtod_l+0x590>)
 80162c8:	f1c4 040f 	rsb	r4, r4, #15
 80162cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80162d0:	4652      	mov	r2, sl
 80162d2:	465b      	mov	r3, fp
 80162d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162d8:	f7ea f99e 	bl	8000618 <__aeabi_dmul>
 80162dc:	9b06      	ldr	r3, [sp, #24]
 80162de:	1b1c      	subs	r4, r3, r4
 80162e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80162e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162e8:	e78d      	b.n	8016206 <_strtod_l+0x3c6>
 80162ea:	f113 0f16 	cmn.w	r3, #22
 80162ee:	dba5      	blt.n	801623c <_strtod_l+0x3fc>
 80162f0:	4a37      	ldr	r2, [pc, #220]	; (80163d0 <_strtod_l+0x590>)
 80162f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80162f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80162fa:	4650      	mov	r0, sl
 80162fc:	4659      	mov	r1, fp
 80162fe:	f7ea fab5 	bl	800086c <__aeabi_ddiv>
 8016302:	e782      	b.n	801620a <_strtod_l+0x3ca>
 8016304:	2300      	movs	r3, #0
 8016306:	4e33      	ldr	r6, [pc, #204]	; (80163d4 <_strtod_l+0x594>)
 8016308:	ea4f 1828 	mov.w	r8, r8, asr #4
 801630c:	4650      	mov	r0, sl
 801630e:	4659      	mov	r1, fp
 8016310:	461d      	mov	r5, r3
 8016312:	f1b8 0f01 	cmp.w	r8, #1
 8016316:	dc21      	bgt.n	801635c <_strtod_l+0x51c>
 8016318:	b10b      	cbz	r3, 801631e <_strtod_l+0x4de>
 801631a:	4682      	mov	sl, r0
 801631c:	468b      	mov	fp, r1
 801631e:	4b2d      	ldr	r3, [pc, #180]	; (80163d4 <_strtod_l+0x594>)
 8016320:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016328:	4652      	mov	r2, sl
 801632a:	465b      	mov	r3, fp
 801632c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016330:	f7ea f972 	bl	8000618 <__aeabi_dmul>
 8016334:	4b28      	ldr	r3, [pc, #160]	; (80163d8 <_strtod_l+0x598>)
 8016336:	460a      	mov	r2, r1
 8016338:	400b      	ands	r3, r1
 801633a:	4928      	ldr	r1, [pc, #160]	; (80163dc <_strtod_l+0x59c>)
 801633c:	428b      	cmp	r3, r1
 801633e:	4682      	mov	sl, r0
 8016340:	d898      	bhi.n	8016274 <_strtod_l+0x434>
 8016342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016346:	428b      	cmp	r3, r1
 8016348:	bf86      	itte	hi
 801634a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80163e4 <_strtod_l+0x5a4>
 801634e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016352:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016356:	2300      	movs	r3, #0
 8016358:	9304      	str	r3, [sp, #16]
 801635a:	e077      	b.n	801644c <_strtod_l+0x60c>
 801635c:	f018 0f01 	tst.w	r8, #1
 8016360:	d006      	beq.n	8016370 <_strtod_l+0x530>
 8016362:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801636a:	f7ea f955 	bl	8000618 <__aeabi_dmul>
 801636e:	2301      	movs	r3, #1
 8016370:	3501      	adds	r5, #1
 8016372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016376:	e7cc      	b.n	8016312 <_strtod_l+0x4d2>
 8016378:	d0ed      	beq.n	8016356 <_strtod_l+0x516>
 801637a:	f1c8 0800 	rsb	r8, r8, #0
 801637e:	f018 020f 	ands.w	r2, r8, #15
 8016382:	d00a      	beq.n	801639a <_strtod_l+0x55a>
 8016384:	4b12      	ldr	r3, [pc, #72]	; (80163d0 <_strtod_l+0x590>)
 8016386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801638a:	4650      	mov	r0, sl
 801638c:	4659      	mov	r1, fp
 801638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016392:	f7ea fa6b 	bl	800086c <__aeabi_ddiv>
 8016396:	4682      	mov	sl, r0
 8016398:	468b      	mov	fp, r1
 801639a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801639e:	d0da      	beq.n	8016356 <_strtod_l+0x516>
 80163a0:	f1b8 0f1f 	cmp.w	r8, #31
 80163a4:	dd20      	ble.n	80163e8 <_strtod_l+0x5a8>
 80163a6:	2400      	movs	r4, #0
 80163a8:	46a0      	mov	r8, r4
 80163aa:	9407      	str	r4, [sp, #28]
 80163ac:	9405      	str	r4, [sp, #20]
 80163ae:	2322      	movs	r3, #34	; 0x22
 80163b0:	f04f 0a00 	mov.w	sl, #0
 80163b4:	f04f 0b00 	mov.w	fp, #0
 80163b8:	f8c9 3000 	str.w	r3, [r9]
 80163bc:	e765      	b.n	801628a <_strtod_l+0x44a>
 80163be:	bf00      	nop
 80163c0:	0801bdfd 	.word	0x0801bdfd
 80163c4:	0801be8b 	.word	0x0801be8b
 80163c8:	0801be05 	.word	0x0801be05
 80163cc:	0801be48 	.word	0x0801be48
 80163d0:	0801bec8 	.word	0x0801bec8
 80163d4:	0801bea0 	.word	0x0801bea0
 80163d8:	7ff00000 	.word	0x7ff00000
 80163dc:	7ca00000 	.word	0x7ca00000
 80163e0:	fff80000 	.word	0xfff80000
 80163e4:	7fefffff 	.word	0x7fefffff
 80163e8:	f018 0310 	ands.w	r3, r8, #16
 80163ec:	bf18      	it	ne
 80163ee:	236a      	movne	r3, #106	; 0x6a
 80163f0:	4da0      	ldr	r5, [pc, #640]	; (8016674 <_strtod_l+0x834>)
 80163f2:	9304      	str	r3, [sp, #16]
 80163f4:	4650      	mov	r0, sl
 80163f6:	4659      	mov	r1, fp
 80163f8:	2300      	movs	r3, #0
 80163fa:	f1b8 0f00 	cmp.w	r8, #0
 80163fe:	f300 810a 	bgt.w	8016616 <_strtod_l+0x7d6>
 8016402:	b10b      	cbz	r3, 8016408 <_strtod_l+0x5c8>
 8016404:	4682      	mov	sl, r0
 8016406:	468b      	mov	fp, r1
 8016408:	9b04      	ldr	r3, [sp, #16]
 801640a:	b1bb      	cbz	r3, 801643c <_strtod_l+0x5fc>
 801640c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016410:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016414:	2b00      	cmp	r3, #0
 8016416:	4659      	mov	r1, fp
 8016418:	dd10      	ble.n	801643c <_strtod_l+0x5fc>
 801641a:	2b1f      	cmp	r3, #31
 801641c:	f340 8107 	ble.w	801662e <_strtod_l+0x7ee>
 8016420:	2b34      	cmp	r3, #52	; 0x34
 8016422:	bfde      	ittt	le
 8016424:	3b20      	suble	r3, #32
 8016426:	f04f 32ff 	movle.w	r2, #4294967295
 801642a:	fa02 f303 	lslle.w	r3, r2, r3
 801642e:	f04f 0a00 	mov.w	sl, #0
 8016432:	bfcc      	ite	gt
 8016434:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016438:	ea03 0b01 	andle.w	fp, r3, r1
 801643c:	2200      	movs	r2, #0
 801643e:	2300      	movs	r3, #0
 8016440:	4650      	mov	r0, sl
 8016442:	4659      	mov	r1, fp
 8016444:	f7ea fb50 	bl	8000ae8 <__aeabi_dcmpeq>
 8016448:	2800      	cmp	r0, #0
 801644a:	d1ac      	bne.n	80163a6 <_strtod_l+0x566>
 801644c:	9b07      	ldr	r3, [sp, #28]
 801644e:	9300      	str	r3, [sp, #0]
 8016450:	9a05      	ldr	r2, [sp, #20]
 8016452:	9908      	ldr	r1, [sp, #32]
 8016454:	4623      	mov	r3, r4
 8016456:	4648      	mov	r0, r9
 8016458:	f001 fde6 	bl	8018028 <__s2b>
 801645c:	9007      	str	r0, [sp, #28]
 801645e:	2800      	cmp	r0, #0
 8016460:	f43f af08 	beq.w	8016274 <_strtod_l+0x434>
 8016464:	9a06      	ldr	r2, [sp, #24]
 8016466:	9b06      	ldr	r3, [sp, #24]
 8016468:	2a00      	cmp	r2, #0
 801646a:	f1c3 0300 	rsb	r3, r3, #0
 801646e:	bfa8      	it	ge
 8016470:	2300      	movge	r3, #0
 8016472:	930e      	str	r3, [sp, #56]	; 0x38
 8016474:	2400      	movs	r4, #0
 8016476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801647a:	9316      	str	r3, [sp, #88]	; 0x58
 801647c:	46a0      	mov	r8, r4
 801647e:	9b07      	ldr	r3, [sp, #28]
 8016480:	4648      	mov	r0, r9
 8016482:	6859      	ldr	r1, [r3, #4]
 8016484:	f001 fd4a 	bl	8017f1c <_Balloc>
 8016488:	9005      	str	r0, [sp, #20]
 801648a:	2800      	cmp	r0, #0
 801648c:	f43f aef6 	beq.w	801627c <_strtod_l+0x43c>
 8016490:	9b07      	ldr	r3, [sp, #28]
 8016492:	691a      	ldr	r2, [r3, #16]
 8016494:	3202      	adds	r2, #2
 8016496:	f103 010c 	add.w	r1, r3, #12
 801649a:	0092      	lsls	r2, r2, #2
 801649c:	300c      	adds	r0, #12
 801649e:	f7fe fd47 	bl	8014f30 <memcpy>
 80164a2:	aa1e      	add	r2, sp, #120	; 0x78
 80164a4:	a91d      	add	r1, sp, #116	; 0x74
 80164a6:	ec4b ab10 	vmov	d0, sl, fp
 80164aa:	4648      	mov	r0, r9
 80164ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80164b0:	f002 f876 	bl	80185a0 <__d2b>
 80164b4:	901c      	str	r0, [sp, #112]	; 0x70
 80164b6:	2800      	cmp	r0, #0
 80164b8:	f43f aee0 	beq.w	801627c <_strtod_l+0x43c>
 80164bc:	2101      	movs	r1, #1
 80164be:	4648      	mov	r0, r9
 80164c0:	f001 fe3e 	bl	8018140 <__i2b>
 80164c4:	4680      	mov	r8, r0
 80164c6:	2800      	cmp	r0, #0
 80164c8:	f43f aed8 	beq.w	801627c <_strtod_l+0x43c>
 80164cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80164ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80164d0:	2e00      	cmp	r6, #0
 80164d2:	bfab      	itete	ge
 80164d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80164d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80164d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80164da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80164dc:	bfac      	ite	ge
 80164de:	18f7      	addge	r7, r6, r3
 80164e0:	1b9d      	sublt	r5, r3, r6
 80164e2:	9b04      	ldr	r3, [sp, #16]
 80164e4:	1af6      	subs	r6, r6, r3
 80164e6:	4416      	add	r6, r2
 80164e8:	4b63      	ldr	r3, [pc, #396]	; (8016678 <_strtod_l+0x838>)
 80164ea:	3e01      	subs	r6, #1
 80164ec:	429e      	cmp	r6, r3
 80164ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80164f2:	f280 80af 	bge.w	8016654 <_strtod_l+0x814>
 80164f6:	1b9b      	subs	r3, r3, r6
 80164f8:	2b1f      	cmp	r3, #31
 80164fa:	eba2 0203 	sub.w	r2, r2, r3
 80164fe:	f04f 0101 	mov.w	r1, #1
 8016502:	f300 809b 	bgt.w	801663c <_strtod_l+0x7fc>
 8016506:	fa01 f303 	lsl.w	r3, r1, r3
 801650a:	930f      	str	r3, [sp, #60]	; 0x3c
 801650c:	2300      	movs	r3, #0
 801650e:	930a      	str	r3, [sp, #40]	; 0x28
 8016510:	18be      	adds	r6, r7, r2
 8016512:	9b04      	ldr	r3, [sp, #16]
 8016514:	42b7      	cmp	r7, r6
 8016516:	4415      	add	r5, r2
 8016518:	441d      	add	r5, r3
 801651a:	463b      	mov	r3, r7
 801651c:	bfa8      	it	ge
 801651e:	4633      	movge	r3, r6
 8016520:	42ab      	cmp	r3, r5
 8016522:	bfa8      	it	ge
 8016524:	462b      	movge	r3, r5
 8016526:	2b00      	cmp	r3, #0
 8016528:	bfc2      	ittt	gt
 801652a:	1af6      	subgt	r6, r6, r3
 801652c:	1aed      	subgt	r5, r5, r3
 801652e:	1aff      	subgt	r7, r7, r3
 8016530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016532:	b1bb      	cbz	r3, 8016564 <_strtod_l+0x724>
 8016534:	4641      	mov	r1, r8
 8016536:	461a      	mov	r2, r3
 8016538:	4648      	mov	r0, r9
 801653a:	f001 fea1 	bl	8018280 <__pow5mult>
 801653e:	4680      	mov	r8, r0
 8016540:	2800      	cmp	r0, #0
 8016542:	f43f ae9b 	beq.w	801627c <_strtod_l+0x43c>
 8016546:	4601      	mov	r1, r0
 8016548:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801654a:	4648      	mov	r0, r9
 801654c:	f001 fe01 	bl	8018152 <__multiply>
 8016550:	900c      	str	r0, [sp, #48]	; 0x30
 8016552:	2800      	cmp	r0, #0
 8016554:	f43f ae92 	beq.w	801627c <_strtod_l+0x43c>
 8016558:	991c      	ldr	r1, [sp, #112]	; 0x70
 801655a:	4648      	mov	r0, r9
 801655c:	f001 fd12 	bl	8017f84 <_Bfree>
 8016560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016562:	931c      	str	r3, [sp, #112]	; 0x70
 8016564:	2e00      	cmp	r6, #0
 8016566:	dc7a      	bgt.n	801665e <_strtod_l+0x81e>
 8016568:	9b06      	ldr	r3, [sp, #24]
 801656a:	2b00      	cmp	r3, #0
 801656c:	dd08      	ble.n	8016580 <_strtod_l+0x740>
 801656e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016570:	9905      	ldr	r1, [sp, #20]
 8016572:	4648      	mov	r0, r9
 8016574:	f001 fe84 	bl	8018280 <__pow5mult>
 8016578:	9005      	str	r0, [sp, #20]
 801657a:	2800      	cmp	r0, #0
 801657c:	f43f ae7e 	beq.w	801627c <_strtod_l+0x43c>
 8016580:	2d00      	cmp	r5, #0
 8016582:	dd08      	ble.n	8016596 <_strtod_l+0x756>
 8016584:	462a      	mov	r2, r5
 8016586:	9905      	ldr	r1, [sp, #20]
 8016588:	4648      	mov	r0, r9
 801658a:	f001 fec7 	bl	801831c <__lshift>
 801658e:	9005      	str	r0, [sp, #20]
 8016590:	2800      	cmp	r0, #0
 8016592:	f43f ae73 	beq.w	801627c <_strtod_l+0x43c>
 8016596:	2f00      	cmp	r7, #0
 8016598:	dd08      	ble.n	80165ac <_strtod_l+0x76c>
 801659a:	4641      	mov	r1, r8
 801659c:	463a      	mov	r2, r7
 801659e:	4648      	mov	r0, r9
 80165a0:	f001 febc 	bl	801831c <__lshift>
 80165a4:	4680      	mov	r8, r0
 80165a6:	2800      	cmp	r0, #0
 80165a8:	f43f ae68 	beq.w	801627c <_strtod_l+0x43c>
 80165ac:	9a05      	ldr	r2, [sp, #20]
 80165ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165b0:	4648      	mov	r0, r9
 80165b2:	f001 ff21 	bl	80183f8 <__mdiff>
 80165b6:	4604      	mov	r4, r0
 80165b8:	2800      	cmp	r0, #0
 80165ba:	f43f ae5f 	beq.w	801627c <_strtod_l+0x43c>
 80165be:	68c3      	ldr	r3, [r0, #12]
 80165c0:	930c      	str	r3, [sp, #48]	; 0x30
 80165c2:	2300      	movs	r3, #0
 80165c4:	60c3      	str	r3, [r0, #12]
 80165c6:	4641      	mov	r1, r8
 80165c8:	f001 fefc 	bl	80183c4 <__mcmp>
 80165cc:	2800      	cmp	r0, #0
 80165ce:	da55      	bge.n	801667c <_strtod_l+0x83c>
 80165d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165d2:	b9e3      	cbnz	r3, 801660e <_strtod_l+0x7ce>
 80165d4:	f1ba 0f00 	cmp.w	sl, #0
 80165d8:	d119      	bne.n	801660e <_strtod_l+0x7ce>
 80165da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165de:	b9b3      	cbnz	r3, 801660e <_strtod_l+0x7ce>
 80165e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80165e4:	0d1b      	lsrs	r3, r3, #20
 80165e6:	051b      	lsls	r3, r3, #20
 80165e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80165ec:	d90f      	bls.n	801660e <_strtod_l+0x7ce>
 80165ee:	6963      	ldr	r3, [r4, #20]
 80165f0:	b913      	cbnz	r3, 80165f8 <_strtod_l+0x7b8>
 80165f2:	6923      	ldr	r3, [r4, #16]
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	dd0a      	ble.n	801660e <_strtod_l+0x7ce>
 80165f8:	4621      	mov	r1, r4
 80165fa:	2201      	movs	r2, #1
 80165fc:	4648      	mov	r0, r9
 80165fe:	f001 fe8d 	bl	801831c <__lshift>
 8016602:	4641      	mov	r1, r8
 8016604:	4604      	mov	r4, r0
 8016606:	f001 fedd 	bl	80183c4 <__mcmp>
 801660a:	2800      	cmp	r0, #0
 801660c:	dc67      	bgt.n	80166de <_strtod_l+0x89e>
 801660e:	9b04      	ldr	r3, [sp, #16]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d171      	bne.n	80166f8 <_strtod_l+0x8b8>
 8016614:	e63d      	b.n	8016292 <_strtod_l+0x452>
 8016616:	f018 0f01 	tst.w	r8, #1
 801661a:	d004      	beq.n	8016626 <_strtod_l+0x7e6>
 801661c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016620:	f7e9 fffa 	bl	8000618 <__aeabi_dmul>
 8016624:	2301      	movs	r3, #1
 8016626:	ea4f 0868 	mov.w	r8, r8, asr #1
 801662a:	3508      	adds	r5, #8
 801662c:	e6e5      	b.n	80163fa <_strtod_l+0x5ba>
 801662e:	f04f 32ff 	mov.w	r2, #4294967295
 8016632:	fa02 f303 	lsl.w	r3, r2, r3
 8016636:	ea03 0a0a 	and.w	sl, r3, sl
 801663a:	e6ff      	b.n	801643c <_strtod_l+0x5fc>
 801663c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016640:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016644:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016648:	36e2      	adds	r6, #226	; 0xe2
 801664a:	fa01 f306 	lsl.w	r3, r1, r6
 801664e:	930a      	str	r3, [sp, #40]	; 0x28
 8016650:	910f      	str	r1, [sp, #60]	; 0x3c
 8016652:	e75d      	b.n	8016510 <_strtod_l+0x6d0>
 8016654:	2300      	movs	r3, #0
 8016656:	930a      	str	r3, [sp, #40]	; 0x28
 8016658:	2301      	movs	r3, #1
 801665a:	930f      	str	r3, [sp, #60]	; 0x3c
 801665c:	e758      	b.n	8016510 <_strtod_l+0x6d0>
 801665e:	4632      	mov	r2, r6
 8016660:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016662:	4648      	mov	r0, r9
 8016664:	f001 fe5a 	bl	801831c <__lshift>
 8016668:	901c      	str	r0, [sp, #112]	; 0x70
 801666a:	2800      	cmp	r0, #0
 801666c:	f47f af7c 	bne.w	8016568 <_strtod_l+0x728>
 8016670:	e604      	b.n	801627c <_strtod_l+0x43c>
 8016672:	bf00      	nop
 8016674:	0801be60 	.word	0x0801be60
 8016678:	fffffc02 	.word	0xfffffc02
 801667c:	465d      	mov	r5, fp
 801667e:	f040 8086 	bne.w	801678e <_strtod_l+0x94e>
 8016682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016684:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016688:	b32a      	cbz	r2, 80166d6 <_strtod_l+0x896>
 801668a:	4aaf      	ldr	r2, [pc, #700]	; (8016948 <_strtod_l+0xb08>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d153      	bne.n	8016738 <_strtod_l+0x8f8>
 8016690:	9b04      	ldr	r3, [sp, #16]
 8016692:	4650      	mov	r0, sl
 8016694:	b1d3      	cbz	r3, 80166cc <_strtod_l+0x88c>
 8016696:	4aad      	ldr	r2, [pc, #692]	; (801694c <_strtod_l+0xb0c>)
 8016698:	402a      	ands	r2, r5
 801669a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801669e:	f04f 31ff 	mov.w	r1, #4294967295
 80166a2:	d816      	bhi.n	80166d2 <_strtod_l+0x892>
 80166a4:	0d12      	lsrs	r2, r2, #20
 80166a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80166aa:	fa01 f303 	lsl.w	r3, r1, r3
 80166ae:	4298      	cmp	r0, r3
 80166b0:	d142      	bne.n	8016738 <_strtod_l+0x8f8>
 80166b2:	4ba7      	ldr	r3, [pc, #668]	; (8016950 <_strtod_l+0xb10>)
 80166b4:	429d      	cmp	r5, r3
 80166b6:	d102      	bne.n	80166be <_strtod_l+0x87e>
 80166b8:	3001      	adds	r0, #1
 80166ba:	f43f addf 	beq.w	801627c <_strtod_l+0x43c>
 80166be:	4ba3      	ldr	r3, [pc, #652]	; (801694c <_strtod_l+0xb0c>)
 80166c0:	402b      	ands	r3, r5
 80166c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80166c6:	f04f 0a00 	mov.w	sl, #0
 80166ca:	e7a0      	b.n	801660e <_strtod_l+0x7ce>
 80166cc:	f04f 33ff 	mov.w	r3, #4294967295
 80166d0:	e7ed      	b.n	80166ae <_strtod_l+0x86e>
 80166d2:	460b      	mov	r3, r1
 80166d4:	e7eb      	b.n	80166ae <_strtod_l+0x86e>
 80166d6:	bb7b      	cbnz	r3, 8016738 <_strtod_l+0x8f8>
 80166d8:	f1ba 0f00 	cmp.w	sl, #0
 80166dc:	d12c      	bne.n	8016738 <_strtod_l+0x8f8>
 80166de:	9904      	ldr	r1, [sp, #16]
 80166e0:	4a9a      	ldr	r2, [pc, #616]	; (801694c <_strtod_l+0xb0c>)
 80166e2:	465b      	mov	r3, fp
 80166e4:	b1f1      	cbz	r1, 8016724 <_strtod_l+0x8e4>
 80166e6:	ea02 010b 	and.w	r1, r2, fp
 80166ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166ee:	dc19      	bgt.n	8016724 <_strtod_l+0x8e4>
 80166f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166f4:	f77f ae5b 	ble.w	80163ae <_strtod_l+0x56e>
 80166f8:	4a96      	ldr	r2, [pc, #600]	; (8016954 <_strtod_l+0xb14>)
 80166fa:	2300      	movs	r3, #0
 80166fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016700:	4650      	mov	r0, sl
 8016702:	4659      	mov	r1, fp
 8016704:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016708:	f7e9 ff86 	bl	8000618 <__aeabi_dmul>
 801670c:	4682      	mov	sl, r0
 801670e:	468b      	mov	fp, r1
 8016710:	2900      	cmp	r1, #0
 8016712:	f47f adbe 	bne.w	8016292 <_strtod_l+0x452>
 8016716:	2800      	cmp	r0, #0
 8016718:	f47f adbb 	bne.w	8016292 <_strtod_l+0x452>
 801671c:	2322      	movs	r3, #34	; 0x22
 801671e:	f8c9 3000 	str.w	r3, [r9]
 8016722:	e5b6      	b.n	8016292 <_strtod_l+0x452>
 8016724:	4013      	ands	r3, r2
 8016726:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801672a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801672e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016732:	f04f 3aff 	mov.w	sl, #4294967295
 8016736:	e76a      	b.n	801660e <_strtod_l+0x7ce>
 8016738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801673a:	b193      	cbz	r3, 8016762 <_strtod_l+0x922>
 801673c:	422b      	tst	r3, r5
 801673e:	f43f af66 	beq.w	801660e <_strtod_l+0x7ce>
 8016742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016744:	9a04      	ldr	r2, [sp, #16]
 8016746:	4650      	mov	r0, sl
 8016748:	4659      	mov	r1, fp
 801674a:	b173      	cbz	r3, 801676a <_strtod_l+0x92a>
 801674c:	f7ff fb5c 	bl	8015e08 <sulp>
 8016750:	4602      	mov	r2, r0
 8016752:	460b      	mov	r3, r1
 8016754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016758:	f7e9 fda8 	bl	80002ac <__adddf3>
 801675c:	4682      	mov	sl, r0
 801675e:	468b      	mov	fp, r1
 8016760:	e755      	b.n	801660e <_strtod_l+0x7ce>
 8016762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016764:	ea13 0f0a 	tst.w	r3, sl
 8016768:	e7e9      	b.n	801673e <_strtod_l+0x8fe>
 801676a:	f7ff fb4d 	bl	8015e08 <sulp>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016776:	f7e9 fd97 	bl	80002a8 <__aeabi_dsub>
 801677a:	2200      	movs	r2, #0
 801677c:	2300      	movs	r3, #0
 801677e:	4682      	mov	sl, r0
 8016780:	468b      	mov	fp, r1
 8016782:	f7ea f9b1 	bl	8000ae8 <__aeabi_dcmpeq>
 8016786:	2800      	cmp	r0, #0
 8016788:	f47f ae11 	bne.w	80163ae <_strtod_l+0x56e>
 801678c:	e73f      	b.n	801660e <_strtod_l+0x7ce>
 801678e:	4641      	mov	r1, r8
 8016790:	4620      	mov	r0, r4
 8016792:	f001 ff54 	bl	801863e <__ratio>
 8016796:	ec57 6b10 	vmov	r6, r7, d0
 801679a:	2200      	movs	r2, #0
 801679c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167a0:	ee10 0a10 	vmov	r0, s0
 80167a4:	4639      	mov	r1, r7
 80167a6:	f7ea f9b3 	bl	8000b10 <__aeabi_dcmple>
 80167aa:	2800      	cmp	r0, #0
 80167ac:	d077      	beq.n	801689e <_strtod_l+0xa5e>
 80167ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d04a      	beq.n	801684a <_strtod_l+0xa0a>
 80167b4:	4b68      	ldr	r3, [pc, #416]	; (8016958 <_strtod_l+0xb18>)
 80167b6:	2200      	movs	r2, #0
 80167b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167bc:	4f66      	ldr	r7, [pc, #408]	; (8016958 <_strtod_l+0xb18>)
 80167be:	2600      	movs	r6, #0
 80167c0:	4b62      	ldr	r3, [pc, #392]	; (801694c <_strtod_l+0xb0c>)
 80167c2:	402b      	ands	r3, r5
 80167c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80167c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167c8:	4b64      	ldr	r3, [pc, #400]	; (801695c <_strtod_l+0xb1c>)
 80167ca:	429a      	cmp	r2, r3
 80167cc:	f040 80ce 	bne.w	801696c <_strtod_l+0xb2c>
 80167d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80167d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80167dc:	ec4b ab10 	vmov	d0, sl, fp
 80167e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80167e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167e8:	f001 fe64 	bl	80184b4 <__ulp>
 80167ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167f0:	ec53 2b10 	vmov	r2, r3, d0
 80167f4:	f7e9 ff10 	bl	8000618 <__aeabi_dmul>
 80167f8:	4652      	mov	r2, sl
 80167fa:	465b      	mov	r3, fp
 80167fc:	f7e9 fd56 	bl	80002ac <__adddf3>
 8016800:	460b      	mov	r3, r1
 8016802:	4952      	ldr	r1, [pc, #328]	; (801694c <_strtod_l+0xb0c>)
 8016804:	4a56      	ldr	r2, [pc, #344]	; (8016960 <_strtod_l+0xb20>)
 8016806:	4019      	ands	r1, r3
 8016808:	4291      	cmp	r1, r2
 801680a:	4682      	mov	sl, r0
 801680c:	d95b      	bls.n	80168c6 <_strtod_l+0xa86>
 801680e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016810:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016814:	4293      	cmp	r3, r2
 8016816:	d103      	bne.n	8016820 <_strtod_l+0x9e0>
 8016818:	9b08      	ldr	r3, [sp, #32]
 801681a:	3301      	adds	r3, #1
 801681c:	f43f ad2e 	beq.w	801627c <_strtod_l+0x43c>
 8016820:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016950 <_strtod_l+0xb10>
 8016824:	f04f 3aff 	mov.w	sl, #4294967295
 8016828:	991c      	ldr	r1, [sp, #112]	; 0x70
 801682a:	4648      	mov	r0, r9
 801682c:	f001 fbaa 	bl	8017f84 <_Bfree>
 8016830:	9905      	ldr	r1, [sp, #20]
 8016832:	4648      	mov	r0, r9
 8016834:	f001 fba6 	bl	8017f84 <_Bfree>
 8016838:	4641      	mov	r1, r8
 801683a:	4648      	mov	r0, r9
 801683c:	f001 fba2 	bl	8017f84 <_Bfree>
 8016840:	4621      	mov	r1, r4
 8016842:	4648      	mov	r0, r9
 8016844:	f001 fb9e 	bl	8017f84 <_Bfree>
 8016848:	e619      	b.n	801647e <_strtod_l+0x63e>
 801684a:	f1ba 0f00 	cmp.w	sl, #0
 801684e:	d11a      	bne.n	8016886 <_strtod_l+0xa46>
 8016850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016854:	b9eb      	cbnz	r3, 8016892 <_strtod_l+0xa52>
 8016856:	2200      	movs	r2, #0
 8016858:	4b3f      	ldr	r3, [pc, #252]	; (8016958 <_strtod_l+0xb18>)
 801685a:	4630      	mov	r0, r6
 801685c:	4639      	mov	r1, r7
 801685e:	f7ea f94d 	bl	8000afc <__aeabi_dcmplt>
 8016862:	b9c8      	cbnz	r0, 8016898 <_strtod_l+0xa58>
 8016864:	4630      	mov	r0, r6
 8016866:	4639      	mov	r1, r7
 8016868:	2200      	movs	r2, #0
 801686a:	4b3e      	ldr	r3, [pc, #248]	; (8016964 <_strtod_l+0xb24>)
 801686c:	f7e9 fed4 	bl	8000618 <__aeabi_dmul>
 8016870:	4606      	mov	r6, r0
 8016872:	460f      	mov	r7, r1
 8016874:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016878:	9618      	str	r6, [sp, #96]	; 0x60
 801687a:	9319      	str	r3, [sp, #100]	; 0x64
 801687c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016884:	e79c      	b.n	80167c0 <_strtod_l+0x980>
 8016886:	f1ba 0f01 	cmp.w	sl, #1
 801688a:	d102      	bne.n	8016892 <_strtod_l+0xa52>
 801688c:	2d00      	cmp	r5, #0
 801688e:	f43f ad8e 	beq.w	80163ae <_strtod_l+0x56e>
 8016892:	2200      	movs	r2, #0
 8016894:	4b34      	ldr	r3, [pc, #208]	; (8016968 <_strtod_l+0xb28>)
 8016896:	e78f      	b.n	80167b8 <_strtod_l+0x978>
 8016898:	2600      	movs	r6, #0
 801689a:	4f32      	ldr	r7, [pc, #200]	; (8016964 <_strtod_l+0xb24>)
 801689c:	e7ea      	b.n	8016874 <_strtod_l+0xa34>
 801689e:	4b31      	ldr	r3, [pc, #196]	; (8016964 <_strtod_l+0xb24>)
 80168a0:	4630      	mov	r0, r6
 80168a2:	4639      	mov	r1, r7
 80168a4:	2200      	movs	r2, #0
 80168a6:	f7e9 feb7 	bl	8000618 <__aeabi_dmul>
 80168aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168ac:	4606      	mov	r6, r0
 80168ae:	460f      	mov	r7, r1
 80168b0:	b933      	cbnz	r3, 80168c0 <_strtod_l+0xa80>
 80168b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168b6:	9010      	str	r0, [sp, #64]	; 0x40
 80168b8:	9311      	str	r3, [sp, #68]	; 0x44
 80168ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168be:	e7df      	b.n	8016880 <_strtod_l+0xa40>
 80168c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80168c4:	e7f9      	b.n	80168ba <_strtod_l+0xa7a>
 80168c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80168ca:	9b04      	ldr	r3, [sp, #16]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d1ab      	bne.n	8016828 <_strtod_l+0x9e8>
 80168d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168d4:	0d1b      	lsrs	r3, r3, #20
 80168d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168d8:	051b      	lsls	r3, r3, #20
 80168da:	429a      	cmp	r2, r3
 80168dc:	465d      	mov	r5, fp
 80168de:	d1a3      	bne.n	8016828 <_strtod_l+0x9e8>
 80168e0:	4639      	mov	r1, r7
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ea f948 	bl	8000b78 <__aeabi_d2iz>
 80168e8:	f7e9 fe2c 	bl	8000544 <__aeabi_i2d>
 80168ec:	460b      	mov	r3, r1
 80168ee:	4602      	mov	r2, r0
 80168f0:	4639      	mov	r1, r7
 80168f2:	4630      	mov	r0, r6
 80168f4:	f7e9 fcd8 	bl	80002a8 <__aeabi_dsub>
 80168f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168fa:	4606      	mov	r6, r0
 80168fc:	460f      	mov	r7, r1
 80168fe:	b933      	cbnz	r3, 801690e <_strtod_l+0xace>
 8016900:	f1ba 0f00 	cmp.w	sl, #0
 8016904:	d103      	bne.n	801690e <_strtod_l+0xace>
 8016906:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801690a:	2d00      	cmp	r5, #0
 801690c:	d06d      	beq.n	80169ea <_strtod_l+0xbaa>
 801690e:	a30a      	add	r3, pc, #40	; (adr r3, 8016938 <_strtod_l+0xaf8>)
 8016910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016914:	4630      	mov	r0, r6
 8016916:	4639      	mov	r1, r7
 8016918:	f7ea f8f0 	bl	8000afc <__aeabi_dcmplt>
 801691c:	2800      	cmp	r0, #0
 801691e:	f47f acb8 	bne.w	8016292 <_strtod_l+0x452>
 8016922:	a307      	add	r3, pc, #28	; (adr r3, 8016940 <_strtod_l+0xb00>)
 8016924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016928:	4630      	mov	r0, r6
 801692a:	4639      	mov	r1, r7
 801692c:	f7ea f904 	bl	8000b38 <__aeabi_dcmpgt>
 8016930:	2800      	cmp	r0, #0
 8016932:	f43f af79 	beq.w	8016828 <_strtod_l+0x9e8>
 8016936:	e4ac      	b.n	8016292 <_strtod_l+0x452>
 8016938:	94a03595 	.word	0x94a03595
 801693c:	3fdfffff 	.word	0x3fdfffff
 8016940:	35afe535 	.word	0x35afe535
 8016944:	3fe00000 	.word	0x3fe00000
 8016948:	000fffff 	.word	0x000fffff
 801694c:	7ff00000 	.word	0x7ff00000
 8016950:	7fefffff 	.word	0x7fefffff
 8016954:	39500000 	.word	0x39500000
 8016958:	3ff00000 	.word	0x3ff00000
 801695c:	7fe00000 	.word	0x7fe00000
 8016960:	7c9fffff 	.word	0x7c9fffff
 8016964:	3fe00000 	.word	0x3fe00000
 8016968:	bff00000 	.word	0xbff00000
 801696c:	9b04      	ldr	r3, [sp, #16]
 801696e:	b333      	cbz	r3, 80169be <_strtod_l+0xb7e>
 8016970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016976:	d822      	bhi.n	80169be <_strtod_l+0xb7e>
 8016978:	a327      	add	r3, pc, #156	; (adr r3, 8016a18 <_strtod_l+0xbd8>)
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	4630      	mov	r0, r6
 8016980:	4639      	mov	r1, r7
 8016982:	f7ea f8c5 	bl	8000b10 <__aeabi_dcmple>
 8016986:	b1a0      	cbz	r0, 80169b2 <_strtod_l+0xb72>
 8016988:	4639      	mov	r1, r7
 801698a:	4630      	mov	r0, r6
 801698c:	f7ea f91c 	bl	8000bc8 <__aeabi_d2uiz>
 8016990:	2800      	cmp	r0, #0
 8016992:	bf08      	it	eq
 8016994:	2001      	moveq	r0, #1
 8016996:	f7e9 fdc5 	bl	8000524 <__aeabi_ui2d>
 801699a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801699c:	4606      	mov	r6, r0
 801699e:	460f      	mov	r7, r1
 80169a0:	bb03      	cbnz	r3, 80169e4 <_strtod_l+0xba4>
 80169a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169a6:	9012      	str	r0, [sp, #72]	; 0x48
 80169a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80169aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80169ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80169ba:	1a9b      	subs	r3, r3, r2
 80169bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80169be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80169c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80169c6:	f001 fd75 	bl	80184b4 <__ulp>
 80169ca:	4650      	mov	r0, sl
 80169cc:	ec53 2b10 	vmov	r2, r3, d0
 80169d0:	4659      	mov	r1, fp
 80169d2:	f7e9 fe21 	bl	8000618 <__aeabi_dmul>
 80169d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169da:	f7e9 fc67 	bl	80002ac <__adddf3>
 80169de:	4682      	mov	sl, r0
 80169e0:	468b      	mov	fp, r1
 80169e2:	e772      	b.n	80168ca <_strtod_l+0xa8a>
 80169e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80169e8:	e7df      	b.n	80169aa <_strtod_l+0xb6a>
 80169ea:	a30d      	add	r3, pc, #52	; (adr r3, 8016a20 <_strtod_l+0xbe0>)
 80169ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f0:	f7ea f884 	bl	8000afc <__aeabi_dcmplt>
 80169f4:	e79c      	b.n	8016930 <_strtod_l+0xaf0>
 80169f6:	2300      	movs	r3, #0
 80169f8:	930d      	str	r3, [sp, #52]	; 0x34
 80169fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80169fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169fe:	6013      	str	r3, [r2, #0]
 8016a00:	f7ff ba61 	b.w	8015ec6 <_strtod_l+0x86>
 8016a04:	2b65      	cmp	r3, #101	; 0x65
 8016a06:	f04f 0200 	mov.w	r2, #0
 8016a0a:	f43f ab4e 	beq.w	80160aa <_strtod_l+0x26a>
 8016a0e:	2101      	movs	r1, #1
 8016a10:	4614      	mov	r4, r2
 8016a12:	9104      	str	r1, [sp, #16]
 8016a14:	f7ff bacb 	b.w	8015fae <_strtod_l+0x16e>
 8016a18:	ffc00000 	.word	0xffc00000
 8016a1c:	41dfffff 	.word	0x41dfffff
 8016a20:	94a03595 	.word	0x94a03595
 8016a24:	3fcfffff 	.word	0x3fcfffff

08016a28 <_strtod_r>:
 8016a28:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <_strtod_r+0x18>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	b410      	push	{r4}
 8016a2e:	6a1b      	ldr	r3, [r3, #32]
 8016a30:	4c04      	ldr	r4, [pc, #16]	; (8016a44 <_strtod_r+0x1c>)
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	bf08      	it	eq
 8016a36:	4623      	moveq	r3, r4
 8016a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a3c:	f7ff ba00 	b.w	8015e40 <_strtod_l>
 8016a40:	200001d4 	.word	0x200001d4
 8016a44:	20000238 	.word	0x20000238

08016a48 <strtod>:
 8016a48:	4b07      	ldr	r3, [pc, #28]	; (8016a68 <strtod+0x20>)
 8016a4a:	4a08      	ldr	r2, [pc, #32]	; (8016a6c <strtod+0x24>)
 8016a4c:	b410      	push	{r4}
 8016a4e:	681c      	ldr	r4, [r3, #0]
 8016a50:	6a23      	ldr	r3, [r4, #32]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	bf08      	it	eq
 8016a56:	4613      	moveq	r3, r2
 8016a58:	460a      	mov	r2, r1
 8016a5a:	4601      	mov	r1, r0
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a62:	f7ff b9ed 	b.w	8015e40 <_strtod_l>
 8016a66:	bf00      	nop
 8016a68:	200001d4 	.word	0x200001d4
 8016a6c:	20000238 	.word	0x20000238

08016a70 <_strtol_l.isra.0>:
 8016a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a74:	4680      	mov	r8, r0
 8016a76:	4689      	mov	r9, r1
 8016a78:	4692      	mov	sl, r2
 8016a7a:	461e      	mov	r6, r3
 8016a7c:	460f      	mov	r7, r1
 8016a7e:	463d      	mov	r5, r7
 8016a80:	9808      	ldr	r0, [sp, #32]
 8016a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a86:	f001 fa21 	bl	8017ecc <__locale_ctype_ptr_l>
 8016a8a:	4420      	add	r0, r4
 8016a8c:	7843      	ldrb	r3, [r0, #1]
 8016a8e:	f013 0308 	ands.w	r3, r3, #8
 8016a92:	d132      	bne.n	8016afa <_strtol_l.isra.0+0x8a>
 8016a94:	2c2d      	cmp	r4, #45	; 0x2d
 8016a96:	d132      	bne.n	8016afe <_strtol_l.isra.0+0x8e>
 8016a98:	787c      	ldrb	r4, [r7, #1]
 8016a9a:	1cbd      	adds	r5, r7, #2
 8016a9c:	2201      	movs	r2, #1
 8016a9e:	2e00      	cmp	r6, #0
 8016aa0:	d05d      	beq.n	8016b5e <_strtol_l.isra.0+0xee>
 8016aa2:	2e10      	cmp	r6, #16
 8016aa4:	d109      	bne.n	8016aba <_strtol_l.isra.0+0x4a>
 8016aa6:	2c30      	cmp	r4, #48	; 0x30
 8016aa8:	d107      	bne.n	8016aba <_strtol_l.isra.0+0x4a>
 8016aaa:	782b      	ldrb	r3, [r5, #0]
 8016aac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ab0:	2b58      	cmp	r3, #88	; 0x58
 8016ab2:	d14f      	bne.n	8016b54 <_strtol_l.isra.0+0xe4>
 8016ab4:	786c      	ldrb	r4, [r5, #1]
 8016ab6:	2610      	movs	r6, #16
 8016ab8:	3502      	adds	r5, #2
 8016aba:	2a00      	cmp	r2, #0
 8016abc:	bf14      	ite	ne
 8016abe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016ac2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016ac6:	2700      	movs	r7, #0
 8016ac8:	fbb1 fcf6 	udiv	ip, r1, r6
 8016acc:	4638      	mov	r0, r7
 8016ace:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016ad2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016ad6:	2b09      	cmp	r3, #9
 8016ad8:	d817      	bhi.n	8016b0a <_strtol_l.isra.0+0x9a>
 8016ada:	461c      	mov	r4, r3
 8016adc:	42a6      	cmp	r6, r4
 8016ade:	dd23      	ble.n	8016b28 <_strtol_l.isra.0+0xb8>
 8016ae0:	1c7b      	adds	r3, r7, #1
 8016ae2:	d007      	beq.n	8016af4 <_strtol_l.isra.0+0x84>
 8016ae4:	4584      	cmp	ip, r0
 8016ae6:	d31c      	bcc.n	8016b22 <_strtol_l.isra.0+0xb2>
 8016ae8:	d101      	bne.n	8016aee <_strtol_l.isra.0+0x7e>
 8016aea:	45a6      	cmp	lr, r4
 8016aec:	db19      	blt.n	8016b22 <_strtol_l.isra.0+0xb2>
 8016aee:	fb00 4006 	mla	r0, r0, r6, r4
 8016af2:	2701      	movs	r7, #1
 8016af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016af8:	e7eb      	b.n	8016ad2 <_strtol_l.isra.0+0x62>
 8016afa:	462f      	mov	r7, r5
 8016afc:	e7bf      	b.n	8016a7e <_strtol_l.isra.0+0xe>
 8016afe:	2c2b      	cmp	r4, #43	; 0x2b
 8016b00:	bf04      	itt	eq
 8016b02:	1cbd      	addeq	r5, r7, #2
 8016b04:	787c      	ldrbeq	r4, [r7, #1]
 8016b06:	461a      	mov	r2, r3
 8016b08:	e7c9      	b.n	8016a9e <_strtol_l.isra.0+0x2e>
 8016b0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016b0e:	2b19      	cmp	r3, #25
 8016b10:	d801      	bhi.n	8016b16 <_strtol_l.isra.0+0xa6>
 8016b12:	3c37      	subs	r4, #55	; 0x37
 8016b14:	e7e2      	b.n	8016adc <_strtol_l.isra.0+0x6c>
 8016b16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016b1a:	2b19      	cmp	r3, #25
 8016b1c:	d804      	bhi.n	8016b28 <_strtol_l.isra.0+0xb8>
 8016b1e:	3c57      	subs	r4, #87	; 0x57
 8016b20:	e7dc      	b.n	8016adc <_strtol_l.isra.0+0x6c>
 8016b22:	f04f 37ff 	mov.w	r7, #4294967295
 8016b26:	e7e5      	b.n	8016af4 <_strtol_l.isra.0+0x84>
 8016b28:	1c7b      	adds	r3, r7, #1
 8016b2a:	d108      	bne.n	8016b3e <_strtol_l.isra.0+0xce>
 8016b2c:	2322      	movs	r3, #34	; 0x22
 8016b2e:	f8c8 3000 	str.w	r3, [r8]
 8016b32:	4608      	mov	r0, r1
 8016b34:	f1ba 0f00 	cmp.w	sl, #0
 8016b38:	d107      	bne.n	8016b4a <_strtol_l.isra.0+0xda>
 8016b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b3e:	b102      	cbz	r2, 8016b42 <_strtol_l.isra.0+0xd2>
 8016b40:	4240      	negs	r0, r0
 8016b42:	f1ba 0f00 	cmp.w	sl, #0
 8016b46:	d0f8      	beq.n	8016b3a <_strtol_l.isra.0+0xca>
 8016b48:	b10f      	cbz	r7, 8016b4e <_strtol_l.isra.0+0xde>
 8016b4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b4e:	f8ca 9000 	str.w	r9, [sl]
 8016b52:	e7f2      	b.n	8016b3a <_strtol_l.isra.0+0xca>
 8016b54:	2430      	movs	r4, #48	; 0x30
 8016b56:	2e00      	cmp	r6, #0
 8016b58:	d1af      	bne.n	8016aba <_strtol_l.isra.0+0x4a>
 8016b5a:	2608      	movs	r6, #8
 8016b5c:	e7ad      	b.n	8016aba <_strtol_l.isra.0+0x4a>
 8016b5e:	2c30      	cmp	r4, #48	; 0x30
 8016b60:	d0a3      	beq.n	8016aaa <_strtol_l.isra.0+0x3a>
 8016b62:	260a      	movs	r6, #10
 8016b64:	e7a9      	b.n	8016aba <_strtol_l.isra.0+0x4a>
	...

08016b68 <_strtol_r>:
 8016b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b6a:	4c06      	ldr	r4, [pc, #24]	; (8016b84 <_strtol_r+0x1c>)
 8016b6c:	4d06      	ldr	r5, [pc, #24]	; (8016b88 <_strtol_r+0x20>)
 8016b6e:	6824      	ldr	r4, [r4, #0]
 8016b70:	6a24      	ldr	r4, [r4, #32]
 8016b72:	2c00      	cmp	r4, #0
 8016b74:	bf08      	it	eq
 8016b76:	462c      	moveq	r4, r5
 8016b78:	9400      	str	r4, [sp, #0]
 8016b7a:	f7ff ff79 	bl	8016a70 <_strtol_l.isra.0>
 8016b7e:	b003      	add	sp, #12
 8016b80:	bd30      	pop	{r4, r5, pc}
 8016b82:	bf00      	nop
 8016b84:	200001d4 	.word	0x200001d4
 8016b88:	20000238 	.word	0x20000238

08016b8c <strtol>:
 8016b8c:	4b08      	ldr	r3, [pc, #32]	; (8016bb0 <strtol+0x24>)
 8016b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b90:	681c      	ldr	r4, [r3, #0]
 8016b92:	4d08      	ldr	r5, [pc, #32]	; (8016bb4 <strtol+0x28>)
 8016b94:	6a23      	ldr	r3, [r4, #32]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	bf08      	it	eq
 8016b9a:	462b      	moveq	r3, r5
 8016b9c:	9300      	str	r3, [sp, #0]
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	460a      	mov	r2, r1
 8016ba2:	4601      	mov	r1, r0
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f7ff ff63 	bl	8016a70 <_strtol_l.isra.0>
 8016baa:	b003      	add	sp, #12
 8016bac:	bd30      	pop	{r4, r5, pc}
 8016bae:	bf00      	nop
 8016bb0:	200001d4 	.word	0x200001d4
 8016bb4:	20000238 	.word	0x20000238

08016bb8 <_vsiprintf_r>:
 8016bb8:	b500      	push	{lr}
 8016bba:	b09b      	sub	sp, #108	; 0x6c
 8016bbc:	9100      	str	r1, [sp, #0]
 8016bbe:	9104      	str	r1, [sp, #16]
 8016bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bc4:	9105      	str	r1, [sp, #20]
 8016bc6:	9102      	str	r1, [sp, #8]
 8016bc8:	4905      	ldr	r1, [pc, #20]	; (8016be0 <_vsiprintf_r+0x28>)
 8016bca:	9103      	str	r1, [sp, #12]
 8016bcc:	4669      	mov	r1, sp
 8016bce:	f001 fe0d 	bl	80187ec <_svfiprintf_r>
 8016bd2:	9b00      	ldr	r3, [sp, #0]
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	701a      	strb	r2, [r3, #0]
 8016bd8:	b01b      	add	sp, #108	; 0x6c
 8016bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bde:	bf00      	nop
 8016be0:	ffff0208 	.word	0xffff0208

08016be4 <vsiprintf>:
 8016be4:	4613      	mov	r3, r2
 8016be6:	460a      	mov	r2, r1
 8016be8:	4601      	mov	r1, r0
 8016bea:	4802      	ldr	r0, [pc, #8]	; (8016bf4 <vsiprintf+0x10>)
 8016bec:	6800      	ldr	r0, [r0, #0]
 8016bee:	f7ff bfe3 	b.w	8016bb8 <_vsiprintf_r>
 8016bf2:	bf00      	nop
 8016bf4:	200001d4 	.word	0x200001d4

08016bf8 <quorem>:
 8016bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bfc:	6903      	ldr	r3, [r0, #16]
 8016bfe:	690c      	ldr	r4, [r1, #16]
 8016c00:	42a3      	cmp	r3, r4
 8016c02:	4680      	mov	r8, r0
 8016c04:	f2c0 8082 	blt.w	8016d0c <quorem+0x114>
 8016c08:	3c01      	subs	r4, #1
 8016c0a:	f101 0714 	add.w	r7, r1, #20
 8016c0e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016c12:	f100 0614 	add.w	r6, r0, #20
 8016c16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016c1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016c1e:	eb06 030c 	add.w	r3, r6, ip
 8016c22:	3501      	adds	r5, #1
 8016c24:	eb07 090c 	add.w	r9, r7, ip
 8016c28:	9301      	str	r3, [sp, #4]
 8016c2a:	fbb0 f5f5 	udiv	r5, r0, r5
 8016c2e:	b395      	cbz	r5, 8016c96 <quorem+0x9e>
 8016c30:	f04f 0a00 	mov.w	sl, #0
 8016c34:	4638      	mov	r0, r7
 8016c36:	46b6      	mov	lr, r6
 8016c38:	46d3      	mov	fp, sl
 8016c3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c3e:	b293      	uxth	r3, r2
 8016c40:	fb05 a303 	mla	r3, r5, r3, sl
 8016c44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	ebab 0303 	sub.w	r3, fp, r3
 8016c4e:	0c12      	lsrs	r2, r2, #16
 8016c50:	f8de b000 	ldr.w	fp, [lr]
 8016c54:	fb05 a202 	mla	r2, r5, r2, sl
 8016c58:	fa13 f38b 	uxtah	r3, r3, fp
 8016c5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016c60:	fa1f fb82 	uxth.w	fp, r2
 8016c64:	f8de 2000 	ldr.w	r2, [lr]
 8016c68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016c6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c76:	4581      	cmp	r9, r0
 8016c78:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016c7c:	f84e 3b04 	str.w	r3, [lr], #4
 8016c80:	d2db      	bcs.n	8016c3a <quorem+0x42>
 8016c82:	f856 300c 	ldr.w	r3, [r6, ip]
 8016c86:	b933      	cbnz	r3, 8016c96 <quorem+0x9e>
 8016c88:	9b01      	ldr	r3, [sp, #4]
 8016c8a:	3b04      	subs	r3, #4
 8016c8c:	429e      	cmp	r6, r3
 8016c8e:	461a      	mov	r2, r3
 8016c90:	d330      	bcc.n	8016cf4 <quorem+0xfc>
 8016c92:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c96:	4640      	mov	r0, r8
 8016c98:	f001 fb94 	bl	80183c4 <__mcmp>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	db25      	blt.n	8016cec <quorem+0xf4>
 8016ca0:	3501      	adds	r5, #1
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f04f 0c00 	mov.w	ip, #0
 8016ca8:	f857 2b04 	ldr.w	r2, [r7], #4
 8016cac:	f8d0 e000 	ldr.w	lr, [r0]
 8016cb0:	b293      	uxth	r3, r2
 8016cb2:	ebac 0303 	sub.w	r3, ip, r3
 8016cb6:	0c12      	lsrs	r2, r2, #16
 8016cb8:	fa13 f38e 	uxtah	r3, r3, lr
 8016cbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cca:	45b9      	cmp	r9, r7
 8016ccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016cd0:	f840 3b04 	str.w	r3, [r0], #4
 8016cd4:	d2e8      	bcs.n	8016ca8 <quorem+0xb0>
 8016cd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016cda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016cde:	b92a      	cbnz	r2, 8016cec <quorem+0xf4>
 8016ce0:	3b04      	subs	r3, #4
 8016ce2:	429e      	cmp	r6, r3
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	d30b      	bcc.n	8016d00 <quorem+0x108>
 8016ce8:	f8c8 4010 	str.w	r4, [r8, #16]
 8016cec:	4628      	mov	r0, r5
 8016cee:	b003      	add	sp, #12
 8016cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf4:	6812      	ldr	r2, [r2, #0]
 8016cf6:	3b04      	subs	r3, #4
 8016cf8:	2a00      	cmp	r2, #0
 8016cfa:	d1ca      	bne.n	8016c92 <quorem+0x9a>
 8016cfc:	3c01      	subs	r4, #1
 8016cfe:	e7c5      	b.n	8016c8c <quorem+0x94>
 8016d00:	6812      	ldr	r2, [r2, #0]
 8016d02:	3b04      	subs	r3, #4
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	d1ef      	bne.n	8016ce8 <quorem+0xf0>
 8016d08:	3c01      	subs	r4, #1
 8016d0a:	e7ea      	b.n	8016ce2 <quorem+0xea>
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	e7ee      	b.n	8016cee <quorem+0xf6>

08016d10 <_dtoa_r>:
 8016d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d14:	ec57 6b10 	vmov	r6, r7, d0
 8016d18:	b097      	sub	sp, #92	; 0x5c
 8016d1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d1c:	9106      	str	r1, [sp, #24]
 8016d1e:	4604      	mov	r4, r0
 8016d20:	920b      	str	r2, [sp, #44]	; 0x2c
 8016d22:	9312      	str	r3, [sp, #72]	; 0x48
 8016d24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d28:	e9cd 6700 	strd	r6, r7, [sp]
 8016d2c:	b93d      	cbnz	r5, 8016d3e <_dtoa_r+0x2e>
 8016d2e:	2010      	movs	r0, #16
 8016d30:	f7fe f8ee 	bl	8014f10 <malloc>
 8016d34:	6260      	str	r0, [r4, #36]	; 0x24
 8016d36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d3a:	6005      	str	r5, [r0, #0]
 8016d3c:	60c5      	str	r5, [r0, #12]
 8016d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d40:	6819      	ldr	r1, [r3, #0]
 8016d42:	b151      	cbz	r1, 8016d5a <_dtoa_r+0x4a>
 8016d44:	685a      	ldr	r2, [r3, #4]
 8016d46:	604a      	str	r2, [r1, #4]
 8016d48:	2301      	movs	r3, #1
 8016d4a:	4093      	lsls	r3, r2
 8016d4c:	608b      	str	r3, [r1, #8]
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f001 f918 	bl	8017f84 <_Bfree>
 8016d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d56:	2200      	movs	r2, #0
 8016d58:	601a      	str	r2, [r3, #0]
 8016d5a:	1e3b      	subs	r3, r7, #0
 8016d5c:	bfbb      	ittet	lt
 8016d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d62:	9301      	strlt	r3, [sp, #4]
 8016d64:	2300      	movge	r3, #0
 8016d66:	2201      	movlt	r2, #1
 8016d68:	bfac      	ite	ge
 8016d6a:	f8c8 3000 	strge.w	r3, [r8]
 8016d6e:	f8c8 2000 	strlt.w	r2, [r8]
 8016d72:	4baf      	ldr	r3, [pc, #700]	; (8017030 <_dtoa_r+0x320>)
 8016d74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d78:	ea33 0308 	bics.w	r3, r3, r8
 8016d7c:	d114      	bne.n	8016da8 <_dtoa_r+0x98>
 8016d7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8016d84:	6013      	str	r3, [r2, #0]
 8016d86:	9b00      	ldr	r3, [sp, #0]
 8016d88:	b923      	cbnz	r3, 8016d94 <_dtoa_r+0x84>
 8016d8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	f000 8542 	beq.w	8017818 <_dtoa_r+0xb08>
 8016d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017044 <_dtoa_r+0x334>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f000 8544 	beq.w	8017828 <_dtoa_r+0xb18>
 8016da0:	f10b 0303 	add.w	r3, fp, #3
 8016da4:	f000 bd3e 	b.w	8017824 <_dtoa_r+0xb14>
 8016da8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016dac:	2200      	movs	r2, #0
 8016dae:	2300      	movs	r3, #0
 8016db0:	4630      	mov	r0, r6
 8016db2:	4639      	mov	r1, r7
 8016db4:	f7e9 fe98 	bl	8000ae8 <__aeabi_dcmpeq>
 8016db8:	4681      	mov	r9, r0
 8016dba:	b168      	cbz	r0, 8016dd8 <_dtoa_r+0xc8>
 8016dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	6013      	str	r3, [r2, #0]
 8016dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	f000 8524 	beq.w	8017812 <_dtoa_r+0xb02>
 8016dca:	4b9a      	ldr	r3, [pc, #616]	; (8017034 <_dtoa_r+0x324>)
 8016dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dce:	f103 3bff 	add.w	fp, r3, #4294967295
 8016dd2:	6013      	str	r3, [r2, #0]
 8016dd4:	f000 bd28 	b.w	8017828 <_dtoa_r+0xb18>
 8016dd8:	aa14      	add	r2, sp, #80	; 0x50
 8016dda:	a915      	add	r1, sp, #84	; 0x54
 8016ddc:	ec47 6b10 	vmov	d0, r6, r7
 8016de0:	4620      	mov	r0, r4
 8016de2:	f001 fbdd 	bl	80185a0 <__d2b>
 8016de6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016dea:	9004      	str	r0, [sp, #16]
 8016dec:	2d00      	cmp	r5, #0
 8016dee:	d07c      	beq.n	8016eea <_dtoa_r+0x1da>
 8016df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016df4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016df8:	46b2      	mov	sl, r6
 8016dfa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016e02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016e06:	2200      	movs	r2, #0
 8016e08:	4b8b      	ldr	r3, [pc, #556]	; (8017038 <_dtoa_r+0x328>)
 8016e0a:	4650      	mov	r0, sl
 8016e0c:	4659      	mov	r1, fp
 8016e0e:	f7e9 fa4b 	bl	80002a8 <__aeabi_dsub>
 8016e12:	a381      	add	r3, pc, #516	; (adr r3, 8017018 <_dtoa_r+0x308>)
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	f7e9 fbfe 	bl	8000618 <__aeabi_dmul>
 8016e1c:	a380      	add	r3, pc, #512	; (adr r3, 8017020 <_dtoa_r+0x310>)
 8016e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e22:	f7e9 fa43 	bl	80002ac <__adddf3>
 8016e26:	4606      	mov	r6, r0
 8016e28:	4628      	mov	r0, r5
 8016e2a:	460f      	mov	r7, r1
 8016e2c:	f7e9 fb8a 	bl	8000544 <__aeabi_i2d>
 8016e30:	a37d      	add	r3, pc, #500	; (adr r3, 8017028 <_dtoa_r+0x318>)
 8016e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e36:	f7e9 fbef 	bl	8000618 <__aeabi_dmul>
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	460b      	mov	r3, r1
 8016e3e:	4630      	mov	r0, r6
 8016e40:	4639      	mov	r1, r7
 8016e42:	f7e9 fa33 	bl	80002ac <__adddf3>
 8016e46:	4606      	mov	r6, r0
 8016e48:	460f      	mov	r7, r1
 8016e4a:	f7e9 fe95 	bl	8000b78 <__aeabi_d2iz>
 8016e4e:	2200      	movs	r2, #0
 8016e50:	4682      	mov	sl, r0
 8016e52:	2300      	movs	r3, #0
 8016e54:	4630      	mov	r0, r6
 8016e56:	4639      	mov	r1, r7
 8016e58:	f7e9 fe50 	bl	8000afc <__aeabi_dcmplt>
 8016e5c:	b148      	cbz	r0, 8016e72 <_dtoa_r+0x162>
 8016e5e:	4650      	mov	r0, sl
 8016e60:	f7e9 fb70 	bl	8000544 <__aeabi_i2d>
 8016e64:	4632      	mov	r2, r6
 8016e66:	463b      	mov	r3, r7
 8016e68:	f7e9 fe3e 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e6c:	b908      	cbnz	r0, 8016e72 <_dtoa_r+0x162>
 8016e6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e72:	f1ba 0f16 	cmp.w	sl, #22
 8016e76:	d859      	bhi.n	8016f2c <_dtoa_r+0x21c>
 8016e78:	4970      	ldr	r1, [pc, #448]	; (801703c <_dtoa_r+0x32c>)
 8016e7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e86:	f7e9 fe57 	bl	8000b38 <__aeabi_dcmpgt>
 8016e8a:	2800      	cmp	r0, #0
 8016e8c:	d050      	beq.n	8016f30 <_dtoa_r+0x220>
 8016e8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e92:	2300      	movs	r3, #0
 8016e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e98:	1b5d      	subs	r5, r3, r5
 8016e9a:	f1b5 0801 	subs.w	r8, r5, #1
 8016e9e:	bf49      	itett	mi
 8016ea0:	f1c5 0301 	rsbmi	r3, r5, #1
 8016ea4:	2300      	movpl	r3, #0
 8016ea6:	9305      	strmi	r3, [sp, #20]
 8016ea8:	f04f 0800 	movmi.w	r8, #0
 8016eac:	bf58      	it	pl
 8016eae:	9305      	strpl	r3, [sp, #20]
 8016eb0:	f1ba 0f00 	cmp.w	sl, #0
 8016eb4:	db3e      	blt.n	8016f34 <_dtoa_r+0x224>
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	44d0      	add	r8, sl
 8016eba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016ebe:	9307      	str	r3, [sp, #28]
 8016ec0:	9b06      	ldr	r3, [sp, #24]
 8016ec2:	2b09      	cmp	r3, #9
 8016ec4:	f200 8090 	bhi.w	8016fe8 <_dtoa_r+0x2d8>
 8016ec8:	2b05      	cmp	r3, #5
 8016eca:	bfc4      	itt	gt
 8016ecc:	3b04      	subgt	r3, #4
 8016ece:	9306      	strgt	r3, [sp, #24]
 8016ed0:	9b06      	ldr	r3, [sp, #24]
 8016ed2:	f1a3 0302 	sub.w	r3, r3, #2
 8016ed6:	bfcc      	ite	gt
 8016ed8:	2500      	movgt	r5, #0
 8016eda:	2501      	movle	r5, #1
 8016edc:	2b03      	cmp	r3, #3
 8016ede:	f200 808f 	bhi.w	8017000 <_dtoa_r+0x2f0>
 8016ee2:	e8df f003 	tbb	[pc, r3]
 8016ee6:	7f7d      	.short	0x7f7d
 8016ee8:	7131      	.short	0x7131
 8016eea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016eee:	441d      	add	r5, r3
 8016ef0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016ef4:	2820      	cmp	r0, #32
 8016ef6:	dd13      	ble.n	8016f20 <_dtoa_r+0x210>
 8016ef8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016efc:	9b00      	ldr	r3, [sp, #0]
 8016efe:	fa08 f800 	lsl.w	r8, r8, r0
 8016f02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016f06:	fa23 f000 	lsr.w	r0, r3, r0
 8016f0a:	ea48 0000 	orr.w	r0, r8, r0
 8016f0e:	f7e9 fb09 	bl	8000524 <__aeabi_ui2d>
 8016f12:	2301      	movs	r3, #1
 8016f14:	4682      	mov	sl, r0
 8016f16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016f1a:	3d01      	subs	r5, #1
 8016f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f1e:	e772      	b.n	8016e06 <_dtoa_r+0xf6>
 8016f20:	9b00      	ldr	r3, [sp, #0]
 8016f22:	f1c0 0020 	rsb	r0, r0, #32
 8016f26:	fa03 f000 	lsl.w	r0, r3, r0
 8016f2a:	e7f0      	b.n	8016f0e <_dtoa_r+0x1fe>
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e7b1      	b.n	8016e94 <_dtoa_r+0x184>
 8016f30:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f32:	e7b0      	b.n	8016e96 <_dtoa_r+0x186>
 8016f34:	9b05      	ldr	r3, [sp, #20]
 8016f36:	eba3 030a 	sub.w	r3, r3, sl
 8016f3a:	9305      	str	r3, [sp, #20]
 8016f3c:	f1ca 0300 	rsb	r3, sl, #0
 8016f40:	9307      	str	r3, [sp, #28]
 8016f42:	2300      	movs	r3, #0
 8016f44:	930e      	str	r3, [sp, #56]	; 0x38
 8016f46:	e7bb      	b.n	8016ec0 <_dtoa_r+0x1b0>
 8016f48:	2301      	movs	r3, #1
 8016f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	dd59      	ble.n	8017006 <_dtoa_r+0x2f6>
 8016f52:	9302      	str	r3, [sp, #8]
 8016f54:	4699      	mov	r9, r3
 8016f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016f58:	2200      	movs	r2, #0
 8016f5a:	6072      	str	r2, [r6, #4]
 8016f5c:	2204      	movs	r2, #4
 8016f5e:	f102 0014 	add.w	r0, r2, #20
 8016f62:	4298      	cmp	r0, r3
 8016f64:	6871      	ldr	r1, [r6, #4]
 8016f66:	d953      	bls.n	8017010 <_dtoa_r+0x300>
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f000 ffd7 	bl	8017f1c <_Balloc>
 8016f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f70:	6030      	str	r0, [r6, #0]
 8016f72:	f1b9 0f0e 	cmp.w	r9, #14
 8016f76:	f8d3 b000 	ldr.w	fp, [r3]
 8016f7a:	f200 80e6 	bhi.w	801714a <_dtoa_r+0x43a>
 8016f7e:	2d00      	cmp	r5, #0
 8016f80:	f000 80e3 	beq.w	801714a <_dtoa_r+0x43a>
 8016f84:	ed9d 7b00 	vldr	d7, [sp]
 8016f88:	f1ba 0f00 	cmp.w	sl, #0
 8016f8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016f90:	dd74      	ble.n	801707c <_dtoa_r+0x36c>
 8016f92:	4a2a      	ldr	r2, [pc, #168]	; (801703c <_dtoa_r+0x32c>)
 8016f94:	f00a 030f 	and.w	r3, sl, #15
 8016f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016f9c:	ed93 7b00 	vldr	d7, [r3]
 8016fa0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016fa4:	06f0      	lsls	r0, r6, #27
 8016fa6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016faa:	d565      	bpl.n	8017078 <_dtoa_r+0x368>
 8016fac:	4b24      	ldr	r3, [pc, #144]	; (8017040 <_dtoa_r+0x330>)
 8016fae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016fb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016fb6:	f7e9 fc59 	bl	800086c <__aeabi_ddiv>
 8016fba:	e9cd 0100 	strd	r0, r1, [sp]
 8016fbe:	f006 060f 	and.w	r6, r6, #15
 8016fc2:	2503      	movs	r5, #3
 8016fc4:	4f1e      	ldr	r7, [pc, #120]	; (8017040 <_dtoa_r+0x330>)
 8016fc6:	e04c      	b.n	8017062 <_dtoa_r+0x352>
 8016fc8:	2301      	movs	r3, #1
 8016fca:	930a      	str	r3, [sp, #40]	; 0x28
 8016fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fce:	4453      	add	r3, sl
 8016fd0:	f103 0901 	add.w	r9, r3, #1
 8016fd4:	9302      	str	r3, [sp, #8]
 8016fd6:	464b      	mov	r3, r9
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	bfb8      	it	lt
 8016fdc:	2301      	movlt	r3, #1
 8016fde:	e7ba      	b.n	8016f56 <_dtoa_r+0x246>
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e7b2      	b.n	8016f4a <_dtoa_r+0x23a>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	e7f0      	b.n	8016fca <_dtoa_r+0x2ba>
 8016fe8:	2501      	movs	r5, #1
 8016fea:	2300      	movs	r3, #0
 8016fec:	9306      	str	r3, [sp, #24]
 8016fee:	950a      	str	r5, [sp, #40]	; 0x28
 8016ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ff4:	9302      	str	r3, [sp, #8]
 8016ff6:	4699      	mov	r9, r3
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	2312      	movs	r3, #18
 8016ffc:	920b      	str	r2, [sp, #44]	; 0x2c
 8016ffe:	e7aa      	b.n	8016f56 <_dtoa_r+0x246>
 8017000:	2301      	movs	r3, #1
 8017002:	930a      	str	r3, [sp, #40]	; 0x28
 8017004:	e7f4      	b.n	8016ff0 <_dtoa_r+0x2e0>
 8017006:	2301      	movs	r3, #1
 8017008:	9302      	str	r3, [sp, #8]
 801700a:	4699      	mov	r9, r3
 801700c:	461a      	mov	r2, r3
 801700e:	e7f5      	b.n	8016ffc <_dtoa_r+0x2ec>
 8017010:	3101      	adds	r1, #1
 8017012:	6071      	str	r1, [r6, #4]
 8017014:	0052      	lsls	r2, r2, #1
 8017016:	e7a2      	b.n	8016f5e <_dtoa_r+0x24e>
 8017018:	636f4361 	.word	0x636f4361
 801701c:	3fd287a7 	.word	0x3fd287a7
 8017020:	8b60c8b3 	.word	0x8b60c8b3
 8017024:	3fc68a28 	.word	0x3fc68a28
 8017028:	509f79fb 	.word	0x509f79fb
 801702c:	3fd34413 	.word	0x3fd34413
 8017030:	7ff00000 	.word	0x7ff00000
 8017034:	0801be09 	.word	0x0801be09
 8017038:	3ff80000 	.word	0x3ff80000
 801703c:	0801bec8 	.word	0x0801bec8
 8017040:	0801bea0 	.word	0x0801bea0
 8017044:	0801be91 	.word	0x0801be91
 8017048:	07f1      	lsls	r1, r6, #31
 801704a:	d508      	bpl.n	801705e <_dtoa_r+0x34e>
 801704c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017054:	f7e9 fae0 	bl	8000618 <__aeabi_dmul>
 8017058:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801705c:	3501      	adds	r5, #1
 801705e:	1076      	asrs	r6, r6, #1
 8017060:	3708      	adds	r7, #8
 8017062:	2e00      	cmp	r6, #0
 8017064:	d1f0      	bne.n	8017048 <_dtoa_r+0x338>
 8017066:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801706a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801706e:	f7e9 fbfd 	bl	800086c <__aeabi_ddiv>
 8017072:	e9cd 0100 	strd	r0, r1, [sp]
 8017076:	e01a      	b.n	80170ae <_dtoa_r+0x39e>
 8017078:	2502      	movs	r5, #2
 801707a:	e7a3      	b.n	8016fc4 <_dtoa_r+0x2b4>
 801707c:	f000 80a0 	beq.w	80171c0 <_dtoa_r+0x4b0>
 8017080:	f1ca 0600 	rsb	r6, sl, #0
 8017084:	4b9f      	ldr	r3, [pc, #636]	; (8017304 <_dtoa_r+0x5f4>)
 8017086:	4fa0      	ldr	r7, [pc, #640]	; (8017308 <_dtoa_r+0x5f8>)
 8017088:	f006 020f 	and.w	r2, r6, #15
 801708c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017098:	f7e9 fabe 	bl	8000618 <__aeabi_dmul>
 801709c:	e9cd 0100 	strd	r0, r1, [sp]
 80170a0:	1136      	asrs	r6, r6, #4
 80170a2:	2300      	movs	r3, #0
 80170a4:	2502      	movs	r5, #2
 80170a6:	2e00      	cmp	r6, #0
 80170a8:	d17f      	bne.n	80171aa <_dtoa_r+0x49a>
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d1e1      	bne.n	8017072 <_dtoa_r+0x362>
 80170ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f000 8087 	beq.w	80171c4 <_dtoa_r+0x4b4>
 80170b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80170ba:	2200      	movs	r2, #0
 80170bc:	4b93      	ldr	r3, [pc, #588]	; (801730c <_dtoa_r+0x5fc>)
 80170be:	4630      	mov	r0, r6
 80170c0:	4639      	mov	r1, r7
 80170c2:	f7e9 fd1b 	bl	8000afc <__aeabi_dcmplt>
 80170c6:	2800      	cmp	r0, #0
 80170c8:	d07c      	beq.n	80171c4 <_dtoa_r+0x4b4>
 80170ca:	f1b9 0f00 	cmp.w	r9, #0
 80170ce:	d079      	beq.n	80171c4 <_dtoa_r+0x4b4>
 80170d0:	9b02      	ldr	r3, [sp, #8]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	dd35      	ble.n	8017142 <_dtoa_r+0x432>
 80170d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80170da:	9308      	str	r3, [sp, #32]
 80170dc:	4639      	mov	r1, r7
 80170de:	2200      	movs	r2, #0
 80170e0:	4b8b      	ldr	r3, [pc, #556]	; (8017310 <_dtoa_r+0x600>)
 80170e2:	4630      	mov	r0, r6
 80170e4:	f7e9 fa98 	bl	8000618 <__aeabi_dmul>
 80170e8:	e9cd 0100 	strd	r0, r1, [sp]
 80170ec:	9f02      	ldr	r7, [sp, #8]
 80170ee:	3501      	adds	r5, #1
 80170f0:	4628      	mov	r0, r5
 80170f2:	f7e9 fa27 	bl	8000544 <__aeabi_i2d>
 80170f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170fa:	f7e9 fa8d 	bl	8000618 <__aeabi_dmul>
 80170fe:	2200      	movs	r2, #0
 8017100:	4b84      	ldr	r3, [pc, #528]	; (8017314 <_dtoa_r+0x604>)
 8017102:	f7e9 f8d3 	bl	80002ac <__adddf3>
 8017106:	4605      	mov	r5, r0
 8017108:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801710c:	2f00      	cmp	r7, #0
 801710e:	d15d      	bne.n	80171cc <_dtoa_r+0x4bc>
 8017110:	2200      	movs	r2, #0
 8017112:	4b81      	ldr	r3, [pc, #516]	; (8017318 <_dtoa_r+0x608>)
 8017114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017118:	f7e9 f8c6 	bl	80002a8 <__aeabi_dsub>
 801711c:	462a      	mov	r2, r5
 801711e:	4633      	mov	r3, r6
 8017120:	e9cd 0100 	strd	r0, r1, [sp]
 8017124:	f7e9 fd08 	bl	8000b38 <__aeabi_dcmpgt>
 8017128:	2800      	cmp	r0, #0
 801712a:	f040 8288 	bne.w	801763e <_dtoa_r+0x92e>
 801712e:	462a      	mov	r2, r5
 8017130:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017138:	f7e9 fce0 	bl	8000afc <__aeabi_dcmplt>
 801713c:	2800      	cmp	r0, #0
 801713e:	f040 827c 	bne.w	801763a <_dtoa_r+0x92a>
 8017142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017146:	e9cd 2300 	strd	r2, r3, [sp]
 801714a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801714c:	2b00      	cmp	r3, #0
 801714e:	f2c0 8150 	blt.w	80173f2 <_dtoa_r+0x6e2>
 8017152:	f1ba 0f0e 	cmp.w	sl, #14
 8017156:	f300 814c 	bgt.w	80173f2 <_dtoa_r+0x6e2>
 801715a:	4b6a      	ldr	r3, [pc, #424]	; (8017304 <_dtoa_r+0x5f4>)
 801715c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017160:	ed93 7b00 	vldr	d7, [r3]
 8017164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017166:	2b00      	cmp	r3, #0
 8017168:	ed8d 7b02 	vstr	d7, [sp, #8]
 801716c:	f280 80d8 	bge.w	8017320 <_dtoa_r+0x610>
 8017170:	f1b9 0f00 	cmp.w	r9, #0
 8017174:	f300 80d4 	bgt.w	8017320 <_dtoa_r+0x610>
 8017178:	f040 825e 	bne.w	8017638 <_dtoa_r+0x928>
 801717c:	2200      	movs	r2, #0
 801717e:	4b66      	ldr	r3, [pc, #408]	; (8017318 <_dtoa_r+0x608>)
 8017180:	ec51 0b17 	vmov	r0, r1, d7
 8017184:	f7e9 fa48 	bl	8000618 <__aeabi_dmul>
 8017188:	e9dd 2300 	ldrd	r2, r3, [sp]
 801718c:	f7e9 fcca 	bl	8000b24 <__aeabi_dcmpge>
 8017190:	464f      	mov	r7, r9
 8017192:	464e      	mov	r6, r9
 8017194:	2800      	cmp	r0, #0
 8017196:	f040 8234 	bne.w	8017602 <_dtoa_r+0x8f2>
 801719a:	2331      	movs	r3, #49	; 0x31
 801719c:	f10b 0501 	add.w	r5, fp, #1
 80171a0:	f88b 3000 	strb.w	r3, [fp]
 80171a4:	f10a 0a01 	add.w	sl, sl, #1
 80171a8:	e22f      	b.n	801760a <_dtoa_r+0x8fa>
 80171aa:	07f2      	lsls	r2, r6, #31
 80171ac:	d505      	bpl.n	80171ba <_dtoa_r+0x4aa>
 80171ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171b2:	f7e9 fa31 	bl	8000618 <__aeabi_dmul>
 80171b6:	3501      	adds	r5, #1
 80171b8:	2301      	movs	r3, #1
 80171ba:	1076      	asrs	r6, r6, #1
 80171bc:	3708      	adds	r7, #8
 80171be:	e772      	b.n	80170a6 <_dtoa_r+0x396>
 80171c0:	2502      	movs	r5, #2
 80171c2:	e774      	b.n	80170ae <_dtoa_r+0x39e>
 80171c4:	f8cd a020 	str.w	sl, [sp, #32]
 80171c8:	464f      	mov	r7, r9
 80171ca:	e791      	b.n	80170f0 <_dtoa_r+0x3e0>
 80171cc:	4b4d      	ldr	r3, [pc, #308]	; (8017304 <_dtoa_r+0x5f4>)
 80171ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80171d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d047      	beq.n	801726c <_dtoa_r+0x55c>
 80171dc:	4602      	mov	r2, r0
 80171de:	460b      	mov	r3, r1
 80171e0:	2000      	movs	r0, #0
 80171e2:	494e      	ldr	r1, [pc, #312]	; (801731c <_dtoa_r+0x60c>)
 80171e4:	f7e9 fb42 	bl	800086c <__aeabi_ddiv>
 80171e8:	462a      	mov	r2, r5
 80171ea:	4633      	mov	r3, r6
 80171ec:	f7e9 f85c 	bl	80002a8 <__aeabi_dsub>
 80171f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80171f4:	465d      	mov	r5, fp
 80171f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171fa:	f7e9 fcbd 	bl	8000b78 <__aeabi_d2iz>
 80171fe:	4606      	mov	r6, r0
 8017200:	f7e9 f9a0 	bl	8000544 <__aeabi_i2d>
 8017204:	4602      	mov	r2, r0
 8017206:	460b      	mov	r3, r1
 8017208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801720c:	f7e9 f84c 	bl	80002a8 <__aeabi_dsub>
 8017210:	3630      	adds	r6, #48	; 0x30
 8017212:	f805 6b01 	strb.w	r6, [r5], #1
 8017216:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801721a:	e9cd 0100 	strd	r0, r1, [sp]
 801721e:	f7e9 fc6d 	bl	8000afc <__aeabi_dcmplt>
 8017222:	2800      	cmp	r0, #0
 8017224:	d163      	bne.n	80172ee <_dtoa_r+0x5de>
 8017226:	e9dd 2300 	ldrd	r2, r3, [sp]
 801722a:	2000      	movs	r0, #0
 801722c:	4937      	ldr	r1, [pc, #220]	; (801730c <_dtoa_r+0x5fc>)
 801722e:	f7e9 f83b 	bl	80002a8 <__aeabi_dsub>
 8017232:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017236:	f7e9 fc61 	bl	8000afc <__aeabi_dcmplt>
 801723a:	2800      	cmp	r0, #0
 801723c:	f040 80b7 	bne.w	80173ae <_dtoa_r+0x69e>
 8017240:	eba5 030b 	sub.w	r3, r5, fp
 8017244:	429f      	cmp	r7, r3
 8017246:	f77f af7c 	ble.w	8017142 <_dtoa_r+0x432>
 801724a:	2200      	movs	r2, #0
 801724c:	4b30      	ldr	r3, [pc, #192]	; (8017310 <_dtoa_r+0x600>)
 801724e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017252:	f7e9 f9e1 	bl	8000618 <__aeabi_dmul>
 8017256:	2200      	movs	r2, #0
 8017258:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801725c:	4b2c      	ldr	r3, [pc, #176]	; (8017310 <_dtoa_r+0x600>)
 801725e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017262:	f7e9 f9d9 	bl	8000618 <__aeabi_dmul>
 8017266:	e9cd 0100 	strd	r0, r1, [sp]
 801726a:	e7c4      	b.n	80171f6 <_dtoa_r+0x4e6>
 801726c:	462a      	mov	r2, r5
 801726e:	4633      	mov	r3, r6
 8017270:	f7e9 f9d2 	bl	8000618 <__aeabi_dmul>
 8017274:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017278:	eb0b 0507 	add.w	r5, fp, r7
 801727c:	465e      	mov	r6, fp
 801727e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017282:	f7e9 fc79 	bl	8000b78 <__aeabi_d2iz>
 8017286:	4607      	mov	r7, r0
 8017288:	f7e9 f95c 	bl	8000544 <__aeabi_i2d>
 801728c:	3730      	adds	r7, #48	; 0x30
 801728e:	4602      	mov	r2, r0
 8017290:	460b      	mov	r3, r1
 8017292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017296:	f7e9 f807 	bl	80002a8 <__aeabi_dsub>
 801729a:	f806 7b01 	strb.w	r7, [r6], #1
 801729e:	42ae      	cmp	r6, r5
 80172a0:	e9cd 0100 	strd	r0, r1, [sp]
 80172a4:	f04f 0200 	mov.w	r2, #0
 80172a8:	d126      	bne.n	80172f8 <_dtoa_r+0x5e8>
 80172aa:	4b1c      	ldr	r3, [pc, #112]	; (801731c <_dtoa_r+0x60c>)
 80172ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80172b0:	f7e8 fffc 	bl	80002ac <__adddf3>
 80172b4:	4602      	mov	r2, r0
 80172b6:	460b      	mov	r3, r1
 80172b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172bc:	f7e9 fc3c 	bl	8000b38 <__aeabi_dcmpgt>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d174      	bne.n	80173ae <_dtoa_r+0x69e>
 80172c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172c8:	2000      	movs	r0, #0
 80172ca:	4914      	ldr	r1, [pc, #80]	; (801731c <_dtoa_r+0x60c>)
 80172cc:	f7e8 ffec 	bl	80002a8 <__aeabi_dsub>
 80172d0:	4602      	mov	r2, r0
 80172d2:	460b      	mov	r3, r1
 80172d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172d8:	f7e9 fc10 	bl	8000afc <__aeabi_dcmplt>
 80172dc:	2800      	cmp	r0, #0
 80172de:	f43f af30 	beq.w	8017142 <_dtoa_r+0x432>
 80172e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80172e6:	2b30      	cmp	r3, #48	; 0x30
 80172e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80172ec:	d002      	beq.n	80172f4 <_dtoa_r+0x5e4>
 80172ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80172f2:	e04a      	b.n	801738a <_dtoa_r+0x67a>
 80172f4:	4615      	mov	r5, r2
 80172f6:	e7f4      	b.n	80172e2 <_dtoa_r+0x5d2>
 80172f8:	4b05      	ldr	r3, [pc, #20]	; (8017310 <_dtoa_r+0x600>)
 80172fa:	f7e9 f98d 	bl	8000618 <__aeabi_dmul>
 80172fe:	e9cd 0100 	strd	r0, r1, [sp]
 8017302:	e7bc      	b.n	801727e <_dtoa_r+0x56e>
 8017304:	0801bec8 	.word	0x0801bec8
 8017308:	0801bea0 	.word	0x0801bea0
 801730c:	3ff00000 	.word	0x3ff00000
 8017310:	40240000 	.word	0x40240000
 8017314:	401c0000 	.word	0x401c0000
 8017318:	40140000 	.word	0x40140000
 801731c:	3fe00000 	.word	0x3fe00000
 8017320:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017324:	465d      	mov	r5, fp
 8017326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801732a:	4630      	mov	r0, r6
 801732c:	4639      	mov	r1, r7
 801732e:	f7e9 fa9d 	bl	800086c <__aeabi_ddiv>
 8017332:	f7e9 fc21 	bl	8000b78 <__aeabi_d2iz>
 8017336:	4680      	mov	r8, r0
 8017338:	f7e9 f904 	bl	8000544 <__aeabi_i2d>
 801733c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017340:	f7e9 f96a 	bl	8000618 <__aeabi_dmul>
 8017344:	4602      	mov	r2, r0
 8017346:	460b      	mov	r3, r1
 8017348:	4630      	mov	r0, r6
 801734a:	4639      	mov	r1, r7
 801734c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017350:	f7e8 ffaa 	bl	80002a8 <__aeabi_dsub>
 8017354:	f805 6b01 	strb.w	r6, [r5], #1
 8017358:	eba5 060b 	sub.w	r6, r5, fp
 801735c:	45b1      	cmp	r9, r6
 801735e:	4602      	mov	r2, r0
 8017360:	460b      	mov	r3, r1
 8017362:	d139      	bne.n	80173d8 <_dtoa_r+0x6c8>
 8017364:	f7e8 ffa2 	bl	80002ac <__adddf3>
 8017368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801736c:	4606      	mov	r6, r0
 801736e:	460f      	mov	r7, r1
 8017370:	f7e9 fbe2 	bl	8000b38 <__aeabi_dcmpgt>
 8017374:	b9c8      	cbnz	r0, 80173aa <_dtoa_r+0x69a>
 8017376:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801737a:	4630      	mov	r0, r6
 801737c:	4639      	mov	r1, r7
 801737e:	f7e9 fbb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8017382:	b110      	cbz	r0, 801738a <_dtoa_r+0x67a>
 8017384:	f018 0f01 	tst.w	r8, #1
 8017388:	d10f      	bne.n	80173aa <_dtoa_r+0x69a>
 801738a:	9904      	ldr	r1, [sp, #16]
 801738c:	4620      	mov	r0, r4
 801738e:	f000 fdf9 	bl	8017f84 <_Bfree>
 8017392:	2300      	movs	r3, #0
 8017394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017396:	702b      	strb	r3, [r5, #0]
 8017398:	f10a 0301 	add.w	r3, sl, #1
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	f000 8241 	beq.w	8017828 <_dtoa_r+0xb18>
 80173a6:	601d      	str	r5, [r3, #0]
 80173a8:	e23e      	b.n	8017828 <_dtoa_r+0xb18>
 80173aa:	f8cd a020 	str.w	sl, [sp, #32]
 80173ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80173b2:	2a39      	cmp	r2, #57	; 0x39
 80173b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80173b8:	d108      	bne.n	80173cc <_dtoa_r+0x6bc>
 80173ba:	459b      	cmp	fp, r3
 80173bc:	d10a      	bne.n	80173d4 <_dtoa_r+0x6c4>
 80173be:	9b08      	ldr	r3, [sp, #32]
 80173c0:	3301      	adds	r3, #1
 80173c2:	9308      	str	r3, [sp, #32]
 80173c4:	2330      	movs	r3, #48	; 0x30
 80173c6:	f88b 3000 	strb.w	r3, [fp]
 80173ca:	465b      	mov	r3, fp
 80173cc:	781a      	ldrb	r2, [r3, #0]
 80173ce:	3201      	adds	r2, #1
 80173d0:	701a      	strb	r2, [r3, #0]
 80173d2:	e78c      	b.n	80172ee <_dtoa_r+0x5de>
 80173d4:	461d      	mov	r5, r3
 80173d6:	e7ea      	b.n	80173ae <_dtoa_r+0x69e>
 80173d8:	2200      	movs	r2, #0
 80173da:	4b9b      	ldr	r3, [pc, #620]	; (8017648 <_dtoa_r+0x938>)
 80173dc:	f7e9 f91c 	bl	8000618 <__aeabi_dmul>
 80173e0:	2200      	movs	r2, #0
 80173e2:	2300      	movs	r3, #0
 80173e4:	4606      	mov	r6, r0
 80173e6:	460f      	mov	r7, r1
 80173e8:	f7e9 fb7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d09a      	beq.n	8017326 <_dtoa_r+0x616>
 80173f0:	e7cb      	b.n	801738a <_dtoa_r+0x67a>
 80173f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173f4:	2a00      	cmp	r2, #0
 80173f6:	f000 808b 	beq.w	8017510 <_dtoa_r+0x800>
 80173fa:	9a06      	ldr	r2, [sp, #24]
 80173fc:	2a01      	cmp	r2, #1
 80173fe:	dc6e      	bgt.n	80174de <_dtoa_r+0x7ce>
 8017400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017402:	2a00      	cmp	r2, #0
 8017404:	d067      	beq.n	80174d6 <_dtoa_r+0x7c6>
 8017406:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801740a:	9f07      	ldr	r7, [sp, #28]
 801740c:	9d05      	ldr	r5, [sp, #20]
 801740e:	9a05      	ldr	r2, [sp, #20]
 8017410:	2101      	movs	r1, #1
 8017412:	441a      	add	r2, r3
 8017414:	4620      	mov	r0, r4
 8017416:	9205      	str	r2, [sp, #20]
 8017418:	4498      	add	r8, r3
 801741a:	f000 fe91 	bl	8018140 <__i2b>
 801741e:	4606      	mov	r6, r0
 8017420:	2d00      	cmp	r5, #0
 8017422:	dd0c      	ble.n	801743e <_dtoa_r+0x72e>
 8017424:	f1b8 0f00 	cmp.w	r8, #0
 8017428:	dd09      	ble.n	801743e <_dtoa_r+0x72e>
 801742a:	4545      	cmp	r5, r8
 801742c:	9a05      	ldr	r2, [sp, #20]
 801742e:	462b      	mov	r3, r5
 8017430:	bfa8      	it	ge
 8017432:	4643      	movge	r3, r8
 8017434:	1ad2      	subs	r2, r2, r3
 8017436:	9205      	str	r2, [sp, #20]
 8017438:	1aed      	subs	r5, r5, r3
 801743a:	eba8 0803 	sub.w	r8, r8, r3
 801743e:	9b07      	ldr	r3, [sp, #28]
 8017440:	b1eb      	cbz	r3, 801747e <_dtoa_r+0x76e>
 8017442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017444:	2b00      	cmp	r3, #0
 8017446:	d067      	beq.n	8017518 <_dtoa_r+0x808>
 8017448:	b18f      	cbz	r7, 801746e <_dtoa_r+0x75e>
 801744a:	4631      	mov	r1, r6
 801744c:	463a      	mov	r2, r7
 801744e:	4620      	mov	r0, r4
 8017450:	f000 ff16 	bl	8018280 <__pow5mult>
 8017454:	9a04      	ldr	r2, [sp, #16]
 8017456:	4601      	mov	r1, r0
 8017458:	4606      	mov	r6, r0
 801745a:	4620      	mov	r0, r4
 801745c:	f000 fe79 	bl	8018152 <__multiply>
 8017460:	9904      	ldr	r1, [sp, #16]
 8017462:	9008      	str	r0, [sp, #32]
 8017464:	4620      	mov	r0, r4
 8017466:	f000 fd8d 	bl	8017f84 <_Bfree>
 801746a:	9b08      	ldr	r3, [sp, #32]
 801746c:	9304      	str	r3, [sp, #16]
 801746e:	9b07      	ldr	r3, [sp, #28]
 8017470:	1bda      	subs	r2, r3, r7
 8017472:	d004      	beq.n	801747e <_dtoa_r+0x76e>
 8017474:	9904      	ldr	r1, [sp, #16]
 8017476:	4620      	mov	r0, r4
 8017478:	f000 ff02 	bl	8018280 <__pow5mult>
 801747c:	9004      	str	r0, [sp, #16]
 801747e:	2101      	movs	r1, #1
 8017480:	4620      	mov	r0, r4
 8017482:	f000 fe5d 	bl	8018140 <__i2b>
 8017486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017488:	4607      	mov	r7, r0
 801748a:	2b00      	cmp	r3, #0
 801748c:	f000 81d0 	beq.w	8017830 <_dtoa_r+0xb20>
 8017490:	461a      	mov	r2, r3
 8017492:	4601      	mov	r1, r0
 8017494:	4620      	mov	r0, r4
 8017496:	f000 fef3 	bl	8018280 <__pow5mult>
 801749a:	9b06      	ldr	r3, [sp, #24]
 801749c:	2b01      	cmp	r3, #1
 801749e:	4607      	mov	r7, r0
 80174a0:	dc40      	bgt.n	8017524 <_dtoa_r+0x814>
 80174a2:	9b00      	ldr	r3, [sp, #0]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d139      	bne.n	801751c <_dtoa_r+0x80c>
 80174a8:	9b01      	ldr	r3, [sp, #4]
 80174aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d136      	bne.n	8017520 <_dtoa_r+0x810>
 80174b2:	9b01      	ldr	r3, [sp, #4]
 80174b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174b8:	0d1b      	lsrs	r3, r3, #20
 80174ba:	051b      	lsls	r3, r3, #20
 80174bc:	b12b      	cbz	r3, 80174ca <_dtoa_r+0x7ba>
 80174be:	9b05      	ldr	r3, [sp, #20]
 80174c0:	3301      	adds	r3, #1
 80174c2:	9305      	str	r3, [sp, #20]
 80174c4:	f108 0801 	add.w	r8, r8, #1
 80174c8:	2301      	movs	r3, #1
 80174ca:	9307      	str	r3, [sp, #28]
 80174cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d12a      	bne.n	8017528 <_dtoa_r+0x818>
 80174d2:	2001      	movs	r0, #1
 80174d4:	e030      	b.n	8017538 <_dtoa_r+0x828>
 80174d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80174d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80174dc:	e795      	b.n	801740a <_dtoa_r+0x6fa>
 80174de:	9b07      	ldr	r3, [sp, #28]
 80174e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80174e4:	42bb      	cmp	r3, r7
 80174e6:	bfbf      	itttt	lt
 80174e8:	9b07      	ldrlt	r3, [sp, #28]
 80174ea:	9707      	strlt	r7, [sp, #28]
 80174ec:	1afa      	sublt	r2, r7, r3
 80174ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80174f0:	bfbb      	ittet	lt
 80174f2:	189b      	addlt	r3, r3, r2
 80174f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80174f6:	1bdf      	subge	r7, r3, r7
 80174f8:	2700      	movlt	r7, #0
 80174fa:	f1b9 0f00 	cmp.w	r9, #0
 80174fe:	bfb5      	itete	lt
 8017500:	9b05      	ldrlt	r3, [sp, #20]
 8017502:	9d05      	ldrge	r5, [sp, #20]
 8017504:	eba3 0509 	sublt.w	r5, r3, r9
 8017508:	464b      	movge	r3, r9
 801750a:	bfb8      	it	lt
 801750c:	2300      	movlt	r3, #0
 801750e:	e77e      	b.n	801740e <_dtoa_r+0x6fe>
 8017510:	9f07      	ldr	r7, [sp, #28]
 8017512:	9d05      	ldr	r5, [sp, #20]
 8017514:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017516:	e783      	b.n	8017420 <_dtoa_r+0x710>
 8017518:	9a07      	ldr	r2, [sp, #28]
 801751a:	e7ab      	b.n	8017474 <_dtoa_r+0x764>
 801751c:	2300      	movs	r3, #0
 801751e:	e7d4      	b.n	80174ca <_dtoa_r+0x7ba>
 8017520:	9b00      	ldr	r3, [sp, #0]
 8017522:	e7d2      	b.n	80174ca <_dtoa_r+0x7ba>
 8017524:	2300      	movs	r3, #0
 8017526:	9307      	str	r3, [sp, #28]
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801752e:	6918      	ldr	r0, [r3, #16]
 8017530:	f000 fdb8 	bl	80180a4 <__hi0bits>
 8017534:	f1c0 0020 	rsb	r0, r0, #32
 8017538:	4440      	add	r0, r8
 801753a:	f010 001f 	ands.w	r0, r0, #31
 801753e:	d047      	beq.n	80175d0 <_dtoa_r+0x8c0>
 8017540:	f1c0 0320 	rsb	r3, r0, #32
 8017544:	2b04      	cmp	r3, #4
 8017546:	dd3b      	ble.n	80175c0 <_dtoa_r+0x8b0>
 8017548:	9b05      	ldr	r3, [sp, #20]
 801754a:	f1c0 001c 	rsb	r0, r0, #28
 801754e:	4403      	add	r3, r0
 8017550:	9305      	str	r3, [sp, #20]
 8017552:	4405      	add	r5, r0
 8017554:	4480      	add	r8, r0
 8017556:	9b05      	ldr	r3, [sp, #20]
 8017558:	2b00      	cmp	r3, #0
 801755a:	dd05      	ble.n	8017568 <_dtoa_r+0x858>
 801755c:	461a      	mov	r2, r3
 801755e:	9904      	ldr	r1, [sp, #16]
 8017560:	4620      	mov	r0, r4
 8017562:	f000 fedb 	bl	801831c <__lshift>
 8017566:	9004      	str	r0, [sp, #16]
 8017568:	f1b8 0f00 	cmp.w	r8, #0
 801756c:	dd05      	ble.n	801757a <_dtoa_r+0x86a>
 801756e:	4639      	mov	r1, r7
 8017570:	4642      	mov	r2, r8
 8017572:	4620      	mov	r0, r4
 8017574:	f000 fed2 	bl	801831c <__lshift>
 8017578:	4607      	mov	r7, r0
 801757a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801757c:	b353      	cbz	r3, 80175d4 <_dtoa_r+0x8c4>
 801757e:	4639      	mov	r1, r7
 8017580:	9804      	ldr	r0, [sp, #16]
 8017582:	f000 ff1f 	bl	80183c4 <__mcmp>
 8017586:	2800      	cmp	r0, #0
 8017588:	da24      	bge.n	80175d4 <_dtoa_r+0x8c4>
 801758a:	2300      	movs	r3, #0
 801758c:	220a      	movs	r2, #10
 801758e:	9904      	ldr	r1, [sp, #16]
 8017590:	4620      	mov	r0, r4
 8017592:	f000 fd0e 	bl	8017fb2 <__multadd>
 8017596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017598:	9004      	str	r0, [sp, #16]
 801759a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f000 814d 	beq.w	801783e <_dtoa_r+0xb2e>
 80175a4:	2300      	movs	r3, #0
 80175a6:	4631      	mov	r1, r6
 80175a8:	220a      	movs	r2, #10
 80175aa:	4620      	mov	r0, r4
 80175ac:	f000 fd01 	bl	8017fb2 <__multadd>
 80175b0:	9b02      	ldr	r3, [sp, #8]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	4606      	mov	r6, r0
 80175b6:	dc4f      	bgt.n	8017658 <_dtoa_r+0x948>
 80175b8:	9b06      	ldr	r3, [sp, #24]
 80175ba:	2b02      	cmp	r3, #2
 80175bc:	dd4c      	ble.n	8017658 <_dtoa_r+0x948>
 80175be:	e011      	b.n	80175e4 <_dtoa_r+0x8d4>
 80175c0:	d0c9      	beq.n	8017556 <_dtoa_r+0x846>
 80175c2:	9a05      	ldr	r2, [sp, #20]
 80175c4:	331c      	adds	r3, #28
 80175c6:	441a      	add	r2, r3
 80175c8:	9205      	str	r2, [sp, #20]
 80175ca:	441d      	add	r5, r3
 80175cc:	4498      	add	r8, r3
 80175ce:	e7c2      	b.n	8017556 <_dtoa_r+0x846>
 80175d0:	4603      	mov	r3, r0
 80175d2:	e7f6      	b.n	80175c2 <_dtoa_r+0x8b2>
 80175d4:	f1b9 0f00 	cmp.w	r9, #0
 80175d8:	dc38      	bgt.n	801764c <_dtoa_r+0x93c>
 80175da:	9b06      	ldr	r3, [sp, #24]
 80175dc:	2b02      	cmp	r3, #2
 80175de:	dd35      	ble.n	801764c <_dtoa_r+0x93c>
 80175e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80175e4:	9b02      	ldr	r3, [sp, #8]
 80175e6:	b963      	cbnz	r3, 8017602 <_dtoa_r+0x8f2>
 80175e8:	4639      	mov	r1, r7
 80175ea:	2205      	movs	r2, #5
 80175ec:	4620      	mov	r0, r4
 80175ee:	f000 fce0 	bl	8017fb2 <__multadd>
 80175f2:	4601      	mov	r1, r0
 80175f4:	4607      	mov	r7, r0
 80175f6:	9804      	ldr	r0, [sp, #16]
 80175f8:	f000 fee4 	bl	80183c4 <__mcmp>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	f73f adcc 	bgt.w	801719a <_dtoa_r+0x48a>
 8017602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017604:	465d      	mov	r5, fp
 8017606:	ea6f 0a03 	mvn.w	sl, r3
 801760a:	f04f 0900 	mov.w	r9, #0
 801760e:	4639      	mov	r1, r7
 8017610:	4620      	mov	r0, r4
 8017612:	f000 fcb7 	bl	8017f84 <_Bfree>
 8017616:	2e00      	cmp	r6, #0
 8017618:	f43f aeb7 	beq.w	801738a <_dtoa_r+0x67a>
 801761c:	f1b9 0f00 	cmp.w	r9, #0
 8017620:	d005      	beq.n	801762e <_dtoa_r+0x91e>
 8017622:	45b1      	cmp	r9, r6
 8017624:	d003      	beq.n	801762e <_dtoa_r+0x91e>
 8017626:	4649      	mov	r1, r9
 8017628:	4620      	mov	r0, r4
 801762a:	f000 fcab 	bl	8017f84 <_Bfree>
 801762e:	4631      	mov	r1, r6
 8017630:	4620      	mov	r0, r4
 8017632:	f000 fca7 	bl	8017f84 <_Bfree>
 8017636:	e6a8      	b.n	801738a <_dtoa_r+0x67a>
 8017638:	2700      	movs	r7, #0
 801763a:	463e      	mov	r6, r7
 801763c:	e7e1      	b.n	8017602 <_dtoa_r+0x8f2>
 801763e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017642:	463e      	mov	r6, r7
 8017644:	e5a9      	b.n	801719a <_dtoa_r+0x48a>
 8017646:	bf00      	nop
 8017648:	40240000 	.word	0x40240000
 801764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801764e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017652:	2b00      	cmp	r3, #0
 8017654:	f000 80fa 	beq.w	801784c <_dtoa_r+0xb3c>
 8017658:	2d00      	cmp	r5, #0
 801765a:	dd05      	ble.n	8017668 <_dtoa_r+0x958>
 801765c:	4631      	mov	r1, r6
 801765e:	462a      	mov	r2, r5
 8017660:	4620      	mov	r0, r4
 8017662:	f000 fe5b 	bl	801831c <__lshift>
 8017666:	4606      	mov	r6, r0
 8017668:	9b07      	ldr	r3, [sp, #28]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d04c      	beq.n	8017708 <_dtoa_r+0x9f8>
 801766e:	6871      	ldr	r1, [r6, #4]
 8017670:	4620      	mov	r0, r4
 8017672:	f000 fc53 	bl	8017f1c <_Balloc>
 8017676:	6932      	ldr	r2, [r6, #16]
 8017678:	3202      	adds	r2, #2
 801767a:	4605      	mov	r5, r0
 801767c:	0092      	lsls	r2, r2, #2
 801767e:	f106 010c 	add.w	r1, r6, #12
 8017682:	300c      	adds	r0, #12
 8017684:	f7fd fc54 	bl	8014f30 <memcpy>
 8017688:	2201      	movs	r2, #1
 801768a:	4629      	mov	r1, r5
 801768c:	4620      	mov	r0, r4
 801768e:	f000 fe45 	bl	801831c <__lshift>
 8017692:	9b00      	ldr	r3, [sp, #0]
 8017694:	f8cd b014 	str.w	fp, [sp, #20]
 8017698:	f003 0301 	and.w	r3, r3, #1
 801769c:	46b1      	mov	r9, r6
 801769e:	9307      	str	r3, [sp, #28]
 80176a0:	4606      	mov	r6, r0
 80176a2:	4639      	mov	r1, r7
 80176a4:	9804      	ldr	r0, [sp, #16]
 80176a6:	f7ff faa7 	bl	8016bf8 <quorem>
 80176aa:	4649      	mov	r1, r9
 80176ac:	4605      	mov	r5, r0
 80176ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80176b2:	9804      	ldr	r0, [sp, #16]
 80176b4:	f000 fe86 	bl	80183c4 <__mcmp>
 80176b8:	4632      	mov	r2, r6
 80176ba:	9000      	str	r0, [sp, #0]
 80176bc:	4639      	mov	r1, r7
 80176be:	4620      	mov	r0, r4
 80176c0:	f000 fe9a 	bl	80183f8 <__mdiff>
 80176c4:	68c3      	ldr	r3, [r0, #12]
 80176c6:	4602      	mov	r2, r0
 80176c8:	bb03      	cbnz	r3, 801770c <_dtoa_r+0x9fc>
 80176ca:	4601      	mov	r1, r0
 80176cc:	9008      	str	r0, [sp, #32]
 80176ce:	9804      	ldr	r0, [sp, #16]
 80176d0:	f000 fe78 	bl	80183c4 <__mcmp>
 80176d4:	9a08      	ldr	r2, [sp, #32]
 80176d6:	4603      	mov	r3, r0
 80176d8:	4611      	mov	r1, r2
 80176da:	4620      	mov	r0, r4
 80176dc:	9308      	str	r3, [sp, #32]
 80176de:	f000 fc51 	bl	8017f84 <_Bfree>
 80176e2:	9b08      	ldr	r3, [sp, #32]
 80176e4:	b9a3      	cbnz	r3, 8017710 <_dtoa_r+0xa00>
 80176e6:	9a06      	ldr	r2, [sp, #24]
 80176e8:	b992      	cbnz	r2, 8017710 <_dtoa_r+0xa00>
 80176ea:	9a07      	ldr	r2, [sp, #28]
 80176ec:	b982      	cbnz	r2, 8017710 <_dtoa_r+0xa00>
 80176ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80176f2:	d029      	beq.n	8017748 <_dtoa_r+0xa38>
 80176f4:	9b00      	ldr	r3, [sp, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	dd01      	ble.n	80176fe <_dtoa_r+0x9ee>
 80176fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80176fe:	9b05      	ldr	r3, [sp, #20]
 8017700:	1c5d      	adds	r5, r3, #1
 8017702:	f883 8000 	strb.w	r8, [r3]
 8017706:	e782      	b.n	801760e <_dtoa_r+0x8fe>
 8017708:	4630      	mov	r0, r6
 801770a:	e7c2      	b.n	8017692 <_dtoa_r+0x982>
 801770c:	2301      	movs	r3, #1
 801770e:	e7e3      	b.n	80176d8 <_dtoa_r+0x9c8>
 8017710:	9a00      	ldr	r2, [sp, #0]
 8017712:	2a00      	cmp	r2, #0
 8017714:	db04      	blt.n	8017720 <_dtoa_r+0xa10>
 8017716:	d125      	bne.n	8017764 <_dtoa_r+0xa54>
 8017718:	9a06      	ldr	r2, [sp, #24]
 801771a:	bb1a      	cbnz	r2, 8017764 <_dtoa_r+0xa54>
 801771c:	9a07      	ldr	r2, [sp, #28]
 801771e:	bb0a      	cbnz	r2, 8017764 <_dtoa_r+0xa54>
 8017720:	2b00      	cmp	r3, #0
 8017722:	ddec      	ble.n	80176fe <_dtoa_r+0x9ee>
 8017724:	2201      	movs	r2, #1
 8017726:	9904      	ldr	r1, [sp, #16]
 8017728:	4620      	mov	r0, r4
 801772a:	f000 fdf7 	bl	801831c <__lshift>
 801772e:	4639      	mov	r1, r7
 8017730:	9004      	str	r0, [sp, #16]
 8017732:	f000 fe47 	bl	80183c4 <__mcmp>
 8017736:	2800      	cmp	r0, #0
 8017738:	dc03      	bgt.n	8017742 <_dtoa_r+0xa32>
 801773a:	d1e0      	bne.n	80176fe <_dtoa_r+0x9ee>
 801773c:	f018 0f01 	tst.w	r8, #1
 8017740:	d0dd      	beq.n	80176fe <_dtoa_r+0x9ee>
 8017742:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017746:	d1d8      	bne.n	80176fa <_dtoa_r+0x9ea>
 8017748:	9b05      	ldr	r3, [sp, #20]
 801774a:	9a05      	ldr	r2, [sp, #20]
 801774c:	1c5d      	adds	r5, r3, #1
 801774e:	2339      	movs	r3, #57	; 0x39
 8017750:	7013      	strb	r3, [r2, #0]
 8017752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017756:	2b39      	cmp	r3, #57	; 0x39
 8017758:	f105 32ff 	add.w	r2, r5, #4294967295
 801775c:	d04f      	beq.n	80177fe <_dtoa_r+0xaee>
 801775e:	3301      	adds	r3, #1
 8017760:	7013      	strb	r3, [r2, #0]
 8017762:	e754      	b.n	801760e <_dtoa_r+0x8fe>
 8017764:	9a05      	ldr	r2, [sp, #20]
 8017766:	2b00      	cmp	r3, #0
 8017768:	f102 0501 	add.w	r5, r2, #1
 801776c:	dd06      	ble.n	801777c <_dtoa_r+0xa6c>
 801776e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017772:	d0e9      	beq.n	8017748 <_dtoa_r+0xa38>
 8017774:	f108 0801 	add.w	r8, r8, #1
 8017778:	9b05      	ldr	r3, [sp, #20]
 801777a:	e7c2      	b.n	8017702 <_dtoa_r+0x9f2>
 801777c:	9a02      	ldr	r2, [sp, #8]
 801777e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017782:	eba5 030b 	sub.w	r3, r5, fp
 8017786:	4293      	cmp	r3, r2
 8017788:	d021      	beq.n	80177ce <_dtoa_r+0xabe>
 801778a:	2300      	movs	r3, #0
 801778c:	220a      	movs	r2, #10
 801778e:	9904      	ldr	r1, [sp, #16]
 8017790:	4620      	mov	r0, r4
 8017792:	f000 fc0e 	bl	8017fb2 <__multadd>
 8017796:	45b1      	cmp	r9, r6
 8017798:	9004      	str	r0, [sp, #16]
 801779a:	f04f 0300 	mov.w	r3, #0
 801779e:	f04f 020a 	mov.w	r2, #10
 80177a2:	4649      	mov	r1, r9
 80177a4:	4620      	mov	r0, r4
 80177a6:	d105      	bne.n	80177b4 <_dtoa_r+0xaa4>
 80177a8:	f000 fc03 	bl	8017fb2 <__multadd>
 80177ac:	4681      	mov	r9, r0
 80177ae:	4606      	mov	r6, r0
 80177b0:	9505      	str	r5, [sp, #20]
 80177b2:	e776      	b.n	80176a2 <_dtoa_r+0x992>
 80177b4:	f000 fbfd 	bl	8017fb2 <__multadd>
 80177b8:	4631      	mov	r1, r6
 80177ba:	4681      	mov	r9, r0
 80177bc:	2300      	movs	r3, #0
 80177be:	220a      	movs	r2, #10
 80177c0:	4620      	mov	r0, r4
 80177c2:	f000 fbf6 	bl	8017fb2 <__multadd>
 80177c6:	4606      	mov	r6, r0
 80177c8:	e7f2      	b.n	80177b0 <_dtoa_r+0xaa0>
 80177ca:	f04f 0900 	mov.w	r9, #0
 80177ce:	2201      	movs	r2, #1
 80177d0:	9904      	ldr	r1, [sp, #16]
 80177d2:	4620      	mov	r0, r4
 80177d4:	f000 fda2 	bl	801831c <__lshift>
 80177d8:	4639      	mov	r1, r7
 80177da:	9004      	str	r0, [sp, #16]
 80177dc:	f000 fdf2 	bl	80183c4 <__mcmp>
 80177e0:	2800      	cmp	r0, #0
 80177e2:	dcb6      	bgt.n	8017752 <_dtoa_r+0xa42>
 80177e4:	d102      	bne.n	80177ec <_dtoa_r+0xadc>
 80177e6:	f018 0f01 	tst.w	r8, #1
 80177ea:	d1b2      	bne.n	8017752 <_dtoa_r+0xa42>
 80177ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177f0:	2b30      	cmp	r3, #48	; 0x30
 80177f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80177f6:	f47f af0a 	bne.w	801760e <_dtoa_r+0x8fe>
 80177fa:	4615      	mov	r5, r2
 80177fc:	e7f6      	b.n	80177ec <_dtoa_r+0xadc>
 80177fe:	4593      	cmp	fp, r2
 8017800:	d105      	bne.n	801780e <_dtoa_r+0xafe>
 8017802:	2331      	movs	r3, #49	; 0x31
 8017804:	f10a 0a01 	add.w	sl, sl, #1
 8017808:	f88b 3000 	strb.w	r3, [fp]
 801780c:	e6ff      	b.n	801760e <_dtoa_r+0x8fe>
 801780e:	4615      	mov	r5, r2
 8017810:	e79f      	b.n	8017752 <_dtoa_r+0xa42>
 8017812:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017878 <_dtoa_r+0xb68>
 8017816:	e007      	b.n	8017828 <_dtoa_r+0xb18>
 8017818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801781a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801787c <_dtoa_r+0xb6c>
 801781e:	b11b      	cbz	r3, 8017828 <_dtoa_r+0xb18>
 8017820:	f10b 0308 	add.w	r3, fp, #8
 8017824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017826:	6013      	str	r3, [r2, #0]
 8017828:	4658      	mov	r0, fp
 801782a:	b017      	add	sp, #92	; 0x5c
 801782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017830:	9b06      	ldr	r3, [sp, #24]
 8017832:	2b01      	cmp	r3, #1
 8017834:	f77f ae35 	ble.w	80174a2 <_dtoa_r+0x792>
 8017838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801783a:	9307      	str	r3, [sp, #28]
 801783c:	e649      	b.n	80174d2 <_dtoa_r+0x7c2>
 801783e:	9b02      	ldr	r3, [sp, #8]
 8017840:	2b00      	cmp	r3, #0
 8017842:	dc03      	bgt.n	801784c <_dtoa_r+0xb3c>
 8017844:	9b06      	ldr	r3, [sp, #24]
 8017846:	2b02      	cmp	r3, #2
 8017848:	f73f aecc 	bgt.w	80175e4 <_dtoa_r+0x8d4>
 801784c:	465d      	mov	r5, fp
 801784e:	4639      	mov	r1, r7
 8017850:	9804      	ldr	r0, [sp, #16]
 8017852:	f7ff f9d1 	bl	8016bf8 <quorem>
 8017856:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801785a:	f805 8b01 	strb.w	r8, [r5], #1
 801785e:	9a02      	ldr	r2, [sp, #8]
 8017860:	eba5 030b 	sub.w	r3, r5, fp
 8017864:	429a      	cmp	r2, r3
 8017866:	ddb0      	ble.n	80177ca <_dtoa_r+0xaba>
 8017868:	2300      	movs	r3, #0
 801786a:	220a      	movs	r2, #10
 801786c:	9904      	ldr	r1, [sp, #16]
 801786e:	4620      	mov	r0, r4
 8017870:	f000 fb9f 	bl	8017fb2 <__multadd>
 8017874:	9004      	str	r0, [sp, #16]
 8017876:	e7ea      	b.n	801784e <_dtoa_r+0xb3e>
 8017878:	0801be08 	.word	0x0801be08
 801787c:	0801be88 	.word	0x0801be88

08017880 <rshift>:
 8017880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017882:	6906      	ldr	r6, [r0, #16]
 8017884:	114b      	asrs	r3, r1, #5
 8017886:	429e      	cmp	r6, r3
 8017888:	f100 0414 	add.w	r4, r0, #20
 801788c:	dd30      	ble.n	80178f0 <rshift+0x70>
 801788e:	f011 011f 	ands.w	r1, r1, #31
 8017892:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017896:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801789a:	d108      	bne.n	80178ae <rshift+0x2e>
 801789c:	4621      	mov	r1, r4
 801789e:	42b2      	cmp	r2, r6
 80178a0:	460b      	mov	r3, r1
 80178a2:	d211      	bcs.n	80178c8 <rshift+0x48>
 80178a4:	f852 3b04 	ldr.w	r3, [r2], #4
 80178a8:	f841 3b04 	str.w	r3, [r1], #4
 80178ac:	e7f7      	b.n	801789e <rshift+0x1e>
 80178ae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80178b2:	f1c1 0c20 	rsb	ip, r1, #32
 80178b6:	40cd      	lsrs	r5, r1
 80178b8:	3204      	adds	r2, #4
 80178ba:	4623      	mov	r3, r4
 80178bc:	42b2      	cmp	r2, r6
 80178be:	4617      	mov	r7, r2
 80178c0:	d30c      	bcc.n	80178dc <rshift+0x5c>
 80178c2:	601d      	str	r5, [r3, #0]
 80178c4:	b105      	cbz	r5, 80178c8 <rshift+0x48>
 80178c6:	3304      	adds	r3, #4
 80178c8:	1b1a      	subs	r2, r3, r4
 80178ca:	42a3      	cmp	r3, r4
 80178cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178d0:	bf08      	it	eq
 80178d2:	2300      	moveq	r3, #0
 80178d4:	6102      	str	r2, [r0, #16]
 80178d6:	bf08      	it	eq
 80178d8:	6143      	streq	r3, [r0, #20]
 80178da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178dc:	683f      	ldr	r7, [r7, #0]
 80178de:	fa07 f70c 	lsl.w	r7, r7, ip
 80178e2:	433d      	orrs	r5, r7
 80178e4:	f843 5b04 	str.w	r5, [r3], #4
 80178e8:	f852 5b04 	ldr.w	r5, [r2], #4
 80178ec:	40cd      	lsrs	r5, r1
 80178ee:	e7e5      	b.n	80178bc <rshift+0x3c>
 80178f0:	4623      	mov	r3, r4
 80178f2:	e7e9      	b.n	80178c8 <rshift+0x48>

080178f4 <__hexdig_fun>:
 80178f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178f8:	2b09      	cmp	r3, #9
 80178fa:	d802      	bhi.n	8017902 <__hexdig_fun+0xe>
 80178fc:	3820      	subs	r0, #32
 80178fe:	b2c0      	uxtb	r0, r0
 8017900:	4770      	bx	lr
 8017902:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017906:	2b05      	cmp	r3, #5
 8017908:	d801      	bhi.n	801790e <__hexdig_fun+0x1a>
 801790a:	3847      	subs	r0, #71	; 0x47
 801790c:	e7f7      	b.n	80178fe <__hexdig_fun+0xa>
 801790e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017912:	2b05      	cmp	r3, #5
 8017914:	d801      	bhi.n	801791a <__hexdig_fun+0x26>
 8017916:	3827      	subs	r0, #39	; 0x27
 8017918:	e7f1      	b.n	80178fe <__hexdig_fun+0xa>
 801791a:	2000      	movs	r0, #0
 801791c:	4770      	bx	lr

0801791e <__gethex>:
 801791e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017922:	b08b      	sub	sp, #44	; 0x2c
 8017924:	468a      	mov	sl, r1
 8017926:	9002      	str	r0, [sp, #8]
 8017928:	9816      	ldr	r0, [sp, #88]	; 0x58
 801792a:	9306      	str	r3, [sp, #24]
 801792c:	4690      	mov	r8, r2
 801792e:	f000 fad0 	bl	8017ed2 <__localeconv_l>
 8017932:	6803      	ldr	r3, [r0, #0]
 8017934:	9303      	str	r3, [sp, #12]
 8017936:	4618      	mov	r0, r3
 8017938:	f7e8 fc54 	bl	80001e4 <strlen>
 801793c:	9b03      	ldr	r3, [sp, #12]
 801793e:	9001      	str	r0, [sp, #4]
 8017940:	4403      	add	r3, r0
 8017942:	f04f 0b00 	mov.w	fp, #0
 8017946:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801794a:	9307      	str	r3, [sp, #28]
 801794c:	f8da 3000 	ldr.w	r3, [sl]
 8017950:	3302      	adds	r3, #2
 8017952:	461f      	mov	r7, r3
 8017954:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017958:	2830      	cmp	r0, #48	; 0x30
 801795a:	d06c      	beq.n	8017a36 <__gethex+0x118>
 801795c:	f7ff ffca 	bl	80178f4 <__hexdig_fun>
 8017960:	4604      	mov	r4, r0
 8017962:	2800      	cmp	r0, #0
 8017964:	d16a      	bne.n	8017a3c <__gethex+0x11e>
 8017966:	9a01      	ldr	r2, [sp, #4]
 8017968:	9903      	ldr	r1, [sp, #12]
 801796a:	4638      	mov	r0, r7
 801796c:	f7fe fa25 	bl	8015dba <strncmp>
 8017970:	2800      	cmp	r0, #0
 8017972:	d166      	bne.n	8017a42 <__gethex+0x124>
 8017974:	9b01      	ldr	r3, [sp, #4]
 8017976:	5cf8      	ldrb	r0, [r7, r3]
 8017978:	18fe      	adds	r6, r7, r3
 801797a:	f7ff ffbb 	bl	80178f4 <__hexdig_fun>
 801797e:	2800      	cmp	r0, #0
 8017980:	d062      	beq.n	8017a48 <__gethex+0x12a>
 8017982:	4633      	mov	r3, r6
 8017984:	7818      	ldrb	r0, [r3, #0]
 8017986:	2830      	cmp	r0, #48	; 0x30
 8017988:	461f      	mov	r7, r3
 801798a:	f103 0301 	add.w	r3, r3, #1
 801798e:	d0f9      	beq.n	8017984 <__gethex+0x66>
 8017990:	f7ff ffb0 	bl	80178f4 <__hexdig_fun>
 8017994:	fab0 f580 	clz	r5, r0
 8017998:	096d      	lsrs	r5, r5, #5
 801799a:	4634      	mov	r4, r6
 801799c:	f04f 0b01 	mov.w	fp, #1
 80179a0:	463a      	mov	r2, r7
 80179a2:	4616      	mov	r6, r2
 80179a4:	3201      	adds	r2, #1
 80179a6:	7830      	ldrb	r0, [r6, #0]
 80179a8:	f7ff ffa4 	bl	80178f4 <__hexdig_fun>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d1f8      	bne.n	80179a2 <__gethex+0x84>
 80179b0:	9a01      	ldr	r2, [sp, #4]
 80179b2:	9903      	ldr	r1, [sp, #12]
 80179b4:	4630      	mov	r0, r6
 80179b6:	f7fe fa00 	bl	8015dba <strncmp>
 80179ba:	b950      	cbnz	r0, 80179d2 <__gethex+0xb4>
 80179bc:	b954      	cbnz	r4, 80179d4 <__gethex+0xb6>
 80179be:	9b01      	ldr	r3, [sp, #4]
 80179c0:	18f4      	adds	r4, r6, r3
 80179c2:	4622      	mov	r2, r4
 80179c4:	4616      	mov	r6, r2
 80179c6:	3201      	adds	r2, #1
 80179c8:	7830      	ldrb	r0, [r6, #0]
 80179ca:	f7ff ff93 	bl	80178f4 <__hexdig_fun>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	d1f8      	bne.n	80179c4 <__gethex+0xa6>
 80179d2:	b10c      	cbz	r4, 80179d8 <__gethex+0xba>
 80179d4:	1ba4      	subs	r4, r4, r6
 80179d6:	00a4      	lsls	r4, r4, #2
 80179d8:	7833      	ldrb	r3, [r6, #0]
 80179da:	2b50      	cmp	r3, #80	; 0x50
 80179dc:	d001      	beq.n	80179e2 <__gethex+0xc4>
 80179de:	2b70      	cmp	r3, #112	; 0x70
 80179e0:	d140      	bne.n	8017a64 <__gethex+0x146>
 80179e2:	7873      	ldrb	r3, [r6, #1]
 80179e4:	2b2b      	cmp	r3, #43	; 0x2b
 80179e6:	d031      	beq.n	8017a4c <__gethex+0x12e>
 80179e8:	2b2d      	cmp	r3, #45	; 0x2d
 80179ea:	d033      	beq.n	8017a54 <__gethex+0x136>
 80179ec:	1c71      	adds	r1, r6, #1
 80179ee:	f04f 0900 	mov.w	r9, #0
 80179f2:	7808      	ldrb	r0, [r1, #0]
 80179f4:	f7ff ff7e 	bl	80178f4 <__hexdig_fun>
 80179f8:	1e43      	subs	r3, r0, #1
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	2b18      	cmp	r3, #24
 80179fe:	d831      	bhi.n	8017a64 <__gethex+0x146>
 8017a00:	f1a0 0210 	sub.w	r2, r0, #16
 8017a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017a08:	f7ff ff74 	bl	80178f4 <__hexdig_fun>
 8017a0c:	1e43      	subs	r3, r0, #1
 8017a0e:	b2db      	uxtb	r3, r3
 8017a10:	2b18      	cmp	r3, #24
 8017a12:	d922      	bls.n	8017a5a <__gethex+0x13c>
 8017a14:	f1b9 0f00 	cmp.w	r9, #0
 8017a18:	d000      	beq.n	8017a1c <__gethex+0xfe>
 8017a1a:	4252      	negs	r2, r2
 8017a1c:	4414      	add	r4, r2
 8017a1e:	f8ca 1000 	str.w	r1, [sl]
 8017a22:	b30d      	cbz	r5, 8017a68 <__gethex+0x14a>
 8017a24:	f1bb 0f00 	cmp.w	fp, #0
 8017a28:	bf0c      	ite	eq
 8017a2a:	2706      	moveq	r7, #6
 8017a2c:	2700      	movne	r7, #0
 8017a2e:	4638      	mov	r0, r7
 8017a30:	b00b      	add	sp, #44	; 0x2c
 8017a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a36:	f10b 0b01 	add.w	fp, fp, #1
 8017a3a:	e78a      	b.n	8017952 <__gethex+0x34>
 8017a3c:	2500      	movs	r5, #0
 8017a3e:	462c      	mov	r4, r5
 8017a40:	e7ae      	b.n	80179a0 <__gethex+0x82>
 8017a42:	463e      	mov	r6, r7
 8017a44:	2501      	movs	r5, #1
 8017a46:	e7c7      	b.n	80179d8 <__gethex+0xba>
 8017a48:	4604      	mov	r4, r0
 8017a4a:	e7fb      	b.n	8017a44 <__gethex+0x126>
 8017a4c:	f04f 0900 	mov.w	r9, #0
 8017a50:	1cb1      	adds	r1, r6, #2
 8017a52:	e7ce      	b.n	80179f2 <__gethex+0xd4>
 8017a54:	f04f 0901 	mov.w	r9, #1
 8017a58:	e7fa      	b.n	8017a50 <__gethex+0x132>
 8017a5a:	230a      	movs	r3, #10
 8017a5c:	fb03 0202 	mla	r2, r3, r2, r0
 8017a60:	3a10      	subs	r2, #16
 8017a62:	e7cf      	b.n	8017a04 <__gethex+0xe6>
 8017a64:	4631      	mov	r1, r6
 8017a66:	e7da      	b.n	8017a1e <__gethex+0x100>
 8017a68:	1bf3      	subs	r3, r6, r7
 8017a6a:	3b01      	subs	r3, #1
 8017a6c:	4629      	mov	r1, r5
 8017a6e:	2b07      	cmp	r3, #7
 8017a70:	dc49      	bgt.n	8017b06 <__gethex+0x1e8>
 8017a72:	9802      	ldr	r0, [sp, #8]
 8017a74:	f000 fa52 	bl	8017f1c <_Balloc>
 8017a78:	9b01      	ldr	r3, [sp, #4]
 8017a7a:	f100 0914 	add.w	r9, r0, #20
 8017a7e:	f04f 0b00 	mov.w	fp, #0
 8017a82:	f1c3 0301 	rsb	r3, r3, #1
 8017a86:	4605      	mov	r5, r0
 8017a88:	f8cd 9010 	str.w	r9, [sp, #16]
 8017a8c:	46da      	mov	sl, fp
 8017a8e:	9308      	str	r3, [sp, #32]
 8017a90:	42b7      	cmp	r7, r6
 8017a92:	d33b      	bcc.n	8017b0c <__gethex+0x1ee>
 8017a94:	9804      	ldr	r0, [sp, #16]
 8017a96:	f840 ab04 	str.w	sl, [r0], #4
 8017a9a:	eba0 0009 	sub.w	r0, r0, r9
 8017a9e:	1080      	asrs	r0, r0, #2
 8017aa0:	6128      	str	r0, [r5, #16]
 8017aa2:	0147      	lsls	r7, r0, #5
 8017aa4:	4650      	mov	r0, sl
 8017aa6:	f000 fafd 	bl	80180a4 <__hi0bits>
 8017aaa:	f8d8 6000 	ldr.w	r6, [r8]
 8017aae:	1a3f      	subs	r7, r7, r0
 8017ab0:	42b7      	cmp	r7, r6
 8017ab2:	dd64      	ble.n	8017b7e <__gethex+0x260>
 8017ab4:	1bbf      	subs	r7, r7, r6
 8017ab6:	4639      	mov	r1, r7
 8017ab8:	4628      	mov	r0, r5
 8017aba:	f000 fe0d 	bl	80186d8 <__any_on>
 8017abe:	4682      	mov	sl, r0
 8017ac0:	b178      	cbz	r0, 8017ae2 <__gethex+0x1c4>
 8017ac2:	1e7b      	subs	r3, r7, #1
 8017ac4:	1159      	asrs	r1, r3, #5
 8017ac6:	f003 021f 	and.w	r2, r3, #31
 8017aca:	f04f 0a01 	mov.w	sl, #1
 8017ace:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017ad2:	fa0a f202 	lsl.w	r2, sl, r2
 8017ad6:	420a      	tst	r2, r1
 8017ad8:	d003      	beq.n	8017ae2 <__gethex+0x1c4>
 8017ada:	4553      	cmp	r3, sl
 8017adc:	dc46      	bgt.n	8017b6c <__gethex+0x24e>
 8017ade:	f04f 0a02 	mov.w	sl, #2
 8017ae2:	4639      	mov	r1, r7
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	f7ff fecb 	bl	8017880 <rshift>
 8017aea:	443c      	add	r4, r7
 8017aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017af0:	42a3      	cmp	r3, r4
 8017af2:	da52      	bge.n	8017b9a <__gethex+0x27c>
 8017af4:	4629      	mov	r1, r5
 8017af6:	9802      	ldr	r0, [sp, #8]
 8017af8:	f000 fa44 	bl	8017f84 <_Bfree>
 8017afc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017afe:	2300      	movs	r3, #0
 8017b00:	6013      	str	r3, [r2, #0]
 8017b02:	27a3      	movs	r7, #163	; 0xa3
 8017b04:	e793      	b.n	8017a2e <__gethex+0x110>
 8017b06:	3101      	adds	r1, #1
 8017b08:	105b      	asrs	r3, r3, #1
 8017b0a:	e7b0      	b.n	8017a6e <__gethex+0x150>
 8017b0c:	1e73      	subs	r3, r6, #1
 8017b0e:	9305      	str	r3, [sp, #20]
 8017b10:	9a07      	ldr	r2, [sp, #28]
 8017b12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017b16:	4293      	cmp	r3, r2
 8017b18:	d018      	beq.n	8017b4c <__gethex+0x22e>
 8017b1a:	f1bb 0f20 	cmp.w	fp, #32
 8017b1e:	d107      	bne.n	8017b30 <__gethex+0x212>
 8017b20:	9b04      	ldr	r3, [sp, #16]
 8017b22:	f8c3 a000 	str.w	sl, [r3]
 8017b26:	3304      	adds	r3, #4
 8017b28:	f04f 0a00 	mov.w	sl, #0
 8017b2c:	9304      	str	r3, [sp, #16]
 8017b2e:	46d3      	mov	fp, sl
 8017b30:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017b34:	f7ff fede 	bl	80178f4 <__hexdig_fun>
 8017b38:	f000 000f 	and.w	r0, r0, #15
 8017b3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017b40:	ea4a 0a00 	orr.w	sl, sl, r0
 8017b44:	f10b 0b04 	add.w	fp, fp, #4
 8017b48:	9b05      	ldr	r3, [sp, #20]
 8017b4a:	e00d      	b.n	8017b68 <__gethex+0x24a>
 8017b4c:	9b05      	ldr	r3, [sp, #20]
 8017b4e:	9a08      	ldr	r2, [sp, #32]
 8017b50:	4413      	add	r3, r2
 8017b52:	42bb      	cmp	r3, r7
 8017b54:	d3e1      	bcc.n	8017b1a <__gethex+0x1fc>
 8017b56:	4618      	mov	r0, r3
 8017b58:	9a01      	ldr	r2, [sp, #4]
 8017b5a:	9903      	ldr	r1, [sp, #12]
 8017b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b5e:	f7fe f92c 	bl	8015dba <strncmp>
 8017b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b64:	2800      	cmp	r0, #0
 8017b66:	d1d8      	bne.n	8017b1a <__gethex+0x1fc>
 8017b68:	461e      	mov	r6, r3
 8017b6a:	e791      	b.n	8017a90 <__gethex+0x172>
 8017b6c:	1eb9      	subs	r1, r7, #2
 8017b6e:	4628      	mov	r0, r5
 8017b70:	f000 fdb2 	bl	80186d8 <__any_on>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d0b2      	beq.n	8017ade <__gethex+0x1c0>
 8017b78:	f04f 0a03 	mov.w	sl, #3
 8017b7c:	e7b1      	b.n	8017ae2 <__gethex+0x1c4>
 8017b7e:	da09      	bge.n	8017b94 <__gethex+0x276>
 8017b80:	1bf7      	subs	r7, r6, r7
 8017b82:	4629      	mov	r1, r5
 8017b84:	463a      	mov	r2, r7
 8017b86:	9802      	ldr	r0, [sp, #8]
 8017b88:	f000 fbc8 	bl	801831c <__lshift>
 8017b8c:	1be4      	subs	r4, r4, r7
 8017b8e:	4605      	mov	r5, r0
 8017b90:	f100 0914 	add.w	r9, r0, #20
 8017b94:	f04f 0a00 	mov.w	sl, #0
 8017b98:	e7a8      	b.n	8017aec <__gethex+0x1ce>
 8017b9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017b9e:	42a0      	cmp	r0, r4
 8017ba0:	dd6a      	ble.n	8017c78 <__gethex+0x35a>
 8017ba2:	1b04      	subs	r4, r0, r4
 8017ba4:	42a6      	cmp	r6, r4
 8017ba6:	dc2e      	bgt.n	8017c06 <__gethex+0x2e8>
 8017ba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bac:	2b02      	cmp	r3, #2
 8017bae:	d022      	beq.n	8017bf6 <__gethex+0x2d8>
 8017bb0:	2b03      	cmp	r3, #3
 8017bb2:	d024      	beq.n	8017bfe <__gethex+0x2e0>
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d115      	bne.n	8017be4 <__gethex+0x2c6>
 8017bb8:	42a6      	cmp	r6, r4
 8017bba:	d113      	bne.n	8017be4 <__gethex+0x2c6>
 8017bbc:	2e01      	cmp	r6, #1
 8017bbe:	dc0b      	bgt.n	8017bd8 <__gethex+0x2ba>
 8017bc0:	9a06      	ldr	r2, [sp, #24]
 8017bc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017bc6:	6013      	str	r3, [r2, #0]
 8017bc8:	2301      	movs	r3, #1
 8017bca:	612b      	str	r3, [r5, #16]
 8017bcc:	f8c9 3000 	str.w	r3, [r9]
 8017bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017bd2:	2762      	movs	r7, #98	; 0x62
 8017bd4:	601d      	str	r5, [r3, #0]
 8017bd6:	e72a      	b.n	8017a2e <__gethex+0x110>
 8017bd8:	1e71      	subs	r1, r6, #1
 8017bda:	4628      	mov	r0, r5
 8017bdc:	f000 fd7c 	bl	80186d8 <__any_on>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	d1ed      	bne.n	8017bc0 <__gethex+0x2a2>
 8017be4:	4629      	mov	r1, r5
 8017be6:	9802      	ldr	r0, [sp, #8]
 8017be8:	f000 f9cc 	bl	8017f84 <_Bfree>
 8017bec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017bee:	2300      	movs	r3, #0
 8017bf0:	6013      	str	r3, [r2, #0]
 8017bf2:	2750      	movs	r7, #80	; 0x50
 8017bf4:	e71b      	b.n	8017a2e <__gethex+0x110>
 8017bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d0e1      	beq.n	8017bc0 <__gethex+0x2a2>
 8017bfc:	e7f2      	b.n	8017be4 <__gethex+0x2c6>
 8017bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d1dd      	bne.n	8017bc0 <__gethex+0x2a2>
 8017c04:	e7ee      	b.n	8017be4 <__gethex+0x2c6>
 8017c06:	1e67      	subs	r7, r4, #1
 8017c08:	f1ba 0f00 	cmp.w	sl, #0
 8017c0c:	d131      	bne.n	8017c72 <__gethex+0x354>
 8017c0e:	b127      	cbz	r7, 8017c1a <__gethex+0x2fc>
 8017c10:	4639      	mov	r1, r7
 8017c12:	4628      	mov	r0, r5
 8017c14:	f000 fd60 	bl	80186d8 <__any_on>
 8017c18:	4682      	mov	sl, r0
 8017c1a:	117a      	asrs	r2, r7, #5
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	f007 071f 	and.w	r7, r7, #31
 8017c22:	fa03 f707 	lsl.w	r7, r3, r7
 8017c26:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	421f      	tst	r7, r3
 8017c2e:	4628      	mov	r0, r5
 8017c30:	bf18      	it	ne
 8017c32:	f04a 0a02 	orrne.w	sl, sl, #2
 8017c36:	1b36      	subs	r6, r6, r4
 8017c38:	f7ff fe22 	bl	8017880 <rshift>
 8017c3c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017c40:	2702      	movs	r7, #2
 8017c42:	f1ba 0f00 	cmp.w	sl, #0
 8017c46:	d048      	beq.n	8017cda <__gethex+0x3bc>
 8017c48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c4c:	2b02      	cmp	r3, #2
 8017c4e:	d015      	beq.n	8017c7c <__gethex+0x35e>
 8017c50:	2b03      	cmp	r3, #3
 8017c52:	d017      	beq.n	8017c84 <__gethex+0x366>
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d109      	bne.n	8017c6c <__gethex+0x34e>
 8017c58:	f01a 0f02 	tst.w	sl, #2
 8017c5c:	d006      	beq.n	8017c6c <__gethex+0x34e>
 8017c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8017c62:	ea4a 0a03 	orr.w	sl, sl, r3
 8017c66:	f01a 0f01 	tst.w	sl, #1
 8017c6a:	d10e      	bne.n	8017c8a <__gethex+0x36c>
 8017c6c:	f047 0710 	orr.w	r7, r7, #16
 8017c70:	e033      	b.n	8017cda <__gethex+0x3bc>
 8017c72:	f04f 0a01 	mov.w	sl, #1
 8017c76:	e7d0      	b.n	8017c1a <__gethex+0x2fc>
 8017c78:	2701      	movs	r7, #1
 8017c7a:	e7e2      	b.n	8017c42 <__gethex+0x324>
 8017c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c7e:	f1c3 0301 	rsb	r3, r3, #1
 8017c82:	9315      	str	r3, [sp, #84]	; 0x54
 8017c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d0f0      	beq.n	8017c6c <__gethex+0x34e>
 8017c8a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017c8e:	f105 0314 	add.w	r3, r5, #20
 8017c92:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017c96:	eb03 010a 	add.w	r1, r3, sl
 8017c9a:	f04f 0c00 	mov.w	ip, #0
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ca4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017ca8:	d01c      	beq.n	8017ce4 <__gethex+0x3c6>
 8017caa:	3201      	adds	r2, #1
 8017cac:	6002      	str	r2, [r0, #0]
 8017cae:	2f02      	cmp	r7, #2
 8017cb0:	f105 0314 	add.w	r3, r5, #20
 8017cb4:	d138      	bne.n	8017d28 <__gethex+0x40a>
 8017cb6:	f8d8 2000 	ldr.w	r2, [r8]
 8017cba:	3a01      	subs	r2, #1
 8017cbc:	42b2      	cmp	r2, r6
 8017cbe:	d10a      	bne.n	8017cd6 <__gethex+0x3b8>
 8017cc0:	1171      	asrs	r1, r6, #5
 8017cc2:	2201      	movs	r2, #1
 8017cc4:	f006 061f 	and.w	r6, r6, #31
 8017cc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ccc:	fa02 f606 	lsl.w	r6, r2, r6
 8017cd0:	421e      	tst	r6, r3
 8017cd2:	bf18      	it	ne
 8017cd4:	4617      	movne	r7, r2
 8017cd6:	f047 0720 	orr.w	r7, r7, #32
 8017cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cdc:	601d      	str	r5, [r3, #0]
 8017cde:	9b06      	ldr	r3, [sp, #24]
 8017ce0:	601c      	str	r4, [r3, #0]
 8017ce2:	e6a4      	b.n	8017a2e <__gethex+0x110>
 8017ce4:	4299      	cmp	r1, r3
 8017ce6:	f843 cc04 	str.w	ip, [r3, #-4]
 8017cea:	d8d8      	bhi.n	8017c9e <__gethex+0x380>
 8017cec:	68ab      	ldr	r3, [r5, #8]
 8017cee:	4599      	cmp	r9, r3
 8017cf0:	db12      	blt.n	8017d18 <__gethex+0x3fa>
 8017cf2:	6869      	ldr	r1, [r5, #4]
 8017cf4:	9802      	ldr	r0, [sp, #8]
 8017cf6:	3101      	adds	r1, #1
 8017cf8:	f000 f910 	bl	8017f1c <_Balloc>
 8017cfc:	692a      	ldr	r2, [r5, #16]
 8017cfe:	3202      	adds	r2, #2
 8017d00:	f105 010c 	add.w	r1, r5, #12
 8017d04:	4683      	mov	fp, r0
 8017d06:	0092      	lsls	r2, r2, #2
 8017d08:	300c      	adds	r0, #12
 8017d0a:	f7fd f911 	bl	8014f30 <memcpy>
 8017d0e:	4629      	mov	r1, r5
 8017d10:	9802      	ldr	r0, [sp, #8]
 8017d12:	f000 f937 	bl	8017f84 <_Bfree>
 8017d16:	465d      	mov	r5, fp
 8017d18:	692b      	ldr	r3, [r5, #16]
 8017d1a:	1c5a      	adds	r2, r3, #1
 8017d1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017d20:	612a      	str	r2, [r5, #16]
 8017d22:	2201      	movs	r2, #1
 8017d24:	615a      	str	r2, [r3, #20]
 8017d26:	e7c2      	b.n	8017cae <__gethex+0x390>
 8017d28:	692a      	ldr	r2, [r5, #16]
 8017d2a:	454a      	cmp	r2, r9
 8017d2c:	dd0b      	ble.n	8017d46 <__gethex+0x428>
 8017d2e:	2101      	movs	r1, #1
 8017d30:	4628      	mov	r0, r5
 8017d32:	f7ff fda5 	bl	8017880 <rshift>
 8017d36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d3a:	3401      	adds	r4, #1
 8017d3c:	42a3      	cmp	r3, r4
 8017d3e:	f6ff aed9 	blt.w	8017af4 <__gethex+0x1d6>
 8017d42:	2701      	movs	r7, #1
 8017d44:	e7c7      	b.n	8017cd6 <__gethex+0x3b8>
 8017d46:	f016 061f 	ands.w	r6, r6, #31
 8017d4a:	d0fa      	beq.n	8017d42 <__gethex+0x424>
 8017d4c:	449a      	add	sl, r3
 8017d4e:	f1c6 0620 	rsb	r6, r6, #32
 8017d52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017d56:	f000 f9a5 	bl	80180a4 <__hi0bits>
 8017d5a:	42b0      	cmp	r0, r6
 8017d5c:	dbe7      	blt.n	8017d2e <__gethex+0x410>
 8017d5e:	e7f0      	b.n	8017d42 <__gethex+0x424>

08017d60 <L_shift>:
 8017d60:	f1c2 0208 	rsb	r2, r2, #8
 8017d64:	0092      	lsls	r2, r2, #2
 8017d66:	b570      	push	{r4, r5, r6, lr}
 8017d68:	f1c2 0620 	rsb	r6, r2, #32
 8017d6c:	6843      	ldr	r3, [r0, #4]
 8017d6e:	6804      	ldr	r4, [r0, #0]
 8017d70:	fa03 f506 	lsl.w	r5, r3, r6
 8017d74:	432c      	orrs	r4, r5
 8017d76:	40d3      	lsrs	r3, r2
 8017d78:	6004      	str	r4, [r0, #0]
 8017d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d7e:	4288      	cmp	r0, r1
 8017d80:	d3f4      	bcc.n	8017d6c <L_shift+0xc>
 8017d82:	bd70      	pop	{r4, r5, r6, pc}

08017d84 <__match>:
 8017d84:	b530      	push	{r4, r5, lr}
 8017d86:	6803      	ldr	r3, [r0, #0]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d8e:	b914      	cbnz	r4, 8017d96 <__match+0x12>
 8017d90:	6003      	str	r3, [r0, #0]
 8017d92:	2001      	movs	r0, #1
 8017d94:	bd30      	pop	{r4, r5, pc}
 8017d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d9e:	2d19      	cmp	r5, #25
 8017da0:	bf98      	it	ls
 8017da2:	3220      	addls	r2, #32
 8017da4:	42a2      	cmp	r2, r4
 8017da6:	d0f0      	beq.n	8017d8a <__match+0x6>
 8017da8:	2000      	movs	r0, #0
 8017daa:	e7f3      	b.n	8017d94 <__match+0x10>

08017dac <__hexnan>:
 8017dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db0:	680b      	ldr	r3, [r1, #0]
 8017db2:	6801      	ldr	r1, [r0, #0]
 8017db4:	115f      	asrs	r7, r3, #5
 8017db6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017dba:	f013 031f 	ands.w	r3, r3, #31
 8017dbe:	b087      	sub	sp, #28
 8017dc0:	bf18      	it	ne
 8017dc2:	3704      	addne	r7, #4
 8017dc4:	2500      	movs	r5, #0
 8017dc6:	1f3e      	subs	r6, r7, #4
 8017dc8:	4682      	mov	sl, r0
 8017dca:	4690      	mov	r8, r2
 8017dcc:	9301      	str	r3, [sp, #4]
 8017dce:	f847 5c04 	str.w	r5, [r7, #-4]
 8017dd2:	46b1      	mov	r9, r6
 8017dd4:	4634      	mov	r4, r6
 8017dd6:	9502      	str	r5, [sp, #8]
 8017dd8:	46ab      	mov	fp, r5
 8017dda:	784a      	ldrb	r2, [r1, #1]
 8017ddc:	1c4b      	adds	r3, r1, #1
 8017dde:	9303      	str	r3, [sp, #12]
 8017de0:	b342      	cbz	r2, 8017e34 <__hexnan+0x88>
 8017de2:	4610      	mov	r0, r2
 8017de4:	9105      	str	r1, [sp, #20]
 8017de6:	9204      	str	r2, [sp, #16]
 8017de8:	f7ff fd84 	bl	80178f4 <__hexdig_fun>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d143      	bne.n	8017e78 <__hexnan+0xcc>
 8017df0:	9a04      	ldr	r2, [sp, #16]
 8017df2:	9905      	ldr	r1, [sp, #20]
 8017df4:	2a20      	cmp	r2, #32
 8017df6:	d818      	bhi.n	8017e2a <__hexnan+0x7e>
 8017df8:	9b02      	ldr	r3, [sp, #8]
 8017dfa:	459b      	cmp	fp, r3
 8017dfc:	dd13      	ble.n	8017e26 <__hexnan+0x7a>
 8017dfe:	454c      	cmp	r4, r9
 8017e00:	d206      	bcs.n	8017e10 <__hexnan+0x64>
 8017e02:	2d07      	cmp	r5, #7
 8017e04:	dc04      	bgt.n	8017e10 <__hexnan+0x64>
 8017e06:	462a      	mov	r2, r5
 8017e08:	4649      	mov	r1, r9
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7ff ffa8 	bl	8017d60 <L_shift>
 8017e10:	4544      	cmp	r4, r8
 8017e12:	d944      	bls.n	8017e9e <__hexnan+0xf2>
 8017e14:	2300      	movs	r3, #0
 8017e16:	f1a4 0904 	sub.w	r9, r4, #4
 8017e1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e1e:	f8cd b008 	str.w	fp, [sp, #8]
 8017e22:	464c      	mov	r4, r9
 8017e24:	461d      	mov	r5, r3
 8017e26:	9903      	ldr	r1, [sp, #12]
 8017e28:	e7d7      	b.n	8017dda <__hexnan+0x2e>
 8017e2a:	2a29      	cmp	r2, #41	; 0x29
 8017e2c:	d14a      	bne.n	8017ec4 <__hexnan+0x118>
 8017e2e:	3102      	adds	r1, #2
 8017e30:	f8ca 1000 	str.w	r1, [sl]
 8017e34:	f1bb 0f00 	cmp.w	fp, #0
 8017e38:	d044      	beq.n	8017ec4 <__hexnan+0x118>
 8017e3a:	454c      	cmp	r4, r9
 8017e3c:	d206      	bcs.n	8017e4c <__hexnan+0xa0>
 8017e3e:	2d07      	cmp	r5, #7
 8017e40:	dc04      	bgt.n	8017e4c <__hexnan+0xa0>
 8017e42:	462a      	mov	r2, r5
 8017e44:	4649      	mov	r1, r9
 8017e46:	4620      	mov	r0, r4
 8017e48:	f7ff ff8a 	bl	8017d60 <L_shift>
 8017e4c:	4544      	cmp	r4, r8
 8017e4e:	d928      	bls.n	8017ea2 <__hexnan+0xf6>
 8017e50:	4643      	mov	r3, r8
 8017e52:	f854 2b04 	ldr.w	r2, [r4], #4
 8017e56:	f843 2b04 	str.w	r2, [r3], #4
 8017e5a:	42a6      	cmp	r6, r4
 8017e5c:	d2f9      	bcs.n	8017e52 <__hexnan+0xa6>
 8017e5e:	2200      	movs	r2, #0
 8017e60:	f843 2b04 	str.w	r2, [r3], #4
 8017e64:	429e      	cmp	r6, r3
 8017e66:	d2fb      	bcs.n	8017e60 <__hexnan+0xb4>
 8017e68:	6833      	ldr	r3, [r6, #0]
 8017e6a:	b91b      	cbnz	r3, 8017e74 <__hexnan+0xc8>
 8017e6c:	4546      	cmp	r6, r8
 8017e6e:	d127      	bne.n	8017ec0 <__hexnan+0x114>
 8017e70:	2301      	movs	r3, #1
 8017e72:	6033      	str	r3, [r6, #0]
 8017e74:	2005      	movs	r0, #5
 8017e76:	e026      	b.n	8017ec6 <__hexnan+0x11a>
 8017e78:	3501      	adds	r5, #1
 8017e7a:	2d08      	cmp	r5, #8
 8017e7c:	f10b 0b01 	add.w	fp, fp, #1
 8017e80:	dd06      	ble.n	8017e90 <__hexnan+0xe4>
 8017e82:	4544      	cmp	r4, r8
 8017e84:	d9cf      	bls.n	8017e26 <__hexnan+0x7a>
 8017e86:	2300      	movs	r3, #0
 8017e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e8c:	2501      	movs	r5, #1
 8017e8e:	3c04      	subs	r4, #4
 8017e90:	6822      	ldr	r2, [r4, #0]
 8017e92:	f000 000f 	and.w	r0, r0, #15
 8017e96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e9a:	6020      	str	r0, [r4, #0]
 8017e9c:	e7c3      	b.n	8017e26 <__hexnan+0x7a>
 8017e9e:	2508      	movs	r5, #8
 8017ea0:	e7c1      	b.n	8017e26 <__hexnan+0x7a>
 8017ea2:	9b01      	ldr	r3, [sp, #4]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d0df      	beq.n	8017e68 <__hexnan+0xbc>
 8017ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8017eac:	f1c3 0320 	rsb	r3, r3, #32
 8017eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8017eb4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017eb8:	401a      	ands	r2, r3
 8017eba:	f847 2c04 	str.w	r2, [r7, #-4]
 8017ebe:	e7d3      	b.n	8017e68 <__hexnan+0xbc>
 8017ec0:	3e04      	subs	r6, #4
 8017ec2:	e7d1      	b.n	8017e68 <__hexnan+0xbc>
 8017ec4:	2004      	movs	r0, #4
 8017ec6:	b007      	add	sp, #28
 8017ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ecc <__locale_ctype_ptr_l>:
 8017ecc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017ed0:	4770      	bx	lr

08017ed2 <__localeconv_l>:
 8017ed2:	30f0      	adds	r0, #240	; 0xf0
 8017ed4:	4770      	bx	lr
	...

08017ed8 <_localeconv_r>:
 8017ed8:	4b04      	ldr	r3, [pc, #16]	; (8017eec <_localeconv_r+0x14>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	6a18      	ldr	r0, [r3, #32]
 8017ede:	4b04      	ldr	r3, [pc, #16]	; (8017ef0 <_localeconv_r+0x18>)
 8017ee0:	2800      	cmp	r0, #0
 8017ee2:	bf08      	it	eq
 8017ee4:	4618      	moveq	r0, r3
 8017ee6:	30f0      	adds	r0, #240	; 0xf0
 8017ee8:	4770      	bx	lr
 8017eea:	bf00      	nop
 8017eec:	200001d4 	.word	0x200001d4
 8017ef0:	20000238 	.word	0x20000238

08017ef4 <__ascii_mbtowc>:
 8017ef4:	b082      	sub	sp, #8
 8017ef6:	b901      	cbnz	r1, 8017efa <__ascii_mbtowc+0x6>
 8017ef8:	a901      	add	r1, sp, #4
 8017efa:	b142      	cbz	r2, 8017f0e <__ascii_mbtowc+0x1a>
 8017efc:	b14b      	cbz	r3, 8017f12 <__ascii_mbtowc+0x1e>
 8017efe:	7813      	ldrb	r3, [r2, #0]
 8017f00:	600b      	str	r3, [r1, #0]
 8017f02:	7812      	ldrb	r2, [r2, #0]
 8017f04:	1c10      	adds	r0, r2, #0
 8017f06:	bf18      	it	ne
 8017f08:	2001      	movne	r0, #1
 8017f0a:	b002      	add	sp, #8
 8017f0c:	4770      	bx	lr
 8017f0e:	4610      	mov	r0, r2
 8017f10:	e7fb      	b.n	8017f0a <__ascii_mbtowc+0x16>
 8017f12:	f06f 0001 	mvn.w	r0, #1
 8017f16:	e7f8      	b.n	8017f0a <__ascii_mbtowc+0x16>

08017f18 <__malloc_lock>:
 8017f18:	4770      	bx	lr

08017f1a <__malloc_unlock>:
 8017f1a:	4770      	bx	lr

08017f1c <_Balloc>:
 8017f1c:	b570      	push	{r4, r5, r6, lr}
 8017f1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f20:	4604      	mov	r4, r0
 8017f22:	460e      	mov	r6, r1
 8017f24:	b93d      	cbnz	r5, 8017f36 <_Balloc+0x1a>
 8017f26:	2010      	movs	r0, #16
 8017f28:	f7fc fff2 	bl	8014f10 <malloc>
 8017f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8017f2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f32:	6005      	str	r5, [r0, #0]
 8017f34:	60c5      	str	r5, [r0, #12]
 8017f36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017f38:	68eb      	ldr	r3, [r5, #12]
 8017f3a:	b183      	cbz	r3, 8017f5e <_Balloc+0x42>
 8017f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f3e:	68db      	ldr	r3, [r3, #12]
 8017f40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017f44:	b9b8      	cbnz	r0, 8017f76 <_Balloc+0x5a>
 8017f46:	2101      	movs	r1, #1
 8017f48:	fa01 f506 	lsl.w	r5, r1, r6
 8017f4c:	1d6a      	adds	r2, r5, #5
 8017f4e:	0092      	lsls	r2, r2, #2
 8017f50:	4620      	mov	r0, r4
 8017f52:	f000 fbe2 	bl	801871a <_calloc_r>
 8017f56:	b160      	cbz	r0, 8017f72 <_Balloc+0x56>
 8017f58:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017f5c:	e00e      	b.n	8017f7c <_Balloc+0x60>
 8017f5e:	2221      	movs	r2, #33	; 0x21
 8017f60:	2104      	movs	r1, #4
 8017f62:	4620      	mov	r0, r4
 8017f64:	f000 fbd9 	bl	801871a <_calloc_r>
 8017f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f6a:	60e8      	str	r0, [r5, #12]
 8017f6c:	68db      	ldr	r3, [r3, #12]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d1e4      	bne.n	8017f3c <_Balloc+0x20>
 8017f72:	2000      	movs	r0, #0
 8017f74:	bd70      	pop	{r4, r5, r6, pc}
 8017f76:	6802      	ldr	r2, [r0, #0]
 8017f78:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f82:	e7f7      	b.n	8017f74 <_Balloc+0x58>

08017f84 <_Bfree>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017f88:	4606      	mov	r6, r0
 8017f8a:	460d      	mov	r5, r1
 8017f8c:	b93c      	cbnz	r4, 8017f9e <_Bfree+0x1a>
 8017f8e:	2010      	movs	r0, #16
 8017f90:	f7fc ffbe 	bl	8014f10 <malloc>
 8017f94:	6270      	str	r0, [r6, #36]	; 0x24
 8017f96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f9a:	6004      	str	r4, [r0, #0]
 8017f9c:	60c4      	str	r4, [r0, #12]
 8017f9e:	b13d      	cbz	r5, 8017fb0 <_Bfree+0x2c>
 8017fa0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017fa2:	686a      	ldr	r2, [r5, #4]
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017faa:	6029      	str	r1, [r5, #0]
 8017fac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017fb0:	bd70      	pop	{r4, r5, r6, pc}

08017fb2 <__multadd>:
 8017fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb6:	690d      	ldr	r5, [r1, #16]
 8017fb8:	461f      	mov	r7, r3
 8017fba:	4606      	mov	r6, r0
 8017fbc:	460c      	mov	r4, r1
 8017fbe:	f101 0c14 	add.w	ip, r1, #20
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	f8dc 0000 	ldr.w	r0, [ip]
 8017fc8:	b281      	uxth	r1, r0
 8017fca:	fb02 7101 	mla	r1, r2, r1, r7
 8017fce:	0c0f      	lsrs	r7, r1, #16
 8017fd0:	0c00      	lsrs	r0, r0, #16
 8017fd2:	fb02 7000 	mla	r0, r2, r0, r7
 8017fd6:	b289      	uxth	r1, r1
 8017fd8:	3301      	adds	r3, #1
 8017fda:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017fde:	429d      	cmp	r5, r3
 8017fe0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017fe4:	f84c 1b04 	str.w	r1, [ip], #4
 8017fe8:	dcec      	bgt.n	8017fc4 <__multadd+0x12>
 8017fea:	b1d7      	cbz	r7, 8018022 <__multadd+0x70>
 8017fec:	68a3      	ldr	r3, [r4, #8]
 8017fee:	42ab      	cmp	r3, r5
 8017ff0:	dc12      	bgt.n	8018018 <__multadd+0x66>
 8017ff2:	6861      	ldr	r1, [r4, #4]
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	3101      	adds	r1, #1
 8017ff8:	f7ff ff90 	bl	8017f1c <_Balloc>
 8017ffc:	6922      	ldr	r2, [r4, #16]
 8017ffe:	3202      	adds	r2, #2
 8018000:	f104 010c 	add.w	r1, r4, #12
 8018004:	4680      	mov	r8, r0
 8018006:	0092      	lsls	r2, r2, #2
 8018008:	300c      	adds	r0, #12
 801800a:	f7fc ff91 	bl	8014f30 <memcpy>
 801800e:	4621      	mov	r1, r4
 8018010:	4630      	mov	r0, r6
 8018012:	f7ff ffb7 	bl	8017f84 <_Bfree>
 8018016:	4644      	mov	r4, r8
 8018018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801801c:	3501      	adds	r5, #1
 801801e:	615f      	str	r7, [r3, #20]
 8018020:	6125      	str	r5, [r4, #16]
 8018022:	4620      	mov	r0, r4
 8018024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018028 <__s2b>:
 8018028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801802c:	460c      	mov	r4, r1
 801802e:	4615      	mov	r5, r2
 8018030:	461f      	mov	r7, r3
 8018032:	2209      	movs	r2, #9
 8018034:	3308      	adds	r3, #8
 8018036:	4606      	mov	r6, r0
 8018038:	fb93 f3f2 	sdiv	r3, r3, r2
 801803c:	2100      	movs	r1, #0
 801803e:	2201      	movs	r2, #1
 8018040:	429a      	cmp	r2, r3
 8018042:	db20      	blt.n	8018086 <__s2b+0x5e>
 8018044:	4630      	mov	r0, r6
 8018046:	f7ff ff69 	bl	8017f1c <_Balloc>
 801804a:	9b08      	ldr	r3, [sp, #32]
 801804c:	6143      	str	r3, [r0, #20]
 801804e:	2d09      	cmp	r5, #9
 8018050:	f04f 0301 	mov.w	r3, #1
 8018054:	6103      	str	r3, [r0, #16]
 8018056:	dd19      	ble.n	801808c <__s2b+0x64>
 8018058:	f104 0809 	add.w	r8, r4, #9
 801805c:	46c1      	mov	r9, r8
 801805e:	442c      	add	r4, r5
 8018060:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018064:	4601      	mov	r1, r0
 8018066:	3b30      	subs	r3, #48	; 0x30
 8018068:	220a      	movs	r2, #10
 801806a:	4630      	mov	r0, r6
 801806c:	f7ff ffa1 	bl	8017fb2 <__multadd>
 8018070:	45a1      	cmp	r9, r4
 8018072:	d1f5      	bne.n	8018060 <__s2b+0x38>
 8018074:	eb08 0405 	add.w	r4, r8, r5
 8018078:	3c08      	subs	r4, #8
 801807a:	1b2d      	subs	r5, r5, r4
 801807c:	1963      	adds	r3, r4, r5
 801807e:	42bb      	cmp	r3, r7
 8018080:	db07      	blt.n	8018092 <__s2b+0x6a>
 8018082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018086:	0052      	lsls	r2, r2, #1
 8018088:	3101      	adds	r1, #1
 801808a:	e7d9      	b.n	8018040 <__s2b+0x18>
 801808c:	340a      	adds	r4, #10
 801808e:	2509      	movs	r5, #9
 8018090:	e7f3      	b.n	801807a <__s2b+0x52>
 8018092:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018096:	4601      	mov	r1, r0
 8018098:	3b30      	subs	r3, #48	; 0x30
 801809a:	220a      	movs	r2, #10
 801809c:	4630      	mov	r0, r6
 801809e:	f7ff ff88 	bl	8017fb2 <__multadd>
 80180a2:	e7eb      	b.n	801807c <__s2b+0x54>

080180a4 <__hi0bits>:
 80180a4:	0c02      	lsrs	r2, r0, #16
 80180a6:	0412      	lsls	r2, r2, #16
 80180a8:	4603      	mov	r3, r0
 80180aa:	b9b2      	cbnz	r2, 80180da <__hi0bits+0x36>
 80180ac:	0403      	lsls	r3, r0, #16
 80180ae:	2010      	movs	r0, #16
 80180b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80180b4:	bf04      	itt	eq
 80180b6:	021b      	lsleq	r3, r3, #8
 80180b8:	3008      	addeq	r0, #8
 80180ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80180be:	bf04      	itt	eq
 80180c0:	011b      	lsleq	r3, r3, #4
 80180c2:	3004      	addeq	r0, #4
 80180c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80180c8:	bf04      	itt	eq
 80180ca:	009b      	lsleq	r3, r3, #2
 80180cc:	3002      	addeq	r0, #2
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	db06      	blt.n	80180e0 <__hi0bits+0x3c>
 80180d2:	005b      	lsls	r3, r3, #1
 80180d4:	d503      	bpl.n	80180de <__hi0bits+0x3a>
 80180d6:	3001      	adds	r0, #1
 80180d8:	4770      	bx	lr
 80180da:	2000      	movs	r0, #0
 80180dc:	e7e8      	b.n	80180b0 <__hi0bits+0xc>
 80180de:	2020      	movs	r0, #32
 80180e0:	4770      	bx	lr

080180e2 <__lo0bits>:
 80180e2:	6803      	ldr	r3, [r0, #0]
 80180e4:	f013 0207 	ands.w	r2, r3, #7
 80180e8:	4601      	mov	r1, r0
 80180ea:	d00b      	beq.n	8018104 <__lo0bits+0x22>
 80180ec:	07da      	lsls	r2, r3, #31
 80180ee:	d423      	bmi.n	8018138 <__lo0bits+0x56>
 80180f0:	0798      	lsls	r0, r3, #30
 80180f2:	bf49      	itett	mi
 80180f4:	085b      	lsrmi	r3, r3, #1
 80180f6:	089b      	lsrpl	r3, r3, #2
 80180f8:	2001      	movmi	r0, #1
 80180fa:	600b      	strmi	r3, [r1, #0]
 80180fc:	bf5c      	itt	pl
 80180fe:	600b      	strpl	r3, [r1, #0]
 8018100:	2002      	movpl	r0, #2
 8018102:	4770      	bx	lr
 8018104:	b298      	uxth	r0, r3
 8018106:	b9a8      	cbnz	r0, 8018134 <__lo0bits+0x52>
 8018108:	0c1b      	lsrs	r3, r3, #16
 801810a:	2010      	movs	r0, #16
 801810c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018110:	bf04      	itt	eq
 8018112:	0a1b      	lsreq	r3, r3, #8
 8018114:	3008      	addeq	r0, #8
 8018116:	071a      	lsls	r2, r3, #28
 8018118:	bf04      	itt	eq
 801811a:	091b      	lsreq	r3, r3, #4
 801811c:	3004      	addeq	r0, #4
 801811e:	079a      	lsls	r2, r3, #30
 8018120:	bf04      	itt	eq
 8018122:	089b      	lsreq	r3, r3, #2
 8018124:	3002      	addeq	r0, #2
 8018126:	07da      	lsls	r2, r3, #31
 8018128:	d402      	bmi.n	8018130 <__lo0bits+0x4e>
 801812a:	085b      	lsrs	r3, r3, #1
 801812c:	d006      	beq.n	801813c <__lo0bits+0x5a>
 801812e:	3001      	adds	r0, #1
 8018130:	600b      	str	r3, [r1, #0]
 8018132:	4770      	bx	lr
 8018134:	4610      	mov	r0, r2
 8018136:	e7e9      	b.n	801810c <__lo0bits+0x2a>
 8018138:	2000      	movs	r0, #0
 801813a:	4770      	bx	lr
 801813c:	2020      	movs	r0, #32
 801813e:	4770      	bx	lr

08018140 <__i2b>:
 8018140:	b510      	push	{r4, lr}
 8018142:	460c      	mov	r4, r1
 8018144:	2101      	movs	r1, #1
 8018146:	f7ff fee9 	bl	8017f1c <_Balloc>
 801814a:	2201      	movs	r2, #1
 801814c:	6144      	str	r4, [r0, #20]
 801814e:	6102      	str	r2, [r0, #16]
 8018150:	bd10      	pop	{r4, pc}

08018152 <__multiply>:
 8018152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018156:	4614      	mov	r4, r2
 8018158:	690a      	ldr	r2, [r1, #16]
 801815a:	6923      	ldr	r3, [r4, #16]
 801815c:	429a      	cmp	r2, r3
 801815e:	bfb8      	it	lt
 8018160:	460b      	movlt	r3, r1
 8018162:	4688      	mov	r8, r1
 8018164:	bfbc      	itt	lt
 8018166:	46a0      	movlt	r8, r4
 8018168:	461c      	movlt	r4, r3
 801816a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801816e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018176:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801817a:	eb07 0609 	add.w	r6, r7, r9
 801817e:	42b3      	cmp	r3, r6
 8018180:	bfb8      	it	lt
 8018182:	3101      	addlt	r1, #1
 8018184:	f7ff feca 	bl	8017f1c <_Balloc>
 8018188:	f100 0514 	add.w	r5, r0, #20
 801818c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018190:	462b      	mov	r3, r5
 8018192:	2200      	movs	r2, #0
 8018194:	4573      	cmp	r3, lr
 8018196:	d316      	bcc.n	80181c6 <__multiply+0x74>
 8018198:	f104 0214 	add.w	r2, r4, #20
 801819c:	f108 0114 	add.w	r1, r8, #20
 80181a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80181a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80181a8:	9300      	str	r3, [sp, #0]
 80181aa:	9b00      	ldr	r3, [sp, #0]
 80181ac:	9201      	str	r2, [sp, #4]
 80181ae:	4293      	cmp	r3, r2
 80181b0:	d80c      	bhi.n	80181cc <__multiply+0x7a>
 80181b2:	2e00      	cmp	r6, #0
 80181b4:	dd03      	ble.n	80181be <__multiply+0x6c>
 80181b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d05d      	beq.n	801827a <__multiply+0x128>
 80181be:	6106      	str	r6, [r0, #16]
 80181c0:	b003      	add	sp, #12
 80181c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c6:	f843 2b04 	str.w	r2, [r3], #4
 80181ca:	e7e3      	b.n	8018194 <__multiply+0x42>
 80181cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80181d0:	f1bb 0f00 	cmp.w	fp, #0
 80181d4:	d023      	beq.n	801821e <__multiply+0xcc>
 80181d6:	4689      	mov	r9, r1
 80181d8:	46ac      	mov	ip, r5
 80181da:	f04f 0800 	mov.w	r8, #0
 80181de:	f859 4b04 	ldr.w	r4, [r9], #4
 80181e2:	f8dc a000 	ldr.w	sl, [ip]
 80181e6:	b2a3      	uxth	r3, r4
 80181e8:	fa1f fa8a 	uxth.w	sl, sl
 80181ec:	fb0b a303 	mla	r3, fp, r3, sl
 80181f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80181f4:	f8dc 4000 	ldr.w	r4, [ip]
 80181f8:	4443      	add	r3, r8
 80181fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80181fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8018202:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018206:	46e2      	mov	sl, ip
 8018208:	b29b      	uxth	r3, r3
 801820a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801820e:	454f      	cmp	r7, r9
 8018210:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018214:	f84a 3b04 	str.w	r3, [sl], #4
 8018218:	d82b      	bhi.n	8018272 <__multiply+0x120>
 801821a:	f8cc 8004 	str.w	r8, [ip, #4]
 801821e:	9b01      	ldr	r3, [sp, #4]
 8018220:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018224:	3204      	adds	r2, #4
 8018226:	f1ba 0f00 	cmp.w	sl, #0
 801822a:	d020      	beq.n	801826e <__multiply+0x11c>
 801822c:	682b      	ldr	r3, [r5, #0]
 801822e:	4689      	mov	r9, r1
 8018230:	46a8      	mov	r8, r5
 8018232:	f04f 0b00 	mov.w	fp, #0
 8018236:	f8b9 c000 	ldrh.w	ip, [r9]
 801823a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801823e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018242:	445c      	add	r4, fp
 8018244:	46c4      	mov	ip, r8
 8018246:	b29b      	uxth	r3, r3
 8018248:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801824c:	f84c 3b04 	str.w	r3, [ip], #4
 8018250:	f859 3b04 	ldr.w	r3, [r9], #4
 8018254:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018258:	0c1b      	lsrs	r3, r3, #16
 801825a:	fb0a b303 	mla	r3, sl, r3, fp
 801825e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018262:	454f      	cmp	r7, r9
 8018264:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018268:	d805      	bhi.n	8018276 <__multiply+0x124>
 801826a:	f8c8 3004 	str.w	r3, [r8, #4]
 801826e:	3504      	adds	r5, #4
 8018270:	e79b      	b.n	80181aa <__multiply+0x58>
 8018272:	46d4      	mov	ip, sl
 8018274:	e7b3      	b.n	80181de <__multiply+0x8c>
 8018276:	46e0      	mov	r8, ip
 8018278:	e7dd      	b.n	8018236 <__multiply+0xe4>
 801827a:	3e01      	subs	r6, #1
 801827c:	e799      	b.n	80181b2 <__multiply+0x60>
	...

08018280 <__pow5mult>:
 8018280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018284:	4615      	mov	r5, r2
 8018286:	f012 0203 	ands.w	r2, r2, #3
 801828a:	4606      	mov	r6, r0
 801828c:	460f      	mov	r7, r1
 801828e:	d007      	beq.n	80182a0 <__pow5mult+0x20>
 8018290:	3a01      	subs	r2, #1
 8018292:	4c21      	ldr	r4, [pc, #132]	; (8018318 <__pow5mult+0x98>)
 8018294:	2300      	movs	r3, #0
 8018296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801829a:	f7ff fe8a 	bl	8017fb2 <__multadd>
 801829e:	4607      	mov	r7, r0
 80182a0:	10ad      	asrs	r5, r5, #2
 80182a2:	d035      	beq.n	8018310 <__pow5mult+0x90>
 80182a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182a6:	b93c      	cbnz	r4, 80182b8 <__pow5mult+0x38>
 80182a8:	2010      	movs	r0, #16
 80182aa:	f7fc fe31 	bl	8014f10 <malloc>
 80182ae:	6270      	str	r0, [r6, #36]	; 0x24
 80182b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182b4:	6004      	str	r4, [r0, #0]
 80182b6:	60c4      	str	r4, [r0, #12]
 80182b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80182bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182c0:	b94c      	cbnz	r4, 80182d6 <__pow5mult+0x56>
 80182c2:	f240 2171 	movw	r1, #625	; 0x271
 80182c6:	4630      	mov	r0, r6
 80182c8:	f7ff ff3a 	bl	8018140 <__i2b>
 80182cc:	2300      	movs	r3, #0
 80182ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80182d2:	4604      	mov	r4, r0
 80182d4:	6003      	str	r3, [r0, #0]
 80182d6:	f04f 0800 	mov.w	r8, #0
 80182da:	07eb      	lsls	r3, r5, #31
 80182dc:	d50a      	bpl.n	80182f4 <__pow5mult+0x74>
 80182de:	4639      	mov	r1, r7
 80182e0:	4622      	mov	r2, r4
 80182e2:	4630      	mov	r0, r6
 80182e4:	f7ff ff35 	bl	8018152 <__multiply>
 80182e8:	4639      	mov	r1, r7
 80182ea:	4681      	mov	r9, r0
 80182ec:	4630      	mov	r0, r6
 80182ee:	f7ff fe49 	bl	8017f84 <_Bfree>
 80182f2:	464f      	mov	r7, r9
 80182f4:	106d      	asrs	r5, r5, #1
 80182f6:	d00b      	beq.n	8018310 <__pow5mult+0x90>
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	b938      	cbnz	r0, 801830c <__pow5mult+0x8c>
 80182fc:	4622      	mov	r2, r4
 80182fe:	4621      	mov	r1, r4
 8018300:	4630      	mov	r0, r6
 8018302:	f7ff ff26 	bl	8018152 <__multiply>
 8018306:	6020      	str	r0, [r4, #0]
 8018308:	f8c0 8000 	str.w	r8, [r0]
 801830c:	4604      	mov	r4, r0
 801830e:	e7e4      	b.n	80182da <__pow5mult+0x5a>
 8018310:	4638      	mov	r0, r7
 8018312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018316:	bf00      	nop
 8018318:	0801bf90 	.word	0x0801bf90

0801831c <__lshift>:
 801831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018320:	460c      	mov	r4, r1
 8018322:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018326:	6923      	ldr	r3, [r4, #16]
 8018328:	6849      	ldr	r1, [r1, #4]
 801832a:	eb0a 0903 	add.w	r9, sl, r3
 801832e:	68a3      	ldr	r3, [r4, #8]
 8018330:	4607      	mov	r7, r0
 8018332:	4616      	mov	r6, r2
 8018334:	f109 0501 	add.w	r5, r9, #1
 8018338:	42ab      	cmp	r3, r5
 801833a:	db32      	blt.n	80183a2 <__lshift+0x86>
 801833c:	4638      	mov	r0, r7
 801833e:	f7ff fded 	bl	8017f1c <_Balloc>
 8018342:	2300      	movs	r3, #0
 8018344:	4680      	mov	r8, r0
 8018346:	f100 0114 	add.w	r1, r0, #20
 801834a:	461a      	mov	r2, r3
 801834c:	4553      	cmp	r3, sl
 801834e:	db2b      	blt.n	80183a8 <__lshift+0x8c>
 8018350:	6920      	ldr	r0, [r4, #16]
 8018352:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018356:	f104 0314 	add.w	r3, r4, #20
 801835a:	f016 021f 	ands.w	r2, r6, #31
 801835e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018362:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018366:	d025      	beq.n	80183b4 <__lshift+0x98>
 8018368:	f1c2 0e20 	rsb	lr, r2, #32
 801836c:	2000      	movs	r0, #0
 801836e:	681e      	ldr	r6, [r3, #0]
 8018370:	468a      	mov	sl, r1
 8018372:	4096      	lsls	r6, r2
 8018374:	4330      	orrs	r0, r6
 8018376:	f84a 0b04 	str.w	r0, [sl], #4
 801837a:	f853 0b04 	ldr.w	r0, [r3], #4
 801837e:	459c      	cmp	ip, r3
 8018380:	fa20 f00e 	lsr.w	r0, r0, lr
 8018384:	d814      	bhi.n	80183b0 <__lshift+0x94>
 8018386:	6048      	str	r0, [r1, #4]
 8018388:	b108      	cbz	r0, 801838e <__lshift+0x72>
 801838a:	f109 0502 	add.w	r5, r9, #2
 801838e:	3d01      	subs	r5, #1
 8018390:	4638      	mov	r0, r7
 8018392:	f8c8 5010 	str.w	r5, [r8, #16]
 8018396:	4621      	mov	r1, r4
 8018398:	f7ff fdf4 	bl	8017f84 <_Bfree>
 801839c:	4640      	mov	r0, r8
 801839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183a2:	3101      	adds	r1, #1
 80183a4:	005b      	lsls	r3, r3, #1
 80183a6:	e7c7      	b.n	8018338 <__lshift+0x1c>
 80183a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80183ac:	3301      	adds	r3, #1
 80183ae:	e7cd      	b.n	801834c <__lshift+0x30>
 80183b0:	4651      	mov	r1, sl
 80183b2:	e7dc      	b.n	801836e <__lshift+0x52>
 80183b4:	3904      	subs	r1, #4
 80183b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80183be:	459c      	cmp	ip, r3
 80183c0:	d8f9      	bhi.n	80183b6 <__lshift+0x9a>
 80183c2:	e7e4      	b.n	801838e <__lshift+0x72>

080183c4 <__mcmp>:
 80183c4:	6903      	ldr	r3, [r0, #16]
 80183c6:	690a      	ldr	r2, [r1, #16]
 80183c8:	1a9b      	subs	r3, r3, r2
 80183ca:	b530      	push	{r4, r5, lr}
 80183cc:	d10c      	bne.n	80183e8 <__mcmp+0x24>
 80183ce:	0092      	lsls	r2, r2, #2
 80183d0:	3014      	adds	r0, #20
 80183d2:	3114      	adds	r1, #20
 80183d4:	1884      	adds	r4, r0, r2
 80183d6:	4411      	add	r1, r2
 80183d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80183dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80183e0:	4295      	cmp	r5, r2
 80183e2:	d003      	beq.n	80183ec <__mcmp+0x28>
 80183e4:	d305      	bcc.n	80183f2 <__mcmp+0x2e>
 80183e6:	2301      	movs	r3, #1
 80183e8:	4618      	mov	r0, r3
 80183ea:	bd30      	pop	{r4, r5, pc}
 80183ec:	42a0      	cmp	r0, r4
 80183ee:	d3f3      	bcc.n	80183d8 <__mcmp+0x14>
 80183f0:	e7fa      	b.n	80183e8 <__mcmp+0x24>
 80183f2:	f04f 33ff 	mov.w	r3, #4294967295
 80183f6:	e7f7      	b.n	80183e8 <__mcmp+0x24>

080183f8 <__mdiff>:
 80183f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183fc:	460d      	mov	r5, r1
 80183fe:	4607      	mov	r7, r0
 8018400:	4611      	mov	r1, r2
 8018402:	4628      	mov	r0, r5
 8018404:	4614      	mov	r4, r2
 8018406:	f7ff ffdd 	bl	80183c4 <__mcmp>
 801840a:	1e06      	subs	r6, r0, #0
 801840c:	d108      	bne.n	8018420 <__mdiff+0x28>
 801840e:	4631      	mov	r1, r6
 8018410:	4638      	mov	r0, r7
 8018412:	f7ff fd83 	bl	8017f1c <_Balloc>
 8018416:	2301      	movs	r3, #1
 8018418:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018420:	bfa4      	itt	ge
 8018422:	4623      	movge	r3, r4
 8018424:	462c      	movge	r4, r5
 8018426:	4638      	mov	r0, r7
 8018428:	6861      	ldr	r1, [r4, #4]
 801842a:	bfa6      	itte	ge
 801842c:	461d      	movge	r5, r3
 801842e:	2600      	movge	r6, #0
 8018430:	2601      	movlt	r6, #1
 8018432:	f7ff fd73 	bl	8017f1c <_Balloc>
 8018436:	692b      	ldr	r3, [r5, #16]
 8018438:	60c6      	str	r6, [r0, #12]
 801843a:	6926      	ldr	r6, [r4, #16]
 801843c:	f105 0914 	add.w	r9, r5, #20
 8018440:	f104 0214 	add.w	r2, r4, #20
 8018444:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018448:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801844c:	f100 0514 	add.w	r5, r0, #20
 8018450:	f04f 0e00 	mov.w	lr, #0
 8018454:	f852 ab04 	ldr.w	sl, [r2], #4
 8018458:	f859 4b04 	ldr.w	r4, [r9], #4
 801845c:	fa1e f18a 	uxtah	r1, lr, sl
 8018460:	b2a3      	uxth	r3, r4
 8018462:	1ac9      	subs	r1, r1, r3
 8018464:	0c23      	lsrs	r3, r4, #16
 8018466:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801846a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801846e:	b289      	uxth	r1, r1
 8018470:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018474:	45c8      	cmp	r8, r9
 8018476:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801847a:	4694      	mov	ip, r2
 801847c:	f845 3b04 	str.w	r3, [r5], #4
 8018480:	d8e8      	bhi.n	8018454 <__mdiff+0x5c>
 8018482:	45bc      	cmp	ip, r7
 8018484:	d304      	bcc.n	8018490 <__mdiff+0x98>
 8018486:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801848a:	b183      	cbz	r3, 80184ae <__mdiff+0xb6>
 801848c:	6106      	str	r6, [r0, #16]
 801848e:	e7c5      	b.n	801841c <__mdiff+0x24>
 8018490:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018494:	fa1e f381 	uxtah	r3, lr, r1
 8018498:	141a      	asrs	r2, r3, #16
 801849a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801849e:	b29b      	uxth	r3, r3
 80184a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80184a8:	f845 3b04 	str.w	r3, [r5], #4
 80184ac:	e7e9      	b.n	8018482 <__mdiff+0x8a>
 80184ae:	3e01      	subs	r6, #1
 80184b0:	e7e9      	b.n	8018486 <__mdiff+0x8e>
	...

080184b4 <__ulp>:
 80184b4:	4b12      	ldr	r3, [pc, #72]	; (8018500 <__ulp+0x4c>)
 80184b6:	ee10 2a90 	vmov	r2, s1
 80184ba:	401a      	ands	r2, r3
 80184bc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	dd04      	ble.n	80184ce <__ulp+0x1a>
 80184c4:	2000      	movs	r0, #0
 80184c6:	4619      	mov	r1, r3
 80184c8:	ec41 0b10 	vmov	d0, r0, r1
 80184cc:	4770      	bx	lr
 80184ce:	425b      	negs	r3, r3
 80184d0:	151b      	asrs	r3, r3, #20
 80184d2:	2b13      	cmp	r3, #19
 80184d4:	f04f 0000 	mov.w	r0, #0
 80184d8:	f04f 0100 	mov.w	r1, #0
 80184dc:	dc04      	bgt.n	80184e8 <__ulp+0x34>
 80184de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80184e2:	fa42 f103 	asr.w	r1, r2, r3
 80184e6:	e7ef      	b.n	80184c8 <__ulp+0x14>
 80184e8:	3b14      	subs	r3, #20
 80184ea:	2b1e      	cmp	r3, #30
 80184ec:	f04f 0201 	mov.w	r2, #1
 80184f0:	bfda      	itte	le
 80184f2:	f1c3 031f 	rsble	r3, r3, #31
 80184f6:	fa02 f303 	lslle.w	r3, r2, r3
 80184fa:	4613      	movgt	r3, r2
 80184fc:	4618      	mov	r0, r3
 80184fe:	e7e3      	b.n	80184c8 <__ulp+0x14>
 8018500:	7ff00000 	.word	0x7ff00000

08018504 <__b2d>:
 8018504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018506:	6905      	ldr	r5, [r0, #16]
 8018508:	f100 0714 	add.w	r7, r0, #20
 801850c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018510:	1f2e      	subs	r6, r5, #4
 8018512:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018516:	4620      	mov	r0, r4
 8018518:	f7ff fdc4 	bl	80180a4 <__hi0bits>
 801851c:	f1c0 0320 	rsb	r3, r0, #32
 8018520:	280a      	cmp	r0, #10
 8018522:	600b      	str	r3, [r1, #0]
 8018524:	f8df c074 	ldr.w	ip, [pc, #116]	; 801859c <__b2d+0x98>
 8018528:	dc14      	bgt.n	8018554 <__b2d+0x50>
 801852a:	f1c0 0e0b 	rsb	lr, r0, #11
 801852e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018532:	42b7      	cmp	r7, r6
 8018534:	ea41 030c 	orr.w	r3, r1, ip
 8018538:	bf34      	ite	cc
 801853a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801853e:	2100      	movcs	r1, #0
 8018540:	3015      	adds	r0, #21
 8018542:	fa04 f000 	lsl.w	r0, r4, r0
 8018546:	fa21 f10e 	lsr.w	r1, r1, lr
 801854a:	ea40 0201 	orr.w	r2, r0, r1
 801854e:	ec43 2b10 	vmov	d0, r2, r3
 8018552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018554:	42b7      	cmp	r7, r6
 8018556:	bf3a      	itte	cc
 8018558:	f1a5 0608 	subcc.w	r6, r5, #8
 801855c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018560:	2100      	movcs	r1, #0
 8018562:	380b      	subs	r0, #11
 8018564:	d015      	beq.n	8018592 <__b2d+0x8e>
 8018566:	4084      	lsls	r4, r0
 8018568:	f1c0 0520 	rsb	r5, r0, #32
 801856c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018570:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018574:	42be      	cmp	r6, r7
 8018576:	fa21 fc05 	lsr.w	ip, r1, r5
 801857a:	ea44 030c 	orr.w	r3, r4, ip
 801857e:	bf8c      	ite	hi
 8018580:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018584:	2400      	movls	r4, #0
 8018586:	fa01 f000 	lsl.w	r0, r1, r0
 801858a:	40ec      	lsrs	r4, r5
 801858c:	ea40 0204 	orr.w	r2, r0, r4
 8018590:	e7dd      	b.n	801854e <__b2d+0x4a>
 8018592:	ea44 030c 	orr.w	r3, r4, ip
 8018596:	460a      	mov	r2, r1
 8018598:	e7d9      	b.n	801854e <__b2d+0x4a>
 801859a:	bf00      	nop
 801859c:	3ff00000 	.word	0x3ff00000

080185a0 <__d2b>:
 80185a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80185a4:	460e      	mov	r6, r1
 80185a6:	2101      	movs	r1, #1
 80185a8:	ec59 8b10 	vmov	r8, r9, d0
 80185ac:	4615      	mov	r5, r2
 80185ae:	f7ff fcb5 	bl	8017f1c <_Balloc>
 80185b2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80185b6:	4607      	mov	r7, r0
 80185b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80185bc:	bb34      	cbnz	r4, 801860c <__d2b+0x6c>
 80185be:	9301      	str	r3, [sp, #4]
 80185c0:	f1b8 0300 	subs.w	r3, r8, #0
 80185c4:	d027      	beq.n	8018616 <__d2b+0x76>
 80185c6:	a802      	add	r0, sp, #8
 80185c8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80185cc:	f7ff fd89 	bl	80180e2 <__lo0bits>
 80185d0:	9900      	ldr	r1, [sp, #0]
 80185d2:	b1f0      	cbz	r0, 8018612 <__d2b+0x72>
 80185d4:	9a01      	ldr	r2, [sp, #4]
 80185d6:	f1c0 0320 	rsb	r3, r0, #32
 80185da:	fa02 f303 	lsl.w	r3, r2, r3
 80185de:	430b      	orrs	r3, r1
 80185e0:	40c2      	lsrs	r2, r0
 80185e2:	617b      	str	r3, [r7, #20]
 80185e4:	9201      	str	r2, [sp, #4]
 80185e6:	9b01      	ldr	r3, [sp, #4]
 80185e8:	61bb      	str	r3, [r7, #24]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	bf14      	ite	ne
 80185ee:	2102      	movne	r1, #2
 80185f0:	2101      	moveq	r1, #1
 80185f2:	6139      	str	r1, [r7, #16]
 80185f4:	b1c4      	cbz	r4, 8018628 <__d2b+0x88>
 80185f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80185fa:	4404      	add	r4, r0
 80185fc:	6034      	str	r4, [r6, #0]
 80185fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018602:	6028      	str	r0, [r5, #0]
 8018604:	4638      	mov	r0, r7
 8018606:	b003      	add	sp, #12
 8018608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801860c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018610:	e7d5      	b.n	80185be <__d2b+0x1e>
 8018612:	6179      	str	r1, [r7, #20]
 8018614:	e7e7      	b.n	80185e6 <__d2b+0x46>
 8018616:	a801      	add	r0, sp, #4
 8018618:	f7ff fd63 	bl	80180e2 <__lo0bits>
 801861c:	9b01      	ldr	r3, [sp, #4]
 801861e:	617b      	str	r3, [r7, #20]
 8018620:	2101      	movs	r1, #1
 8018622:	6139      	str	r1, [r7, #16]
 8018624:	3020      	adds	r0, #32
 8018626:	e7e5      	b.n	80185f4 <__d2b+0x54>
 8018628:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801862c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018630:	6030      	str	r0, [r6, #0]
 8018632:	6918      	ldr	r0, [r3, #16]
 8018634:	f7ff fd36 	bl	80180a4 <__hi0bits>
 8018638:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801863c:	e7e1      	b.n	8018602 <__d2b+0x62>

0801863e <__ratio>:
 801863e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018642:	4688      	mov	r8, r1
 8018644:	4669      	mov	r1, sp
 8018646:	4681      	mov	r9, r0
 8018648:	f7ff ff5c 	bl	8018504 <__b2d>
 801864c:	a901      	add	r1, sp, #4
 801864e:	4640      	mov	r0, r8
 8018650:	ec57 6b10 	vmov	r6, r7, d0
 8018654:	f7ff ff56 	bl	8018504 <__b2d>
 8018658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801865c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018660:	eba3 0c02 	sub.w	ip, r3, r2
 8018664:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018668:	1a9b      	subs	r3, r3, r2
 801866a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801866e:	ec5b ab10 	vmov	sl, fp, d0
 8018672:	2b00      	cmp	r3, #0
 8018674:	bfce      	itee	gt
 8018676:	463a      	movgt	r2, r7
 8018678:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801867c:	465a      	movle	r2, fp
 801867e:	4659      	mov	r1, fp
 8018680:	463d      	mov	r5, r7
 8018682:	bfd4      	ite	le
 8018684:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018688:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801868c:	4630      	mov	r0, r6
 801868e:	ee10 2a10 	vmov	r2, s0
 8018692:	460b      	mov	r3, r1
 8018694:	4629      	mov	r1, r5
 8018696:	f7e8 f8e9 	bl	800086c <__aeabi_ddiv>
 801869a:	ec41 0b10 	vmov	d0, r0, r1
 801869e:	b003      	add	sp, #12
 80186a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186a4 <__copybits>:
 80186a4:	3901      	subs	r1, #1
 80186a6:	b510      	push	{r4, lr}
 80186a8:	1149      	asrs	r1, r1, #5
 80186aa:	6914      	ldr	r4, [r2, #16]
 80186ac:	3101      	adds	r1, #1
 80186ae:	f102 0314 	add.w	r3, r2, #20
 80186b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80186b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80186ba:	42a3      	cmp	r3, r4
 80186bc:	4602      	mov	r2, r0
 80186be:	d303      	bcc.n	80186c8 <__copybits+0x24>
 80186c0:	2300      	movs	r3, #0
 80186c2:	428a      	cmp	r2, r1
 80186c4:	d305      	bcc.n	80186d2 <__copybits+0x2e>
 80186c6:	bd10      	pop	{r4, pc}
 80186c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80186cc:	f840 2b04 	str.w	r2, [r0], #4
 80186d0:	e7f3      	b.n	80186ba <__copybits+0x16>
 80186d2:	f842 3b04 	str.w	r3, [r2], #4
 80186d6:	e7f4      	b.n	80186c2 <__copybits+0x1e>

080186d8 <__any_on>:
 80186d8:	f100 0214 	add.w	r2, r0, #20
 80186dc:	6900      	ldr	r0, [r0, #16]
 80186de:	114b      	asrs	r3, r1, #5
 80186e0:	4298      	cmp	r0, r3
 80186e2:	b510      	push	{r4, lr}
 80186e4:	db11      	blt.n	801870a <__any_on+0x32>
 80186e6:	dd0a      	ble.n	80186fe <__any_on+0x26>
 80186e8:	f011 011f 	ands.w	r1, r1, #31
 80186ec:	d007      	beq.n	80186fe <__any_on+0x26>
 80186ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80186f2:	fa24 f001 	lsr.w	r0, r4, r1
 80186f6:	fa00 f101 	lsl.w	r1, r0, r1
 80186fa:	428c      	cmp	r4, r1
 80186fc:	d10b      	bne.n	8018716 <__any_on+0x3e>
 80186fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018702:	4293      	cmp	r3, r2
 8018704:	d803      	bhi.n	801870e <__any_on+0x36>
 8018706:	2000      	movs	r0, #0
 8018708:	bd10      	pop	{r4, pc}
 801870a:	4603      	mov	r3, r0
 801870c:	e7f7      	b.n	80186fe <__any_on+0x26>
 801870e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018712:	2900      	cmp	r1, #0
 8018714:	d0f5      	beq.n	8018702 <__any_on+0x2a>
 8018716:	2001      	movs	r0, #1
 8018718:	e7f6      	b.n	8018708 <__any_on+0x30>

0801871a <_calloc_r>:
 801871a:	b538      	push	{r3, r4, r5, lr}
 801871c:	fb02 f401 	mul.w	r4, r2, r1
 8018720:	4621      	mov	r1, r4
 8018722:	f7fc fc67 	bl	8014ff4 <_malloc_r>
 8018726:	4605      	mov	r5, r0
 8018728:	b118      	cbz	r0, 8018732 <_calloc_r+0x18>
 801872a:	4622      	mov	r2, r4
 801872c:	2100      	movs	r1, #0
 801872e:	f7fc fc0a 	bl	8014f46 <memset>
 8018732:	4628      	mov	r0, r5
 8018734:	bd38      	pop	{r3, r4, r5, pc}

08018736 <__ssputs_r>:
 8018736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801873a:	688e      	ldr	r6, [r1, #8]
 801873c:	429e      	cmp	r6, r3
 801873e:	4682      	mov	sl, r0
 8018740:	460c      	mov	r4, r1
 8018742:	4690      	mov	r8, r2
 8018744:	4699      	mov	r9, r3
 8018746:	d837      	bhi.n	80187b8 <__ssputs_r+0x82>
 8018748:	898a      	ldrh	r2, [r1, #12]
 801874a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801874e:	d031      	beq.n	80187b4 <__ssputs_r+0x7e>
 8018750:	6825      	ldr	r5, [r4, #0]
 8018752:	6909      	ldr	r1, [r1, #16]
 8018754:	1a6f      	subs	r7, r5, r1
 8018756:	6965      	ldr	r5, [r4, #20]
 8018758:	2302      	movs	r3, #2
 801875a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801875e:	fb95 f5f3 	sdiv	r5, r5, r3
 8018762:	f109 0301 	add.w	r3, r9, #1
 8018766:	443b      	add	r3, r7
 8018768:	429d      	cmp	r5, r3
 801876a:	bf38      	it	cc
 801876c:	461d      	movcc	r5, r3
 801876e:	0553      	lsls	r3, r2, #21
 8018770:	d530      	bpl.n	80187d4 <__ssputs_r+0x9e>
 8018772:	4629      	mov	r1, r5
 8018774:	f7fc fc3e 	bl	8014ff4 <_malloc_r>
 8018778:	4606      	mov	r6, r0
 801877a:	b950      	cbnz	r0, 8018792 <__ssputs_r+0x5c>
 801877c:	230c      	movs	r3, #12
 801877e:	f8ca 3000 	str.w	r3, [sl]
 8018782:	89a3      	ldrh	r3, [r4, #12]
 8018784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018788:	81a3      	strh	r3, [r4, #12]
 801878a:	f04f 30ff 	mov.w	r0, #4294967295
 801878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018792:	463a      	mov	r2, r7
 8018794:	6921      	ldr	r1, [r4, #16]
 8018796:	f7fc fbcb 	bl	8014f30 <memcpy>
 801879a:	89a3      	ldrh	r3, [r4, #12]
 801879c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80187a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80187a4:	81a3      	strh	r3, [r4, #12]
 80187a6:	6126      	str	r6, [r4, #16]
 80187a8:	6165      	str	r5, [r4, #20]
 80187aa:	443e      	add	r6, r7
 80187ac:	1bed      	subs	r5, r5, r7
 80187ae:	6026      	str	r6, [r4, #0]
 80187b0:	60a5      	str	r5, [r4, #8]
 80187b2:	464e      	mov	r6, r9
 80187b4:	454e      	cmp	r6, r9
 80187b6:	d900      	bls.n	80187ba <__ssputs_r+0x84>
 80187b8:	464e      	mov	r6, r9
 80187ba:	4632      	mov	r2, r6
 80187bc:	4641      	mov	r1, r8
 80187be:	6820      	ldr	r0, [r4, #0]
 80187c0:	f000 f919 	bl	80189f6 <memmove>
 80187c4:	68a3      	ldr	r3, [r4, #8]
 80187c6:	1b9b      	subs	r3, r3, r6
 80187c8:	60a3      	str	r3, [r4, #8]
 80187ca:	6823      	ldr	r3, [r4, #0]
 80187cc:	441e      	add	r6, r3
 80187ce:	6026      	str	r6, [r4, #0]
 80187d0:	2000      	movs	r0, #0
 80187d2:	e7dc      	b.n	801878e <__ssputs_r+0x58>
 80187d4:	462a      	mov	r2, r5
 80187d6:	f000 f927 	bl	8018a28 <_realloc_r>
 80187da:	4606      	mov	r6, r0
 80187dc:	2800      	cmp	r0, #0
 80187de:	d1e2      	bne.n	80187a6 <__ssputs_r+0x70>
 80187e0:	6921      	ldr	r1, [r4, #16]
 80187e2:	4650      	mov	r0, sl
 80187e4:	f7fc fbb8 	bl	8014f58 <_free_r>
 80187e8:	e7c8      	b.n	801877c <__ssputs_r+0x46>
	...

080187ec <_svfiprintf_r>:
 80187ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f0:	461d      	mov	r5, r3
 80187f2:	898b      	ldrh	r3, [r1, #12]
 80187f4:	061f      	lsls	r7, r3, #24
 80187f6:	b09d      	sub	sp, #116	; 0x74
 80187f8:	4680      	mov	r8, r0
 80187fa:	460c      	mov	r4, r1
 80187fc:	4616      	mov	r6, r2
 80187fe:	d50f      	bpl.n	8018820 <_svfiprintf_r+0x34>
 8018800:	690b      	ldr	r3, [r1, #16]
 8018802:	b96b      	cbnz	r3, 8018820 <_svfiprintf_r+0x34>
 8018804:	2140      	movs	r1, #64	; 0x40
 8018806:	f7fc fbf5 	bl	8014ff4 <_malloc_r>
 801880a:	6020      	str	r0, [r4, #0]
 801880c:	6120      	str	r0, [r4, #16]
 801880e:	b928      	cbnz	r0, 801881c <_svfiprintf_r+0x30>
 8018810:	230c      	movs	r3, #12
 8018812:	f8c8 3000 	str.w	r3, [r8]
 8018816:	f04f 30ff 	mov.w	r0, #4294967295
 801881a:	e0c8      	b.n	80189ae <_svfiprintf_r+0x1c2>
 801881c:	2340      	movs	r3, #64	; 0x40
 801881e:	6163      	str	r3, [r4, #20]
 8018820:	2300      	movs	r3, #0
 8018822:	9309      	str	r3, [sp, #36]	; 0x24
 8018824:	2320      	movs	r3, #32
 8018826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801882a:	2330      	movs	r3, #48	; 0x30
 801882c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018830:	9503      	str	r5, [sp, #12]
 8018832:	f04f 0b01 	mov.w	fp, #1
 8018836:	4637      	mov	r7, r6
 8018838:	463d      	mov	r5, r7
 801883a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801883e:	b10b      	cbz	r3, 8018844 <_svfiprintf_r+0x58>
 8018840:	2b25      	cmp	r3, #37	; 0x25
 8018842:	d13e      	bne.n	80188c2 <_svfiprintf_r+0xd6>
 8018844:	ebb7 0a06 	subs.w	sl, r7, r6
 8018848:	d00b      	beq.n	8018862 <_svfiprintf_r+0x76>
 801884a:	4653      	mov	r3, sl
 801884c:	4632      	mov	r2, r6
 801884e:	4621      	mov	r1, r4
 8018850:	4640      	mov	r0, r8
 8018852:	f7ff ff70 	bl	8018736 <__ssputs_r>
 8018856:	3001      	adds	r0, #1
 8018858:	f000 80a4 	beq.w	80189a4 <_svfiprintf_r+0x1b8>
 801885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801885e:	4453      	add	r3, sl
 8018860:	9309      	str	r3, [sp, #36]	; 0x24
 8018862:	783b      	ldrb	r3, [r7, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	f000 809d 	beq.w	80189a4 <_svfiprintf_r+0x1b8>
 801886a:	2300      	movs	r3, #0
 801886c:	f04f 32ff 	mov.w	r2, #4294967295
 8018870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018874:	9304      	str	r3, [sp, #16]
 8018876:	9307      	str	r3, [sp, #28]
 8018878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801887c:	931a      	str	r3, [sp, #104]	; 0x68
 801887e:	462f      	mov	r7, r5
 8018880:	2205      	movs	r2, #5
 8018882:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018886:	4850      	ldr	r0, [pc, #320]	; (80189c8 <_svfiprintf_r+0x1dc>)
 8018888:	f7e7 fcba 	bl	8000200 <memchr>
 801888c:	9b04      	ldr	r3, [sp, #16]
 801888e:	b9d0      	cbnz	r0, 80188c6 <_svfiprintf_r+0xda>
 8018890:	06d9      	lsls	r1, r3, #27
 8018892:	bf44      	itt	mi
 8018894:	2220      	movmi	r2, #32
 8018896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801889a:	071a      	lsls	r2, r3, #28
 801889c:	bf44      	itt	mi
 801889e:	222b      	movmi	r2, #43	; 0x2b
 80188a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80188a4:	782a      	ldrb	r2, [r5, #0]
 80188a6:	2a2a      	cmp	r2, #42	; 0x2a
 80188a8:	d015      	beq.n	80188d6 <_svfiprintf_r+0xea>
 80188aa:	9a07      	ldr	r2, [sp, #28]
 80188ac:	462f      	mov	r7, r5
 80188ae:	2000      	movs	r0, #0
 80188b0:	250a      	movs	r5, #10
 80188b2:	4639      	mov	r1, r7
 80188b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188b8:	3b30      	subs	r3, #48	; 0x30
 80188ba:	2b09      	cmp	r3, #9
 80188bc:	d94d      	bls.n	801895a <_svfiprintf_r+0x16e>
 80188be:	b1b8      	cbz	r0, 80188f0 <_svfiprintf_r+0x104>
 80188c0:	e00f      	b.n	80188e2 <_svfiprintf_r+0xf6>
 80188c2:	462f      	mov	r7, r5
 80188c4:	e7b8      	b.n	8018838 <_svfiprintf_r+0x4c>
 80188c6:	4a40      	ldr	r2, [pc, #256]	; (80189c8 <_svfiprintf_r+0x1dc>)
 80188c8:	1a80      	subs	r0, r0, r2
 80188ca:	fa0b f000 	lsl.w	r0, fp, r0
 80188ce:	4318      	orrs	r0, r3
 80188d0:	9004      	str	r0, [sp, #16]
 80188d2:	463d      	mov	r5, r7
 80188d4:	e7d3      	b.n	801887e <_svfiprintf_r+0x92>
 80188d6:	9a03      	ldr	r2, [sp, #12]
 80188d8:	1d11      	adds	r1, r2, #4
 80188da:	6812      	ldr	r2, [r2, #0]
 80188dc:	9103      	str	r1, [sp, #12]
 80188de:	2a00      	cmp	r2, #0
 80188e0:	db01      	blt.n	80188e6 <_svfiprintf_r+0xfa>
 80188e2:	9207      	str	r2, [sp, #28]
 80188e4:	e004      	b.n	80188f0 <_svfiprintf_r+0x104>
 80188e6:	4252      	negs	r2, r2
 80188e8:	f043 0302 	orr.w	r3, r3, #2
 80188ec:	9207      	str	r2, [sp, #28]
 80188ee:	9304      	str	r3, [sp, #16]
 80188f0:	783b      	ldrb	r3, [r7, #0]
 80188f2:	2b2e      	cmp	r3, #46	; 0x2e
 80188f4:	d10c      	bne.n	8018910 <_svfiprintf_r+0x124>
 80188f6:	787b      	ldrb	r3, [r7, #1]
 80188f8:	2b2a      	cmp	r3, #42	; 0x2a
 80188fa:	d133      	bne.n	8018964 <_svfiprintf_r+0x178>
 80188fc:	9b03      	ldr	r3, [sp, #12]
 80188fe:	1d1a      	adds	r2, r3, #4
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	9203      	str	r2, [sp, #12]
 8018904:	2b00      	cmp	r3, #0
 8018906:	bfb8      	it	lt
 8018908:	f04f 33ff 	movlt.w	r3, #4294967295
 801890c:	3702      	adds	r7, #2
 801890e:	9305      	str	r3, [sp, #20]
 8018910:	4d2e      	ldr	r5, [pc, #184]	; (80189cc <_svfiprintf_r+0x1e0>)
 8018912:	7839      	ldrb	r1, [r7, #0]
 8018914:	2203      	movs	r2, #3
 8018916:	4628      	mov	r0, r5
 8018918:	f7e7 fc72 	bl	8000200 <memchr>
 801891c:	b138      	cbz	r0, 801892e <_svfiprintf_r+0x142>
 801891e:	2340      	movs	r3, #64	; 0x40
 8018920:	1b40      	subs	r0, r0, r5
 8018922:	fa03 f000 	lsl.w	r0, r3, r0
 8018926:	9b04      	ldr	r3, [sp, #16]
 8018928:	4303      	orrs	r3, r0
 801892a:	3701      	adds	r7, #1
 801892c:	9304      	str	r3, [sp, #16]
 801892e:	7839      	ldrb	r1, [r7, #0]
 8018930:	4827      	ldr	r0, [pc, #156]	; (80189d0 <_svfiprintf_r+0x1e4>)
 8018932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018936:	2206      	movs	r2, #6
 8018938:	1c7e      	adds	r6, r7, #1
 801893a:	f7e7 fc61 	bl	8000200 <memchr>
 801893e:	2800      	cmp	r0, #0
 8018940:	d038      	beq.n	80189b4 <_svfiprintf_r+0x1c8>
 8018942:	4b24      	ldr	r3, [pc, #144]	; (80189d4 <_svfiprintf_r+0x1e8>)
 8018944:	bb13      	cbnz	r3, 801898c <_svfiprintf_r+0x1a0>
 8018946:	9b03      	ldr	r3, [sp, #12]
 8018948:	3307      	adds	r3, #7
 801894a:	f023 0307 	bic.w	r3, r3, #7
 801894e:	3308      	adds	r3, #8
 8018950:	9303      	str	r3, [sp, #12]
 8018952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018954:	444b      	add	r3, r9
 8018956:	9309      	str	r3, [sp, #36]	; 0x24
 8018958:	e76d      	b.n	8018836 <_svfiprintf_r+0x4a>
 801895a:	fb05 3202 	mla	r2, r5, r2, r3
 801895e:	2001      	movs	r0, #1
 8018960:	460f      	mov	r7, r1
 8018962:	e7a6      	b.n	80188b2 <_svfiprintf_r+0xc6>
 8018964:	2300      	movs	r3, #0
 8018966:	3701      	adds	r7, #1
 8018968:	9305      	str	r3, [sp, #20]
 801896a:	4619      	mov	r1, r3
 801896c:	250a      	movs	r5, #10
 801896e:	4638      	mov	r0, r7
 8018970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018974:	3a30      	subs	r2, #48	; 0x30
 8018976:	2a09      	cmp	r2, #9
 8018978:	d903      	bls.n	8018982 <_svfiprintf_r+0x196>
 801897a:	2b00      	cmp	r3, #0
 801897c:	d0c8      	beq.n	8018910 <_svfiprintf_r+0x124>
 801897e:	9105      	str	r1, [sp, #20]
 8018980:	e7c6      	b.n	8018910 <_svfiprintf_r+0x124>
 8018982:	fb05 2101 	mla	r1, r5, r1, r2
 8018986:	2301      	movs	r3, #1
 8018988:	4607      	mov	r7, r0
 801898a:	e7f0      	b.n	801896e <_svfiprintf_r+0x182>
 801898c:	ab03      	add	r3, sp, #12
 801898e:	9300      	str	r3, [sp, #0]
 8018990:	4622      	mov	r2, r4
 8018992:	4b11      	ldr	r3, [pc, #68]	; (80189d8 <_svfiprintf_r+0x1ec>)
 8018994:	a904      	add	r1, sp, #16
 8018996:	4640      	mov	r0, r8
 8018998:	f7fc fc1a 	bl	80151d0 <_printf_float>
 801899c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80189a0:	4681      	mov	r9, r0
 80189a2:	d1d6      	bne.n	8018952 <_svfiprintf_r+0x166>
 80189a4:	89a3      	ldrh	r3, [r4, #12]
 80189a6:	065b      	lsls	r3, r3, #25
 80189a8:	f53f af35 	bmi.w	8018816 <_svfiprintf_r+0x2a>
 80189ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189ae:	b01d      	add	sp, #116	; 0x74
 80189b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b4:	ab03      	add	r3, sp, #12
 80189b6:	9300      	str	r3, [sp, #0]
 80189b8:	4622      	mov	r2, r4
 80189ba:	4b07      	ldr	r3, [pc, #28]	; (80189d8 <_svfiprintf_r+0x1ec>)
 80189bc:	a904      	add	r1, sp, #16
 80189be:	4640      	mov	r0, r8
 80189c0:	f7fc febc 	bl	801573c <_printf_i>
 80189c4:	e7ea      	b.n	801899c <_svfiprintf_r+0x1b0>
 80189c6:	bf00      	nop
 80189c8:	0801bf9c 	.word	0x0801bf9c
 80189cc:	0801bfa2 	.word	0x0801bfa2
 80189d0:	0801bfa6 	.word	0x0801bfa6
 80189d4:	080151d1 	.word	0x080151d1
 80189d8:	08018737 	.word	0x08018737

080189dc <__ascii_wctomb>:
 80189dc:	b149      	cbz	r1, 80189f2 <__ascii_wctomb+0x16>
 80189de:	2aff      	cmp	r2, #255	; 0xff
 80189e0:	bf85      	ittet	hi
 80189e2:	238a      	movhi	r3, #138	; 0x8a
 80189e4:	6003      	strhi	r3, [r0, #0]
 80189e6:	700a      	strbls	r2, [r1, #0]
 80189e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80189ec:	bf98      	it	ls
 80189ee:	2001      	movls	r0, #1
 80189f0:	4770      	bx	lr
 80189f2:	4608      	mov	r0, r1
 80189f4:	4770      	bx	lr

080189f6 <memmove>:
 80189f6:	4288      	cmp	r0, r1
 80189f8:	b510      	push	{r4, lr}
 80189fa:	eb01 0302 	add.w	r3, r1, r2
 80189fe:	d807      	bhi.n	8018a10 <memmove+0x1a>
 8018a00:	1e42      	subs	r2, r0, #1
 8018a02:	4299      	cmp	r1, r3
 8018a04:	d00a      	beq.n	8018a1c <memmove+0x26>
 8018a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018a0e:	e7f8      	b.n	8018a02 <memmove+0xc>
 8018a10:	4283      	cmp	r3, r0
 8018a12:	d9f5      	bls.n	8018a00 <memmove+0xa>
 8018a14:	1881      	adds	r1, r0, r2
 8018a16:	1ad2      	subs	r2, r2, r3
 8018a18:	42d3      	cmn	r3, r2
 8018a1a:	d100      	bne.n	8018a1e <memmove+0x28>
 8018a1c:	bd10      	pop	{r4, pc}
 8018a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018a26:	e7f7      	b.n	8018a18 <memmove+0x22>

08018a28 <_realloc_r>:
 8018a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2a:	4607      	mov	r7, r0
 8018a2c:	4614      	mov	r4, r2
 8018a2e:	460e      	mov	r6, r1
 8018a30:	b921      	cbnz	r1, 8018a3c <_realloc_r+0x14>
 8018a32:	4611      	mov	r1, r2
 8018a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a38:	f7fc badc 	b.w	8014ff4 <_malloc_r>
 8018a3c:	b922      	cbnz	r2, 8018a48 <_realloc_r+0x20>
 8018a3e:	f7fc fa8b 	bl	8014f58 <_free_r>
 8018a42:	4625      	mov	r5, r4
 8018a44:	4628      	mov	r0, r5
 8018a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a48:	f000 f814 	bl	8018a74 <_malloc_usable_size_r>
 8018a4c:	42a0      	cmp	r0, r4
 8018a4e:	d20f      	bcs.n	8018a70 <_realloc_r+0x48>
 8018a50:	4621      	mov	r1, r4
 8018a52:	4638      	mov	r0, r7
 8018a54:	f7fc face 	bl	8014ff4 <_malloc_r>
 8018a58:	4605      	mov	r5, r0
 8018a5a:	2800      	cmp	r0, #0
 8018a5c:	d0f2      	beq.n	8018a44 <_realloc_r+0x1c>
 8018a5e:	4631      	mov	r1, r6
 8018a60:	4622      	mov	r2, r4
 8018a62:	f7fc fa65 	bl	8014f30 <memcpy>
 8018a66:	4631      	mov	r1, r6
 8018a68:	4638      	mov	r0, r7
 8018a6a:	f7fc fa75 	bl	8014f58 <_free_r>
 8018a6e:	e7e9      	b.n	8018a44 <_realloc_r+0x1c>
 8018a70:	4635      	mov	r5, r6
 8018a72:	e7e7      	b.n	8018a44 <_realloc_r+0x1c>

08018a74 <_malloc_usable_size_r>:
 8018a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a78:	1f18      	subs	r0, r3, #4
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	bfbc      	itt	lt
 8018a7e:	580b      	ldrlt	r3, [r1, r0]
 8018a80:	18c0      	addlt	r0, r0, r3
 8018a82:	4770      	bx	lr
 8018a84:	0000      	movs	r0, r0
	...

08018a88 <cos>:
 8018a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018a8a:	ec51 0b10 	vmov	r0, r1, d0
 8018a8e:	4a1e      	ldr	r2, [pc, #120]	; (8018b08 <cos+0x80>)
 8018a90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018a94:	4293      	cmp	r3, r2
 8018a96:	dc06      	bgt.n	8018aa6 <cos+0x1e>
 8018a98:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8018b00 <cos+0x78>
 8018a9c:	f001 feb8 	bl	801a810 <__kernel_cos>
 8018aa0:	ec51 0b10 	vmov	r0, r1, d0
 8018aa4:	e007      	b.n	8018ab6 <cos+0x2e>
 8018aa6:	4a19      	ldr	r2, [pc, #100]	; (8018b0c <cos+0x84>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	dd09      	ble.n	8018ac0 <cos+0x38>
 8018aac:	ee10 2a10 	vmov	r2, s0
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	f7e7 fbf9 	bl	80002a8 <__aeabi_dsub>
 8018ab6:	ec41 0b10 	vmov	d0, r0, r1
 8018aba:	b005      	add	sp, #20
 8018abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ac0:	4668      	mov	r0, sp
 8018ac2:	f001 fbfd 	bl	801a2c0 <__ieee754_rem_pio2>
 8018ac6:	f000 0003 	and.w	r0, r0, #3
 8018aca:	2801      	cmp	r0, #1
 8018acc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018ad0:	ed9d 0b00 	vldr	d0, [sp]
 8018ad4:	d007      	beq.n	8018ae6 <cos+0x5e>
 8018ad6:	2802      	cmp	r0, #2
 8018ad8:	d00e      	beq.n	8018af8 <cos+0x70>
 8018ada:	2800      	cmp	r0, #0
 8018adc:	d0de      	beq.n	8018a9c <cos+0x14>
 8018ade:	2001      	movs	r0, #1
 8018ae0:	f002 fa9e 	bl	801b020 <__kernel_sin>
 8018ae4:	e7dc      	b.n	8018aa0 <cos+0x18>
 8018ae6:	f002 fa9b 	bl	801b020 <__kernel_sin>
 8018aea:	ec53 2b10 	vmov	r2, r3, d0
 8018aee:	ee10 0a10 	vmov	r0, s0
 8018af2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018af6:	e7de      	b.n	8018ab6 <cos+0x2e>
 8018af8:	f001 fe8a 	bl	801a810 <__kernel_cos>
 8018afc:	e7f5      	b.n	8018aea <cos+0x62>
 8018afe:	bf00      	nop
	...
 8018b08:	3fe921fb 	.word	0x3fe921fb
 8018b0c:	7fefffff 	.word	0x7fefffff

08018b10 <sin>:
 8018b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b12:	ec51 0b10 	vmov	r0, r1, d0
 8018b16:	4a20      	ldr	r2, [pc, #128]	; (8018b98 <sin+0x88>)
 8018b18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018b1c:	4293      	cmp	r3, r2
 8018b1e:	dc07      	bgt.n	8018b30 <sin+0x20>
 8018b20:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8018b90 <sin+0x80>
 8018b24:	2000      	movs	r0, #0
 8018b26:	f002 fa7b 	bl	801b020 <__kernel_sin>
 8018b2a:	ec51 0b10 	vmov	r0, r1, d0
 8018b2e:	e007      	b.n	8018b40 <sin+0x30>
 8018b30:	4a1a      	ldr	r2, [pc, #104]	; (8018b9c <sin+0x8c>)
 8018b32:	4293      	cmp	r3, r2
 8018b34:	dd09      	ble.n	8018b4a <sin+0x3a>
 8018b36:	ee10 2a10 	vmov	r2, s0
 8018b3a:	460b      	mov	r3, r1
 8018b3c:	f7e7 fbb4 	bl	80002a8 <__aeabi_dsub>
 8018b40:	ec41 0b10 	vmov	d0, r0, r1
 8018b44:	b005      	add	sp, #20
 8018b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b4a:	4668      	mov	r0, sp
 8018b4c:	f001 fbb8 	bl	801a2c0 <__ieee754_rem_pio2>
 8018b50:	f000 0003 	and.w	r0, r0, #3
 8018b54:	2801      	cmp	r0, #1
 8018b56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018b5a:	ed9d 0b00 	vldr	d0, [sp]
 8018b5e:	d004      	beq.n	8018b6a <sin+0x5a>
 8018b60:	2802      	cmp	r0, #2
 8018b62:	d005      	beq.n	8018b70 <sin+0x60>
 8018b64:	b970      	cbnz	r0, 8018b84 <sin+0x74>
 8018b66:	2001      	movs	r0, #1
 8018b68:	e7dd      	b.n	8018b26 <sin+0x16>
 8018b6a:	f001 fe51 	bl	801a810 <__kernel_cos>
 8018b6e:	e7dc      	b.n	8018b2a <sin+0x1a>
 8018b70:	2001      	movs	r0, #1
 8018b72:	f002 fa55 	bl	801b020 <__kernel_sin>
 8018b76:	ec53 2b10 	vmov	r2, r3, d0
 8018b7a:	ee10 0a10 	vmov	r0, s0
 8018b7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018b82:	e7dd      	b.n	8018b40 <sin+0x30>
 8018b84:	f001 fe44 	bl	801a810 <__kernel_cos>
 8018b88:	e7f5      	b.n	8018b76 <sin+0x66>
 8018b8a:	bf00      	nop
 8018b8c:	f3af 8000 	nop.w
	...
 8018b98:	3fe921fb 	.word	0x3fe921fb
 8018b9c:	7fefffff 	.word	0x7fefffff

08018ba0 <asin>:
 8018ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ba2:	ed2d 8b02 	vpush	{d8}
 8018ba6:	4e26      	ldr	r6, [pc, #152]	; (8018c40 <asin+0xa0>)
 8018ba8:	b08b      	sub	sp, #44	; 0x2c
 8018baa:	ec55 4b10 	vmov	r4, r5, d0
 8018bae:	f000 fa77 	bl	80190a0 <__ieee754_asin>
 8018bb2:	f996 3000 	ldrsb.w	r3, [r6]
 8018bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8018bba:	eef0 8a60 	vmov.f32	s17, s1
 8018bbe:	3301      	adds	r3, #1
 8018bc0:	d036      	beq.n	8018c30 <asin+0x90>
 8018bc2:	4622      	mov	r2, r4
 8018bc4:	462b      	mov	r3, r5
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	4629      	mov	r1, r5
 8018bca:	f7e7 ffbf 	bl	8000b4c <__aeabi_dcmpun>
 8018bce:	4607      	mov	r7, r0
 8018bd0:	bb70      	cbnz	r0, 8018c30 <asin+0x90>
 8018bd2:	ec45 4b10 	vmov	d0, r4, r5
 8018bd6:	f002 fc7f 	bl	801b4d8 <fabs>
 8018bda:	2200      	movs	r2, #0
 8018bdc:	4b19      	ldr	r3, [pc, #100]	; (8018c44 <asin+0xa4>)
 8018bde:	ec51 0b10 	vmov	r0, r1, d0
 8018be2:	f7e7 ffa9 	bl	8000b38 <__aeabi_dcmpgt>
 8018be6:	b318      	cbz	r0, 8018c30 <asin+0x90>
 8018be8:	2301      	movs	r3, #1
 8018bea:	9300      	str	r3, [sp, #0]
 8018bec:	4816      	ldr	r0, [pc, #88]	; (8018c48 <asin+0xa8>)
 8018bee:	4b17      	ldr	r3, [pc, #92]	; (8018c4c <asin+0xac>)
 8018bf0:	9301      	str	r3, [sp, #4]
 8018bf2:	9708      	str	r7, [sp, #32]
 8018bf4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018bf8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018bfc:	f002 fd08 	bl	801b610 <nan>
 8018c00:	f996 3000 	ldrsb.w	r3, [r6]
 8018c04:	2b02      	cmp	r3, #2
 8018c06:	ed8d 0b06 	vstr	d0, [sp, #24]
 8018c0a:	d104      	bne.n	8018c16 <asin+0x76>
 8018c0c:	f7fc f956 	bl	8014ebc <__errno>
 8018c10:	2321      	movs	r3, #33	; 0x21
 8018c12:	6003      	str	r3, [r0, #0]
 8018c14:	e004      	b.n	8018c20 <asin+0x80>
 8018c16:	4668      	mov	r0, sp
 8018c18:	f002 fcf6 	bl	801b608 <matherr>
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	d0f5      	beq.n	8018c0c <asin+0x6c>
 8018c20:	9b08      	ldr	r3, [sp, #32]
 8018c22:	b11b      	cbz	r3, 8018c2c <asin+0x8c>
 8018c24:	f7fc f94a 	bl	8014ebc <__errno>
 8018c28:	9b08      	ldr	r3, [sp, #32]
 8018c2a:	6003      	str	r3, [r0, #0]
 8018c2c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018c30:	eeb0 0a48 	vmov.f32	s0, s16
 8018c34:	eef0 0a68 	vmov.f32	s1, s17
 8018c38:	b00b      	add	sp, #44	; 0x2c
 8018c3a:	ecbd 8b02 	vpop	{d8}
 8018c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c40:	200003a4 	.word	0x200003a4
 8018c44:	3ff00000 	.word	0x3ff00000
 8018c48:	0801bfa1 	.word	0x0801bfa1
 8018c4c:	0801c0ae 	.word	0x0801c0ae

08018c50 <atan2>:
 8018c50:	f000 bc36 	b.w	80194c0 <__ieee754_atan2>

08018c54 <fmod>:
 8018c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c58:	ed2d 8b02 	vpush	{d8}
 8018c5c:	b08b      	sub	sp, #44	; 0x2c
 8018c5e:	ec55 4b10 	vmov	r4, r5, d0
 8018c62:	ec57 6b11 	vmov	r6, r7, d1
 8018c66:	f000 fd09 	bl	801967c <__ieee754_fmod>
 8018c6a:	4b2a      	ldr	r3, [pc, #168]	; (8018d14 <fmod+0xc0>)
 8018c6c:	eeb0 8a40 	vmov.f32	s16, s0
 8018c70:	eef0 8a60 	vmov.f32	s17, s1
 8018c74:	f993 8000 	ldrsb.w	r8, [r3]
 8018c78:	f1b8 3fff 	cmp.w	r8, #4294967295
 8018c7c:	d030      	beq.n	8018ce0 <fmod+0x8c>
 8018c7e:	4632      	mov	r2, r6
 8018c80:	463b      	mov	r3, r7
 8018c82:	4630      	mov	r0, r6
 8018c84:	4639      	mov	r1, r7
 8018c86:	f7e7 ff61 	bl	8000b4c <__aeabi_dcmpun>
 8018c8a:	bb48      	cbnz	r0, 8018ce0 <fmod+0x8c>
 8018c8c:	4622      	mov	r2, r4
 8018c8e:	462b      	mov	r3, r5
 8018c90:	4620      	mov	r0, r4
 8018c92:	4629      	mov	r1, r5
 8018c94:	f7e7 ff5a 	bl	8000b4c <__aeabi_dcmpun>
 8018c98:	4681      	mov	r9, r0
 8018c9a:	bb08      	cbnz	r0, 8018ce0 <fmod+0x8c>
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	4630      	mov	r0, r6
 8018ca2:	4639      	mov	r1, r7
 8018ca4:	f7e7 ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ca8:	b1d0      	cbz	r0, 8018ce0 <fmod+0x8c>
 8018caa:	2301      	movs	r3, #1
 8018cac:	9300      	str	r3, [sp, #0]
 8018cae:	4b1a      	ldr	r3, [pc, #104]	; (8018d18 <fmod+0xc4>)
 8018cb0:	9301      	str	r3, [sp, #4]
 8018cb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018cb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018cba:	f8cd 9020 	str.w	r9, [sp, #32]
 8018cbe:	f1b8 0f00 	cmp.w	r8, #0
 8018cc2:	d116      	bne.n	8018cf2 <fmod+0x9e>
 8018cc4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018cc8:	4668      	mov	r0, sp
 8018cca:	f002 fc9d 	bl	801b608 <matherr>
 8018cce:	b1d8      	cbz	r0, 8018d08 <fmod+0xb4>
 8018cd0:	9b08      	ldr	r3, [sp, #32]
 8018cd2:	b11b      	cbz	r3, 8018cdc <fmod+0x88>
 8018cd4:	f7fc f8f2 	bl	8014ebc <__errno>
 8018cd8:	9b08      	ldr	r3, [sp, #32]
 8018cda:	6003      	str	r3, [r0, #0]
 8018cdc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8018ce0:	eeb0 0a48 	vmov.f32	s0, s16
 8018ce4:	eef0 0a68 	vmov.f32	s1, s17
 8018ce8:	b00b      	add	sp, #44	; 0x2c
 8018cea:	ecbd 8b02 	vpop	{d8}
 8018cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	4610      	mov	r0, r2
 8018cf8:	4619      	mov	r1, r3
 8018cfa:	f7e7 fdb7 	bl	800086c <__aeabi_ddiv>
 8018cfe:	f1b8 0f02 	cmp.w	r8, #2
 8018d02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018d06:	d1df      	bne.n	8018cc8 <fmod+0x74>
 8018d08:	f7fc f8d8 	bl	8014ebc <__errno>
 8018d0c:	2321      	movs	r3, #33	; 0x21
 8018d0e:	6003      	str	r3, [r0, #0]
 8018d10:	e7de      	b.n	8018cd0 <fmod+0x7c>
 8018d12:	bf00      	nop
 8018d14:	200003a4 	.word	0x200003a4
 8018d18:	0801c0b3 	.word	0x0801c0b3

08018d1c <pow>:
 8018d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d20:	ed2d 8b04 	vpush	{d8-d9}
 8018d24:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8018ff8 <pow+0x2dc>
 8018d28:	b08d      	sub	sp, #52	; 0x34
 8018d2a:	ec57 6b10 	vmov	r6, r7, d0
 8018d2e:	ec55 4b11 	vmov	r4, r5, d1
 8018d32:	f000 fdb5 	bl	80198a0 <__ieee754_pow>
 8018d36:	f999 3000 	ldrsb.w	r3, [r9]
 8018d3a:	9300      	str	r3, [sp, #0]
 8018d3c:	3301      	adds	r3, #1
 8018d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8018d42:	eef0 8a60 	vmov.f32	s17, s1
 8018d46:	46c8      	mov	r8, r9
 8018d48:	d05f      	beq.n	8018e0a <pow+0xee>
 8018d4a:	4622      	mov	r2, r4
 8018d4c:	462b      	mov	r3, r5
 8018d4e:	4620      	mov	r0, r4
 8018d50:	4629      	mov	r1, r5
 8018d52:	f7e7 fefb 	bl	8000b4c <__aeabi_dcmpun>
 8018d56:	4683      	mov	fp, r0
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	d156      	bne.n	8018e0a <pow+0xee>
 8018d5c:	4632      	mov	r2, r6
 8018d5e:	463b      	mov	r3, r7
 8018d60:	4630      	mov	r0, r6
 8018d62:	4639      	mov	r1, r7
 8018d64:	f7e7 fef2 	bl	8000b4c <__aeabi_dcmpun>
 8018d68:	9001      	str	r0, [sp, #4]
 8018d6a:	b1e8      	cbz	r0, 8018da8 <pow+0x8c>
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	2300      	movs	r3, #0
 8018d70:	4620      	mov	r0, r4
 8018d72:	4629      	mov	r1, r5
 8018d74:	f7e7 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	d046      	beq.n	8018e0a <pow+0xee>
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	9302      	str	r3, [sp, #8]
 8018d80:	4b96      	ldr	r3, [pc, #600]	; (8018fdc <pow+0x2c0>)
 8018d82:	9303      	str	r3, [sp, #12]
 8018d84:	4b96      	ldr	r3, [pc, #600]	; (8018fe0 <pow+0x2c4>)
 8018d86:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018d90:	9b00      	ldr	r3, [sp, #0]
 8018d92:	2b02      	cmp	r3, #2
 8018d94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018d98:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018d9c:	d033      	beq.n	8018e06 <pow+0xea>
 8018d9e:	a802      	add	r0, sp, #8
 8018da0:	f002 fc32 	bl	801b608 <matherr>
 8018da4:	bb48      	cbnz	r0, 8018dfa <pow+0xde>
 8018da6:	e05d      	b.n	8018e64 <pow+0x148>
 8018da8:	f04f 0a00 	mov.w	sl, #0
 8018dac:	f04f 0b00 	mov.w	fp, #0
 8018db0:	4652      	mov	r2, sl
 8018db2:	465b      	mov	r3, fp
 8018db4:	4630      	mov	r0, r6
 8018db6:	4639      	mov	r1, r7
 8018db8:	f7e7 fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8018dbc:	ec4b ab19 	vmov	d9, sl, fp
 8018dc0:	2800      	cmp	r0, #0
 8018dc2:	d054      	beq.n	8018e6e <pow+0x152>
 8018dc4:	4652      	mov	r2, sl
 8018dc6:	465b      	mov	r3, fp
 8018dc8:	4620      	mov	r0, r4
 8018dca:	4629      	mov	r1, r5
 8018dcc:	f7e7 fe8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8018dd0:	4680      	mov	r8, r0
 8018dd2:	b318      	cbz	r0, 8018e1c <pow+0x100>
 8018dd4:	2301      	movs	r3, #1
 8018dd6:	9302      	str	r3, [sp, #8]
 8018dd8:	4b80      	ldr	r3, [pc, #512]	; (8018fdc <pow+0x2c0>)
 8018dda:	9303      	str	r3, [sp, #12]
 8018ddc:	9b01      	ldr	r3, [sp, #4]
 8018dde:	930a      	str	r3, [sp, #40]	; 0x28
 8018de0:	9b00      	ldr	r3, [sp, #0]
 8018de2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018de6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018dea:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d0d5      	beq.n	8018d9e <pow+0x82>
 8018df2:	4b7b      	ldr	r3, [pc, #492]	; (8018fe0 <pow+0x2c4>)
 8018df4:	2200      	movs	r2, #0
 8018df6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dfc:	b11b      	cbz	r3, 8018e06 <pow+0xea>
 8018dfe:	f7fc f85d 	bl	8014ebc <__errno>
 8018e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e04:	6003      	str	r3, [r0, #0]
 8018e06:	ed9d 8b08 	vldr	d8, [sp, #32]
 8018e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8018e0e:	eef0 0a68 	vmov.f32	s1, s17
 8018e12:	b00d      	add	sp, #52	; 0x34
 8018e14:	ecbd 8b04 	vpop	{d8-d9}
 8018e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e1c:	ec45 4b10 	vmov	d0, r4, r5
 8018e20:	f002 fb63 	bl	801b4ea <finite>
 8018e24:	2800      	cmp	r0, #0
 8018e26:	d0f0      	beq.n	8018e0a <pow+0xee>
 8018e28:	4652      	mov	r2, sl
 8018e2a:	465b      	mov	r3, fp
 8018e2c:	4620      	mov	r0, r4
 8018e2e:	4629      	mov	r1, r5
 8018e30:	f7e7 fe64 	bl	8000afc <__aeabi_dcmplt>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	d0e8      	beq.n	8018e0a <pow+0xee>
 8018e38:	2301      	movs	r3, #1
 8018e3a:	9302      	str	r3, [sp, #8]
 8018e3c:	4b67      	ldr	r3, [pc, #412]	; (8018fdc <pow+0x2c0>)
 8018e3e:	9303      	str	r3, [sp, #12]
 8018e40:	f999 3000 	ldrsb.w	r3, [r9]
 8018e44:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8018e48:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018e4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018e50:	b913      	cbnz	r3, 8018e58 <pow+0x13c>
 8018e52:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018e56:	e7a2      	b.n	8018d9e <pow+0x82>
 8018e58:	4962      	ldr	r1, [pc, #392]	; (8018fe4 <pow+0x2c8>)
 8018e5a:	2000      	movs	r0, #0
 8018e5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018e60:	2b02      	cmp	r3, #2
 8018e62:	d19c      	bne.n	8018d9e <pow+0x82>
 8018e64:	f7fc f82a 	bl	8014ebc <__errno>
 8018e68:	2321      	movs	r3, #33	; 0x21
 8018e6a:	6003      	str	r3, [r0, #0]
 8018e6c:	e7c5      	b.n	8018dfa <pow+0xde>
 8018e6e:	eeb0 0a48 	vmov.f32	s0, s16
 8018e72:	eef0 0a68 	vmov.f32	s1, s17
 8018e76:	f002 fb38 	bl	801b4ea <finite>
 8018e7a:	9000      	str	r0, [sp, #0]
 8018e7c:	2800      	cmp	r0, #0
 8018e7e:	f040 8081 	bne.w	8018f84 <pow+0x268>
 8018e82:	ec47 6b10 	vmov	d0, r6, r7
 8018e86:	f002 fb30 	bl	801b4ea <finite>
 8018e8a:	2800      	cmp	r0, #0
 8018e8c:	d07a      	beq.n	8018f84 <pow+0x268>
 8018e8e:	ec45 4b10 	vmov	d0, r4, r5
 8018e92:	f002 fb2a 	bl	801b4ea <finite>
 8018e96:	2800      	cmp	r0, #0
 8018e98:	d074      	beq.n	8018f84 <pow+0x268>
 8018e9a:	ec53 2b18 	vmov	r2, r3, d8
 8018e9e:	ee18 0a10 	vmov	r0, s16
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	f7e7 fe52 	bl	8000b4c <__aeabi_dcmpun>
 8018ea8:	f999 9000 	ldrsb.w	r9, [r9]
 8018eac:	4b4b      	ldr	r3, [pc, #300]	; (8018fdc <pow+0x2c0>)
 8018eae:	b1b0      	cbz	r0, 8018ede <pow+0x1c2>
 8018eb0:	2201      	movs	r2, #1
 8018eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018eb6:	9b00      	ldr	r3, [sp, #0]
 8018eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8018eba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018ebe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018ec2:	f1b9 0f00 	cmp.w	r9, #0
 8018ec6:	d0c4      	beq.n	8018e52 <pow+0x136>
 8018ec8:	4652      	mov	r2, sl
 8018eca:	465b      	mov	r3, fp
 8018ecc:	4650      	mov	r0, sl
 8018ece:	4659      	mov	r1, fp
 8018ed0:	f7e7 fccc 	bl	800086c <__aeabi_ddiv>
 8018ed4:	f1b9 0f02 	cmp.w	r9, #2
 8018ed8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018edc:	e7c1      	b.n	8018e62 <pow+0x146>
 8018ede:	2203      	movs	r2, #3
 8018ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ee4:	900a      	str	r0, [sp, #40]	; 0x28
 8018ee6:	4629      	mov	r1, r5
 8018ee8:	4620      	mov	r0, r4
 8018eea:	2200      	movs	r2, #0
 8018eec:	4b3e      	ldr	r3, [pc, #248]	; (8018fe8 <pow+0x2cc>)
 8018eee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018ef2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018ef6:	f7e7 fb8f 	bl	8000618 <__aeabi_dmul>
 8018efa:	4604      	mov	r4, r0
 8018efc:	460d      	mov	r5, r1
 8018efe:	f1b9 0f00 	cmp.w	r9, #0
 8018f02:	d124      	bne.n	8018f4e <pow+0x232>
 8018f04:	4b39      	ldr	r3, [pc, #228]	; (8018fec <pow+0x2d0>)
 8018f06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018f0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018f0e:	4630      	mov	r0, r6
 8018f10:	4652      	mov	r2, sl
 8018f12:	465b      	mov	r3, fp
 8018f14:	4639      	mov	r1, r7
 8018f16:	f7e7 fdf1 	bl	8000afc <__aeabi_dcmplt>
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d056      	beq.n	8018fcc <pow+0x2b0>
 8018f1e:	ec45 4b10 	vmov	d0, r4, r5
 8018f22:	f002 fb7d 	bl	801b620 <rint>
 8018f26:	4622      	mov	r2, r4
 8018f28:	462b      	mov	r3, r5
 8018f2a:	ec51 0b10 	vmov	r0, r1, d0
 8018f2e:	f7e7 fddb 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f32:	b920      	cbnz	r0, 8018f3e <pow+0x222>
 8018f34:	4b2e      	ldr	r3, [pc, #184]	; (8018ff0 <pow+0x2d4>)
 8018f36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018f3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018f3e:	f998 3000 	ldrsb.w	r3, [r8]
 8018f42:	2b02      	cmp	r3, #2
 8018f44:	d142      	bne.n	8018fcc <pow+0x2b0>
 8018f46:	f7fb ffb9 	bl	8014ebc <__errno>
 8018f4a:	2322      	movs	r3, #34	; 0x22
 8018f4c:	e78d      	b.n	8018e6a <pow+0x14e>
 8018f4e:	4b29      	ldr	r3, [pc, #164]	; (8018ff4 <pow+0x2d8>)
 8018f50:	2200      	movs	r2, #0
 8018f52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018f56:	4630      	mov	r0, r6
 8018f58:	4652      	mov	r2, sl
 8018f5a:	465b      	mov	r3, fp
 8018f5c:	4639      	mov	r1, r7
 8018f5e:	f7e7 fdcd 	bl	8000afc <__aeabi_dcmplt>
 8018f62:	2800      	cmp	r0, #0
 8018f64:	d0eb      	beq.n	8018f3e <pow+0x222>
 8018f66:	ec45 4b10 	vmov	d0, r4, r5
 8018f6a:	f002 fb59 	bl	801b620 <rint>
 8018f6e:	4622      	mov	r2, r4
 8018f70:	462b      	mov	r3, r5
 8018f72:	ec51 0b10 	vmov	r0, r1, d0
 8018f76:	f7e7 fdb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f7a:	2800      	cmp	r0, #0
 8018f7c:	d1df      	bne.n	8018f3e <pow+0x222>
 8018f7e:	2200      	movs	r2, #0
 8018f80:	4b18      	ldr	r3, [pc, #96]	; (8018fe4 <pow+0x2c8>)
 8018f82:	e7da      	b.n	8018f3a <pow+0x21e>
 8018f84:	2200      	movs	r2, #0
 8018f86:	2300      	movs	r3, #0
 8018f88:	ec51 0b18 	vmov	r0, r1, d8
 8018f8c:	f7e7 fdac 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f90:	2800      	cmp	r0, #0
 8018f92:	f43f af3a 	beq.w	8018e0a <pow+0xee>
 8018f96:	ec47 6b10 	vmov	d0, r6, r7
 8018f9a:	f002 faa6 	bl	801b4ea <finite>
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	f43f af33 	beq.w	8018e0a <pow+0xee>
 8018fa4:	ec45 4b10 	vmov	d0, r4, r5
 8018fa8:	f002 fa9f 	bl	801b4ea <finite>
 8018fac:	2800      	cmp	r0, #0
 8018fae:	f43f af2c 	beq.w	8018e0a <pow+0xee>
 8018fb2:	2304      	movs	r3, #4
 8018fb4:	9302      	str	r3, [sp, #8]
 8018fb6:	4b09      	ldr	r3, [pc, #36]	; (8018fdc <pow+0x2c0>)
 8018fb8:	9303      	str	r3, [sp, #12]
 8018fba:	2300      	movs	r3, #0
 8018fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8018fbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018fc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018fc6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8018fca:	e7b8      	b.n	8018f3e <pow+0x222>
 8018fcc:	a802      	add	r0, sp, #8
 8018fce:	f002 fb1b 	bl	801b608 <matherr>
 8018fd2:	2800      	cmp	r0, #0
 8018fd4:	f47f af11 	bne.w	8018dfa <pow+0xde>
 8018fd8:	e7b5      	b.n	8018f46 <pow+0x22a>
 8018fda:	bf00      	nop
 8018fdc:	0801c0b8 	.word	0x0801c0b8
 8018fe0:	3ff00000 	.word	0x3ff00000
 8018fe4:	fff00000 	.word	0xfff00000
 8018fe8:	3fe00000 	.word	0x3fe00000
 8018fec:	47efffff 	.word	0x47efffff
 8018ff0:	c7efffff 	.word	0xc7efffff
 8018ff4:	7ff00000 	.word	0x7ff00000
 8018ff8:	200003a4 	.word	0x200003a4

08018ffc <sqrtf>:
 8018ffc:	b510      	push	{r4, lr}
 8018ffe:	ed2d 8b02 	vpush	{d8}
 8019002:	b08a      	sub	sp, #40	; 0x28
 8019004:	eeb0 8a40 	vmov.f32	s16, s0
 8019008:	f001 fbfc 	bl	801a804 <__ieee754_sqrtf>
 801900c:	4b21      	ldr	r3, [pc, #132]	; (8019094 <sqrtf+0x98>)
 801900e:	f993 4000 	ldrsb.w	r4, [r3]
 8019012:	1c63      	adds	r3, r4, #1
 8019014:	d02c      	beq.n	8019070 <sqrtf+0x74>
 8019016:	eeb4 8a48 	vcmp.f32	s16, s16
 801901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801901e:	d627      	bvs.n	8019070 <sqrtf+0x74>
 8019020:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019028:	d522      	bpl.n	8019070 <sqrtf+0x74>
 801902a:	2301      	movs	r3, #1
 801902c:	9300      	str	r3, [sp, #0]
 801902e:	4b1a      	ldr	r3, [pc, #104]	; (8019098 <sqrtf+0x9c>)
 8019030:	9301      	str	r3, [sp, #4]
 8019032:	ee18 0a10 	vmov	r0, s16
 8019036:	2300      	movs	r3, #0
 8019038:	9308      	str	r3, [sp, #32]
 801903a:	f7e7 fa95 	bl	8000568 <__aeabi_f2d>
 801903e:	2200      	movs	r2, #0
 8019040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019048:	2300      	movs	r3, #0
 801904a:	b9ac      	cbnz	r4, 8019078 <sqrtf+0x7c>
 801904c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019050:	4668      	mov	r0, sp
 8019052:	f002 fad9 	bl	801b608 <matherr>
 8019056:	b1b8      	cbz	r0, 8019088 <sqrtf+0x8c>
 8019058:	9b08      	ldr	r3, [sp, #32]
 801905a:	b11b      	cbz	r3, 8019064 <sqrtf+0x68>
 801905c:	f7fb ff2e 	bl	8014ebc <__errno>
 8019060:	9b08      	ldr	r3, [sp, #32]
 8019062:	6003      	str	r3, [r0, #0]
 8019064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019068:	f7e7 fdce 	bl	8000c08 <__aeabi_d2f>
 801906c:	ee00 0a10 	vmov	s0, r0
 8019070:	b00a      	add	sp, #40	; 0x28
 8019072:	ecbd 8b02 	vpop	{d8}
 8019076:	bd10      	pop	{r4, pc}
 8019078:	4610      	mov	r0, r2
 801907a:	4619      	mov	r1, r3
 801907c:	f7e7 fbf6 	bl	800086c <__aeabi_ddiv>
 8019080:	2c02      	cmp	r4, #2
 8019082:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019086:	d1e3      	bne.n	8019050 <sqrtf+0x54>
 8019088:	f7fb ff18 	bl	8014ebc <__errno>
 801908c:	2321      	movs	r3, #33	; 0x21
 801908e:	6003      	str	r3, [r0, #0]
 8019090:	e7e2      	b.n	8019058 <sqrtf+0x5c>
 8019092:	bf00      	nop
 8019094:	200003a4 	.word	0x200003a4
 8019098:	0801c0bc 	.word	0x0801c0bc
 801909c:	00000000 	.word	0x00000000

080190a0 <__ieee754_asin>:
 80190a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a4:	ec55 4b10 	vmov	r4, r5, d0
 80190a8:	4bcb      	ldr	r3, [pc, #812]	; (80193d8 <__ieee754_asin+0x338>)
 80190aa:	b087      	sub	sp, #28
 80190ac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80190b0:	429f      	cmp	r7, r3
 80190b2:	9501      	str	r5, [sp, #4]
 80190b4:	dd31      	ble.n	801911a <__ieee754_asin+0x7a>
 80190b6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80190ba:	ee10 3a10 	vmov	r3, s0
 80190be:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80190c2:	433b      	orrs	r3, r7
 80190c4:	d117      	bne.n	80190f6 <__ieee754_asin+0x56>
 80190c6:	a3aa      	add	r3, pc, #680	; (adr r3, 8019370 <__ieee754_asin+0x2d0>)
 80190c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190cc:	ee10 0a10 	vmov	r0, s0
 80190d0:	4629      	mov	r1, r5
 80190d2:	f7e7 faa1 	bl	8000618 <__aeabi_dmul>
 80190d6:	a3a8      	add	r3, pc, #672	; (adr r3, 8019378 <__ieee754_asin+0x2d8>)
 80190d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190dc:	4606      	mov	r6, r0
 80190de:	460f      	mov	r7, r1
 80190e0:	4620      	mov	r0, r4
 80190e2:	4629      	mov	r1, r5
 80190e4:	f7e7 fa98 	bl	8000618 <__aeabi_dmul>
 80190e8:	4602      	mov	r2, r0
 80190ea:	460b      	mov	r3, r1
 80190ec:	4630      	mov	r0, r6
 80190ee:	4639      	mov	r1, r7
 80190f0:	f7e7 f8dc 	bl	80002ac <__adddf3>
 80190f4:	e00a      	b.n	801910c <__ieee754_asin+0x6c>
 80190f6:	ee10 2a10 	vmov	r2, s0
 80190fa:	462b      	mov	r3, r5
 80190fc:	4620      	mov	r0, r4
 80190fe:	4629      	mov	r1, r5
 8019100:	f7e7 f8d2 	bl	80002a8 <__aeabi_dsub>
 8019104:	4602      	mov	r2, r0
 8019106:	460b      	mov	r3, r1
 8019108:	f7e7 fbb0 	bl	800086c <__aeabi_ddiv>
 801910c:	4604      	mov	r4, r0
 801910e:	460d      	mov	r5, r1
 8019110:	ec45 4b10 	vmov	d0, r4, r5
 8019114:	b007      	add	sp, #28
 8019116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911a:	4bb0      	ldr	r3, [pc, #704]	; (80193dc <__ieee754_asin+0x33c>)
 801911c:	429f      	cmp	r7, r3
 801911e:	dc11      	bgt.n	8019144 <__ieee754_asin+0xa4>
 8019120:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8019124:	f280 80ae 	bge.w	8019284 <__ieee754_asin+0x1e4>
 8019128:	a395      	add	r3, pc, #596	; (adr r3, 8019380 <__ieee754_asin+0x2e0>)
 801912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912e:	ee10 0a10 	vmov	r0, s0
 8019132:	4629      	mov	r1, r5
 8019134:	f7e7 f8ba 	bl	80002ac <__adddf3>
 8019138:	2200      	movs	r2, #0
 801913a:	4ba9      	ldr	r3, [pc, #676]	; (80193e0 <__ieee754_asin+0x340>)
 801913c:	f7e7 fcfc 	bl	8000b38 <__aeabi_dcmpgt>
 8019140:	2800      	cmp	r0, #0
 8019142:	d1e5      	bne.n	8019110 <__ieee754_asin+0x70>
 8019144:	ec45 4b10 	vmov	d0, r4, r5
 8019148:	f002 f9c6 	bl	801b4d8 <fabs>
 801914c:	2000      	movs	r0, #0
 801914e:	ec53 2b10 	vmov	r2, r3, d0
 8019152:	49a3      	ldr	r1, [pc, #652]	; (80193e0 <__ieee754_asin+0x340>)
 8019154:	f7e7 f8a8 	bl	80002a8 <__aeabi_dsub>
 8019158:	2200      	movs	r2, #0
 801915a:	4ba2      	ldr	r3, [pc, #648]	; (80193e4 <__ieee754_asin+0x344>)
 801915c:	f7e7 fa5c 	bl	8000618 <__aeabi_dmul>
 8019160:	a389      	add	r3, pc, #548	; (adr r3, 8019388 <__ieee754_asin+0x2e8>)
 8019162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019166:	4604      	mov	r4, r0
 8019168:	460d      	mov	r5, r1
 801916a:	f7e7 fa55 	bl	8000618 <__aeabi_dmul>
 801916e:	a388      	add	r3, pc, #544	; (adr r3, 8019390 <__ieee754_asin+0x2f0>)
 8019170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019174:	f7e7 f89a 	bl	80002ac <__adddf3>
 8019178:	4622      	mov	r2, r4
 801917a:	462b      	mov	r3, r5
 801917c:	f7e7 fa4c 	bl	8000618 <__aeabi_dmul>
 8019180:	a385      	add	r3, pc, #532	; (adr r3, 8019398 <__ieee754_asin+0x2f8>)
 8019182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019186:	f7e7 f88f 	bl	80002a8 <__aeabi_dsub>
 801918a:	4622      	mov	r2, r4
 801918c:	462b      	mov	r3, r5
 801918e:	f7e7 fa43 	bl	8000618 <__aeabi_dmul>
 8019192:	a383      	add	r3, pc, #524	; (adr r3, 80193a0 <__ieee754_asin+0x300>)
 8019194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019198:	f7e7 f888 	bl	80002ac <__adddf3>
 801919c:	4622      	mov	r2, r4
 801919e:	462b      	mov	r3, r5
 80191a0:	f7e7 fa3a 	bl	8000618 <__aeabi_dmul>
 80191a4:	a380      	add	r3, pc, #512	; (adr r3, 80193a8 <__ieee754_asin+0x308>)
 80191a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191aa:	f7e7 f87d 	bl	80002a8 <__aeabi_dsub>
 80191ae:	4622      	mov	r2, r4
 80191b0:	462b      	mov	r3, r5
 80191b2:	f7e7 fa31 	bl	8000618 <__aeabi_dmul>
 80191b6:	a37e      	add	r3, pc, #504	; (adr r3, 80193b0 <__ieee754_asin+0x310>)
 80191b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191bc:	f7e7 f876 	bl	80002ac <__adddf3>
 80191c0:	4622      	mov	r2, r4
 80191c2:	462b      	mov	r3, r5
 80191c4:	f7e7 fa28 	bl	8000618 <__aeabi_dmul>
 80191c8:	a37b      	add	r3, pc, #492	; (adr r3, 80193b8 <__ieee754_asin+0x318>)
 80191ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ce:	4680      	mov	r8, r0
 80191d0:	4689      	mov	r9, r1
 80191d2:	4620      	mov	r0, r4
 80191d4:	4629      	mov	r1, r5
 80191d6:	f7e7 fa1f 	bl	8000618 <__aeabi_dmul>
 80191da:	a379      	add	r3, pc, #484	; (adr r3, 80193c0 <__ieee754_asin+0x320>)
 80191dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191e0:	f7e7 f862 	bl	80002a8 <__aeabi_dsub>
 80191e4:	4622      	mov	r2, r4
 80191e6:	462b      	mov	r3, r5
 80191e8:	f7e7 fa16 	bl	8000618 <__aeabi_dmul>
 80191ec:	a376      	add	r3, pc, #472	; (adr r3, 80193c8 <__ieee754_asin+0x328>)
 80191ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f2:	f7e7 f85b 	bl	80002ac <__adddf3>
 80191f6:	4622      	mov	r2, r4
 80191f8:	462b      	mov	r3, r5
 80191fa:	f7e7 fa0d 	bl	8000618 <__aeabi_dmul>
 80191fe:	a374      	add	r3, pc, #464	; (adr r3, 80193d0 <__ieee754_asin+0x330>)
 8019200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019204:	f7e7 f850 	bl	80002a8 <__aeabi_dsub>
 8019208:	4622      	mov	r2, r4
 801920a:	462b      	mov	r3, r5
 801920c:	f7e7 fa04 	bl	8000618 <__aeabi_dmul>
 8019210:	4b73      	ldr	r3, [pc, #460]	; (80193e0 <__ieee754_asin+0x340>)
 8019212:	2200      	movs	r2, #0
 8019214:	f7e7 f84a 	bl	80002ac <__adddf3>
 8019218:	ec45 4b10 	vmov	d0, r4, r5
 801921c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019220:	f001 fa40 	bl	801a6a4 <__ieee754_sqrt>
 8019224:	4b70      	ldr	r3, [pc, #448]	; (80193e8 <__ieee754_asin+0x348>)
 8019226:	429f      	cmp	r7, r3
 8019228:	ec5b ab10 	vmov	sl, fp, d0
 801922c:	f340 80de 	ble.w	80193ec <__ieee754_asin+0x34c>
 8019230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019234:	4640      	mov	r0, r8
 8019236:	4649      	mov	r1, r9
 8019238:	f7e7 fb18 	bl	800086c <__aeabi_ddiv>
 801923c:	4652      	mov	r2, sl
 801923e:	465b      	mov	r3, fp
 8019240:	f7e7 f9ea 	bl	8000618 <__aeabi_dmul>
 8019244:	4652      	mov	r2, sl
 8019246:	465b      	mov	r3, fp
 8019248:	f7e7 f830 	bl	80002ac <__adddf3>
 801924c:	4602      	mov	r2, r0
 801924e:	460b      	mov	r3, r1
 8019250:	f7e7 f82c 	bl	80002ac <__adddf3>
 8019254:	a348      	add	r3, pc, #288	; (adr r3, 8019378 <__ieee754_asin+0x2d8>)
 8019256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801925a:	f7e7 f825 	bl	80002a8 <__aeabi_dsub>
 801925e:	4602      	mov	r2, r0
 8019260:	460b      	mov	r3, r1
 8019262:	a143      	add	r1, pc, #268	; (adr r1, 8019370 <__ieee754_asin+0x2d0>)
 8019264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019268:	f7e7 f81e 	bl	80002a8 <__aeabi_dsub>
 801926c:	9b01      	ldr	r3, [sp, #4]
 801926e:	2b00      	cmp	r3, #0
 8019270:	bfdc      	itt	le
 8019272:	4602      	movle	r2, r0
 8019274:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8019278:	4604      	mov	r4, r0
 801927a:	460d      	mov	r5, r1
 801927c:	bfdc      	itt	le
 801927e:	4614      	movle	r4, r2
 8019280:	461d      	movle	r5, r3
 8019282:	e745      	b.n	8019110 <__ieee754_asin+0x70>
 8019284:	ee10 2a10 	vmov	r2, s0
 8019288:	ee10 0a10 	vmov	r0, s0
 801928c:	462b      	mov	r3, r5
 801928e:	4629      	mov	r1, r5
 8019290:	f7e7 f9c2 	bl	8000618 <__aeabi_dmul>
 8019294:	a33c      	add	r3, pc, #240	; (adr r3, 8019388 <__ieee754_asin+0x2e8>)
 8019296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801929a:	4606      	mov	r6, r0
 801929c:	460f      	mov	r7, r1
 801929e:	f7e7 f9bb 	bl	8000618 <__aeabi_dmul>
 80192a2:	a33b      	add	r3, pc, #236	; (adr r3, 8019390 <__ieee754_asin+0x2f0>)
 80192a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192a8:	f7e7 f800 	bl	80002ac <__adddf3>
 80192ac:	4632      	mov	r2, r6
 80192ae:	463b      	mov	r3, r7
 80192b0:	f7e7 f9b2 	bl	8000618 <__aeabi_dmul>
 80192b4:	a338      	add	r3, pc, #224	; (adr r3, 8019398 <__ieee754_asin+0x2f8>)
 80192b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ba:	f7e6 fff5 	bl	80002a8 <__aeabi_dsub>
 80192be:	4632      	mov	r2, r6
 80192c0:	463b      	mov	r3, r7
 80192c2:	f7e7 f9a9 	bl	8000618 <__aeabi_dmul>
 80192c6:	a336      	add	r3, pc, #216	; (adr r3, 80193a0 <__ieee754_asin+0x300>)
 80192c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192cc:	f7e6 ffee 	bl	80002ac <__adddf3>
 80192d0:	4632      	mov	r2, r6
 80192d2:	463b      	mov	r3, r7
 80192d4:	f7e7 f9a0 	bl	8000618 <__aeabi_dmul>
 80192d8:	a333      	add	r3, pc, #204	; (adr r3, 80193a8 <__ieee754_asin+0x308>)
 80192da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192de:	f7e6 ffe3 	bl	80002a8 <__aeabi_dsub>
 80192e2:	4632      	mov	r2, r6
 80192e4:	463b      	mov	r3, r7
 80192e6:	f7e7 f997 	bl	8000618 <__aeabi_dmul>
 80192ea:	a331      	add	r3, pc, #196	; (adr r3, 80193b0 <__ieee754_asin+0x310>)
 80192ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f0:	f7e6 ffdc 	bl	80002ac <__adddf3>
 80192f4:	4632      	mov	r2, r6
 80192f6:	463b      	mov	r3, r7
 80192f8:	f7e7 f98e 	bl	8000618 <__aeabi_dmul>
 80192fc:	a32e      	add	r3, pc, #184	; (adr r3, 80193b8 <__ieee754_asin+0x318>)
 80192fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019302:	4680      	mov	r8, r0
 8019304:	4689      	mov	r9, r1
 8019306:	4630      	mov	r0, r6
 8019308:	4639      	mov	r1, r7
 801930a:	f7e7 f985 	bl	8000618 <__aeabi_dmul>
 801930e:	a32c      	add	r3, pc, #176	; (adr r3, 80193c0 <__ieee754_asin+0x320>)
 8019310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019314:	f7e6 ffc8 	bl	80002a8 <__aeabi_dsub>
 8019318:	4632      	mov	r2, r6
 801931a:	463b      	mov	r3, r7
 801931c:	f7e7 f97c 	bl	8000618 <__aeabi_dmul>
 8019320:	a329      	add	r3, pc, #164	; (adr r3, 80193c8 <__ieee754_asin+0x328>)
 8019322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019326:	f7e6 ffc1 	bl	80002ac <__adddf3>
 801932a:	4632      	mov	r2, r6
 801932c:	463b      	mov	r3, r7
 801932e:	f7e7 f973 	bl	8000618 <__aeabi_dmul>
 8019332:	a327      	add	r3, pc, #156	; (adr r3, 80193d0 <__ieee754_asin+0x330>)
 8019334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019338:	f7e6 ffb6 	bl	80002a8 <__aeabi_dsub>
 801933c:	4632      	mov	r2, r6
 801933e:	463b      	mov	r3, r7
 8019340:	f7e7 f96a 	bl	8000618 <__aeabi_dmul>
 8019344:	2200      	movs	r2, #0
 8019346:	4b26      	ldr	r3, [pc, #152]	; (80193e0 <__ieee754_asin+0x340>)
 8019348:	f7e6 ffb0 	bl	80002ac <__adddf3>
 801934c:	4602      	mov	r2, r0
 801934e:	460b      	mov	r3, r1
 8019350:	4640      	mov	r0, r8
 8019352:	4649      	mov	r1, r9
 8019354:	f7e7 fa8a 	bl	800086c <__aeabi_ddiv>
 8019358:	4622      	mov	r2, r4
 801935a:	462b      	mov	r3, r5
 801935c:	f7e7 f95c 	bl	8000618 <__aeabi_dmul>
 8019360:	4602      	mov	r2, r0
 8019362:	460b      	mov	r3, r1
 8019364:	4620      	mov	r0, r4
 8019366:	4629      	mov	r1, r5
 8019368:	e6c2      	b.n	80190f0 <__ieee754_asin+0x50>
 801936a:	bf00      	nop
 801936c:	f3af 8000 	nop.w
 8019370:	54442d18 	.word	0x54442d18
 8019374:	3ff921fb 	.word	0x3ff921fb
 8019378:	33145c07 	.word	0x33145c07
 801937c:	3c91a626 	.word	0x3c91a626
 8019380:	8800759c 	.word	0x8800759c
 8019384:	7e37e43c 	.word	0x7e37e43c
 8019388:	0dfdf709 	.word	0x0dfdf709
 801938c:	3f023de1 	.word	0x3f023de1
 8019390:	7501b288 	.word	0x7501b288
 8019394:	3f49efe0 	.word	0x3f49efe0
 8019398:	b5688f3b 	.word	0xb5688f3b
 801939c:	3fa48228 	.word	0x3fa48228
 80193a0:	0e884455 	.word	0x0e884455
 80193a4:	3fc9c155 	.word	0x3fc9c155
 80193a8:	03eb6f7d 	.word	0x03eb6f7d
 80193ac:	3fd4d612 	.word	0x3fd4d612
 80193b0:	55555555 	.word	0x55555555
 80193b4:	3fc55555 	.word	0x3fc55555
 80193b8:	b12e9282 	.word	0xb12e9282
 80193bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80193c0:	1b8d0159 	.word	0x1b8d0159
 80193c4:	3fe6066c 	.word	0x3fe6066c
 80193c8:	9c598ac8 	.word	0x9c598ac8
 80193cc:	40002ae5 	.word	0x40002ae5
 80193d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80193d4:	40033a27 	.word	0x40033a27
 80193d8:	3fefffff 	.word	0x3fefffff
 80193dc:	3fdfffff 	.word	0x3fdfffff
 80193e0:	3ff00000 	.word	0x3ff00000
 80193e4:	3fe00000 	.word	0x3fe00000
 80193e8:	3fef3332 	.word	0x3fef3332
 80193ec:	ee10 2a10 	vmov	r2, s0
 80193f0:	ee10 0a10 	vmov	r0, s0
 80193f4:	465b      	mov	r3, fp
 80193f6:	4659      	mov	r1, fp
 80193f8:	f7e6 ff58 	bl	80002ac <__adddf3>
 80193fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019404:	4640      	mov	r0, r8
 8019406:	4649      	mov	r1, r9
 8019408:	f7e7 fa30 	bl	800086c <__aeabi_ddiv>
 801940c:	4602      	mov	r2, r0
 801940e:	460b      	mov	r3, r1
 8019410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019414:	f7e7 f900 	bl	8000618 <__aeabi_dmul>
 8019418:	2600      	movs	r6, #0
 801941a:	4680      	mov	r8, r0
 801941c:	4689      	mov	r9, r1
 801941e:	4632      	mov	r2, r6
 8019420:	465b      	mov	r3, fp
 8019422:	4630      	mov	r0, r6
 8019424:	4659      	mov	r1, fp
 8019426:	f7e7 f8f7 	bl	8000618 <__aeabi_dmul>
 801942a:	4602      	mov	r2, r0
 801942c:	460b      	mov	r3, r1
 801942e:	4620      	mov	r0, r4
 8019430:	4629      	mov	r1, r5
 8019432:	f7e6 ff39 	bl	80002a8 <__aeabi_dsub>
 8019436:	4632      	mov	r2, r6
 8019438:	4604      	mov	r4, r0
 801943a:	460d      	mov	r5, r1
 801943c:	465b      	mov	r3, fp
 801943e:	4650      	mov	r0, sl
 8019440:	4659      	mov	r1, fp
 8019442:	f7e6 ff33 	bl	80002ac <__adddf3>
 8019446:	4602      	mov	r2, r0
 8019448:	460b      	mov	r3, r1
 801944a:	4620      	mov	r0, r4
 801944c:	4629      	mov	r1, r5
 801944e:	f7e7 fa0d 	bl	800086c <__aeabi_ddiv>
 8019452:	4602      	mov	r2, r0
 8019454:	460b      	mov	r3, r1
 8019456:	f7e6 ff29 	bl	80002ac <__adddf3>
 801945a:	4602      	mov	r2, r0
 801945c:	460b      	mov	r3, r1
 801945e:	a114      	add	r1, pc, #80	; (adr r1, 80194b0 <__ieee754_asin+0x410>)
 8019460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019464:	f7e6 ff20 	bl	80002a8 <__aeabi_dsub>
 8019468:	4602      	mov	r2, r0
 801946a:	460b      	mov	r3, r1
 801946c:	4640      	mov	r0, r8
 801946e:	4649      	mov	r1, r9
 8019470:	f7e6 ff1a 	bl	80002a8 <__aeabi_dsub>
 8019474:	465f      	mov	r7, fp
 8019476:	4604      	mov	r4, r0
 8019478:	460d      	mov	r5, r1
 801947a:	4632      	mov	r2, r6
 801947c:	465b      	mov	r3, fp
 801947e:	4630      	mov	r0, r6
 8019480:	4639      	mov	r1, r7
 8019482:	f7e6 ff13 	bl	80002ac <__adddf3>
 8019486:	4602      	mov	r2, r0
 8019488:	460b      	mov	r3, r1
 801948a:	a10b      	add	r1, pc, #44	; (adr r1, 80194b8 <__ieee754_asin+0x418>)
 801948c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019490:	f7e6 ff0a 	bl	80002a8 <__aeabi_dsub>
 8019494:	4602      	mov	r2, r0
 8019496:	460b      	mov	r3, r1
 8019498:	4620      	mov	r0, r4
 801949a:	4629      	mov	r1, r5
 801949c:	f7e6 ff04 	bl	80002a8 <__aeabi_dsub>
 80194a0:	4602      	mov	r2, r0
 80194a2:	460b      	mov	r3, r1
 80194a4:	a104      	add	r1, pc, #16	; (adr r1, 80194b8 <__ieee754_asin+0x418>)
 80194a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194aa:	e6dd      	b.n	8019268 <__ieee754_asin+0x1c8>
 80194ac:	f3af 8000 	nop.w
 80194b0:	33145c07 	.word	0x33145c07
 80194b4:	3c91a626 	.word	0x3c91a626
 80194b8:	54442d18 	.word	0x54442d18
 80194bc:	3fe921fb 	.word	0x3fe921fb

080194c0 <__ieee754_atan2>:
 80194c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194c4:	ec57 6b11 	vmov	r6, r7, d1
 80194c8:	4273      	negs	r3, r6
 80194ca:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80194ce:	4333      	orrs	r3, r6
 80194d0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019678 <__ieee754_atan2+0x1b8>
 80194d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80194d8:	4573      	cmp	r3, lr
 80194da:	ec51 0b10 	vmov	r0, r1, d0
 80194de:	ee11 8a10 	vmov	r8, s2
 80194e2:	d80a      	bhi.n	80194fa <__ieee754_atan2+0x3a>
 80194e4:	4244      	negs	r4, r0
 80194e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80194ea:	4304      	orrs	r4, r0
 80194ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80194f0:	4574      	cmp	r4, lr
 80194f2:	468c      	mov	ip, r1
 80194f4:	ee10 9a10 	vmov	r9, s0
 80194f8:	d907      	bls.n	801950a <__ieee754_atan2+0x4a>
 80194fa:	4632      	mov	r2, r6
 80194fc:	463b      	mov	r3, r7
 80194fe:	f7e6 fed5 	bl	80002ac <__adddf3>
 8019502:	ec41 0b10 	vmov	d0, r0, r1
 8019506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801950a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801950e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019512:	4334      	orrs	r4, r6
 8019514:	d103      	bne.n	801951e <__ieee754_atan2+0x5e>
 8019516:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801951a:	f001 be3d 	b.w	801b198 <atan>
 801951e:	17bc      	asrs	r4, r7, #30
 8019520:	f004 0402 	and.w	r4, r4, #2
 8019524:	ea53 0909 	orrs.w	r9, r3, r9
 8019528:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801952c:	d107      	bne.n	801953e <__ieee754_atan2+0x7e>
 801952e:	2c02      	cmp	r4, #2
 8019530:	d073      	beq.n	801961a <__ieee754_atan2+0x15a>
 8019532:	2c03      	cmp	r4, #3
 8019534:	d1e5      	bne.n	8019502 <__ieee754_atan2+0x42>
 8019536:	a13e      	add	r1, pc, #248	; (adr r1, 8019630 <__ieee754_atan2+0x170>)
 8019538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801953c:	e7e1      	b.n	8019502 <__ieee754_atan2+0x42>
 801953e:	ea52 0808 	orrs.w	r8, r2, r8
 8019542:	d106      	bne.n	8019552 <__ieee754_atan2+0x92>
 8019544:	f1bc 0f00 	cmp.w	ip, #0
 8019548:	da6b      	bge.n	8019622 <__ieee754_atan2+0x162>
 801954a:	a13b      	add	r1, pc, #236	; (adr r1, 8019638 <__ieee754_atan2+0x178>)
 801954c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019550:	e7d7      	b.n	8019502 <__ieee754_atan2+0x42>
 8019552:	4572      	cmp	r2, lr
 8019554:	d120      	bne.n	8019598 <__ieee754_atan2+0xd8>
 8019556:	4293      	cmp	r3, r2
 8019558:	d111      	bne.n	801957e <__ieee754_atan2+0xbe>
 801955a:	2c02      	cmp	r4, #2
 801955c:	d007      	beq.n	801956e <__ieee754_atan2+0xae>
 801955e:	2c03      	cmp	r4, #3
 8019560:	d009      	beq.n	8019576 <__ieee754_atan2+0xb6>
 8019562:	2c01      	cmp	r4, #1
 8019564:	d155      	bne.n	8019612 <__ieee754_atan2+0x152>
 8019566:	a136      	add	r1, pc, #216	; (adr r1, 8019640 <__ieee754_atan2+0x180>)
 8019568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801956c:	e7c9      	b.n	8019502 <__ieee754_atan2+0x42>
 801956e:	a136      	add	r1, pc, #216	; (adr r1, 8019648 <__ieee754_atan2+0x188>)
 8019570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019574:	e7c5      	b.n	8019502 <__ieee754_atan2+0x42>
 8019576:	a136      	add	r1, pc, #216	; (adr r1, 8019650 <__ieee754_atan2+0x190>)
 8019578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801957c:	e7c1      	b.n	8019502 <__ieee754_atan2+0x42>
 801957e:	2c02      	cmp	r4, #2
 8019580:	d04b      	beq.n	801961a <__ieee754_atan2+0x15a>
 8019582:	2c03      	cmp	r4, #3
 8019584:	d0d7      	beq.n	8019536 <__ieee754_atan2+0x76>
 8019586:	2c01      	cmp	r4, #1
 8019588:	f04f 0000 	mov.w	r0, #0
 801958c:	d102      	bne.n	8019594 <__ieee754_atan2+0xd4>
 801958e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019592:	e7b6      	b.n	8019502 <__ieee754_atan2+0x42>
 8019594:	2100      	movs	r1, #0
 8019596:	e7b4      	b.n	8019502 <__ieee754_atan2+0x42>
 8019598:	4573      	cmp	r3, lr
 801959a:	d0d3      	beq.n	8019544 <__ieee754_atan2+0x84>
 801959c:	1a9b      	subs	r3, r3, r2
 801959e:	151b      	asrs	r3, r3, #20
 80195a0:	2b3c      	cmp	r3, #60	; 0x3c
 80195a2:	dc1e      	bgt.n	80195e2 <__ieee754_atan2+0x122>
 80195a4:	2f00      	cmp	r7, #0
 80195a6:	da01      	bge.n	80195ac <__ieee754_atan2+0xec>
 80195a8:	333c      	adds	r3, #60	; 0x3c
 80195aa:	db1e      	blt.n	80195ea <__ieee754_atan2+0x12a>
 80195ac:	4632      	mov	r2, r6
 80195ae:	463b      	mov	r3, r7
 80195b0:	f7e7 f95c 	bl	800086c <__aeabi_ddiv>
 80195b4:	ec41 0b10 	vmov	d0, r0, r1
 80195b8:	f001 ff8e 	bl	801b4d8 <fabs>
 80195bc:	f001 fdec 	bl	801b198 <atan>
 80195c0:	ec51 0b10 	vmov	r0, r1, d0
 80195c4:	2c01      	cmp	r4, #1
 80195c6:	d013      	beq.n	80195f0 <__ieee754_atan2+0x130>
 80195c8:	2c02      	cmp	r4, #2
 80195ca:	d015      	beq.n	80195f8 <__ieee754_atan2+0x138>
 80195cc:	2c00      	cmp	r4, #0
 80195ce:	d098      	beq.n	8019502 <__ieee754_atan2+0x42>
 80195d0:	a321      	add	r3, pc, #132	; (adr r3, 8019658 <__ieee754_atan2+0x198>)
 80195d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d6:	f7e6 fe67 	bl	80002a8 <__aeabi_dsub>
 80195da:	a321      	add	r3, pc, #132	; (adr r3, 8019660 <__ieee754_atan2+0x1a0>)
 80195dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e0:	e014      	b.n	801960c <__ieee754_atan2+0x14c>
 80195e2:	a121      	add	r1, pc, #132	; (adr r1, 8019668 <__ieee754_atan2+0x1a8>)
 80195e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80195e8:	e7ec      	b.n	80195c4 <__ieee754_atan2+0x104>
 80195ea:	2000      	movs	r0, #0
 80195ec:	2100      	movs	r1, #0
 80195ee:	e7e9      	b.n	80195c4 <__ieee754_atan2+0x104>
 80195f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80195f4:	4619      	mov	r1, r3
 80195f6:	e784      	b.n	8019502 <__ieee754_atan2+0x42>
 80195f8:	a317      	add	r3, pc, #92	; (adr r3, 8019658 <__ieee754_atan2+0x198>)
 80195fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195fe:	f7e6 fe53 	bl	80002a8 <__aeabi_dsub>
 8019602:	4602      	mov	r2, r0
 8019604:	460b      	mov	r3, r1
 8019606:	a116      	add	r1, pc, #88	; (adr r1, 8019660 <__ieee754_atan2+0x1a0>)
 8019608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801960c:	f7e6 fe4c 	bl	80002a8 <__aeabi_dsub>
 8019610:	e777      	b.n	8019502 <__ieee754_atan2+0x42>
 8019612:	a117      	add	r1, pc, #92	; (adr r1, 8019670 <__ieee754_atan2+0x1b0>)
 8019614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019618:	e773      	b.n	8019502 <__ieee754_atan2+0x42>
 801961a:	a111      	add	r1, pc, #68	; (adr r1, 8019660 <__ieee754_atan2+0x1a0>)
 801961c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019620:	e76f      	b.n	8019502 <__ieee754_atan2+0x42>
 8019622:	a111      	add	r1, pc, #68	; (adr r1, 8019668 <__ieee754_atan2+0x1a8>)
 8019624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019628:	e76b      	b.n	8019502 <__ieee754_atan2+0x42>
 801962a:	bf00      	nop
 801962c:	f3af 8000 	nop.w
 8019630:	54442d18 	.word	0x54442d18
 8019634:	c00921fb 	.word	0xc00921fb
 8019638:	54442d18 	.word	0x54442d18
 801963c:	bff921fb 	.word	0xbff921fb
 8019640:	54442d18 	.word	0x54442d18
 8019644:	bfe921fb 	.word	0xbfe921fb
 8019648:	7f3321d2 	.word	0x7f3321d2
 801964c:	4002d97c 	.word	0x4002d97c
 8019650:	7f3321d2 	.word	0x7f3321d2
 8019654:	c002d97c 	.word	0xc002d97c
 8019658:	33145c07 	.word	0x33145c07
 801965c:	3ca1a626 	.word	0x3ca1a626
 8019660:	54442d18 	.word	0x54442d18
 8019664:	400921fb 	.word	0x400921fb
 8019668:	54442d18 	.word	0x54442d18
 801966c:	3ff921fb 	.word	0x3ff921fb
 8019670:	54442d18 	.word	0x54442d18
 8019674:	3fe921fb 	.word	0x3fe921fb
 8019678:	7ff00000 	.word	0x7ff00000

0801967c <__ieee754_fmod>:
 801967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019680:	ec53 2b11 	vmov	r2, r3, d1
 8019684:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8019688:	ea5e 0402 	orrs.w	r4, lr, r2
 801968c:	ec51 0b10 	vmov	r0, r1, d0
 8019690:	461e      	mov	r6, r3
 8019692:	ee11 5a10 	vmov	r5, s2
 8019696:	4694      	mov	ip, r2
 8019698:	d00c      	beq.n	80196b4 <__ieee754_fmod+0x38>
 801969a:	4c7a      	ldr	r4, [pc, #488]	; (8019884 <__ieee754_fmod+0x208>)
 801969c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80196a0:	45a0      	cmp	r8, r4
 80196a2:	4689      	mov	r9, r1
 80196a4:	dc06      	bgt.n	80196b4 <__ieee754_fmod+0x38>
 80196a6:	4254      	negs	r4, r2
 80196a8:	4314      	orrs	r4, r2
 80196aa:	4f77      	ldr	r7, [pc, #476]	; (8019888 <__ieee754_fmod+0x20c>)
 80196ac:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80196b0:	42bc      	cmp	r4, r7
 80196b2:	d909      	bls.n	80196c8 <__ieee754_fmod+0x4c>
 80196b4:	f7e6 ffb0 	bl	8000618 <__aeabi_dmul>
 80196b8:	4602      	mov	r2, r0
 80196ba:	460b      	mov	r3, r1
 80196bc:	f7e7 f8d6 	bl	800086c <__aeabi_ddiv>
 80196c0:	ec41 0b10 	vmov	d0, r0, r1
 80196c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196c8:	45f0      	cmp	r8, lr
 80196ca:	ee10 2a10 	vmov	r2, s0
 80196ce:	4607      	mov	r7, r0
 80196d0:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 80196d4:	dc0a      	bgt.n	80196ec <__ieee754_fmod+0x70>
 80196d6:	dbf3      	blt.n	80196c0 <__ieee754_fmod+0x44>
 80196d8:	42a8      	cmp	r0, r5
 80196da:	d3f1      	bcc.n	80196c0 <__ieee754_fmod+0x44>
 80196dc:	d106      	bne.n	80196ec <__ieee754_fmod+0x70>
 80196de:	496b      	ldr	r1, [pc, #428]	; (801988c <__ieee754_fmod+0x210>)
 80196e0:	0fe4      	lsrs	r4, r4, #31
 80196e2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80196e6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80196ea:	e7e9      	b.n	80196c0 <__ieee754_fmod+0x44>
 80196ec:	4b68      	ldr	r3, [pc, #416]	; (8019890 <__ieee754_fmod+0x214>)
 80196ee:	4598      	cmp	r8, r3
 80196f0:	dc49      	bgt.n	8019786 <__ieee754_fmod+0x10a>
 80196f2:	f1b8 0f00 	cmp.w	r8, #0
 80196f6:	d13d      	bne.n	8019774 <__ieee754_fmod+0xf8>
 80196f8:	4866      	ldr	r0, [pc, #408]	; (8019894 <__ieee754_fmod+0x218>)
 80196fa:	4611      	mov	r1, r2
 80196fc:	2900      	cmp	r1, #0
 80196fe:	dc36      	bgt.n	801976e <__ieee754_fmod+0xf2>
 8019700:	459e      	cmp	lr, r3
 8019702:	dc51      	bgt.n	80197a8 <__ieee754_fmod+0x12c>
 8019704:	f1be 0f00 	cmp.w	lr, #0
 8019708:	d145      	bne.n	8019796 <__ieee754_fmod+0x11a>
 801970a:	4b62      	ldr	r3, [pc, #392]	; (8019894 <__ieee754_fmod+0x218>)
 801970c:	4629      	mov	r1, r5
 801970e:	2900      	cmp	r1, #0
 8019710:	dc3e      	bgt.n	8019790 <__ieee754_fmod+0x114>
 8019712:	4961      	ldr	r1, [pc, #388]	; (8019898 <__ieee754_fmod+0x21c>)
 8019714:	4288      	cmp	r0, r1
 8019716:	db4c      	blt.n	80197b2 <__ieee754_fmod+0x136>
 8019718:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801971c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019720:	4a5d      	ldr	r2, [pc, #372]	; (8019898 <__ieee754_fmod+0x21c>)
 8019722:	4293      	cmp	r3, r2
 8019724:	db59      	blt.n	80197da <__ieee754_fmod+0x15e>
 8019726:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801972a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801972e:	1ac0      	subs	r0, r0, r3
 8019730:	1b8a      	subs	r2, r1, r6
 8019732:	eba7 050c 	sub.w	r5, r7, ip
 8019736:	2800      	cmp	r0, #0
 8019738:	d166      	bne.n	8019808 <__ieee754_fmod+0x18c>
 801973a:	4567      	cmp	r7, ip
 801973c:	bf38      	it	cc
 801973e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8019742:	2a00      	cmp	r2, #0
 8019744:	bfbc      	itt	lt
 8019746:	463d      	movlt	r5, r7
 8019748:	460a      	movlt	r2, r1
 801974a:	ea52 0105 	orrs.w	r1, r2, r5
 801974e:	d0c6      	beq.n	80196de <__ieee754_fmod+0x62>
 8019750:	494f      	ldr	r1, [pc, #316]	; (8019890 <__ieee754_fmod+0x214>)
 8019752:	428a      	cmp	r2, r1
 8019754:	dd6d      	ble.n	8019832 <__ieee754_fmod+0x1b6>
 8019756:	4950      	ldr	r1, [pc, #320]	; (8019898 <__ieee754_fmod+0x21c>)
 8019758:	428b      	cmp	r3, r1
 801975a:	db70      	blt.n	801983e <__ieee754_fmod+0x1c2>
 801975c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8019760:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8019764:	4314      	orrs	r4, r2
 8019766:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801976a:	4628      	mov	r0, r5
 801976c:	e7a8      	b.n	80196c0 <__ieee754_fmod+0x44>
 801976e:	3801      	subs	r0, #1
 8019770:	0049      	lsls	r1, r1, #1
 8019772:	e7c3      	b.n	80196fc <__ieee754_fmod+0x80>
 8019774:	4848      	ldr	r0, [pc, #288]	; (8019898 <__ieee754_fmod+0x21c>)
 8019776:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801977a:	0049      	lsls	r1, r1, #1
 801977c:	2900      	cmp	r1, #0
 801977e:	f100 30ff 	add.w	r0, r0, #4294967295
 8019782:	dcfa      	bgt.n	801977a <__ieee754_fmod+0xfe>
 8019784:	e7bc      	b.n	8019700 <__ieee754_fmod+0x84>
 8019786:	ea4f 5028 	mov.w	r0, r8, asr #20
 801978a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801978e:	e7b7      	b.n	8019700 <__ieee754_fmod+0x84>
 8019790:	3b01      	subs	r3, #1
 8019792:	0049      	lsls	r1, r1, #1
 8019794:	e7bb      	b.n	801970e <__ieee754_fmod+0x92>
 8019796:	4b40      	ldr	r3, [pc, #256]	; (8019898 <__ieee754_fmod+0x21c>)
 8019798:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801979c:	0049      	lsls	r1, r1, #1
 801979e:	2900      	cmp	r1, #0
 80197a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80197a4:	dcfa      	bgt.n	801979c <__ieee754_fmod+0x120>
 80197a6:	e7b4      	b.n	8019712 <__ieee754_fmod+0x96>
 80197a8:	ea4f 532e 	mov.w	r3, lr, asr #20
 80197ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80197b0:	e7af      	b.n	8019712 <__ieee754_fmod+0x96>
 80197b2:	1a0f      	subs	r7, r1, r0
 80197b4:	2f1f      	cmp	r7, #31
 80197b6:	dc0a      	bgt.n	80197ce <__ieee754_fmod+0x152>
 80197b8:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80197bc:	fa08 f807 	lsl.w	r8, r8, r7
 80197c0:	fa22 f101 	lsr.w	r1, r2, r1
 80197c4:	ea41 0108 	orr.w	r1, r1, r8
 80197c8:	fa02 f707 	lsl.w	r7, r2, r7
 80197cc:	e7a8      	b.n	8019720 <__ieee754_fmod+0xa4>
 80197ce:	4933      	ldr	r1, [pc, #204]	; (801989c <__ieee754_fmod+0x220>)
 80197d0:	1a09      	subs	r1, r1, r0
 80197d2:	fa02 f101 	lsl.w	r1, r2, r1
 80197d6:	2700      	movs	r7, #0
 80197d8:	e7a2      	b.n	8019720 <__ieee754_fmod+0xa4>
 80197da:	eba2 0c03 	sub.w	ip, r2, r3
 80197de:	f1bc 0f1f 	cmp.w	ip, #31
 80197e2:	dc0a      	bgt.n	80197fa <__ieee754_fmod+0x17e>
 80197e4:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 80197e8:	fa0e fe0c 	lsl.w	lr, lr, ip
 80197ec:	fa25 f606 	lsr.w	r6, r5, r6
 80197f0:	ea46 060e 	orr.w	r6, r6, lr
 80197f4:	fa05 fc0c 	lsl.w	ip, r5, ip
 80197f8:	e799      	b.n	801972e <__ieee754_fmod+0xb2>
 80197fa:	4e28      	ldr	r6, [pc, #160]	; (801989c <__ieee754_fmod+0x220>)
 80197fc:	1af6      	subs	r6, r6, r3
 80197fe:	fa05 f606 	lsl.w	r6, r5, r6
 8019802:	f04f 0c00 	mov.w	ip, #0
 8019806:	e792      	b.n	801972e <__ieee754_fmod+0xb2>
 8019808:	4567      	cmp	r7, ip
 801980a:	bf38      	it	cc
 801980c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8019810:	2a00      	cmp	r2, #0
 8019812:	da05      	bge.n	8019820 <__ieee754_fmod+0x1a4>
 8019814:	0ffa      	lsrs	r2, r7, #31
 8019816:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801981a:	007f      	lsls	r7, r7, #1
 801981c:	3801      	subs	r0, #1
 801981e:	e787      	b.n	8019730 <__ieee754_fmod+0xb4>
 8019820:	ea52 0105 	orrs.w	r1, r2, r5
 8019824:	f43f af5b 	beq.w	80196de <__ieee754_fmod+0x62>
 8019828:	0fe9      	lsrs	r1, r5, #31
 801982a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801982e:	006f      	lsls	r7, r5, #1
 8019830:	e7f4      	b.n	801981c <__ieee754_fmod+0x1a0>
 8019832:	0fe8      	lsrs	r0, r5, #31
 8019834:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019838:	006d      	lsls	r5, r5, #1
 801983a:	3b01      	subs	r3, #1
 801983c:	e789      	b.n	8019752 <__ieee754_fmod+0xd6>
 801983e:	1ac9      	subs	r1, r1, r3
 8019840:	2914      	cmp	r1, #20
 8019842:	dc0a      	bgt.n	801985a <__ieee754_fmod+0x1de>
 8019844:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8019848:	fa02 f303 	lsl.w	r3, r2, r3
 801984c:	40cd      	lsrs	r5, r1
 801984e:	432b      	orrs	r3, r5
 8019850:	410a      	asrs	r2, r1
 8019852:	ea42 0104 	orr.w	r1, r2, r4
 8019856:	4618      	mov	r0, r3
 8019858:	e732      	b.n	80196c0 <__ieee754_fmod+0x44>
 801985a:	291f      	cmp	r1, #31
 801985c:	dc07      	bgt.n	801986e <__ieee754_fmod+0x1f2>
 801985e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8019862:	40cd      	lsrs	r5, r1
 8019864:	fa02 f303 	lsl.w	r3, r2, r3
 8019868:	432b      	orrs	r3, r5
 801986a:	4622      	mov	r2, r4
 801986c:	e7f1      	b.n	8019852 <__ieee754_fmod+0x1d6>
 801986e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019872:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019876:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801987a:	33e2      	adds	r3, #226	; 0xe2
 801987c:	fa42 f303 	asr.w	r3, r2, r3
 8019880:	e7f3      	b.n	801986a <__ieee754_fmod+0x1ee>
 8019882:	bf00      	nop
 8019884:	7fefffff 	.word	0x7fefffff
 8019888:	7ff00000 	.word	0x7ff00000
 801988c:	0801c0c8 	.word	0x0801c0c8
 8019890:	000fffff 	.word	0x000fffff
 8019894:	fffffbed 	.word	0xfffffbed
 8019898:	fffffc02 	.word	0xfffffc02
 801989c:	fffffbe2 	.word	0xfffffbe2

080198a0 <__ieee754_pow>:
 80198a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a4:	b091      	sub	sp, #68	; 0x44
 80198a6:	ed8d 1b00 	vstr	d1, [sp]
 80198aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80198ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80198b2:	ea58 0302 	orrs.w	r3, r8, r2
 80198b6:	ec57 6b10 	vmov	r6, r7, d0
 80198ba:	f000 84be 	beq.w	801a23a <__ieee754_pow+0x99a>
 80198be:	4b7a      	ldr	r3, [pc, #488]	; (8019aa8 <__ieee754_pow+0x208>)
 80198c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80198c4:	429c      	cmp	r4, r3
 80198c6:	463d      	mov	r5, r7
 80198c8:	ee10 aa10 	vmov	sl, s0
 80198cc:	dc09      	bgt.n	80198e2 <__ieee754_pow+0x42>
 80198ce:	d103      	bne.n	80198d8 <__ieee754_pow+0x38>
 80198d0:	b93e      	cbnz	r6, 80198e2 <__ieee754_pow+0x42>
 80198d2:	45a0      	cmp	r8, r4
 80198d4:	dc0d      	bgt.n	80198f2 <__ieee754_pow+0x52>
 80198d6:	e001      	b.n	80198dc <__ieee754_pow+0x3c>
 80198d8:	4598      	cmp	r8, r3
 80198da:	dc02      	bgt.n	80198e2 <__ieee754_pow+0x42>
 80198dc:	4598      	cmp	r8, r3
 80198de:	d10e      	bne.n	80198fe <__ieee754_pow+0x5e>
 80198e0:	b16a      	cbz	r2, 80198fe <__ieee754_pow+0x5e>
 80198e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80198e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80198ea:	ea54 030a 	orrs.w	r3, r4, sl
 80198ee:	f000 84a4 	beq.w	801a23a <__ieee754_pow+0x99a>
 80198f2:	486e      	ldr	r0, [pc, #440]	; (8019aac <__ieee754_pow+0x20c>)
 80198f4:	b011      	add	sp, #68	; 0x44
 80198f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fa:	f001 be89 	b.w	801b610 <nan>
 80198fe:	2d00      	cmp	r5, #0
 8019900:	da53      	bge.n	80199aa <__ieee754_pow+0x10a>
 8019902:	4b6b      	ldr	r3, [pc, #428]	; (8019ab0 <__ieee754_pow+0x210>)
 8019904:	4598      	cmp	r8, r3
 8019906:	dc4d      	bgt.n	80199a4 <__ieee754_pow+0x104>
 8019908:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801990c:	4598      	cmp	r8, r3
 801990e:	dd4c      	ble.n	80199aa <__ieee754_pow+0x10a>
 8019910:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019914:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019918:	2b14      	cmp	r3, #20
 801991a:	dd26      	ble.n	801996a <__ieee754_pow+0xca>
 801991c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019920:	fa22 f103 	lsr.w	r1, r2, r3
 8019924:	fa01 f303 	lsl.w	r3, r1, r3
 8019928:	4293      	cmp	r3, r2
 801992a:	d13e      	bne.n	80199aa <__ieee754_pow+0x10a>
 801992c:	f001 0101 	and.w	r1, r1, #1
 8019930:	f1c1 0b02 	rsb	fp, r1, #2
 8019934:	2a00      	cmp	r2, #0
 8019936:	d15b      	bne.n	80199f0 <__ieee754_pow+0x150>
 8019938:	4b5b      	ldr	r3, [pc, #364]	; (8019aa8 <__ieee754_pow+0x208>)
 801993a:	4598      	cmp	r8, r3
 801993c:	d124      	bne.n	8019988 <__ieee754_pow+0xe8>
 801993e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019942:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019946:	ea53 030a 	orrs.w	r3, r3, sl
 801994a:	f000 8476 	beq.w	801a23a <__ieee754_pow+0x99a>
 801994e:	4b59      	ldr	r3, [pc, #356]	; (8019ab4 <__ieee754_pow+0x214>)
 8019950:	429c      	cmp	r4, r3
 8019952:	dd2d      	ble.n	80199b0 <__ieee754_pow+0x110>
 8019954:	f1b9 0f00 	cmp.w	r9, #0
 8019958:	f280 8473 	bge.w	801a242 <__ieee754_pow+0x9a2>
 801995c:	2000      	movs	r0, #0
 801995e:	2100      	movs	r1, #0
 8019960:	ec41 0b10 	vmov	d0, r0, r1
 8019964:	b011      	add	sp, #68	; 0x44
 8019966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801996a:	2a00      	cmp	r2, #0
 801996c:	d13e      	bne.n	80199ec <__ieee754_pow+0x14c>
 801996e:	f1c3 0314 	rsb	r3, r3, #20
 8019972:	fa48 f103 	asr.w	r1, r8, r3
 8019976:	fa01 f303 	lsl.w	r3, r1, r3
 801997a:	4543      	cmp	r3, r8
 801997c:	f040 8469 	bne.w	801a252 <__ieee754_pow+0x9b2>
 8019980:	f001 0101 	and.w	r1, r1, #1
 8019984:	f1c1 0b02 	rsb	fp, r1, #2
 8019988:	4b4b      	ldr	r3, [pc, #300]	; (8019ab8 <__ieee754_pow+0x218>)
 801998a:	4598      	cmp	r8, r3
 801998c:	d118      	bne.n	80199c0 <__ieee754_pow+0x120>
 801998e:	f1b9 0f00 	cmp.w	r9, #0
 8019992:	f280 845a 	bge.w	801a24a <__ieee754_pow+0x9aa>
 8019996:	4948      	ldr	r1, [pc, #288]	; (8019ab8 <__ieee754_pow+0x218>)
 8019998:	4632      	mov	r2, r6
 801999a:	463b      	mov	r3, r7
 801999c:	2000      	movs	r0, #0
 801999e:	f7e6 ff65 	bl	800086c <__aeabi_ddiv>
 80199a2:	e7dd      	b.n	8019960 <__ieee754_pow+0xc0>
 80199a4:	f04f 0b02 	mov.w	fp, #2
 80199a8:	e7c4      	b.n	8019934 <__ieee754_pow+0x94>
 80199aa:	f04f 0b00 	mov.w	fp, #0
 80199ae:	e7c1      	b.n	8019934 <__ieee754_pow+0x94>
 80199b0:	f1b9 0f00 	cmp.w	r9, #0
 80199b4:	dad2      	bge.n	801995c <__ieee754_pow+0xbc>
 80199b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80199ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199be:	e7cf      	b.n	8019960 <__ieee754_pow+0xc0>
 80199c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80199c4:	d106      	bne.n	80199d4 <__ieee754_pow+0x134>
 80199c6:	4632      	mov	r2, r6
 80199c8:	463b      	mov	r3, r7
 80199ca:	4610      	mov	r0, r2
 80199cc:	4619      	mov	r1, r3
 80199ce:	f7e6 fe23 	bl	8000618 <__aeabi_dmul>
 80199d2:	e7c5      	b.n	8019960 <__ieee754_pow+0xc0>
 80199d4:	4b39      	ldr	r3, [pc, #228]	; (8019abc <__ieee754_pow+0x21c>)
 80199d6:	4599      	cmp	r9, r3
 80199d8:	d10a      	bne.n	80199f0 <__ieee754_pow+0x150>
 80199da:	2d00      	cmp	r5, #0
 80199dc:	db08      	blt.n	80199f0 <__ieee754_pow+0x150>
 80199de:	ec47 6b10 	vmov	d0, r6, r7
 80199e2:	b011      	add	sp, #68	; 0x44
 80199e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e8:	f000 be5c 	b.w	801a6a4 <__ieee754_sqrt>
 80199ec:	f04f 0b00 	mov.w	fp, #0
 80199f0:	ec47 6b10 	vmov	d0, r6, r7
 80199f4:	f001 fd70 	bl	801b4d8 <fabs>
 80199f8:	ec51 0b10 	vmov	r0, r1, d0
 80199fc:	f1ba 0f00 	cmp.w	sl, #0
 8019a00:	d127      	bne.n	8019a52 <__ieee754_pow+0x1b2>
 8019a02:	b124      	cbz	r4, 8019a0e <__ieee754_pow+0x16e>
 8019a04:	4b2c      	ldr	r3, [pc, #176]	; (8019ab8 <__ieee754_pow+0x218>)
 8019a06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8019a0a:	429a      	cmp	r2, r3
 8019a0c:	d121      	bne.n	8019a52 <__ieee754_pow+0x1b2>
 8019a0e:	f1b9 0f00 	cmp.w	r9, #0
 8019a12:	da05      	bge.n	8019a20 <__ieee754_pow+0x180>
 8019a14:	4602      	mov	r2, r0
 8019a16:	460b      	mov	r3, r1
 8019a18:	2000      	movs	r0, #0
 8019a1a:	4927      	ldr	r1, [pc, #156]	; (8019ab8 <__ieee754_pow+0x218>)
 8019a1c:	f7e6 ff26 	bl	800086c <__aeabi_ddiv>
 8019a20:	2d00      	cmp	r5, #0
 8019a22:	da9d      	bge.n	8019960 <__ieee754_pow+0xc0>
 8019a24:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019a28:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019a2c:	ea54 030b 	orrs.w	r3, r4, fp
 8019a30:	d108      	bne.n	8019a44 <__ieee754_pow+0x1a4>
 8019a32:	4602      	mov	r2, r0
 8019a34:	460b      	mov	r3, r1
 8019a36:	4610      	mov	r0, r2
 8019a38:	4619      	mov	r1, r3
 8019a3a:	f7e6 fc35 	bl	80002a8 <__aeabi_dsub>
 8019a3e:	4602      	mov	r2, r0
 8019a40:	460b      	mov	r3, r1
 8019a42:	e7ac      	b.n	801999e <__ieee754_pow+0xfe>
 8019a44:	f1bb 0f01 	cmp.w	fp, #1
 8019a48:	d18a      	bne.n	8019960 <__ieee754_pow+0xc0>
 8019a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a4e:	4619      	mov	r1, r3
 8019a50:	e786      	b.n	8019960 <__ieee754_pow+0xc0>
 8019a52:	0fed      	lsrs	r5, r5, #31
 8019a54:	1e6b      	subs	r3, r5, #1
 8019a56:	930d      	str	r3, [sp, #52]	; 0x34
 8019a58:	ea5b 0303 	orrs.w	r3, fp, r3
 8019a5c:	d102      	bne.n	8019a64 <__ieee754_pow+0x1c4>
 8019a5e:	4632      	mov	r2, r6
 8019a60:	463b      	mov	r3, r7
 8019a62:	e7e8      	b.n	8019a36 <__ieee754_pow+0x196>
 8019a64:	4b16      	ldr	r3, [pc, #88]	; (8019ac0 <__ieee754_pow+0x220>)
 8019a66:	4598      	cmp	r8, r3
 8019a68:	f340 80fe 	ble.w	8019c68 <__ieee754_pow+0x3c8>
 8019a6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8019a70:	4598      	cmp	r8, r3
 8019a72:	dd0a      	ble.n	8019a8a <__ieee754_pow+0x1ea>
 8019a74:	4b0f      	ldr	r3, [pc, #60]	; (8019ab4 <__ieee754_pow+0x214>)
 8019a76:	429c      	cmp	r4, r3
 8019a78:	dc0d      	bgt.n	8019a96 <__ieee754_pow+0x1f6>
 8019a7a:	f1b9 0f00 	cmp.w	r9, #0
 8019a7e:	f6bf af6d 	bge.w	801995c <__ieee754_pow+0xbc>
 8019a82:	a307      	add	r3, pc, #28	; (adr r3, 8019aa0 <__ieee754_pow+0x200>)
 8019a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a88:	e79f      	b.n	80199ca <__ieee754_pow+0x12a>
 8019a8a:	4b0e      	ldr	r3, [pc, #56]	; (8019ac4 <__ieee754_pow+0x224>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	ddf4      	ble.n	8019a7a <__ieee754_pow+0x1da>
 8019a90:	4b09      	ldr	r3, [pc, #36]	; (8019ab8 <__ieee754_pow+0x218>)
 8019a92:	429c      	cmp	r4, r3
 8019a94:	dd18      	ble.n	8019ac8 <__ieee754_pow+0x228>
 8019a96:	f1b9 0f00 	cmp.w	r9, #0
 8019a9a:	dcf2      	bgt.n	8019a82 <__ieee754_pow+0x1e2>
 8019a9c:	e75e      	b.n	801995c <__ieee754_pow+0xbc>
 8019a9e:	bf00      	nop
 8019aa0:	8800759c 	.word	0x8800759c
 8019aa4:	7e37e43c 	.word	0x7e37e43c
 8019aa8:	7ff00000 	.word	0x7ff00000
 8019aac:	0801bfa1 	.word	0x0801bfa1
 8019ab0:	433fffff 	.word	0x433fffff
 8019ab4:	3fefffff 	.word	0x3fefffff
 8019ab8:	3ff00000 	.word	0x3ff00000
 8019abc:	3fe00000 	.word	0x3fe00000
 8019ac0:	41e00000 	.word	0x41e00000
 8019ac4:	3feffffe 	.word	0x3feffffe
 8019ac8:	2200      	movs	r2, #0
 8019aca:	4b63      	ldr	r3, [pc, #396]	; (8019c58 <__ieee754_pow+0x3b8>)
 8019acc:	f7e6 fbec 	bl	80002a8 <__aeabi_dsub>
 8019ad0:	a355      	add	r3, pc, #340	; (adr r3, 8019c28 <__ieee754_pow+0x388>)
 8019ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	460d      	mov	r5, r1
 8019ada:	f7e6 fd9d 	bl	8000618 <__aeabi_dmul>
 8019ade:	a354      	add	r3, pc, #336	; (adr r3, 8019c30 <__ieee754_pow+0x390>)
 8019ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ae4:	4606      	mov	r6, r0
 8019ae6:	460f      	mov	r7, r1
 8019ae8:	4620      	mov	r0, r4
 8019aea:	4629      	mov	r1, r5
 8019aec:	f7e6 fd94 	bl	8000618 <__aeabi_dmul>
 8019af0:	2200      	movs	r2, #0
 8019af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019af6:	4b59      	ldr	r3, [pc, #356]	; (8019c5c <__ieee754_pow+0x3bc>)
 8019af8:	4620      	mov	r0, r4
 8019afa:	4629      	mov	r1, r5
 8019afc:	f7e6 fd8c 	bl	8000618 <__aeabi_dmul>
 8019b00:	4602      	mov	r2, r0
 8019b02:	460b      	mov	r3, r1
 8019b04:	a14c      	add	r1, pc, #304	; (adr r1, 8019c38 <__ieee754_pow+0x398>)
 8019b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b0a:	f7e6 fbcd 	bl	80002a8 <__aeabi_dsub>
 8019b0e:	4622      	mov	r2, r4
 8019b10:	462b      	mov	r3, r5
 8019b12:	f7e6 fd81 	bl	8000618 <__aeabi_dmul>
 8019b16:	4602      	mov	r2, r0
 8019b18:	460b      	mov	r3, r1
 8019b1a:	2000      	movs	r0, #0
 8019b1c:	4950      	ldr	r1, [pc, #320]	; (8019c60 <__ieee754_pow+0x3c0>)
 8019b1e:	f7e6 fbc3 	bl	80002a8 <__aeabi_dsub>
 8019b22:	4622      	mov	r2, r4
 8019b24:	462b      	mov	r3, r5
 8019b26:	4680      	mov	r8, r0
 8019b28:	4689      	mov	r9, r1
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	4629      	mov	r1, r5
 8019b2e:	f7e6 fd73 	bl	8000618 <__aeabi_dmul>
 8019b32:	4602      	mov	r2, r0
 8019b34:	460b      	mov	r3, r1
 8019b36:	4640      	mov	r0, r8
 8019b38:	4649      	mov	r1, r9
 8019b3a:	f7e6 fd6d 	bl	8000618 <__aeabi_dmul>
 8019b3e:	a340      	add	r3, pc, #256	; (adr r3, 8019c40 <__ieee754_pow+0x3a0>)
 8019b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b44:	f7e6 fd68 	bl	8000618 <__aeabi_dmul>
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b50:	f7e6 fbaa 	bl	80002a8 <__aeabi_dsub>
 8019b54:	4602      	mov	r2, r0
 8019b56:	460b      	mov	r3, r1
 8019b58:	4604      	mov	r4, r0
 8019b5a:	460d      	mov	r5, r1
 8019b5c:	4630      	mov	r0, r6
 8019b5e:	4639      	mov	r1, r7
 8019b60:	f7e6 fba4 	bl	80002ac <__adddf3>
 8019b64:	2000      	movs	r0, #0
 8019b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019b6a:	4632      	mov	r2, r6
 8019b6c:	463b      	mov	r3, r7
 8019b6e:	f7e6 fb9b 	bl	80002a8 <__aeabi_dsub>
 8019b72:	4602      	mov	r2, r0
 8019b74:	460b      	mov	r3, r1
 8019b76:	4620      	mov	r0, r4
 8019b78:	4629      	mov	r1, r5
 8019b7a:	f7e6 fb95 	bl	80002a8 <__aeabi_dsub>
 8019b7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b80:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019b84:	4313      	orrs	r3, r2
 8019b86:	4606      	mov	r6, r0
 8019b88:	460f      	mov	r7, r1
 8019b8a:	f040 81eb 	bne.w	8019f64 <__ieee754_pow+0x6c4>
 8019b8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019c48 <__ieee754_pow+0x3a8>
 8019b92:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019b96:	2400      	movs	r4, #0
 8019b98:	4622      	mov	r2, r4
 8019b9a:	462b      	mov	r3, r5
 8019b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ba0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019ba4:	f7e6 fb80 	bl	80002a8 <__aeabi_dsub>
 8019ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019bac:	f7e6 fd34 	bl	8000618 <__aeabi_dmul>
 8019bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019bb4:	4680      	mov	r8, r0
 8019bb6:	4689      	mov	r9, r1
 8019bb8:	4630      	mov	r0, r6
 8019bba:	4639      	mov	r1, r7
 8019bbc:	f7e6 fd2c 	bl	8000618 <__aeabi_dmul>
 8019bc0:	4602      	mov	r2, r0
 8019bc2:	460b      	mov	r3, r1
 8019bc4:	4640      	mov	r0, r8
 8019bc6:	4649      	mov	r1, r9
 8019bc8:	f7e6 fb70 	bl	80002ac <__adddf3>
 8019bcc:	4622      	mov	r2, r4
 8019bce:	462b      	mov	r3, r5
 8019bd0:	4680      	mov	r8, r0
 8019bd2:	4689      	mov	r9, r1
 8019bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019bd8:	f7e6 fd1e 	bl	8000618 <__aeabi_dmul>
 8019bdc:	460b      	mov	r3, r1
 8019bde:	4604      	mov	r4, r0
 8019be0:	460d      	mov	r5, r1
 8019be2:	4602      	mov	r2, r0
 8019be4:	4649      	mov	r1, r9
 8019be6:	4640      	mov	r0, r8
 8019be8:	e9cd 4500 	strd	r4, r5, [sp]
 8019bec:	f7e6 fb5e 	bl	80002ac <__adddf3>
 8019bf0:	4b1c      	ldr	r3, [pc, #112]	; (8019c64 <__ieee754_pow+0x3c4>)
 8019bf2:	4299      	cmp	r1, r3
 8019bf4:	4606      	mov	r6, r0
 8019bf6:	460f      	mov	r7, r1
 8019bf8:	468b      	mov	fp, r1
 8019bfa:	f340 82f7 	ble.w	801a1ec <__ieee754_pow+0x94c>
 8019bfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019c02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019c06:	4303      	orrs	r3, r0
 8019c08:	f000 81ea 	beq.w	8019fe0 <__ieee754_pow+0x740>
 8019c0c:	a310      	add	r3, pc, #64	; (adr r3, 8019c50 <__ieee754_pow+0x3b0>)
 8019c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c16:	f7e6 fcff 	bl	8000618 <__aeabi_dmul>
 8019c1a:	a30d      	add	r3, pc, #52	; (adr r3, 8019c50 <__ieee754_pow+0x3b0>)
 8019c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c20:	e6d5      	b.n	80199ce <__ieee754_pow+0x12e>
 8019c22:	bf00      	nop
 8019c24:	f3af 8000 	nop.w
 8019c28:	60000000 	.word	0x60000000
 8019c2c:	3ff71547 	.word	0x3ff71547
 8019c30:	f85ddf44 	.word	0xf85ddf44
 8019c34:	3e54ae0b 	.word	0x3e54ae0b
 8019c38:	55555555 	.word	0x55555555
 8019c3c:	3fd55555 	.word	0x3fd55555
 8019c40:	652b82fe 	.word	0x652b82fe
 8019c44:	3ff71547 	.word	0x3ff71547
 8019c48:	00000000 	.word	0x00000000
 8019c4c:	bff00000 	.word	0xbff00000
 8019c50:	8800759c 	.word	0x8800759c
 8019c54:	7e37e43c 	.word	0x7e37e43c
 8019c58:	3ff00000 	.word	0x3ff00000
 8019c5c:	3fd00000 	.word	0x3fd00000
 8019c60:	3fe00000 	.word	0x3fe00000
 8019c64:	408fffff 	.word	0x408fffff
 8019c68:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019c6c:	f04f 0200 	mov.w	r2, #0
 8019c70:	da05      	bge.n	8019c7e <__ieee754_pow+0x3de>
 8019c72:	4bd3      	ldr	r3, [pc, #844]	; (8019fc0 <__ieee754_pow+0x720>)
 8019c74:	f7e6 fcd0 	bl	8000618 <__aeabi_dmul>
 8019c78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8019c7c:	460c      	mov	r4, r1
 8019c7e:	1523      	asrs	r3, r4, #20
 8019c80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019c84:	4413      	add	r3, r2
 8019c86:	9309      	str	r3, [sp, #36]	; 0x24
 8019c88:	4bce      	ldr	r3, [pc, #824]	; (8019fc4 <__ieee754_pow+0x724>)
 8019c8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8019c8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019c92:	429c      	cmp	r4, r3
 8019c94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019c98:	dd08      	ble.n	8019cac <__ieee754_pow+0x40c>
 8019c9a:	4bcb      	ldr	r3, [pc, #812]	; (8019fc8 <__ieee754_pow+0x728>)
 8019c9c:	429c      	cmp	r4, r3
 8019c9e:	f340 815e 	ble.w	8019f5e <__ieee754_pow+0x6be>
 8019ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ca4:	3301      	adds	r3, #1
 8019ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ca8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8019cac:	f04f 0a00 	mov.w	sl, #0
 8019cb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019cb4:	930c      	str	r3, [sp, #48]	; 0x30
 8019cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019cb8:	4bc4      	ldr	r3, [pc, #784]	; (8019fcc <__ieee754_pow+0x72c>)
 8019cba:	4413      	add	r3, r2
 8019cbc:	ed93 7b00 	vldr	d7, [r3]
 8019cc0:	4629      	mov	r1, r5
 8019cc2:	ec53 2b17 	vmov	r2, r3, d7
 8019cc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019cca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019cce:	f7e6 faeb 	bl	80002a8 <__aeabi_dsub>
 8019cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019cd6:	4606      	mov	r6, r0
 8019cd8:	460f      	mov	r7, r1
 8019cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019cde:	f7e6 fae5 	bl	80002ac <__adddf3>
 8019ce2:	4602      	mov	r2, r0
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	2000      	movs	r0, #0
 8019ce8:	49b9      	ldr	r1, [pc, #740]	; (8019fd0 <__ieee754_pow+0x730>)
 8019cea:	f7e6 fdbf 	bl	800086c <__aeabi_ddiv>
 8019cee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019cf2:	4602      	mov	r2, r0
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	4630      	mov	r0, r6
 8019cf8:	4639      	mov	r1, r7
 8019cfa:	f7e6 fc8d 	bl	8000618 <__aeabi_dmul>
 8019cfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019d02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8019d06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	9302      	str	r3, [sp, #8]
 8019d0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019d12:	106d      	asrs	r5, r5, #1
 8019d14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019d18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8019d22:	4640      	mov	r0, r8
 8019d24:	4649      	mov	r1, r9
 8019d26:	4614      	mov	r4, r2
 8019d28:	461d      	mov	r5, r3
 8019d2a:	f7e6 fc75 	bl	8000618 <__aeabi_dmul>
 8019d2e:	4602      	mov	r2, r0
 8019d30:	460b      	mov	r3, r1
 8019d32:	4630      	mov	r0, r6
 8019d34:	4639      	mov	r1, r7
 8019d36:	f7e6 fab7 	bl	80002a8 <__aeabi_dsub>
 8019d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d3e:	4606      	mov	r6, r0
 8019d40:	460f      	mov	r7, r1
 8019d42:	4620      	mov	r0, r4
 8019d44:	4629      	mov	r1, r5
 8019d46:	f7e6 faaf 	bl	80002a8 <__aeabi_dsub>
 8019d4a:	4602      	mov	r2, r0
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019d52:	f7e6 faa9 	bl	80002a8 <__aeabi_dsub>
 8019d56:	4642      	mov	r2, r8
 8019d58:	464b      	mov	r3, r9
 8019d5a:	f7e6 fc5d 	bl	8000618 <__aeabi_dmul>
 8019d5e:	4602      	mov	r2, r0
 8019d60:	460b      	mov	r3, r1
 8019d62:	4630      	mov	r0, r6
 8019d64:	4639      	mov	r1, r7
 8019d66:	f7e6 fa9f 	bl	80002a8 <__aeabi_dsub>
 8019d6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019d6e:	f7e6 fc53 	bl	8000618 <__aeabi_dmul>
 8019d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019d76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019d7a:	4610      	mov	r0, r2
 8019d7c:	4619      	mov	r1, r3
 8019d7e:	f7e6 fc4b 	bl	8000618 <__aeabi_dmul>
 8019d82:	a37b      	add	r3, pc, #492	; (adr r3, 8019f70 <__ieee754_pow+0x6d0>)
 8019d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d88:	4604      	mov	r4, r0
 8019d8a:	460d      	mov	r5, r1
 8019d8c:	f7e6 fc44 	bl	8000618 <__aeabi_dmul>
 8019d90:	a379      	add	r3, pc, #484	; (adr r3, 8019f78 <__ieee754_pow+0x6d8>)
 8019d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d96:	f7e6 fa89 	bl	80002ac <__adddf3>
 8019d9a:	4622      	mov	r2, r4
 8019d9c:	462b      	mov	r3, r5
 8019d9e:	f7e6 fc3b 	bl	8000618 <__aeabi_dmul>
 8019da2:	a377      	add	r3, pc, #476	; (adr r3, 8019f80 <__ieee754_pow+0x6e0>)
 8019da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da8:	f7e6 fa80 	bl	80002ac <__adddf3>
 8019dac:	4622      	mov	r2, r4
 8019dae:	462b      	mov	r3, r5
 8019db0:	f7e6 fc32 	bl	8000618 <__aeabi_dmul>
 8019db4:	a374      	add	r3, pc, #464	; (adr r3, 8019f88 <__ieee754_pow+0x6e8>)
 8019db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dba:	f7e6 fa77 	bl	80002ac <__adddf3>
 8019dbe:	4622      	mov	r2, r4
 8019dc0:	462b      	mov	r3, r5
 8019dc2:	f7e6 fc29 	bl	8000618 <__aeabi_dmul>
 8019dc6:	a372      	add	r3, pc, #456	; (adr r3, 8019f90 <__ieee754_pow+0x6f0>)
 8019dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dcc:	f7e6 fa6e 	bl	80002ac <__adddf3>
 8019dd0:	4622      	mov	r2, r4
 8019dd2:	462b      	mov	r3, r5
 8019dd4:	f7e6 fc20 	bl	8000618 <__aeabi_dmul>
 8019dd8:	a36f      	add	r3, pc, #444	; (adr r3, 8019f98 <__ieee754_pow+0x6f8>)
 8019dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dde:	f7e6 fa65 	bl	80002ac <__adddf3>
 8019de2:	4622      	mov	r2, r4
 8019de4:	4606      	mov	r6, r0
 8019de6:	460f      	mov	r7, r1
 8019de8:	462b      	mov	r3, r5
 8019dea:	4620      	mov	r0, r4
 8019dec:	4629      	mov	r1, r5
 8019dee:	f7e6 fc13 	bl	8000618 <__aeabi_dmul>
 8019df2:	4602      	mov	r2, r0
 8019df4:	460b      	mov	r3, r1
 8019df6:	4630      	mov	r0, r6
 8019df8:	4639      	mov	r1, r7
 8019dfa:	f7e6 fc0d 	bl	8000618 <__aeabi_dmul>
 8019dfe:	4642      	mov	r2, r8
 8019e00:	4604      	mov	r4, r0
 8019e02:	460d      	mov	r5, r1
 8019e04:	464b      	mov	r3, r9
 8019e06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019e0a:	f7e6 fa4f 	bl	80002ac <__adddf3>
 8019e0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019e12:	f7e6 fc01 	bl	8000618 <__aeabi_dmul>
 8019e16:	4622      	mov	r2, r4
 8019e18:	462b      	mov	r3, r5
 8019e1a:	f7e6 fa47 	bl	80002ac <__adddf3>
 8019e1e:	4642      	mov	r2, r8
 8019e20:	4606      	mov	r6, r0
 8019e22:	460f      	mov	r7, r1
 8019e24:	464b      	mov	r3, r9
 8019e26:	4640      	mov	r0, r8
 8019e28:	4649      	mov	r1, r9
 8019e2a:	f7e6 fbf5 	bl	8000618 <__aeabi_dmul>
 8019e2e:	2200      	movs	r2, #0
 8019e30:	4b68      	ldr	r3, [pc, #416]	; (8019fd4 <__ieee754_pow+0x734>)
 8019e32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019e36:	f7e6 fa39 	bl	80002ac <__adddf3>
 8019e3a:	4632      	mov	r2, r6
 8019e3c:	463b      	mov	r3, r7
 8019e3e:	f7e6 fa35 	bl	80002ac <__adddf3>
 8019e42:	9802      	ldr	r0, [sp, #8]
 8019e44:	460d      	mov	r5, r1
 8019e46:	4604      	mov	r4, r0
 8019e48:	4602      	mov	r2, r0
 8019e4a:	460b      	mov	r3, r1
 8019e4c:	4640      	mov	r0, r8
 8019e4e:	4649      	mov	r1, r9
 8019e50:	f7e6 fbe2 	bl	8000618 <__aeabi_dmul>
 8019e54:	2200      	movs	r2, #0
 8019e56:	4680      	mov	r8, r0
 8019e58:	4689      	mov	r9, r1
 8019e5a:	4b5e      	ldr	r3, [pc, #376]	; (8019fd4 <__ieee754_pow+0x734>)
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	4629      	mov	r1, r5
 8019e60:	f7e6 fa22 	bl	80002a8 <__aeabi_dsub>
 8019e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019e68:	f7e6 fa1e 	bl	80002a8 <__aeabi_dsub>
 8019e6c:	4602      	mov	r2, r0
 8019e6e:	460b      	mov	r3, r1
 8019e70:	4630      	mov	r0, r6
 8019e72:	4639      	mov	r1, r7
 8019e74:	f7e6 fa18 	bl	80002a8 <__aeabi_dsub>
 8019e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019e7c:	f7e6 fbcc 	bl	8000618 <__aeabi_dmul>
 8019e80:	4622      	mov	r2, r4
 8019e82:	4606      	mov	r6, r0
 8019e84:	460f      	mov	r7, r1
 8019e86:	462b      	mov	r3, r5
 8019e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019e8c:	f7e6 fbc4 	bl	8000618 <__aeabi_dmul>
 8019e90:	4602      	mov	r2, r0
 8019e92:	460b      	mov	r3, r1
 8019e94:	4630      	mov	r0, r6
 8019e96:	4639      	mov	r1, r7
 8019e98:	f7e6 fa08 	bl	80002ac <__adddf3>
 8019e9c:	4606      	mov	r6, r0
 8019e9e:	460f      	mov	r7, r1
 8019ea0:	4602      	mov	r2, r0
 8019ea2:	460b      	mov	r3, r1
 8019ea4:	4640      	mov	r0, r8
 8019ea6:	4649      	mov	r1, r9
 8019ea8:	f7e6 fa00 	bl	80002ac <__adddf3>
 8019eac:	9802      	ldr	r0, [sp, #8]
 8019eae:	a33c      	add	r3, pc, #240	; (adr r3, 8019fa0 <__ieee754_pow+0x700>)
 8019eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eb4:	4604      	mov	r4, r0
 8019eb6:	460d      	mov	r5, r1
 8019eb8:	f7e6 fbae 	bl	8000618 <__aeabi_dmul>
 8019ebc:	4642      	mov	r2, r8
 8019ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019ec2:	464b      	mov	r3, r9
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	4629      	mov	r1, r5
 8019ec8:	f7e6 f9ee 	bl	80002a8 <__aeabi_dsub>
 8019ecc:	4602      	mov	r2, r0
 8019ece:	460b      	mov	r3, r1
 8019ed0:	4630      	mov	r0, r6
 8019ed2:	4639      	mov	r1, r7
 8019ed4:	f7e6 f9e8 	bl	80002a8 <__aeabi_dsub>
 8019ed8:	a333      	add	r3, pc, #204	; (adr r3, 8019fa8 <__ieee754_pow+0x708>)
 8019eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ede:	f7e6 fb9b 	bl	8000618 <__aeabi_dmul>
 8019ee2:	a333      	add	r3, pc, #204	; (adr r3, 8019fb0 <__ieee754_pow+0x710>)
 8019ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee8:	4606      	mov	r6, r0
 8019eea:	460f      	mov	r7, r1
 8019eec:	4620      	mov	r0, r4
 8019eee:	4629      	mov	r1, r5
 8019ef0:	f7e6 fb92 	bl	8000618 <__aeabi_dmul>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	460b      	mov	r3, r1
 8019ef8:	4630      	mov	r0, r6
 8019efa:	4639      	mov	r1, r7
 8019efc:	f7e6 f9d6 	bl	80002ac <__adddf3>
 8019f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f02:	4b35      	ldr	r3, [pc, #212]	; (8019fd8 <__ieee754_pow+0x738>)
 8019f04:	4413      	add	r3, r2
 8019f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f0a:	f7e6 f9cf 	bl	80002ac <__adddf3>
 8019f0e:	4604      	mov	r4, r0
 8019f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f12:	460d      	mov	r5, r1
 8019f14:	f7e6 fb16 	bl	8000544 <__aeabi_i2d>
 8019f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019f1a:	4b30      	ldr	r3, [pc, #192]	; (8019fdc <__ieee754_pow+0x73c>)
 8019f1c:	4413      	add	r3, r2
 8019f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019f22:	4606      	mov	r6, r0
 8019f24:	460f      	mov	r7, r1
 8019f26:	4622      	mov	r2, r4
 8019f28:	462b      	mov	r3, r5
 8019f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019f2e:	f7e6 f9bd 	bl	80002ac <__adddf3>
 8019f32:	4642      	mov	r2, r8
 8019f34:	464b      	mov	r3, r9
 8019f36:	f7e6 f9b9 	bl	80002ac <__adddf3>
 8019f3a:	4632      	mov	r2, r6
 8019f3c:	463b      	mov	r3, r7
 8019f3e:	f7e6 f9b5 	bl	80002ac <__adddf3>
 8019f42:	9802      	ldr	r0, [sp, #8]
 8019f44:	4632      	mov	r2, r6
 8019f46:	463b      	mov	r3, r7
 8019f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019f4c:	f7e6 f9ac 	bl	80002a8 <__aeabi_dsub>
 8019f50:	4642      	mov	r2, r8
 8019f52:	464b      	mov	r3, r9
 8019f54:	f7e6 f9a8 	bl	80002a8 <__aeabi_dsub>
 8019f58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019f5c:	e607      	b.n	8019b6e <__ieee754_pow+0x2ce>
 8019f5e:	f04f 0a01 	mov.w	sl, #1
 8019f62:	e6a5      	b.n	8019cb0 <__ieee754_pow+0x410>
 8019f64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019fb8 <__ieee754_pow+0x718>
 8019f68:	e613      	b.n	8019b92 <__ieee754_pow+0x2f2>
 8019f6a:	bf00      	nop
 8019f6c:	f3af 8000 	nop.w
 8019f70:	4a454eef 	.word	0x4a454eef
 8019f74:	3fca7e28 	.word	0x3fca7e28
 8019f78:	93c9db65 	.word	0x93c9db65
 8019f7c:	3fcd864a 	.word	0x3fcd864a
 8019f80:	a91d4101 	.word	0xa91d4101
 8019f84:	3fd17460 	.word	0x3fd17460
 8019f88:	518f264d 	.word	0x518f264d
 8019f8c:	3fd55555 	.word	0x3fd55555
 8019f90:	db6fabff 	.word	0xdb6fabff
 8019f94:	3fdb6db6 	.word	0x3fdb6db6
 8019f98:	33333303 	.word	0x33333303
 8019f9c:	3fe33333 	.word	0x3fe33333
 8019fa0:	e0000000 	.word	0xe0000000
 8019fa4:	3feec709 	.word	0x3feec709
 8019fa8:	dc3a03fd 	.word	0xdc3a03fd
 8019fac:	3feec709 	.word	0x3feec709
 8019fb0:	145b01f5 	.word	0x145b01f5
 8019fb4:	be3e2fe0 	.word	0xbe3e2fe0
 8019fb8:	00000000 	.word	0x00000000
 8019fbc:	3ff00000 	.word	0x3ff00000
 8019fc0:	43400000 	.word	0x43400000
 8019fc4:	0003988e 	.word	0x0003988e
 8019fc8:	000bb679 	.word	0x000bb679
 8019fcc:	0801c0d8 	.word	0x0801c0d8
 8019fd0:	3ff00000 	.word	0x3ff00000
 8019fd4:	40080000 	.word	0x40080000
 8019fd8:	0801c0f8 	.word	0x0801c0f8
 8019fdc:	0801c0e8 	.word	0x0801c0e8
 8019fe0:	a3b4      	add	r3, pc, #720	; (adr r3, 801a2b4 <__ieee754_pow+0xa14>)
 8019fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe6:	4640      	mov	r0, r8
 8019fe8:	4649      	mov	r1, r9
 8019fea:	f7e6 f95f 	bl	80002ac <__adddf3>
 8019fee:	4622      	mov	r2, r4
 8019ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ff4:	462b      	mov	r3, r5
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	4639      	mov	r1, r7
 8019ffa:	f7e6 f955 	bl	80002a8 <__aeabi_dsub>
 8019ffe:	4602      	mov	r2, r0
 801a000:	460b      	mov	r3, r1
 801a002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a006:	f7e6 fd97 	bl	8000b38 <__aeabi_dcmpgt>
 801a00a:	2800      	cmp	r0, #0
 801a00c:	f47f adfe 	bne.w	8019c0c <__ieee754_pow+0x36c>
 801a010:	4aa3      	ldr	r2, [pc, #652]	; (801a2a0 <__ieee754_pow+0xa00>)
 801a012:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a016:	4293      	cmp	r3, r2
 801a018:	f340 810a 	ble.w	801a230 <__ieee754_pow+0x990>
 801a01c:	151b      	asrs	r3, r3, #20
 801a01e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a022:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a026:	fa4a f303 	asr.w	r3, sl, r3
 801a02a:	445b      	add	r3, fp
 801a02c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a030:	4e9c      	ldr	r6, [pc, #624]	; (801a2a4 <__ieee754_pow+0xa04>)
 801a032:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a036:	4116      	asrs	r6, r2
 801a038:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801a03c:	2000      	movs	r0, #0
 801a03e:	ea23 0106 	bic.w	r1, r3, r6
 801a042:	f1c2 0214 	rsb	r2, r2, #20
 801a046:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a04a:	fa4a fa02 	asr.w	sl, sl, r2
 801a04e:	f1bb 0f00 	cmp.w	fp, #0
 801a052:	4602      	mov	r2, r0
 801a054:	460b      	mov	r3, r1
 801a056:	4620      	mov	r0, r4
 801a058:	4629      	mov	r1, r5
 801a05a:	bfb8      	it	lt
 801a05c:	f1ca 0a00 	rsblt	sl, sl, #0
 801a060:	f7e6 f922 	bl	80002a8 <__aeabi_dsub>
 801a064:	e9cd 0100 	strd	r0, r1, [sp]
 801a068:	4642      	mov	r2, r8
 801a06a:	464b      	mov	r3, r9
 801a06c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a070:	f7e6 f91c 	bl	80002ac <__adddf3>
 801a074:	2000      	movs	r0, #0
 801a076:	a378      	add	r3, pc, #480	; (adr r3, 801a258 <__ieee754_pow+0x9b8>)
 801a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a07c:	4604      	mov	r4, r0
 801a07e:	460d      	mov	r5, r1
 801a080:	f7e6 faca 	bl	8000618 <__aeabi_dmul>
 801a084:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a088:	4606      	mov	r6, r0
 801a08a:	460f      	mov	r7, r1
 801a08c:	4620      	mov	r0, r4
 801a08e:	4629      	mov	r1, r5
 801a090:	f7e6 f90a 	bl	80002a8 <__aeabi_dsub>
 801a094:	4602      	mov	r2, r0
 801a096:	460b      	mov	r3, r1
 801a098:	4640      	mov	r0, r8
 801a09a:	4649      	mov	r1, r9
 801a09c:	f7e6 f904 	bl	80002a8 <__aeabi_dsub>
 801a0a0:	a36f      	add	r3, pc, #444	; (adr r3, 801a260 <__ieee754_pow+0x9c0>)
 801a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0a6:	f7e6 fab7 	bl	8000618 <__aeabi_dmul>
 801a0aa:	a36f      	add	r3, pc, #444	; (adr r3, 801a268 <__ieee754_pow+0x9c8>)
 801a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0b0:	4680      	mov	r8, r0
 801a0b2:	4689      	mov	r9, r1
 801a0b4:	4620      	mov	r0, r4
 801a0b6:	4629      	mov	r1, r5
 801a0b8:	f7e6 faae 	bl	8000618 <__aeabi_dmul>
 801a0bc:	4602      	mov	r2, r0
 801a0be:	460b      	mov	r3, r1
 801a0c0:	4640      	mov	r0, r8
 801a0c2:	4649      	mov	r1, r9
 801a0c4:	f7e6 f8f2 	bl	80002ac <__adddf3>
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	460d      	mov	r5, r1
 801a0cc:	4602      	mov	r2, r0
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	4630      	mov	r0, r6
 801a0d2:	4639      	mov	r1, r7
 801a0d4:	f7e6 f8ea 	bl	80002ac <__adddf3>
 801a0d8:	4632      	mov	r2, r6
 801a0da:	463b      	mov	r3, r7
 801a0dc:	4680      	mov	r8, r0
 801a0de:	4689      	mov	r9, r1
 801a0e0:	f7e6 f8e2 	bl	80002a8 <__aeabi_dsub>
 801a0e4:	4602      	mov	r2, r0
 801a0e6:	460b      	mov	r3, r1
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	4629      	mov	r1, r5
 801a0ec:	f7e6 f8dc 	bl	80002a8 <__aeabi_dsub>
 801a0f0:	4642      	mov	r2, r8
 801a0f2:	4606      	mov	r6, r0
 801a0f4:	460f      	mov	r7, r1
 801a0f6:	464b      	mov	r3, r9
 801a0f8:	4640      	mov	r0, r8
 801a0fa:	4649      	mov	r1, r9
 801a0fc:	f7e6 fa8c 	bl	8000618 <__aeabi_dmul>
 801a100:	a35b      	add	r3, pc, #364	; (adr r3, 801a270 <__ieee754_pow+0x9d0>)
 801a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a106:	4604      	mov	r4, r0
 801a108:	460d      	mov	r5, r1
 801a10a:	f7e6 fa85 	bl	8000618 <__aeabi_dmul>
 801a10e:	a35a      	add	r3, pc, #360	; (adr r3, 801a278 <__ieee754_pow+0x9d8>)
 801a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a114:	f7e6 f8c8 	bl	80002a8 <__aeabi_dsub>
 801a118:	4622      	mov	r2, r4
 801a11a:	462b      	mov	r3, r5
 801a11c:	f7e6 fa7c 	bl	8000618 <__aeabi_dmul>
 801a120:	a357      	add	r3, pc, #348	; (adr r3, 801a280 <__ieee754_pow+0x9e0>)
 801a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a126:	f7e6 f8c1 	bl	80002ac <__adddf3>
 801a12a:	4622      	mov	r2, r4
 801a12c:	462b      	mov	r3, r5
 801a12e:	f7e6 fa73 	bl	8000618 <__aeabi_dmul>
 801a132:	a355      	add	r3, pc, #340	; (adr r3, 801a288 <__ieee754_pow+0x9e8>)
 801a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a138:	f7e6 f8b6 	bl	80002a8 <__aeabi_dsub>
 801a13c:	4622      	mov	r2, r4
 801a13e:	462b      	mov	r3, r5
 801a140:	f7e6 fa6a 	bl	8000618 <__aeabi_dmul>
 801a144:	a352      	add	r3, pc, #328	; (adr r3, 801a290 <__ieee754_pow+0x9f0>)
 801a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a14a:	f7e6 f8af 	bl	80002ac <__adddf3>
 801a14e:	4622      	mov	r2, r4
 801a150:	462b      	mov	r3, r5
 801a152:	f7e6 fa61 	bl	8000618 <__aeabi_dmul>
 801a156:	4602      	mov	r2, r0
 801a158:	460b      	mov	r3, r1
 801a15a:	4640      	mov	r0, r8
 801a15c:	4649      	mov	r1, r9
 801a15e:	f7e6 f8a3 	bl	80002a8 <__aeabi_dsub>
 801a162:	4604      	mov	r4, r0
 801a164:	460d      	mov	r5, r1
 801a166:	4602      	mov	r2, r0
 801a168:	460b      	mov	r3, r1
 801a16a:	4640      	mov	r0, r8
 801a16c:	4649      	mov	r1, r9
 801a16e:	f7e6 fa53 	bl	8000618 <__aeabi_dmul>
 801a172:	2200      	movs	r2, #0
 801a174:	e9cd 0100 	strd	r0, r1, [sp]
 801a178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a17c:	4620      	mov	r0, r4
 801a17e:	4629      	mov	r1, r5
 801a180:	f7e6 f892 	bl	80002a8 <__aeabi_dsub>
 801a184:	4602      	mov	r2, r0
 801a186:	460b      	mov	r3, r1
 801a188:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a18c:	f7e6 fb6e 	bl	800086c <__aeabi_ddiv>
 801a190:	4632      	mov	r2, r6
 801a192:	4604      	mov	r4, r0
 801a194:	460d      	mov	r5, r1
 801a196:	463b      	mov	r3, r7
 801a198:	4640      	mov	r0, r8
 801a19a:	4649      	mov	r1, r9
 801a19c:	f7e6 fa3c 	bl	8000618 <__aeabi_dmul>
 801a1a0:	4632      	mov	r2, r6
 801a1a2:	463b      	mov	r3, r7
 801a1a4:	f7e6 f882 	bl	80002ac <__adddf3>
 801a1a8:	4602      	mov	r2, r0
 801a1aa:	460b      	mov	r3, r1
 801a1ac:	4620      	mov	r0, r4
 801a1ae:	4629      	mov	r1, r5
 801a1b0:	f7e6 f87a 	bl	80002a8 <__aeabi_dsub>
 801a1b4:	4642      	mov	r2, r8
 801a1b6:	464b      	mov	r3, r9
 801a1b8:	f7e6 f876 	bl	80002a8 <__aeabi_dsub>
 801a1bc:	4602      	mov	r2, r0
 801a1be:	460b      	mov	r3, r1
 801a1c0:	2000      	movs	r0, #0
 801a1c2:	4939      	ldr	r1, [pc, #228]	; (801a2a8 <__ieee754_pow+0xa08>)
 801a1c4:	f7e6 f870 	bl	80002a8 <__aeabi_dsub>
 801a1c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801a1cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	da2f      	bge.n	801a236 <__ieee754_pow+0x996>
 801a1d6:	4650      	mov	r0, sl
 801a1d8:	ec43 2b10 	vmov	d0, r2, r3
 801a1dc:	f001 faa4 	bl	801b728 <scalbn>
 801a1e0:	ec51 0b10 	vmov	r0, r1, d0
 801a1e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a1e8:	f7ff bbf1 	b.w	80199ce <__ieee754_pow+0x12e>
 801a1ec:	4b2f      	ldr	r3, [pc, #188]	; (801a2ac <__ieee754_pow+0xa0c>)
 801a1ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801a1f2:	429e      	cmp	r6, r3
 801a1f4:	f77f af0c 	ble.w	801a010 <__ieee754_pow+0x770>
 801a1f8:	4b2d      	ldr	r3, [pc, #180]	; (801a2b0 <__ieee754_pow+0xa10>)
 801a1fa:	440b      	add	r3, r1
 801a1fc:	4303      	orrs	r3, r0
 801a1fe:	d00b      	beq.n	801a218 <__ieee754_pow+0x978>
 801a200:	a325      	add	r3, pc, #148	; (adr r3, 801a298 <__ieee754_pow+0x9f8>)
 801a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a20a:	f7e6 fa05 	bl	8000618 <__aeabi_dmul>
 801a20e:	a322      	add	r3, pc, #136	; (adr r3, 801a298 <__ieee754_pow+0x9f8>)
 801a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a214:	f7ff bbdb 	b.w	80199ce <__ieee754_pow+0x12e>
 801a218:	4622      	mov	r2, r4
 801a21a:	462b      	mov	r3, r5
 801a21c:	f7e6 f844 	bl	80002a8 <__aeabi_dsub>
 801a220:	4642      	mov	r2, r8
 801a222:	464b      	mov	r3, r9
 801a224:	f7e6 fc7e 	bl	8000b24 <__aeabi_dcmpge>
 801a228:	2800      	cmp	r0, #0
 801a22a:	f43f aef1 	beq.w	801a010 <__ieee754_pow+0x770>
 801a22e:	e7e7      	b.n	801a200 <__ieee754_pow+0x960>
 801a230:	f04f 0a00 	mov.w	sl, #0
 801a234:	e718      	b.n	801a068 <__ieee754_pow+0x7c8>
 801a236:	4621      	mov	r1, r4
 801a238:	e7d4      	b.n	801a1e4 <__ieee754_pow+0x944>
 801a23a:	2000      	movs	r0, #0
 801a23c:	491a      	ldr	r1, [pc, #104]	; (801a2a8 <__ieee754_pow+0xa08>)
 801a23e:	f7ff bb8f 	b.w	8019960 <__ieee754_pow+0xc0>
 801a242:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a246:	f7ff bb8b 	b.w	8019960 <__ieee754_pow+0xc0>
 801a24a:	4630      	mov	r0, r6
 801a24c:	4639      	mov	r1, r7
 801a24e:	f7ff bb87 	b.w	8019960 <__ieee754_pow+0xc0>
 801a252:	4693      	mov	fp, r2
 801a254:	f7ff bb98 	b.w	8019988 <__ieee754_pow+0xe8>
 801a258:	00000000 	.word	0x00000000
 801a25c:	3fe62e43 	.word	0x3fe62e43
 801a260:	fefa39ef 	.word	0xfefa39ef
 801a264:	3fe62e42 	.word	0x3fe62e42
 801a268:	0ca86c39 	.word	0x0ca86c39
 801a26c:	be205c61 	.word	0xbe205c61
 801a270:	72bea4d0 	.word	0x72bea4d0
 801a274:	3e663769 	.word	0x3e663769
 801a278:	c5d26bf1 	.word	0xc5d26bf1
 801a27c:	3ebbbd41 	.word	0x3ebbbd41
 801a280:	af25de2c 	.word	0xaf25de2c
 801a284:	3f11566a 	.word	0x3f11566a
 801a288:	16bebd93 	.word	0x16bebd93
 801a28c:	3f66c16c 	.word	0x3f66c16c
 801a290:	5555553e 	.word	0x5555553e
 801a294:	3fc55555 	.word	0x3fc55555
 801a298:	c2f8f359 	.word	0xc2f8f359
 801a29c:	01a56e1f 	.word	0x01a56e1f
 801a2a0:	3fe00000 	.word	0x3fe00000
 801a2a4:	000fffff 	.word	0x000fffff
 801a2a8:	3ff00000 	.word	0x3ff00000
 801a2ac:	4090cbff 	.word	0x4090cbff
 801a2b0:	3f6f3400 	.word	0x3f6f3400
 801a2b4:	652b82fe 	.word	0x652b82fe
 801a2b8:	3c971547 	.word	0x3c971547
 801a2bc:	00000000 	.word	0x00000000

0801a2c0 <__ieee754_rem_pio2>:
 801a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2c4:	ec57 6b10 	vmov	r6, r7, d0
 801a2c8:	4bc3      	ldr	r3, [pc, #780]	; (801a5d8 <__ieee754_rem_pio2+0x318>)
 801a2ca:	b08d      	sub	sp, #52	; 0x34
 801a2cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a2d0:	4598      	cmp	r8, r3
 801a2d2:	4604      	mov	r4, r0
 801a2d4:	9704      	str	r7, [sp, #16]
 801a2d6:	dc07      	bgt.n	801a2e8 <__ieee754_rem_pio2+0x28>
 801a2d8:	2200      	movs	r2, #0
 801a2da:	2300      	movs	r3, #0
 801a2dc:	ed84 0b00 	vstr	d0, [r4]
 801a2e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a2e4:	2500      	movs	r5, #0
 801a2e6:	e027      	b.n	801a338 <__ieee754_rem_pio2+0x78>
 801a2e8:	4bbc      	ldr	r3, [pc, #752]	; (801a5dc <__ieee754_rem_pio2+0x31c>)
 801a2ea:	4598      	cmp	r8, r3
 801a2ec:	dc75      	bgt.n	801a3da <__ieee754_rem_pio2+0x11a>
 801a2ee:	9b04      	ldr	r3, [sp, #16]
 801a2f0:	4dbb      	ldr	r5, [pc, #748]	; (801a5e0 <__ieee754_rem_pio2+0x320>)
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	ee10 0a10 	vmov	r0, s0
 801a2f8:	a3a9      	add	r3, pc, #676	; (adr r3, 801a5a0 <__ieee754_rem_pio2+0x2e0>)
 801a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2fe:	4639      	mov	r1, r7
 801a300:	dd36      	ble.n	801a370 <__ieee754_rem_pio2+0xb0>
 801a302:	f7e5 ffd1 	bl	80002a8 <__aeabi_dsub>
 801a306:	45a8      	cmp	r8, r5
 801a308:	4606      	mov	r6, r0
 801a30a:	460f      	mov	r7, r1
 801a30c:	d018      	beq.n	801a340 <__ieee754_rem_pio2+0x80>
 801a30e:	a3a6      	add	r3, pc, #664	; (adr r3, 801a5a8 <__ieee754_rem_pio2+0x2e8>)
 801a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a314:	f7e5 ffc8 	bl	80002a8 <__aeabi_dsub>
 801a318:	4602      	mov	r2, r0
 801a31a:	460b      	mov	r3, r1
 801a31c:	e9c4 2300 	strd	r2, r3, [r4]
 801a320:	4630      	mov	r0, r6
 801a322:	4639      	mov	r1, r7
 801a324:	f7e5 ffc0 	bl	80002a8 <__aeabi_dsub>
 801a328:	a39f      	add	r3, pc, #636	; (adr r3, 801a5a8 <__ieee754_rem_pio2+0x2e8>)
 801a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a32e:	f7e5 ffbb 	bl	80002a8 <__aeabi_dsub>
 801a332:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a336:	2501      	movs	r5, #1
 801a338:	4628      	mov	r0, r5
 801a33a:	b00d      	add	sp, #52	; 0x34
 801a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a340:	a39b      	add	r3, pc, #620	; (adr r3, 801a5b0 <__ieee754_rem_pio2+0x2f0>)
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	f7e5 ffaf 	bl	80002a8 <__aeabi_dsub>
 801a34a:	a39b      	add	r3, pc, #620	; (adr r3, 801a5b8 <__ieee754_rem_pio2+0x2f8>)
 801a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a350:	4606      	mov	r6, r0
 801a352:	460f      	mov	r7, r1
 801a354:	f7e5 ffa8 	bl	80002a8 <__aeabi_dsub>
 801a358:	4602      	mov	r2, r0
 801a35a:	460b      	mov	r3, r1
 801a35c:	e9c4 2300 	strd	r2, r3, [r4]
 801a360:	4630      	mov	r0, r6
 801a362:	4639      	mov	r1, r7
 801a364:	f7e5 ffa0 	bl	80002a8 <__aeabi_dsub>
 801a368:	a393      	add	r3, pc, #588	; (adr r3, 801a5b8 <__ieee754_rem_pio2+0x2f8>)
 801a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36e:	e7de      	b.n	801a32e <__ieee754_rem_pio2+0x6e>
 801a370:	f7e5 ff9c 	bl	80002ac <__adddf3>
 801a374:	45a8      	cmp	r8, r5
 801a376:	4606      	mov	r6, r0
 801a378:	460f      	mov	r7, r1
 801a37a:	d016      	beq.n	801a3aa <__ieee754_rem_pio2+0xea>
 801a37c:	a38a      	add	r3, pc, #552	; (adr r3, 801a5a8 <__ieee754_rem_pio2+0x2e8>)
 801a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a382:	f7e5 ff93 	bl	80002ac <__adddf3>
 801a386:	4602      	mov	r2, r0
 801a388:	460b      	mov	r3, r1
 801a38a:	e9c4 2300 	strd	r2, r3, [r4]
 801a38e:	4630      	mov	r0, r6
 801a390:	4639      	mov	r1, r7
 801a392:	f7e5 ff89 	bl	80002a8 <__aeabi_dsub>
 801a396:	a384      	add	r3, pc, #528	; (adr r3, 801a5a8 <__ieee754_rem_pio2+0x2e8>)
 801a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39c:	f7e5 ff86 	bl	80002ac <__adddf3>
 801a3a0:	f04f 35ff 	mov.w	r5, #4294967295
 801a3a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a3a8:	e7c6      	b.n	801a338 <__ieee754_rem_pio2+0x78>
 801a3aa:	a381      	add	r3, pc, #516	; (adr r3, 801a5b0 <__ieee754_rem_pio2+0x2f0>)
 801a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b0:	f7e5 ff7c 	bl	80002ac <__adddf3>
 801a3b4:	a380      	add	r3, pc, #512	; (adr r3, 801a5b8 <__ieee754_rem_pio2+0x2f8>)
 801a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3ba:	4606      	mov	r6, r0
 801a3bc:	460f      	mov	r7, r1
 801a3be:	f7e5 ff75 	bl	80002ac <__adddf3>
 801a3c2:	4602      	mov	r2, r0
 801a3c4:	460b      	mov	r3, r1
 801a3c6:	e9c4 2300 	strd	r2, r3, [r4]
 801a3ca:	4630      	mov	r0, r6
 801a3cc:	4639      	mov	r1, r7
 801a3ce:	f7e5 ff6b 	bl	80002a8 <__aeabi_dsub>
 801a3d2:	a379      	add	r3, pc, #484	; (adr r3, 801a5b8 <__ieee754_rem_pio2+0x2f8>)
 801a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d8:	e7e0      	b.n	801a39c <__ieee754_rem_pio2+0xdc>
 801a3da:	4b82      	ldr	r3, [pc, #520]	; (801a5e4 <__ieee754_rem_pio2+0x324>)
 801a3dc:	4598      	cmp	r8, r3
 801a3de:	f300 80d0 	bgt.w	801a582 <__ieee754_rem_pio2+0x2c2>
 801a3e2:	f001 f879 	bl	801b4d8 <fabs>
 801a3e6:	ec57 6b10 	vmov	r6, r7, d0
 801a3ea:	ee10 0a10 	vmov	r0, s0
 801a3ee:	a374      	add	r3, pc, #464	; (adr r3, 801a5c0 <__ieee754_rem_pio2+0x300>)
 801a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f4:	4639      	mov	r1, r7
 801a3f6:	f7e6 f90f 	bl	8000618 <__aeabi_dmul>
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	4b7a      	ldr	r3, [pc, #488]	; (801a5e8 <__ieee754_rem_pio2+0x328>)
 801a3fe:	f7e5 ff55 	bl	80002ac <__adddf3>
 801a402:	f7e6 fbb9 	bl	8000b78 <__aeabi_d2iz>
 801a406:	4605      	mov	r5, r0
 801a408:	f7e6 f89c 	bl	8000544 <__aeabi_i2d>
 801a40c:	a364      	add	r3, pc, #400	; (adr r3, 801a5a0 <__ieee754_rem_pio2+0x2e0>)
 801a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a416:	f7e6 f8ff 	bl	8000618 <__aeabi_dmul>
 801a41a:	4602      	mov	r2, r0
 801a41c:	460b      	mov	r3, r1
 801a41e:	4630      	mov	r0, r6
 801a420:	4639      	mov	r1, r7
 801a422:	f7e5 ff41 	bl	80002a8 <__aeabi_dsub>
 801a426:	a360      	add	r3, pc, #384	; (adr r3, 801a5a8 <__ieee754_rem_pio2+0x2e8>)
 801a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42c:	4682      	mov	sl, r0
 801a42e:	468b      	mov	fp, r1
 801a430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a434:	f7e6 f8f0 	bl	8000618 <__aeabi_dmul>
 801a438:	2d1f      	cmp	r5, #31
 801a43a:	4606      	mov	r6, r0
 801a43c:	460f      	mov	r7, r1
 801a43e:	dc0c      	bgt.n	801a45a <__ieee754_rem_pio2+0x19a>
 801a440:	1e6a      	subs	r2, r5, #1
 801a442:	4b6a      	ldr	r3, [pc, #424]	; (801a5ec <__ieee754_rem_pio2+0x32c>)
 801a444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a448:	4543      	cmp	r3, r8
 801a44a:	d006      	beq.n	801a45a <__ieee754_rem_pio2+0x19a>
 801a44c:	4632      	mov	r2, r6
 801a44e:	463b      	mov	r3, r7
 801a450:	4650      	mov	r0, sl
 801a452:	4659      	mov	r1, fp
 801a454:	f7e5 ff28 	bl	80002a8 <__aeabi_dsub>
 801a458:	e00e      	b.n	801a478 <__ieee754_rem_pio2+0x1b8>
 801a45a:	4632      	mov	r2, r6
 801a45c:	463b      	mov	r3, r7
 801a45e:	4650      	mov	r0, sl
 801a460:	4659      	mov	r1, fp
 801a462:	f7e5 ff21 	bl	80002a8 <__aeabi_dsub>
 801a466:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a46a:	9305      	str	r3, [sp, #20]
 801a46c:	9a05      	ldr	r2, [sp, #20]
 801a46e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a472:	1ad3      	subs	r3, r2, r3
 801a474:	2b10      	cmp	r3, #16
 801a476:	dc02      	bgt.n	801a47e <__ieee754_rem_pio2+0x1be>
 801a478:	e9c4 0100 	strd	r0, r1, [r4]
 801a47c:	e039      	b.n	801a4f2 <__ieee754_rem_pio2+0x232>
 801a47e:	a34c      	add	r3, pc, #304	; (adr r3, 801a5b0 <__ieee754_rem_pio2+0x2f0>)
 801a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a488:	f7e6 f8c6 	bl	8000618 <__aeabi_dmul>
 801a48c:	4606      	mov	r6, r0
 801a48e:	460f      	mov	r7, r1
 801a490:	4602      	mov	r2, r0
 801a492:	460b      	mov	r3, r1
 801a494:	4650      	mov	r0, sl
 801a496:	4659      	mov	r1, fp
 801a498:	f7e5 ff06 	bl	80002a8 <__aeabi_dsub>
 801a49c:	4602      	mov	r2, r0
 801a49e:	460b      	mov	r3, r1
 801a4a0:	4680      	mov	r8, r0
 801a4a2:	4689      	mov	r9, r1
 801a4a4:	4650      	mov	r0, sl
 801a4a6:	4659      	mov	r1, fp
 801a4a8:	f7e5 fefe 	bl	80002a8 <__aeabi_dsub>
 801a4ac:	4632      	mov	r2, r6
 801a4ae:	463b      	mov	r3, r7
 801a4b0:	f7e5 fefa 	bl	80002a8 <__aeabi_dsub>
 801a4b4:	a340      	add	r3, pc, #256	; (adr r3, 801a5b8 <__ieee754_rem_pio2+0x2f8>)
 801a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ba:	4606      	mov	r6, r0
 801a4bc:	460f      	mov	r7, r1
 801a4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a4c2:	f7e6 f8a9 	bl	8000618 <__aeabi_dmul>
 801a4c6:	4632      	mov	r2, r6
 801a4c8:	463b      	mov	r3, r7
 801a4ca:	f7e5 feed 	bl	80002a8 <__aeabi_dsub>
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	460b      	mov	r3, r1
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	460f      	mov	r7, r1
 801a4d6:	4640      	mov	r0, r8
 801a4d8:	4649      	mov	r1, r9
 801a4da:	f7e5 fee5 	bl	80002a8 <__aeabi_dsub>
 801a4de:	9a05      	ldr	r2, [sp, #20]
 801a4e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a4e4:	1ad3      	subs	r3, r2, r3
 801a4e6:	2b31      	cmp	r3, #49	; 0x31
 801a4e8:	dc20      	bgt.n	801a52c <__ieee754_rem_pio2+0x26c>
 801a4ea:	e9c4 0100 	strd	r0, r1, [r4]
 801a4ee:	46c2      	mov	sl, r8
 801a4f0:	46cb      	mov	fp, r9
 801a4f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a4f6:	4650      	mov	r0, sl
 801a4f8:	4642      	mov	r2, r8
 801a4fa:	464b      	mov	r3, r9
 801a4fc:	4659      	mov	r1, fp
 801a4fe:	f7e5 fed3 	bl	80002a8 <__aeabi_dsub>
 801a502:	463b      	mov	r3, r7
 801a504:	4632      	mov	r2, r6
 801a506:	f7e5 fecf 	bl	80002a8 <__aeabi_dsub>
 801a50a:	9b04      	ldr	r3, [sp, #16]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a512:	f6bf af11 	bge.w	801a338 <__ieee754_rem_pio2+0x78>
 801a516:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a51a:	6063      	str	r3, [r4, #4]
 801a51c:	f8c4 8000 	str.w	r8, [r4]
 801a520:	60a0      	str	r0, [r4, #8]
 801a522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a526:	60e3      	str	r3, [r4, #12]
 801a528:	426d      	negs	r5, r5
 801a52a:	e705      	b.n	801a338 <__ieee754_rem_pio2+0x78>
 801a52c:	a326      	add	r3, pc, #152	; (adr r3, 801a5c8 <__ieee754_rem_pio2+0x308>)
 801a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a536:	f7e6 f86f 	bl	8000618 <__aeabi_dmul>
 801a53a:	4606      	mov	r6, r0
 801a53c:	460f      	mov	r7, r1
 801a53e:	4602      	mov	r2, r0
 801a540:	460b      	mov	r3, r1
 801a542:	4640      	mov	r0, r8
 801a544:	4649      	mov	r1, r9
 801a546:	f7e5 feaf 	bl	80002a8 <__aeabi_dsub>
 801a54a:	4602      	mov	r2, r0
 801a54c:	460b      	mov	r3, r1
 801a54e:	4682      	mov	sl, r0
 801a550:	468b      	mov	fp, r1
 801a552:	4640      	mov	r0, r8
 801a554:	4649      	mov	r1, r9
 801a556:	f7e5 fea7 	bl	80002a8 <__aeabi_dsub>
 801a55a:	4632      	mov	r2, r6
 801a55c:	463b      	mov	r3, r7
 801a55e:	f7e5 fea3 	bl	80002a8 <__aeabi_dsub>
 801a562:	a31b      	add	r3, pc, #108	; (adr r3, 801a5d0 <__ieee754_rem_pio2+0x310>)
 801a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a568:	4606      	mov	r6, r0
 801a56a:	460f      	mov	r7, r1
 801a56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a570:	f7e6 f852 	bl	8000618 <__aeabi_dmul>
 801a574:	4632      	mov	r2, r6
 801a576:	463b      	mov	r3, r7
 801a578:	f7e5 fe96 	bl	80002a8 <__aeabi_dsub>
 801a57c:	4606      	mov	r6, r0
 801a57e:	460f      	mov	r7, r1
 801a580:	e764      	b.n	801a44c <__ieee754_rem_pio2+0x18c>
 801a582:	4b1b      	ldr	r3, [pc, #108]	; (801a5f0 <__ieee754_rem_pio2+0x330>)
 801a584:	4598      	cmp	r8, r3
 801a586:	dd35      	ble.n	801a5f4 <__ieee754_rem_pio2+0x334>
 801a588:	ee10 2a10 	vmov	r2, s0
 801a58c:	463b      	mov	r3, r7
 801a58e:	4630      	mov	r0, r6
 801a590:	4639      	mov	r1, r7
 801a592:	f7e5 fe89 	bl	80002a8 <__aeabi_dsub>
 801a596:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a59a:	e9c4 0100 	strd	r0, r1, [r4]
 801a59e:	e6a1      	b.n	801a2e4 <__ieee754_rem_pio2+0x24>
 801a5a0:	54400000 	.word	0x54400000
 801a5a4:	3ff921fb 	.word	0x3ff921fb
 801a5a8:	1a626331 	.word	0x1a626331
 801a5ac:	3dd0b461 	.word	0x3dd0b461
 801a5b0:	1a600000 	.word	0x1a600000
 801a5b4:	3dd0b461 	.word	0x3dd0b461
 801a5b8:	2e037073 	.word	0x2e037073
 801a5bc:	3ba3198a 	.word	0x3ba3198a
 801a5c0:	6dc9c883 	.word	0x6dc9c883
 801a5c4:	3fe45f30 	.word	0x3fe45f30
 801a5c8:	2e000000 	.word	0x2e000000
 801a5cc:	3ba3198a 	.word	0x3ba3198a
 801a5d0:	252049c1 	.word	0x252049c1
 801a5d4:	397b839a 	.word	0x397b839a
 801a5d8:	3fe921fb 	.word	0x3fe921fb
 801a5dc:	4002d97b 	.word	0x4002d97b
 801a5e0:	3ff921fb 	.word	0x3ff921fb
 801a5e4:	413921fb 	.word	0x413921fb
 801a5e8:	3fe00000 	.word	0x3fe00000
 801a5ec:	0801c108 	.word	0x0801c108
 801a5f0:	7fefffff 	.word	0x7fefffff
 801a5f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a5f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a5fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a600:	4630      	mov	r0, r6
 801a602:	460f      	mov	r7, r1
 801a604:	f7e6 fab8 	bl	8000b78 <__aeabi_d2iz>
 801a608:	f7e5 ff9c 	bl	8000544 <__aeabi_i2d>
 801a60c:	4602      	mov	r2, r0
 801a60e:	460b      	mov	r3, r1
 801a610:	4630      	mov	r0, r6
 801a612:	4639      	mov	r1, r7
 801a614:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a618:	f7e5 fe46 	bl	80002a8 <__aeabi_dsub>
 801a61c:	2200      	movs	r2, #0
 801a61e:	4b1f      	ldr	r3, [pc, #124]	; (801a69c <__ieee754_rem_pio2+0x3dc>)
 801a620:	f7e5 fffa 	bl	8000618 <__aeabi_dmul>
 801a624:	460f      	mov	r7, r1
 801a626:	4606      	mov	r6, r0
 801a628:	f7e6 faa6 	bl	8000b78 <__aeabi_d2iz>
 801a62c:	f7e5 ff8a 	bl	8000544 <__aeabi_i2d>
 801a630:	4602      	mov	r2, r0
 801a632:	460b      	mov	r3, r1
 801a634:	4630      	mov	r0, r6
 801a636:	4639      	mov	r1, r7
 801a638:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a63c:	f7e5 fe34 	bl	80002a8 <__aeabi_dsub>
 801a640:	2200      	movs	r2, #0
 801a642:	4b16      	ldr	r3, [pc, #88]	; (801a69c <__ieee754_rem_pio2+0x3dc>)
 801a644:	f7e5 ffe8 	bl	8000618 <__aeabi_dmul>
 801a648:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a64c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a650:	f04f 0803 	mov.w	r8, #3
 801a654:	2600      	movs	r6, #0
 801a656:	2700      	movs	r7, #0
 801a658:	4632      	mov	r2, r6
 801a65a:	463b      	mov	r3, r7
 801a65c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a660:	f108 3aff 	add.w	sl, r8, #4294967295
 801a664:	f7e6 fa40 	bl	8000ae8 <__aeabi_dcmpeq>
 801a668:	b9b0      	cbnz	r0, 801a698 <__ieee754_rem_pio2+0x3d8>
 801a66a:	4b0d      	ldr	r3, [pc, #52]	; (801a6a0 <__ieee754_rem_pio2+0x3e0>)
 801a66c:	9301      	str	r3, [sp, #4]
 801a66e:	2302      	movs	r3, #2
 801a670:	9300      	str	r3, [sp, #0]
 801a672:	462a      	mov	r2, r5
 801a674:	4643      	mov	r3, r8
 801a676:	4621      	mov	r1, r4
 801a678:	a806      	add	r0, sp, #24
 801a67a:	f000 f991 	bl	801a9a0 <__kernel_rem_pio2>
 801a67e:	9b04      	ldr	r3, [sp, #16]
 801a680:	2b00      	cmp	r3, #0
 801a682:	4605      	mov	r5, r0
 801a684:	f6bf ae58 	bge.w	801a338 <__ieee754_rem_pio2+0x78>
 801a688:	6863      	ldr	r3, [r4, #4]
 801a68a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a68e:	6063      	str	r3, [r4, #4]
 801a690:	68e3      	ldr	r3, [r4, #12]
 801a692:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a696:	e746      	b.n	801a526 <__ieee754_rem_pio2+0x266>
 801a698:	46d0      	mov	r8, sl
 801a69a:	e7dd      	b.n	801a658 <__ieee754_rem_pio2+0x398>
 801a69c:	41700000 	.word	0x41700000
 801a6a0:	0801c188 	.word	0x0801c188

0801a6a4 <__ieee754_sqrt>:
 801a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6a8:	4955      	ldr	r1, [pc, #340]	; (801a800 <__ieee754_sqrt+0x15c>)
 801a6aa:	ec55 4b10 	vmov	r4, r5, d0
 801a6ae:	43a9      	bics	r1, r5
 801a6b0:	462b      	mov	r3, r5
 801a6b2:	462a      	mov	r2, r5
 801a6b4:	d112      	bne.n	801a6dc <__ieee754_sqrt+0x38>
 801a6b6:	ee10 2a10 	vmov	r2, s0
 801a6ba:	ee10 0a10 	vmov	r0, s0
 801a6be:	4629      	mov	r1, r5
 801a6c0:	f7e5 ffaa 	bl	8000618 <__aeabi_dmul>
 801a6c4:	4602      	mov	r2, r0
 801a6c6:	460b      	mov	r3, r1
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	4629      	mov	r1, r5
 801a6cc:	f7e5 fdee 	bl	80002ac <__adddf3>
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	460d      	mov	r5, r1
 801a6d4:	ec45 4b10 	vmov	d0, r4, r5
 801a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6dc:	2d00      	cmp	r5, #0
 801a6de:	ee10 0a10 	vmov	r0, s0
 801a6e2:	4621      	mov	r1, r4
 801a6e4:	dc0f      	bgt.n	801a706 <__ieee754_sqrt+0x62>
 801a6e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a6ea:	4330      	orrs	r0, r6
 801a6ec:	d0f2      	beq.n	801a6d4 <__ieee754_sqrt+0x30>
 801a6ee:	b155      	cbz	r5, 801a706 <__ieee754_sqrt+0x62>
 801a6f0:	ee10 2a10 	vmov	r2, s0
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	4629      	mov	r1, r5
 801a6f8:	f7e5 fdd6 	bl	80002a8 <__aeabi_dsub>
 801a6fc:	4602      	mov	r2, r0
 801a6fe:	460b      	mov	r3, r1
 801a700:	f7e6 f8b4 	bl	800086c <__aeabi_ddiv>
 801a704:	e7e4      	b.n	801a6d0 <__ieee754_sqrt+0x2c>
 801a706:	151b      	asrs	r3, r3, #20
 801a708:	d073      	beq.n	801a7f2 <__ieee754_sqrt+0x14e>
 801a70a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a70e:	07dd      	lsls	r5, r3, #31
 801a710:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a714:	bf48      	it	mi
 801a716:	0fc8      	lsrmi	r0, r1, #31
 801a718:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a71c:	bf44      	itt	mi
 801a71e:	0049      	lslmi	r1, r1, #1
 801a720:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a724:	2500      	movs	r5, #0
 801a726:	1058      	asrs	r0, r3, #1
 801a728:	0fcb      	lsrs	r3, r1, #31
 801a72a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a72e:	0049      	lsls	r1, r1, #1
 801a730:	2316      	movs	r3, #22
 801a732:	462c      	mov	r4, r5
 801a734:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a738:	19a7      	adds	r7, r4, r6
 801a73a:	4297      	cmp	r7, r2
 801a73c:	bfde      	ittt	le
 801a73e:	19bc      	addle	r4, r7, r6
 801a740:	1bd2      	suble	r2, r2, r7
 801a742:	19ad      	addle	r5, r5, r6
 801a744:	0fcf      	lsrs	r7, r1, #31
 801a746:	3b01      	subs	r3, #1
 801a748:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a74c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a750:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a754:	d1f0      	bne.n	801a738 <__ieee754_sqrt+0x94>
 801a756:	f04f 0c20 	mov.w	ip, #32
 801a75a:	469e      	mov	lr, r3
 801a75c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a760:	42a2      	cmp	r2, r4
 801a762:	eb06 070e 	add.w	r7, r6, lr
 801a766:	dc02      	bgt.n	801a76e <__ieee754_sqrt+0xca>
 801a768:	d112      	bne.n	801a790 <__ieee754_sqrt+0xec>
 801a76a:	428f      	cmp	r7, r1
 801a76c:	d810      	bhi.n	801a790 <__ieee754_sqrt+0xec>
 801a76e:	2f00      	cmp	r7, #0
 801a770:	eb07 0e06 	add.w	lr, r7, r6
 801a774:	da42      	bge.n	801a7fc <__ieee754_sqrt+0x158>
 801a776:	f1be 0f00 	cmp.w	lr, #0
 801a77a:	db3f      	blt.n	801a7fc <__ieee754_sqrt+0x158>
 801a77c:	f104 0801 	add.w	r8, r4, #1
 801a780:	1b12      	subs	r2, r2, r4
 801a782:	428f      	cmp	r7, r1
 801a784:	bf88      	it	hi
 801a786:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a78a:	1bc9      	subs	r1, r1, r7
 801a78c:	4433      	add	r3, r6
 801a78e:	4644      	mov	r4, r8
 801a790:	0052      	lsls	r2, r2, #1
 801a792:	f1bc 0c01 	subs.w	ip, ip, #1
 801a796:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a79a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a79e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a7a2:	d1dd      	bne.n	801a760 <__ieee754_sqrt+0xbc>
 801a7a4:	430a      	orrs	r2, r1
 801a7a6:	d006      	beq.n	801a7b6 <__ieee754_sqrt+0x112>
 801a7a8:	1c5c      	adds	r4, r3, #1
 801a7aa:	bf13      	iteet	ne
 801a7ac:	3301      	addne	r3, #1
 801a7ae:	3501      	addeq	r5, #1
 801a7b0:	4663      	moveq	r3, ip
 801a7b2:	f023 0301 	bicne.w	r3, r3, #1
 801a7b6:	106a      	asrs	r2, r5, #1
 801a7b8:	085b      	lsrs	r3, r3, #1
 801a7ba:	07e9      	lsls	r1, r5, #31
 801a7bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a7c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a7c4:	bf48      	it	mi
 801a7c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a7ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a7ce:	461c      	mov	r4, r3
 801a7d0:	e780      	b.n	801a6d4 <__ieee754_sqrt+0x30>
 801a7d2:	0aca      	lsrs	r2, r1, #11
 801a7d4:	3815      	subs	r0, #21
 801a7d6:	0549      	lsls	r1, r1, #21
 801a7d8:	2a00      	cmp	r2, #0
 801a7da:	d0fa      	beq.n	801a7d2 <__ieee754_sqrt+0x12e>
 801a7dc:	02d6      	lsls	r6, r2, #11
 801a7de:	d50a      	bpl.n	801a7f6 <__ieee754_sqrt+0x152>
 801a7e0:	f1c3 0420 	rsb	r4, r3, #32
 801a7e4:	fa21 f404 	lsr.w	r4, r1, r4
 801a7e8:	1e5d      	subs	r5, r3, #1
 801a7ea:	4099      	lsls	r1, r3
 801a7ec:	4322      	orrs	r2, r4
 801a7ee:	1b43      	subs	r3, r0, r5
 801a7f0:	e78b      	b.n	801a70a <__ieee754_sqrt+0x66>
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	e7f0      	b.n	801a7d8 <__ieee754_sqrt+0x134>
 801a7f6:	0052      	lsls	r2, r2, #1
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	e7ef      	b.n	801a7dc <__ieee754_sqrt+0x138>
 801a7fc:	46a0      	mov	r8, r4
 801a7fe:	e7bf      	b.n	801a780 <__ieee754_sqrt+0xdc>
 801a800:	7ff00000 	.word	0x7ff00000

0801a804 <__ieee754_sqrtf>:
 801a804:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a808:	4770      	bx	lr
 801a80a:	0000      	movs	r0, r0
 801a80c:	0000      	movs	r0, r0
	...

0801a810 <__kernel_cos>:
 801a810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a814:	ec59 8b10 	vmov	r8, r9, d0
 801a818:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a81c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a820:	ed2d 8b02 	vpush	{d8}
 801a824:	eeb0 8a41 	vmov.f32	s16, s2
 801a828:	eef0 8a61 	vmov.f32	s17, s3
 801a82c:	da07      	bge.n	801a83e <__kernel_cos+0x2e>
 801a82e:	ee10 0a10 	vmov	r0, s0
 801a832:	4649      	mov	r1, r9
 801a834:	f7e6 f9a0 	bl	8000b78 <__aeabi_d2iz>
 801a838:	2800      	cmp	r0, #0
 801a83a:	f000 8089 	beq.w	801a950 <__kernel_cos+0x140>
 801a83e:	4642      	mov	r2, r8
 801a840:	464b      	mov	r3, r9
 801a842:	4640      	mov	r0, r8
 801a844:	4649      	mov	r1, r9
 801a846:	f7e5 fee7 	bl	8000618 <__aeabi_dmul>
 801a84a:	2200      	movs	r2, #0
 801a84c:	4b4e      	ldr	r3, [pc, #312]	; (801a988 <__kernel_cos+0x178>)
 801a84e:	4604      	mov	r4, r0
 801a850:	460d      	mov	r5, r1
 801a852:	f7e5 fee1 	bl	8000618 <__aeabi_dmul>
 801a856:	a340      	add	r3, pc, #256	; (adr r3, 801a958 <__kernel_cos+0x148>)
 801a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a85c:	4682      	mov	sl, r0
 801a85e:	468b      	mov	fp, r1
 801a860:	4620      	mov	r0, r4
 801a862:	4629      	mov	r1, r5
 801a864:	f7e5 fed8 	bl	8000618 <__aeabi_dmul>
 801a868:	a33d      	add	r3, pc, #244	; (adr r3, 801a960 <__kernel_cos+0x150>)
 801a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86e:	f7e5 fd1d 	bl	80002ac <__adddf3>
 801a872:	4622      	mov	r2, r4
 801a874:	462b      	mov	r3, r5
 801a876:	f7e5 fecf 	bl	8000618 <__aeabi_dmul>
 801a87a:	a33b      	add	r3, pc, #236	; (adr r3, 801a968 <__kernel_cos+0x158>)
 801a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a880:	f7e5 fd12 	bl	80002a8 <__aeabi_dsub>
 801a884:	4622      	mov	r2, r4
 801a886:	462b      	mov	r3, r5
 801a888:	f7e5 fec6 	bl	8000618 <__aeabi_dmul>
 801a88c:	a338      	add	r3, pc, #224	; (adr r3, 801a970 <__kernel_cos+0x160>)
 801a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a892:	f7e5 fd0b 	bl	80002ac <__adddf3>
 801a896:	4622      	mov	r2, r4
 801a898:	462b      	mov	r3, r5
 801a89a:	f7e5 febd 	bl	8000618 <__aeabi_dmul>
 801a89e:	a336      	add	r3, pc, #216	; (adr r3, 801a978 <__kernel_cos+0x168>)
 801a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8a4:	f7e5 fd00 	bl	80002a8 <__aeabi_dsub>
 801a8a8:	4622      	mov	r2, r4
 801a8aa:	462b      	mov	r3, r5
 801a8ac:	f7e5 feb4 	bl	8000618 <__aeabi_dmul>
 801a8b0:	a333      	add	r3, pc, #204	; (adr r3, 801a980 <__kernel_cos+0x170>)
 801a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8b6:	f7e5 fcf9 	bl	80002ac <__adddf3>
 801a8ba:	4622      	mov	r2, r4
 801a8bc:	462b      	mov	r3, r5
 801a8be:	f7e5 feab 	bl	8000618 <__aeabi_dmul>
 801a8c2:	4622      	mov	r2, r4
 801a8c4:	462b      	mov	r3, r5
 801a8c6:	f7e5 fea7 	bl	8000618 <__aeabi_dmul>
 801a8ca:	ec53 2b18 	vmov	r2, r3, d8
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	460d      	mov	r5, r1
 801a8d2:	4640      	mov	r0, r8
 801a8d4:	4649      	mov	r1, r9
 801a8d6:	f7e5 fe9f 	bl	8000618 <__aeabi_dmul>
 801a8da:	460b      	mov	r3, r1
 801a8dc:	4602      	mov	r2, r0
 801a8de:	4629      	mov	r1, r5
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	f7e5 fce1 	bl	80002a8 <__aeabi_dsub>
 801a8e6:	4b29      	ldr	r3, [pc, #164]	; (801a98c <__kernel_cos+0x17c>)
 801a8e8:	429e      	cmp	r6, r3
 801a8ea:	4680      	mov	r8, r0
 801a8ec:	4689      	mov	r9, r1
 801a8ee:	dc11      	bgt.n	801a914 <__kernel_cos+0x104>
 801a8f0:	4602      	mov	r2, r0
 801a8f2:	460b      	mov	r3, r1
 801a8f4:	4650      	mov	r0, sl
 801a8f6:	4659      	mov	r1, fp
 801a8f8:	f7e5 fcd6 	bl	80002a8 <__aeabi_dsub>
 801a8fc:	460b      	mov	r3, r1
 801a8fe:	4924      	ldr	r1, [pc, #144]	; (801a990 <__kernel_cos+0x180>)
 801a900:	4602      	mov	r2, r0
 801a902:	2000      	movs	r0, #0
 801a904:	f7e5 fcd0 	bl	80002a8 <__aeabi_dsub>
 801a908:	ecbd 8b02 	vpop	{d8}
 801a90c:	ec41 0b10 	vmov	d0, r0, r1
 801a910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a914:	4b1f      	ldr	r3, [pc, #124]	; (801a994 <__kernel_cos+0x184>)
 801a916:	491e      	ldr	r1, [pc, #120]	; (801a990 <__kernel_cos+0x180>)
 801a918:	429e      	cmp	r6, r3
 801a91a:	bfcc      	ite	gt
 801a91c:	4d1e      	ldrgt	r5, [pc, #120]	; (801a998 <__kernel_cos+0x188>)
 801a91e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a922:	2400      	movs	r4, #0
 801a924:	4622      	mov	r2, r4
 801a926:	462b      	mov	r3, r5
 801a928:	2000      	movs	r0, #0
 801a92a:	f7e5 fcbd 	bl	80002a8 <__aeabi_dsub>
 801a92e:	4622      	mov	r2, r4
 801a930:	4606      	mov	r6, r0
 801a932:	460f      	mov	r7, r1
 801a934:	462b      	mov	r3, r5
 801a936:	4650      	mov	r0, sl
 801a938:	4659      	mov	r1, fp
 801a93a:	f7e5 fcb5 	bl	80002a8 <__aeabi_dsub>
 801a93e:	4642      	mov	r2, r8
 801a940:	464b      	mov	r3, r9
 801a942:	f7e5 fcb1 	bl	80002a8 <__aeabi_dsub>
 801a946:	4602      	mov	r2, r0
 801a948:	460b      	mov	r3, r1
 801a94a:	4630      	mov	r0, r6
 801a94c:	4639      	mov	r1, r7
 801a94e:	e7d9      	b.n	801a904 <__kernel_cos+0xf4>
 801a950:	2000      	movs	r0, #0
 801a952:	490f      	ldr	r1, [pc, #60]	; (801a990 <__kernel_cos+0x180>)
 801a954:	e7d8      	b.n	801a908 <__kernel_cos+0xf8>
 801a956:	bf00      	nop
 801a958:	be8838d4 	.word	0xbe8838d4
 801a95c:	bda8fae9 	.word	0xbda8fae9
 801a960:	bdb4b1c4 	.word	0xbdb4b1c4
 801a964:	3e21ee9e 	.word	0x3e21ee9e
 801a968:	809c52ad 	.word	0x809c52ad
 801a96c:	3e927e4f 	.word	0x3e927e4f
 801a970:	19cb1590 	.word	0x19cb1590
 801a974:	3efa01a0 	.word	0x3efa01a0
 801a978:	16c15177 	.word	0x16c15177
 801a97c:	3f56c16c 	.word	0x3f56c16c
 801a980:	5555554c 	.word	0x5555554c
 801a984:	3fa55555 	.word	0x3fa55555
 801a988:	3fe00000 	.word	0x3fe00000
 801a98c:	3fd33332 	.word	0x3fd33332
 801a990:	3ff00000 	.word	0x3ff00000
 801a994:	3fe90000 	.word	0x3fe90000
 801a998:	3fd20000 	.word	0x3fd20000
 801a99c:	00000000 	.word	0x00000000

0801a9a0 <__kernel_rem_pio2>:
 801a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a4:	ed2d 8b02 	vpush	{d8}
 801a9a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a9ac:	1ed4      	subs	r4, r2, #3
 801a9ae:	9308      	str	r3, [sp, #32]
 801a9b0:	9101      	str	r1, [sp, #4]
 801a9b2:	4bc5      	ldr	r3, [pc, #788]	; (801acc8 <__kernel_rem_pio2+0x328>)
 801a9b4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a9b6:	9009      	str	r0, [sp, #36]	; 0x24
 801a9b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a9bc:	9304      	str	r3, [sp, #16]
 801a9be:	9b08      	ldr	r3, [sp, #32]
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	9307      	str	r3, [sp, #28]
 801a9c4:	2318      	movs	r3, #24
 801a9c6:	fb94 f4f3 	sdiv	r4, r4, r3
 801a9ca:	f06f 0317 	mvn.w	r3, #23
 801a9ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a9d2:	fb04 3303 	mla	r3, r4, r3, r3
 801a9d6:	eb03 0a02 	add.w	sl, r3, r2
 801a9da:	9b04      	ldr	r3, [sp, #16]
 801a9dc:	9a07      	ldr	r2, [sp, #28]
 801a9de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801acb8 <__kernel_rem_pio2+0x318>
 801a9e2:	eb03 0802 	add.w	r8, r3, r2
 801a9e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a9e8:	1aa7      	subs	r7, r4, r2
 801a9ea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a9ee:	ae22      	add	r6, sp, #136	; 0x88
 801a9f0:	2500      	movs	r5, #0
 801a9f2:	4545      	cmp	r5, r8
 801a9f4:	dd13      	ble.n	801aa1e <__kernel_rem_pio2+0x7e>
 801a9f6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801acb8 <__kernel_rem_pio2+0x318>
 801a9fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a9fe:	2600      	movs	r6, #0
 801aa00:	9b04      	ldr	r3, [sp, #16]
 801aa02:	429e      	cmp	r6, r3
 801aa04:	dc32      	bgt.n	801aa6c <__kernel_rem_pio2+0xcc>
 801aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa08:	9302      	str	r3, [sp, #8]
 801aa0a:	9b08      	ldr	r3, [sp, #32]
 801aa0c:	199d      	adds	r5, r3, r6
 801aa0e:	ab22      	add	r3, sp, #136	; 0x88
 801aa10:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aa14:	9306      	str	r3, [sp, #24]
 801aa16:	ec59 8b18 	vmov	r8, r9, d8
 801aa1a:	2700      	movs	r7, #0
 801aa1c:	e01f      	b.n	801aa5e <__kernel_rem_pio2+0xbe>
 801aa1e:	42ef      	cmn	r7, r5
 801aa20:	d407      	bmi.n	801aa32 <__kernel_rem_pio2+0x92>
 801aa22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801aa26:	f7e5 fd8d 	bl	8000544 <__aeabi_i2d>
 801aa2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801aa2e:	3501      	adds	r5, #1
 801aa30:	e7df      	b.n	801a9f2 <__kernel_rem_pio2+0x52>
 801aa32:	ec51 0b18 	vmov	r0, r1, d8
 801aa36:	e7f8      	b.n	801aa2a <__kernel_rem_pio2+0x8a>
 801aa38:	9906      	ldr	r1, [sp, #24]
 801aa3a:	9d02      	ldr	r5, [sp, #8]
 801aa3c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801aa40:	9106      	str	r1, [sp, #24]
 801aa42:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801aa46:	9502      	str	r5, [sp, #8]
 801aa48:	f7e5 fde6 	bl	8000618 <__aeabi_dmul>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	4640      	mov	r0, r8
 801aa52:	4649      	mov	r1, r9
 801aa54:	f7e5 fc2a 	bl	80002ac <__adddf3>
 801aa58:	3701      	adds	r7, #1
 801aa5a:	4680      	mov	r8, r0
 801aa5c:	4689      	mov	r9, r1
 801aa5e:	9b07      	ldr	r3, [sp, #28]
 801aa60:	429f      	cmp	r7, r3
 801aa62:	dde9      	ble.n	801aa38 <__kernel_rem_pio2+0x98>
 801aa64:	e8eb 8902 	strd	r8, r9, [fp], #8
 801aa68:	3601      	adds	r6, #1
 801aa6a:	e7c9      	b.n	801aa00 <__kernel_rem_pio2+0x60>
 801aa6c:	9b04      	ldr	r3, [sp, #16]
 801aa6e:	aa0e      	add	r2, sp, #56	; 0x38
 801aa70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aa74:	930c      	str	r3, [sp, #48]	; 0x30
 801aa76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801aa78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801aa7c:	9c04      	ldr	r4, [sp, #16]
 801aa7e:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa80:	ab9a      	add	r3, sp, #616	; 0x268
 801aa82:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801aa86:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aa8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa8e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801aa92:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801aa96:	ab9a      	add	r3, sp, #616	; 0x268
 801aa98:	445b      	add	r3, fp
 801aa9a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801aa9e:	2500      	movs	r5, #0
 801aaa0:	1b63      	subs	r3, r4, r5
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	dc78      	bgt.n	801ab98 <__kernel_rem_pio2+0x1f8>
 801aaa6:	4650      	mov	r0, sl
 801aaa8:	ec49 8b10 	vmov	d0, r8, r9
 801aaac:	f000 fe3c 	bl	801b728 <scalbn>
 801aab0:	ec57 6b10 	vmov	r6, r7, d0
 801aab4:	2200      	movs	r2, #0
 801aab6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801aaba:	ee10 0a10 	vmov	r0, s0
 801aabe:	4639      	mov	r1, r7
 801aac0:	f7e5 fdaa 	bl	8000618 <__aeabi_dmul>
 801aac4:	ec41 0b10 	vmov	d0, r0, r1
 801aac8:	f000 fd1a 	bl	801b500 <floor>
 801aacc:	2200      	movs	r2, #0
 801aace:	ec51 0b10 	vmov	r0, r1, d0
 801aad2:	4b7e      	ldr	r3, [pc, #504]	; (801accc <__kernel_rem_pio2+0x32c>)
 801aad4:	f7e5 fda0 	bl	8000618 <__aeabi_dmul>
 801aad8:	4602      	mov	r2, r0
 801aada:	460b      	mov	r3, r1
 801aadc:	4630      	mov	r0, r6
 801aade:	4639      	mov	r1, r7
 801aae0:	f7e5 fbe2 	bl	80002a8 <__aeabi_dsub>
 801aae4:	460f      	mov	r7, r1
 801aae6:	4606      	mov	r6, r0
 801aae8:	f7e6 f846 	bl	8000b78 <__aeabi_d2iz>
 801aaec:	9006      	str	r0, [sp, #24]
 801aaee:	f7e5 fd29 	bl	8000544 <__aeabi_i2d>
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	4630      	mov	r0, r6
 801aaf8:	4639      	mov	r1, r7
 801aafa:	f7e5 fbd5 	bl	80002a8 <__aeabi_dsub>
 801aafe:	f1ba 0f00 	cmp.w	sl, #0
 801ab02:	4606      	mov	r6, r0
 801ab04:	460f      	mov	r7, r1
 801ab06:	dd6c      	ble.n	801abe2 <__kernel_rem_pio2+0x242>
 801ab08:	1e62      	subs	r2, r4, #1
 801ab0a:	ab0e      	add	r3, sp, #56	; 0x38
 801ab0c:	f1ca 0118 	rsb	r1, sl, #24
 801ab10:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ab14:	9d06      	ldr	r5, [sp, #24]
 801ab16:	fa40 f301 	asr.w	r3, r0, r1
 801ab1a:	441d      	add	r5, r3
 801ab1c:	408b      	lsls	r3, r1
 801ab1e:	1ac0      	subs	r0, r0, r3
 801ab20:	ab0e      	add	r3, sp, #56	; 0x38
 801ab22:	9506      	str	r5, [sp, #24]
 801ab24:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801ab28:	f1ca 0317 	rsb	r3, sl, #23
 801ab2c:	fa40 f303 	asr.w	r3, r0, r3
 801ab30:	9302      	str	r3, [sp, #8]
 801ab32:	9b02      	ldr	r3, [sp, #8]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	dd62      	ble.n	801abfe <__kernel_rem_pio2+0x25e>
 801ab38:	9b06      	ldr	r3, [sp, #24]
 801ab3a:	2200      	movs	r2, #0
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	9306      	str	r3, [sp, #24]
 801ab40:	4615      	mov	r5, r2
 801ab42:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801ab46:	4294      	cmp	r4, r2
 801ab48:	f300 8095 	bgt.w	801ac76 <__kernel_rem_pio2+0x2d6>
 801ab4c:	f1ba 0f00 	cmp.w	sl, #0
 801ab50:	dd07      	ble.n	801ab62 <__kernel_rem_pio2+0x1c2>
 801ab52:	f1ba 0f01 	cmp.w	sl, #1
 801ab56:	f000 80a2 	beq.w	801ac9e <__kernel_rem_pio2+0x2fe>
 801ab5a:	f1ba 0f02 	cmp.w	sl, #2
 801ab5e:	f000 80c1 	beq.w	801ace4 <__kernel_rem_pio2+0x344>
 801ab62:	9b02      	ldr	r3, [sp, #8]
 801ab64:	2b02      	cmp	r3, #2
 801ab66:	d14a      	bne.n	801abfe <__kernel_rem_pio2+0x25e>
 801ab68:	4632      	mov	r2, r6
 801ab6a:	463b      	mov	r3, r7
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	4958      	ldr	r1, [pc, #352]	; (801acd0 <__kernel_rem_pio2+0x330>)
 801ab70:	f7e5 fb9a 	bl	80002a8 <__aeabi_dsub>
 801ab74:	4606      	mov	r6, r0
 801ab76:	460f      	mov	r7, r1
 801ab78:	2d00      	cmp	r5, #0
 801ab7a:	d040      	beq.n	801abfe <__kernel_rem_pio2+0x25e>
 801ab7c:	4650      	mov	r0, sl
 801ab7e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801acc0 <__kernel_rem_pio2+0x320>
 801ab82:	f000 fdd1 	bl	801b728 <scalbn>
 801ab86:	4630      	mov	r0, r6
 801ab88:	4639      	mov	r1, r7
 801ab8a:	ec53 2b10 	vmov	r2, r3, d0
 801ab8e:	f7e5 fb8b 	bl	80002a8 <__aeabi_dsub>
 801ab92:	4606      	mov	r6, r0
 801ab94:	460f      	mov	r7, r1
 801ab96:	e032      	b.n	801abfe <__kernel_rem_pio2+0x25e>
 801ab98:	2200      	movs	r2, #0
 801ab9a:	4b4e      	ldr	r3, [pc, #312]	; (801acd4 <__kernel_rem_pio2+0x334>)
 801ab9c:	4640      	mov	r0, r8
 801ab9e:	4649      	mov	r1, r9
 801aba0:	f7e5 fd3a 	bl	8000618 <__aeabi_dmul>
 801aba4:	f7e5 ffe8 	bl	8000b78 <__aeabi_d2iz>
 801aba8:	f7e5 fccc 	bl	8000544 <__aeabi_i2d>
 801abac:	2200      	movs	r2, #0
 801abae:	4b4a      	ldr	r3, [pc, #296]	; (801acd8 <__kernel_rem_pio2+0x338>)
 801abb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801abb4:	f7e5 fd30 	bl	8000618 <__aeabi_dmul>
 801abb8:	4602      	mov	r2, r0
 801abba:	460b      	mov	r3, r1
 801abbc:	4640      	mov	r0, r8
 801abbe:	4649      	mov	r1, r9
 801abc0:	f7e5 fb72 	bl	80002a8 <__aeabi_dsub>
 801abc4:	f7e5 ffd8 	bl	8000b78 <__aeabi_d2iz>
 801abc8:	ab0e      	add	r3, sp, #56	; 0x38
 801abca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801abce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801abd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801abd6:	f7e5 fb69 	bl	80002ac <__adddf3>
 801abda:	3501      	adds	r5, #1
 801abdc:	4680      	mov	r8, r0
 801abde:	4689      	mov	r9, r1
 801abe0:	e75e      	b.n	801aaa0 <__kernel_rem_pio2+0x100>
 801abe2:	d105      	bne.n	801abf0 <__kernel_rem_pio2+0x250>
 801abe4:	1e63      	subs	r3, r4, #1
 801abe6:	aa0e      	add	r2, sp, #56	; 0x38
 801abe8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801abec:	15c3      	asrs	r3, r0, #23
 801abee:	e79f      	b.n	801ab30 <__kernel_rem_pio2+0x190>
 801abf0:	2200      	movs	r2, #0
 801abf2:	4b3a      	ldr	r3, [pc, #232]	; (801acdc <__kernel_rem_pio2+0x33c>)
 801abf4:	f7e5 ff96 	bl	8000b24 <__aeabi_dcmpge>
 801abf8:	2800      	cmp	r0, #0
 801abfa:	d139      	bne.n	801ac70 <__kernel_rem_pio2+0x2d0>
 801abfc:	9002      	str	r0, [sp, #8]
 801abfe:	2200      	movs	r2, #0
 801ac00:	2300      	movs	r3, #0
 801ac02:	4630      	mov	r0, r6
 801ac04:	4639      	mov	r1, r7
 801ac06:	f7e5 ff6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801ac0a:	2800      	cmp	r0, #0
 801ac0c:	f000 80c7 	beq.w	801ad9e <__kernel_rem_pio2+0x3fe>
 801ac10:	1e65      	subs	r5, r4, #1
 801ac12:	462b      	mov	r3, r5
 801ac14:	2200      	movs	r2, #0
 801ac16:	9904      	ldr	r1, [sp, #16]
 801ac18:	428b      	cmp	r3, r1
 801ac1a:	da6a      	bge.n	801acf2 <__kernel_rem_pio2+0x352>
 801ac1c:	2a00      	cmp	r2, #0
 801ac1e:	f000 8088 	beq.w	801ad32 <__kernel_rem_pio2+0x392>
 801ac22:	ab0e      	add	r3, sp, #56	; 0x38
 801ac24:	f1aa 0a18 	sub.w	sl, sl, #24
 801ac28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f000 80b4 	beq.w	801ad9a <__kernel_rem_pio2+0x3fa>
 801ac32:	4650      	mov	r0, sl
 801ac34:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801acc0 <__kernel_rem_pio2+0x320>
 801ac38:	f000 fd76 	bl	801b728 <scalbn>
 801ac3c:	00ec      	lsls	r4, r5, #3
 801ac3e:	ab72      	add	r3, sp, #456	; 0x1c8
 801ac40:	191e      	adds	r6, r3, r4
 801ac42:	ec59 8b10 	vmov	r8, r9, d0
 801ac46:	f106 0a08 	add.w	sl, r6, #8
 801ac4a:	462f      	mov	r7, r5
 801ac4c:	2f00      	cmp	r7, #0
 801ac4e:	f280 80df 	bge.w	801ae10 <__kernel_rem_pio2+0x470>
 801ac52:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801acb8 <__kernel_rem_pio2+0x318>
 801ac56:	f04f 0a00 	mov.w	sl, #0
 801ac5a:	eba5 030a 	sub.w	r3, r5, sl
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	f2c0 810a 	blt.w	801ae78 <__kernel_rem_pio2+0x4d8>
 801ac64:	f8df b078 	ldr.w	fp, [pc, #120]	; 801ace0 <__kernel_rem_pio2+0x340>
 801ac68:	ec59 8b18 	vmov	r8, r9, d8
 801ac6c:	2700      	movs	r7, #0
 801ac6e:	e0f5      	b.n	801ae5c <__kernel_rem_pio2+0x4bc>
 801ac70:	2302      	movs	r3, #2
 801ac72:	9302      	str	r3, [sp, #8]
 801ac74:	e760      	b.n	801ab38 <__kernel_rem_pio2+0x198>
 801ac76:	ab0e      	add	r3, sp, #56	; 0x38
 801ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac7c:	b94d      	cbnz	r5, 801ac92 <__kernel_rem_pio2+0x2f2>
 801ac7e:	b12b      	cbz	r3, 801ac8c <__kernel_rem_pio2+0x2ec>
 801ac80:	a80e      	add	r0, sp, #56	; 0x38
 801ac82:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ac86:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	3201      	adds	r2, #1
 801ac8e:	461d      	mov	r5, r3
 801ac90:	e759      	b.n	801ab46 <__kernel_rem_pio2+0x1a6>
 801ac92:	a80e      	add	r0, sp, #56	; 0x38
 801ac94:	1acb      	subs	r3, r1, r3
 801ac96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ac9a:	462b      	mov	r3, r5
 801ac9c:	e7f6      	b.n	801ac8c <__kernel_rem_pio2+0x2ec>
 801ac9e:	1e62      	subs	r2, r4, #1
 801aca0:	ab0e      	add	r3, sp, #56	; 0x38
 801aca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aca6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801acaa:	a90e      	add	r1, sp, #56	; 0x38
 801acac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801acb0:	e757      	b.n	801ab62 <__kernel_rem_pio2+0x1c2>
 801acb2:	bf00      	nop
 801acb4:	f3af 8000 	nop.w
	...
 801acc4:	3ff00000 	.word	0x3ff00000
 801acc8:	0801c2d0 	.word	0x0801c2d0
 801accc:	40200000 	.word	0x40200000
 801acd0:	3ff00000 	.word	0x3ff00000
 801acd4:	3e700000 	.word	0x3e700000
 801acd8:	41700000 	.word	0x41700000
 801acdc:	3fe00000 	.word	0x3fe00000
 801ace0:	0801c290 	.word	0x0801c290
 801ace4:	1e62      	subs	r2, r4, #1
 801ace6:	ab0e      	add	r3, sp, #56	; 0x38
 801ace8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801acec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801acf0:	e7db      	b.n	801acaa <__kernel_rem_pio2+0x30a>
 801acf2:	a90e      	add	r1, sp, #56	; 0x38
 801acf4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801acf8:	3b01      	subs	r3, #1
 801acfa:	430a      	orrs	r2, r1
 801acfc:	e78b      	b.n	801ac16 <__kernel_rem_pio2+0x276>
 801acfe:	3301      	adds	r3, #1
 801ad00:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801ad04:	2900      	cmp	r1, #0
 801ad06:	d0fa      	beq.n	801acfe <__kernel_rem_pio2+0x35e>
 801ad08:	9a08      	ldr	r2, [sp, #32]
 801ad0a:	4422      	add	r2, r4
 801ad0c:	00d2      	lsls	r2, r2, #3
 801ad0e:	a922      	add	r1, sp, #136	; 0x88
 801ad10:	18e3      	adds	r3, r4, r3
 801ad12:	9206      	str	r2, [sp, #24]
 801ad14:	440a      	add	r2, r1
 801ad16:	9302      	str	r3, [sp, #8]
 801ad18:	f10b 0108 	add.w	r1, fp, #8
 801ad1c:	f102 0308 	add.w	r3, r2, #8
 801ad20:	1c66      	adds	r6, r4, #1
 801ad22:	910a      	str	r1, [sp, #40]	; 0x28
 801ad24:	2500      	movs	r5, #0
 801ad26:	930d      	str	r3, [sp, #52]	; 0x34
 801ad28:	9b02      	ldr	r3, [sp, #8]
 801ad2a:	42b3      	cmp	r3, r6
 801ad2c:	da04      	bge.n	801ad38 <__kernel_rem_pio2+0x398>
 801ad2e:	461c      	mov	r4, r3
 801ad30:	e6a6      	b.n	801aa80 <__kernel_rem_pio2+0xe0>
 801ad32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ad34:	2301      	movs	r3, #1
 801ad36:	e7e3      	b.n	801ad00 <__kernel_rem_pio2+0x360>
 801ad38:	9b06      	ldr	r3, [sp, #24]
 801ad3a:	18ef      	adds	r7, r5, r3
 801ad3c:	ab22      	add	r3, sp, #136	; 0x88
 801ad3e:	441f      	add	r7, r3
 801ad40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ad46:	f7e5 fbfd 	bl	8000544 <__aeabi_i2d>
 801ad4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad4c:	461c      	mov	r4, r3
 801ad4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad50:	e9c7 0100 	strd	r0, r1, [r7]
 801ad54:	eb03 0b05 	add.w	fp, r3, r5
 801ad58:	2700      	movs	r7, #0
 801ad5a:	f04f 0800 	mov.w	r8, #0
 801ad5e:	f04f 0900 	mov.w	r9, #0
 801ad62:	9b07      	ldr	r3, [sp, #28]
 801ad64:	429f      	cmp	r7, r3
 801ad66:	dd08      	ble.n	801ad7a <__kernel_rem_pio2+0x3da>
 801ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad6a:	aa72      	add	r2, sp, #456	; 0x1c8
 801ad6c:	18eb      	adds	r3, r5, r3
 801ad6e:	4413      	add	r3, r2
 801ad70:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801ad74:	3601      	adds	r6, #1
 801ad76:	3508      	adds	r5, #8
 801ad78:	e7d6      	b.n	801ad28 <__kernel_rem_pio2+0x388>
 801ad7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ad7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ad82:	f7e5 fc49 	bl	8000618 <__aeabi_dmul>
 801ad86:	4602      	mov	r2, r0
 801ad88:	460b      	mov	r3, r1
 801ad8a:	4640      	mov	r0, r8
 801ad8c:	4649      	mov	r1, r9
 801ad8e:	f7e5 fa8d 	bl	80002ac <__adddf3>
 801ad92:	3701      	adds	r7, #1
 801ad94:	4680      	mov	r8, r0
 801ad96:	4689      	mov	r9, r1
 801ad98:	e7e3      	b.n	801ad62 <__kernel_rem_pio2+0x3c2>
 801ad9a:	3d01      	subs	r5, #1
 801ad9c:	e741      	b.n	801ac22 <__kernel_rem_pio2+0x282>
 801ad9e:	f1ca 0000 	rsb	r0, sl, #0
 801ada2:	ec47 6b10 	vmov	d0, r6, r7
 801ada6:	f000 fcbf 	bl	801b728 <scalbn>
 801adaa:	ec57 6b10 	vmov	r6, r7, d0
 801adae:	2200      	movs	r2, #0
 801adb0:	4b99      	ldr	r3, [pc, #612]	; (801b018 <__kernel_rem_pio2+0x678>)
 801adb2:	ee10 0a10 	vmov	r0, s0
 801adb6:	4639      	mov	r1, r7
 801adb8:	f7e5 feb4 	bl	8000b24 <__aeabi_dcmpge>
 801adbc:	b1f8      	cbz	r0, 801adfe <__kernel_rem_pio2+0x45e>
 801adbe:	2200      	movs	r2, #0
 801adc0:	4b96      	ldr	r3, [pc, #600]	; (801b01c <__kernel_rem_pio2+0x67c>)
 801adc2:	4630      	mov	r0, r6
 801adc4:	4639      	mov	r1, r7
 801adc6:	f7e5 fc27 	bl	8000618 <__aeabi_dmul>
 801adca:	f7e5 fed5 	bl	8000b78 <__aeabi_d2iz>
 801adce:	4680      	mov	r8, r0
 801add0:	f7e5 fbb8 	bl	8000544 <__aeabi_i2d>
 801add4:	2200      	movs	r2, #0
 801add6:	4b90      	ldr	r3, [pc, #576]	; (801b018 <__kernel_rem_pio2+0x678>)
 801add8:	f7e5 fc1e 	bl	8000618 <__aeabi_dmul>
 801addc:	460b      	mov	r3, r1
 801adde:	4602      	mov	r2, r0
 801ade0:	4639      	mov	r1, r7
 801ade2:	4630      	mov	r0, r6
 801ade4:	f7e5 fa60 	bl	80002a8 <__aeabi_dsub>
 801ade8:	f7e5 fec6 	bl	8000b78 <__aeabi_d2iz>
 801adec:	1c65      	adds	r5, r4, #1
 801adee:	ab0e      	add	r3, sp, #56	; 0x38
 801adf0:	f10a 0a18 	add.w	sl, sl, #24
 801adf4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801adf8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801adfc:	e719      	b.n	801ac32 <__kernel_rem_pio2+0x292>
 801adfe:	4630      	mov	r0, r6
 801ae00:	4639      	mov	r1, r7
 801ae02:	f7e5 feb9 	bl	8000b78 <__aeabi_d2iz>
 801ae06:	ab0e      	add	r3, sp, #56	; 0x38
 801ae08:	4625      	mov	r5, r4
 801ae0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ae0e:	e710      	b.n	801ac32 <__kernel_rem_pio2+0x292>
 801ae10:	ab0e      	add	r3, sp, #56	; 0x38
 801ae12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ae16:	f7e5 fb95 	bl	8000544 <__aeabi_i2d>
 801ae1a:	4642      	mov	r2, r8
 801ae1c:	464b      	mov	r3, r9
 801ae1e:	f7e5 fbfb 	bl	8000618 <__aeabi_dmul>
 801ae22:	2200      	movs	r2, #0
 801ae24:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801ae28:	4b7c      	ldr	r3, [pc, #496]	; (801b01c <__kernel_rem_pio2+0x67c>)
 801ae2a:	4640      	mov	r0, r8
 801ae2c:	4649      	mov	r1, r9
 801ae2e:	f7e5 fbf3 	bl	8000618 <__aeabi_dmul>
 801ae32:	3f01      	subs	r7, #1
 801ae34:	4680      	mov	r8, r0
 801ae36:	4689      	mov	r9, r1
 801ae38:	e708      	b.n	801ac4c <__kernel_rem_pio2+0x2ac>
 801ae3a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ae46:	f7e5 fbe7 	bl	8000618 <__aeabi_dmul>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	460b      	mov	r3, r1
 801ae4e:	4640      	mov	r0, r8
 801ae50:	4649      	mov	r1, r9
 801ae52:	f7e5 fa2b 	bl	80002ac <__adddf3>
 801ae56:	3701      	adds	r7, #1
 801ae58:	4680      	mov	r8, r0
 801ae5a:	4689      	mov	r9, r1
 801ae5c:	9b04      	ldr	r3, [sp, #16]
 801ae5e:	429f      	cmp	r7, r3
 801ae60:	dc01      	bgt.n	801ae66 <__kernel_rem_pio2+0x4c6>
 801ae62:	45ba      	cmp	sl, r7
 801ae64:	dae9      	bge.n	801ae3a <__kernel_rem_pio2+0x49a>
 801ae66:	ab4a      	add	r3, sp, #296	; 0x128
 801ae68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ae6c:	e9c3 8900 	strd	r8, r9, [r3]
 801ae70:	f10a 0a01 	add.w	sl, sl, #1
 801ae74:	3e08      	subs	r6, #8
 801ae76:	e6f0      	b.n	801ac5a <__kernel_rem_pio2+0x2ba>
 801ae78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801ae7a:	2b03      	cmp	r3, #3
 801ae7c:	d85b      	bhi.n	801af36 <__kernel_rem_pio2+0x596>
 801ae7e:	e8df f003 	tbb	[pc, r3]
 801ae82:	264a      	.short	0x264a
 801ae84:	0226      	.short	0x0226
 801ae86:	ab9a      	add	r3, sp, #616	; 0x268
 801ae88:	441c      	add	r4, r3
 801ae8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ae8e:	46a2      	mov	sl, r4
 801ae90:	46ab      	mov	fp, r5
 801ae92:	f1bb 0f00 	cmp.w	fp, #0
 801ae96:	dc6c      	bgt.n	801af72 <__kernel_rem_pio2+0x5d2>
 801ae98:	46a2      	mov	sl, r4
 801ae9a:	46ab      	mov	fp, r5
 801ae9c:	f1bb 0f01 	cmp.w	fp, #1
 801aea0:	f300 8086 	bgt.w	801afb0 <__kernel_rem_pio2+0x610>
 801aea4:	2000      	movs	r0, #0
 801aea6:	2100      	movs	r1, #0
 801aea8:	2d01      	cmp	r5, #1
 801aeaa:	f300 80a0 	bgt.w	801afee <__kernel_rem_pio2+0x64e>
 801aeae:	9b02      	ldr	r3, [sp, #8]
 801aeb0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801aeb4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	f040 809e 	bne.w	801affa <__kernel_rem_pio2+0x65a>
 801aebe:	9b01      	ldr	r3, [sp, #4]
 801aec0:	e9c3 7800 	strd	r7, r8, [r3]
 801aec4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801aec8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801aecc:	e033      	b.n	801af36 <__kernel_rem_pio2+0x596>
 801aece:	3408      	adds	r4, #8
 801aed0:	ab4a      	add	r3, sp, #296	; 0x128
 801aed2:	441c      	add	r4, r3
 801aed4:	462e      	mov	r6, r5
 801aed6:	2000      	movs	r0, #0
 801aed8:	2100      	movs	r1, #0
 801aeda:	2e00      	cmp	r6, #0
 801aedc:	da3a      	bge.n	801af54 <__kernel_rem_pio2+0x5b4>
 801aede:	9b02      	ldr	r3, [sp, #8]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d03d      	beq.n	801af60 <__kernel_rem_pio2+0x5c0>
 801aee4:	4602      	mov	r2, r0
 801aee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aeea:	9c01      	ldr	r4, [sp, #4]
 801aeec:	e9c4 2300 	strd	r2, r3, [r4]
 801aef0:	4602      	mov	r2, r0
 801aef2:	460b      	mov	r3, r1
 801aef4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801aef8:	f7e5 f9d6 	bl	80002a8 <__aeabi_dsub>
 801aefc:	ae4c      	add	r6, sp, #304	; 0x130
 801aefe:	2401      	movs	r4, #1
 801af00:	42a5      	cmp	r5, r4
 801af02:	da30      	bge.n	801af66 <__kernel_rem_pio2+0x5c6>
 801af04:	9b02      	ldr	r3, [sp, #8]
 801af06:	b113      	cbz	r3, 801af0e <__kernel_rem_pio2+0x56e>
 801af08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af0c:	4619      	mov	r1, r3
 801af0e:	9b01      	ldr	r3, [sp, #4]
 801af10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801af14:	e00f      	b.n	801af36 <__kernel_rem_pio2+0x596>
 801af16:	ab9a      	add	r3, sp, #616	; 0x268
 801af18:	441c      	add	r4, r3
 801af1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801af1e:	2000      	movs	r0, #0
 801af20:	2100      	movs	r1, #0
 801af22:	2d00      	cmp	r5, #0
 801af24:	da10      	bge.n	801af48 <__kernel_rem_pio2+0x5a8>
 801af26:	9b02      	ldr	r3, [sp, #8]
 801af28:	b113      	cbz	r3, 801af30 <__kernel_rem_pio2+0x590>
 801af2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af2e:	4619      	mov	r1, r3
 801af30:	9b01      	ldr	r3, [sp, #4]
 801af32:	e9c3 0100 	strd	r0, r1, [r3]
 801af36:	9b06      	ldr	r3, [sp, #24]
 801af38:	f003 0007 	and.w	r0, r3, #7
 801af3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801af40:	ecbd 8b02 	vpop	{d8}
 801af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801af4c:	f7e5 f9ae 	bl	80002ac <__adddf3>
 801af50:	3d01      	subs	r5, #1
 801af52:	e7e6      	b.n	801af22 <__kernel_rem_pio2+0x582>
 801af54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801af58:	f7e5 f9a8 	bl	80002ac <__adddf3>
 801af5c:	3e01      	subs	r6, #1
 801af5e:	e7bc      	b.n	801aeda <__kernel_rem_pio2+0x53a>
 801af60:	4602      	mov	r2, r0
 801af62:	460b      	mov	r3, r1
 801af64:	e7c1      	b.n	801aeea <__kernel_rem_pio2+0x54a>
 801af66:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801af6a:	f7e5 f99f 	bl	80002ac <__adddf3>
 801af6e:	3401      	adds	r4, #1
 801af70:	e7c6      	b.n	801af00 <__kernel_rem_pio2+0x560>
 801af72:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801af76:	ed3a 7b02 	vldmdb	sl!, {d7}
 801af7a:	4640      	mov	r0, r8
 801af7c:	ec53 2b17 	vmov	r2, r3, d7
 801af80:	4649      	mov	r1, r9
 801af82:	ed8d 7b04 	vstr	d7, [sp, #16]
 801af86:	f7e5 f991 	bl	80002ac <__adddf3>
 801af8a:	4602      	mov	r2, r0
 801af8c:	460b      	mov	r3, r1
 801af8e:	4606      	mov	r6, r0
 801af90:	460f      	mov	r7, r1
 801af92:	4640      	mov	r0, r8
 801af94:	4649      	mov	r1, r9
 801af96:	f7e5 f987 	bl	80002a8 <__aeabi_dsub>
 801af9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801af9e:	f7e5 f985 	bl	80002ac <__adddf3>
 801afa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801afa6:	e9ca 0100 	strd	r0, r1, [sl]
 801afaa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801afae:	e770      	b.n	801ae92 <__kernel_rem_pio2+0x4f2>
 801afb0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801afb4:	ed3a 7b02 	vldmdb	sl!, {d7}
 801afb8:	4630      	mov	r0, r6
 801afba:	ec53 2b17 	vmov	r2, r3, d7
 801afbe:	4639      	mov	r1, r7
 801afc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 801afc4:	f7e5 f972 	bl	80002ac <__adddf3>
 801afc8:	4602      	mov	r2, r0
 801afca:	460b      	mov	r3, r1
 801afcc:	4680      	mov	r8, r0
 801afce:	4689      	mov	r9, r1
 801afd0:	4630      	mov	r0, r6
 801afd2:	4639      	mov	r1, r7
 801afd4:	f7e5 f968 	bl	80002a8 <__aeabi_dsub>
 801afd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801afdc:	f7e5 f966 	bl	80002ac <__adddf3>
 801afe0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801afe4:	e9ca 0100 	strd	r0, r1, [sl]
 801afe8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801afec:	e756      	b.n	801ae9c <__kernel_rem_pio2+0x4fc>
 801afee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801aff2:	f7e5 f95b 	bl	80002ac <__adddf3>
 801aff6:	3d01      	subs	r5, #1
 801aff8:	e756      	b.n	801aea8 <__kernel_rem_pio2+0x508>
 801affa:	9b01      	ldr	r3, [sp, #4]
 801affc:	9a01      	ldr	r2, [sp, #4]
 801affe:	601f      	str	r7, [r3, #0]
 801b000:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801b004:	605c      	str	r4, [r3, #4]
 801b006:	609d      	str	r5, [r3, #8]
 801b008:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b00c:	60d3      	str	r3, [r2, #12]
 801b00e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b012:	6110      	str	r0, [r2, #16]
 801b014:	6153      	str	r3, [r2, #20]
 801b016:	e78e      	b.n	801af36 <__kernel_rem_pio2+0x596>
 801b018:	41700000 	.word	0x41700000
 801b01c:	3e700000 	.word	0x3e700000

0801b020 <__kernel_sin>:
 801b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b024:	ec55 4b10 	vmov	r4, r5, d0
 801b028:	b085      	sub	sp, #20
 801b02a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b02e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801b032:	ed8d 1b00 	vstr	d1, [sp]
 801b036:	9002      	str	r0, [sp, #8]
 801b038:	da06      	bge.n	801b048 <__kernel_sin+0x28>
 801b03a:	ee10 0a10 	vmov	r0, s0
 801b03e:	4629      	mov	r1, r5
 801b040:	f7e5 fd9a 	bl	8000b78 <__aeabi_d2iz>
 801b044:	2800      	cmp	r0, #0
 801b046:	d051      	beq.n	801b0ec <__kernel_sin+0xcc>
 801b048:	4622      	mov	r2, r4
 801b04a:	462b      	mov	r3, r5
 801b04c:	4620      	mov	r0, r4
 801b04e:	4629      	mov	r1, r5
 801b050:	f7e5 fae2 	bl	8000618 <__aeabi_dmul>
 801b054:	4682      	mov	sl, r0
 801b056:	468b      	mov	fp, r1
 801b058:	4602      	mov	r2, r0
 801b05a:	460b      	mov	r3, r1
 801b05c:	4620      	mov	r0, r4
 801b05e:	4629      	mov	r1, r5
 801b060:	f7e5 fada 	bl	8000618 <__aeabi_dmul>
 801b064:	a341      	add	r3, pc, #260	; (adr r3, 801b16c <__kernel_sin+0x14c>)
 801b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06a:	4680      	mov	r8, r0
 801b06c:	4689      	mov	r9, r1
 801b06e:	4650      	mov	r0, sl
 801b070:	4659      	mov	r1, fp
 801b072:	f7e5 fad1 	bl	8000618 <__aeabi_dmul>
 801b076:	a33f      	add	r3, pc, #252	; (adr r3, 801b174 <__kernel_sin+0x154>)
 801b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b07c:	f7e5 f914 	bl	80002a8 <__aeabi_dsub>
 801b080:	4652      	mov	r2, sl
 801b082:	465b      	mov	r3, fp
 801b084:	f7e5 fac8 	bl	8000618 <__aeabi_dmul>
 801b088:	a33c      	add	r3, pc, #240	; (adr r3, 801b17c <__kernel_sin+0x15c>)
 801b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b08e:	f7e5 f90d 	bl	80002ac <__adddf3>
 801b092:	4652      	mov	r2, sl
 801b094:	465b      	mov	r3, fp
 801b096:	f7e5 fabf 	bl	8000618 <__aeabi_dmul>
 801b09a:	a33a      	add	r3, pc, #232	; (adr r3, 801b184 <__kernel_sin+0x164>)
 801b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0a0:	f7e5 f902 	bl	80002a8 <__aeabi_dsub>
 801b0a4:	4652      	mov	r2, sl
 801b0a6:	465b      	mov	r3, fp
 801b0a8:	f7e5 fab6 	bl	8000618 <__aeabi_dmul>
 801b0ac:	a337      	add	r3, pc, #220	; (adr r3, 801b18c <__kernel_sin+0x16c>)
 801b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0b2:	f7e5 f8fb 	bl	80002ac <__adddf3>
 801b0b6:	9b02      	ldr	r3, [sp, #8]
 801b0b8:	4606      	mov	r6, r0
 801b0ba:	460f      	mov	r7, r1
 801b0bc:	b9db      	cbnz	r3, 801b0f6 <__kernel_sin+0xd6>
 801b0be:	4602      	mov	r2, r0
 801b0c0:	460b      	mov	r3, r1
 801b0c2:	4650      	mov	r0, sl
 801b0c4:	4659      	mov	r1, fp
 801b0c6:	f7e5 faa7 	bl	8000618 <__aeabi_dmul>
 801b0ca:	a325      	add	r3, pc, #148	; (adr r3, 801b160 <__kernel_sin+0x140>)
 801b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0d0:	f7e5 f8ea 	bl	80002a8 <__aeabi_dsub>
 801b0d4:	4642      	mov	r2, r8
 801b0d6:	464b      	mov	r3, r9
 801b0d8:	f7e5 fa9e 	bl	8000618 <__aeabi_dmul>
 801b0dc:	4602      	mov	r2, r0
 801b0de:	460b      	mov	r3, r1
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	4629      	mov	r1, r5
 801b0e4:	f7e5 f8e2 	bl	80002ac <__adddf3>
 801b0e8:	4604      	mov	r4, r0
 801b0ea:	460d      	mov	r5, r1
 801b0ec:	ec45 4b10 	vmov	d0, r4, r5
 801b0f0:	b005      	add	sp, #20
 801b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0f6:	2200      	movs	r2, #0
 801b0f8:	4b1b      	ldr	r3, [pc, #108]	; (801b168 <__kernel_sin+0x148>)
 801b0fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b0fe:	f7e5 fa8b 	bl	8000618 <__aeabi_dmul>
 801b102:	4632      	mov	r2, r6
 801b104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b108:	463b      	mov	r3, r7
 801b10a:	4640      	mov	r0, r8
 801b10c:	4649      	mov	r1, r9
 801b10e:	f7e5 fa83 	bl	8000618 <__aeabi_dmul>
 801b112:	4602      	mov	r2, r0
 801b114:	460b      	mov	r3, r1
 801b116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b11a:	f7e5 f8c5 	bl	80002a8 <__aeabi_dsub>
 801b11e:	4652      	mov	r2, sl
 801b120:	465b      	mov	r3, fp
 801b122:	f7e5 fa79 	bl	8000618 <__aeabi_dmul>
 801b126:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b12a:	f7e5 f8bd 	bl	80002a8 <__aeabi_dsub>
 801b12e:	a30c      	add	r3, pc, #48	; (adr r3, 801b160 <__kernel_sin+0x140>)
 801b130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b134:	4606      	mov	r6, r0
 801b136:	460f      	mov	r7, r1
 801b138:	4640      	mov	r0, r8
 801b13a:	4649      	mov	r1, r9
 801b13c:	f7e5 fa6c 	bl	8000618 <__aeabi_dmul>
 801b140:	4602      	mov	r2, r0
 801b142:	460b      	mov	r3, r1
 801b144:	4630      	mov	r0, r6
 801b146:	4639      	mov	r1, r7
 801b148:	f7e5 f8b0 	bl	80002ac <__adddf3>
 801b14c:	4602      	mov	r2, r0
 801b14e:	460b      	mov	r3, r1
 801b150:	4620      	mov	r0, r4
 801b152:	4629      	mov	r1, r5
 801b154:	f7e5 f8a8 	bl	80002a8 <__aeabi_dsub>
 801b158:	e7c6      	b.n	801b0e8 <__kernel_sin+0xc8>
 801b15a:	bf00      	nop
 801b15c:	f3af 8000 	nop.w
 801b160:	55555549 	.word	0x55555549
 801b164:	3fc55555 	.word	0x3fc55555
 801b168:	3fe00000 	.word	0x3fe00000
 801b16c:	5acfd57c 	.word	0x5acfd57c
 801b170:	3de5d93a 	.word	0x3de5d93a
 801b174:	8a2b9ceb 	.word	0x8a2b9ceb
 801b178:	3e5ae5e6 	.word	0x3e5ae5e6
 801b17c:	57b1fe7d 	.word	0x57b1fe7d
 801b180:	3ec71de3 	.word	0x3ec71de3
 801b184:	19c161d5 	.word	0x19c161d5
 801b188:	3f2a01a0 	.word	0x3f2a01a0
 801b18c:	1110f8a6 	.word	0x1110f8a6
 801b190:	3f811111 	.word	0x3f811111
 801b194:	00000000 	.word	0x00000000

0801b198 <atan>:
 801b198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b19c:	ec55 4b10 	vmov	r4, r5, d0
 801b1a0:	4bc3      	ldr	r3, [pc, #780]	; (801b4b0 <atan+0x318>)
 801b1a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b1a6:	429e      	cmp	r6, r3
 801b1a8:	46ab      	mov	fp, r5
 801b1aa:	dd18      	ble.n	801b1de <atan+0x46>
 801b1ac:	4bc1      	ldr	r3, [pc, #772]	; (801b4b4 <atan+0x31c>)
 801b1ae:	429e      	cmp	r6, r3
 801b1b0:	dc01      	bgt.n	801b1b6 <atan+0x1e>
 801b1b2:	d109      	bne.n	801b1c8 <atan+0x30>
 801b1b4:	b144      	cbz	r4, 801b1c8 <atan+0x30>
 801b1b6:	4622      	mov	r2, r4
 801b1b8:	462b      	mov	r3, r5
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	4629      	mov	r1, r5
 801b1be:	f7e5 f875 	bl	80002ac <__adddf3>
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	460d      	mov	r5, r1
 801b1c6:	e006      	b.n	801b1d6 <atan+0x3e>
 801b1c8:	f1bb 0f00 	cmp.w	fp, #0
 801b1cc:	f340 8131 	ble.w	801b432 <atan+0x29a>
 801b1d0:	a59b      	add	r5, pc, #620	; (adr r5, 801b440 <atan+0x2a8>)
 801b1d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b1d6:	ec45 4b10 	vmov	d0, r4, r5
 801b1da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1de:	4bb6      	ldr	r3, [pc, #728]	; (801b4b8 <atan+0x320>)
 801b1e0:	429e      	cmp	r6, r3
 801b1e2:	dc14      	bgt.n	801b20e <atan+0x76>
 801b1e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b1e8:	429e      	cmp	r6, r3
 801b1ea:	dc0d      	bgt.n	801b208 <atan+0x70>
 801b1ec:	a396      	add	r3, pc, #600	; (adr r3, 801b448 <atan+0x2b0>)
 801b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f2:	ee10 0a10 	vmov	r0, s0
 801b1f6:	4629      	mov	r1, r5
 801b1f8:	f7e5 f858 	bl	80002ac <__adddf3>
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	4baf      	ldr	r3, [pc, #700]	; (801b4bc <atan+0x324>)
 801b200:	f7e5 fc9a 	bl	8000b38 <__aeabi_dcmpgt>
 801b204:	2800      	cmp	r0, #0
 801b206:	d1e6      	bne.n	801b1d6 <atan+0x3e>
 801b208:	f04f 3aff 	mov.w	sl, #4294967295
 801b20c:	e02b      	b.n	801b266 <atan+0xce>
 801b20e:	f000 f963 	bl	801b4d8 <fabs>
 801b212:	4bab      	ldr	r3, [pc, #684]	; (801b4c0 <atan+0x328>)
 801b214:	429e      	cmp	r6, r3
 801b216:	ec55 4b10 	vmov	r4, r5, d0
 801b21a:	f300 80bf 	bgt.w	801b39c <atan+0x204>
 801b21e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b222:	429e      	cmp	r6, r3
 801b224:	f300 80a0 	bgt.w	801b368 <atan+0x1d0>
 801b228:	ee10 2a10 	vmov	r2, s0
 801b22c:	ee10 0a10 	vmov	r0, s0
 801b230:	462b      	mov	r3, r5
 801b232:	4629      	mov	r1, r5
 801b234:	f7e5 f83a 	bl	80002ac <__adddf3>
 801b238:	2200      	movs	r2, #0
 801b23a:	4ba0      	ldr	r3, [pc, #640]	; (801b4bc <atan+0x324>)
 801b23c:	f7e5 f834 	bl	80002a8 <__aeabi_dsub>
 801b240:	2200      	movs	r2, #0
 801b242:	4606      	mov	r6, r0
 801b244:	460f      	mov	r7, r1
 801b246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b24a:	4620      	mov	r0, r4
 801b24c:	4629      	mov	r1, r5
 801b24e:	f7e5 f82d 	bl	80002ac <__adddf3>
 801b252:	4602      	mov	r2, r0
 801b254:	460b      	mov	r3, r1
 801b256:	4630      	mov	r0, r6
 801b258:	4639      	mov	r1, r7
 801b25a:	f7e5 fb07 	bl	800086c <__aeabi_ddiv>
 801b25e:	f04f 0a00 	mov.w	sl, #0
 801b262:	4604      	mov	r4, r0
 801b264:	460d      	mov	r5, r1
 801b266:	4622      	mov	r2, r4
 801b268:	462b      	mov	r3, r5
 801b26a:	4620      	mov	r0, r4
 801b26c:	4629      	mov	r1, r5
 801b26e:	f7e5 f9d3 	bl	8000618 <__aeabi_dmul>
 801b272:	4602      	mov	r2, r0
 801b274:	460b      	mov	r3, r1
 801b276:	4680      	mov	r8, r0
 801b278:	4689      	mov	r9, r1
 801b27a:	f7e5 f9cd 	bl	8000618 <__aeabi_dmul>
 801b27e:	a374      	add	r3, pc, #464	; (adr r3, 801b450 <atan+0x2b8>)
 801b280:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b284:	4606      	mov	r6, r0
 801b286:	460f      	mov	r7, r1
 801b288:	f7e5 f9c6 	bl	8000618 <__aeabi_dmul>
 801b28c:	a372      	add	r3, pc, #456	; (adr r3, 801b458 <atan+0x2c0>)
 801b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b292:	f7e5 f80b 	bl	80002ac <__adddf3>
 801b296:	4632      	mov	r2, r6
 801b298:	463b      	mov	r3, r7
 801b29a:	f7e5 f9bd 	bl	8000618 <__aeabi_dmul>
 801b29e:	a370      	add	r3, pc, #448	; (adr r3, 801b460 <atan+0x2c8>)
 801b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2a4:	f7e5 f802 	bl	80002ac <__adddf3>
 801b2a8:	4632      	mov	r2, r6
 801b2aa:	463b      	mov	r3, r7
 801b2ac:	f7e5 f9b4 	bl	8000618 <__aeabi_dmul>
 801b2b0:	a36d      	add	r3, pc, #436	; (adr r3, 801b468 <atan+0x2d0>)
 801b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b6:	f7e4 fff9 	bl	80002ac <__adddf3>
 801b2ba:	4632      	mov	r2, r6
 801b2bc:	463b      	mov	r3, r7
 801b2be:	f7e5 f9ab 	bl	8000618 <__aeabi_dmul>
 801b2c2:	a36b      	add	r3, pc, #428	; (adr r3, 801b470 <atan+0x2d8>)
 801b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c8:	f7e4 fff0 	bl	80002ac <__adddf3>
 801b2cc:	4632      	mov	r2, r6
 801b2ce:	463b      	mov	r3, r7
 801b2d0:	f7e5 f9a2 	bl	8000618 <__aeabi_dmul>
 801b2d4:	a368      	add	r3, pc, #416	; (adr r3, 801b478 <atan+0x2e0>)
 801b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2da:	f7e4 ffe7 	bl	80002ac <__adddf3>
 801b2de:	4642      	mov	r2, r8
 801b2e0:	464b      	mov	r3, r9
 801b2e2:	f7e5 f999 	bl	8000618 <__aeabi_dmul>
 801b2e6:	a366      	add	r3, pc, #408	; (adr r3, 801b480 <atan+0x2e8>)
 801b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ec:	4680      	mov	r8, r0
 801b2ee:	4689      	mov	r9, r1
 801b2f0:	4630      	mov	r0, r6
 801b2f2:	4639      	mov	r1, r7
 801b2f4:	f7e5 f990 	bl	8000618 <__aeabi_dmul>
 801b2f8:	a363      	add	r3, pc, #396	; (adr r3, 801b488 <atan+0x2f0>)
 801b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2fe:	f7e4 ffd3 	bl	80002a8 <__aeabi_dsub>
 801b302:	4632      	mov	r2, r6
 801b304:	463b      	mov	r3, r7
 801b306:	f7e5 f987 	bl	8000618 <__aeabi_dmul>
 801b30a:	a361      	add	r3, pc, #388	; (adr r3, 801b490 <atan+0x2f8>)
 801b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b310:	f7e4 ffca 	bl	80002a8 <__aeabi_dsub>
 801b314:	4632      	mov	r2, r6
 801b316:	463b      	mov	r3, r7
 801b318:	f7e5 f97e 	bl	8000618 <__aeabi_dmul>
 801b31c:	a35e      	add	r3, pc, #376	; (adr r3, 801b498 <atan+0x300>)
 801b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b322:	f7e4 ffc1 	bl	80002a8 <__aeabi_dsub>
 801b326:	4632      	mov	r2, r6
 801b328:	463b      	mov	r3, r7
 801b32a:	f7e5 f975 	bl	8000618 <__aeabi_dmul>
 801b32e:	a35c      	add	r3, pc, #368	; (adr r3, 801b4a0 <atan+0x308>)
 801b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b334:	f7e4 ffb8 	bl	80002a8 <__aeabi_dsub>
 801b338:	4632      	mov	r2, r6
 801b33a:	463b      	mov	r3, r7
 801b33c:	f7e5 f96c 	bl	8000618 <__aeabi_dmul>
 801b340:	4602      	mov	r2, r0
 801b342:	460b      	mov	r3, r1
 801b344:	4640      	mov	r0, r8
 801b346:	4649      	mov	r1, r9
 801b348:	f7e4 ffb0 	bl	80002ac <__adddf3>
 801b34c:	4622      	mov	r2, r4
 801b34e:	462b      	mov	r3, r5
 801b350:	f7e5 f962 	bl	8000618 <__aeabi_dmul>
 801b354:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b358:	4602      	mov	r2, r0
 801b35a:	460b      	mov	r3, r1
 801b35c:	d14b      	bne.n	801b3f6 <atan+0x25e>
 801b35e:	4620      	mov	r0, r4
 801b360:	4629      	mov	r1, r5
 801b362:	f7e4 ffa1 	bl	80002a8 <__aeabi_dsub>
 801b366:	e72c      	b.n	801b1c2 <atan+0x2a>
 801b368:	ee10 0a10 	vmov	r0, s0
 801b36c:	2200      	movs	r2, #0
 801b36e:	4b53      	ldr	r3, [pc, #332]	; (801b4bc <atan+0x324>)
 801b370:	4629      	mov	r1, r5
 801b372:	f7e4 ff99 	bl	80002a8 <__aeabi_dsub>
 801b376:	2200      	movs	r2, #0
 801b378:	4606      	mov	r6, r0
 801b37a:	460f      	mov	r7, r1
 801b37c:	4b4f      	ldr	r3, [pc, #316]	; (801b4bc <atan+0x324>)
 801b37e:	4620      	mov	r0, r4
 801b380:	4629      	mov	r1, r5
 801b382:	f7e4 ff93 	bl	80002ac <__adddf3>
 801b386:	4602      	mov	r2, r0
 801b388:	460b      	mov	r3, r1
 801b38a:	4630      	mov	r0, r6
 801b38c:	4639      	mov	r1, r7
 801b38e:	f7e5 fa6d 	bl	800086c <__aeabi_ddiv>
 801b392:	f04f 0a01 	mov.w	sl, #1
 801b396:	4604      	mov	r4, r0
 801b398:	460d      	mov	r5, r1
 801b39a:	e764      	b.n	801b266 <atan+0xce>
 801b39c:	4b49      	ldr	r3, [pc, #292]	; (801b4c4 <atan+0x32c>)
 801b39e:	429e      	cmp	r6, r3
 801b3a0:	dc1d      	bgt.n	801b3de <atan+0x246>
 801b3a2:	ee10 0a10 	vmov	r0, s0
 801b3a6:	2200      	movs	r2, #0
 801b3a8:	4b47      	ldr	r3, [pc, #284]	; (801b4c8 <atan+0x330>)
 801b3aa:	4629      	mov	r1, r5
 801b3ac:	f7e4 ff7c 	bl	80002a8 <__aeabi_dsub>
 801b3b0:	2200      	movs	r2, #0
 801b3b2:	4606      	mov	r6, r0
 801b3b4:	460f      	mov	r7, r1
 801b3b6:	4b44      	ldr	r3, [pc, #272]	; (801b4c8 <atan+0x330>)
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	4629      	mov	r1, r5
 801b3bc:	f7e5 f92c 	bl	8000618 <__aeabi_dmul>
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	4b3e      	ldr	r3, [pc, #248]	; (801b4bc <atan+0x324>)
 801b3c4:	f7e4 ff72 	bl	80002ac <__adddf3>
 801b3c8:	4602      	mov	r2, r0
 801b3ca:	460b      	mov	r3, r1
 801b3cc:	4630      	mov	r0, r6
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	f7e5 fa4c 	bl	800086c <__aeabi_ddiv>
 801b3d4:	f04f 0a02 	mov.w	sl, #2
 801b3d8:	4604      	mov	r4, r0
 801b3da:	460d      	mov	r5, r1
 801b3dc:	e743      	b.n	801b266 <atan+0xce>
 801b3de:	462b      	mov	r3, r5
 801b3e0:	ee10 2a10 	vmov	r2, s0
 801b3e4:	2000      	movs	r0, #0
 801b3e6:	4939      	ldr	r1, [pc, #228]	; (801b4cc <atan+0x334>)
 801b3e8:	f7e5 fa40 	bl	800086c <__aeabi_ddiv>
 801b3ec:	f04f 0a03 	mov.w	sl, #3
 801b3f0:	4604      	mov	r4, r0
 801b3f2:	460d      	mov	r5, r1
 801b3f4:	e737      	b.n	801b266 <atan+0xce>
 801b3f6:	4b36      	ldr	r3, [pc, #216]	; (801b4d0 <atan+0x338>)
 801b3f8:	4e36      	ldr	r6, [pc, #216]	; (801b4d4 <atan+0x33c>)
 801b3fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b3fe:	4456      	add	r6, sl
 801b400:	449a      	add	sl, r3
 801b402:	e9da 2300 	ldrd	r2, r3, [sl]
 801b406:	f7e4 ff4f 	bl	80002a8 <__aeabi_dsub>
 801b40a:	4622      	mov	r2, r4
 801b40c:	462b      	mov	r3, r5
 801b40e:	f7e4 ff4b 	bl	80002a8 <__aeabi_dsub>
 801b412:	4602      	mov	r2, r0
 801b414:	460b      	mov	r3, r1
 801b416:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b41a:	f7e4 ff45 	bl	80002a8 <__aeabi_dsub>
 801b41e:	f1bb 0f00 	cmp.w	fp, #0
 801b422:	4604      	mov	r4, r0
 801b424:	460d      	mov	r5, r1
 801b426:	f6bf aed6 	bge.w	801b1d6 <atan+0x3e>
 801b42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b42e:	461d      	mov	r5, r3
 801b430:	e6d1      	b.n	801b1d6 <atan+0x3e>
 801b432:	a51d      	add	r5, pc, #116	; (adr r5, 801b4a8 <atan+0x310>)
 801b434:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b438:	e6cd      	b.n	801b1d6 <atan+0x3e>
 801b43a:	bf00      	nop
 801b43c:	f3af 8000 	nop.w
 801b440:	54442d18 	.word	0x54442d18
 801b444:	3ff921fb 	.word	0x3ff921fb
 801b448:	8800759c 	.word	0x8800759c
 801b44c:	7e37e43c 	.word	0x7e37e43c
 801b450:	e322da11 	.word	0xe322da11
 801b454:	3f90ad3a 	.word	0x3f90ad3a
 801b458:	24760deb 	.word	0x24760deb
 801b45c:	3fa97b4b 	.word	0x3fa97b4b
 801b460:	a0d03d51 	.word	0xa0d03d51
 801b464:	3fb10d66 	.word	0x3fb10d66
 801b468:	c54c206e 	.word	0xc54c206e
 801b46c:	3fb745cd 	.word	0x3fb745cd
 801b470:	920083ff 	.word	0x920083ff
 801b474:	3fc24924 	.word	0x3fc24924
 801b478:	5555550d 	.word	0x5555550d
 801b47c:	3fd55555 	.word	0x3fd55555
 801b480:	2c6a6c2f 	.word	0x2c6a6c2f
 801b484:	bfa2b444 	.word	0xbfa2b444
 801b488:	52defd9a 	.word	0x52defd9a
 801b48c:	3fadde2d 	.word	0x3fadde2d
 801b490:	af749a6d 	.word	0xaf749a6d
 801b494:	3fb3b0f2 	.word	0x3fb3b0f2
 801b498:	fe231671 	.word	0xfe231671
 801b49c:	3fbc71c6 	.word	0x3fbc71c6
 801b4a0:	9998ebc4 	.word	0x9998ebc4
 801b4a4:	3fc99999 	.word	0x3fc99999
 801b4a8:	54442d18 	.word	0x54442d18
 801b4ac:	bff921fb 	.word	0xbff921fb
 801b4b0:	440fffff 	.word	0x440fffff
 801b4b4:	7ff00000 	.word	0x7ff00000
 801b4b8:	3fdbffff 	.word	0x3fdbffff
 801b4bc:	3ff00000 	.word	0x3ff00000
 801b4c0:	3ff2ffff 	.word	0x3ff2ffff
 801b4c4:	40037fff 	.word	0x40037fff
 801b4c8:	3ff80000 	.word	0x3ff80000
 801b4cc:	bff00000 	.word	0xbff00000
 801b4d0:	0801c300 	.word	0x0801c300
 801b4d4:	0801c2e0 	.word	0x0801c2e0

0801b4d8 <fabs>:
 801b4d8:	ec51 0b10 	vmov	r0, r1, d0
 801b4dc:	ee10 2a10 	vmov	r2, s0
 801b4e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b4e4:	ec43 2b10 	vmov	d0, r2, r3
 801b4e8:	4770      	bx	lr

0801b4ea <finite>:
 801b4ea:	ee10 3a90 	vmov	r3, s1
 801b4ee:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b4f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b4f6:	0fc0      	lsrs	r0, r0, #31
 801b4f8:	4770      	bx	lr
 801b4fa:	0000      	movs	r0, r0
 801b4fc:	0000      	movs	r0, r0
	...

0801b500 <floor>:
 801b500:	ec51 0b10 	vmov	r0, r1, d0
 801b504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b508:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b50c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b510:	2e13      	cmp	r6, #19
 801b512:	460c      	mov	r4, r1
 801b514:	ee10 5a10 	vmov	r5, s0
 801b518:	4680      	mov	r8, r0
 801b51a:	dc34      	bgt.n	801b586 <floor+0x86>
 801b51c:	2e00      	cmp	r6, #0
 801b51e:	da16      	bge.n	801b54e <floor+0x4e>
 801b520:	a335      	add	r3, pc, #212	; (adr r3, 801b5f8 <floor+0xf8>)
 801b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b526:	f7e4 fec1 	bl	80002ac <__adddf3>
 801b52a:	2200      	movs	r2, #0
 801b52c:	2300      	movs	r3, #0
 801b52e:	f7e5 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 801b532:	b148      	cbz	r0, 801b548 <floor+0x48>
 801b534:	2c00      	cmp	r4, #0
 801b536:	da59      	bge.n	801b5ec <floor+0xec>
 801b538:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b53c:	4a30      	ldr	r2, [pc, #192]	; (801b600 <floor+0x100>)
 801b53e:	432b      	orrs	r3, r5
 801b540:	2500      	movs	r5, #0
 801b542:	42ab      	cmp	r3, r5
 801b544:	bf18      	it	ne
 801b546:	4614      	movne	r4, r2
 801b548:	4621      	mov	r1, r4
 801b54a:	4628      	mov	r0, r5
 801b54c:	e025      	b.n	801b59a <floor+0x9a>
 801b54e:	4f2d      	ldr	r7, [pc, #180]	; (801b604 <floor+0x104>)
 801b550:	4137      	asrs	r7, r6
 801b552:	ea01 0307 	and.w	r3, r1, r7
 801b556:	4303      	orrs	r3, r0
 801b558:	d01f      	beq.n	801b59a <floor+0x9a>
 801b55a:	a327      	add	r3, pc, #156	; (adr r3, 801b5f8 <floor+0xf8>)
 801b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b560:	f7e4 fea4 	bl	80002ac <__adddf3>
 801b564:	2200      	movs	r2, #0
 801b566:	2300      	movs	r3, #0
 801b568:	f7e5 fae6 	bl	8000b38 <__aeabi_dcmpgt>
 801b56c:	2800      	cmp	r0, #0
 801b56e:	d0eb      	beq.n	801b548 <floor+0x48>
 801b570:	2c00      	cmp	r4, #0
 801b572:	bfbe      	ittt	lt
 801b574:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b578:	fa43 f606 	asrlt.w	r6, r3, r6
 801b57c:	19a4      	addlt	r4, r4, r6
 801b57e:	ea24 0407 	bic.w	r4, r4, r7
 801b582:	2500      	movs	r5, #0
 801b584:	e7e0      	b.n	801b548 <floor+0x48>
 801b586:	2e33      	cmp	r6, #51	; 0x33
 801b588:	dd0b      	ble.n	801b5a2 <floor+0xa2>
 801b58a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b58e:	d104      	bne.n	801b59a <floor+0x9a>
 801b590:	ee10 2a10 	vmov	r2, s0
 801b594:	460b      	mov	r3, r1
 801b596:	f7e4 fe89 	bl	80002ac <__adddf3>
 801b59a:	ec41 0b10 	vmov	d0, r0, r1
 801b59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b5a6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5aa:	fa23 f707 	lsr.w	r7, r3, r7
 801b5ae:	4207      	tst	r7, r0
 801b5b0:	d0f3      	beq.n	801b59a <floor+0x9a>
 801b5b2:	a311      	add	r3, pc, #68	; (adr r3, 801b5f8 <floor+0xf8>)
 801b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b8:	f7e4 fe78 	bl	80002ac <__adddf3>
 801b5bc:	2200      	movs	r2, #0
 801b5be:	2300      	movs	r3, #0
 801b5c0:	f7e5 faba 	bl	8000b38 <__aeabi_dcmpgt>
 801b5c4:	2800      	cmp	r0, #0
 801b5c6:	d0bf      	beq.n	801b548 <floor+0x48>
 801b5c8:	2c00      	cmp	r4, #0
 801b5ca:	da02      	bge.n	801b5d2 <floor+0xd2>
 801b5cc:	2e14      	cmp	r6, #20
 801b5ce:	d103      	bne.n	801b5d8 <floor+0xd8>
 801b5d0:	3401      	adds	r4, #1
 801b5d2:	ea25 0507 	bic.w	r5, r5, r7
 801b5d6:	e7b7      	b.n	801b548 <floor+0x48>
 801b5d8:	2301      	movs	r3, #1
 801b5da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b5de:	fa03 f606 	lsl.w	r6, r3, r6
 801b5e2:	4435      	add	r5, r6
 801b5e4:	4545      	cmp	r5, r8
 801b5e6:	bf38      	it	cc
 801b5e8:	18e4      	addcc	r4, r4, r3
 801b5ea:	e7f2      	b.n	801b5d2 <floor+0xd2>
 801b5ec:	2500      	movs	r5, #0
 801b5ee:	462c      	mov	r4, r5
 801b5f0:	e7aa      	b.n	801b548 <floor+0x48>
 801b5f2:	bf00      	nop
 801b5f4:	f3af 8000 	nop.w
 801b5f8:	8800759c 	.word	0x8800759c
 801b5fc:	7e37e43c 	.word	0x7e37e43c
 801b600:	bff00000 	.word	0xbff00000
 801b604:	000fffff 	.word	0x000fffff

0801b608 <matherr>:
 801b608:	2000      	movs	r0, #0
 801b60a:	4770      	bx	lr
 801b60c:	0000      	movs	r0, r0
	...

0801b610 <nan>:
 801b610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b618 <nan+0x8>
 801b614:	4770      	bx	lr
 801b616:	bf00      	nop
 801b618:	00000000 	.word	0x00000000
 801b61c:	7ff80000 	.word	0x7ff80000

0801b620 <rint>:
 801b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b622:	ec51 0b10 	vmov	r0, r1, d0
 801b626:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b62a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b62e:	2e13      	cmp	r6, #19
 801b630:	460b      	mov	r3, r1
 801b632:	ee10 4a10 	vmov	r4, s0
 801b636:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b63a:	dc56      	bgt.n	801b6ea <rint+0xca>
 801b63c:	2e00      	cmp	r6, #0
 801b63e:	da2b      	bge.n	801b698 <rint+0x78>
 801b640:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b644:	4302      	orrs	r2, r0
 801b646:	d023      	beq.n	801b690 <rint+0x70>
 801b648:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b64c:	4302      	orrs	r2, r0
 801b64e:	4254      	negs	r4, r2
 801b650:	4314      	orrs	r4, r2
 801b652:	0c4b      	lsrs	r3, r1, #17
 801b654:	0b24      	lsrs	r4, r4, #12
 801b656:	045b      	lsls	r3, r3, #17
 801b658:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b65c:	ea44 0103 	orr.w	r1, r4, r3
 801b660:	460b      	mov	r3, r1
 801b662:	492f      	ldr	r1, [pc, #188]	; (801b720 <rint+0x100>)
 801b664:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b668:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b66c:	4602      	mov	r2, r0
 801b66e:	4639      	mov	r1, r7
 801b670:	4630      	mov	r0, r6
 801b672:	f7e4 fe1b 	bl	80002ac <__adddf3>
 801b676:	e9cd 0100 	strd	r0, r1, [sp]
 801b67a:	463b      	mov	r3, r7
 801b67c:	4632      	mov	r2, r6
 801b67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b682:	f7e4 fe11 	bl	80002a8 <__aeabi_dsub>
 801b686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b68a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b68e:	4639      	mov	r1, r7
 801b690:	ec41 0b10 	vmov	d0, r0, r1
 801b694:	b003      	add	sp, #12
 801b696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b698:	4a22      	ldr	r2, [pc, #136]	; (801b724 <rint+0x104>)
 801b69a:	4132      	asrs	r2, r6
 801b69c:	ea01 0702 	and.w	r7, r1, r2
 801b6a0:	4307      	orrs	r7, r0
 801b6a2:	d0f5      	beq.n	801b690 <rint+0x70>
 801b6a4:	0852      	lsrs	r2, r2, #1
 801b6a6:	4011      	ands	r1, r2
 801b6a8:	430c      	orrs	r4, r1
 801b6aa:	d00b      	beq.n	801b6c4 <rint+0xa4>
 801b6ac:	ea23 0202 	bic.w	r2, r3, r2
 801b6b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b6b4:	2e13      	cmp	r6, #19
 801b6b6:	fa43 f306 	asr.w	r3, r3, r6
 801b6ba:	bf0c      	ite	eq
 801b6bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b6c0:	2400      	movne	r4, #0
 801b6c2:	4313      	orrs	r3, r2
 801b6c4:	4916      	ldr	r1, [pc, #88]	; (801b720 <rint+0x100>)
 801b6c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	4629      	mov	r1, r5
 801b6d4:	f7e4 fdea 	bl	80002ac <__adddf3>
 801b6d8:	e9cd 0100 	strd	r0, r1, [sp]
 801b6dc:	4622      	mov	r2, r4
 801b6de:	462b      	mov	r3, r5
 801b6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b6e4:	f7e4 fde0 	bl	80002a8 <__aeabi_dsub>
 801b6e8:	e7d2      	b.n	801b690 <rint+0x70>
 801b6ea:	2e33      	cmp	r6, #51	; 0x33
 801b6ec:	dd07      	ble.n	801b6fe <rint+0xde>
 801b6ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b6f2:	d1cd      	bne.n	801b690 <rint+0x70>
 801b6f4:	ee10 2a10 	vmov	r2, s0
 801b6f8:	f7e4 fdd8 	bl	80002ac <__adddf3>
 801b6fc:	e7c8      	b.n	801b690 <rint+0x70>
 801b6fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b702:	f04f 32ff 	mov.w	r2, #4294967295
 801b706:	40f2      	lsrs	r2, r6
 801b708:	4210      	tst	r0, r2
 801b70a:	d0c1      	beq.n	801b690 <rint+0x70>
 801b70c:	0852      	lsrs	r2, r2, #1
 801b70e:	4210      	tst	r0, r2
 801b710:	bf1f      	itttt	ne
 801b712:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b716:	ea20 0202 	bicne.w	r2, r0, r2
 801b71a:	4134      	asrne	r4, r6
 801b71c:	4314      	orrne	r4, r2
 801b71e:	e7d1      	b.n	801b6c4 <rint+0xa4>
 801b720:	0801c320 	.word	0x0801c320
 801b724:	000fffff 	.word	0x000fffff

0801b728 <scalbn>:
 801b728:	b570      	push	{r4, r5, r6, lr}
 801b72a:	ec55 4b10 	vmov	r4, r5, d0
 801b72e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b732:	4606      	mov	r6, r0
 801b734:	462b      	mov	r3, r5
 801b736:	b9aa      	cbnz	r2, 801b764 <scalbn+0x3c>
 801b738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b73c:	4323      	orrs	r3, r4
 801b73e:	d03b      	beq.n	801b7b8 <scalbn+0x90>
 801b740:	4b31      	ldr	r3, [pc, #196]	; (801b808 <scalbn+0xe0>)
 801b742:	4629      	mov	r1, r5
 801b744:	2200      	movs	r2, #0
 801b746:	ee10 0a10 	vmov	r0, s0
 801b74a:	f7e4 ff65 	bl	8000618 <__aeabi_dmul>
 801b74e:	4b2f      	ldr	r3, [pc, #188]	; (801b80c <scalbn+0xe4>)
 801b750:	429e      	cmp	r6, r3
 801b752:	4604      	mov	r4, r0
 801b754:	460d      	mov	r5, r1
 801b756:	da12      	bge.n	801b77e <scalbn+0x56>
 801b758:	a327      	add	r3, pc, #156	; (adr r3, 801b7f8 <scalbn+0xd0>)
 801b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75e:	f7e4 ff5b 	bl	8000618 <__aeabi_dmul>
 801b762:	e009      	b.n	801b778 <scalbn+0x50>
 801b764:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b768:	428a      	cmp	r2, r1
 801b76a:	d10c      	bne.n	801b786 <scalbn+0x5e>
 801b76c:	ee10 2a10 	vmov	r2, s0
 801b770:	4620      	mov	r0, r4
 801b772:	4629      	mov	r1, r5
 801b774:	f7e4 fd9a 	bl	80002ac <__adddf3>
 801b778:	4604      	mov	r4, r0
 801b77a:	460d      	mov	r5, r1
 801b77c:	e01c      	b.n	801b7b8 <scalbn+0x90>
 801b77e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b782:	460b      	mov	r3, r1
 801b784:	3a36      	subs	r2, #54	; 0x36
 801b786:	4432      	add	r2, r6
 801b788:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b78c:	428a      	cmp	r2, r1
 801b78e:	dd0b      	ble.n	801b7a8 <scalbn+0x80>
 801b790:	ec45 4b11 	vmov	d1, r4, r5
 801b794:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b800 <scalbn+0xd8>
 801b798:	f000 f83c 	bl	801b814 <copysign>
 801b79c:	a318      	add	r3, pc, #96	; (adr r3, 801b800 <scalbn+0xd8>)
 801b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a2:	ec51 0b10 	vmov	r0, r1, d0
 801b7a6:	e7da      	b.n	801b75e <scalbn+0x36>
 801b7a8:	2a00      	cmp	r2, #0
 801b7aa:	dd08      	ble.n	801b7be <scalbn+0x96>
 801b7ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b7b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b7b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b7b8:	ec45 4b10 	vmov	d0, r4, r5
 801b7bc:	bd70      	pop	{r4, r5, r6, pc}
 801b7be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b7c2:	da0d      	bge.n	801b7e0 <scalbn+0xb8>
 801b7c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b7c8:	429e      	cmp	r6, r3
 801b7ca:	ec45 4b11 	vmov	d1, r4, r5
 801b7ce:	dce1      	bgt.n	801b794 <scalbn+0x6c>
 801b7d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b7f8 <scalbn+0xd0>
 801b7d4:	f000 f81e 	bl	801b814 <copysign>
 801b7d8:	a307      	add	r3, pc, #28	; (adr r3, 801b7f8 <scalbn+0xd0>)
 801b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7de:	e7e0      	b.n	801b7a2 <scalbn+0x7a>
 801b7e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b7e4:	3236      	adds	r2, #54	; 0x36
 801b7e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b7ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b7ee:	4620      	mov	r0, r4
 801b7f0:	4629      	mov	r1, r5
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	4b06      	ldr	r3, [pc, #24]	; (801b810 <scalbn+0xe8>)
 801b7f6:	e7b2      	b.n	801b75e <scalbn+0x36>
 801b7f8:	c2f8f359 	.word	0xc2f8f359
 801b7fc:	01a56e1f 	.word	0x01a56e1f
 801b800:	8800759c 	.word	0x8800759c
 801b804:	7e37e43c 	.word	0x7e37e43c
 801b808:	43500000 	.word	0x43500000
 801b80c:	ffff3cb0 	.word	0xffff3cb0
 801b810:	3c900000 	.word	0x3c900000

0801b814 <copysign>:
 801b814:	ec51 0b10 	vmov	r0, r1, d0
 801b818:	ee11 0a90 	vmov	r0, s3
 801b81c:	ee10 2a10 	vmov	r2, s0
 801b820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b824:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b828:	ea41 0300 	orr.w	r3, r1, r0
 801b82c:	ec43 2b10 	vmov	d0, r2, r3
 801b830:	4770      	bx	lr
	...

0801b834 <_init>:
 801b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b836:	bf00      	nop
 801b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b83a:	bc08      	pop	{r3}
 801b83c:	469e      	mov	lr, r3
 801b83e:	4770      	bx	lr

0801b840 <_fini>:
 801b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b842:	bf00      	nop
 801b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b846:	bc08      	pop	{r3}
 801b848:	469e      	mov	lr, r3
 801b84a:	4770      	bx	lr
