
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d8fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  0801da90  0801da90  0002da90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e808  0801e808  000303a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e808  0801e808  0002e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e810  0801e810  000303a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e810  0801e810  0002e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e814  0801e814  0002e814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0801e818  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a20c  200003a8  0801ebc0  000303a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a5b4  0801ebc0  0003a5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ab98  00000000  00000000  000303d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c36  00000000  00000000  0006af70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002620  00000000  00000000  00071ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002348  00000000  00000000  000741c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bcc8  00000000  00000000  00076510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000268fd  00000000  00000000  000a21d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7aa7  00000000  00000000  000c8ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a057c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b530  00000000  00000000  001a05f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001abb28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003a8 	.word	0x200003a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801da74 	.word	0x0801da74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003ac 	.word	0x200003ac
 80001cc:	0801da74 	.word	0x0801da74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 800105c:	b40f      	push	{r0, r1, r2, r3}
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
	if (usbPresent)
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <println+0xb4>)
 8001066:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800106a:	2b03      	cmp	r3, #3
 800106c:	d147      	bne.n	80010fe <println+0xa2>
	{
		writePin(LEDD, HIGH);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <println+0xb8>)
 8001076:	f006 fbcd 	bl	8007814 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	4824      	ldr	r0, [pc, #144]	; (8001118 <println+0xbc>)
 8001086:	f017 fecd 	bl	8018e24 <vsiprintf>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <println+0xc0>)
 8001090:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <println+0xc0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a20      	ldr	r2, [pc, #128]	; (8001118 <println+0xbc>)
 8001098:	210d      	movs	r1, #13
 800109a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <println+0xc0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <println+0xbc>)
 80010a4:	210a      	movs	r1, #10
 80010a6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <println+0xc0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <println+0xbc>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <println+0xc0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3303      	adds	r3, #3
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <println+0xc0>)
 80010bc:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 80010be:	f7ff ffc3 	bl	8001048 <micros>
 80010c2:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <println+0xc0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3346      	adds	r3, #70	; 0x46
 80010d2:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010d4:	e001      	b.n	80010da <println+0x7e>
		{
			if (micros() - printStart > timeout && false)
 80010d6:	f7ff ffb7 	bl	8001048 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <println+0xc0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <println+0xbc>)
 80010e4:	f015 fb92 	bl	801680c <CDC_Transmit_FS>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d0f3      	beq.n	80010d6 <println+0x7a>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <println+0xb8>)
 80010f6:	f006 fb8d 	bl	8007814 <HAL_GPIO_WritePin>
		return true;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <println+0xa4>
	}
	return false;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800110a:	b004      	add	sp, #16
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000e3c 	.word	0x20000e3c
 8001114:	40020400 	.word	0x40020400
 8001118:	200003cc 	.word	0x200003cc
 800111c:	200003c8 	.word	0x200003c8

08001120 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a01 	vstr	s0, [r7, #4]
 800112a:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <setMotors+0x90>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d037      	beq.n	80011a6 <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <setMotors+0x94>)
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <setMotors+0x94>)
 8001154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <setMotors+0x94>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800116a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800116e:	edd7 7a00 	vldr	s15, [r7]
 8001172:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <setMotors+0x94>)
 800117c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001180:	ee17 2a90 	vmov	r2, s15
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <setMotors+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <setMotors+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2104      	movs	r1, #4
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <setMotors+0x9c>)
 8001198:	f006 fb3c 	bl	8007814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <setMotors+0x9c>)
 80011a2:	f006 fb37 	bl	8007814 <HAL_GPIO_WritePin>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200003c4 	.word	0x200003c4
 80011b4:	40000c00 	.word	0x40000c00
 80011b8:	40000800 	.word	0x40000800
 80011bc:	40020000 	.word	0x40020000

080011c0 <haltMotors>:

void haltMotors(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <haltMotors+0x24>)
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <haltMotors+0x24>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <haltMotors+0x24>)
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <haltMotors+0x24>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <haltMotors+0x28>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40000c00 	.word	0x40000c00
 80011e8:	40000800 	.word	0x40000800

080011ec <enableMotors>:

void enableMotors(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <enableMotors+0x70>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02b      	beq.n	8001256 <enableMotors+0x6a>
	{
		haltMotors();
 80011fe:	f7ff ffdf 	bl	80011c0 <haltMotors>
		motorsEnabled = true;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <enableMotors+0x70>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <enableMotors+0x74>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <enableMotors+0x78>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <enableMotors+0x74>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	2101      	movs	r1, #1
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <enableMotors+0x7c>)
 800121e:	f006 faf9 	bl	8007814 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <enableMotors+0x78>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	2104      	movs	r1, #4
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <enableMotors+0x7c>)
 800122c:	f006 faf2 	bl	8007814 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8001230:	f014 fc32 	bl	8015a98 <Get_TIM5_Instance>
 8001234:	4603      	mov	r3, r0
 8001236:	2104      	movs	r1, #4
 8001238:	4618      	mov	r0, r3
 800123a:	f00b fa1d 	bl	800c678 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 800123e:	f014 fc2b 	bl	8015a98 <Get_TIM5_Instance>
 8001242:	4603      	mov	r3, r0
 8001244:	210c      	movs	r1, #12
 8001246:	4618      	mov	r0, r3
 8001248:	f00b fa16 	bl	800c678 <HAL_TIM_PWM_Start>

		haltMotors();
 800124c:	f7ff ffb8 	bl	80011c0 <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 8001250:	4806      	ldr	r0, [pc, #24]	; (800126c <enableMotors+0x80>)
 8001252:	f7ff ff03 	bl	800105c <println>
	}
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200003c4 	.word	0x200003c4
 8001260:	20000000 	.word	0x20000000
 8001264:	20000001 	.word	0x20000001
 8001268:	40020000 	.word	0x40020000
 800126c:	0801da90 	.word	0x0801da90

08001270 <disableMotors>:

void disableMotors(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <disableMotors+0x3c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d015      	beq.n	80012a8 <disableMotors+0x38>
	{
		haltMotors();
 800127c:	f7ff ffa0 	bl	80011c0 <haltMotors>
		motorsEnabled = false;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <disableMotors+0x3c>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8001286:	f014 fc07 	bl	8015a98 <Get_TIM5_Instance>
 800128a:	4603      	mov	r3, r0
 800128c:	2104      	movs	r1, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f00b fa30 	bl	800c6f4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001294:	f014 fc00 	bl	8015a98 <Get_TIM5_Instance>
 8001298:	4603      	mov	r3, r0
 800129a:	210c      	movs	r1, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f00b fa29 	bl	800c6f4 <HAL_TIM_PWM_Stop>
		println("[MOT] Motors DISABLED!!!!!!!1");
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <disableMotors+0x40>)
 80012a4:	f7ff feda 	bl	800105c <println>
	}
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003c4 	.word	0x200003c4
 80012b0:	0801daa8 	.word	0x0801daa8

080012b4 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 80012ba:	f012 fc81 	bl	8013bc0 <BSP_SD_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SD_init+0x14>
 80012c4:	2303      	movs	r3, #3
 80012c6:	e027      	b.n	8001318 <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <SD_init+0x6c>)
 80012ca:	f012 fc6b 	bl	8013ba4 <FATFS_UnLinkDriver>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SD_init+0x24>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e01f      	b.n	8001318 <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <SD_init+0x6c>)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <SD_init+0x70>)
 80012dc:	f012 fc1a 	bl	8013b14 <FATFS_LinkDriver>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SD_init+0x36>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e016      	b.n	8001318 <SD_init+0x64>

	f_mount(0, SDPath, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <SD_init+0x6c>)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f011 fe68 	bl	8012fc4 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	490a      	ldr	r1, [pc, #40]	; (8001320 <SD_init+0x6c>)
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <SD_init+0x74>)
 80012fa:	f011 fe63 	bl	8012fc4 <f_mount>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	4905      	ldr	r1, [pc, #20]	; (8001320 <SD_init+0x6c>)
 800130c:	2000      	movs	r0, #0
 800130e:	f011 fe59 	bl	8012fc4 <f_mount>
		return mountStatus;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	e000      	b.n	8001318 <SD_init+0x64>
	}

	return FR_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20006c30 	.word	0x20006c30
 8001324:	0801e2a4 	.word	0x0801e2a4
 8001328:	2000210c 	.word	0x2000210c

0800132c <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 8001334:	2208      	movs	r2, #8
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <SD_newFile+0x44>)
 800133a:	f011 fe89 	bl	8013050 <f_open>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SD_newFile+0x48>)
 8001344:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <SD_newFile+0x48>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	4909      	ldr	r1, [pc, #36]	; (8001378 <SD_newFile+0x4c>)
 8001352:	2000      	movs	r0, #0
 8001354:	f011 fe36 	bl	8012fc4 <f_mount>
		return stato;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SD_newFile+0x48>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	e004      	b.n	8001368 <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 800135e:	4804      	ldr	r0, [pc, #16]	; (8001370 <SD_newFile+0x44>)
 8001360:	f012 fa54 	bl	801380c <f_close>
	return stato;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <SD_newFile+0x48>)
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200010dc 	.word	0x200010dc
 8001374:	200010d8 	.word	0x200010d8
 8001378:	20006c30 	.word	0x20006c30

0800137c <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 8001386:	2232      	movs	r2, #50	; 0x32
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <SD_writeToFile+0x64>)
 800138c:	f011 fe60 	bl	8013050 <f_open>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <SD_writeToFile+0x68>)
 8001396:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <SD_writeToFile+0x68>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <SD_writeToFile+0x2a>
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <SD_writeToFile+0x68>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	e017      	b.n	80013d6 <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7fe ff1c 	bl	80001e4 <strlen>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <SD_writeToFile+0x6c>)
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	480b      	ldr	r0, [pc, #44]	; (80013e0 <SD_writeToFile+0x64>)
 80013b4:	f012 f818 	bl	80133e8 <f_write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <SD_writeToFile+0x68>)
 80013be:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <SD_writeToFile+0x68>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <SD_writeToFile+0x52>
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SD_writeToFile+0x68>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	e003      	b.n	80013d6 <SD_writeToFile+0x5a>

	return f_close(&fileo);
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <SD_writeToFile+0x64>)
 80013d0:	f012 fa1c 	bl	801380c <f_close>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200010dc 	.word	0x200010dc
 80013e4:	200010d8 	.word	0x200010d8
 80013e8:	20003140 	.word	0x20003140

080013ec <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f012 fa33 	bl	8013860 <f_mkdir>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
 8001408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <millis+0x1c>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	10624dd3 	.word	0x10624dd3

08001424 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001430:	1cf9      	adds	r1, r7, #3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	2201      	movs	r2, #1
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f00a fd08 	bl	800be4e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 800143e:	bf00      	nop
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f00a ffda 	bl	800c3fa <HAL_SPI_GetState>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d1f9      	bne.n	8001440 <SX1278_write+0x1c>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
 8001460:	4613      	mov	r3, r2
 8001462:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a18      	ldr	r0, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8a5b      	ldrh	r3, [r3, #18]
 800146c:	2200      	movs	r2, #0
 800146e:	4619      	mov	r1, r3
 8001470:	f006 f9d0 	bl	8007814 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff ffce 	bl	8001424 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	78ba      	ldrb	r2, [r7, #2]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffc7 	bl	8001424 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a18      	ldr	r0, [r3, #32]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8a5b      	ldrh	r3, [r3, #18]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	f006 f9b7 	bl	8007814 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	461a      	mov	r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
 80014be:	4613      	mov	r3, r2
 80014c0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80014c2:	7abb      	ldrb	r3, [r7, #10]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d92d      	bls.n	8001524 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a18      	ldr	r0, [r3, #32]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8a5b      	ldrh	r3, [r3, #18]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f006 f99e 	bl	8007814 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	4610      	mov	r0, r2
 80014e8:	f7ff ff9c 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	e00b      	b.n	800150a <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff ff90 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	3301      	adds	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
 800150a:	7dfa      	ldrb	r2, [r7, #23]
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3ef      	bcc.n	80014f2 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a18      	ldr	r0, [r3, #32]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8a5b      	ldrh	r3, [r3, #18]
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	f006 f979 	bl	8007814 <HAL_GPIO_WritePin>
 8001522:	e000      	b.n	8001526 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001524:	bf00      	nop
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 800153c:	f107 020e 	add.w	r2, r7, #14
 8001540:	f107 010f 	add.w	r1, r7, #15
 8001544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f00a fdb2 	bl	800c0b6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001552:	bf00      	nop
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f00a ff50 	bl	800c3fa <HAL_SPI_GetState>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d1f9      	bne.n	8001554 <SX1278_read+0x28>

	return rxByte;
 8001560:	7bbb      	ldrb	r3, [r7, #14]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a18      	ldr	r0, [r3, #32]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8a5b      	ldrh	r3, [r3, #18]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f006 f947 	bl	8007814 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff48 	bl	8001424 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffc7 	bl	800152c <SX1278_read>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a18      	ldr	r0, [r3, #32]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8a5b      	ldrh	r3, [r3, #18]
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	f006 f931 	bl	8007814 <HAL_GPIO_WritePin>

	return recv;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	460b      	mov	r3, r1
 80015ca:	72fb      	strb	r3, [r7, #11]
 80015cc:	4613      	mov	r3, r2
 80015ce:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d92b      	bls.n	800162e <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a18      	ldr	r0, [r3, #32]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8a5b      	ldrh	r3, [r3, #18]
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	f006 f917 	bl	8007814 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	7afa      	ldrb	r2, [r7, #11]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff18 	bl	8001424 <SX1278_write>
	for (i = 0; i < len; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
 80015f8:	e00c      	b.n	8001614 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	18d4      	adds	r4, r2, r3
 8001604:	4608      	mov	r0, r1
 8001606:	f7ff ff91 	bl	800152c <SX1278_read>
 800160a:	4603      	mov	r3, r0
 800160c:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	3301      	adds	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
 8001614:	7dfa      	ldrb	r2, [r7, #23]
 8001616:	7abb      	ldrb	r3, [r7, #10]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3ee      	bcc.n	80015fa <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a18      	ldr	r0, [r3, #32]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8a5b      	ldrh	r3, [r3, #18]
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	f006 f8f4 	bl	8007814 <HAL_GPIO_WritePin>
 800162c:	e000      	b.n	8001630 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 800162e:	bf00      	nop
}
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
	...

08001638 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	SX1278_reset(inst);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fab9 	bl	8001bc0 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 800164e:	2142      	movs	r1, #66	; 0x42
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff8a 	bl	800156a <SX1278_read_address>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b12      	cmp	r3, #18
 800165e:	d001      	beq.n	8001664 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e0d7      	b.n	8001814 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa8b 	bl	8001b80 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800166a:	2288      	movs	r2, #136	; 0x88
 800166c:	2101      	movs	r1, #1
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fef0 	bl	8001454 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <SX1278_init+0x1e4>)
 800167e:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <SX1278_init+0x1e4>)
 8001684:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	0394      	lsls	r4, r2, #14
 8001692:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 8001696:	038b      	lsls	r3, r1, #14
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <SX1278_init+0x1e4>)
 800169a:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <SX1278_init+0x1e4>)
 80016a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <SX1278_init+0x1e8>)
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	f7ff fb4d 	bl	8000d48 <__aeabi_uldivmod>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <SX1278_init+0x1e4>)
 80016b4:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <SX1278_init+0x1ec>)
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <SX1278_init+0x1e4>)
 80016bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c0:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <SX1278_init+0x1ec>)
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2106      	movs	r1, #6
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fec1 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <SX1278_init+0x1ec>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2107      	movs	r1, #7
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff feba 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <SX1278_init+0x1ec>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	2108      	movs	r1, #8
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff feb3 	bl	8001454 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	2109      	movs	r1, #9
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff feac 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80016fc:	222b      	movs	r2, #43	; 0x2b
 80016fe:	210b      	movs	r1, #11
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fea7 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 8001706:	2223      	movs	r2, #35	; 0x23
 8001708:	210c      	movs	r1, #12
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fea2 	bl	8001454 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 8001710:	2287      	movs	r2, #135	; 0x87
 8001712:	214d      	movs	r1, #77	; 0x4d
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe9d 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 800171a:	2200      	movs	r2, #0
 800171c:	2124      	movs	r1, #36	; 0x24
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe98 	bl	8001454 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d139      	bne.n	80017a0 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	79db      	ldrb	r3, [r3, #7]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	799b      	ldrb	r3, [r3, #6]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	211d      	movs	r1, #29
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fe83 	bl	8001454 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	795b      	ldrb	r3, [r3, #5]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	b2da      	uxtb	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a1b      	ldrb	r3, [r3, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	211e      	movs	r1, #30
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe74 	bl	8001454 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 800176c:	2131      	movs	r1, #49	; 0x31
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fefb 	bl	800156a <SX1278_read_address>
 8001774:	4603      	mov	r3, r0
 8001776:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	f023 0307 	bic.w	r3, r3, #7
 800177e:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	f043 0305 	orr.w	r3, r3, #5
 8001786:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	461a      	mov	r2, r3
 800178c:	2131      	movs	r1, #49	; 0x31
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fe60 	bl	8001454 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001794:	220c      	movs	r2, #12
 8001796:	2137      	movs	r1, #55	; 0x37
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fe5b 	bl	8001454 <SX1278_command>
 800179e:	e01d      	b.n	80017dc <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	79db      	ldrb	r3, [r3, #7]
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	799b      	ldrb	r3, [r3, #6]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	211d      	movs	r1, #29
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe4b 	bl	8001454 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	211e      	movs	r1, #30
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe3c 	bl	8001454 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 80017dc:	2264      	movs	r2, #100	; 0x64
 80017de:	211f      	movs	r1, #31
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe37 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80017e6:	2200      	movs	r2, #0
 80017e8:	2120      	movs	r1, #32
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fe32 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80017f0:	220c      	movs	r2, #12
 80017f2:	2121      	movs	r1, #33	; 0x21
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe2d 	bl	8001454 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80017fa:	2201      	movs	r2, #1
 80017fc:	2141      	movs	r1, #65	; 0x41
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe28 	bl	8001454 <SX1278_command>

	SX1278_standby(inst);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f9cb 	bl	8001ba0 <SX1278_standby>

	inst->active = true;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	return true;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	200005d0 	.word	0x200005d0
 8001820:	000f4240 	.word	0x000f4240
 8001824:	200005d8 	.word	0x200005d8

08001828 <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7b1b      	ldrb	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d12b      	bne.n	8001896 <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f932 	bl	8001ab0 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	461a      	mov	r2, r3
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f86c 	bl	8001930 <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f898 	bl	800198e <SX1278_tx_push>

		if (inst->useDio0IRQ)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001870:	2301      	movs	r3, #1
 8001872:	e011      	b.n	8001898 <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001874:	bf00      	nop
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8a1b      	ldrh	r3, [r3, #16]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f005 ffaf 	bl	80077e4 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f4      	beq.n	8001876 <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f88b 	bl	80019a8 <SX1278_tx_finish>
 8001892:	4603      	mov	r3, r0
 8001894:	e000      	b.n	8001898 <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 8001896:	2300      	movs	r3, #0
	}
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7b1b      	ldrb	r3, [r3, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d13a      	bne.n	8001926 <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f929 	bl	8001b08 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			inst->rxStart = millis();
 80018c8:	f7ff fd9c 	bl	8001404 <millis>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e028      	b.n	8001928 <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 80018d6:	f7ff fd95 	bl	8001404 <millis>
 80018da:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018dc:	e011      	b.n	8001902 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 80018de:	f7ff fd91 	bl	8001404 <millis>
 80018e2:	4602      	mov	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	8952      	ldrh	r2, [r2, #10]
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d308      	bcc.n	8001902 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f87e 	bl	80019f2 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 80018fe:	2300      	movs	r3, #0
 8001900:	e012      	b.n	8001928 <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8a1b      	ldrh	r3, [r3, #16]
 800190a:	4619      	mov	r1, r3
 800190c:	4610      	mov	r0, r2
 800190e:	f005 ff69 	bl	80077e4 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0e2      	beq.n	80018de <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f86a 	bl	80019f2 <SX1278_rx_get_packet>
			return inst->newPacket;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001924:	e000      	b.n	8001928 <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 8001926:	2300      	movs	r3, #0
	}
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	4613      	mov	r3, r2
 800193c:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	461a      	mov	r2, r3
 8001942:	2122      	movs	r1, #34	; 0x22
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fd85 	bl	8001454 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	2100      	movs	r1, #0
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fdac 	bl	80014ae <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]
 800195a:	e00c      	b.n	8001976 <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	441a      	add	r2, r3
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	7811      	ldrb	r1, [r2, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	460a      	mov	r2, r1
 800196c:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for (l = 0; l < length; l++)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	3301      	adds	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
 8001976:	7dfa      	ldrb	r2, [r7, #23]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3ee      	bcc.n	800195c <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	79fa      	ldrb	r2, [r7, #7]
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001996:	228b      	movs	r2, #139	; 0x8b
 8001998:	2101      	movs	r1, #1
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fd5a 	bl	8001454 <SX1278_command>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80019b0:	2112      	movs	r1, #18
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fdd9 	bl	800156a <SX1278_read_address>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfcc      	ite	gt
 80019d0:	2301      	movgt	r3, #1
 80019d2:	2300      	movle	r3, #0
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9d2 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f8dc 	bl	8001ba0 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f980 	bl	8001d00 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f015 fbab 	bl	8017166 <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 8001a10:	2110      	movs	r1, #16
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fda9 	bl	800156a <SX1278_read_address>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	210d      	movs	r1, #13
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fd16 	bl	8001454 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	2b06      	cmp	r3, #6
 8001a2e:	d104      	bne.n	8001a3a <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e005      	b.n	8001a46 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001a3a:	2113      	movs	r1, #19
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fd94 	bl	800156a <SX1278_read_address>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff fdb3 	bl	80015bc <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <SX1278_rx_get_packet+0x82>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a66:	f083 0301 	eor.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SX1278_rx_get_packet+0x82>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <SX1278_rx_get_packet+0x84>
 8001a74:	2300      	movs	r3, #0
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f98c 	bl	8001da0 <SX1278_getRSSI>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SX1278_clearLoRaIrq(inst);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f975 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f87f 	bl	8001ba0 <SX1278_standby>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f964 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001abe:	2241      	movs	r2, #65	; 0x41
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fcc6 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001ac8:	22f7      	movs	r2, #247	; 0xf7
 8001aca:	2111      	movs	r1, #17
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff fcc1 	bl	8001454 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001ad2:	210e      	movs	r1, #14
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fd48 	bl	800156a <SX1278_read_address>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	210d      	movs	r1, #13
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fcb5 	bl	8001454 <SX1278_command>

	inst->txLen = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->txDone = false;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	731a      	strb	r2, [r3, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f845 	bl	8001ba0 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f935 	bl	8001d86 <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fc97 	bl	8001454 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001b26:	221f      	movs	r2, #31
 8001b28:	2111      	movs	r1, #17
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fc92 	bl	8001454 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001b30:	210f      	movs	r1, #15
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fd19 	bl	800156a <SX1278_read_address>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	210d      	movs	r1, #13
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fc86 	bl	8001454 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b48:	228d      	movs	r2, #141	; 0x8d
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fc81 	bl	8001454 <SX1278_command>

	inst->crcError = false;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->newPacket = false;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b88:	2208      	movs	r2, #8
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fc61 	bl	8001454 <SX1278_command>
	inst->mode = SLEEP;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	731a      	strb	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001ba8:	2209      	movs	r2, #9
 8001baa:	2101      	movs	r1, #1
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fc51 	bl	8001454 <SX1278_command>
	inst->mode = STANDBY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	731a      	strb	r2, [r3, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	inst->txLen = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->rxLen = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->mode = SLEEP;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a18      	ldr	r0, [r3, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8a5b      	ldrh	r3, [r3, #18]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f005 fdf8 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6998      	ldr	r0, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	89db      	ldrh	r3, [r3, #14]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f005 fdf0 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f004 ff6f 	bl	8006b18 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6998      	ldr	r0, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	89db      	ldrh	r3, [r3, #14]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4619      	mov	r1, r3
 8001c46:	f005 fde5 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	; 0x64
 8001c4c:	f004 ff64 	bl	8006b18 <HAL_Delay>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01e      	beq.n	8001ca8 <SX1278_dio0_IRQ+0x50>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d019      	beq.n	8001ca8 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7b1b      	ldrb	r3, [r3, #12]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d104      	bne.n	8001c86 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fe93 	bl	80019a8 <SX1278_tx_finish>
 8001c82:	4603      	mov	r3, r0
 8001c84:	e011      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7b1b      	ldrb	r3, [r3, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d104      	bne.n	8001c98 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff feaf 	bl	80019f2 <SX1278_rx_get_packet>
 8001c94:	4603      	mov	r3, r0
 8001c96:	e008      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f874 	bl	8001d86 <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff7e 	bl	8001ba0 <SX1278_standby>
			return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e000      	b.n	8001caa <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001ca8:	2300      	movs	r3, #0
	}
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001cba:	f7ff fba3 	bl	8001404 <millis>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	8952      	ldrh	r2, [r2, #10]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d313      	bcc.n	8001cf6 <SX1278_intTimeout+0x44>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7b1b      	ldrb	r3, [r3, #12]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d10f      	bne.n	8001cf6 <SX1278_intTimeout+0x44>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001ce8:	f7ff fb8c 	bl	8001404 <millis>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c

		return true;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <SX1278_intTimeout+0x46>
	}
	return false;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001d08:	2112      	movs	r1, #18
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc2d 	bl	800156a <SX1278_read_address>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bfcc      	ite	gt
 8001d28:	2301      	movgt	r3, #1
 8001d2a:	2300      	movle	r3, #0
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	dc07      	bgt.n	8001d52 <SX1278_update_IRQ_status+0x52>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SX1278_update_IRQ_status+0x56>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <SX1278_update_IRQ_status+0x58>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bfcc      	ite	gt
 8001d72:	2301      	movgt	r3, #1
 8001d74:	2300      	movle	r3, #0
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d8e:	22ff      	movs	r2, #255	; 0xff
 8001d90:	2112      	movs	r1, #18
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fb5e 	bl	8001454 <SX1278_command>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001da8:	211a      	movs	r1, #26
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fbdd 	bl	800156a <SX1278_read_address>
 8001db0:	4603      	mov	r3, r0
 8001db2:	3ba4      	subs	r3, #164	; 0xa4
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <BMP280_readBytes>:
#include "bmp280.h"
#include "run.h"
#include "config.h"

static bool BMP280_readBytes(BMP280* inst, uint8_t mem_addr, uint8_t* data, uint8_t len)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	72fb      	strb	r3, [r7, #11]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	72bb      	strb	r3, [r7, #10]
	return (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, len, 5000) == HAL_OK);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8899      	ldrh	r1, [r3, #4]
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29c      	uxth	r4, r3
 8001ddc:	7abb      	ldrb	r3, [r7, #10]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	4622      	mov	r2, r4
 8001df0:	f005 ff66 	bl	8007cc0 <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf0c      	ite	eq
 8001dfa:	2301      	moveq	r3, #1
 8001dfc:	2300      	movne	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd90      	pop	{r4, r7, pc}

08001e08 <BMP280_writeByte>:
static bool BMP280_writeByte(BMP280* inst, uint8_t mem_addr, uint8_t data)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	4613      	mov	r3, r2
 8001e16:	70bb      	strb	r3, [r7, #2]
	return (HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 10000) == HAL_OK);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8899      	ldrh	r1, [r3, #4]
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	f005 fe4a 	bl	8007acc <HAL_I2C_Mem_Write>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <BMP280_read16>:
static bool BMP280_read16(BMP280* inst, uint8_t mem_addr, uint16_t* data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af04      	add	r7, sp, #16
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	460b      	mov	r3, r1
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	72fb      	strb	r3, [r7, #11]
	uint8_t rx_buff[2];

	if (HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8899      	ldrh	r1, [r3, #4]
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	f005 ff22 	bl	8007cc0 <HAL_I2C_Mem_Read>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <BMP280_read16+0x4e>
	{
		*data = (uint16_t)((rx_buff[1] << 8) | rx_buff[0]);
 8001e82:	7d7b      	ldrb	r3, [r7, #21]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	7d3b      	ldrb	r3, [r7, #20]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	801a      	strh	r2, [r3, #0]
		return true;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <BMP280_read16+0x50>
	}
	else return false;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <read_calibration_data>:

static bool read_calibration_data(BMP280* inst)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	return(BMP280_read16(inst, 0x88, &inst->dig_T1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	331a      	adds	r3, #26
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2188      	movs	r1, #136	; 0x88
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffc9 	bl	8001e4c <BMP280_read16>
 8001eba:	4603      	mov	r3, r0
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d06f      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8a, (uint16_t*) &inst->dig_T2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	331c      	adds	r3, #28
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	218a      	movs	r1, #138	; 0x8a
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffbf 	bl	8001e4c <BMP280_read16>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d065      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8c, (uint16_t*) &inst->dig_T3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	331e      	adds	r3, #30
 8001ed8:	461a      	mov	r2, r3
 8001eda:	218c      	movs	r1, #140	; 0x8c
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffb5 	bl	8001e4c <BMP280_read16>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x8e, &inst->dig_P1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3320      	adds	r3, #32
 8001eec:	461a      	mov	r2, r3
 8001eee:	218e      	movs	r1, #142	; 0x8e
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ffab 	bl	8001e4c <BMP280_read16>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d051      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x90, (uint16_t*) &inst->dig_P2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3322      	adds	r3, #34	; 0x22
 8001f00:	461a      	mov	r2, r3
 8001f02:	2190      	movs	r1, #144	; 0x90
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffa1 	bl	8001e4c <BMP280_read16>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d047      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x92, (uint16_t*) &inst->dig_P3)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3324      	adds	r3, #36	; 0x24
 8001f14:	461a      	mov	r2, r3
 8001f16:	2192      	movs	r1, #146	; 0x92
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff97 	bl	8001e4c <BMP280_read16>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03d      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x94, (uint16_t*) &inst->dig_P4)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3326      	adds	r3, #38	; 0x26
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2194      	movs	r1, #148	; 0x94
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff8d 	bl	8001e4c <BMP280_read16>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d033      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x96, (uint16_t*) &inst->dig_P5)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2196      	movs	r1, #150	; 0x96
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff83 	bl	8001e4c <BMP280_read16>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d029      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x98, (uint16_t*) &inst->dig_P6)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	332a      	adds	r3, #42	; 0x2a
 8001f50:	461a      	mov	r2, r3
 8001f52:	2198      	movs	r1, #152	; 0x98
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff79 	bl	8001e4c <BMP280_read16>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01f      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9a, (uint16_t*) &inst->dig_P7)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	332c      	adds	r3, #44	; 0x2c
 8001f64:	461a      	mov	r2, r3
 8001f66:	219a      	movs	r1, #154	; 0x9a
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff6f 	bl	8001e4c <BMP280_read16>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9c, (uint16_t*) &inst->dig_P8)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	332e      	adds	r3, #46	; 0x2e
 8001f78:	461a      	mov	r2, r3
 8001f7a:	219c      	movs	r1, #156	; 0x9c
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff65 	bl	8001e4c <BMP280_read16>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <read_calibration_data+0xfc>
		&& BMP280_read16(inst, 0x9e, (uint16_t*) &inst->dig_P9));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3330      	adds	r3, #48	; 0x30
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	219e      	movs	r1, #158	; 0x9e
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff5b 	bl	8001e4c <BMP280_read16>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <read_calibration_data+0xfc>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <read_calibration_data+0xfe>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <compensate_temperature>:

static int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp, int32_t *fine_temp)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	10da      	asrs	r2, r3, #3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8b5b      	ldrh	r3, [r3, #26]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001fd2:	12db      	asrs	r3, r3, #11
 8001fd4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	111b      	asrs	r3, r3, #4
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	8b52      	ldrh	r2, [r2, #26]
 8001fde:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	1112      	asrs	r2, r2, #4
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	8b49      	ldrh	r1, [r1, #26]
 8001fe8:	1a52      	subs	r2, r2, r1
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001ffa:	139b      	asrs	r3, r3, #14
 8001ffc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	441a      	add	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	3380      	adds	r3, #128	; 0x80
 8002014:	121b      	asrs	r3, r3, #8
}
 8002016:	4618      	mov	r0, r3
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <compensate_pressure>:

static uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press, int32_t fine_temp)
{
 8002022:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002038:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800203c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002040:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	fb02 f203 	mul.w	r2, r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	441a      	add	r2, r3
 8002056:	6a39      	ldr	r1, [r7, #32]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fba1 3403 	umull	r3, r4, r1, r3
 800205e:	4422      	add	r2, r4
 8002060:	4614      	mov	r4, r2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f9b2 202a 	ldrsh.w	r2, [r2, #42]	; 0x2a
 8002068:	b211      	sxth	r1, r2
 800206a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800206e:	fb01 f504 	mul.w	r5, r1, r4
 8002072:	fb03 f002 	mul.w	r0, r3, r2
 8002076:	4428      	add	r0, r5
 8002078:	fba3 3401 	umull	r3, r4, r3, r1
 800207c:	1902      	adds	r2, r0, r4
 800207e:	4614      	mov	r4, r2
 8002080:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002084:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800208e:	b21b      	sxth	r3, r3
 8002090:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002094:	6a3a      	ldr	r2, [r7, #32]
 8002096:	fb04 f102 	mul.w	r1, r4, r2
 800209a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209c:	fb03 f202 	mul.w	r2, r3, r2
 80020a0:	1888      	adds	r0, r1, r2
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	fba2 1203 	umull	r1, r2, r2, r3
 80020a8:	1883      	adds	r3, r0, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	f04f 0500 	mov.w	r5, #0
 80020b0:	f04f 0600 	mov.w	r6, #0
 80020b4:	0456      	lsls	r6, r2, #17
 80020b6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80020ba:	044d      	lsls	r5, r1, #17
 80020bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020c0:	186b      	adds	r3, r5, r1
 80020c2:	eb46 0402 	adc.w	r4, r6, r2
 80020c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80020d0:	b219      	sxth	r1, r3
 80020d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80020d6:	f04f 0500 	mov.w	r5, #0
 80020da:	f04f 0600 	mov.w	r6, #0
 80020de:	00ce      	lsls	r6, r1, #3
 80020e0:	2500      	movs	r5, #0
 80020e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80020e6:	186b      	adds	r3, r5, r1
 80020e8:	eb46 0402 	adc.w	r4, r6, r2
 80020ec:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	6a3a      	ldr	r2, [r7, #32]
 80020f4:	fb02 f203 	mul.w	r2, r2, r3
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	6a39      	ldr	r1, [r7, #32]
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	441a      	add	r2, r3
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	fba1 3403 	umull	r3, r4, r1, r3
 800210a:	4422      	add	r2, r4
 800210c:	4614      	mov	r4, r2
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8002114:	b211      	sxth	r1, r2
 8002116:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800211a:	fb01 f504 	mul.w	r5, r1, r4
 800211e:	fb03 f002 	mul.w	r0, r3, r2
 8002122:	4428      	add	r0, r5
 8002124:	fba3 3401 	umull	r3, r4, r3, r1
 8002128:	1902      	adds	r2, r0, r4
 800212a:	4614      	mov	r4, r2
 800212c:	f04f 0100 	mov.w	r1, #0
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	0a19      	lsrs	r1, r3, #8
 8002136:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800213a:	1222      	asrs	r2, r4, #8
		 + ((var1 * (int64_t) inst->dig_P2) << 12);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002142:	b21b      	sxth	r3, r3
 8002144:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002148:	6a38      	ldr	r0, [r7, #32]
 800214a:	fb04 f500 	mul.w	r5, r4, r0
 800214e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002150:	fb03 f000 	mul.w	r0, r3, r0
 8002154:	4428      	add	r0, r5
 8002156:	6a3d      	ldr	r5, [r7, #32]
 8002158:	fba5 5603 	umull	r5, r6, r5, r3
 800215c:	1983      	adds	r3, r0, r6
 800215e:	461e      	mov	r6, r3
 8002160:	f04f 0b00 	mov.w	fp, #0
 8002164:	f04f 0c00 	mov.w	ip, #0
 8002168:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800216c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8002170:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002174:	eb1b 0301 	adds.w	r3, fp, r1
 8002178:	eb4c 0402 	adc.w	r4, ip, r2
 800217c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8002180:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002184:	1c19      	adds	r1, r3, #0
 8002186:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8c1b      	ldrh	r3, [r3, #32]
 800218e:	b29b      	uxth	r3, r3
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	fb03 f502 	mul.w	r5, r3, r2
 8002198:	fb01 f004 	mul.w	r0, r1, r4
 800219c:	4428      	add	r0, r5
 800219e:	fba1 3403 	umull	r3, r4, r1, r3
 80021a2:	1902      	adds	r2, r0, r4
 80021a4:	4614      	mov	r4, r2
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	1061      	asrs	r1, r4, #1
 80021b0:	17e2      	asrs	r2, r4, #31
 80021b2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80021b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021ba:	4323      	orrs	r3, r4
 80021bc:	d101      	bne.n	80021c2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80021be:	2300      	movs	r3, #0
 80021c0:	e0d4      	b.n	800236c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80021c8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80021cc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	ea4f 0963 	mov.w	r9, r3, asr #1
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80021dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021e0:	4645      	mov	r5, r8
 80021e2:	464e      	mov	r6, r9
 80021e4:	1aed      	subs	r5, r5, r3
 80021e6:	eb66 0604 	sbc.w	r6, r6, r4
 80021ea:	46a8      	mov	r8, r5
 80021ec:	46b1      	mov	r9, r6
 80021ee:	eb18 0308 	adds.w	r3, r8, r8
 80021f2:	eb49 0409 	adc.w	r4, r9, r9
 80021f6:	4698      	mov	r8, r3
 80021f8:	46a1      	mov	r9, r4
 80021fa:	eb18 0805 	adds.w	r8, r8, r5
 80021fe:	eb49 0906 	adc.w	r9, r9, r6
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800220e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002212:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002216:	eb18 0801 	adds.w	r8, r8, r1
 800221a:	eb49 0902 	adc.w	r9, r9, r2
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800222a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800222e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002232:	4688      	mov	r8, r1
 8002234:	4691      	mov	r9, r2
 8002236:	eb18 0805 	adds.w	r8, r8, r5
 800223a:	eb49 0906 	adc.w	r9, r9, r6
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800224a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800224e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002252:	4688      	mov	r8, r1
 8002254:	4691      	mov	r9, r2
 8002256:	eb18 0005 	adds.w	r0, r8, r5
 800225a:	eb49 0106 	adc.w	r1, r9, r6
 800225e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002262:	f7fe fd21 	bl	8000ca8 <__aeabi_ldivmod>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002274:	b219      	sxth	r1, r3
 8002276:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800227a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	f04f 0400 	mov.w	r4, #0
 8002286:	0b6b      	lsrs	r3, r5, #13
 8002288:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800228c:	1374      	asrs	r4, r6, #13
 800228e:	fb03 f502 	mul.w	r5, r3, r2
 8002292:	fb01 f004 	mul.w	r0, r1, r4
 8002296:	4428      	add	r0, r5
 8002298:	fba1 1203 	umull	r1, r2, r1, r3
 800229c:	1883      	adds	r3, r0, r2
 800229e:	461a      	mov	r2, r3
 80022a0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	0b6b      	lsrs	r3, r5, #13
 80022ae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80022b2:	1374      	asrs	r4, r6, #13
 80022b4:	fb03 f502 	mul.w	r5, r3, r2
 80022b8:	fb01 f004 	mul.w	r0, r1, r4
 80022bc:	4428      	add	r0, r5
 80022be:	fba1 1203 	umull	r1, r2, r1, r3
 80022c2:	1883      	adds	r3, r0, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0e4b      	lsrs	r3, r1, #25
 80022d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80022d4:	1654      	asrs	r4, r2, #25
 80022d6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	fb04 f102 	mul.w	r1, r4, r2
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	fb03 f202 	mul.w	r2, r3, r2
 80022f2:	1888      	adds	r0, r1, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	fba2 1203 	umull	r1, r2, r2, r3
 80022fa:	1883      	adds	r3, r0, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	0ccb      	lsrs	r3, r1, #19
 8002308:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800230c:	14d4      	asrs	r4, r2, #19
 800230e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8002312:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002316:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800231a:	eb11 0803 	adds.w	r8, r1, r3
 800231e:	eb42 0904 	adc.w	r9, r2, r4
 8002322:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002326:	eb13 0508 	adds.w	r5, r3, r8
 800232a:	eb44 0609 	adc.w	r6, r4, r9
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	0a29      	lsrs	r1, r5, #8
 8002338:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800233c:	1232      	asrs	r2, r6, #8
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002344:	b21d      	sxth	r5, r3
 8002346:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800234a:	f04f 0800 	mov.w	r8, #0
 800234e:	f04f 0900 	mov.w	r9, #0
 8002352:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002356:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800235a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800235e:	eb18 0301 	adds.w	r3, r8, r1
 8002362:	eb49 0402 	adc.w	r4, r9, r2
 8002366:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800236a:	693b      	ldr	r3, [r7, #16]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002376 <bmp280_reset>:

void bmp280_reset(BMP280* inst)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	// soft reset
	BMP280_writeByte(inst, BMP280_REG_RESET, BMP280_RESET_VALUE);
 800237e:	22b6      	movs	r2, #182	; 0xb6
 8002380:	21e0      	movs	r1, #224	; 0xe0
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fd40 	bl	8001e08 <BMP280_writeByte>
	delay(100);
 8002388:	2064      	movs	r0, #100	; 0x64
 800238a:	f004 fbc5 	bl	8006b18 <HAL_Delay>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <bmp280_present>:

bool bmp280_present(BMP280* inst, uint8_t trials)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
	// request and verify chip id
	uint8_t attempts = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
	do
	{
		bmp280_reset(inst);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffe5 	bl	8002376 <bmp280_reset>
		uint8_t who[1] = { 0x00 };
 80023ac:	2300      	movs	r3, #0
 80023ae:	733b      	strb	r3, [r7, #12]
		BMP280_readBytes(inst, BMP280_REG_ID, who, 1);
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	2301      	movs	r3, #1
 80023b6:	21d0      	movs	r1, #208	; 0xd0
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fcff 	bl	8001dbc <BMP280_readBytes>
		if (who[0] == BMP280_CHIP_ID) return true;
 80023be:	7b3b      	ldrb	r3, [r7, #12]
 80023c0:	2b58      	cmp	r3, #88	; 0x58
 80023c2:	d101      	bne.n	80023c8 <bmp280_present+0x32>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e00e      	b.n	80023e6 <bmp280_present+0x50>
		else
		{
			attempts++;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	3301      	adds	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 80023ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d2:	f004 fba1 	bl	8006b18 <HAL_Delay>
		}
	} while (attempts <= trials);
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d9e3      	bls.n	80023a6 <bmp280_present+0x10>
	inst->active = false;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	761a      	strb	r2, [r3, #24]
	return false;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <bmp280_init>:

bool bmp280_init(BMP280* inst, BMP280_config* params)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	uint8_t temp_data[1];	// nasty temporary byte, used for everything
	inst->active = false;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	761a      	strb	r2, [r3, #24]

	if (!bmp280_present(inst, 1)) return false;
 80023fe:	2101      	movs	r1, #1
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffc8 	bl	8002396 <bmp280_present>
 8002406:	4603      	mov	r3, r0
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <bmp280_init+0x28>
 8002412:	2300      	movs	r3, #0
 8002414:	e064      	b.n	80024e0 <bmp280_init+0xf2>
	bmp280_reset(inst);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffad 	bl	8002376 <bmp280_reset>

	while (!(BMP280_readBytes(inst, BMP280_REG_STATUS, temp_data, 1) && (temp_data[0] & 0x01) == 0)); // wait until finished copying over the NVM data
 800241c:	bf00      	nop
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	2301      	movs	r3, #1
 8002424:	21f3      	movs	r1, #243	; 0xf3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fcc8 	bl	8001dbc <BMP280_readBytes>
 800242c:	4603      	mov	r3, r0
 800242e:	f083 0301 	eor.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f2      	bne.n	800241e <bmp280_init+0x30>
 8002438:	7b3b      	ldrb	r3, [r7, #12]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1ed      	bne.n	800241e <bmp280_init+0x30>

	if (!read_calibration_data(inst)) return false;
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fd2e 	bl	8001ea4 <read_calibration_data>
 8002448:	4603      	mov	r3, r0
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <bmp280_init+0x6a>
 8002454:	2300      	movs	r3, #0
 8002456:	e043      	b.n	80024e0 <bmp280_init+0xf2>

	// Setting parameters
	temp_data[0] = (params->standby << 5) | (params->filter << 2);	// config byte
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	015b      	lsls	r3, r3, #5
 800245e:	b25a      	sxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CONFIG, temp_data[0])) return false;
 8002470:	7b3b      	ldrb	r3, [r7, #12]
 8002472:	461a      	mov	r2, r3
 8002474:	21f5      	movs	r1, #245	; 0xf5
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fcc6 	bl	8001e08 <BMP280_writeByte>
 800247c:	4603      	mov	r3, r0
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <bmp280_init+0x9e>
 8002488:	2300      	movs	r3, #0
 800248a:	e029      	b.n	80024e0 <bmp280_init+0xf2>

	if (params->mode == BMP280_MODE_FORCED) params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <bmp280_init+0xac>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
	temp_data[0] = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode); // ctrl byte
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	78db      	ldrb	r3, [r3, #3]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	b25a      	sxtb	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b25b      	sxtb	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	733b      	strb	r3, [r7, #12]
	if (!BMP280_writeByte(inst, BMP280_REG_CTRL, temp_data[0])) return false;
 80024bc:	7b3b      	ldrb	r3, [r7, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	21f4      	movs	r1, #244	; 0xf4
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fca0 	bl	8001e08 <BMP280_writeByte>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <bmp280_init+0xea>
 80024d4:	2300      	movs	r3, #0
 80024d6:	e003      	b.n	80024e0 <bmp280_init+0xf2>

	inst->active = true;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	761a      	strb	r2, [r3, #24]
	return true;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	size_t size = 6;
 80024f0:	2306      	movs	r3, #6
 80024f2:	61fb      	str	r3, [r7, #28]
	if (!BMP280_readBytes(inst, 0xf7, data, size)) return false;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f107 020c 	add.w	r2, r7, #12
 80024fc:	21f7      	movs	r1, #247	; 0xf7
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fc5c 	bl	8001dbc <BMP280_readBytes>
 8002504:	4603      	mov	r3, r0
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <bmp280_update+0x2c>
 8002510:	2300      	movs	r3, #0
 8002512:	e065      	b.n	80025e0 <bmp280_update+0xf8>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002514:	7b3b      	ldrb	r3, [r7, #12]
 8002516:	031a      	lsls	r2, r3, #12
 8002518:	7b7b      	ldrb	r3, [r7, #13]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	4313      	orrs	r3, r2
 800251e:	7bba      	ldrb	r2, [r7, #14]
 8002520:	0912      	lsrs	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	031a      	lsls	r2, r3, #12
 800252c:	7c3b      	ldrb	r3, [r7, #16]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4313      	orrs	r3, r2
 8002532:	7c7a      	ldrb	r2, [r7, #17]
 8002534:	0912      	lsrs	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

	int32_t fine_temp;
	inst->temperature = (float)(compensate_temperature(inst, adc_temp, &fine_temp)) / 100.0;
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	461a      	mov	r2, r3
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fd33 	bl	8001fb0 <compensate_temperature>
 800254a:	ee07 0a90 	vmov	s15, r0
 800254e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002552:	eddf 6a29 	vldr	s13, [pc, #164]	; 80025f8 <bmp280_update+0x110>
 8002556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->pressure = (float)(compensate_pressure(inst, adc_pressure, fine_temp)) / 256.0;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	461a      	mov	r2, r3
 8002564:	69b9      	ldr	r1, [r7, #24]
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fd5b 	bl	8002022 <compensate_pressure>
 800256c:	ee07 0a90 	vmov	s15, r0
 8002570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002574:	eddf 6a21 	vldr	s13, [pc, #132]	; 80025fc <bmp280_update+0x114>
 8002578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->altitude = 44330 * (1.0 - pow(inst->pressure / SEA_PRESSURE, 0.1903));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	edd3 7a03 	vldr	s15, [r3, #12]
 8002588:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002600 <bmp280_update+0x118>
 800258c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002590:	ee16 0a90 	vmov	r0, s13
 8002594:	f7fd ffe8 	bl	8000568 <__aeabi_f2d>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80025e8 <bmp280_update+0x100>
 80025a0:	ec44 3b10 	vmov	d0, r3, r4
 80025a4:	f018 fcda 	bl	801af5c <pow>
 80025a8:	ec54 3b10 	vmov	r3, r4, d0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	f04f 0000 	mov.w	r0, #0
 80025b4:	4913      	ldr	r1, [pc, #76]	; (8002604 <bmp280_update+0x11c>)
 80025b6:	f7fd fe77 	bl	80002a8 <__aeabi_dsub>
 80025ba:	4603      	mov	r3, r0
 80025bc:	460c      	mov	r4, r1
 80025be:	4618      	mov	r0, r3
 80025c0:	4621      	mov	r1, r4
 80025c2:	a30b      	add	r3, pc, #44	; (adr r3, 80025f0 <bmp280_update+0x108>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f826 	bl	8000618 <__aeabi_dmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	460c      	mov	r4, r1
 80025d0:	4618      	mov	r0, r3
 80025d2:	4621      	mov	r1, r4
 80025d4:	f7fe fb18 	bl	8000c08 <__aeabi_d2f>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	615a      	str	r2, [r3, #20]

	return true;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	1a36e2eb 	.word	0x1a36e2eb
 80025ec:	3fc85bc0 	.word	0x3fc85bc0
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40e5a540 	.word	0x40e5a540
 80025f8:	42c80000 	.word	0x42c80000
 80025fc:	43800000 	.word	0x43800000
 8002600:	447a8000 	.word	0x447a8000
 8002604:	3ff00000 	.word	0x3ff00000

08002608 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
 800260c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 8002620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <millis+0x1c>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <println>:
{
 800263c:	b40f      	push	{r0, r1, r2, r3}
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
	if (usbPresent)
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <println+0xb4>)
 8002646:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800264a:	2b03      	cmp	r3, #3
 800264c:	d147      	bne.n	80026de <println+0xa2>
		writePin(LEDD, HIGH);
 800264e:	2201      	movs	r2, #1
 8002650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002654:	4827      	ldr	r0, [pc, #156]	; (80026f4 <println+0xb8>)
 8002656:	f005 f8dd 	bl	8007814 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	69b9      	ldr	r1, [r7, #24]
 8002664:	4824      	ldr	r0, [pc, #144]	; (80026f8 <println+0xbc>)
 8002666:	f016 fbdd 	bl	8018e24 <vsiprintf>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <println+0xc0>)
 8002670:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <println+0xc0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <println+0xbc>)
 8002678:	210d      	movs	r1, #13
 800267a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <println+0xc0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <println+0xbc>)
 8002684:	210a      	movs	r1, #10
 8002686:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <println+0xc0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3302      	adds	r3, #2
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <println+0xbc>)
 8002690:	2100      	movs	r1, #0
 8002692:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <println+0xc0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3303      	adds	r3, #3
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <println+0xc0>)
 800269c:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800269e:	f7ff ffb3 	bl	8002608 <micros>
 80026a2:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <println+0xc0>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	3346      	adds	r3, #70	; 0x46
 80026b2:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80026b4:	e001      	b.n	80026ba <println+0x7e>
			if (micros() - printStart > timeout && false)
 80026b6:	f7ff ffa7 	bl	8002608 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <println+0xc0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	480d      	ldr	r0, [pc, #52]	; (80026f8 <println+0xbc>)
 80026c4:	f014 f8a2 	bl	801680c <CDC_Transmit_FS>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d0f3      	beq.n	80026b6 <println+0x7a>
		writePin(LEDD, LOW);
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <println+0xb8>)
 80026d6:	f005 f89d 	bl	8007814 <HAL_GPIO_WritePin>
		return true;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <println+0xa4>
	return false;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026ea:	b004      	add	sp, #16
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000e3c 	.word	0x20000e3c
 80026f4:	40020400 	.word	0x40020400
 80026f8:	200005e4 	.word	0x200005e4
 80026fc:	200005e0 	.word	0x200005e0

08002700 <GPS_read>:
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);	// wait for finished transmission
	return true;
}

char GPS_read(GPS* inst)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	static uint32_t firstChar = 0;	// first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002708:	f7ff ff88 	bl	800261c <millis>
 800270c:	60f8      	str	r0, [r7, #12]
	char c = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	72fb      	strb	r3, [r7, #11]
	if (inst->paused) return c;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <GPS_read+0x20>
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	e069      	b.n	80027f4 <GPS_read+0xf4>

	c = (char)inst->uartBuffer[0];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8002726:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002734:	b2db      	uxtb	r3, r3
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	b2c8      	uxtb	r0, r1
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8002740:	4413      	add	r3, r2
 8002742:	7afa      	ldrb	r2, [r7, #11]
 8002744:	701a      	strb	r2, [r3, #0]
	// [!!!] \/ wtf is that
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b77      	cmp	r3, #119	; 0x77
 8002750:	d903      	bls.n	800275a <GPS_read+0x5a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2277      	movs	r2, #119	; 0x77
 8002756:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	2b0a      	cmp	r3, #10
 800275e:	d141      	bne.n	80027e4 <GPS_read+0xe4>
	{
		inst->currentline[inst->lineidx] = 0;	// add endline character
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4413      	add	r3, r2
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	33d8      	adds	r3, #216	; 0xd8
 800277e:	429a      	cmp	r2, r3
 8002780:	d10c      	bne.n	800279c <GPS_read+0x9c>
		{
			inst->currentline = inst->line2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 800279a:	e00b      	b.n	80027b4 <GPS_read+0xb4>
		}
		else
		{
			inst->currentline = inst->line1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		inst->lineidx = 0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis();	// time we got the end of the string
 80027c4:	f7ff ff2a 	bl	800261c <millis>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <GPS_read+0xfc>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0;				// there are no characters yet
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <GPS_read+0xfc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
		return c;					// wait until next character to set time
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	e007      	b.n	80027f4 <GPS_read+0xf4>
	}

	if (firstChar == 0) firstChar = tStart;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <GPS_read+0xfc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <GPS_read+0xf2>
 80027ec:	4a03      	ldr	r2, [pc, #12]	; (80027fc <GPS_read+0xfc>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6013      	str	r3, [r2, #0]
	return c;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200007e4 	.word	0x200007e4

08002800 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2258      	movs	r2, #88	; 0x58
 800293a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2258      	movs	r2, #88	; 0x58
 8002942:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2258      	movs	r2, #88	; 0x58
 800294a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2203      	movs	r2, #3
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f014 fc02 	bl	8017166 <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3307      	adds	r3, #7
 8002966:	2214      	movs	r2, #20
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f014 fbfb 	bl	8017166 <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	331b      	adds	r3, #27
 8002974:	2203      	movs	r2, #3
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f014 fbf4 	bl	8017166 <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	331e      	adds	r3, #30
 8002982:	2214      	movs	r2, #20
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f014 fbed 	bl	8017166 <memset>

	memset(inst->txtTXT, 0x00, 63);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3388      	adds	r3, #136	; 0x88
 8002990:	223f      	movs	r2, #63	; 0x3f
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f014 fbe6 	bl	8017166 <memset>
	inst->txtTot = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a41      	ldr	r2, [pc, #260]	; (8002abc <GPS_init+0x2bc>)
 80029b6:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a40      	ldr	r2, [pc, #256]	; (8002ac0 <GPS_init+0x2c0>)
 80029be:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <GPS_init+0x2c4>)
 80029c6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a3e      	ldr	r2, [pc, #248]	; (8002ac8 <GPS_init+0x2c8>)
 80029ce:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <GPS_init+0x2cc>)
 80029d6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a3c      	ldr	r2, [pc, #240]	; (8002ad0 <GPS_init+0x2d0>)
 80029de:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <GPS_init+0x2d4>)
 80029e6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a3a      	ldr	r2, [pc, #232]	; (8002ad8 <GPS_init+0x2d8>)
 80029ee:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a39      	ldr	r2, [pc, #228]	; (8002adc <GPS_init+0x2dc>)
 80029f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a33      	ldr	r2, [pc, #204]	; (8002acc <GPS_init+0x2cc>)
 80029fe:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a31      	ldr	r2, [pc, #196]	; (8002acc <GPS_init+0x2cc>)
 8002a06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	HAL_Delay(1000);
 8002a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a0e:	f004 f883 	bl	8006b18 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 8002a12:	4933      	ldr	r1, [pc, #204]	; (8002ae0 <GPS_init+0x2e0>)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f867 	bl	8002ae8 <GPS_sendCommand>

	HAL_Delay(1000);
 8002a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a1e:	f004 f87b 	bl	8006b18 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8002a22:	4930      	ldr	r1, [pc, #192]	; (8002ae4 <GPS_init+0x2e4>)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f85f 	bl	8002ae8 <GPS_sendCommand>

	HAL_Delay(1000);
 8002a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a2e:	f004 f873 	bl	8006b18 <HAL_Delay>

	//GPS_sendCommand(inst, PMTK_API_SET_FIX_CTL_1HZ);
	//GPS_sendCommand(inst, PGCMD_ANTENNA);
	//GPS_sendCommand(inst, PMTK_Q_RELEASE);

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4619      	mov	r1, r3
 8002a42:	f00a fc67 	bl	800d314 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 8002a46:	f7ff fde9 	bl	800261c <millis>
 8002a4a:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 8002a4c:	e029      	b.n	8002aa2 <GPS_init+0x2a2>
	{
		//GPS_read(inst);
		if (GPS_newNMEAreceived(inst))
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 ffc3 	bl	80039da <GPS_newNMEAreceived>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d023      	beq.n	8002aa2 <GPS_init+0x2a2>
		{
			// not exact, but works now
			println(GPS_lastNMEA(inst));
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 ffcb 	bl	80039f6 <GPS_lastNMEA>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fdea 	bl	800263c <println>
			GPS_parse(inst, GPS_lastNMEA(inst));
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 ffc4 	bl	80039f6 <GPS_lastNMEA>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f868 	bl	8002b48 <GPS_parse>
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 ffbc 	bl	80039f6 <GPS_lastNMEA>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b24      	cmp	r3, #36	; 0x24
 8002a84:	d10d      	bne.n	8002aa2 <GPS_init+0x2a2>
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 ffb5 	bl	80039f6 <GPS_lastNMEA>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	3301      	adds	r3, #1
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b47      	cmp	r3, #71	; 0x47
 8002a94:	d105      	bne.n	8002aa2 <GPS_init+0x2a2>
			{
				//GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
				//GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
				inst->active = true;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
				return true;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e008      	b.n	8002ab4 <GPS_init+0x2b4>
	while (millis() - timeout <= 1000)
 8002aa2:	f7ff fdbb 	bl	800261c <millis>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab0:	d9cd      	bls.n	8002a4e <GPS_init+0x24e>

			}
		}
	}
	return true;
 8002ab2:	2301      	movs	r3, #1
//	return false;
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	0801db5c 	.word	0x0801db5c
 8002ac0:	0801db60 	.word	0x0801db60
 8002ac4:	0801db64 	.word	0x0801db64
 8002ac8:	0801db68 	.word	0x0801db68
 8002acc:	0801db6c 	.word	0x0801db6c
 8002ad0:	0801db70 	.word	0x0801db70
 8002ad4:	0801db74 	.word	0x0801db74
 8002ad8:	0801db78 	.word	0x0801db78
 8002adc:	0801db7c 	.word	0x0801db7c
 8002ae0:	0801db80 	.word	0x0801db80
 8002ae4:	0801dbb4 	.word	0x0801dbb4

08002ae8 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8002af8:	6838      	ldr	r0, [r7, #0]
 8002afa:	f7fd fb73 	bl	80001e4 <strlen>
 8002afe:	4603      	mov	r3, r0
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f00a fb6a 	bl	800d1e2 <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8002b0e:	bf00      	nop
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00a fd62 	bl	800d5e0 <HAL_UART_GetState>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1f6      	bne.n	8002b10 <GPS_sendCommand+0x28>
	uint8_t nla[2] = {(uint8_t)('\r'), (uint8_t)('\n')};
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <GPS_sendCommand+0x5c>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(inst->uart, nla, 2, HAL_MAX_DELAY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002b2e:	f107 010c 	add.w	r1, r7, #12
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	2202      	movs	r2, #2
 8002b38:	f00a fb53 	bl	800d1e2 <HAL_UART_Transmit>
	//println("[GPS] finished");
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	0801dbc4 	.word	0x0801dbc4

08002b48 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb65 	bl	8003224 <GPS_check>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <GPS_parse+0x22>
 8002b66:	2300      	movs	r3, #0
 8002b68:	e355      	b.n	8003216 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f015 fa2c 	bl	8017fce <strchr>
 8002b76:	4603      	mov	r3, r0
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3307      	adds	r3, #7
 8002b80:	49a5      	ldr	r1, [pc, #660]	; (8002e18 <GPS_parse+0x2d0>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fb24 	bl	80001d0 <strcmp>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80e6 	bne.w	8002d5c <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fcc6 	bl	8003524 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f015 fa17 	bl	8017fce <strchr>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fd09 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f015 fa0c 	bl	8017fce <strchr>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002bbc:	6979      	ldr	r1, [r7, #20]
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fdb4 	bl	800372c <GPS_parseLatDir>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <GPS_parse+0x8c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e320      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f015 f9f9 	bl	8017fce <strchr>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fde1 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	6978      	ldr	r0, [r7, #20]
 8002bee:	f015 f9ee 	bl	8017fce <strchr>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fe7e 	bl	80038fc <GPS_parseLonDir>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <GPS_parse+0xc8>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e302      	b.n	8003216 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002c10:	212c      	movs	r1, #44	; 0x2c
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f015 f9db 	bl	8017fce <strchr>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fc66 	bl	80034f2 <GPS_isEmpty>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01b      	beq.n	8002c6a <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f014 fa4a 	bl	80170cc <atoi>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002c60:	e003      	b.n	8002c6a <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f015 f9ae 	bl	8017fce <strchr>
 8002c72:	4603      	mov	r3, r0
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fc39 	bl	80034f2 <GPS_isEmpty>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <GPS_parse+0x154>
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f014 fa1d 	bl	80170cc <atoi>
 8002c92:	4603      	mov	r3, r0
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f015 f995 	bl	8017fce <strchr>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002caa:	6979      	ldr	r1, [r7, #20]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fc20 	bl	80034f2 <GPS_isEmpty>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <GPS_parse+0x18e>
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f014 fa01 	bl	80170c6 <atof>
 8002cc4:	ec54 3b10 	vmov	r3, r4, d0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4621      	mov	r1, r4
 8002ccc:	f7fd ff9c 	bl	8000c08 <__aeabi_d2f>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	6978      	ldr	r0, [r7, #20]
 8002cda:	f015 f978 	bl	8017fce <strchr>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fc03 	bl	80034f2 <GPS_isEmpty>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <GPS_parse+0x1c8>
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f014 f9e4 	bl	80170c6 <atof>
 8002cfe:	ec54 3b10 	vmov	r3, r4, d0
 8002d02:	4618      	mov	r0, r3
 8002d04:	4621      	mov	r1, r4
 8002d06:	f7fd ff7f 	bl	8000c08 <__aeabi_d2f>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f015 f95b 	bl	8017fce <strchr>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f015 f954 	bl	8017fce <strchr>
 8002d26:	4603      	mov	r3, r0
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002d2c:	6979      	ldr	r1, [r7, #20]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fbdf 	bl	80034f2 <GPS_isEmpty>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8251 	beq.w	80031e4 <GPS_parse+0x69c>
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f014 f9bf 	bl	80170c6 <atof>
 8002d48:	ec54 3b10 	vmov	r3, r4, d0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7fd ff5a 	bl	8000c08 <__aeabi_d2f>
 8002d54:	4602      	mov	r2, r0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
 8002d5a:	e243      	b.n	80031e4 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3307      	adds	r3, #7
 8002d60:	492e      	ldr	r1, [pc, #184]	; (8002e1c <GPS_parse+0x2d4>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fa34 	bl	80001d0 <strcmp>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 80e3 	bne.w	8002f36 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fbd6 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	6978      	ldr	r0, [r7, #20]
 8002d7c:	f015 f927 	bl	8017fce <strchr>
 8002d80:	4603      	mov	r3, r0
 8002d82:	3301      	adds	r3, #1
 8002d84:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fe00 	bl	800398e <GPS_parseFix>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <GPS_parse+0x256>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e23b      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f015 f914 	bl	8017fce <strchr>
 8002da6:	4603      	mov	r3, r0
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc06 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f015 f909 	bl	8017fce <strchr>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fcb1 	bl	800372c <GPS_parseLatDir>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <GPS_parse+0x292>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e21d      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f015 f8f6 	bl	8017fce <strchr>
 8002de2:	4603      	mov	r3, r0
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fcde 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f015 f8eb 	bl	8017fce <strchr>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fd7b 	bl	80038fc <GPS_parseLonDir>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <GPS_parse+0x2d8>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e1ff      	b.n	8003216 <GPS_parse+0x6ce>
 8002e16:	bf00      	nop
 8002e18:	0801db70 	.word	0x0801db70
 8002e1c:	0801db7c 	.word	0x0801db7c

		// speed
		p = strchr(p, ',') + 1;
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f015 f8d3 	bl	8017fce <strchr>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb5e 	bl	80034f2 <GPS_isEmpty>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f083 0301 	eor.w	r3, r3, #1
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <GPS_parse+0x312>
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f014 f93f 	bl	80170c6 <atof>
 8002e48:	ec54 3b10 	vmov	r3, r4, d0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f7fd feda 	bl	8000c08 <__aeabi_d2f>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	6978      	ldr	r0, [r7, #20]
 8002e5e:	f015 f8b6 	bl	8017fce <strchr>
 8002e62:	4603      	mov	r3, r0
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fb41 	bl	80034f2 <GPS_isEmpty>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <GPS_parse+0x34c>
 8002e7c:	6978      	ldr	r0, [r7, #20]
 8002e7e:	f014 f922 	bl	80170c6 <atof>
 8002e82:	ec54 3b10 	vmov	r3, r4, d0
 8002e86:	4618      	mov	r0, r3
 8002e88:	4621      	mov	r1, r4
 8002e8a:	f7fd febd 	bl	8000c08 <__aeabi_d2f>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f015 f899 	bl	8017fce <strchr>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002ea2:	6979      	ldr	r1, [r7, #20]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fb24 	bl	80034f2 <GPS_isEmpty>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f083 0301 	eor.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8196 	beq.w	80031e4 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f014 f904 	bl	80170c6 <atof>
 8002ebe:	ec54 3b10 	vmov	r3, r4, d0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	f7fd fe9f 	bl	8000c08 <__aeabi_d2f>
 8002eca:	ee07 0a90 	vmov	s15, r0
 8002ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed2:	ee17 3a90 	vmov	r3, s15
 8002ed6:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a8b      	ldr	r2, [pc, #556]	; (8003108 <GPS_parse+0x5c0>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0b5b      	lsrs	r3, r3, #13
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <GPS_parse+0x5c0>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	0b5b      	lsrs	r3, r3, #13
 8002ef4:	f242 7110 	movw	r1, #10000	; 0x2710
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	4a83      	ldr	r2, [pc, #524]	; (800310c <GPS_parse+0x5c4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <GPS_parse+0x5c4>)
 8002f12:	fba3 1302 	umull	r1, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2164      	movs	r1, #100	; 0x64
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002f34:	e156      	b.n	80031e4 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	4975      	ldr	r1, [pc, #468]	; (8003110 <GPS_parse+0x5c8>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd f947 	bl	80001d0 <strcmp>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d153      	bne.n	8002ff0 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fb38 	bl	80035c0 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	6978      	ldr	r0, [r7, #20]
 8002f54:	f015 f83b 	bl	8017fce <strchr>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbe3 	bl	800372c <GPS_parseLatDir>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <GPS_parse+0x42e>
 8002f72:	2300      	movs	r3, #0
 8002f74:	e14f      	b.n	8003216 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f015 f828 	bl	8017fce <strchr>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fc10 	bl	80037ac <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f015 f81d 	bl	8017fce <strchr>
 8002f94:	4603      	mov	r3, r0
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fcad 	bl	80038fc <GPS_parseLonDir>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <GPS_parse+0x46a>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e131      	b.n	8003216 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f015 f80a 	bl	8017fce <strchr>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faae 	bl	8003524 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f014 ffff 	bl	8017fce <strchr>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002fd6:	6979      	ldr	r1, [r7, #20]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fcd8 	bl	800398e <GPS_parseFix>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f083 0301 	eor.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80fc 	beq.w	80031e4 <GPS_parse+0x69c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e112      	b.n	8003216 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	4947      	ldr	r1, [pc, #284]	; (8003114 <GPS_parse+0x5cc>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f8ea 	bl	80001d0 <strcmp>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 808a 	bne.w	8003118 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f014 ffe1 	bl	8017fce <strchr>
 800300c:	4603      	mov	r3, r0
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa6c 	bl	80034f2 <GPS_isEmpty>
 800301a:	4603      	mov	r3, r0
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <GPS_parse+0x4ee>
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f014 f850 	bl	80170cc <atoi>
 800302c:	4603      	mov	r3, r0
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e009      	b.n	8003050 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f014 ffc5 	bl	8017fce <strchr>
 8003044:	4603      	mov	r3, r0
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0b      	cmp	r3, #11
 8003054:	ddf2      	ble.n	800303c <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f014 ffb8 	bl	8017fce <strchr>
 800305e:	4603      	mov	r3, r0
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa43 	bl	80034f2 <GPS_isEmpty>
 800306c:	4603      	mov	r3, r0
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <GPS_parse+0x548>
 8003078:	6978      	ldr	r0, [r7, #20]
 800307a:	f014 f824 	bl	80170c6 <atof>
 800307e:	ec54 3b10 	vmov	r3, r4, d0
 8003082:	4618      	mov	r0, r3
 8003084:	4621      	mov	r1, r4
 8003086:	f7fd fdbf 	bl	8000c08 <__aeabi_d2f>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f014 ff9b 	bl	8017fce <strchr>
 8003098:	4603      	mov	r3, r0
 800309a:	3301      	adds	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa26 	bl	80034f2 <GPS_isEmpty>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <GPS_parse+0x582>
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f014 f807 	bl	80170c6 <atof>
 80030b8:	ec54 3b10 	vmov	r3, r4, d0
 80030bc:	4618      	mov	r0, r3
 80030be:	4621      	mov	r1, r4
 80030c0:	f7fd fda2 	bl	8000c08 <__aeabi_d2f>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f014 ff7e 	bl	8017fce <strchr>
 80030d2:	4603      	mov	r3, r0
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa09 	bl	80034f2 <GPS_isEmpty>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d07b      	beq.n	80031e4 <GPS_parse+0x69c>
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f013 ffea 	bl	80170c6 <atof>
 80030f2:	ec54 3b10 	vmov	r3, r4, d0
 80030f6:	4618      	mov	r0, r3
 80030f8:	4621      	mov	r1, r4
 80030fa:	f7fd fd85 	bl	8000c08 <__aeabi_d2f>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	66da      	str	r2, [r3, #108]	; 0x6c
 8003104:	e06e      	b.n	80031e4 <GPS_parse+0x69c>
 8003106:	bf00      	nop
 8003108:	d1b71759 	.word	0xd1b71759
 800310c:	51eb851f 	.word	0x51eb851f
 8003110:	0801db74 	.word	0x0801db74
 8003114:	0801db78 	.word	0x0801db78
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3307      	adds	r3, #7
 800311c:	4940      	ldr	r1, [pc, #256]	; (8003220 <GPS_parse+0x6d8>)
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f856 	bl	80001d0 <strcmp>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15a      	bne.n	80031e0 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e0 	bl	80034f2 <GPS_isEmpty>
 8003132:	4603      	mov	r3, r0
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <GPS_parse+0x604>
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f013 ffc4 	bl	80170cc <atoi>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f014 ff3d 	bl	8017fce <strchr>
 8003154:	4603      	mov	r3, r0
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f9c8 	bl	80034f2 <GPS_isEmpty>
 8003162:	4603      	mov	r3, r0
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <GPS_parse+0x634>
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f013 ffac 	bl	80170cc <atoi>
 8003174:	4602      	mov	r2, r0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f014 ff25 	bl	8017fce <strchr>
 8003184:	4603      	mov	r3, r0
 8003186:	3301      	adds	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f9b0 	bl	80034f2 <GPS_isEmpty>
 8003192:	4603      	mov	r3, r0
 8003194:	f083 0301 	eor.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <GPS_parse+0x664>
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f013 ff94 	bl	80170cc <atoi>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f014 ff0d 	bl	8017fce <strchr>
 80031b4:	4603      	mov	r3, r0
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f998 	bl	80034f2 <GPS_isEmpty>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <GPS_parse+0x69c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 80031d4:	233d      	movs	r3, #61	; 0x3d
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f923 	bl	8003424 <GPS_parseStr>
 80031de:	e001      	b.n	80031e4 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e018      	b.n	8003216 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 021b 	add.w	r2, r3, #27
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f014 fef9 	bl	8017fe8 <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f103 021e 	add.w	r2, r3, #30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3307      	adds	r3, #7
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f014 fef0 	bl	8017fe8 <strcpy>
	inst->lastUpdate = millis();
 8003208:	f7ff fa08 	bl	800261c <millis>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	0801dbc8 	.word	0x0801dbc8

08003224 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b24      	cmp	r3, #36	; 0x24
 800323a:	d001      	beq.n	8003240 <GPS_check+0x1c>
 800323c:	2300      	movs	r3, #0
 800323e:	e0ad      	b.n	800339c <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800324e:	e002      	b.n	8003256 <GPS_check+0x32>
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	3301      	adds	r3, #1
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f8      	bne.n	8003250 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 800325e:	e002      	b.n	8003266 <GPS_check+0x42>
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	3b01      	subs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b2a      	cmp	r3, #42	; 0x2a
 800326c:	d003      	beq.n	8003276 <GPS_check+0x52>
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d8f4      	bhi.n	8003260 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b2a      	cmp	r3, #42	; 0x2a
 800327c:	d001      	beq.n	8003282 <GPS_check+0x5e>
 800327e:	2300      	movs	r3, #0
 8003280:	e08c      	b.n	800339c <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fbc4 	bl	8003a18 <GPS_parseHex>
 8003290:	4603      	mov	r3, r0
 8003292:	b29b      	uxth	r3, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fbb9 	bl	8003a18 <GPS_parseHex>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ac:	4413      	add	r3, r2
 80032ae:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e008      	b.n	80032ce <GPS_check+0xaa>
		{
			sum ^=* p1;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032c4:	4053      	eors	r3, r2
 80032c6:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3301      	adds	r3, #1
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f2      	bcc.n	80032bc <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 80032d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <GPS_check+0xbc>
 80032dc:	2300      	movs	r3, #0
 80032de:	e05d      	b.n	800339c <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80032f6:	461a      	mov	r2, r3
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f852 	bl	80033a4 <GPS_tokenOnList>
 8003300:	6138      	str	r0, [r7, #16]
	if (src)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01f      	beq.n	8003348 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	6939      	ldr	r1, [r7, #16]
 800330e:	4618      	mov	r0, r3
 8003310:	f014 fe6a 	bl	8017fe8 <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f103 020a 	add.w	r2, r3, #10
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8003320:	6938      	ldr	r0, [r7, #16]
 8003322:	f7fc ff5f 	bl	80001e4 <strlen>
 8003326:	4602      	mov	r2, r0
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003334:	461a      	mov	r2, r3
 8003336:	6979      	ldr	r1, [r7, #20]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f833 	bl	80033a4 <GPS_tokenOnList>
 800333e:	60f8      	str	r0, [r7, #12]
	if (snc)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00f      	beq.n	8003366 <GPS_check+0x142>
 8003346:	e001      	b.n	800334c <GPS_check+0x128>
	else return false;
 8003348:	2300      	movs	r3, #0
 800334a:	e027      	b.n	800339c <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3307      	adds	r3, #7
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f014 fe48 	bl	8017fe8 <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e019      	b.n	800339a <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800336c:	461a      	mov	r2, r3
 800336e:	6979      	ldr	r1, [r7, #20]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f817 	bl	80033a4 <GPS_tokenOnList>
 8003376:	60f8      	str	r0, [r7, #12]
		if (snc)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3307      	adds	r3, #7
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	f014 fe2f 	bl	8017fe8 <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f103 0214 	add.w	r2, r3, #20
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]
			return false;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033b4:	e01e      	b.n	80033f4 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	681c      	ldr	r4, [r3, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fc ff0a 	bl	80001e4 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4620      	mov	r0, r4
 80033d8:	f014 fe0e 	bl	8017ff8 <strncmp>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <GPS_tokenOnList+0x4a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e014      	b.n	8003418 <GPS_tokenOnList+0x74>
		i++;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2202      	movs	r2, #2
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <GPS_tokenOnList+0x7c>)
 8003402:	4618      	mov	r0, r3
 8003404:	f014 fdf8 	bl	8017ff8 <strncmp>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <GPS_tokenOnList+0x72>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003414:	dbcf      	blt.n	80033b6 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	0801dbcc 	.word	0x0801dbcc

08003424 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f014 fdca 	bl	8017fce <strchr>
 800343a:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	4293      	cmp	r3, r2
 800345a:	bfa8      	it	ge
 800345c:	4613      	movge	r3, r2
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	461a      	mov	r2, r3
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f014 fdd8 	bl	801801c <strncpy>
		buff[len] = 0;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e037      	b.n	80034e8 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 8003478:	212a      	movs	r1, #42	; 0x2a
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f014 fda7 	bl	8017fce <strchr>
 8003480:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	4293      	cmp	r3, r2
 800349c:	bfa8      	it	ge
 800349e:	4613      	movge	r3, r2
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	461a      	mov	r2, r3
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f014 fdb7 	bl	801801c <strncpy>
			buff[e - p] = 0;
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e013      	b.n	80034e8 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fc fe8f 	bl	80001e4 <strlen>
 80034c6:	4603      	mov	r3, r0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bfa8      	it	ge
 80034d8:	4613      	movge	r3, r2
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	461a      	mov	r2, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	68b8      	ldr	r0, [r7, #8]
 80034e4:	f014 fd9a 	bl	801801c <strncpy>
		}
	}
	return buff;
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3730      	adds	r7, #48	; 0x30
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b2c      	cmp	r3, #44	; 0x2c
 8003502:	d008      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d004      	beq.n	8003516 <GPS_isEmpty+0x24>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <GPS_isEmpty+0x24>
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <GPS_isEmpty+0x26>
	else return true;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f013 fdd0 	bl	80170d4 <atol>
 8003534:	4603      	mov	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <GPS_parseTime+0x94>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0b5b      	lsrs	r3, r3, #13
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <GPS_parseTime+0x94>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f242 7110 	movw	r1, #10000	; 0x2710
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <GPS_parseTime+0x98>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <GPS_parseTime+0x98>)
 8003572:	fba3 1302 	umull	r1, r3, r3, r2
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2164      	movs	r1, #100	; 0x64
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 8003588:	212e      	movs	r1, #46	; 0x2e
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f014 fd1f 	bl	8017fce <strchr>
 8003590:	4603      	mov	r3, r0
 8003592:	3301      	adds	r3, #1
 8003594:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f013 fd98 	bl	80170cc <atoi>
 800359c:	4603      	mov	r3, r0
 800359e:	b29a      	uxth	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 80035b0:	bf00      	nop
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	d1b71759 	.word	0xd1b71759
 80035bc:	51eb851f 	.word	0x51eb851f

080035c0 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 80035c0:	b5b0      	push	{r4, r5, r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80035ca:	6839      	ldr	r1, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ff90 	bl	80034f2 <GPS_isEmpty>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8092 	beq.w	8003704 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	2202      	movs	r2, #2
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f014 fd17 	bl	801801c <strncpy>
		p += 2;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3302      	adds	r3, #2
 80035f2:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80035f4:	2300      	movs	r3, #0
 80035f6:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4618      	mov	r0, r3
 80035fe:	f013 fd69 	bl	80170d4 <atol>
 8003602:	4602      	mov	r2, r0
 8003604:	4b44      	ldr	r3, [pc, #272]	; (8003718 <GPS_parseLat+0x158>)
 8003606:	fb03 f302 	mul.w	r3, r3, r2
 800360a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	2202      	movs	r2, #2
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f014 fd01 	bl	801801c <strncpy>
		p += 3;										// skip decimal point
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3303      	adds	r3, #3
 800361e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	3302      	adds	r3, #2
 8003626:	2204      	movs	r2, #4
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f014 fcf6 	bl	801801c <strncpy>
		degreebuff[6] = '\0';
 8003630:	2300      	movs	r3, #0
 8003632:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f013 fd4b 	bl	80170d4 <atol>
 800363e:	4602      	mov	r2, r0
 8003640:	2332      	movs	r3, #50	; 0x32
 8003642:	fb03 f302 	mul.w	r3, r3, r2
 8003646:	4a35      	ldr	r2, [pc, #212]	; (800371c <GPS_parseLat+0x15c>)
 8003648:	fb82 1203 	smull	r1, r2, r2, r3
 800364c:	17db      	asrs	r3, r3, #31
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <GPS_parseLat+0x160>)
 8003660:	fb82 1203 	smull	r1, r2, r2, r3
 8003664:	1352      	asrs	r2, r2, #13
 8003666:	17db      	asrs	r3, r3, #31
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6a 	bl	8000544 <__aeabi_i2d>
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	69b8      	ldr	r0, [r7, #24]
 8003676:	f7fc ff65 	bl	8000544 <__aeabi_i2d>
 800367a:	a325      	add	r3, pc, #148	; (adr r3, 8003710 <GPS_parseLat+0x150>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ffca 	bl	8000618 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc fe0e 	bl	80002ac <__adddf3>
 8003690:	4603      	mov	r3, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4618      	mov	r0, r3
 8003696:	4621      	mov	r1, r4
 8003698:	f7fd fab6 	bl	8000c08 <__aeabi_d2f>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ae:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003724 <GPS_parseLat+0x164>
 80036b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ba:	ee17 2a90 	vmov	r2, s15
 80036be:	2364      	movs	r3, #100	; 0x64
 80036c0:	fb03 f302 	mul.w	r3, r3, r2
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036d0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003728 <GPS_parseLat+0x168>
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80036ea:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003724 <GPS_parseLat+0x164>
 80036ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003704:	bf00      	nop
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bdb0      	pop	{r4, r5, r7, pc}
 800370c:	f3af 8000 	nop.w
 8003710:	7110e454 	.word	0x7110e454
 8003714:	3ed92a73 	.word	0x3ed92a73
 8003718:	00989680 	.word	0x00989680
 800371c:	55555556 	.word	0x55555556
 8003720:	14f8b589 	.word	0x14f8b589
 8003724:	42c80000 	.word	0x42c80000
 8003728:	42700000 	.word	0x42700000

0800372c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800372c:	b590      	push	{r4, r7, lr}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b53      	cmp	r3, #83	; 0x53
 800373c:	d11c      	bne.n	8003778 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2253      	movs	r2, #83	; 0x53
 8003742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff0c 	bl	8000568 <__aeabi_f2d>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	4618      	mov	r0, r3
 8003756:	4621      	mov	r1, r4
 8003758:	f7fd fa56 	bl	8000c08 <__aeabi_d2f>
 800375c:	4603      	mov	r3, r0
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef1 7a67 	vneg.f32	s15, s15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	425a      	negs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
 8003776:	e013      	b.n	80037a0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b4e      	cmp	r3, #78	; 0x4e
 800377e:	d104      	bne.n	800378a <GPS_parseLatDir+0x5e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	224e      	movs	r2, #78	; 0x4e
 8003784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003788:	e00a      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b2c      	cmp	r3, #44	; 0x2c
 8003790:	d104      	bne.n	800379c <GPS_parseLatDir+0x70>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800379a:	e001      	b.n	80037a0 <GPS_parseLatDir+0x74>
	else return false;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <GPS_parseLatDir+0x76>
	
	return true;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
	...

080037ac <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff fe9a 	bl	80034f2 <GPS_isEmpty>
 80037be:	4603      	mov	r3, r0
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8088 	beq.w	80038dc <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2203      	movs	r2, #3
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f014 fc21 	bl	801801c <strncpy>
		p += 3;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	3303      	adds	r3, #3
 80037de:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	4618      	mov	r0, r3
 80037ea:	f013 fc73 	bl	80170d4 <atol>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <GPS_parseLon+0x138>)
 80037f2:	fb03 f302 	mul.w	r3, r3, r2
 80037f6:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	2202      	movs	r2, #2
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f014 fc0b 	bl	801801c <strncpy>
		p += 3;										// skip decimal point
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3303      	adds	r3, #3
 800380a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	3302      	adds	r3, #2
 8003812:	2204      	movs	r2, #4
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f014 fc00 	bl	801801c <strncpy>
		degreebuff[6] = '\0';
 800381c:	2300      	movs	r3, #0
 800381e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	4618      	mov	r0, r3
 8003826:	f013 fc55 	bl	80170d4 <atol>
 800382a:	4602      	mov	r2, r0
 800382c:	2332      	movs	r3, #50	; 0x32
 800382e:	fb03 f302 	mul.w	r3, r3, r2
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <GPS_parseLon+0x13c>)
 8003834:	fb82 1203 	smull	r1, r2, r2, r3
 8003838:	17db      	asrs	r3, r3, #31
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	441a      	add	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4a28      	ldr	r2, [pc, #160]	; (80038ec <GPS_parseLon+0x140>)
 800384c:	fb82 1203 	smull	r1, r2, r2, r3
 8003850:	1352      	asrs	r2, r2, #13
 8003852:	17db      	asrs	r3, r3, #31
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003868:	eddf 6a21 	vldr	s13, [pc, #132]	; 80038f0 <GPS_parseLon+0x144>
 800386c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003886:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80038f4 <GPS_parseLon+0x148>
 800388a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800388e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003892:	ee17 2a90 	vmov	r2, s15
 8003896:	2364      	movs	r3, #100	; 0x64
 8003898:	fb03 f302 	mul.w	r3, r3, r2
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038a8:	eddf 6a13 	vldr	s13, [pc, #76]	; 80038f8 <GPS_parseLon+0x14c>
 80038ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80038c2:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80038f4 <GPS_parseLon+0x148>
 80038c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80038ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00989680 	.word	0x00989680
 80038e8:	55555556 	.word	0x55555556
 80038ec:	14f8b589 	.word	0x14f8b589
 80038f0:	36c9539c 	.word	0x36c9539c
 80038f4:	42c80000 	.word	0x42c80000
 80038f8:	42700000 	.word	0x42700000

080038fc <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fdf2 	bl	80034f2 <GPS_isEmpty>
 800390e:	4603      	mov	r3, r0
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d034      	beq.n	8003984 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b57      	cmp	r3, #87	; 0x57
 8003920:	d11c      	bne.n	800395c <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2257      	movs	r2, #87	; 0x57
 8003926:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe1a 	bl	8000568 <__aeabi_f2d>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	4618      	mov	r0, r3
 800393a:	4621      	mov	r1, r4
 800393c:	f7fd f964 	bl	8000c08 <__aeabi_d2f>
 8003940:	4603      	mov	r3, r0
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef1 7a67 	vneg.f32	s15, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	425a      	negs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	649a      	str	r2, [r3, #72]	; 0x48
 800395a:	e013      	b.n	8003984 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b45      	cmp	r3, #69	; 0x45
 8003962:	d104      	bne.n	800396e <GPS_parseLonDir+0x72>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2245      	movs	r2, #69	; 0x45
 8003968:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800396c:	e00a      	b.n	8003984 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b2c      	cmp	r3, #44	; 0x2c
 8003974:	d104      	bne.n	8003980 <GPS_parseLonDir+0x84>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800397e:	e001      	b.n	8003984 <GPS_parseLonDir+0x88>
		else return false;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <GPS_parseLonDir+0x8a>
	}
	return true;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}

0800398e <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b41      	cmp	r3, #65	; 0x41
 800399e:	d10a      	bne.n	80039b6 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80039b4:	e00a      	b.n	80039cc <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b56      	cmp	r3, #86	; 0x56
 80039bc:	d104      	bne.n	80039c8 <GPS_parseFix+0x3a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80039c6:	e001      	b.n	80039cc <GPS_parseFix+0x3e>
	else return false;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <GPS_parseFix+0x40>
	return true;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b2f      	cmp	r3, #47	; 0x2f
 8003a28:	d801      	bhi.n	8003a2e <GPS_parseHex+0x16>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e013      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	2b39      	cmp	r3, #57	; 0x39
 8003a32:	d803      	bhi.n	8003a3c <GPS_parseHex+0x24>
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	3b30      	subs	r3, #48	; 0x30
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	e00c      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d801      	bhi.n	8003a46 <GPS_parseHex+0x2e>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e007      	b.n	8003a56 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	2b46      	cmp	r3, #70	; 0x46
 8003a4a:	d803      	bhi.n	8003a54 <GPS_parseHex+0x3c>
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	3b37      	subs	r3, #55	; 0x37
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e000      	b.n	8003a56 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <println>:
{
 8003a78:	b40f      	push	{r0, r1, r2, r3}
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
	if (usbPresent)
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <println+0xb4>)
 8003a82:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d147      	bne.n	8003b1a <println+0xa2>
		writePin(LEDD, HIGH);
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a90:	4827      	ldr	r0, [pc, #156]	; (8003b30 <println+0xb8>)
 8003a92:	f003 febf 	bl	8007814 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8003a96:	f107 031c 	add.w	r3, r7, #28
 8003a9a:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	4824      	ldr	r0, [pc, #144]	; (8003b34 <println+0xbc>)
 8003aa2:	f015 f9bf 	bl	8018e24 <vsiprintf>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <println+0xc0>)
 8003aac:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <println+0xc0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <println+0xbc>)
 8003ab4:	210d      	movs	r1, #13
 8003ab6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <println+0xc0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <println+0xbc>)
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <println+0xc0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3302      	adds	r3, #2
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <println+0xbc>)
 8003acc:	2100      	movs	r1, #0
 8003ace:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <println+0xc0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3303      	adds	r3, #3
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <println+0xc0>)
 8003ad8:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8003ada:	f7ff ffc2 	bl	8003a62 <micros>
 8003ade:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <println+0xc0>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	3346      	adds	r3, #70	; 0x46
 8003aee:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8003af0:	e001      	b.n	8003af6 <println+0x7e>
			if (micros() - printStart > timeout && false)
 8003af2:	f7ff ffb6 	bl	8003a62 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <println+0xc0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	480d      	ldr	r0, [pc, #52]	; (8003b34 <println+0xbc>)
 8003b00:	f012 fe84 	bl	801680c <CDC_Transmit_FS>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d0f3      	beq.n	8003af2 <println+0x7a>
		writePin(LEDD, LOW);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b10:	4807      	ldr	r0, [pc, #28]	; (8003b30 <println+0xb8>)
 8003b12:	f003 fe7f 	bl	8007814 <HAL_GPIO_WritePin>
		return true;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <println+0xa4>
	return false;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b26:	b004      	add	sp, #16
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000e3c 	.word	0x20000e3c
 8003b30:	40020400 	.word	0x40020400
 8003b34:	200007ec 	.word	0x200007ec
 8003b38:	200007e8 	.word	0x200007e8

08003b3c <MPU9250_writeByte>:
#include "stm32f4xx_hal_i2c.h"

// #################### Low level communication ####################

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af04      	add	r7, sp, #16
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	791b      	ldrb	r3, [r3, #4]
 8003b54:	b299      	uxth	r1, r3
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9302      	str	r3, [sp, #8]
 8003b5e:	2301      	movs	r3, #1
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2301      	movs	r3, #1
 8003b68:	f003 ffb0 	bl	8007acc <HAL_I2C_Mem_Write>
}
 8003b6c:	bf00      	nop
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	791b      	ldrb	r3, [r3, #4]
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2301      	movs	r3, #1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f004 f88f 	bl	8007cc0 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003ba2:	7b3b      	ldrb	r3, [r7, #12]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b08f      	sub	sp, #60	; 0x3c
 8003bb0:	af04      	add	r7, sp, #16
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	72fb      	strb	r3, [r7, #11]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 2);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	791b      	ldrb	r3, [r3, #4]
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	b29c      	uxth	r4, r3
 8003bcc:	7abb      	ldrb	r3, [r7, #10]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4622      	mov	r2, r4
 8003be0:	f004 f86e 	bl	8007cc0 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
 8003bec:	e00b      	b.n	8003c06 <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f107 0114 	add.w	r1, r7, #20
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	440a      	add	r2, r1
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3301      	adds	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	7abb      	ldrb	r3, [r7, #10]
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	dbef      	blt.n	8003bee <MPU9250_readBytes+0x42>
	}
}
 8003c0e:	bf00      	nop
 8003c10:	372c      	adds	r7, #44	; 0x2c
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}

08003c16 <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af04      	add	r7, sp, #16
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 2);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	795b      	ldrb	r3, [r3, #5]
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	2302      	movs	r3, #2
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	1cbb      	adds	r3, r7, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	f003 ff43 	bl	8007acc <HAL_I2C_Mem_Write>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b088      	sub	sp, #32
 8003c52:	af04      	add	r7, sp, #16
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	b299      	uxth	r1, r3
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	2302      	movs	r3, #2
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2301      	movs	r3, #1
 8003c78:	f004 f822 	bl	8007cc0 <HAL_I2C_Mem_Read>
	return (char)data[0];
 8003c7c:	7b3b      	ldrb	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 8003c86:	b590      	push	{r4, r7, lr}
 8003c88:	b08f      	sub	sp, #60	; 0x3c
 8003c8a:	af04      	add	r7, sp, #16
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	72fb      	strb	r3, [r7, #11]
 8003c94:	4613      	mov	r3, r2
 8003c96:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 2);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	795b      	ldrb	r3, [r3, #5]
 8003ca0:	b299      	uxth	r1, r3
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	b29c      	uxth	r4, r3
 8003ca6:	7abb      	ldrb	r3, [r7, #10]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2202      	movs	r2, #2
 8003cac:	9202      	str	r2, [sp, #8]
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4622      	mov	r2, r4
 8003cba:	f004 f801 	bl	8007cc0 <HAL_I2C_Mem_Read>

	int ii = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e00b      	b.n	8003ce0 <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f107 0114 	add.w	r1, r7, #20
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	440a      	add	r2, r1
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	3301      	adds	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	7abb      	ldrb	r3, [r7, #10]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	dbef      	blt.n	8003cc8 <AK8963_readBytes+0x42>
	}
}
 8003ce8:	bf00      	nop
 8003cea:	372c      	adds	r7, #44	; 0x2c
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}

08003cf0 <MPU9250_readAccelData>:

static void MPU9250_readAccelData(MPU9250* inst)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 8003cf8:	f107 0308 	add.w	r3, r7, #8
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	213b      	movs	r1, #59	; 0x3b
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff53 	bl	8003bac <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 8003d06:	7a3b      	ldrb	r3, [r7, #8]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	b21a      	sxth	r2, r3
 8003d0c:	7a7b      	ldrb	r3, [r7, #9]
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	edc3 7a07 	vstr	s15, [r3, #28]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 8003d36:	7abb      	ldrb	r3, [r7, #10]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	b21b      	sxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 8003d66:	7b3b      	ldrb	r3, [r7, #12]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	7b7b      	ldrb	r3, [r7, #13]
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <MPU9250_readGyroData>:
static void MPU9250_readGyroData(MPU9250* inst)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2206      	movs	r2, #6
 8003dac:	2143      	movs	r1, #67	; 0x43
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fefc 	bl	8003bac <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 8003db4:	7a3b      	ldrb	r3, [r7, #8]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	7a7b      	ldrb	r3, [r7, #9]
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 8003de4:	7abb      	ldrb	r3, [r7, #10]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	b21b      	sxth	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 8003e14:	7b3b      	ldrb	r3, [r7, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	7b7b      	ldrb	r3, [r7, #13]
 8003e1c:	b21b      	sxth	r3, r3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <MPU9250_readMagData>:
static void MPU9250_readMagData(MPU9250* inst)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 8003e54:	2102      	movs	r1, #2
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fef9 	bl	8003c4e <AK8963_readByte>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d064      	beq.n	8003f30 <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff09 	bl	8003c86 <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 8003e74:	7bbb      	ldrb	r3, [r7, #14]
 8003e76:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d156      	bne.n	8003f30 <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 8003e82:	7a7b      	ldrb	r3, [r7, #9]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	7a3b      	ldrb	r3, [r7, #8]
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8003ebc:	7afb      	ldrb	r3, [r7, #11]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	b21a      	sxth	r2, r3
 8003ec2:	7abb      	ldrb	r3, [r7, #10]
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 8003ef6:	7b7b      	ldrb	r3, [r7, #13]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	7b3b      	ldrb	r3, [r7, #12]
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
	}
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <MPU9250_getRes>:
	MPU9250_readBytes(inst, MPU9250_TEMP_OUT_H, 2, &rawData[0]);
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}
static void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7b9b      	ldrb	r3, [r3, #14]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <MPU9250_getRes+0x18>
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d004      	beq.n	8003f58 <MPU9250_getRes+0x20>
 8003f4e:	e007      	b.n	8003f60 <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <MPU9250_getRes+0xbc>)
 8003f54:	649a      	str	r2, [r3, #72]	; 0x48
 8003f56:	e003      	b.n	8003f60 <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <MPU9250_getRes+0xc0>)
 8003f5c:	649a      	str	r2, [r3, #72]	; 0x48
 8003f5e:	bf00      	nop
	}
	switch (config->Gscale)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	7b5b      	ldrb	r3, [r3, #13]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d81b      	bhi.n	8003fa0 <MPU9250_getRes+0x68>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <MPU9250_getRes+0x38>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f89 	.word	0x08003f89
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f99 	.word	0x08003f99
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <MPU9250_getRes+0xc4>)
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
 8003f86:	e00b      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <MPU9250_getRes+0xc8>)
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f8e:	e007      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <MPU9250_getRes+0xcc>)
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
 8003f96:	e003      	b.n	8003fa0 <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <MPU9250_getRes+0xd0>)
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f9e:	bf00      	nop
	}
	switch (config->Ascale)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	7b1b      	ldrb	r3, [r3, #12]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d81f      	bhi.n	8003fe8 <MPU9250_getRes+0xb0>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <MPU9250_getRes+0x78>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fcb 	.word	0x08003fcb
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	08003fdf 	.word	0x08003fdf
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc8:	e00e      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003fd2:	e009      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
 8003fdc:	e004      	b.n	8003fe8 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
 8003fe6:	bf00      	nop
	}
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40bfebff 	.word	0x40bfebff
 8003ff8:	3fbfebff 	.word	0x3fbfebff
 8003ffc:	3bfa0000 	.word	0x3bfa0000
 8004000:	3c7a0000 	.word	0x3c7a0000
 8004004:	3cfa0000 	.word	0x3cfa0000
 8004008:	3d7a0000 	.word	0x3d7a0000
 800400c:	00000000 	.word	0x00000000

08004010 <MPU9250_init>:

// #################### Public routines ####################

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	inst->active = false;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800402c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	dd0a      	ble.n	800404c <MPU9250_init+0x3c>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800403c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800404a:	e004      	b.n	8004056 <MPU9250_init+0x46>
	else inst->alg_delay = 0;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	inst->euler_delay = 1000000.0 / config->euler_rate;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa84 	bl	8000568 <__aeabi_f2d>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4623      	mov	r3, r4
 8004068:	a183      	add	r1, pc, #524	; (adr r1, 8004278 <MPU9250_init+0x268>)
 800406a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406e:	f7fc fbfd 	bl	800086c <__aeabi_ddiv>
 8004072:	4603      	mov	r3, r0
 8004074:	460c      	mov	r4, r1
 8004076:	4618      	mov	r0, r3
 8004078:	4621      	mov	r1, r4
 800407a:	f7fc fda5 	bl	8000bc8 <__aeabi_d2uiz>
 800407e:	4602      	mov	r2, r0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	int i;
	for (i = 0; i < 3; i++)
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e01f      	b.n	80040cc <MPU9250_init+0xbc>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	332a      	adds	r3, #42	; 0x2a
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3304      	adds	r3, #4
 80040a2:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3326      	adds	r3, #38	; 0x26
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	3322      	adds	r3, #34	; 0x22
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	dddc      	ble.n	800408c <MPU9250_init+0x7c>
	}
	inst->q[0] = 1.0f;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	if (MPU9250_present(inst, 5))
 80040dc:	2105      	movs	r1, #5
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f974 	bl	80043cc <MPU9250_present>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03c      	beq.n	8004164 <MPU9250_init+0x154>
	{
		delay(100);
 80040ea:	2064      	movs	r0, #100	; 0x64
 80040ec:	f002 fd14 	bl	8006b18 <HAL_Delay>
		MPU9250_SelfTest(inst);					// Start by performing self test
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fc7d 	bl	80049f0 <MPU9250_SelfTest>
		delay(1000);
 80040f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040fa:	f002 fd0d 	bl	8006b18 <HAL_Delay>
		MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff19 	bl	8003f38 <MPU9250_getRes>

		if (config->calibrate)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	7c1b      	ldrb	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <MPU9250_init+0x106>
		{
			MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f9fa 	bl	8004508 <MPU9250_calibrate>
 8004114:	e022      	b.n	800415c <MPU9250_init+0x14c>
		}
		else
		{										// Or load biases from config
			for (i = 0; i < 3; i++)
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	e01c      	b.n	8004156 <MPU9250_init+0x146>
			{
				inst->accelBias[i] = config->accelBias[i];
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	330a      	adds	r3, #10
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3318      	adds	r3, #24
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3304      	adds	r3, #4
 8004136:	601a      	str	r2, [r3, #0]
				inst->gyroBias[i] = config->gyroBias[i];
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3308      	adds	r3, #8
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3316      	adds	r3, #22
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 3; i++)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b02      	cmp	r3, #2
 800415a:	dddf      	ble.n	800411c <MPU9250_init+0x10c>
			}
			// magBias?
		}
		delay(1000);
 800415c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004160:	f002 fcda 	bl	8006b18 <HAL_Delay>
	}
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 8004164:	2200      	movs	r2, #0
 8004166:	216b      	movs	r1, #107	; 0x6b
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fce7 	bl	8003b3c <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 800416e:	2064      	movs	r0, #100	; 0x64
 8004170:	f002 fcd2 	bl	8006b18 <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004174:	2201      	movs	r2, #1
 8004176:	216b      	movs	r1, #107	; 0x6b
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fcdf 	bl	8003b3c <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 800417e:	2064      	movs	r0, #100	; 0x64
 8004180:	f002 fcca 	bl	8006b18 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 8004184:	2203      	movs	r2, #3
 8004186:	211a      	movs	r1, #26
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fcd7 	bl	8003b3c <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 800418e:	2064      	movs	r0, #100	; 0x64
 8004190:	f002 fcc2 	bl	8006b18 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 8004194:	2204      	movs	r2, #4
 8004196:	2119      	movs	r1, #25
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fccf 	bl	8003b3c <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 800419e:	211b      	movs	r1, #27
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fce7 	bl	8003b74 <MPU9250_readByte>
 80041a6:	4603      	mov	r3, r0
 80041a8:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f023 0303 	bic.w	r3, r3, #3
 80041b0:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80041b2:	7afb      	ldrb	r3, [r7, #11]
 80041b4:	f023 0318 	bic.w	r3, r3, #24
 80041b8:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	7b5b      	ldrb	r3, [r3, #13]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	b25a      	sxtb	r2, r3
 80041c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	461a      	mov	r2, r3
 80041d0:	211b      	movs	r1, #27
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fcb2 	bl	8003b3c <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 80041d8:	211c      	movs	r1, #28
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fcca 	bl	8003b74 <MPU9250_readByte>
 80041e0:	4603      	mov	r3, r0
 80041e2:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f023 0318 	bic.w	r3, r3, #24
 80041ea:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	b25a      	sxtb	r2, r3
 80041f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	461a      	mov	r2, r3
 8004202:	211c      	movs	r1, #28
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fc99 	bl	8003b3c <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 800420a:	211d      	movs	r1, #29
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fcb1 	bl	8003b74 <MPU9250_readByte>
 8004212:	4603      	mov	r3, r0
 8004214:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f023 030f 	bic.w	r3, r3, #15
 800421c:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	f043 0303 	orr.w	r3, r3, #3
 8004224:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	461a      	mov	r2, r3
 800422a:	211d      	movs	r1, #29
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fc85 	bl	8003b3c <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 8004232:	2222      	movs	r2, #34	; 0x22
 8004234:	2137      	movs	r1, #55	; 0x37
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fc80 	bl	8003b3c <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 800423c:	2201      	movs	r2, #1
 800423e:	2138      	movs	r1, #56	; 0x38
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fc7b 	bl	8003b3c <MPU9250_writeByte>
	if (!config->calibrate && false)						// [SKIPPED] Do this step immidiately only if not calibrating
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}

	inst->mpu_active = true;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	799b      	ldrb	r3, [r3, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <MPU9250_init+0x250>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	79db      	ldrb	r3, [r3, #7]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MPU9250_init+0x250>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <MPU9250_init+0x252>
 8004260:	2300      	movs	r3, #0
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	721a      	strb	r2, [r3, #8]
	return true;
 800426c:	2301      	movs	r3, #1
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	bf00      	nop
 8004278:	00000000 	.word	0x00000000
 800427c:	412e8480 	.word	0x412e8480

08004280 <AK8963_init>:

bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
	delay(1000);
 800428a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800428e:	f002 fc43 	bl	8006b18 <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004292:	2200      	movs	r2, #0
 8004294:	210a      	movs	r1, #10
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fcbd 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 800429c:	200a      	movs	r0, #10
 800429e:	f002 fc3b 	bl	8006b18 <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 80042a2:	220f      	movs	r2, #15
 80042a4:	210a      	movs	r1, #10
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fcb5 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 80042ac:	200a      	movs	r0, #10
 80042ae:	f002 fc33 	bl	8006b18 <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	2203      	movs	r2, #3
 80042b8:	2110      	movs	r1, #16
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fce3 	bl	8003c86 <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 80042c0:	7a3b      	ldrb	r3, [r7, #8]
 80042c2:	3b80      	subs	r3, #128	; 0x80
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042cc:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80043c8 <AK8963_init+0x148>
 80042d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80042e2:	7a7b      	ldrb	r3, [r7, #9]
 80042e4:	3b80      	subs	r3, #128	; 0x80
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ee:	eddf 6a36 	vldr	s13, [pc, #216]	; 80043c8 <AK8963_init+0x148>
 80042f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 8004304:	7abb      	ldrb	r3, [r7, #10]
 8004306:	3b80      	subs	r3, #128	; 0x80
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004310:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80043c8 <AK8963_init+0x148>
 8004314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800431c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 8004326:	2200      	movs	r2, #0
 8004328:	210a      	movs	r1, #10
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fc73 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 8004330:	200a      	movs	r0, #10
 8004332:	f002 fbf1 	bl	8006b18 <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7b9b      	ldrb	r3, [r3, #14]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	b25a      	sxtb	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	7bdb      	ldrb	r3, [r3, #15]
 8004342:	b25b      	sxtb	r3, r3
 8004344:	4313      	orrs	r3, r2
 8004346:	b25b      	sxtb	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	210a      	movs	r1, #10
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fc61 	bl	8003c16 <AK8963_writeByte>
	delay(10);
 8004354:	200a      	movs	r0, #10
 8004356:	f002 fbdf 	bl	8006b18 <HAL_Delay>

	if (config->calibrate)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7c1b      	ldrb	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fe46 	bl	8004ff4 <AK8963_calibrate>
 8004368:	e016      	b.n	8004398 <AK8963_init+0x118>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e010      	b.n	8004392 <AK8963_init+0x112>
		{
			inst->magBias[i] = config->magBias[i];
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3304      	adds	r3, #4
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	3304      	adds	r3, #4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3312      	adds	r3, #18
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3304      	adds	r3, #4
 800438a:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3301      	adds	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	ddeb      	ble.n	8004370 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	799b      	ldrb	r3, [r3, #6]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <AK8963_init+0x132>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	79db      	ldrb	r3, [r3, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <AK8963_init+0x132>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <AK8963_init+0x134>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	721a      	strb	r2, [r3, #8]
	return true;
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	43800000 	.word	0x43800000

080043cc <MPU9250_present>:

bool MPU9250_present(MPU9250* inst, uint8_t trials)	// arg = trials of getting WHO_AM_I response from MPU and AK
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
	uint8_t attempts = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
	do
	{
		//MPU9250_reset(inst);
		char who[2] = {0, 0};
 80043dc:	2300      	movs	r3, #0
 80043de:	733b      	strb	r3, [r7, #12]
 80043e0:	2300      	movs	r3, #0
 80043e2:	737b      	strb	r3, [r7, #13]
		who[0] = MPU9250_readByte(inst, MPU9250_WHO_AM_I);
 80043e4:	2175      	movs	r1, #117	; 0x75
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fbc4 	bl	8003b74 <MPU9250_readByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	733b      	strb	r3, [r7, #12]
		who[1] = AK8963_readByte(inst, AK8963_WHO_AM_I);
 80043f0:	2100      	movs	r1, #0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fc2b 	bl	8003c4e <AK8963_readByte>
 80043f8:	4603      	mov	r3, r0
 80043fa:	737b      	strb	r3, [r7, #13]
		if (who[0] == 0x71)
 80043fc:	7b3b      	ldrb	r3, [r7, #12]
 80043fe:	2b71      	cmp	r3, #113	; 0x71
 8004400:	d104      	bne.n	800440c <MPU9250_present+0x40>
		{
			println("Both present!");
 8004402:	480c      	ldr	r0, [pc, #48]	; (8004434 <MPU9250_present+0x68>)
 8004404:	f7ff fb38 	bl	8003a78 <println>
			return true;
 8004408:	2301      	movs	r3, #1
 800440a:	e00e      	b.n	800442a <MPU9250_present+0x5e>
		}
		else
		{
			attempts++;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	3301      	adds	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 8004412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004416:	f002 fb7f 	bl	8006b18 <HAL_Delay>
		}
	} while (attempts <= trials);
 800441a:	7bfa      	ldrb	r2, [r7, #15]
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	429a      	cmp	r2, r3
 8004420:	d9dc      	bls.n	80043dc <MPU9250_present+0x10>
	inst->active = false;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	721a      	strb	r2, [r3, #8]
	return false;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	0801dd14 	.word	0x0801dd14

08004438 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 8004440:	213a      	movs	r1, #58	; 0x3a
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fb96 	bl	8003b74 <MPU9250_readByte>
 8004448:	4603      	mov	r3, r0
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fc4c 	bl	8003cf0 <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fca0 	bl	8003d9e <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fcf4 	bl	8003e4c <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8004464:	f7ff fafd 	bl	8003a62 <micros>
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004478:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80044e4 <MPU9250_update+0xac>
 800447c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	if (inst->alg_deltat >= inst->alg_delay)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449a:	db1e      	blt.n	80044da <MPU9250_update+0xa2>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 f837 	bl	8005510 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80044a2:	f7ff fade 	bl	8003a62 <micros>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	67da      	str	r2, [r3, #124]	; 0x7c

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80044ac:	f7ff fad9 	bl	8003a62 <micros>
 80044b0:	4602      	mov	r2, r0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d30a      	bcc.n	80044da <MPU9250_update+0xa2>
		{
			MPU9250_updateEuler(inst);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fea7 	bl	8005218 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80044ca:	f7ff faca 	bl	8003a62 <micros>
 80044ce:	4602      	mov	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			return true;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <MPU9250_update+0xa4>
		}
	}
	return false;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	49742400 	.word	0x49742400

080044e8 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80044f0:	2280      	movs	r2, #128	; 0x80
 80044f2:	216b      	movs	r1, #107	; 0x6b
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fb21 	bl	8003b3c <MPU9250_writeByte>
	delay(100);
 80044fa:	2064      	movs	r0, #100	; 0x64
 80044fc:	f002 fb0c 	bl	8006b18 <HAL_Delay>
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8004508:	b580      	push	{r7, lr}
 800450a:	b098      	sub	sp, #96	; 0x60
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004510:	2300      	movs	r3, #0
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	2300      	movs	r3, #0
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	2300      	movs	r3, #0
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004524:	2300      	movs	r3, #0
 8004526:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffdd 	bl	80044e8 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 800452e:	2201      	movs	r2, #1
 8004530:	216b      	movs	r1, #107	; 0x6b
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fb02 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8004538:	2200      	movs	r2, #0
 800453a:	216c      	movs	r1, #108	; 0x6c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fafd 	bl	8003b3c <MPU9250_writeByte>
	delay(200);
 8004542:	20c8      	movs	r0, #200	; 0xc8
 8004544:	f002 fae8 	bl	8006b18 <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8004548:	2200      	movs	r2, #0
 800454a:	2138      	movs	r1, #56	; 0x38
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff faf5 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8004552:	2200      	movs	r2, #0
 8004554:	2123      	movs	r1, #35	; 0x23
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff faf0 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 800455c:	2200      	movs	r2, #0
 800455e:	216b      	movs	r1, #107	; 0x6b
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff faeb 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8004566:	2200      	movs	r2, #0
 8004568:	2124      	movs	r1, #36	; 0x24
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fae6 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8004570:	2200      	movs	r2, #0
 8004572:	216a      	movs	r1, #106	; 0x6a
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fae1 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 800457a:	220c      	movs	r2, #12
 800457c:	216a      	movs	r1, #106	; 0x6a
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fadc 	bl	8003b3c <MPU9250_writeByte>
	delay(15);
 8004584:	200f      	movs	r0, #15
 8004586:	f002 fac7 	bl	8006b18 <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800458a:	2201      	movs	r2, #1
 800458c:	211a      	movs	r1, #26
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fad4 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8004594:	2200      	movs	r2, #0
 8004596:	2119      	movs	r1, #25
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff facf 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800459e:	2200      	movs	r2, #0
 80045a0:	211b      	movs	r1, #27
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff faca 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 80045a8:	2200      	movs	r2, #0
 80045aa:	211c      	movs	r1, #28
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fac5 	bl	8003b3c <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 80045b2:	2383      	movs	r3, #131	; 0x83
 80045b4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 80045b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 80045c0:	2240      	movs	r2, #64	; 0x40
 80045c2:	216a      	movs	r1, #106	; 0x6a
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fab9 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80045ca:	2278      	movs	r2, #120	; 0x78
 80045cc:	2123      	movs	r1, #35	; 0x23
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fab4 	bl	8003b3c <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 80045d4:	2028      	movs	r0, #40	; 0x28
 80045d6:	f002 fa9f 	bl	8006b18 <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 80045da:	2200      	movs	r2, #0
 80045dc:	2123      	movs	r1, #35	; 0x23
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff faac 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80045e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e8:	2202      	movs	r2, #2
 80045ea:	2172      	movs	r1, #114	; 0x72
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fadd 	bl	8003bac <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 80045f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b21a      	sxth	r2, r3
 80045fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80045fe:	b21b      	sxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b21b      	sxth	r3, r3
 8004604:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8004608:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800460c:	4aa8      	ldr	r2, [pc, #672]	; (80048b0 <MPU9250_calibrate+0x3a8>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 8004618:	2300      	movs	r3, #0
 800461a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800461e:	e071      	b.n	8004704 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 8004620:	2300      	movs	r3, #0
 8004622:	82bb      	strh	r3, [r7, #20]
 8004624:	2300      	movs	r3, #0
 8004626:	82fb      	strh	r3, [r7, #22]
 8004628:	2300      	movs	r3, #0
 800462a:	833b      	strh	r3, [r7, #24]
 800462c:	2300      	movs	r3, #0
 800462e:	81bb      	strh	r3, [r7, #12]
 8004630:	2300      	movs	r3, #0
 8004632:	81fb      	strh	r3, [r7, #14]
 8004634:	2300      	movs	r3, #0
 8004636:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8004638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800463c:	220c      	movs	r2, #12
 800463e:	2174      	movs	r1, #116	; 0x74
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff fab3 	bl	8003bac <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8004646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	b21a      	sxth	r2, r3
 800464e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004652:	b21b      	sxth	r3, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	b21b      	sxth	r3, r3
 8004658:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800465a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	b21a      	sxth	r2, r3
 8004662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004666:	b21b      	sxth	r3, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	b21b      	sxth	r3, r3
 800466c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800466e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	b21a      	sxth	r2, r3
 8004676:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800467a:	b21b      	sxth	r3, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	b21b      	sxth	r3, r3
 8004680:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8004682:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	b21a      	sxth	r2, r3
 800468a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800468e:	b21b      	sxth	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b21b      	sxth	r3, r3
 8004694:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8004696:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	b21a      	sxth	r2, r3
 800469e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80046aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b21a      	sxth	r2, r3
 80046b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046b6:	b21b      	sxth	r3, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 80046c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80046ce:	4413      	add	r3, r2
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 80046d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80046d8:	4413      	add	r3, r2
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 80046dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 80046e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046ec:	4413      	add	r3, r2
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 80046fa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80046fe:	3301      	adds	r3, #1
 8004700:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004704:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800470c:	429a      	cmp	r2, r3
 800470e:	d387      	bcc.n	8004620 <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8004710:	2300      	movs	r3, #0
 8004712:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004716:	e077      	b.n	8004808 <MPU9250_calibrate+0x300>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8004718:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004722:	4413      	add	r3, r2
 8004724:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8004728:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800472c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004730:	fb91 f2f2 	sdiv	r2, r1, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800473a:	440b      	add	r3, r1
 800473c:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8004740:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800474a:	4413      	add	r3, r2
 800474c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8004750:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8004754:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004758:	fb91 f2f2 	sdiv	r2, r1, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004762:	440b      	add	r3, r1
 8004764:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8004768:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004772:	4413      	add	r3, r2
 8004774:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004778:	425b      	negs	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	da00      	bge.n	8004780 <MPU9250_calibrate+0x278>
 800477e:	3303      	adds	r3, #3
 8004780:	109b      	asrs	r3, r3, #2
 8004782:	121a      	asrs	r2, r3, #8
 8004784:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004790:	440b      	add	r3, r1
 8004792:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004796:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047a0:	4413      	add	r3, r2
 80047a2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80047a6:	425b      	negs	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da00      	bge.n	80047ae <MPU9250_calibrate+0x2a6>
 80047ac:	3303      	adds	r3, #3
 80047ae:	109b      	asrs	r3, r3, #2
 80047b0:	461a      	mov	r2, r3
 80047b2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	3301      	adds	r3, #1
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80047c0:	440b      	add	r3, r1
 80047c2:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 80047c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047d0:	4413      	add	r3, r2
 80047d2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	3316      	adds	r3, #22
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 80047fe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004802:	3301      	adds	r3, #1
 8004804:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004808:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800480c:	2b02      	cmp	r3, #2
 800480e:	d983      	bls.n	8004718 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	dd05      	ble.n	8004822 <MPU9250_calibrate+0x31a>
 8004816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004818:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	643b      	str	r3, [r7, #64]	; 0x40
 8004820:	e004      	b.n	800482c <MPU9250_calibrate+0x324>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8004822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004824:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004828:	4413      	add	r3, r2
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 8004838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483c:	2202      	movs	r2, #2
 800483e:	2177      	movs	r1, #119	; 0x77
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff f9b3 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	b21b      	sxth	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004854:	4313      	orrs	r3, r2
 8004856:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 8004858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800485c:	2202      	movs	r2, #2
 800485e:	217a      	movs	r1, #122	; 0x7a
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff f9a3 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004866:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	b21b      	sxth	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004874:	4313      	orrs	r3, r2
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 8004878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800487c:	2202      	movs	r2, #2
 800487e:	217d      	movs	r1, #125	; 0x7d
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f993 	bl	8003bac <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8004886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	b21b      	sxth	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004894:	4313      	orrs	r3, r2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8004898:	2301      	movs	r3, #1
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 800489c:	2300      	movs	r3, #0
 800489e:	773b      	strb	r3, [r7, #28]
 80048a0:	2300      	movs	r3, #0
 80048a2:	777b      	strb	r3, [r7, #29]
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80048ae:	e096      	b.n	80049de <MPU9250_calibrate+0x4d6>
 80048b0:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 80048b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048be:	4413      	add	r3, r2
 80048c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <MPU9250_calibrate+0x3d6>
 80048ce:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048d6:	4413      	add	r3, r2
 80048d8:	2201      	movs	r2, #1
 80048da:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80048de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048e8:	4413      	add	r3, r2
 80048ea:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80048ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80048f8:	440b      	add	r3, r1
 80048fa:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da00      	bge.n	8004904 <MPU9250_calibrate+0x3fc>
 8004902:	3307      	adds	r3, #7
 8004904:	10db      	asrs	r3, r3, #3
 8004906:	425b      	negs	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800490e:	440a      	add	r2, r1
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004916:	440b      	add	r3, r1
 8004918:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 800491c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004926:	4413      	add	r3, r2
 8004928:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800492c:	121a      	asrs	r2, r3, #8
 800492e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800493a:	440b      	add	r3, r1
 800493c:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8004940:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800494a:	4413      	add	r3, r2
 800494c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004950:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	3301      	adds	r3, #1
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800495e:	440b      	add	r3, r1
 8004960:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8004964:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	3301      	adds	r3, #1
 800496c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004970:	4413      	add	r3, r2
 8004972:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8004976:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800497a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800497e:	4413      	add	r3, r2
 8004980:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8004984:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	3301      	adds	r3, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004994:	440b      	add	r3, r1
 8004996:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 800499a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80049a4:	4413      	add	r3, r2
 80049a6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049b2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	3318      	adds	r3, #24
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 80049d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049d8:	3301      	adds	r3, #1
 80049da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80049de:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	f67f af66 	bls.w	80048b4 <MPU9250_calibrate+0x3ac>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 80049e8:	bf00      	nop
 80049ea:	3760      	adds	r7, #96	; 0x60
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b0a2      	sub	sp, #136	; 0x88
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 80049f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
	inst->gRes = 1;											//Configuration values (must?) not affect readings
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
	int i = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a4a:	e017      	b.n	8004a7c <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a52:	3318      	adds	r3, #24
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a66:	3316      	adds	r3, #22
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8004a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a76:	3301      	adds	r3, #1
 8004a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	dde3      	ble.n	8004a4c <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 8004a84:	2200      	movs	r2, #0
 8004a86:	2119      	movs	r1, #25
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff f857 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8004a8e:	2202      	movs	r2, #2
 8004a90:	211a      	movs	r1, #26
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff f852 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 8004a98:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	211b      	movs	r1, #27
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff f849 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8004aaa:	2202      	movs	r2, #2
 8004aac:	211d      	movs	r1, #29
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff f844 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 8004ab4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	211c      	movs	r1, #28
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff f83b 	bl	8003b3c <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004acc:	e040      	b.n	8004b50 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff f90e 	bl	8003cf0 <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 8004ad4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8004ae6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	edd3 7a08 	vldr	s15, [r3, #32]
 8004af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004af4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8004af8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b06:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f947 	bl	8003d9e <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8004b10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8004b22:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b30:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8004b34:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b42:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b54:	2bc7      	cmp	r3, #199	; 0xc7
 8004b56:	ddba      	ble.n	8004ace <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b5e:	e030      	b.n	8004bc2 <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8004b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b34      	subs	r3, #52	; 0x34
 8004b6e:	ed93 7a00 	vldr	s14, [r3]
 8004b72:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b84:	4413      	add	r3, r2
 8004b86:	3b34      	subs	r3, #52	; 0x34
 8004b88:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 8004b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004b96:	4413      	add	r3, r2
 8004b98:	3b28      	subs	r3, #40	; 0x28
 8004b9a:	ed93 7a00 	vldr	s14, [r3]
 8004b9e:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b28      	subs	r3, #40	; 0x28
 8004bb4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8004bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	ddca      	ble.n	8004b60 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 8004bca:	22e0      	movs	r2, #224	; 0xe0
 8004bcc:	211c      	movs	r1, #28
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe ffb4 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8004bd4:	22e0      	movs	r2, #224	; 0xe0
 8004bd6:	211b      	movs	r1, #27
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fe ffaf 	bl	8003b3c <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004bde:	2019      	movs	r0, #25
 8004be0:	f001 ff9a 	bl	8006b18 <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bea:	e040      	b.n	8004c6e <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff f87f 	bl	8003cf0 <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 8004bf2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c00:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 8004c04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c12:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8004c16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c24:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff f8b8 	bl	8003d9e <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 8004c2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8004c40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 8004c52:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c72:	2bc7      	cmp	r3, #199	; 0xc7
 8004c74:	ddba      	ble.n	8004bec <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c7c:	e030      	b.n	8004ce0 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 8004c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004c88:	4413      	add	r3, r2
 8004c8a:	3b40      	subs	r3, #64	; 0x40
 8004c8c:	ed93 7a00 	vldr	s14, [r3]
 8004c90:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b40      	subs	r3, #64	; 0x40
 8004ca6:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 8004caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3b4c      	subs	r3, #76	; 0x4c
 8004cb8:	ed93 7a00 	vldr	s14, [r3]
 8004cbc:	eddf 6a52 	vldr	s13, [pc, #328]	; 8004e08 <MPU9250_SelfTest+0x418>
 8004cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004cce:	4413      	add	r3, r2
 8004cd0:	3b4c      	subs	r3, #76	; 0x4c
 8004cd2:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8004cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	ddca      	ble.n	8004c7e <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 8004ce8:	2200      	movs	r2, #0
 8004cea:	211c      	movs	r1, #28
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fe ff25 	bl	8003b3c <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	211b      	movs	r1, #27
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fe ff20 	bl	8003b3c <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 8004cfc:	2019      	movs	r0, #25
 8004cfe:	f001 ff0b 	bl	8006b18 <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 8004d02:	210d      	movs	r1, #13
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe ff35 	bl	8003b74 <MPU9250_readByte>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8004d10:	210e      	movs	r1, #14
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fe ff2e 	bl	8003b74 <MPU9250_readByte>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 8004d1e:	210f      	movs	r1, #15
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fe ff27 	bl	8003b74 <MPU9250_readByte>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fe ff20 	bl	8003b74 <MPU9250_readByte>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fe ff19 	bl	8003b74 <MPU9250_readByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8004d48:	2102      	movs	r1, #2
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fe ff12 	bl	8003b74 <MPU9250_readByte>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d5c:	e048      	b.n	8004df0 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 8004d5e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004d62:	f640 223c 	movw	r2, #2620	; 0xa3c
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d72:	ee17 0a90 	vmov	r0, s15
 8004d76:	f7fb fbf7 	bl	8000568 <__aeabi_f2d>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d86:	4413      	add	r3, r2
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	ee17 0a90 	vmov	r0, s15
 8004d96:	f7fb fbe7 	bl	8000568 <__aeabi_f2d>
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <MPU9250_SelfTest+0x41c>)
 8004da0:	f7fb fa82 	bl	80002a8 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	ec43 2b17 	vmov	d7, r2, r3
 8004dac:	eeb0 1a47 	vmov.f32	s2, s14
 8004db0:	eef0 1a67 	vmov.f32	s3, s15
 8004db4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8004e00 <MPU9250_SelfTest+0x410>
 8004db8:	f016 f8d0 	bl	801af5c <pow>
 8004dbc:	ec53 2b10 	vmov	r2, r3, d0
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	f7fb fc28 	bl	8000618 <__aeabi_dmul>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	4618      	mov	r0, r3
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f7fb ff1a 	bl	8000c08 <__aeabi_d2f>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004de0:	440b      	add	r3, r1
 8004de2:	3b64      	subs	r3, #100	; 0x64
 8004de4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8004de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dea:	3301      	adds	r3, #1
 8004dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	ddb2      	ble.n	8004d5e <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004df8:	2300      	movs	r3, #0
 8004dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dfc:	e09b      	b.n	8004f36 <MPU9250_SelfTest+0x546>
 8004dfe:	bf00      	nop
 8004e00:	c28f5c29 	.word	0xc28f5c29
 8004e04:	3ff028f5 	.word	0x3ff028f5
 8004e08:	43480000 	.word	0x43480000
 8004e0c:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8004e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e18:	4413      	add	r3, r2
 8004e1a:	3b40      	subs	r3, #64	; 0x40
 8004e1c:	ed93 7a00 	vldr	s14, [r3]
 8004e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e28:	4413      	add	r3, r2
 8004e2a:	3b34      	subs	r3, #52	; 0x34
 8004e2c:	edd3 7a00 	vldr	s15, [r3]
 8004e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e34:	ee17 0a90 	vmov	r0, s15
 8004e38:	f7fb fb96 	bl	8000568 <__aeabi_f2d>
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004e42:	f7fb fbe9 	bl	8000618 <__aeabi_dmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	4625      	mov	r5, r4
 8004e4c:	461c      	mov	r4, r3
 8004e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004e56:	4413      	add	r3, r2
 8004e58:	3b64      	subs	r3, #100	; 0x64
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb83 	bl	8000568 <__aeabi_f2d>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4620      	mov	r0, r4
 8004e68:	4629      	mov	r1, r5
 8004e6a:	f7fb fcff 	bl	800086c <__aeabi_ddiv>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	4618      	mov	r0, r3
 8004e74:	4621      	mov	r1, r4
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004e7c:	f7fb fa14 	bl	80002a8 <__aeabi_dsub>
 8004e80:	4603      	mov	r3, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4618      	mov	r0, r3
 8004e86:	4621      	mov	r1, r4
 8004e88:	f7fb febe 	bl	8000c08 <__aeabi_d2f>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004e96:	440b      	add	r3, r1
 8004e98:	3b7c      	subs	r3, #124	; 0x7c
 8004e9a:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8004e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b4c      	subs	r3, #76	; 0x4c
 8004ea8:	ed93 7a00 	vldr	s14, [r3]
 8004eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b28      	subs	r3, #40	; 0x28
 8004eb8:	edd3 7a00 	vldr	s15, [r3]
 8004ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec0:	ee17 0a90 	vmov	r0, s15
 8004ec4:	f7fb fb50 	bl	8000568 <__aeabi_f2d>
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	4b46      	ldr	r3, [pc, #280]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004ece:	f7fb fba3 	bl	8000618 <__aeabi_dmul>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4625      	mov	r5, r4
 8004ed8:	461c      	mov	r4, r3
 8004eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004edc:	3303      	adds	r3, #3
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b64      	subs	r3, #100	; 0x64
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fb3c 	bl	8000568 <__aeabi_f2d>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f7fb fcb8 	bl	800086c <__aeabi_ddiv>
 8004efc:	4603      	mov	r3, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4618      	mov	r0, r3
 8004f02:	4621      	mov	r1, r4
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <MPU9250_SelfTest+0x5f8>)
 8004f0a:	f7fb f9cd 	bl	80002a8 <__aeabi_dsub>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	4619      	mov	r1, r3
 8004f14:	4622      	mov	r2, r4
 8004f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f18:	1cdc      	adds	r4, r3, #3
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f7fb fe73 	bl	8000c08 <__aeabi_d2f>
 8004f22:	4602      	mov	r2, r0
 8004f24:	00a3      	lsls	r3, r4, #2
 8004f26:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3b7c      	subs	r3, #124	; 0x7c
 8004f2e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8004f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f32:	3301      	adds	r3, #1
 8004f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f77f af69 	ble.w	8004e10 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
 8004f3e:	482b      	ldr	r0, [pc, #172]	; (8004fec <MPU9250_SelfTest+0x5fc>)
 8004f40:	f7fe fd9a 	bl	8003a78 <println>
	#endif
	bool passed = true;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f4e:	e042      	b.n	8004fd6 <MPU9250_SelfTest+0x5e6>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8004f50:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004f54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f56:	0092      	lsls	r2, r2, #2
 8004f58:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8004f5c:	440a      	add	r2, r1
 8004f5e:	3a7c      	subs	r2, #124	; 0x7c
 8004f60:	edd2 7a00 	vldr	s15, [r2]
 8004f64:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8004f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	bfcc      	ite	gt
 8004f72:	2201      	movgt	r2, #1
 8004f74:	2200      	movle	r2, #0
 8004f76:	b2d1      	uxtb	r1, r2
 8004f78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8004f80:	4402      	add	r2, r0
 8004f82:	3a7c      	subs	r2, #124	; 0x7c
 8004f84:	edd2 7a00 	vldr	s15, [r2]
 8004f88:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	bf4c      	ite	mi
 8004f96:	2201      	movmi	r2, #1
 8004f98:	2200      	movpl	r2, #0
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		#if MPU9250_DEBUG
			println("%f", results[i]);
 8004fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b7c      	subs	r3, #124	; 0x7c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb fad3 	bl	8000568 <__aeabi_f2d>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4623      	mov	r3, r4
 8004fca:	4809      	ldr	r0, [pc, #36]	; (8004ff0 <MPU9250_SelfTest+0x600>)
 8004fcc:	f7fe fd54 	bl	8003a78 <println>
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8004fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	677b      	str	r3, [r7, #116]	; 0x74
 8004fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd8:	2b05      	cmp	r3, #5
 8004fda:	ddb9      	ble.n	8004f50 <MPU9250_SelfTest+0x560>
		#endif
	}
	return passed;
 8004fdc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3788      	adds	r7, #136	; 0x88
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe8:	40590000 	.word	0x40590000
 8004fec:	0801dd24 	.word	0x0801dd24
 8004ff0:	0801dd44 	.word	0x0801dd44

08004ff4 <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	; 0x38
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005000:	2300      	movs	r3, #0
 8005002:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005004:	2300      	movs	r3, #0
 8005006:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8005008:	4a80      	ldr	r2, [pc, #512]	; (800520c <AK8963_calibrate+0x218>)
 800500a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800500e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005012:	6018      	str	r0, [r3, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	8019      	strh	r1, [r3, #0]
 8005018:	4a7d      	ldr	r2, [pc, #500]	; (8005210 <AK8963_calibrate+0x21c>)
 800501a:	f107 031c 	add.w	r3, r7, #28
 800501e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005022:	6018      	str	r0, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	8019      	strh	r1, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	82bb      	strh	r3, [r7, #20]
 800502c:	2300      	movs	r3, #0
 800502e:	82fb      	strh	r3, [r7, #22]
 8005030:	2300      	movs	r3, #0
 8005032:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504a:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005052:	649a      	str	r2, [r3, #72]	; 0x48
	for (i = 0; i < 3; i++)
 8005054:	2300      	movs	r3, #0
 8005056:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005058:	e013      	b.n	8005082 <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 800505a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	3312      	adds	r3, #18
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 800506c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	331c      	adds	r3, #28
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800507a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800507c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800507e:	3301      	adds	r3, #1
 8005080:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005084:	2b02      	cmp	r3, #2
 8005086:	d9e8      	bls.n	800505a <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8005088:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800508c:	f001 fd44 	bl	8006b18 <HAL_Delay>

	sample_count = 64;
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005098:	e06a      	b.n	8005170 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fed6 	bl	8003e4c <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80050a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050aa:	ee17 3a90 	vmov	r3, s15
 80050ae:	b21b      	sxth	r3, r3
 80050b0:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80050b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050bc:	ee17 3a90 	vmov	r3, s15
 80050c0:	b21b      	sxth	r3, r3
 80050c2:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80050ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ce:	ee17 3a90 	vmov	r3, s15
 80050d2:	b21b      	sxth	r3, r3
 80050d4:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050da:	e040      	b.n	800515e <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 80050dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80050e4:	4413      	add	r3, r2
 80050e6:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 80050ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050f2:	440b      	add	r3, r1
 80050f4:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dd0e      	ble.n	800511a <AK8963_calibrate+0x126>
 80050fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005106:	440b      	add	r3, r1
 8005108:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800510c:	0053      	lsls	r3, r2, #1
 800510e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 800511a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005122:	4413      	add	r3, r2
 8005124:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8005128:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005130:	440b      	add	r3, r1
 8005132:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8005136:	429a      	cmp	r2, r3
 8005138:	da0e      	bge.n	8005158 <AK8963_calibrate+0x164>
 800513a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800513c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005144:	440b      	add	r3, r1
 8005146:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800514a:	0053      	lsls	r3, r2, #1
 800514c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005150:	4413      	add	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8005158:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800515a:	3301      	adds	r3, #1
 800515c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800515e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005160:	2b02      	cmp	r3, #2
 8005162:	d9bb      	bls.n	80050dc <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 8005164:	2087      	movs	r0, #135	; 0x87
 8005166:	f001 fcd7 	bl	8006b18 <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 800516a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800516c:	3301      	adds	r3, #1
 800516e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005170:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005172:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005174:	429a      	cmp	r2, r3
 8005176:	d390      	bcc.n	800509a <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517c:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 800517e:	2300      	movs	r3, #0
 8005180:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005182:	e03c      	b.n	80051fe <AK8963_calibrate+0x20a>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 8005184:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005188:	0092      	lsls	r2, r2, #2
 800518a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800518e:	440a      	add	r2, r1
 8005190:	3a30      	subs	r2, #48	; 0x30
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	331c      	adds	r3, #28
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 800519e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80051a6:	4413      	add	r3, r2
 80051a8:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80051ac:	461a      	mov	r2, r3
 80051ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80051b6:	440b      	add	r3, r1
 80051b8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80051bc:	4413      	add	r3, r2
 80051be:	0fda      	lsrs	r2, r3, #31
 80051c0:	4413      	add	r3, r2
 80051c2:	105b      	asrs	r3, r3, #1
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80051d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	331c      	adds	r3, #28
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	3312      	adds	r3, #18
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3304      	adds	r3, #4
 80051f4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80051f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051fa:	3301      	adds	r3, #1
 80051fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80051fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005200:	2b02      	cmp	r3, #2
 8005202:	d9bf      	bls.n	8005184 <AK8963_calibrate+0x190>
	}
}
 8005204:	bf00      	nop
 8005206:	3738      	adds	r7, #56	; 0x38
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0801dd48 	.word	0x0801dd48
 8005210:	0801dd50 	.word	0x0801dd50
 8005214:	00000000 	.word	0x00000000

08005218 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800522c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800523c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005244:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005248:	ee17 0a90 	vmov	r0, s15
 800524c:	f7fb f98c 	bl	8000568 <__aeabi_f2d>
 8005250:	4604      	mov	r4, r0
 8005252:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800529c:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 80052a0:	ee17 0a90 	vmov	r0, s15
 80052a4:	f7fb f960 	bl	8000568 <__aeabi_f2d>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	ec43 2b11 	vmov	d1, r2, r3
 80052b0:	ec45 4b10 	vmov	d0, r4, r5
 80052b4:	f015 fdec 	bl	801ae90 <atan2>
 80052b8:	ec54 3b10 	vmov	r3, r4, d0
 80052bc:	4618      	mov	r0, r3
 80052be:	4621      	mov	r1, r4
 80052c0:	f7fb fca2 	bl	8000c08 <__aeabi_d2f>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80052d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80052e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052f2:	ee17 0a90 	vmov	r0, s15
 80052f6:	f7fb f937 	bl	8000568 <__aeabi_f2d>
 80052fa:	4603      	mov	r3, r0
 80052fc:	460c      	mov	r4, r1
 80052fe:	ec44 3b10 	vmov	d0, r3, r4
 8005302:	f015 fd6d 	bl	801ade0 <asin>
 8005306:	ec54 3b10 	vmov	r3, r4, d0
 800530a:	4618      	mov	r0, r3
 800530c:	4621      	mov	r1, r4
 800530e:	f7fb fc7b 	bl	8000c08 <__aeabi_d2f>
 8005312:	4603      	mov	r3, r0
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef1 7a67 	vneg.f32	s15, s15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800532e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800533e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005346:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800534a:	ee17 0a90 	vmov	r0, s15
 800534e:	f7fb f90b 	bl	8000568 <__aeabi_f2d>
 8005352:	4604      	mov	r4, r0
 8005354:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8005362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8005372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8005386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800539a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800539e:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 80053a2:	ee17 0a90 	vmov	r0, s15
 80053a6:	f7fb f8df 	bl	8000568 <__aeabi_f2d>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	ec43 2b11 	vmov	d1, r2, r3
 80053b2:	ec45 4b10 	vmov	d0, r4, r5
 80053b6:	f015 fd6b 	bl	801ae90 <atan2>
 80053ba:	ec54 3b10 	vmov	r3, r4, d0
 80053be:	4618      	mov	r0, r3
 80053c0:	4621      	mov	r1, r4
 80053c2:	f7fb fc21 	bl	8000c08 <__aeabi_d2f>
 80053c6:	4602      	mov	r2, r0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	615a      	str	r2, [r3, #20]
	inst->yaw	*= -180.0f / M_PI;			// Convert to degrees
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f8c9 	bl	8000568 <__aeabi_f2d>
 80053d6:	a349      	add	r3, pc, #292	; (adr r3, 80054fc <MPU9250_updateEuler+0x2e4>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f91c 	bl	8000618 <__aeabi_dmul>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4618      	mov	r0, r3
 80053e6:	4621      	mov	r1, r4
 80053e8:	f7fb fc0e 	bl	8000c08 <__aeabi_d2f>
 80053ec:	4602      	mov	r2, r0
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fb f8b6 	bl	8000568 <__aeabi_f2d>
 80053fc:	a341      	add	r3, pc, #260	; (adr r3, 8005504 <MPU9250_updateEuler+0x2ec>)
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f7fb f909 	bl	8000618 <__aeabi_dmul>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	4618      	mov	r0, r3
 800540c:	4621      	mov	r1, r4
 800540e:	f7fb fbfb 	bl	8000c08 <__aeabi_d2f>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fb f8a3 	bl	8000568 <__aeabi_f2d>
 8005422:	a338      	add	r3, pc, #224	; (adr r3, 8005504 <MPU9250_updateEuler+0x2ec>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb f8f6 	bl	8000618 <__aeabi_dmul>
 800542c:	4603      	mov	r3, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4618      	mov	r0, r3
 8005432:	4621      	mov	r1, r4
 8005434:	f7fb fbe8 	bl	8000c08 <__aeabi_d2f>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	615a      	str	r2, [r3, #20]
	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	ed93 7a03 	vldr	s14, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	ed93 7a04 	vldr	s14, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8005460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edc3 7a05 	vstr	s15, [r3, #20]
	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	edd3 7a03 	vldr	s15, [r3, #12]
 8005486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	d509      	bpl.n	80054a4 <MPU9250_updateEuler+0x28c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	edd3 7a03 	vldr	s15, [r3, #12]
 8005496:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 800549a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80054aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d509      	bpl.n	80054c8 <MPU9250_updateEuler+0x2b0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80054ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 80054be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80054ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	d400      	bmi.n	80054da <MPU9250_updateEuler+0x2c2>
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 80054d8:	e009      	b.n	80054ee <MPU9250_updateEuler+0x2d6>
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80054e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80054f8 <MPU9250_updateEuler+0x2e0>
 80054e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bdb0      	pop	{r4, r5, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	43b40000 	.word	0x43b40000
 80054fc:	1a63c1f8 	.word	0x1a63c1f8
 8005500:	c04ca5dc 	.word	0xc04ca5dc
 8005504:	1a63c1f8 	.word	0x1a63c1f8
 8005508:	404ca5dc 	.word	0x404ca5dc
 800550c:	00000000 	.word	0x00000000

08005510 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 8005510:	b5b0      	push	{r4, r5, r7, lr}
 8005512:	b0b2      	sub	sp, #200	; 0xc8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	edd3 7a08 	vldr	s15, [r3, #32]
 8005526:	eef1 7a67 	vneg.f32	s15, s15
 800552a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005534:	eef1 7a67 	vneg.f32	s15, s15
 8005538:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	4618      	mov	r0, r3
 8005542:	f7fb f811 	bl	8000568 <__aeabi_f2d>
 8005546:	a3b0      	add	r3, pc, #704	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f7fb f864 	bl	8000618 <__aeabi_dmul>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	4618      	mov	r0, r3
 8005556:	4621      	mov	r1, r4
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	4bac      	ldr	r3, [pc, #688]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 800555e:	f7fb f985 	bl	800086c <__aeabi_ddiv>
 8005562:	4603      	mov	r3, r0
 8005564:	460c      	mov	r4, r1
 8005566:	4618      	mov	r0, r3
 8005568:	4621      	mov	r1, r4
 800556a:	f7fb fb4d 	bl	8000c08 <__aeabi_d2f>
 800556e:	4603      	mov	r3, r0
 8005570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800557a:	eef1 7a67 	vneg.f32	s15, s15
 800557e:	ee17 3a90 	vmov	r3, s15
 8005582:	4618      	mov	r0, r3
 8005584:	f7fa fff0 	bl	8000568 <__aeabi_f2d>
 8005588:	a39f      	add	r3, pc, #636	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fb f843 	bl	8000618 <__aeabi_dmul>
 8005592:	4603      	mov	r3, r0
 8005594:	460c      	mov	r4, r1
 8005596:	4618      	mov	r0, r3
 8005598:	4621      	mov	r1, r4
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	4b9c      	ldr	r3, [pc, #624]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 80055a0:	f7fb f964 	bl	800086c <__aeabi_ddiv>
 80055a4:	4603      	mov	r3, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	4618      	mov	r0, r3
 80055aa:	4621      	mov	r1, r4
 80055ac:	f7fb fb2c 	bl	8000c08 <__aeabi_d2f>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055bc:	eef1 7a67 	vneg.f32	s15, s15
 80055c0:	ee17 3a90 	vmov	r3, s15
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fa ffcf 	bl	8000568 <__aeabi_f2d>
 80055ca:	a38f      	add	r3, pc, #572	; (adr r3, 8005808 <MadgwickQuaternionUpdate+0x2f8>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fb f822 	bl	8000618 <__aeabi_dmul>
 80055d4:	4603      	mov	r3, r0
 80055d6:	460c      	mov	r4, r1
 80055d8:	4618      	mov	r0, r3
 80055da:	4621      	mov	r1, r4
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	4b8b      	ldr	r3, [pc, #556]	; (8005810 <MadgwickQuaternionUpdate+0x300>)
 80055e2:	f7fb f943 	bl	800086c <__aeabi_ddiv>
 80055e6:	4603      	mov	r3, r0
 80055e8:	460c      	mov	r4, r1
 80055ea:	4618      	mov	r0, r3
 80055ec:	4621      	mov	r1, r4
 80055ee:	f7fb fb0b 	bl	8000c08 <__aeabi_d2f>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005606:	eef1 7a67 	vneg.f32	s15, s15
 800560a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 800563e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005646:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 800564a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800564e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005652:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8005656:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800565a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800565e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8005662:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005666:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800566a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 800566e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005672:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005676:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8005682:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005686:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800568a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8005696:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800569a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 80056a6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056b2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 80056b6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 80056c6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80056ca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 80056d6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056da:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 80056e6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056ea:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 80056f6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80056fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 8005706:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800570a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 8005716:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800571a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800571e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005722:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 8005726:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800572a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8005736:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800573a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800573e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005742:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8005746:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800574a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800574e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005752:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8005756:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800575a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800575e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005762:	eeb0 0a67 	vmov.f32	s0, s15
 8005766:	f015 fd69 	bl	801b23c <sqrtf>
 800576a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 800576e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005772:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577a:	f000 8614 	beq.w	80063a6 <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 800577e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005782:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800578a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 800578e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005792:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 800579e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80057a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057aa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 80057ae:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80057b2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 80057be:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80057c2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80057c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ca:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80057ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80057d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057da:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80057de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80057e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ea:	eeb0 0a67 	vmov.f32	s0, s15
 80057ee:	f015 fd25 	bl	801b23c <sqrtf>
 80057f2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 80057f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80057fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	f000 85d2 	beq.w	80063aa <MadgwickQuaternionUpdate+0xe9a>
 8005806:	e005      	b.n	8005814 <MadgwickQuaternionUpdate+0x304>
 8005808:	54442d18 	.word	0x54442d18
 800580c:	400921fb 	.word	0x400921fb
 8005810:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 8005814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005818:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800581c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005820:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 8005824:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005828:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800582c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005830:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 8005834:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005838:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800583c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005840:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8005844:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005848:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800584c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005850:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8005854:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005858:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800585c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005864:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8005868:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800586c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005870:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005878:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 800587c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005884:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8005890:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005894:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005898:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800589c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80058a4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80058a8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80058ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058b0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80058b4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80058b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80058c0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80058c4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80058d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80058d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058e0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058e4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80058e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80058f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058f8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80058fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005900:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005904:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800590c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005910:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005914:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800591c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005920:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005924:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800592c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005930:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8005934:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005938:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800593c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005940:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005944:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800594c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005950:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005954:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800595c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005960:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005964:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005970:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005974:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800597c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005980:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8005984:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800598c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005990:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005994:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005998:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800599c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80059a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059a8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80059ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 80059bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80059c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80059c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80059cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80059d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d8:	eeb0 0a67 	vmov.f32	s0, s15
 80059dc:	f015 fc2e 	bl	801b23c <sqrtf>
 80059e0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 80059e4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80059e8:	eeb1 7a67 	vneg.f32	s14, s15
 80059ec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80059f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80059f4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80059f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80059fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a04:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a08:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a14:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005a18:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a24:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a34:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005a38:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a40:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a4c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a50:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a5c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8005a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8005a70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005a74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8005a7c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005a80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005a88:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005a8c:	eeb1 7a67 	vneg.f32	s14, s15
 8005a90:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a98:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005aa0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005aa4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ab0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ab4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ab8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005abc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005ac4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005ad4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ad8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005adc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005ae0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005ae8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005aec:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005af0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005af4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005af8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005afc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005b00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005b04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b10:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005b14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b24:	eef1 6a67 	vneg.f32	s13, s15
 8005b28:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005b2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b30:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005b34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005b38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b40:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005b44:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005b48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005b4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b54:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005b58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005b5c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005b60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005b68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b7c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b80:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005b84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b88:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005b8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005b90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005b9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ba0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ba8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005bac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005bb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005bb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005bb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005bbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005bc0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bcc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005bd0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005bd4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005bd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bf0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005bf4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005bf8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005bfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c00:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005c04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005c08:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c18:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005c1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c20:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005c24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c38:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c3c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005c40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c4c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005c50:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c5c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005c60:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005c68:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005c6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005c74:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005c78:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005c7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005c80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005c84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005c88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c8c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c9c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005ca0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ca4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ca8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005cac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005cb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cb8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005cbc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005cc0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005cc4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005cc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ccc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005cd0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005cd4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005cd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005cdc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ce0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ce4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ce8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005cf8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005d04:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d10:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005d14:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005d20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d24:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005d28:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005d2c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d34:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005d38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005d3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005d40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d44:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d54:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005d58:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d5c:	eeb1 7a67 	vneg.f32	s14, s15
 8005d60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d68:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d70:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005d74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005d80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005d84:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d8c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005d90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005d94:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005da0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005da4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005da8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005db0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005db4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005db8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dbc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005dc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005dc4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005dc8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005dcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005ddc:	eef1 6a67 	vneg.f32	s13, s15
 8005de0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005de8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005dec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005df0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005df4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005df8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005dfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005e00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e04:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005e08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e0c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e14:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005e18:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005e1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e2c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005e30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e3c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e40:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e48:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005e4c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e58:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005e5c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e60:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e6c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005e70:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e74:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e84:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005e88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e94:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005e98:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ea0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8005ea4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005ea8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005eac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eb0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005eb4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ebc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005ec0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005ec4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005ec8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005ecc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ed0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005ed4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005ed8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005edc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ee0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ee4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ee8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005ef8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005efc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f00:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f08:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005f0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f10:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f18:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f1c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f20:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005f24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f28:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005f2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f30:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f3c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005f40:	eef1 6a67 	vneg.f32	s13, s15
 8005f44:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f4c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005f50:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005f54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005f58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f5c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f68:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f6c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f78:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005f7c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f80:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f84:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f88:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f8c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f90:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fa4:	eef1 6a67 	vneg.f32	s13, s15
 8005fa8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005fac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fb0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8005fb4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005fbc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005fc0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8005fc4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005fc8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fd4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005fd8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fdc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005fe0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005fe4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fe8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005fec:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005ff0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ffc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006000:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006008:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800600c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006010:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006014:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006018:	ee26 6a27 	vmul.f32	s12, s12, s15
 800601c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006020:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006024:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006028:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800602c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006030:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006034:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006038:	ee36 6a27 	vadd.f32	s12, s12, s15
 800603c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006040:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800604c:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8006050:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006054:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800605c:	edd7 6a08 	vldr	s13, [r7, #32]
 8006060:	edd7 7a08 	vldr	s15, [r7, #32]
 8006064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006070:	edd7 7a07 	vldr	s15, [r7, #28]
 8006074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800607c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006080:	edd7 7a06 	vldr	s15, [r7, #24]
 8006084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608c:	eeb0 0a67 	vmov.f32	s0, s15
 8006090:	f015 f8d4 	bl	801b23c <sqrtf>
 8006094:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8006098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80060a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 80060a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 80060b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80060bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c4:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 80060c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80060cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 80060d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80060dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 80060e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80060ec:	eeb1 7a67 	vneg.f32	s14, s15
 80060f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80060f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060f8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80060fc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006108:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800610c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800611c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006120:	ee17 0a90 	vmov	r0, s15
 8006124:	f7fa fa20 	bl	8000568 <__aeabi_f2d>
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800612e:	f7fa fa1b 	bl	8000568 <__aeabi_f2d>
 8006132:	a3a1      	add	r3, pc, #644	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa fa6e 	bl	8000618 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa f8b0 	bl	80002a8 <__aeabi_dsub>
 8006148:	4603      	mov	r3, r0
 800614a:	460c      	mov	r4, r1
 800614c:	4618      	mov	r0, r3
 800614e:	4621      	mov	r1, r4
 8006150:	f7fa fd5a 	bl	8000c08 <__aeabi_d2f>
 8006154:	4603      	mov	r3, r0
 8006156:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8006158:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800615c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006168:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006174:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006178:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800617c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006184:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800618c:	ee17 0a90 	vmov	r0, s15
 8006190:	f7fa f9ea 	bl	8000568 <__aeabi_f2d>
 8006194:	4604      	mov	r4, r0
 8006196:	460d      	mov	r5, r1
 8006198:	6a38      	ldr	r0, [r7, #32]
 800619a:	f7fa f9e5 	bl	8000568 <__aeabi_f2d>
 800619e:	a386      	add	r3, pc, #536	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fa fa38 	bl	8000618 <__aeabi_dmul>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4620      	mov	r0, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	f7fa f87a 	bl	80002a8 <__aeabi_dsub>
 80061b4:	4603      	mov	r3, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	4618      	mov	r0, r3
 80061ba:	4621      	mov	r1, r4
 80061bc:	f7fa fd24 	bl	8000c08 <__aeabi_d2f>
 80061c0:	4603      	mov	r3, r0
 80061c2:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 80061c4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80061c8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80061cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d0:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80061d4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80061d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061e0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80061e4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f8:	ee17 0a90 	vmov	r0, s15
 80061fc:	f7fa f9b4 	bl	8000568 <__aeabi_f2d>
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	69f8      	ldr	r0, [r7, #28]
 8006206:	f7fa f9af 	bl	8000568 <__aeabi_f2d>
 800620a:	a36b      	add	r3, pc, #428	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa fa02 	bl	8000618 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7fa f844 	bl	80002a8 <__aeabi_dsub>
 8006220:	4603      	mov	r3, r0
 8006222:	460c      	mov	r4, r1
 8006224:	4618      	mov	r0, r3
 8006226:	4621      	mov	r1, r4
 8006228:	f7fa fcee 	bl	8000c08 <__aeabi_d2f>
 800622c:	4603      	mov	r3, r0
 800622e:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 8006230:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006234:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800623c:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006240:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006244:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006248:	ee37 7a27 	vadd.f32	s14, s14, s15
 800624c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006250:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800625c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	ee17 0a90 	vmov	r0, s15
 8006268:	f7fa f97e 	bl	8000568 <__aeabi_f2d>
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	69b8      	ldr	r0, [r7, #24]
 8006272:	f7fa f979 	bl	8000568 <__aeabi_f2d>
 8006276:	a350      	add	r3, pc, #320	; (adr r3, 80063b8 <MadgwickQuaternionUpdate+0xea8>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9cc 	bl	8000618 <__aeabi_dmul>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7fa f80e 	bl	80002a8 <__aeabi_dsub>
 800628c:	4603      	mov	r3, r0
 800628e:	460c      	mov	r4, r1
 8006290:	4618      	mov	r0, r3
 8006292:	4621      	mov	r1, r4
 8006294:	f7fa fcb8 	bl	8000c08 <__aeabi_d2f>
 8006298:	4603      	mov	r3, r0
 800629a:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80062ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80062c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062cc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062de:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80062e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80062f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80062fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006300:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8006304:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006308:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800630c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006310:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006314:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006320:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006324:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006330:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006334:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800633c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006340:	eeb0 0a67 	vmov.f32	s0, s15
 8006344:	f014 ff7a 	bl	801b23c <sqrtf>
 8006348:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 800634c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006350:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006358:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 800635c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	inst->q[1] = q2 * norm;
 800636e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006372:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	inst->q[2] = q3 * norm;
 8006380:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006384:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	inst->q[3] = q4 * norm;
 8006392:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8006396:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
 80063a4:	e002      	b.n	80063ac <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80063aa:	bf00      	nop
}
 80063ac:	37c8      	adds	r7, #200	; 0xc8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bdb0      	pop	{r4, r5, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	f3af 8000 	nop.w
 80063b8:	89f0ed0f 	.word	0x89f0ed0f
 80063bc:	3fed0552 	.word	0x3fed0552

080063c0 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <millis+0x1c>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	4618      	mov	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <getTime>:
	
	return true;
}

static inline DateTime getTime(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	; 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80063e8:	f107 031c 	add.w	r3, r7, #28
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8006408:	f00f fb32 	bl	8015a70 <Get_RTC_Instance>
 800640c:	f107 031c 	add.w	r3, r7, #28
 8006410:	2200      	movs	r2, #0
 8006412:	4619      	mov	r1, r3
 8006414:	f004 f8b9 	bl	800a58a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8006418:	f00f fb2a 	bl	8015a70 <Get_RTC_Instance>
 800641c:	f107 0318 	add.w	r3, r7, #24
 8006420:	2200      	movs	r2, #0
 8006422:	4619      	mov	r1, r3
 8006424:	f004 f90f 	bl	800a646 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8006428:	7efb      	ldrb	r3, [r7, #27]
 800642a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 800642c:	7e7b      	ldrb	r3, [r7, #25]
 800642e:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8006430:	7ebb      	ldrb	r3, [r7, #26]
 8006432:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8006434:	7e3b      	ldrb	r3, [r7, #24]
 8006436:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8006438:	7f3b      	ldrb	r3, [r7, #28]
 800643a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800643c:	7f7b      	ldrb	r3, [r7, #29]
 800643e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8006440:	7fbb      	ldrb	r3, [r7, #30]
 8006442:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8006444:	f7ff ffbc 	bl	80063c0 <millis>
 8006448:	4602      	mov	r2, r0
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <getTime+0x9c>)
 800644c:	fba3 1302 	umull	r1, r3, r3, r2
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	b29b      	uxth	r3, r3
 800645e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	461a      	mov	r2, r3
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	cb03      	ldmia	r3!, {r0, r1}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	6051      	str	r1, [r2, #4]
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	8113      	strh	r3, [r2, #8]
}
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	3730      	adds	r7, #48	; 0x30
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	10624dd3 	.word	0x10624dd3

08006480 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8006486:	1d3b      	adds	r3, r7, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ffa9 	bl	80063e0 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 800648e:	7a3b      	ldrb	r3, [r7, #8]
 8006490:	4619      	mov	r1, r3
 8006492:	7a7b      	ldrb	r3, [r7, #9]
 8006494:	4618      	mov	r0, r3
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	797a      	ldrb	r2, [r7, #5]
 800649a:	9201      	str	r2, [sp, #4]
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4603      	mov	r3, r0
 80064a0:	460a      	mov	r2, r1
 80064a2:	4957      	ldr	r1, [pc, #348]	; (8006600 <log_new+0x180>)
 80064a4:	4857      	ldr	r0, [pc, #348]	; (8006604 <log_new+0x184>)
 80064a6:	f011 fd63 	bl	8017f70 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 80064aa:	4956      	ldr	r1, [pc, #344]	; (8006604 <log_new+0x184>)
 80064ac:	4856      	ldr	r0, [pc, #344]	; (8006608 <log_new+0x188>)
 80064ae:	f011 fd5f 	bl	8017f70 <siprintf>

	SD_init();
 80064b2:	f7fa feff 	bl	80012b4 <SD_init>
	SD_newDirectory((char*)directoryName);
 80064b6:	4853      	ldr	r0, [pc, #332]	; (8006604 <log_new+0x184>)
 80064b8:	f7fa ff98 	bl	80013ec <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 80064bc:	4851      	ldr	r0, [pc, #324]	; (8006604 <log_new+0x184>)
 80064be:	f7f9 fe91 	bl	80001e4 <strlen>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b4f      	ldr	r3, [pc, #316]	; (8006604 <log_new+0x184>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4950      	ldr	r1, [pc, #320]	; (800660c <log_new+0x18c>)
 80064cc:	461a      	mov	r2, r3
 80064ce:	460b      	mov	r3, r1
 80064d0:	cb03      	ldmia	r3!, {r0, r1}
 80064d2:	6010      	str	r0, [r2, #0]
 80064d4:	6051      	str	r1, [r2, #4]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	7213      	strb	r3, [r2, #8]
 80064da:	4b4a      	ldr	r3, [pc, #296]	; (8006604 <log_new+0x184>)
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa ff25 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80064e2:	4949      	ldr	r1, [pc, #292]	; (8006608 <log_new+0x188>)
 80064e4:	4847      	ldr	r0, [pc, #284]	; (8006604 <log_new+0x184>)
 80064e6:	f011 fd43 	bl	8017f70 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 80064ea:	4846      	ldr	r0, [pc, #280]	; (8006604 <log_new+0x184>)
 80064ec:	f7f9 fe7a 	bl	80001e4 <strlen>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <log_new+0x184>)
 80064f6:	4413      	add	r3, r2
 80064f8:	4945      	ldr	r1, [pc, #276]	; (8006610 <log_new+0x190>)
 80064fa:	461a      	mov	r2, r3
 80064fc:	460b      	mov	r3, r1
 80064fe:	cb03      	ldmia	r3!, {r0, r1}
 8006500:	6010      	str	r0, [r2, #0]
 8006502:	6051      	str	r1, [r2, #4]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	7213      	strb	r3, [r2, #8]
 8006508:	4b3e      	ldr	r3, [pc, #248]	; (8006604 <log_new+0x184>)
 800650a:	4618      	mov	r0, r3
 800650c:	f7fa ff0e 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8006510:	493d      	ldr	r1, [pc, #244]	; (8006608 <log_new+0x188>)
 8006512:	483c      	ldr	r0, [pc, #240]	; (8006604 <log_new+0x184>)
 8006514:	f011 fd2c 	bl	8017f70 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8006518:	483a      	ldr	r0, [pc, #232]	; (8006604 <log_new+0x184>)
 800651a:	f7f9 fe63 	bl	80001e4 <strlen>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <log_new+0x184>)
 8006524:	4413      	add	r3, r2
 8006526:	493b      	ldr	r1, [pc, #236]	; (8006614 <log_new+0x194>)
 8006528:	461a      	mov	r2, r3
 800652a:	460b      	mov	r3, r1
 800652c:	cb03      	ldmia	r3!, {r0, r1}
 800652e:	6010      	str	r0, [r2, #0]
 8006530:	6051      	str	r1, [r2, #4]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	7213      	strb	r3, [r2, #8]
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <log_new+0x184>)
 8006538:	4618      	mov	r0, r3
 800653a:	f7fa fef7 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800653e:	4932      	ldr	r1, [pc, #200]	; (8006608 <log_new+0x188>)
 8006540:	4830      	ldr	r0, [pc, #192]	; (8006604 <log_new+0x184>)
 8006542:	f011 fd15 	bl	8017f70 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8006546:	482f      	ldr	r0, [pc, #188]	; (8006604 <log_new+0x184>)
 8006548:	f7f9 fe4c 	bl	80001e4 <strlen>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <log_new+0x184>)
 8006552:	4413      	add	r3, r2
 8006554:	4930      	ldr	r1, [pc, #192]	; (8006618 <log_new+0x198>)
 8006556:	461a      	mov	r2, r3
 8006558:	460b      	mov	r3, r1
 800655a:	cb03      	ldmia	r3!, {r0, r1}
 800655c:	6010      	str	r0, [r2, #0]
 800655e:	6051      	str	r1, [r2, #4]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	7213      	strb	r3, [r2, #8]
 8006564:	4b27      	ldr	r3, [pc, #156]	; (8006604 <log_new+0x184>)
 8006566:	4618      	mov	r0, r3
 8006568:	f7fa fee0 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800656c:	4926      	ldr	r1, [pc, #152]	; (8006608 <log_new+0x188>)
 800656e:	4825      	ldr	r0, [pc, #148]	; (8006604 <log_new+0x184>)
 8006570:	f011 fcfe 	bl	8017f70 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8006574:	4823      	ldr	r0, [pc, #140]	; (8006604 <log_new+0x184>)
 8006576:	f7f9 fe35 	bl	80001e4 <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <log_new+0x184>)
 8006580:	4413      	add	r3, r2
 8006582:	4926      	ldr	r1, [pc, #152]	; (800661c <log_new+0x19c>)
 8006584:	461a      	mov	r2, r3
 8006586:	460b      	mov	r3, r1
 8006588:	cb03      	ldmia	r3!, {r0, r1}
 800658a:	6010      	str	r0, [r2, #0]
 800658c:	6051      	str	r1, [r2, #4]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	7213      	strb	r3, [r2, #8]
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <log_new+0x184>)
 8006594:	4618      	mov	r0, r3
 8006596:	f7fa fec9 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800659a:	491b      	ldr	r1, [pc, #108]	; (8006608 <log_new+0x188>)
 800659c:	4819      	ldr	r0, [pc, #100]	; (8006604 <log_new+0x184>)
 800659e:	f011 fce7 	bl	8017f70 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 80065a2:	4818      	ldr	r0, [pc, #96]	; (8006604 <log_new+0x184>)
 80065a4:	f7f9 fe1e 	bl	80001e4 <strlen>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b15      	ldr	r3, [pc, #84]	; (8006604 <log_new+0x184>)
 80065ae:	4413      	add	r3, r2
 80065b0:	491b      	ldr	r1, [pc, #108]	; (8006620 <log_new+0x1a0>)
 80065b2:	461a      	mov	r2, r3
 80065b4:	460b      	mov	r3, r1
 80065b6:	cb03      	ldmia	r3!, {r0, r1}
 80065b8:	6010      	str	r0, [r2, #0]
 80065ba:	6051      	str	r1, [r2, #4]
 80065bc:	8819      	ldrh	r1, [r3, #0]
 80065be:	789b      	ldrb	r3, [r3, #2]
 80065c0:	8111      	strh	r1, [r2, #8]
 80065c2:	7293      	strb	r3, [r2, #10]
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <log_new+0x184>)
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fa feb0 	bl	800132c <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <log_new+0x188>)
 80065ce:	480d      	ldr	r0, [pc, #52]	; (8006604 <log_new+0x184>)
 80065d0:	f011 fcce 	bl	8017f70 <siprintf>

	logBufferIndex = 0;
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <log_new+0x1a4>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80065da:	4b13      	ldr	r3, [pc, #76]	; (8006628 <log_new+0x1a8>)
 80065dc:	2200      	movs	r2, #0
 80065de:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <log_new+0x1ac>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <log_new+0x1b0>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <log_new+0x1b4>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80065f2:	4b11      	ldr	r3, [pc, #68]	; (8006638 <log_new+0x1b8>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	801a      	strh	r2, [r3, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	0801dd58 	.word	0x0801dd58
 8006604:	20006720 	.word	0x20006720
 8006608:	20004394 	.word	0x20004394
 800660c:	0801dd6c 	.word	0x0801dd6c
 8006610:	0801dd78 	.word	0x0801dd78
 8006614:	0801dd84 	.word	0x0801dd84
 8006618:	0801dd90 	.word	0x0801dd90
 800661c:	0801dd9c 	.word	0x0801dd9c
 8006620:	0801dda8 	.word	0x0801dda8
 8006624:	200067fe 	.word	0x200067fe
 8006628:	200067fa 	.word	0x200067fa
 800662c:	20005318 	.word	0x20005318
 8006630:	20006814 	.word	0x20006814
 8006634:	20004f10 	.word	0x20004f10
 8006638:	20004ee8 	.word	0x20004ee8

0800663c <log_save>:

void log_save()
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	//__disable_irq();


	if (logBufferIndex > 0)
 8006640:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <log_save+0x1f8>)
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01b      	beq.n	8006680 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8006648:	487b      	ldr	r0, [pc, #492]	; (8006838 <log_save+0x1fc>)
 800664a:	f7f9 fdcb 	bl	80001e4 <strlen>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	4b79      	ldr	r3, [pc, #484]	; (8006838 <log_save+0x1fc>)
 8006654:	4413      	add	r3, r2
 8006656:	4979      	ldr	r1, [pc, #484]	; (800683c <log_save+0x200>)
 8006658:	461a      	mov	r2, r3
 800665a:	460b      	mov	r3, r1
 800665c:	cb03      	ldmia	r3!, {r0, r1}
 800665e:	6010      	str	r0, [r2, #0]
 8006660:	6051      	str	r1, [r2, #4]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	7213      	strb	r3, [r2, #8]
 8006666:	4b74      	ldr	r3, [pc, #464]	; (8006838 <log_save+0x1fc>)
 8006668:	4619      	mov	r1, r3
 800666a:	4875      	ldr	r0, [pc, #468]	; (8006840 <log_save+0x204>)
 800666c:	f011 fc80 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006670:	4974      	ldr	r1, [pc, #464]	; (8006844 <log_save+0x208>)
 8006672:	4871      	ldr	r0, [pc, #452]	; (8006838 <log_save+0x1fc>)
 8006674:	f011 fc7c 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8006678:	4973      	ldr	r1, [pc, #460]	; (8006848 <log_save+0x20c>)
 800667a:	4871      	ldr	r0, [pc, #452]	; (8006840 <log_save+0x204>)
 800667c:	f7fa fe7e 	bl	800137c <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 8006680:	4b72      	ldr	r3, [pc, #456]	; (800684c <log_save+0x210>)
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8006688:	486b      	ldr	r0, [pc, #428]	; (8006838 <log_save+0x1fc>)
 800668a:	f7f9 fdab 	bl	80001e4 <strlen>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	4b69      	ldr	r3, [pc, #420]	; (8006838 <log_save+0x1fc>)
 8006694:	4413      	add	r3, r2
 8006696:	496e      	ldr	r1, [pc, #440]	; (8006850 <log_save+0x214>)
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	cb03      	ldmia	r3!, {r0, r1}
 800669e:	6010      	str	r0, [r2, #0]
 80066a0:	6051      	str	r1, [r2, #4]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	7213      	strb	r3, [r2, #8]
 80066a6:	4b64      	ldr	r3, [pc, #400]	; (8006838 <log_save+0x1fc>)
 80066a8:	4619      	mov	r1, r3
 80066aa:	4865      	ldr	r0, [pc, #404]	; (8006840 <log_save+0x204>)
 80066ac:	f011 fc60 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80066b0:	4964      	ldr	r1, [pc, #400]	; (8006844 <log_save+0x208>)
 80066b2:	4861      	ldr	r0, [pc, #388]	; (8006838 <log_save+0x1fc>)
 80066b4:	f011 fc5c 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 80066b8:	4966      	ldr	r1, [pc, #408]	; (8006854 <log_save+0x218>)
 80066ba:	4861      	ldr	r0, [pc, #388]	; (8006840 <log_save+0x204>)
 80066bc:	f7fa fe5e 	bl	800137c <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 80066c0:	4b65      	ldr	r3, [pc, #404]	; (8006858 <log_save+0x21c>)
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 80066c8:	485b      	ldr	r0, [pc, #364]	; (8006838 <log_save+0x1fc>)
 80066ca:	f7f9 fd8b 	bl	80001e4 <strlen>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b59      	ldr	r3, [pc, #356]	; (8006838 <log_save+0x1fc>)
 80066d4:	4413      	add	r3, r2
 80066d6:	4961      	ldr	r1, [pc, #388]	; (800685c <log_save+0x220>)
 80066d8:	461a      	mov	r2, r3
 80066da:	460b      	mov	r3, r1
 80066dc:	cb03      	ldmia	r3!, {r0, r1}
 80066de:	6010      	str	r0, [r2, #0]
 80066e0:	6051      	str	r1, [r2, #4]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	7213      	strb	r3, [r2, #8]
 80066e6:	4b54      	ldr	r3, [pc, #336]	; (8006838 <log_save+0x1fc>)
 80066e8:	4619      	mov	r1, r3
 80066ea:	4855      	ldr	r0, [pc, #340]	; (8006840 <log_save+0x204>)
 80066ec:	f011 fc40 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80066f0:	4954      	ldr	r1, [pc, #336]	; (8006844 <log_save+0x208>)
 80066f2:	4851      	ldr	r0, [pc, #324]	; (8006838 <log_save+0x1fc>)
 80066f4:	f011 fc3c 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 80066f8:	4959      	ldr	r1, [pc, #356]	; (8006860 <log_save+0x224>)
 80066fa:	4851      	ldr	r0, [pc, #324]	; (8006840 <log_save+0x204>)
 80066fc:	f7fa fe3e 	bl	800137c <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 8006700:	4b58      	ldr	r3, [pc, #352]	; (8006864 <log_save+0x228>)
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8006708:	484b      	ldr	r0, [pc, #300]	; (8006838 <log_save+0x1fc>)
 800670a:	f7f9 fd6b 	bl	80001e4 <strlen>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	4b49      	ldr	r3, [pc, #292]	; (8006838 <log_save+0x1fc>)
 8006714:	4413      	add	r3, r2
 8006716:	4954      	ldr	r1, [pc, #336]	; (8006868 <log_save+0x22c>)
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	cb03      	ldmia	r3!, {r0, r1}
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	6051      	str	r1, [r2, #4]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	7213      	strb	r3, [r2, #8]
 8006726:	4b44      	ldr	r3, [pc, #272]	; (8006838 <log_save+0x1fc>)
 8006728:	4619      	mov	r1, r3
 800672a:	4845      	ldr	r0, [pc, #276]	; (8006840 <log_save+0x204>)
 800672c:	f011 fc20 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006730:	4944      	ldr	r1, [pc, #272]	; (8006844 <log_save+0x208>)
 8006732:	4841      	ldr	r0, [pc, #260]	; (8006838 <log_save+0x1fc>)
 8006734:	f011 fc1c 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8006738:	494c      	ldr	r1, [pc, #304]	; (800686c <log_save+0x230>)
 800673a:	4841      	ldr	r0, [pc, #260]	; (8006840 <log_save+0x204>)
 800673c:	f7fa fe1e 	bl	800137c <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8006740:	4b4b      	ldr	r3, [pc, #300]	; (8006870 <log_save+0x234>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01b      	beq.n	8006780 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8006748:	483b      	ldr	r0, [pc, #236]	; (8006838 <log_save+0x1fc>)
 800674a:	f7f9 fd4b 	bl	80001e4 <strlen>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <log_save+0x1fc>)
 8006754:	4413      	add	r3, r2
 8006756:	4947      	ldr	r1, [pc, #284]	; (8006874 <log_save+0x238>)
 8006758:	461a      	mov	r2, r3
 800675a:	460b      	mov	r3, r1
 800675c:	cb03      	ldmia	r3!, {r0, r1}
 800675e:	6010      	str	r0, [r2, #0]
 8006760:	6051      	str	r1, [r2, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	7213      	strb	r3, [r2, #8]
 8006766:	4b34      	ldr	r3, [pc, #208]	; (8006838 <log_save+0x1fc>)
 8006768:	4619      	mov	r1, r3
 800676a:	4835      	ldr	r0, [pc, #212]	; (8006840 <log_save+0x204>)
 800676c:	f011 fc00 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8006770:	4934      	ldr	r1, [pc, #208]	; (8006844 <log_save+0x208>)
 8006772:	4831      	ldr	r0, [pc, #196]	; (8006838 <log_save+0x1fc>)
 8006774:	f011 fbfc 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8006778:	493f      	ldr	r1, [pc, #252]	; (8006878 <log_save+0x23c>)
 800677a:	4831      	ldr	r0, [pc, #196]	; (8006840 <log_save+0x204>)
 800677c:	f7fa fdfe 	bl	800137c <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <log_save+0x240>)
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01d      	beq.n	80067c4 <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8006788:	482b      	ldr	r0, [pc, #172]	; (8006838 <log_save+0x1fc>)
 800678a:	f7f9 fd2b 	bl	80001e4 <strlen>
 800678e:	4603      	mov	r3, r0
 8006790:	461a      	mov	r2, r3
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <log_save+0x1fc>)
 8006794:	4413      	add	r3, r2
 8006796:	493a      	ldr	r1, [pc, #232]	; (8006880 <log_save+0x244>)
 8006798:	461a      	mov	r2, r3
 800679a:	460b      	mov	r3, r1
 800679c:	cb03      	ldmia	r3!, {r0, r1}
 800679e:	6010      	str	r0, [r2, #0]
 80067a0:	6051      	str	r1, [r2, #4]
 80067a2:	8819      	ldrh	r1, [r3, #0]
 80067a4:	789b      	ldrb	r3, [r3, #2]
 80067a6:	8111      	strh	r1, [r2, #8]
 80067a8:	7293      	strb	r3, [r2, #10]
 80067aa:	4b23      	ldr	r3, [pc, #140]	; (8006838 <log_save+0x1fc>)
 80067ac:	4619      	mov	r1, r3
 80067ae:	4824      	ldr	r0, [pc, #144]	; (8006840 <log_save+0x204>)
 80067b0:	f011 fbde 	bl	8017f70 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80067b4:	4923      	ldr	r1, [pc, #140]	; (8006844 <log_save+0x208>)
 80067b6:	4820      	ldr	r0, [pc, #128]	; (8006838 <log_save+0x1fc>)
 80067b8:	f011 fbda 	bl	8017f70 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 80067bc:	4931      	ldr	r1, [pc, #196]	; (8006884 <log_save+0x248>)
 80067be:	4820      	ldr	r0, [pc, #128]	; (8006840 <log_save+0x204>)
 80067c0:	f7fa fddc 	bl	800137c <SD_writeToFile>
	}


	logBufferIndex = 0;
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <log_save+0x1f8>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <log_save+0x210>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <log_save+0x21c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <log_save+0x228>)
 80067d8:	2200      	movs	r2, #0
 80067da:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <log_save+0x234>)
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80067e2:	4b26      	ldr	r3, [pc, #152]	; (800687c <log_save+0x240>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 80067e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067ec:	2100      	movs	r1, #0
 80067ee:	4816      	ldr	r0, [pc, #88]	; (8006848 <log_save+0x20c>)
 80067f0:	f010 fcb9 	bl	8017166 <memset>
	memset(bmpBuffer, 0x00, 1024);
 80067f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f8:	2100      	movs	r1, #0
 80067fa:	4816      	ldr	r0, [pc, #88]	; (8006854 <log_save+0x218>)
 80067fc:	f010 fcb3 	bl	8017166 <memset>
	memset(gpsBuffer, 0x00, 1024);
 8006800:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006804:	2100      	movs	r1, #0
 8006806:	4816      	ldr	r0, [pc, #88]	; (8006860 <log_save+0x224>)
 8006808:	f010 fcad 	bl	8017166 <memset>
	memset(imuBuffer, 0x00, 1024);
 800680c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006810:	2100      	movs	r1, #0
 8006812:	4816      	ldr	r0, [pc, #88]	; (800686c <log_save+0x230>)
 8006814:	f010 fca7 	bl	8017166 <memset>
	memset(motBuffer, 0x00, 1024);
 8006818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800681c:	2100      	movs	r1, #0
 800681e:	4816      	ldr	r0, [pc, #88]	; (8006878 <log_save+0x23c>)
 8006820:	f010 fca1 	bl	8017166 <memset>
	memset(radioBuffer, 0x00, 4096);
 8006824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006828:	2100      	movs	r1, #0
 800682a:	4816      	ldr	r0, [pc, #88]	; (8006884 <log_save+0x248>)
 800682c:	f010 fc9b 	bl	8017166 <memset>
}
 8006830:	bf00      	nop
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200067fe 	.word	0x200067fe
 8006838:	20006720 	.word	0x20006720
 800683c:	0801dd6c 	.word	0x0801dd6c
 8006840:	200049dc 	.word	0x200049dc
 8006844:	20004394 	.word	0x20004394
 8006848:	20006320 	.word	0x20006320
 800684c:	200067fa 	.word	0x200067fa
 8006850:	0801dd78 	.word	0x0801dd78
 8006854:	20006820 	.word	0x20006820
 8006858:	20005318 	.word	0x20005318
 800685c:	0801dd84 	.word	0x0801dd84
 8006860:	200045d4 	.word	0x200045d4
 8006864:	20006814 	.word	0x20006814
 8006868:	0801dd90 	.word	0x0801dd90
 800686c:	20004f18 	.word	0x20004f18
 8006870:	20004f10 	.word	0x20004f10
 8006874:	0801dd9c 	.word	0x0801dd9c
 8006878:	20004ae8 	.word	0x20004ae8
 800687c:	20004ee8 	.word	0x20004ee8
 8006880:	0801dda8 	.word	0x0801dda8
 8006884:	20003394 	.word	0x20003394

08006888 <log_print>:


void log_print(char* line)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	if (logBufferIndex < 950)
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <log_print+0x4c>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006898:	4293      	cmp	r3, r2
 800689a:	d816      	bhi.n	80068ca <log_print+0x42>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 800689c:	f7ff fd90 	bl	80063c0 <millis>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	490c      	ldr	r1, [pc, #48]	; (80068d8 <log_print+0x50>)
 80068a6:	480d      	ldr	r0, [pc, #52]	; (80068dc <log_print+0x54>)
 80068a8:	f011 fb62 	bl	8017f70 <siprintf>
		strcat(logBuffer, line);
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	480c      	ldr	r0, [pc, #48]	; (80068e0 <log_print+0x58>)
 80068b0:	f011 fb7e 	bl	8017fb0 <strcat>
		strcat(logBuffer, timestamp);
 80068b4:	4909      	ldr	r1, [pc, #36]	; (80068dc <log_print+0x54>)
 80068b6:	480a      	ldr	r0, [pc, #40]	; (80068e0 <log_print+0x58>)
 80068b8:	f011 fb7a 	bl	8017fb0 <strcat>
		logBufferIndex = strlen(logBuffer);
 80068bc:	4808      	ldr	r0, [pc, #32]	; (80068e0 <log_print+0x58>)
 80068be:	f7f9 fc91 	bl	80001e4 <strlen>
 80068c2:	4603      	mov	r3, r0
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <log_print+0x4c>)
 80068c8:	801a      	strh	r2, [r3, #0]
	}
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200067fe 	.word	0x200067fe
 80068d8:	0801ddb4 	.word	0x0801ddb4
 80068dc:	20004ef0 	.word	0x20004ef0
 80068e0:	20006320 	.word	0x20006320

080068e4 <log_bmp>:

void log_bmp(BMP280* bmp)
{
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 80068ec:	4b1e      	ldr	r3, [pc, #120]	; (8006968 <log_bmp+0x84>)
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d832      	bhi.n	800695e <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80068f8:	f7ff fd62 	bl	80063c0 <millis>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	491a      	ldr	r1, [pc, #104]	; (800696c <log_bmp+0x88>)
 8006902:	481b      	ldr	r0, [pc, #108]	; (8006970 <log_bmp+0x8c>)
 8006904:	f011 fb34 	bl	8017f70 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fe2b 	bl	8000568 <__aeabi_f2d>
 8006912:	4605      	mov	r5, r0
 8006914:	460e      	mov	r6, r1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	4618      	mov	r0, r3
 800691c:	f7f9 fe24 	bl	8000568 <__aeabi_f2d>
 8006920:	4603      	mov	r3, r0
 8006922:	460c      	mov	r4, r1
 8006924:	e9cd 3400 	strd	r3, r4, [sp]
 8006928:	462a      	mov	r2, r5
 800692a:	4633      	mov	r3, r6
 800692c:	4911      	ldr	r1, [pc, #68]	; (8006974 <log_bmp+0x90>)
 800692e:	4812      	ldr	r0, [pc, #72]	; (8006978 <log_bmp+0x94>)
 8006930:	f011 fb1e 	bl	8017f70 <siprintf>
		strcat(tempBuffer, timestamp);
 8006934:	490e      	ldr	r1, [pc, #56]	; (8006970 <log_bmp+0x8c>)
 8006936:	4810      	ldr	r0, [pc, #64]	; (8006978 <log_bmp+0x94>)
 8006938:	f011 fb3a 	bl	8017fb0 <strcat>
		strcat(bmpBuffer, tempBuffer);
 800693c:	490e      	ldr	r1, [pc, #56]	; (8006978 <log_bmp+0x94>)
 800693e:	480f      	ldr	r0, [pc, #60]	; (800697c <log_bmp+0x98>)
 8006940:	f011 fb36 	bl	8017fb0 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <log_bmp+0x98>)
 8006946:	f7f9 fc4d 	bl	80001e4 <strlen>
 800694a:	4603      	mov	r3, r0
 800694c:	b29a      	uxth	r2, r3
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <log_bmp+0x84>)
 8006950:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8006952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006956:	2100      	movs	r1, #0
 8006958:	4807      	ldr	r0, [pc, #28]	; (8006978 <log_bmp+0x94>)
 800695a:	f010 fc04 	bl	8017166 <memset>
	}
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006966:	bf00      	nop
 8006968:	200067fa 	.word	0x200067fa
 800696c:	0801ddb4 	.word	0x0801ddb4
 8006970:	20004ef0 	.word	0x20004ef0
 8006974:	0801ddbc 	.word	0x0801ddbc
 8006978:	2000531c 	.word	0x2000531c
 800697c:	20006820 	.word	0x20006820

08006980 <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 3700)
 800698c:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <log_radio+0x98>)
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	f640 6273 	movw	r2, #3699	; 0xe73
 8006994:	4293      	cmp	r3, r2
 8006996:	d83a      	bhi.n	8006a0e <log_radio+0x8e>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8006998:	f7ff fd12 	bl	80063c0 <millis>
 800699c:	4603      	mov	r3, r0
 800699e:	461a      	mov	r2, r3
 80069a0:	491e      	ldr	r1, [pc, #120]	; (8006a1c <log_radio+0x9c>)
 80069a2:	481f      	ldr	r0, [pc, #124]	; (8006a20 <log_radio+0xa0>)
 80069a4:	f011 fae4 	bl	8017f70 <siprintf>

		if (transmit)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <log_radio+0x4a>
		{
			sprintf(tempBuffer, "TX\t[");
 80069ae:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <log_radio+0xa4>)
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <log_radio+0xa8>)
 80069b2:	6810      	ldr	r0, [r2, #0]
 80069b4:	6018      	str	r0, [r3, #0]
 80069b6:	7912      	ldrb	r2, [r2, #4]
 80069b8:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80069c0:	4619      	mov	r1, r3
 80069c2:	4818      	ldr	r0, [pc, #96]	; (8006a24 <log_radio+0xa4>)
 80069c4:	f011 faf4 	bl	8017fb0 <strcat>
 80069c8:	e00c      	b.n	80069e4 <log_radio+0x64>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ce:	461a      	mov	r2, r3
 80069d0:	4916      	ldr	r1, [pc, #88]	; (8006a2c <log_radio+0xac>)
 80069d2:	4814      	ldr	r0, [pc, #80]	; (8006a24 <log_radio+0xa4>)
 80069d4:	f011 facc 	bl	8017f70 <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3344      	adds	r3, #68	; 0x44
 80069dc:	4619      	mov	r1, r3
 80069de:	4811      	ldr	r0, [pc, #68]	; (8006a24 <log_radio+0xa4>)
 80069e0:	f011 fae6 	bl	8017fb0 <strcat>
		}

		strcat(tempBuffer, timestamp);
 80069e4:	490e      	ldr	r1, [pc, #56]	; (8006a20 <log_radio+0xa0>)
 80069e6:	480f      	ldr	r0, [pc, #60]	; (8006a24 <log_radio+0xa4>)
 80069e8:	f011 fae2 	bl	8017fb0 <strcat>
		strcat(radioBuffer, tempBuffer);
 80069ec:	490d      	ldr	r1, [pc, #52]	; (8006a24 <log_radio+0xa4>)
 80069ee:	4810      	ldr	r0, [pc, #64]	; (8006a30 <log_radio+0xb0>)
 80069f0:	f011 fade 	bl	8017fb0 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 80069f4:	480e      	ldr	r0, [pc, #56]	; (8006a30 <log_radio+0xb0>)
 80069f6:	f7f9 fbf5 	bl	80001e4 <strlen>
 80069fa:	4603      	mov	r3, r0
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <log_radio+0x98>)
 8006a00:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8006a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a06:	2100      	movs	r1, #0
 8006a08:	4806      	ldr	r0, [pc, #24]	; (8006a24 <log_radio+0xa4>)
 8006a0a:	f010 fbac 	bl	8017166 <memset>
	}
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20004ee8 	.word	0x20004ee8
 8006a1c:	0801ddf4 	.word	0x0801ddf4
 8006a20:	20004ef0 	.word	0x20004ef0
 8006a24:	2000531c 	.word	0x2000531c
 8006a28:	0801de00 	.word	0x0801de00
 8006a2c:	0801de08 	.word	0x0801de08
 8006a30:	20003394 	.word	0x20003394

08006a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <HAL_Init+0x40>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a0d      	ldr	r2, [pc, #52]	; (8006a74 <HAL_Init+0x40>)
 8006a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <HAL_Init+0x40>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a0a      	ldr	r2, [pc, #40]	; (8006a74 <HAL_Init+0x40>)
 8006a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <HAL_Init+0x40>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a07      	ldr	r2, [pc, #28]	; (8006a74 <HAL_Init+0x40>)
 8006a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a5c:	2003      	movs	r0, #3
 8006a5e:	f000 f94d 	bl	8006cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a62:	2000      	movs	r0, #0
 8006a64:	f000 f808 	bl	8006a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a68:	f00f fa4c 	bl	8015f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40023c00 	.word	0x40023c00

08006a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_InitTick+0x54>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <HAL_InitTick+0x58>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f965 	bl	8006d66 <HAL_SYSTICK_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e00e      	b.n	8006ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b0f      	cmp	r3, #15
 8006aaa:	d80a      	bhi.n	8006ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006aac:	2200      	movs	r2, #0
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	f000 f92d 	bl	8006d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ab8:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <HAL_InitTick+0x5c>)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e000      	b.n	8006ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000170 	.word	0x20000170
 8006ad0:	20000008 	.word	0x20000008
 8006ad4:	20000004 	.word	0x20000004

08006ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <HAL_IncTick+0x20>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_IncTick+0x24>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4a04      	ldr	r2, [pc, #16]	; (8006afc <HAL_IncTick+0x24>)
 8006aea:	6013      	str	r3, [r2, #0]
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000008 	.word	0x20000008
 8006afc:	20006c28 	.word	0x20006c28

08006b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return uwTick;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <HAL_GetTick+0x14>)
 8006b06:	681b      	ldr	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20006c28 	.word	0x20006c28

08006b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b20:	f7ff ffee 	bl	8006b00 <HAL_GetTick>
 8006b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d005      	beq.n	8006b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <HAL_Delay+0x40>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b3e:	bf00      	nop
 8006b40:	f7ff ffde 	bl	8006b00 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d8f7      	bhi.n	8006b40 <HAL_Delay+0x28>
  {
  }
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000008 	.word	0x20000008

08006b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b8e:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	60d3      	str	r3, [r2, #12]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <__NVIC_GetPriorityGrouping+0x18>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	0a1b      	lsrs	r3, r3, #8
 8006bae:	f003 0307 	and.w	r3, r3, #7
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	e000ed00 	.word	0xe000ed00

08006bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	db0b      	blt.n	8006bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	f003 021f 	and.w	r2, r3, #31
 8006bd8:	4907      	ldr	r1, [pc, #28]	; (8006bf8 <__NVIC_EnableIRQ+0x38>)
 8006bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2001      	movs	r0, #1
 8006be2:	fa00 f202 	lsl.w	r2, r0, r2
 8006be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	e000e100 	.word	0xe000e100

08006bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	db0a      	blt.n	8006c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	490c      	ldr	r1, [pc, #48]	; (8006c48 <__NVIC_SetPriority+0x4c>)
 8006c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1a:	0112      	lsls	r2, r2, #4
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	440b      	add	r3, r1
 8006c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c24:	e00a      	b.n	8006c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	4908      	ldr	r1, [pc, #32]	; (8006c4c <__NVIC_SetPriority+0x50>)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	3b04      	subs	r3, #4
 8006c34:	0112      	lsls	r2, r2, #4
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	440b      	add	r3, r1
 8006c3a:	761a      	strb	r2, [r3, #24]
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	e000e100 	.word	0xe000e100
 8006c4c:	e000ed00 	.word	0xe000ed00

08006c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f1c3 0307 	rsb	r3, r3, #7
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	bf28      	it	cs
 8006c6e:	2304      	movcs	r3, #4
 8006c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3304      	adds	r3, #4
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d902      	bls.n	8006c80 <NVIC_EncodePriority+0x30>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3b03      	subs	r3, #3
 8006c7e:	e000      	b.n	8006c82 <NVIC_EncodePriority+0x32>
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c84:	f04f 32ff 	mov.w	r2, #4294967295
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	43da      	mvns	r2, r3
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	401a      	ands	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c98:	f04f 31ff 	mov.w	r1, #4294967295
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	43d9      	mvns	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca8:	4313      	orrs	r3, r2
         );
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3724      	adds	r7, #36	; 0x24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc8:	d301      	bcc.n	8006cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e00f      	b.n	8006cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <SysTick_Config+0x40>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cd6:	210f      	movs	r1, #15
 8006cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cdc:	f7ff ff8e 	bl	8006bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ce0:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <SysTick_Config+0x40>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <SysTick_Config+0x40>)
 8006ce8:	2207      	movs	r2, #7
 8006cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	e000e010 	.word	0xe000e010

08006cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff ff29 	bl	8006b5c <__NVIC_SetPriorityGrouping>
}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	4603      	mov	r3, r0
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d24:	f7ff ff3e 	bl	8006ba4 <__NVIC_GetPriorityGrouping>
 8006d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	6978      	ldr	r0, [r7, #20]
 8006d30:	f7ff ff8e 	bl	8006c50 <NVIC_EncodePriority>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff ff5d 	bl	8006bfc <__NVIC_SetPriority>
}
 8006d42:	bf00      	nop
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	4603      	mov	r3, r0
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff ff31 	bl	8006bc0 <__NVIC_EnableIRQ>
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ffa2 	bl	8006cb8 <SysTick_Config>
 8006d74:	4603      	mov	r3, r0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d8c:	f7ff feb8 	bl	8006b00 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e099      	b.n	8006ed0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dbc:	e00f      	b.n	8006dde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dbe:	f7ff fe9f 	bl	8006b00 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	d908      	bls.n	8006dde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e078      	b.n	8006ed0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e8      	bne.n	8006dbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4b38      	ldr	r3, [pc, #224]	; (8006ed8 <HAL_DMA_Init+0x158>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d107      	bne.n	8006e48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4313      	orrs	r3, r2
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d117      	bne.n	8006ea2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa99 	bl	80073bc <DMA_CheckFifoParam>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2240      	movs	r2, #64	; 0x40
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e016      	b.n	8006ed0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa50 	bl	8007350 <DMA_CalcBaseAndBitshift>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	223f      	movs	r2, #63	; 0x3f
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	f010803f 	.word	0xf010803f

08006edc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_DMA_Start_IT+0x26>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e048      	b.n	8006f94 <HAL_DMA_Start_IT+0xb8>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d137      	bne.n	8006f86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68b9      	ldr	r1, [r7, #8]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f9e2 	bl	80072f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f34:	223f      	movs	r2, #63	; 0x3f
 8006f36:	409a      	lsls	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0216 	orr.w	r2, r2, #22
 8006f4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695a      	ldr	r2, [r3, #20]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f5a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0208 	orr.w	r2, r2, #8
 8006f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e005      	b.n	8006f92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d004      	beq.n	8006fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e00c      	b.n	8006fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2205      	movs	r2, #5
 8006fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fec:	4b92      	ldr	r3, [pc, #584]	; (8007238 <HAL_DMA_IRQHandler+0x258>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a92      	ldr	r2, [pc, #584]	; (800723c <HAL_DMA_IRQHandler+0x25c>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	0a9b      	lsrs	r3, r3, #10
 8006ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700a:	2208      	movs	r2, #8
 800700c:	409a      	lsls	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01a      	beq.n	800704c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d013      	beq.n	800704c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0204 	bic.w	r2, r2, #4
 8007032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007038:	2208      	movs	r2, #8
 800703a:	409a      	lsls	r2, r3
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007044:	f043 0201 	orr.w	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4013      	ands	r3, r2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d012      	beq.n	8007082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706e:	2201      	movs	r2, #1
 8007070:	409a      	lsls	r2, r3
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	f043 0202 	orr.w	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007086:	2204      	movs	r2, #4
 8007088:	409a      	lsls	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4013      	ands	r3, r2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d012      	beq.n	80070b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	2204      	movs	r2, #4
 80070a6:	409a      	lsls	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070bc:	2210      	movs	r2, #16
 80070be:	409a      	lsls	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4013      	ands	r3, r2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d043      	beq.n	8007150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03c      	beq.n	8007150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	2210      	movs	r2, #16
 80070dc:	409a      	lsls	r2, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d018      	beq.n	8007122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d108      	bne.n	8007110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d024      	beq.n	8007150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	e01f      	b.n	8007150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	4798      	blx	r3
 8007120:	e016      	b.n	8007150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0208 	bic.w	r2, r2, #8
 800713e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007154:	2220      	movs	r2, #32
 8007156:	409a      	lsls	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4013      	ands	r3, r2
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 808e 	beq.w	800727e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8086 	beq.w	800727e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007176:	2220      	movs	r2, #32
 8007178:	409a      	lsls	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b05      	cmp	r3, #5
 8007188:	d136      	bne.n	80071f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0216 	bic.w	r2, r2, #22
 8007198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <HAL_DMA_IRQHandler+0x1da>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0208 	bic.w	r2, r2, #8
 80071c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	223f      	movs	r2, #63	; 0x3f
 80071d0:	409a      	lsls	r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d07d      	beq.n	80072ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
        }
        return;
 80071f6:	e078      	b.n	80072ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d01c      	beq.n	8007240 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	2b00      	cmp	r3, #0
 800721a:	d030      	beq.n	800727e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
 8007224:	e02b      	b.n	800727e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d027      	beq.n	800727e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
 8007236:	e022      	b.n	800727e <HAL_DMA_IRQHandler+0x29e>
 8007238:	20000170 	.word	0x20000170
 800723c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10f      	bne.n	800726e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0210 	bic.w	r2, r2, #16
 800725c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	2b00      	cmp	r3, #0
 8007284:	d032      	beq.n	80072ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d022      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2205      	movs	r2, #5
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0201 	bic.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d307      	bcc.n	80072c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f2      	bne.n	80072aa <HAL_DMA_IRQHandler+0x2ca>
 80072c4:	e000      	b.n	80072c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80072c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	4798      	blx	r3
 80072e8:	e000      	b.n	80072ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80072ea:	bf00      	nop
    }
  }
}
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop

080072f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d108      	bne.n	8007334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007332:	e007      	b.n	8007344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	60da      	str	r2, [r3, #12]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3b10      	subs	r3, #16
 8007360:	4a14      	ldr	r2, [pc, #80]	; (80073b4 <DMA_CalcBaseAndBitshift+0x64>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800736a:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <DMA_CalcBaseAndBitshift+0x68>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d909      	bls.n	8007392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	1d1a      	adds	r2, r3, #4
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	; 0x58
 8007390:	e007      	b.n	80073a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	aaaaaaab 	.word	0xaaaaaaab
 80073b8:	0801e21c 	.word	0x0801e21c

080073bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d11f      	bne.n	8007416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d855      	bhi.n	8007488 <DMA_CheckFifoParam+0xcc>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <DMA_CheckFifoParam+0x28>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	080073f5 	.word	0x080073f5
 80073e8:	08007407 	.word	0x08007407
 80073ec:	080073f5 	.word	0x080073f5
 80073f0:	08007489 	.word	0x08007489
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d045      	beq.n	800748c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007404:	e042      	b.n	800748c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800740e:	d13f      	bne.n	8007490 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007414:	e03c      	b.n	8007490 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800741e:	d121      	bne.n	8007464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b03      	cmp	r3, #3
 8007424:	d836      	bhi.n	8007494 <DMA_CheckFifoParam+0xd8>
 8007426:	a201      	add	r2, pc, #4	; (adr r2, 800742c <DMA_CheckFifoParam+0x70>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007443 	.word	0x08007443
 8007434:	0800743d 	.word	0x0800743d
 8007438:	08007455 	.word	0x08007455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	e02f      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d024      	beq.n	8007498 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007452:	e021      	b.n	8007498 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800745c:	d11e      	bne.n	800749c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007462:	e01b      	b.n	800749c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d902      	bls.n	8007470 <DMA_CheckFifoParam+0xb4>
 800746a:	2b03      	cmp	r3, #3
 800746c:	d003      	beq.n	8007476 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800746e:	e018      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
      break;
 8007474:	e015      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00e      	beq.n	80074a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	e00b      	b.n	80074a0 <DMA_CheckFifoParam+0xe4>
      break;
 8007488:	bf00      	nop
 800748a:	e00a      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;
 800748c:	bf00      	nop
 800748e:	e008      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;
 8007490:	bf00      	nop
 8007492:	e006      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;
 8007494:	bf00      	nop
 8007496:	e004      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;
 8007498:	bf00      	nop
 800749a:	e002      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800749c:	bf00      	nop
 800749e:	e000      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
      break;
 80074a0:	bf00      	nop
    }
  } 
  
  return status; 
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b089      	sub	sp, #36	; 0x24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	e16b      	b.n	80077a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80074cc:	2201      	movs	r2, #1
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4013      	ands	r3, r2
 80074de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	f040 815a 	bne.w	800779e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_Init+0x4a>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b12      	cmp	r3, #18
 80074f8:	d123      	bne.n	8007542 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	08da      	lsrs	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3208      	adds	r2, #8
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	220f      	movs	r2, #15
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	4013      	ands	r3, r2
 800751c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f003 0307 	and.w	r3, r3, #7
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	4313      	orrs	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	08da      	lsrs	r2, r3, #3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3208      	adds	r2, #8
 800753c:	69b9      	ldr	r1, [r7, #24]
 800753e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	2203      	movs	r2, #3
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	43db      	mvns	r3, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4013      	ands	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 0203 	and.w	r2, r3, #3
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	fa02 f303 	lsl.w	r3, r2, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4313      	orrs	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d00b      	beq.n	8007596 <HAL_GPIO_Init+0xe6>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d007      	beq.n	8007596 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800758a:	2b11      	cmp	r3, #17
 800758c:	d003      	beq.n	8007596 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b12      	cmp	r3, #18
 8007594:	d130      	bne.n	80075f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	2203      	movs	r2, #3
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43db      	mvns	r3, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	4013      	ands	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	4313      	orrs	r3, r2
 80075be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075cc:	2201      	movs	r2, #1
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4013      	ands	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 0201 	and.w	r2, r3, #1
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	2203      	movs	r2, #3
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4013      	ands	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4313      	orrs	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 80b4 	beq.w	800779e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	4b5f      	ldr	r3, [pc, #380]	; (80077b8 <HAL_GPIO_Init+0x308>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	4a5e      	ldr	r2, [pc, #376]	; (80077b8 <HAL_GPIO_Init+0x308>)
 8007640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007644:	6453      	str	r3, [r2, #68]	; 0x44
 8007646:	4b5c      	ldr	r3, [pc, #368]	; (80077b8 <HAL_GPIO_Init+0x308>)
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007652:	4a5a      	ldr	r2, [pc, #360]	; (80077bc <HAL_GPIO_Init+0x30c>)
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	089b      	lsrs	r3, r3, #2
 8007658:	3302      	adds	r3, #2
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	220f      	movs	r2, #15
 800766a:	fa02 f303 	lsl.w	r3, r2, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	4013      	ands	r3, r2
 8007674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a51      	ldr	r2, [pc, #324]	; (80077c0 <HAL_GPIO_Init+0x310>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d02b      	beq.n	80076d6 <HAL_GPIO_Init+0x226>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a50      	ldr	r2, [pc, #320]	; (80077c4 <HAL_GPIO_Init+0x314>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d025      	beq.n	80076d2 <HAL_GPIO_Init+0x222>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a4f      	ldr	r2, [pc, #316]	; (80077c8 <HAL_GPIO_Init+0x318>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01f      	beq.n	80076ce <HAL_GPIO_Init+0x21e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a4e      	ldr	r2, [pc, #312]	; (80077cc <HAL_GPIO_Init+0x31c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d019      	beq.n	80076ca <HAL_GPIO_Init+0x21a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a4d      	ldr	r2, [pc, #308]	; (80077d0 <HAL_GPIO_Init+0x320>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <HAL_GPIO_Init+0x216>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a4c      	ldr	r2, [pc, #304]	; (80077d4 <HAL_GPIO_Init+0x324>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00d      	beq.n	80076c2 <HAL_GPIO_Init+0x212>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a4b      	ldr	r2, [pc, #300]	; (80077d8 <HAL_GPIO_Init+0x328>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <HAL_GPIO_Init+0x20e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a4a      	ldr	r2, [pc, #296]	; (80077dc <HAL_GPIO_Init+0x32c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <HAL_GPIO_Init+0x20a>
 80076b6:	2307      	movs	r3, #7
 80076b8:	e00e      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076ba:	2308      	movs	r3, #8
 80076bc:	e00c      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076be:	2306      	movs	r3, #6
 80076c0:	e00a      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076c2:	2305      	movs	r3, #5
 80076c4:	e008      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076c6:	2304      	movs	r3, #4
 80076c8:	e006      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076ca:	2303      	movs	r3, #3
 80076cc:	e004      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e002      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <HAL_GPIO_Init+0x228>
 80076d6:	2300      	movs	r3, #0
 80076d8:	69fa      	ldr	r2, [r7, #28]
 80076da:	f002 0203 	and.w	r2, r2, #3
 80076de:	0092      	lsls	r2, r2, #2
 80076e0:	4093      	lsls	r3, r2
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076e8:	4934      	ldr	r1, [pc, #208]	; (80077bc <HAL_GPIO_Init+0x30c>)
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	089b      	lsrs	r3, r3, #2
 80076ee:	3302      	adds	r3, #2
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80076f6:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <HAL_GPIO_Init+0x330>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	43db      	mvns	r3, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800771a:	4a31      	ldr	r2, [pc, #196]	; (80077e0 <HAL_GPIO_Init+0x330>)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007720:	4b2f      	ldr	r3, [pc, #188]	; (80077e0 <HAL_GPIO_Init+0x330>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	43db      	mvns	r3, r3
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4013      	ands	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007744:	4a26      	ldr	r2, [pc, #152]	; (80077e0 <HAL_GPIO_Init+0x330>)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <HAL_GPIO_Init+0x330>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800776e:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_GPIO_Init+0x330>)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <HAL_GPIO_Init+0x330>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	43db      	mvns	r3, r3
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	4013      	ands	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007798:	4a11      	ldr	r2, [pc, #68]	; (80077e0 <HAL_GPIO_Init+0x330>)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	f67f ae90 	bls.w	80074cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077ac:	bf00      	nop
 80077ae:	3724      	adds	r7, #36	; 0x24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40023800 	.word	0x40023800
 80077bc:	40013800 	.word	0x40013800
 80077c0:	40020000 	.word	0x40020000
 80077c4:	40020400 	.word	0x40020400
 80077c8:	40020800 	.word	0x40020800
 80077cc:	40020c00 	.word	0x40020c00
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40021400 	.word	0x40021400
 80077d8:	40021800 	.word	0x40021800
 80077dc:	40021c00 	.word	0x40021c00
 80077e0:	40013c00 	.word	0x40013c00

080077e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	887b      	ldrh	r3, [r7, #2]
 80077f6:	4013      	ands	r3, r2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
 8007800:	e001      	b.n	8007806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	807b      	strh	r3, [r7, #2]
 8007820:	4613      	mov	r3, r2
 8007822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007824:	787b      	ldrb	r3, [r7, #1]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800782a:	887a      	ldrh	r2, [r7, #2]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007830:	e003      	b.n	800783a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007832:	887b      	ldrh	r3, [r7, #2]
 8007834:	041a      	lsls	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	619a      	str	r2, [r3, #24]
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	887b      	ldrh	r3, [r7, #2]
 8007858:	401a      	ands	r2, r3
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	429a      	cmp	r2, r3
 800785e:	d104      	bne.n	800786a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	041a      	lsls	r2, r3, #16
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007868:	e002      	b.n	8007870 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800786a:	887a      	ldrh	r2, [r7, #2]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	619a      	str	r2, [r3, #24]
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e10f      	b.n	8007aae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f00e fb56 	bl	8015f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2224      	movs	r2, #36	; 0x24
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078c0:	f002 fcc8 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 80078c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4a7b      	ldr	r2, [pc, #492]	; (8007ab8 <HAL_I2C_Init+0x23c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d807      	bhi.n	80078e0 <HAL_I2C_Init+0x64>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a7a      	ldr	r2, [pc, #488]	; (8007abc <HAL_I2C_Init+0x240>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf94      	ite	ls
 80078d8:	2301      	movls	r3, #1
 80078da:	2300      	movhi	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e006      	b.n	80078ee <HAL_I2C_Init+0x72>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4a77      	ldr	r2, [pc, #476]	; (8007ac0 <HAL_I2C_Init+0x244>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bf94      	ite	ls
 80078e8:	2301      	movls	r3, #1
 80078ea:	2300      	movhi	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0db      	b.n	8007aae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a72      	ldr	r2, [pc, #456]	; (8007ac4 <HAL_I2C_Init+0x248>)
 80078fa:	fba2 2303 	umull	r2, r3, r2, r3
 80078fe:	0c9b      	lsrs	r3, r3, #18
 8007900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4a64      	ldr	r2, [pc, #400]	; (8007ab8 <HAL_I2C_Init+0x23c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d802      	bhi.n	8007930 <HAL_I2C_Init+0xb4>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	3301      	adds	r3, #1
 800792e:	e009      	b.n	8007944 <HAL_I2C_Init+0xc8>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007936:	fb02 f303 	mul.w	r3, r2, r3
 800793a:	4a63      	ldr	r2, [pc, #396]	; (8007ac8 <HAL_I2C_Init+0x24c>)
 800793c:	fba2 2303 	umull	r2, r3, r2, r3
 8007940:	099b      	lsrs	r3, r3, #6
 8007942:	3301      	adds	r3, #1
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	430b      	orrs	r3, r1
 800794a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	4956      	ldr	r1, [pc, #344]	; (8007ab8 <HAL_I2C_Init+0x23c>)
 8007960:	428b      	cmp	r3, r1
 8007962:	d80d      	bhi.n	8007980 <HAL_I2C_Init+0x104>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	1e59      	subs	r1, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007972:	3301      	adds	r3, #1
 8007974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007978:	2b04      	cmp	r3, #4
 800797a:	bf38      	it	cc
 800797c:	2304      	movcc	r3, #4
 800797e:	e04f      	b.n	8007a20 <HAL_I2C_Init+0x1a4>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d111      	bne.n	80079ac <HAL_I2C_Init+0x130>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1e58      	subs	r0, r3, #1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	440b      	add	r3, r1
 8007996:	fbb0 f3f3 	udiv	r3, r0, r3
 800799a:	3301      	adds	r3, #1
 800799c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	e012      	b.n	80079d2 <HAL_I2C_Init+0x156>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	1e58      	subs	r0, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6859      	ldr	r1, [r3, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	0099      	lsls	r1, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	fbb0 f3f3 	udiv	r3, r0, r3
 80079c2:	3301      	adds	r3, #1
 80079c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bf0c      	ite	eq
 80079cc:	2301      	moveq	r3, #1
 80079ce:	2300      	movne	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_I2C_Init+0x15e>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e022      	b.n	8007a20 <HAL_I2C_Init+0x1a4>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10e      	bne.n	8007a00 <HAL_I2C_Init+0x184>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1e58      	subs	r0, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6859      	ldr	r1, [r3, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	440b      	add	r3, r1
 80079f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80079f4:	3301      	adds	r3, #1
 80079f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079fe:	e00f      	b.n	8007a20 <HAL_I2C_Init+0x1a4>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	1e58      	subs	r0, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6859      	ldr	r1, [r3, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	0099      	lsls	r1, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a16:	3301      	adds	r3, #1
 8007a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	6809      	ldr	r1, [r1, #0]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6911      	ldr	r1, [r2, #16]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	68d2      	ldr	r2, [r2, #12]
 8007a5a:	4311      	orrs	r1, r2
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	430b      	orrs	r3, r1
 8007a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	000186a0 	.word	0x000186a0
 8007abc:	001e847f 	.word	0x001e847f
 8007ac0:	003d08ff 	.word	0x003d08ff
 8007ac4:	431bde83 	.word	0x431bde83
 8007ac8:	10624dd3 	.word	0x10624dd3

08007acc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	817b      	strh	r3, [r7, #10]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	813b      	strh	r3, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ae6:	f7ff f80b 	bl	8006b00 <HAL_GetTick>
 8007aea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	f040 80d9 	bne.w	8007cac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	2319      	movs	r3, #25
 8007b00:	2201      	movs	r2, #1
 8007b02:	496d      	ldr	r1, [pc, #436]	; (8007cb8 <HAL_I2C_Mem_Write+0x1ec>)
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fc5b 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0cc      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <HAL_I2C_Mem_Write+0x56>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e0c5      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d007      	beq.n	8007b48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2221      	movs	r2, #33	; 0x21
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2240      	movs	r2, #64	; 0x40
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4a4d      	ldr	r2, [pc, #308]	; (8007cbc <HAL_I2C_Mem_Write+0x1f0>)
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b8a:	88f8      	ldrh	r0, [r7, #6]
 8007b8c:	893a      	ldrh	r2, [r7, #8]
 8007b8e:	8979      	ldrh	r1, [r7, #10]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fab6 	bl	800810c <I2C_RequestMemoryWrite>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d052      	beq.n	8007c4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e081      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fcdc 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00d      	beq.n	8007bd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d107      	bne.n	8007bd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e06b      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d11b      	bne.n	8007c4c <HAL_I2C_Mem_Write+0x180>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d017      	beq.n	8007c4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1aa      	bne.n	8007baa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 fcc8 	bl	80085ee <I2C_WaitOnBTFFlagUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d107      	bne.n	8007c7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e016      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e000      	b.n	8007cae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007cac:	2302      	movs	r3, #2
  }
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	00100002 	.word	0x00100002
 8007cbc:	ffff0000 	.word	0xffff0000

08007cc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08c      	sub	sp, #48	; 0x30
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	817b      	strh	r3, [r7, #10]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	813b      	strh	r3, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cda:	f7fe ff11 	bl	8006b00 <HAL_GetTick>
 8007cde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	f040 8208 	bne.w	80080fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2319      	movs	r3, #25
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	497b      	ldr	r1, [pc, #492]	; (8007ee4 <HAL_I2C_Mem_Read+0x224>)
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fb61 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d04:	2302      	movs	r3, #2
 8007d06:	e1fb      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_I2C_Mem_Read+0x56>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e1f4      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d007      	beq.n	8007d3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2222      	movs	r2, #34	; 0x22
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2240      	movs	r2, #64	; 0x40
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4a5b      	ldr	r2, [pc, #364]	; (8007ee8 <HAL_I2C_Mem_Read+0x228>)
 8007d7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d7e:	88f8      	ldrh	r0, [r7, #6]
 8007d80:	893a      	ldrh	r2, [r7, #8]
 8007d82:	8979      	ldrh	r1, [r7, #10]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fa46 	bl	8008220 <I2C_RequestMemoryRead>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e1b0      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d113      	bne.n	8007dce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007da6:	2300      	movs	r3, #0
 8007da8:	623b      	str	r3, [r7, #32]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e184      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d11b      	bne.n	8007e0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	e164      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d11b      	bne.n	8007e4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e36:	2300      	movs	r3, #0
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	e144      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e64:	e138      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	f200 80f1 	bhi.w	8008052 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d123      	bne.n	8007ec0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 fbf7 	bl	8008670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e139      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ebe:	e10b      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d14e      	bne.n	8007f66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4906      	ldr	r1, [pc, #24]	; (8007eec <HAL_I2C_Mem_Read+0x22c>)
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fa74 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e10e      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
 8007ee2:	bf00      	nop
 8007ee4:	00100002 	.word	0x00100002
 8007ee8:	ffff0000 	.word	0xffff0000
 8007eec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f64:	e0b8      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4966      	ldr	r1, [pc, #408]	; (8008108 <HAL_I2C_Mem_Read+0x448>)
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fa25 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0bf      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	2200      	movs	r2, #0
 8007fca:	494f      	ldr	r1, [pc, #316]	; (8008108 <HAL_I2C_Mem_Read+0x448>)
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f9f7 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e091      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008050:	e042      	b.n	80080d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fb0a 	bl	8008670 <I2C_WaitOnRXNEFlagUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e04c      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008082:	3b01      	subs	r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f003 0304 	and.w	r3, r3, #4
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d118      	bne.n	80080d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	691a      	ldr	r2, [r3, #16]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f47f aec2 	bne.w	8007e66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2220      	movs	r2, #32
 80080e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e000      	b.n	8008100 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80080fe:	2302      	movs	r3, #2
  }
}
 8008100:	4618      	mov	r0, r3
 8008102:	3728      	adds	r7, #40	; 0x28
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	00010004 	.word	0x00010004

0800810c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4603      	mov	r3, r0
 800811c:	817b      	strh	r3, [r7, #10]
 800811e:	460b      	mov	r3, r1
 8008120:	813b      	strh	r3, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	2200      	movs	r2, #0
 800813e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f93c 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e05f      	b.n	8008212 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	6a3a      	ldr	r2, [r7, #32]
 8008166:	492d      	ldr	r1, [pc, #180]	; (800821c <I2C_RequestMemoryWrite+0x110>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f980 	bl	800846e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e04c      	b.n	8008212 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800818e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008190:	6a39      	ldr	r1, [r7, #32]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f9ea 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00d      	beq.n	80081ba <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d107      	bne.n	80081b6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e02b      	b.n	8008212 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d105      	bne.n	80081cc <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081c0:	893b      	ldrh	r3, [r7, #8]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	611a      	str	r2, [r3, #16]
 80081ca:	e021      	b.n	8008210 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081cc:	893b      	ldrh	r3, [r7, #8]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081dc:	6a39      	ldr	r1, [r7, #32]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f9c4 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00d      	beq.n	8008206 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d107      	bne.n	8008202 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e005      	b.n	8008212 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008206:	893b      	ldrh	r3, [r7, #8]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	00010002 	.word	0x00010002

08008220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af02      	add	r7, sp, #8
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	461a      	mov	r2, r3
 800822e:	4603      	mov	r3, r0
 8008230:	817b      	strh	r3, [r7, #10]
 8008232:	460b      	mov	r3, r1
 8008234:	813b      	strh	r3, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2200      	movs	r2, #0
 8008262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f8aa 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e09e      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008284:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	494c      	ldr	r1, [pc, #304]	; (80083bc <I2C_RequestMemoryRead+0x19c>)
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 f8ee 	bl	800846e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e08b      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082b4:	6a39      	ldr	r1, [r7, #32]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 f958 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00d      	beq.n	80082de <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d107      	bne.n	80082da <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e06a      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d105      	bne.n	80082f0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082e4:	893b      	ldrh	r3, [r7, #8]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	611a      	str	r2, [r3, #16]
 80082ee:	e021      	b.n	8008334 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082f0:	893b      	ldrh	r3, [r7, #8]
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008300:	6a39      	ldr	r1, [r7, #32]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f932 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00d      	beq.n	800832a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	2b04      	cmp	r3, #4
 8008314:	d107      	bne.n	8008326 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008324:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e044      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800832a:	893b      	ldrh	r3, [r7, #8]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008336:	6a39      	ldr	r1, [r7, #32]
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 f917 	bl	800856c <I2C_WaitOnTXEFlagUntilTimeout>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00d      	beq.n	8008360 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	2b04      	cmp	r3, #4
 800834a:	d107      	bne.n	800835c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800835a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e029      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800836e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2200      	movs	r2, #0
 8008378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f81f 	bl	80083c0 <I2C_WaitOnFlagUntilTimeout>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e013      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800838c:	897b      	ldrh	r3, [r7, #10]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f043 0301 	orr.w	r3, r3, #1
 8008394:	b2da      	uxtb	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	6a3a      	ldr	r2, [r7, #32]
 80083a0:	4906      	ldr	r1, [pc, #24]	; (80083bc <I2C_RequestMemoryRead+0x19c>)
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f863 	bl	800846e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	00010002 	.word	0x00010002

080083c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083d0:	e025      	b.n	800841e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d8:	d021      	beq.n	800841e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083da:	f7fe fb91 	bl	8006b00 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d116      	bne.n	800841e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f043 0220 	orr.w	r2, r3, #32
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e023      	b.n	8008466 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	0c1b      	lsrs	r3, r3, #16
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d10d      	bne.n	8008444 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	43da      	mvns	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4013      	ands	r3, r2
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	bf0c      	ite	eq
 800843a:	2301      	moveq	r3, #1
 800843c:	2300      	movne	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	e00c      	b.n	800845e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	43da      	mvns	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	bf0c      	ite	eq
 8008456:	2301      	moveq	r3, #1
 8008458:	2300      	movne	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	429a      	cmp	r2, r3
 8008462:	d0b6      	beq.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800847c:	e051      	b.n	8008522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848c:	d123      	bne.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800849c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0204 	orr.w	r2, r3, #4
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e046      	b.n	8008564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d021      	beq.n	8008522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084de:	f7fe fb0f 	bl	8006b00 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d302      	bcc.n	80084f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d116      	bne.n	8008522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	f043 0220 	orr.w	r2, r3, #32
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e020      	b.n	8008564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b01      	cmp	r3, #1
 800852a:	d10c      	bne.n	8008546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	43da      	mvns	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4013      	ands	r3, r2
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	bf14      	ite	ne
 800853e:	2301      	movne	r3, #1
 8008540:	2300      	moveq	r3, #0
 8008542:	b2db      	uxtb	r3, r3
 8008544:	e00b      	b.n	800855e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	43da      	mvns	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4013      	ands	r3, r2
 8008552:	b29b      	uxth	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	bf14      	ite	ne
 8008558:	2301      	movne	r3, #1
 800855a:	2300      	moveq	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d18d      	bne.n	800847e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008578:	e02d      	b.n	80085d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f8ce 	bl	800871c <I2C_IsAcknowledgeFailed>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e02d      	b.n	80085e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008590:	d021      	beq.n	80085d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008592:	f7fe fab5 	bl	8006b00 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d116      	bne.n	80085d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f043 0220 	orr.w	r2, r3, #32
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e007      	b.n	80085e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e0:	2b80      	cmp	r3, #128	; 0x80
 80085e2:	d1ca      	bne.n	800857a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085fa:	e02d      	b.n	8008658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 f88d 	bl	800871c <I2C_IsAcknowledgeFailed>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e02d      	b.n	8008668 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008612:	d021      	beq.n	8008658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008614:	f7fe fa74 	bl	8006b00 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	429a      	cmp	r2, r3
 8008622:	d302      	bcc.n	800862a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d116      	bne.n	8008658 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	f043 0220 	orr.w	r2, r3, #32
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e007      	b.n	8008668 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b04      	cmp	r3, #4
 8008664:	d1ca      	bne.n	80085fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800867c:	e042      	b.n	8008704 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b10      	cmp	r3, #16
 800868a:	d119      	bne.n	80086c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0210 	mvn.w	r2, #16
 8008694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e029      	b.n	8008714 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c0:	f7fe fa1e 	bl	8006b00 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d302      	bcc.n	80086d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d116      	bne.n	8008704 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	f043 0220 	orr.w	r2, r3, #32
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e007      	b.n	8008714 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d1b5      	bne.n	800867e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008732:	d11b      	bne.n	800876c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800873c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	f043 0204 	orr.w	r2, r3, #4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800877a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800877c:	b08f      	sub	sp, #60	; 0x3c
 800877e:	af0a      	add	r7, sp, #40	; 0x28
 8008780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e10f      	b.n	80089ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f00e f856 	bl	8016858 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2203      	movs	r2, #3
 80087b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f006 f911 	bl	800e9f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	687e      	ldr	r6, [r7, #4]
 80087d8:	466d      	mov	r5, sp
 80087da:	f106 0410 	add.w	r4, r6, #16
 80087de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80087ee:	1d33      	adds	r3, r6, #4
 80087f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087f2:	6838      	ldr	r0, [r7, #0]
 80087f4:	f005 ffe8 	bl	800e7c8 <USB_CoreInit>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e0d0      	b.n	80089ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f006 f8ff 	bl	800ea14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
 800881a:	e04a      	b.n	80088b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800881c:	7bfa      	ldrb	r2, [r7, #15]
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	333d      	adds	r3, #61	; 0x3d
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008830:	7bfa      	ldrb	r2, [r7, #15]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	333c      	adds	r3, #60	; 0x3c
 8008840:	7bfa      	ldrb	r2, [r7, #15]
 8008842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	b298      	uxth	r0, r3
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3342      	adds	r3, #66	; 0x42
 8008858:	4602      	mov	r2, r0
 800885a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800885c:	7bfa      	ldrb	r2, [r7, #15]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	333f      	adds	r3, #63	; 0x3f
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3344      	adds	r3, #68	; 0x44
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	3348      	adds	r3, #72	; 0x48
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008898:	7bfa      	ldrb	r2, [r7, #15]
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	3350      	adds	r3, #80	; 0x50
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	3301      	adds	r3, #1
 80088b0:	73fb      	strb	r3, [r7, #15]
 80088b2:	7bfa      	ldrb	r2, [r7, #15]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d3af      	bcc.n	800881c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
 80088c0:	e044      	b.n	800894c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088c2:	7bfa      	ldrb	r2, [r7, #15]
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80088d4:	2200      	movs	r2, #0
 80088d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088d8:	7bfa      	ldrb	r2, [r7, #15]
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	4613      	mov	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	440b      	add	r3, r1
 80088e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088ee:	7bfa      	ldrb	r2, [r7, #15]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008904:	7bfa      	ldrb	r2, [r7, #15]
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4613      	mov	r3, r2
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800891a:	7bfa      	ldrb	r2, [r7, #15]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008930:	7bfa      	ldrb	r2, [r7, #15]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008942:	2200      	movs	r2, #0
 8008944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	3301      	adds	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	7bfa      	ldrb	r2, [r7, #15]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3b5      	bcc.n	80088c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	687e      	ldr	r6, [r7, #4]
 800895e:	466d      	mov	r5, sp
 8008960:	f106 0410 	add.w	r4, r6, #16
 8008964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800896a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800896c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008970:	e885 0003 	stmia.w	r5, {r0, r1}
 8008974:	1d33      	adds	r3, r6, #4
 8008976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008978:	6838      	ldr	r0, [r7, #0]
 800897a:	f006 f875 	bl	800ea68 <USB_DevInit>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e00d      	b.n	80089ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f007 f86a 	bl	800fa7e <USB_DevDisconnect>

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_PCD_Start+0x1c>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e020      	b.n	8008a12 <HAL_PCD_Start+0x5e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d109      	bne.n	80089f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d005      	beq.n	80089f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f007 f828 	bl	800fa4e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f005 ffe4 	bl	800e9d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a1a:	b590      	push	{r4, r7, lr}
 8008a1c:	b08d      	sub	sp, #52	; 0x34
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f007 f8cf 	bl	800fbd4 <USB_GetMode>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f040 838e 	bne.w	800915a <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f007 f833 	bl	800faae <USB_ReadInterrupts>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8384 	beq.w	8009158 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f007 f82a 	bl	800faae <USB_ReadInterrupts>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d107      	bne.n	8008a74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f002 0202 	and.w	r2, r2, #2
 8008a72:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f007 f818 	bl	800faae <USB_ReadInterrupts>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a88:	d17b      	bne.n	8008b82 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f007 f81e 	bl	800fad4 <USB_ReadDevAllOutEpInterrupt>
 8008a98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008a9a:	e06f      	b.n	8008b7c <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d064      	beq.n	8008b70 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	4611      	mov	r1, r2
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f007 f843 	bl	800fb3c <USB_ReadDevOutEPInterrupt>
 8008ab6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00c      	beq.n	8008adc <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ace:	461a      	mov	r2, r3
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fe0e 	bl	80096f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00c      	beq.n	8008b00 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 ff0d 	bl	8009908 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	461a      	mov	r2, r3
 8008afc:	2308      	movs	r3, #8
 8008afe:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d008      	beq.n	8008b1c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b16:	461a      	mov	r2, r3
 8008b18:	2310      	movs	r3, #16
 8008b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d015      	beq.n	8008b52 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d108      	bne.n	8008b40 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	f007 f88e 	bl	800fc5c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	2320      	movs	r3, #32
 8008b50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b6e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	3301      	adds	r3, #1
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d18c      	bne.n	8008a9c <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f006 ff91 	bl	800faae <USB_ReadInterrupts>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b96:	f040 80c4 	bne.w	8008d22 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f006 ffb2 	bl	800fb08 <USB_ReadDevAllInEpInterrupt>
 8008ba4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008baa:	e0b6      	b.n	8008d1a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f000 80ab 	beq.w	8008d0e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f006 ffd8 	bl	800fb78 <USB_ReadDevInEPInterrupt>
 8008bc8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d05b      	beq.n	8008c8c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	2201      	movs	r2, #1
 8008bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008be0:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	43db      	mvns	r3, r3
 8008bee:	69f9      	ldr	r1, [r7, #28]
 8008bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c04:	461a      	mov	r2, r3
 8008c06:	2301      	movs	r3, #1
 8008c08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d11b      	bne.n	8008c4a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c16:	4613      	mov	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	3348      	adds	r3, #72	; 0x48
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c28:	4613      	mov	r3, r2
 8008c2a:	00db      	lsls	r3, r3, #3
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4403      	add	r3, r0
 8008c32:	3344      	adds	r3, #68	; 0x44
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4419      	add	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4403      	add	r3, r0
 8008c46:	3348      	adds	r3, #72	; 0x48
 8008c48:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f00d fe82 	bl	801695a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d116      	bne.n	8008c8c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d113      	bne.n	8008c8c <HAL_PCD_IRQHandler+0x272>
 8008c64:	6879      	ldr	r1, [r7, #4]
 8008c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c68:	4613      	mov	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	1a9b      	subs	r3, r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	3350      	adds	r3, #80	; 0x50
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d108      	bne.n	8008c8c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c84:	461a      	mov	r2, r3
 8008c86:	2101      	movs	r1, #1
 8008c88:	f006 ffe8 	bl	800fc5c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	f003 0308 	and.w	r3, r3, #8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d008      	beq.n	8008ca8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d008      	beq.n	8008cc4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc67 	bl	80095dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f47f af45 	bne.w	8008bac <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f006 fec1 	bl	800faae <USB_ReadInterrupts>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d36:	d122      	bne.n	8008d7e <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	69fa      	ldr	r2, [r7, #28]
 8008d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d46:	f023 0301 	bic.w	r3, r3, #1
 8008d4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d108      	bne.n	8008d68 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fe89 	bl	8009a78 <HAL_PCDEx_LPM_Callback>
 8008d66:	e002      	b.n	8008d6e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f00d fe6d 	bl	8016a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f006 fe93 	bl	800faae <USB_ReadInterrupts>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d92:	d112      	bne.n	8008dba <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d102      	bne.n	8008daa <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f00d fe29 	bl	80169fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695a      	ldr	r2, [r3, #20]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008db8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f006 fe75 	bl	800faae <USB_ReadInterrupts>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	f040 80a7 	bne.w	8008f20 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2110      	movs	r1, #16
 8008dec:	4618      	mov	r0, r3
 8008dee:	f005 ffad 	bl	800ed4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008df6:	e036      	b.n	8008e66 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	461a      	mov	r2, r3
 8008e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	69fa      	ldr	r2, [r7, #28]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e50:	0151      	lsls	r1, r2, #5
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	440a      	add	r2, r1
 8008e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	3301      	adds	r3, #1
 8008e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d3c3      	bcc.n	8008df8 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	69fa      	ldr	r2, [r7, #28]
 8008e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008e82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d016      	beq.n	8008eba <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9c:	f043 030b 	orr.w	r3, r3, #11
 8008ea0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb2:	f043 030b 	orr.w	r3, r3, #11
 8008eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8008eb8:	e015      	b.n	8008ee6 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	69fa      	ldr	r2, [r7, #28]
 8008ec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ecc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008ed0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ee0:	f043 030b 	orr.w	r3, r3, #11
 8008ee4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ef4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ef8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f006 fea6 	bl	800fc5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695a      	ldr	r2, [r3, #20]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f006 fdc2 	bl	800faae <USB_ReadInterrupts>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f34:	d124      	bne.n	8008f80 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f006 fe58 	bl	800fbf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f005 ff62 	bl	800ee0e <USB_GetDevSpeed>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681c      	ldr	r4, [r3, #0]
 8008f56:	f001 f971 	bl	800a23c <HAL_RCC_GetHCLKFreq>
 8008f5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	4620      	mov	r0, r4
 8008f66:	f005 fc91 	bl	800e88c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f00d fd1d 	bl	80169aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f006 fd92 	bl	800faae <USB_ReadInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b10      	cmp	r3, #16
 8008f92:	d161      	bne.n	8009058 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0210 	bic.w	r2, r2, #16
 8008fa2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f003 020f 	and.w	r2, r3, #15
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	0c5b      	lsrs	r3, r3, #17
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d124      	bne.n	800901a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d035      	beq.n	8009048 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	091b      	lsrs	r3, r3, #4
 8008fe4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	6a38      	ldr	r0, [r7, #32]
 8008ff0:	f006 fc0a 	bl	800f808 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009000:	441a      	add	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009012:	441a      	add	r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	619a      	str	r2, [r3, #24]
 8009018:	e016      	b.n	8009048 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	0c5b      	lsrs	r3, r3, #17
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	2b06      	cmp	r3, #6
 8009024:	d110      	bne.n	8009048 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800902c:	2208      	movs	r2, #8
 800902e:	4619      	mov	r1, r3
 8009030:	6a38      	ldr	r0, [r7, #32]
 8009032:	f006 fbe9 	bl	800f808 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	091b      	lsrs	r3, r3, #4
 800903e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0210 	orr.w	r2, r2, #16
 8009056:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f006 fd26 	bl	800faae <USB_ReadInterrupts>
 8009062:	4603      	mov	r3, r0
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b08      	cmp	r3, #8
 800906a:	d10a      	bne.n	8009082 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f00d fc8e 	bl	801698e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695a      	ldr	r2, [r3, #20]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f002 0208 	and.w	r2, r2, #8
 8009080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f006 fd11 	bl	800faae <USB_ReadInterrupts>
 800908c:	4603      	mov	r3, r0
 800908e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009096:	d10f      	bne.n	80090b8 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f00d fcf0 	bl	8016a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695a      	ldr	r2, [r3, #20]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80090b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	f006 fcf6 	bl	800faae <USB_ReadInterrupts>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090cc:	d10f      	bne.n	80090ee <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f00d fcc3 	bl	8016a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80090ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f006 fcdb 	bl	800faae <USB_ReadInterrupts>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d10a      	bne.n	800911a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f00d fcd1 	bl	8016aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	695a      	ldr	r2, [r3, #20]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f006 fcc5 	bl	800faae <USB_ReadInterrupts>
 8009124:	4603      	mov	r3, r0
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b04      	cmp	r3, #4
 800912c:	d115      	bne.n	800915a <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f00d fcc1 	bl	8016ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6859      	ldr	r1, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e000      	b.n	800915a <HAL_PCD_IRQHandler+0x740>
      return;
 8009158:	bf00      	nop
    }
  }
}
 800915a:	3734      	adds	r7, #52	; 0x34
 800915c:	46bd      	mov	sp, r7
 800915e:	bd90      	pop	{r4, r7, pc}

08009160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <HAL_PCD_SetAddress+0x1a>
 8009176:	2302      	movs	r3, #2
 8009178:	e013      	b.n	80091a2 <HAL_PCD_SetAddress+0x42>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f006 fc35 	bl	800fa02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	4608      	mov	r0, r1
 80091b4:	4611      	mov	r1, r2
 80091b6:	461a      	mov	r2, r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	70fb      	strb	r3, [r7, #3]
 80091bc:	460b      	mov	r3, r1
 80091be:	803b      	strh	r3, [r7, #0]
 80091c0:	4613      	mov	r3, r2
 80091c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	da0f      	bge.n	80091f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	f003 020f 	and.w	r2, r3, #15
 80091d6:	4613      	mov	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	3338      	adds	r3, #56	; 0x38
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	3304      	adds	r3, #4
 80091e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	705a      	strb	r2, [r3, #1]
 80091ee:	e00f      	b.n	8009210 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	f003 020f 	and.w	r2, r3, #15
 80091f6:	4613      	mov	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	3304      	adds	r3, #4
 8009208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800921c:	883a      	ldrh	r2, [r7, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	78ba      	ldrb	r2, [r7, #2]
 8009226:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800923a:	78bb      	ldrb	r3, [r7, #2]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d102      	bne.n	8009246 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_PCD_EP_Open+0xaa>
 8009250:	2302      	movs	r3, #2
 8009252:	e00e      	b.n	8009272 <HAL_PCD_EP_Open+0xc8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	4618      	mov	r0, r3
 8009264:	f005 fdf8 	bl	800ee58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009270:	7afb      	ldrb	r3, [r7, #11]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800928a:	2b00      	cmp	r3, #0
 800928c:	da0f      	bge.n	80092ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	f003 020f 	and.w	r2, r3, #15
 8009294:	4613      	mov	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	3338      	adds	r3, #56	; 0x38
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	3304      	adds	r3, #4
 80092a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	705a      	strb	r2, [r3, #1]
 80092ac:	e00f      	b.n	80092ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	4413      	add	r3, r2
 80092c4:	3304      	adds	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_PCD_EP_Close+0x6e>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e00e      	b.n	8009306 <HAL_PCD_EP_Close+0x8c>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68f9      	ldr	r1, [r7, #12]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f005 fe36 	bl	800ef68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	60f8      	str	r0, [r7, #12]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
 800931a:	460b      	mov	r3, r1
 800931c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	f003 020f 	and.w	r2, r3, #15
 8009324:	4613      	mov	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	3304      	adds	r3, #4
 8009336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2200      	movs	r2, #0
 8009348:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	b2da      	uxtb	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d102      	bne.n	800936a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	461a      	mov	r2, r3
 8009380:	6979      	ldr	r1, [r7, #20]
 8009382:	f006 f8b9 	bl	800f4f8 <USB_EP0StartXfer>
 8009386:	e008      	b.n	800939a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	461a      	mov	r2, r3
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	f005 fe6b 	bl	800f070 <USB_EPStartXfer>
  }

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	f003 020f 	and.w	r2, r3, #15
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093c6:	681b      	ldr	r3, [r3, #0]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	607a      	str	r2, [r7, #4]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	460b      	mov	r3, r1
 80093e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093e4:	7afb      	ldrb	r3, [r7, #11]
 80093e6:	f003 020f 	and.w	r2, r3, #15
 80093ea:	4613      	mov	r3, r2
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	3338      	adds	r3, #56	; 0x38
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2200      	movs	r2, #0
 800940c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2201      	movs	r2, #1
 8009412:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	b2da      	uxtb	r2, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d102      	bne.n	800942e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	2b00      	cmp	r3, #0
 8009436:	d109      	bne.n	800944c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	6979      	ldr	r1, [r7, #20]
 8009446:	f006 f857 	bl	800f4f8 <USB_EP0StartXfer>
 800944a:	e008      	b.n	800945e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	6979      	ldr	r1, [r7, #20]
 800945a:	f005 fe09 	bl	800f070 <USB_EPStartXfer>
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	429a      	cmp	r2, r3
 8009480:	d901      	bls.n	8009486 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e050      	b.n	8009528 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da0f      	bge.n	80094ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	4613      	mov	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	1a9b      	subs	r3, r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	3338      	adds	r3, #56	; 0x38
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	3304      	adds	r3, #4
 80094a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	705a      	strb	r2, [r3, #1]
 80094ac:	e00d      	b.n	80094ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4613      	mov	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4413      	add	r3, r2
 80094c0:	3304      	adds	r3, #4
 80094c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_PCD_EP_SetStall+0x82>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e01e      	b.n	8009528 <HAL_PCD_EP_SetStall+0xc0>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f006 f9ae 	bl	800f85a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	b2d9      	uxtb	r1, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009518:	461a      	mov	r2, r3
 800951a:	f006 fb9f 	bl	800fc5c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	f003 020f 	and.w	r2, r3, #15
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d901      	bls.n	800954e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e042      	b.n	80095d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800954e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	da0f      	bge.n	8009576 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	4613      	mov	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	3338      	adds	r3, #56	; 0x38
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	3304      	adds	r3, #4
 800956c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	705a      	strb	r2, [r3, #1]
 8009574:	e00f      	b.n	8009596 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	f003 020f 	and.w	r2, r3, #15
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4413      	add	r3, r2
 800958c:	3304      	adds	r3, #4
 800958e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_PCD_EP_ClrStall+0x86>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e00e      	b.n	80095d4 <HAL_PCD_EP_ClrStall+0xa4>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f006 f9b6 	bl	800f936 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	4613      	mov	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	3338      	adds	r3, #56	; 0x38
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	4413      	add	r3, r2
 8009600:	3304      	adds	r3, #4
 8009602:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	429a      	cmp	r2, r3
 800960e:	d901      	bls.n	8009614 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e06c      	b.n	80096ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	695a      	ldr	r2, [r3, #20]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	69fa      	ldr	r2, [r7, #28]
 8009626:	429a      	cmp	r2, r3
 8009628:	d902      	bls.n	8009630 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	3303      	adds	r3, #3
 8009634:	089b      	lsrs	r3, r3, #2
 8009636:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009638:	e02b      	b.n	8009692 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	695a      	ldr	r2, [r3, #20]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	429a      	cmp	r2, r3
 800964e:	d902      	bls.n	8009656 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	3303      	adds	r3, #3
 800965a:	089b      	lsrs	r3, r3, #2
 800965c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68d9      	ldr	r1, [r3, #12]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	b2da      	uxtb	r2, r3
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800966e:	b2db      	uxtb	r3, r3
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	4603      	mov	r3, r0
 8009674:	6978      	ldr	r0, [r7, #20]
 8009676:	f006 f892 	bl	800f79e <USB_WritePacket>

    ep->xfer_buff  += len;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	441a      	add	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d809      	bhi.n	80096bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	699a      	ldr	r2, [r3, #24]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d203      	bcs.n	80096bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1be      	bne.n	800963a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	695a      	ldr	r2, [r3, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d811      	bhi.n	80096ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f003 030f 	and.w	r3, r3, #15
 80096ce:	2201      	movs	r2, #1
 80096d0:	fa02 f303 	lsl.w	r3, r2, r3
 80096d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	6939      	ldr	r1, [r7, #16]
 80096e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096e8:	4013      	ands	r3, r2
 80096ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	333c      	adds	r3, #60	; 0x3c
 8009710:	3304      	adds	r3, #4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	2b01      	cmp	r3, #1
 800972c:	f040 80b3 	bne.w	8009896 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d028      	beq.n	800978c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a70      	ldr	r2, [pc, #448]	; (8009900 <PCD_EP_OutXfrComplete_int+0x208>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d90e      	bls.n	8009760 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	461a      	mov	r2, r3
 800975a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800975e:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f00d f8cd 	bl	8016900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009770:	461a      	mov	r2, r3
 8009772:	2101      	movs	r1, #1
 8009774:	f006 fa72 	bl	800fc5c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	461a      	mov	r2, r3
 8009786:	2308      	movs	r3, #8
 8009788:	6093      	str	r3, [r2, #8]
 800978a:	e0b3      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f003 0320 	and.w	r3, r3, #32
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	461a      	mov	r2, r3
 80097a4:	2320      	movs	r3, #32
 80097a6:	6093      	str	r3, [r2, #8]
 80097a8:	e0a4      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f040 809f 	bne.w	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4a51      	ldr	r2, [pc, #324]	; (8009900 <PCD_EP_OutXfrComplete_int+0x208>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d90f      	bls.n	80097de <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	461a      	mov	r2, r3
 80097d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097da:	6093      	str	r3, [r2, #8]
 80097dc:	e08a      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	4613      	mov	r3, r2
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	1a9b      	subs	r3, r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	440b      	add	r3, r1
 80097ec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80097f0:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	0159      	lsls	r1, r3, #5
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	440b      	add	r3, r1
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009804:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	4613      	mov	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4403      	add	r3, r0
 8009814:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009818:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	1a9b      	subs	r3, r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	440b      	add	r3, r1
 8009828:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800982c:	6819      	ldr	r1, [r3, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4613      	mov	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4403      	add	r3, r0
 800983c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4419      	add	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4613      	mov	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	1a9b      	subs	r3, r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4403      	add	r3, r0
 8009852:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009856:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f00d f860 	bl	8016924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d144      	bne.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	4613      	mov	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d138      	bne.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800988c:	461a      	mov	r2, r3
 800988e:	2101      	movs	r1, #1
 8009890:	f006 f9e4 	bl	800fc5c <USB_EP0_OutStart>
 8009894:	e02e      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4a1a      	ldr	r2, [pc, #104]	; (8009904 <PCD_EP_OutXfrComplete_int+0x20c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d124      	bne.n	80098e8 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00a      	beq.n	80098be <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b4:	461a      	mov	r2, r3
 80098b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098ba:	6093      	str	r3, [r2, #8]
 80098bc:	e01a      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d008      	beq.n	80098da <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d4:	461a      	mov	r2, r3
 80098d6:	2320      	movs	r3, #32
 80098d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f00d f81f 	bl	8016924 <HAL_PCD_DataOutStageCallback>
 80098e6:	e005      	b.n	80098f4 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f00d f818 	bl	8016924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	4f54300a 	.word	0x4f54300a
 8009904:	4f54310a 	.word	0x4f54310a

08009908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	333c      	adds	r3, #60	; 0x3c
 8009920:	3304      	adds	r3, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d113      	bne.n	8009966 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d922      	bls.n	800998c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01d      	beq.n	800998c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995c:	461a      	mov	r2, r3
 800995e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009962:	6093      	str	r3, [r2, #8]
 8009964:	e012      	b.n	800998c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <PCD_EP_OutSetupPacket_int+0xbc>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d10e      	bne.n	800998c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f00c ffb7 	bl	8016900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a0a      	ldr	r2, [pc, #40]	; (80099c0 <PCD_EP_OutSetupPacket_int+0xb8>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d90c      	bls.n	80099b4 <PCD_EP_OutSetupPacket_int+0xac>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d108      	bne.n	80099b4 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099ac:	461a      	mov	r2, r3
 80099ae:	2101      	movs	r1, #1
 80099b0:	f006 f954 	bl	800fc5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	4f54300a 	.word	0x4f54300a
 80099c4:	4f54310a 	.word	0x4f54310a

080099c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
 80099d4:	4613      	mov	r3, r2
 80099d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d107      	bne.n	80099f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099e6:	883b      	ldrh	r3, [r7, #0]
 80099e8:	0419      	lsls	r1, r3, #16
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	629a      	str	r2, [r3, #40]	; 0x28
 80099f4:	e028      	b.n	8009a48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	4413      	add	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
 8009a08:	e00d      	b.n	8009a26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	3340      	adds	r3, #64	; 0x40
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	0c1b      	lsrs	r3, r3, #16
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	3301      	adds	r3, #1
 8009a24:	73fb      	strb	r3, [r7, #15]
 8009a26:	7bfa      	ldrb	r2, [r7, #15]
 8009a28:	78fb      	ldrb	r3, [r7, #3]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3ec      	bcc.n	8009a0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a30:	883b      	ldrh	r3, [r7, #0]
 8009a32:	0418      	lsls	r0, r3, #16
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	4302      	orrs	r2, r0
 8009a40:	3340      	adds	r3, #64	; 0x40
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3714      	adds	r7, #20
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	887a      	ldrh	r2, [r7, #2]
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e22d      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d075      	beq.n	8009b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009aae:	4ba3      	ldr	r3, [pc, #652]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 030c 	and.w	r3, r3, #12
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d00c      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aba:	4ba0      	ldr	r3, [pc, #640]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ac2:	2b08      	cmp	r3, #8
 8009ac4:	d112      	bne.n	8009aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ac6:	4b9d      	ldr	r3, [pc, #628]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ad2:	d10b      	bne.n	8009aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ad4:	4b99      	ldr	r3, [pc, #612]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d05b      	beq.n	8009b98 <HAL_RCC_OscConfig+0x108>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d157      	bne.n	8009b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e208      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af4:	d106      	bne.n	8009b04 <HAL_RCC_OscConfig+0x74>
 8009af6:	4b91      	ldr	r3, [pc, #580]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a90      	ldr	r2, [pc, #576]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	e01d      	b.n	8009b40 <HAL_RCC_OscConfig+0xb0>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b0c:	d10c      	bne.n	8009b28 <HAL_RCC_OscConfig+0x98>
 8009b0e:	4b8b      	ldr	r3, [pc, #556]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a8a      	ldr	r2, [pc, #552]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	4b88      	ldr	r3, [pc, #544]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a87      	ldr	r2, [pc, #540]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	e00b      	b.n	8009b40 <HAL_RCC_OscConfig+0xb0>
 8009b28:	4b84      	ldr	r3, [pc, #528]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a83      	ldr	r2, [pc, #524]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	4b81      	ldr	r3, [pc, #516]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a80      	ldr	r2, [pc, #512]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d013      	beq.n	8009b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b48:	f7fc ffda 	bl	8006b00 <HAL_GetTick>
 8009b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b4e:	e008      	b.n	8009b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b50:	f7fc ffd6 	bl	8006b00 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b64      	cmp	r3, #100	; 0x64
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e1cd      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b62:	4b76      	ldr	r3, [pc, #472]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d0f0      	beq.n	8009b50 <HAL_RCC_OscConfig+0xc0>
 8009b6e:	e014      	b.n	8009b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b70:	f7fc ffc6 	bl	8006b00 <HAL_GetTick>
 8009b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b76:	e008      	b.n	8009b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b78:	f7fc ffc2 	bl	8006b00 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b64      	cmp	r3, #100	; 0x64
 8009b84:	d901      	bls.n	8009b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e1b9      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b8a:	4b6c      	ldr	r3, [pc, #432]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1f0      	bne.n	8009b78 <HAL_RCC_OscConfig+0xe8>
 8009b96:	e000      	b.n	8009b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d063      	beq.n	8009c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ba6:	4b65      	ldr	r3, [pc, #404]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 030c 	and.w	r3, r3, #12
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bb2:	4b62      	ldr	r3, [pc, #392]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bba:	2b08      	cmp	r3, #8
 8009bbc:	d11c      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bbe:	4b5f      	ldr	r3, [pc, #380]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d116      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bca:	4b5c      	ldr	r3, [pc, #368]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_RCC_OscConfig+0x152>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d001      	beq.n	8009be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e18d      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be2:	4b56      	ldr	r3, [pc, #344]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4952      	ldr	r1, [pc, #328]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bf6:	e03a      	b.n	8009c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d020      	beq.n	8009c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c00:	4b4f      	ldr	r3, [pc, #316]	; (8009d40 <HAL_RCC_OscConfig+0x2b0>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c06:	f7fc ff7b 	bl	8006b00 <HAL_GetTick>
 8009c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c0e:	f7fc ff77 	bl	8006b00 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e16e      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c20:	4b46      	ldr	r3, [pc, #280]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0f0      	beq.n	8009c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c2c:	4b43      	ldr	r3, [pc, #268]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	4940      	ldr	r1, [pc, #256]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	600b      	str	r3, [r1, #0]
 8009c40:	e015      	b.n	8009c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c42:	4b3f      	ldr	r3, [pc, #252]	; (8009d40 <HAL_RCC_OscConfig+0x2b0>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7fc ff5a 	bl	8006b00 <HAL_GetTick>
 8009c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c4e:	e008      	b.n	8009c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c50:	f7fc ff56 	bl	8006b00 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d901      	bls.n	8009c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e14d      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c62:	4b36      	ldr	r3, [pc, #216]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1f0      	bne.n	8009c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0308 	and.w	r3, r3, #8
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d030      	beq.n	8009cdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d016      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c82:	4b30      	ldr	r3, [pc, #192]	; (8009d44 <HAL_RCC_OscConfig+0x2b4>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c88:	f7fc ff3a 	bl	8006b00 <HAL_GetTick>
 8009c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c8e:	e008      	b.n	8009ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c90:	f7fc ff36 	bl	8006b00 <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d901      	bls.n	8009ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e12d      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ca2:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0f0      	beq.n	8009c90 <HAL_RCC_OscConfig+0x200>
 8009cae:	e015      	b.n	8009cdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cb0:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <HAL_RCC_OscConfig+0x2b4>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cb6:	f7fc ff23 	bl	8006b00 <HAL_GetTick>
 8009cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cbe:	f7fc ff1f 	bl	8006b00 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e116      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 80a0 	beq.w	8009e2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cea:	2300      	movs	r3, #0
 8009cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10f      	bne.n	8009d1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d08:	6413      	str	r3, [r2, #64]	; 0x40
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <HAL_RCC_OscConfig+0x2ac>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <HAL_RCC_OscConfig+0x2b8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d121      	bne.n	8009d6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d26:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <HAL_RCC_OscConfig+0x2b8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a07      	ldr	r2, [pc, #28]	; (8009d48 <HAL_RCC_OscConfig+0x2b8>)
 8009d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d32:	f7fc fee5 	bl	8006b00 <HAL_GetTick>
 8009d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d38:	e011      	b.n	8009d5e <HAL_RCC_OscConfig+0x2ce>
 8009d3a:	bf00      	nop
 8009d3c:	40023800 	.word	0x40023800
 8009d40:	42470000 	.word	0x42470000
 8009d44:	42470e80 	.word	0x42470e80
 8009d48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d4c:	f7fc fed8 	bl	8006b00 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d901      	bls.n	8009d5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e0cf      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d5e:	4b6a      	ldr	r3, [pc, #424]	; (8009f08 <HAL_RCC_OscConfig+0x478>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d106      	bne.n	8009d80 <HAL_RCC_OscConfig+0x2f0>
 8009d72:	4b66      	ldr	r3, [pc, #408]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d76:	4a65      	ldr	r2, [pc, #404]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d78:	f043 0301 	orr.w	r3, r3, #1
 8009d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7e:	e01c      	b.n	8009dba <HAL_RCC_OscConfig+0x32a>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	2b05      	cmp	r3, #5
 8009d86:	d10c      	bne.n	8009da2 <HAL_RCC_OscConfig+0x312>
 8009d88:	4b60      	ldr	r3, [pc, #384]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8c:	4a5f      	ldr	r2, [pc, #380]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d8e:	f043 0304 	orr.w	r3, r3, #4
 8009d92:	6713      	str	r3, [r2, #112]	; 0x70
 8009d94:	4b5d      	ldr	r3, [pc, #372]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	4a5c      	ldr	r2, [pc, #368]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8009da0:	e00b      	b.n	8009dba <HAL_RCC_OscConfig+0x32a>
 8009da2:	4b5a      	ldr	r3, [pc, #360]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da6:	4a59      	ldr	r2, [pc, #356]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	6713      	str	r3, [r2, #112]	; 0x70
 8009dae:	4b57      	ldr	r3, [pc, #348]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	4a56      	ldr	r2, [pc, #344]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009db4:	f023 0304 	bic.w	r3, r3, #4
 8009db8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d015      	beq.n	8009dee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc2:	f7fc fe9d 	bl	8006b00 <HAL_GetTick>
 8009dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dca:	f7fc fe99 	bl	8006b00 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e08e      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009de0:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0ee      	beq.n	8009dca <HAL_RCC_OscConfig+0x33a>
 8009dec:	e014      	b.n	8009e18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dee:	f7fc fe87 	bl	8006b00 <HAL_GetTick>
 8009df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009df4:	e00a      	b.n	8009e0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009df6:	f7fc fe83 	bl	8006b00 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d901      	bls.n	8009e0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e078      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e0c:	4b3f      	ldr	r3, [pc, #252]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1ee      	bne.n	8009df6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d105      	bne.n	8009e2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e1e:	4b3b      	ldr	r3, [pc, #236]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	4a3a      	ldr	r2, [pc, #232]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d064      	beq.n	8009efc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e32:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 030c 	and.w	r3, r3, #12
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d05c      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d141      	bne.n	8009eca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e46:	4b32      	ldr	r3, [pc, #200]	; (8009f10 <HAL_RCC_OscConfig+0x480>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e4c:	f7fc fe58 	bl	8006b00 <HAL_GetTick>
 8009e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e52:	e008      	b.n	8009e66 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e54:	f7fc fe54 	bl	8006b00 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e04b      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e66:	4b29      	ldr	r3, [pc, #164]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f0      	bne.n	8009e54 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69da      	ldr	r2, [r3, #28]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	019b      	lsls	r3, r3, #6
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e88:	085b      	lsrs	r3, r3, #1
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	061b      	lsls	r3, r3, #24
 8009e96:	491d      	ldr	r1, [pc, #116]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e9c:	4b1c      	ldr	r3, [pc, #112]	; (8009f10 <HAL_RCC_OscConfig+0x480>)
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ea2:	f7fc fe2d 	bl	8006b00 <HAL_GetTick>
 8009ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ea8:	e008      	b.n	8009ebc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eaa:	f7fc fe29 	bl	8006b00 <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e020      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0f0      	beq.n	8009eaa <HAL_RCC_OscConfig+0x41a>
 8009ec8:	e018      	b.n	8009efc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eca:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <HAL_RCC_OscConfig+0x480>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ed0:	f7fc fe16 	bl	8006b00 <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7fc fe12 	bl	8006b00 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e009      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eea:	4b08      	ldr	r3, [pc, #32]	; (8009f0c <HAL_RCC_OscConfig+0x47c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x448>
 8009ef6:	e001      	b.n	8009efc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e000      	b.n	8009efe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	40007000 	.word	0x40007000
 8009f0c:	40023800 	.word	0x40023800
 8009f10:	42470060 	.word	0x42470060

08009f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e0ca      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f28:	4b67      	ldr	r3, [pc, #412]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 030f 	and.w	r3, r3, #15
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d90c      	bls.n	8009f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f36:	4b64      	ldr	r3, [pc, #400]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f3e:	4b62      	ldr	r3, [pc, #392]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 030f 	and.w	r3, r3, #15
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d001      	beq.n	8009f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e0b6      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d020      	beq.n	8009f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d005      	beq.n	8009f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f68:	4b58      	ldr	r3, [pc, #352]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	4a57      	ldr	r2, [pc, #348]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0308 	and.w	r3, r3, #8
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f80:	4b52      	ldr	r3, [pc, #328]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	4a51      	ldr	r2, [pc, #324]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f8c:	4b4f      	ldr	r3, [pc, #316]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	494c      	ldr	r1, [pc, #304]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d044      	beq.n	800a034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d107      	bne.n	8009fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fb2:	4b46      	ldr	r3, [pc, #280]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d119      	bne.n	8009ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e07d      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d003      	beq.n	8009fd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d107      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fd2:	4b3e      	ldr	r3, [pc, #248]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e06d      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fe2:	4b3a      	ldr	r3, [pc, #232]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e065      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ff2:	4b36      	ldr	r3, [pc, #216]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f023 0203 	bic.w	r2, r3, #3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	4933      	ldr	r1, [pc, #204]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a000:	4313      	orrs	r3, r2
 800a002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a004:	f7fc fd7c 	bl	8006b00 <HAL_GetTick>
 800a008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a00a:	e00a      	b.n	800a022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a00c:	f7fc fd78 	bl	8006b00 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e04d      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a022:	4b2a      	ldr	r3, [pc, #168]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f003 020c 	and.w	r2, r3, #12
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	429a      	cmp	r2, r3
 800a032:	d1eb      	bne.n	800a00c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a034:	4b24      	ldr	r3, [pc, #144]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 030f 	and.w	r3, r3, #15
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d20c      	bcs.n	800a05c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a042:	4b21      	ldr	r3, [pc, #132]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04a:	4b1f      	ldr	r3, [pc, #124]	; (800a0c8 <HAL_RCC_ClockConfig+0x1b4>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 030f 	and.w	r3, r3, #15
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d001      	beq.n	800a05c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e030      	b.n	800a0be <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d008      	beq.n	800a07a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a068:	4b18      	ldr	r3, [pc, #96]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	4915      	ldr	r1, [pc, #84]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a076:	4313      	orrs	r3, r2
 800a078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a086:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	00db      	lsls	r3, r3, #3
 800a094:	490d      	ldr	r1, [pc, #52]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a096:	4313      	orrs	r3, r2
 800a098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a09a:	f000 f81d 	bl	800a0d8 <HAL_RCC_GetSysClockFreq>
 800a09e:	4601      	mov	r1, r0
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x1b8>)
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	091b      	lsrs	r3, r3, #4
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ac:	5cd3      	ldrb	r3, [r2, r3]
 800a0ae:	fa21 f303 	lsr.w	r3, r1, r3
 800a0b2:	4a08      	ldr	r2, [pc, #32]	; (800a0d4 <HAL_RCC_ClockConfig+0x1c0>)
 800a0b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	f7fc fcde 	bl	8006a78 <HAL_InitTick>

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	40023c00 	.word	0x40023c00
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	0801e2b8 	.word	0x0801e2b8
 800a0d4:	20000170 	.word	0x20000170

0800a0d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0ee:	4b50      	ldr	r3, [pc, #320]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 030c 	and.w	r3, r3, #12
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d007      	beq.n	800a10a <HAL_RCC_GetSysClockFreq+0x32>
 800a0fa:	2b08      	cmp	r3, #8
 800a0fc:	d008      	beq.n	800a110 <HAL_RCC_GetSysClockFreq+0x38>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f040 808d 	bne.w	800a21e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a104:	4b4b      	ldr	r3, [pc, #300]	; (800a234 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a106:	60bb      	str	r3, [r7, #8]
       break;
 800a108:	e08c      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a10a:	4b4b      	ldr	r3, [pc, #300]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a10c:	60bb      	str	r3, [r7, #8]
      break;
 800a10e:	e089      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a110:	4b47      	ldr	r3, [pc, #284]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a11a:	4b45      	ldr	r3, [pc, #276]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d023      	beq.n	800a16e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a126:	4b42      	ldr	r3, [pc, #264]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	099b      	lsrs	r3, r3, #6
 800a12c:	f04f 0400 	mov.w	r4, #0
 800a130:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	ea03 0501 	and.w	r5, r3, r1
 800a13c:	ea04 0602 	and.w	r6, r4, r2
 800a140:	4a3d      	ldr	r2, [pc, #244]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a142:	fb02 f106 	mul.w	r1, r2, r6
 800a146:	2200      	movs	r2, #0
 800a148:	fb02 f205 	mul.w	r2, r2, r5
 800a14c:	440a      	add	r2, r1
 800a14e:	493a      	ldr	r1, [pc, #232]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a150:	fba5 0101 	umull	r0, r1, r5, r1
 800a154:	1853      	adds	r3, r2, r1
 800a156:	4619      	mov	r1, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f04f 0400 	mov.w	r4, #0
 800a15e:	461a      	mov	r2, r3
 800a160:	4623      	mov	r3, r4
 800a162:	f7f6 fdf1 	bl	8000d48 <__aeabi_uldivmod>
 800a166:	4603      	mov	r3, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e049      	b.n	800a202 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a16e:	4b30      	ldr	r3, [pc, #192]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	099b      	lsrs	r3, r3, #6
 800a174:	f04f 0400 	mov.w	r4, #0
 800a178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	ea03 0501 	and.w	r5, r3, r1
 800a184:	ea04 0602 	and.w	r6, r4, r2
 800a188:	4629      	mov	r1, r5
 800a18a:	4632      	mov	r2, r6
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	f04f 0400 	mov.w	r4, #0
 800a194:	0154      	lsls	r4, r2, #5
 800a196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a19a:	014b      	lsls	r3, r1, #5
 800a19c:	4619      	mov	r1, r3
 800a19e:	4622      	mov	r2, r4
 800a1a0:	1b49      	subs	r1, r1, r5
 800a1a2:	eb62 0206 	sbc.w	r2, r2, r6
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	f04f 0400 	mov.w	r4, #0
 800a1ae:	0194      	lsls	r4, r2, #6
 800a1b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1b4:	018b      	lsls	r3, r1, #6
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	eb64 0402 	sbc.w	r4, r4, r2
 800a1bc:	f04f 0100 	mov.w	r1, #0
 800a1c0:	f04f 0200 	mov.w	r2, #0
 800a1c4:	00e2      	lsls	r2, r4, #3
 800a1c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a1ca:	00d9      	lsls	r1, r3, #3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	195b      	adds	r3, r3, r5
 800a1d2:	eb44 0406 	adc.w	r4, r4, r6
 800a1d6:	f04f 0100 	mov.w	r1, #0
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	02a2      	lsls	r2, r4, #10
 800a1e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a1e4:	0299      	lsls	r1, r3, #10
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f04f 0400 	mov.w	r4, #0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	f7f6 fda6 	bl	8000d48 <__aeabi_uldivmod>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	3301      	adds	r3, #1
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	60bb      	str	r3, [r7, #8]
      break;
 800a21c:	e002      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a220:	60bb      	str	r3, [r7, #8]
      break;
 800a222:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a224:	68bb      	ldr	r3, [r7, #8]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22e:	bf00      	nop
 800a230:	40023800 	.word	0x40023800
 800a234:	00f42400 	.word	0x00f42400
 800a238:	00b71b00 	.word	0x00b71b00

0800a23c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <HAL_RCC_GetHCLKFreq+0x14>)
 800a242:	681b      	ldr	r3, [r3, #0]
}
 800a244:	4618      	mov	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	20000170 	.word	0x20000170

0800a254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a258:	f7ff fff0 	bl	800a23c <HAL_RCC_GetHCLKFreq>
 800a25c:	4601      	mov	r1, r0
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	0a9b      	lsrs	r3, r3, #10
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	4a03      	ldr	r2, [pc, #12]	; (800a278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a270:	4618      	mov	r0, r3
 800a272:	bd80      	pop	{r7, pc}
 800a274:	40023800 	.word	0x40023800
 800a278:	0801e2c8 	.word	0x0801e2c8

0800a27c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a280:	f7ff ffdc 	bl	800a23c <HAL_RCC_GetHCLKFreq>
 800a284:	4601      	mov	r1, r0
 800a286:	4b05      	ldr	r3, [pc, #20]	; (800a29c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	0b5b      	lsrs	r3, r3, #13
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	4a03      	ldr	r2, [pc, #12]	; (800a2a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a292:	5cd3      	ldrb	r3, [r2, r3]
 800a294:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a298:	4618      	mov	r0, r3
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	0801e2c8 	.word	0x0801e2c8

0800a2a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d105      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d035      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a2cc:	4b62      	ldr	r3, [pc, #392]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2d2:	f7fc fc15 	bl	8006b00 <HAL_GetTick>
 800a2d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2d8:	e008      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a2da:	f7fc fc11 	bl	8006b00 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d901      	bls.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e0b0      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a2ec:	4b5b      	ldr	r3, [pc, #364]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1f0      	bne.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	019a      	lsls	r2, r3, #6
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	071b      	lsls	r3, r3, #28
 800a304:	4955      	ldr	r1, [pc, #340]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a306:	4313      	orrs	r3, r2
 800a308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a30c:	4b52      	ldr	r3, [pc, #328]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a30e:	2201      	movs	r2, #1
 800a310:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a312:	f7fc fbf5 	bl	8006b00 <HAL_GetTick>
 800a316:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a318:	e008      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a31a:	f7fc fbf1 	bl	8006b00 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	2b02      	cmp	r3, #2
 800a326:	d901      	bls.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e090      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a32c:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0f0      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8083 	beq.w	800a44c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	4b44      	ldr	r3, [pc, #272]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	4a43      	ldr	r2, [pc, #268]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a354:	6413      	str	r3, [r2, #64]	; 0x40
 800a356:	4b41      	ldr	r3, [pc, #260]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a362:	4b3f      	ldr	r3, [pc, #252]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a3e      	ldr	r2, [pc, #248]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a36c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a36e:	f7fc fbc7 	bl	8006b00 <HAL_GetTick>
 800a372:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a374:	e008      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a376:	f7fc fbc3 	bl	8006b00 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b02      	cmp	r3, #2
 800a382:	d901      	bls.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e062      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a388:	4b35      	ldr	r3, [pc, #212]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a394:	4b31      	ldr	r3, [pc, #196]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a39c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d02f      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d028      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3b2:	4b2a      	ldr	r3, [pc, #168]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3bc:	4b29      	ldr	r3, [pc, #164]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a3c2:	4b28      	ldr	r3, [pc, #160]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a3c8:	4a24      	ldr	r2, [pc, #144]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a3ce:	4b23      	ldr	r3, [pc, #140]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d114      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a3da:	f7fc fb91 	bl	8006b00 <HAL_GetTick>
 800a3de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3e0:	e00a      	b.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3e2:	f7fc fb8d 	bl	8006b00 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d901      	bls.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e02a      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3f8:	4b18      	ldr	r3, [pc, #96]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0ee      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a40c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a410:	d10d      	bne.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a426:	490d      	ldr	r1, [pc, #52]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a428:	4313      	orrs	r3, r2
 800a42a:	608b      	str	r3, [r1, #8]
 800a42c:	e005      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	4a0a      	ldr	r2, [pc, #40]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a434:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a438:	6093      	str	r3, [r2, #8]
 800a43a:	4b08      	ldr	r3, [pc, #32]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a43c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a446:	4905      	ldr	r1, [pc, #20]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	42470068 	.word	0x42470068
 800a45c:	40023800 	.word	0x40023800
 800a460:	40007000 	.word	0x40007000
 800a464:	42470e40 	.word	0x42470e40

0800a468 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d101      	bne.n	800a47a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e083      	b.n	800a582 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	7f5b      	ldrb	r3, [r3, #29]
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f00b fdaa 	bl	8015fe4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	22ca      	movs	r2, #202	; 0xca
 800a49c:	625a      	str	r2, [r3, #36]	; 0x24
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2253      	movs	r2, #83	; 0x53
 800a4a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f944 	bl	800a734 <RTC_EnterInitMode>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	22ff      	movs	r2, #255	; 0xff
 800a4b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2204      	movs	r2, #4
 800a4be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e05e      	b.n	800a582 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6899      	ldr	r1, [r3, #8]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	68d2      	ldr	r2, [r2, #12]
 800a4fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6919      	ldr	r1, [r3, #16]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	041a      	lsls	r2, r3, #16
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a522:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10e      	bne.n	800a550 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8d6 	bl	800a6e4 <HAL_RTC_WaitForSynchro>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d008      	beq.n	800a550 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	22ff      	movs	r2, #255	; 0xff
 800a544:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2204      	movs	r2, #4
 800a54a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e018      	b.n	800a582 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a55e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	22ff      	movs	r2, #255	; 0xff
 800a578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a580:	2300      	movs	r3, #0
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b086      	sub	sp, #24
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a5bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	0a1b      	lsrs	r3, r3, #8
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d11a      	bne.n	800a63c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f8be 	bl	800a78c <RTC_Bcd2ToByte>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	785b      	ldrb	r3, [r3, #1]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f8b5 	bl	800a78c <RTC_Bcd2ToByte>
 800a622:	4603      	mov	r3, r0
 800a624:	461a      	mov	r2, r3
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	789b      	ldrb	r3, [r3, #2]
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f8ac 	bl	800a78c <RTC_Bcd2ToByte>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b086      	sub	sp, #24
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	60b9      	str	r1, [r7, #8]
 800a650:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a660:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a664:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	0c1b      	lsrs	r3, r3, #16
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 031f 	and.w	r3, r3, #31
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	0b5b      	lsrs	r3, r3, #13
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d11a      	bne.n	800a6da <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	78db      	ldrb	r3, [r3, #3]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f86f 	bl	800a78c <RTC_Bcd2ToByte>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f866 	bl	800a78c <RTC_Bcd2ToByte>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	789b      	ldrb	r3, [r3, #2]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f85d 	bl	800a78c <RTC_Bcd2ToByte>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a700:	f7fc f9fe 	bl	8006b00 <HAL_GetTick>
 800a704:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a706:	e009      	b.n	800a71c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a708:	f7fc f9fa 	bl	8006b00 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a716:	d901      	bls.n	800a71c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e007      	b.n	800a72c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f003 0320 	and.w	r3, r3, #32
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0ee      	beq.n	800a708 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d119      	bne.n	800a782 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f04f 32ff 	mov.w	r2, #4294967295
 800a756:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a758:	f7fc f9d2 	bl	8006b00 <HAL_GetTick>
 800a75c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a75e:	e009      	b.n	800a774 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a760:	f7fc f9ce 	bl	8006b00 <HAL_GetTick>
 800a764:	4602      	mov	r2, r0
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a76e:	d901      	bls.n	800a774 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e007      	b.n	800a784 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d0ee      	beq.n	800a760 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	091b      	lsrs	r3, r3, #4
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	4413      	add	r3, r2
 800a7ba:	b2db      	uxtb	r3, r3
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e01d      	b.n	800a816 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d105      	bne.n	800a7f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f00b fc0f 	bl	8016010 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f810 	bl	800a820 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
	...

0800a820 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a820:	b5b0      	push	{r4, r5, r7, lr}
 800a822:	b08e      	sub	sp, #56	; 0x38
 800a824:	af04      	add	r7, sp, #16
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a828:	2300      	movs	r3, #0
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a830:	2300      	movs	r3, #0
 800a832:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a838:	2300      	movs	r3, #0
 800a83a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a840:	2376      	movs	r3, #118	; 0x76
 800a842:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681d      	ldr	r5, [r3, #0]
 800a848:	466c      	mov	r4, sp
 800a84a:	f107 0318 	add.w	r3, r7, #24
 800a84e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a85c:	4628      	mov	r0, r5
 800a85e:	f003 fa53 	bl	800dd08 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800a862:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <HAL_SD_InitCard+0xb4>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f003 fa94 	bl	800dd9a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a872:	4b18      	ldr	r3, [pc, #96]	; (800a8d4 <HAL_SD_InitCard+0xb4>)
 800a874:	2201      	movs	r2, #1
 800a876:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800a878:	2002      	movs	r0, #2
 800a87a:	f7fc f94d 	bl	8006b18 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fffe 	bl	800b880 <SD_PowerON>
 800a884:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00b      	beq.n	800a8a4 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	431a      	orrs	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e013      	b.n	800a8cc <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 ff22 	bl	800b6ee <SD_InitCard>
 800a8aa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00b      	beq.n	800a8ca <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3728      	adds	r7, #40	; 0x28
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a8d4:	422580a0 	.word	0x422580a0

0800a8d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08c      	sub	sp, #48	; 0x30
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d107      	bne.n	800a900 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0ad      	b.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b01      	cmp	r3, #1
 800a90a:	f040 80a6 	bne.w	800aa5a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	441a      	add	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	429a      	cmp	r2, r3
 800a920:	d907      	bls.n	800a932 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e094      	b.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2203      	movs	r2, #3
 800a936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2200      	movs	r2, #0
 800a940:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	6812      	ldr	r2, [r2, #0]
 800a94c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95a:	4a42      	ldr	r2, [pc, #264]	; (800aa64 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800a95c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a962:	4a41      	ldr	r2, [pc, #260]	; (800aa68 <HAL_SD_ReadBlocks_DMA+0x190>)
 800a964:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96a:	2200      	movs	r2, #0
 800a96c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3380      	adds	r3, #128	; 0x80
 800a978:	4619      	mov	r1, r3
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	025b      	lsls	r3, r3, #9
 800a980:	089b      	lsrs	r3, r3, #2
 800a982:	f7fc faab 	bl	8006edc <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a986:	4b39      	ldr	r3, [pc, #228]	; (800aa6c <HAL_SD_ReadBlocks_DMA+0x194>)
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a990:	2b01      	cmp	r3, #1
 800a992:	d002      	beq.n	800a99a <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	025b      	lsls	r3, r3, #9
 800a998:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a99a:	f04f 33ff 	mov.w	r3, #4294967295
 800a99e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	025b      	lsls	r3, r3, #9
 800a9a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a9a6:	2390      	movs	r3, #144	; 0x90
 800a9a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f107 0214 	add.w	r2, r7, #20
 800a9be:	4611      	mov	r1, r2
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f003 fa52 	bl	800de6a <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f003 fa77 	bl	800dec2 <SDMMC_CmdBlockLength>
 800a9d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d010      	beq.n	800a9fe <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a9e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e02e      	b.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d90a      	bls.n	800aa1a <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2282      	movs	r2, #130	; 0x82
 800aa08:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f003 fa9e 	bl	800df52 <SDMMC_CmdReadMultiBlock>
 800aa16:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa18:	e009      	b.n	800aa2e <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2281      	movs	r2, #129	; 0x81
 800aa1e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f003 fa6f 	bl	800df0a <SDMMC_CmdReadSingleBlock>
 800aa2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d010      	beq.n	800aa56 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	431a      	orrs	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e002      	b.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e000      	b.n	800aa5c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800aa5a:	2302      	movs	r3, #2
  }
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3730      	adds	r7, #48	; 0x30
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	0800b4ff 	.word	0x0800b4ff
 800aa68:	0800b56d 	.word	0x0800b56d
 800aa6c:	4225858c 	.word	0x4225858c

0800aa70 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08c      	sub	sp, #48	; 0x30
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e0ad      	b.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	f040 80a6 	bne.w	800abf2 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d907      	bls.n	800aaca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e094      	b.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2203      	movs	r2, #3
 800aace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2200      	movs	r2, #0
 800aad8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800aae8:	f043 0302 	orr.w	r3, r3, #2
 800aaec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	4a42      	ldr	r2, [pc, #264]	; (800abfc <HAL_SD_WriteBlocks_DMA+0x18c>)
 800aaf4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	4a41      	ldr	r2, [pc, #260]	; (800ac00 <HAL_SD_WriteBlocks_DMA+0x190>)
 800aafc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	2200      	movs	r2, #0
 800ab04:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d002      	beq.n	800ab14 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	025b      	lsls	r3, r3, #9
 800ab12:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f003 f9d0 	bl	800dec2 <SDMMC_CmdBlockLength>
 800ab22:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d010      	beq.n	800ab4c <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e053      	b.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d90a      	bls.n	800ab68 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22a0      	movs	r2, #160	; 0xa0
 800ab56:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f003 fa3f 	bl	800dfe2 <SDMMC_CmdWriteMultiBlock>
 800ab64:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab66:	e009      	b.n	800ab7c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2290      	movs	r2, #144	; 0x90
 800ab6c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f003 fa10 	bl	800df9a <SDMMC_CmdWriteSingleBlock>
 800ab7a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d010      	beq.n	800aba4 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	431a      	orrs	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e027      	b.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aba4:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <HAL_SD_WriteBlocks_DMA+0x194>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3380      	adds	r3, #128	; 0x80
 800abb6:	461a      	mov	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	025b      	lsls	r3, r3, #9
 800abbc:	089b      	lsrs	r3, r3, #2
 800abbe:	f7fc f98d 	bl	8006edc <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	025b      	lsls	r3, r3, #9
 800abcc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800abce:	2390      	movs	r3, #144	; 0x90
 800abd0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800abd2:	2300      	movs	r3, #0
 800abd4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800abda:	2301      	movs	r3, #1
 800abdc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f107 0214 	add.w	r2, r7, #20
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f003 f93e 	bl	800de6a <SDIO_ConfigData>
    
    return HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	e000      	b.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800abf2:	2302      	movs	r3, #2
  }
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3730      	adds	r7, #48	; 0x30
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	0800b4d5 	.word	0x0800b4d5
 800ac00:	0800b56d 	.word	0x0800b56d
 800ac04:	4225858c 	.word	0x4225858c

0800ac08 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 808d 	beq.w	800ad3e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ac3c:	f023 0302 	bic.w	r3, r3, #2
 800ac40:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f003 0308 	and.w	r3, r3, #8
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d03a      	beq.n	800acc4 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <HAL_SD_IRQHandler+0x5e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d011      	beq.n	800ac8a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f003 f9de 	bl	800e02c <SDMMC_CmdStopTransfer>
 800ac70:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f925 	bl	800aed4 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ac92:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d105      	bne.n	800acb4 <HAL_SD_IRQHandler+0xac>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	f003 0302 	and.w	r3, r3, #2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d003      	beq.n	800acbc <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f009 f80f 	bl	8013cd8 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800acba:	e103      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f009 f801 	bl	8013cc4 <HAL_SD_TxCpltCallback>
}
 800acc2:	e0ff      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 80f9 	beq.w	800aec4 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd6:	f003 0320 	and.w	r3, r3, #32
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d011      	beq.n	800ad02 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f003 f9a2 	bl	800e02c <SDMMC_CmdStopTransfer>
 800ace8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d008      	beq.n	800ad02 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	431a      	orrs	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f8e9 	bl	800aed4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f040 80da 	bne.w	800aec4 <HAL_SD_IRQHandler+0x2bc>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 80d3 	bne.w	800aec4 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f022 0208 	bic.w	r2, r2, #8
 800ad2c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f008 ffc4 	bl	8013cc4 <HAL_SD_TxCpltCallback>
}
 800ad3c:	e0c2      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d008      	beq.n	800ad5e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 ffef 	bl	800bd3a <SD_Write_IT>
}
 800ad5c:	e0b2      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d008      	beq.n	800ad7e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ad74:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 ffb7 	bl	800bcea <SD_Read_IT>
}
 800ad7c:	e0a2      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad84:	f240 233a 	movw	r3, #570	; 0x23a
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 809a 	beq.w	800aec4 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d005      	beq.n	800adaa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada2:	f043 0202 	orr.w	r2, r3, #2
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d005      	beq.n	800adc4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	f043 0208 	orr.w	r2, r3, #8
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adca:	f003 0320 	and.w	r3, r3, #32
 800adce:	2b00      	cmp	r3, #0
 800add0:	d005      	beq.n	800adde <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	f043 0220 	orr.w	r2, r3, #32
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade4:	f003 0310 	and.w	r3, r3, #16
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf0:	f043 0210 	orr.w	r2, r3, #16
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	f043 0208 	orr.w	r2, r3, #8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ae2a:	f023 0302 	bic.w	r3, r3, #2
 800ae2e:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d036      	beq.n	800aeaa <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d011      	beq.n	800ae68 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	4a20      	ldr	r2, [pc, #128]	; (800aecc <HAL_SD_IRQHandler+0x2c4>)
 800ae4a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fc f8a3 	bl	8006f9c <HAL_DMA_Abort_IT>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d033      	beq.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fbc8 	bl	800b5f6 <SD_DMATxAbort>
}
 800ae66:	e02d      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d011      	beq.n	800ae94 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae74:	4a16      	ldr	r2, [pc, #88]	; (800aed0 <HAL_SD_IRQHandler+0x2c8>)
 800ae76:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fc f88d 	bl	8006f9c <HAL_DMA_Abort_IT>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d01d      	beq.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fbf0 	bl	800b672 <SD_DMARxAbort>
}
 800ae92:	e017      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f008 ff04 	bl	8013cb0 <HAL_SD_AbortCallback>
}
 800aea8:	e00c      	b.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeae:	f003 0308 	and.w	r3, r3, #8
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d006      	beq.n	800aec4 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f808 	bl	800aed4 <HAL_SD_ErrorCallback>
}
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	0800b5f7 	.word	0x0800b5f7
 800aed0:	0800b673 	.word	0x0800b673

0800aed4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aefa:	0e1b      	lsrs	r3, r3, #24
 800aefc:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	099b      	lsrs	r3, r3, #6
 800af02:	b2db      	uxtb	r3, r3
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	b2da      	uxtb	r2, r3
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	089b      	lsrs	r3, r3, #2
 800af12:	b2db      	uxtb	r3, r3
 800af14:	f003 030f 	and.w	r3, r3, #15
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f003 0303 	and.w	r3, r3, #3
 800af26:	b2da      	uxtb	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af30:	0c1b      	lsrs	r3, r3, #16
 800af32:	b2db      	uxtb	r3, r3
 800af34:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af42:	0a1b      	lsrs	r3, r3, #8
 800af44:	b2db      	uxtb	r3, r3
 800af46:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af54:	b2db      	uxtb	r3, r3
 800af56:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af64:	0e1b      	lsrs	r3, r3, #24
 800af66:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	b29a      	uxth	r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	091b      	lsrs	r3, r3, #4
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	b29b      	uxth	r3, r3
 800af90:	4313      	orrs	r3, r2
 800af92:	b29a      	uxth	r2, r3
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f003 030f 	and.w	r3, r3, #15
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afaa:	0a1b      	lsrs	r3, r3, #8
 800afac:	b2db      	uxtb	r3, r3
 800afae:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	09db      	lsrs	r3, r3, #7
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	099b      	lsrs	r3, r3, #6
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	f003 0301 	and.w	r3, r3, #1
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	095b      	lsrs	r3, r3, #5
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	091b      	lsrs	r3, r3, #4
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	b2da      	uxtb	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2200      	movs	r2, #0
 800aff4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800affa:	2b00      	cmp	r3, #0
 800affc:	f040 8087 	bne.w	800b10e <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	029b      	lsls	r3, r3, #10
 800b004:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b010:	b2db      	uxtb	r3, r3
 800b012:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	691a      	ldr	r2, [r3, #16]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	431a      	orrs	r2, r3
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b026:	0e1b      	lsrs	r3, r3, #24
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	099b      	lsrs	r3, r3, #6
 800b034:	f003 0303 	and.w	r3, r3, #3
 800b038:	431a      	orrs	r2, r3
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	08db      	lsrs	r3, r3, #3
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0307 	and.w	r3, r3, #7
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	b2da      	uxtb	r2, r3
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	b2db      	uxtb	r3, r3
 800b064:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	095b      	lsrs	r3, r3, #5
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 0307 	and.w	r3, r3, #7
 800b070:	b2da      	uxtb	r2, r3
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	089b      	lsrs	r3, r3, #2
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	b2da      	uxtb	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0306 	and.w	r3, r3, #6
 800b092:	b2da      	uxtb	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b09c:	0a1b      	lsrs	r3, r3, #8
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	7e1b      	ldrb	r3, [r3, #24]
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	09db      	lsrs	r3, r3, #7
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	7e1b      	ldrb	r3, [r3, #24]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	3302      	adds	r3, #2
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b0d8:	fb02 f203 	mul.w	r2, r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	7a1b      	ldrb	r3, [r3, #8]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	fa03 f202 	lsl.w	r2, r3, r2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b0fa:	0a52      	lsrs	r2, r2, #9
 800b0fc:	fb02 f203 	mul.w	r2, r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b10a:	661a      	str	r2, [r3, #96]	; 0x60
 800b10c:	e04d      	b.n	800b1aa <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b112:	2b01      	cmp	r3, #1
 800b114:	d138      	bne.n	800b188 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	041b      	lsls	r3, r3, #16
 800b122:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12e:	0e1b      	lsrs	r3, r3, #24
 800b130:	b2db      	uxtb	r3, r3
 800b132:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	431a      	orrs	r2, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b146:	0c1b      	lsrs	r3, r3, #16
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	431a      	orrs	r2, r3
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b15c:	0a1b      	lsrs	r3, r3, #8
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	3301      	adds	r3, #1
 800b168:	029a      	lsls	r2, r3, #10
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	655a      	str	r2, [r3, #84]	; 0x54
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b17c:	659a      	str	r2, [r3, #88]	; 0x58
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	661a      	str	r2, [r3, #96]	; 0x60
 800b186:	e010      	b.n	800b1aa <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b190:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b196:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e0c1      	b.n	800b32e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	099b      	lsrs	r3, r3, #6
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	005b      	lsls	r3, r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	7e9b      	ldrb	r3, [r3, #26]
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	09db      	lsrs	r3, r3, #7
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b200:	0e1b      	lsrs	r3, r3, #24
 800b202:	b2db      	uxtb	r3, r3
 800b204:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	09db      	lsrs	r3, r3, #7
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 0301 	and.w	r3, r3, #1
 800b210:	b2da      	uxtb	r2, r3
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	095b      	lsrs	r3, r3, #5
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 0303 	and.w	r3, r3, #3
 800b220:	b2da      	uxtb	r2, r3
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	089b      	lsrs	r3, r3, #2
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	b2da      	uxtb	r2, r3
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	f003 030c 	and.w	r3, r3, #12
 800b242:	b2da      	uxtb	r2, r3
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24c:	0c1b      	lsrs	r3, r3, #16
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	7fdb      	ldrb	r3, [r3, #31]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	099b      	lsrs	r3, r3, #6
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0303 	and.w	r3, r3, #3
 800b262:	b2db      	uxtb	r3, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	b2da      	uxtb	r2, r3
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	095b      	lsrs	r3, r3, #5
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	b2da      	uxtb	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	09db      	lsrs	r3, r3, #7
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	099b      	lsrs	r3, r3, #6
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	091b      	lsrs	r3, r3, #4
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	089b      	lsrs	r3, r3, #2
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0303 	and.w	r3, r3, #3
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	085b      	lsrs	r3, r3, #1
 800b316:	b2db      	uxtb	r3, r3
 800b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b392:	b5b0      	push	{r4, r5, r7, lr}
 800b394:	b08e      	sub	sp, #56	; 0x38
 800b396:	af04      	add	r7, sp, #16
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b39c:	2300      	movs	r3, #0
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2203      	movs	r2, #3
 800b3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ac:	2b03      	cmp	r3, #3
 800b3ae:	d02e      	beq.n	800b40e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3b6:	d106      	bne.n	800b3c6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
 800b3c4:	e029      	b.n	800b41a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3cc:	d10a      	bne.n	800b3e4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb28 	bl	800ba24 <SD_WideBus_Enable>
 800b3d4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	431a      	orrs	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	639a      	str	r2, [r3, #56]	; 0x38
 800b3e2:	e01a      	b.n	800b41a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10a      	bne.n	800b400 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fb67 	bl	800babe <SD_WideBus_Disable>
 800b3f0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	639a      	str	r2, [r3, #56]	; 0x38
 800b3fe:	e00c      	b.n	800b41a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	639a      	str	r2, [r3, #56]	; 0x38
 800b40c:	e005      	b.n	800b41a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b42a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e024      	b.n	800b482 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	466c      	mov	r4, sp
 800b460:	f107 0318 	add.w	r3, r7, #24
 800b464:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b46c:	f107 030c 	add.w	r3, r7, #12
 800b470:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b472:	4628      	mov	r0, r5
 800b474:	f002 fc48 	bl	800dd08 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3728      	adds	r7, #40	; 0x28
 800b486:	46bd      	mov	sp, r7
 800b488:	bdb0      	pop	{r4, r5, r7, pc}

0800b48a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800b492:	2304      	movs	r3, #4
 800b494:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b496:	2300      	movs	r3, #0
 800b498:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800b49e:	f107 030c 	add.w	r3, r7, #12
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa93 	bl	800b9d0 <SD_SendStatus>
 800b4aa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d005      	beq.n	800b4be <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	0a5b      	lsrs	r3, r3, #9
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f003 030f 	and.w	r3, r3, #15
 800b4c8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b4f2:	bf00      	nop
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b514:	2b82      	cmp	r3, #130	; 0x82
 800b516:	d111      	bne.n	800b53c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f002 fd85 	bl	800e02c <SDMMC_CmdStopTransfer>
 800b522:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d008      	beq.n	800b53c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	431a      	orrs	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff fccc 	bl	800aed4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f022 0208 	bic.w	r2, r2, #8
 800b54a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b554:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f008 fbba 	bl	8013cd8 <HAL_SD_RxCpltCallback>
#endif
}
 800b564:	bf00      	nop
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b580:	2b01      	cmp	r3, #1
 800b582:	d004      	beq.n	800b58e <SD_DMAError+0x22>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d12c      	bne.n	800b5e8 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b5a6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7ff ff68 	bl	800b48a <HAL_SD_GetCardState>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b5be:	7afb      	ldrb	r3, [r7, #11]
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	d002      	beq.n	800b5ca <SD_DMAError+0x5e>
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d10a      	bne.n	800b5e0 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f002 fd2c 	bl	800e02c <SDMMC_CmdStopTransfer>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7ff fc73 	bl	800aed4 <HAL_SD_ErrorCallback>
#endif
}
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b602:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d127      	bne.n	800b66a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff ff35 	bl	800b48a <HAL_SD_GetCardState>
 800b620:	4603      	mov	r3, r0
 800b622:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b632:	7afb      	ldrb	r3, [r7, #11]
 800b634:	2b06      	cmp	r3, #6
 800b636:	d002      	beq.n	800b63e <SD_DMATxAbort+0x48>
 800b638:	7afb      	ldrb	r3, [r7, #11]
 800b63a:	2b05      	cmp	r3, #5
 800b63c:	d115      	bne.n	800b66a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4618      	mov	r0, r3
 800b644:	f002 fcf2 	bl	800e02c <SDMMC_CmdStopTransfer>
 800b648:	4602      	mov	r2, r0
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64e:	431a      	orrs	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f008 fb27 	bl	8013cb0 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b662:	e002      	b.n	800b66a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff fc35 	bl	800aed4 <HAL_SD_ErrorCallback>
}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d127      	bne.n	800b6e6 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7ff fef7 	bl	800b48a <HAL_SD_GetCardState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b6ae:	7afb      	ldrb	r3, [r7, #11]
 800b6b0:	2b06      	cmp	r3, #6
 800b6b2:	d002      	beq.n	800b6ba <SD_DMARxAbort+0x48>
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	2b05      	cmp	r3, #5
 800b6b8:	d115      	bne.n	800b6e6 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f002 fcb4 	bl	800e02c <SDMMC_CmdStopTransfer>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d003      	beq.n	800b6e0 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f008 fae9 	bl	8013cb0 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800b6de:	e002      	b.n	800b6e6 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fbf7 	bl	800aed4 <HAL_SD_ErrorCallback>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6ee:	b5b0      	push	{r4, r5, r7, lr}
 800b6f0:	b094      	sub	sp, #80	; 0x50
 800b6f2:	af04      	add	r7, sp, #16
 800b6f4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f002 fb57 	bl	800ddb6 <SDIO_GetPowerState>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d102      	bne.n	800b714 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b70e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b712:	e0b1      	b.n	800b878 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d02f      	beq.n	800b77c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4618      	mov	r0, r3
 800b722:	f002 fd9d 	bl	800e260 <SDMMC_CmdSendCID>
 800b726:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <SD_InitCard+0x44>
    {
      return errorstate;
 800b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b730:	e0a2      	b.n	800b878 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f002 fb81 	bl	800de40 <SDIO_GetResponse>
 800b73e:	4602      	mov	r2, r0
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2104      	movs	r1, #4
 800b74a:	4618      	mov	r0, r3
 800b74c:	f002 fb78 	bl	800de40 <SDIO_GetResponse>
 800b750:	4602      	mov	r2, r0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2108      	movs	r1, #8
 800b75c:	4618      	mov	r0, r3
 800b75e:	f002 fb6f 	bl	800de40 <SDIO_GetResponse>
 800b762:	4602      	mov	r2, r0
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	210c      	movs	r1, #12
 800b76e:	4618      	mov	r0, r3
 800b770:	f002 fb66 	bl	800de40 <SDIO_GetResponse>
 800b774:	4602      	mov	r2, r0
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b780:	2b03      	cmp	r3, #3
 800b782:	d00d      	beq.n	800b7a0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f107 020e 	add.w	r2, r7, #14
 800b78c:	4611      	mov	r1, r2
 800b78e:	4618      	mov	r0, r3
 800b790:	f002 fda7 	bl	800e2e2 <SDMMC_CmdSetRelAdd>
 800b794:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <SD_InitCard+0xb2>
    {
      return errorstate;
 800b79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79e:	e06b      	b.n	800b878 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a4:	2b03      	cmp	r3, #3
 800b7a6:	d036      	beq.n	800b816 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b7a8:	89fb      	ldrh	r3, [r7, #14]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	041b      	lsls	r3, r3, #16
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	4610      	mov	r0, r2
 800b7be:	f002 fd6f 	bl	800e2a0 <SDMMC_CmdSendCSD>
 800b7c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <SD_InitCard+0xe0>
    {
      return errorstate;
 800b7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7cc:	e054      	b.n	800b878 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f002 fb33 	bl	800de40 <SDIO_GetResponse>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2104      	movs	r1, #4
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f002 fb2a 	bl	800de40 <SDIO_GetResponse>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2108      	movs	r1, #8
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f002 fb21 	bl	800de40 <SDIO_GetResponse>
 800b7fe:	4602      	mov	r2, r0
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	210c      	movs	r1, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f002 fb18 	bl	800de40 <SDIO_GetResponse>
 800b810:	4602      	mov	r2, r0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2104      	movs	r1, #4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f002 fb0f 	bl	800de40 <SDIO_GetResponse>
 800b822:	4603      	mov	r3, r0
 800b824:	0d1a      	lsrs	r2, r3, #20
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800b82a:	f107 0310 	add.w	r3, r7, #16
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff fb59 	bl	800aee8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	f04f 0400 	mov.w	r4, #0
 800b844:	461a      	mov	r2, r3
 800b846:	4623      	mov	r3, r4
 800b848:	4608      	mov	r0, r1
 800b84a:	f002 fc13 	bl	800e074 <SDMMC_CmdSelDesel>
 800b84e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <SD_InitCard+0x16c>
  {
    return errorstate;
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	e00e      	b.n	800b878 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681d      	ldr	r5, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	466c      	mov	r4, sp
 800b862:	f103 0210 	add.w	r2, r3, #16
 800b866:	ca07      	ldmia	r2, {r0, r1, r2}
 800b868:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b86c:	3304      	adds	r3, #4
 800b86e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b870:	4628      	mov	r0, r5
 800b872:	f002 fa49 	bl	800dd08 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3740      	adds	r7, #64	; 0x40
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bdb0      	pop	{r4, r5, r7, pc}

0800b880 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	2300      	movs	r3, #0
 800b892:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f002 fc0e 	bl	800e0be <SDMMC_CmdGoIdleState>
 800b8a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <SD_PowerON+0x2e>
  {
    return errorstate;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	e08c      	b.n	800b9c8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f002 fc23 	bl	800e0fe <SDMMC_CmdOperCond>
 800b8b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d03d      	beq.n	800b93c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b8c6:	e032      	b.n	800b92e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	60ba      	str	r2, [r7, #8]
 800b8ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d102      	bne.n	800b8dc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b8d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8da:	e075      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f002 fc2c 	bl	800e140 <SDMMC_CmdAppCommand>
 800b8e8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8f4:	e068      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f002 fc43 	bl	800e188 <SDMMC_CmdAppOperCommand>
 800b902:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b90a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b90e:	e05b      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2100      	movs	r1, #0
 800b916:	4618      	mov	r0, r3
 800b918:	f002 fa92 	bl	800de40 <SDIO_GetResponse>
 800b91c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	0fdb      	lsrs	r3, r3, #31
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <SD_PowerON+0xaa>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <SD_PowerON+0xac>
 800b92a:	2300      	movs	r3, #0
 800b92c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0c9      	beq.n	800b8c8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	645a      	str	r2, [r3, #68]	; 0x44
 800b93a:	e044      	b.n	800b9c6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800b942:	e031      	b.n	800b9a8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	60ba      	str	r2, [r7, #8]
 800b94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b94e:	4293      	cmp	r3, r2
 800b950:	d102      	bne.n	800b958 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b956:	e037      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f002 fbee 	bl	800e140 <SDMMC_CmdAppCommand>
 800b964:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <SD_PowerON+0xf0>
      {
        return errorstate;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	e02b      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b978:	4618      	mov	r0, r3
 800b97a:	f002 fc05 	bl	800e188 <SDMMC_CmdAppOperCommand>
 800b97e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <SD_PowerON+0x10a>
      {
        return errorstate;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	e01e      	b.n	800b9c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2100      	movs	r1, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f002 fa55 	bl	800de40 <SDIO_GetResponse>
 800b996:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	0fdb      	lsrs	r3, r3, #31
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d101      	bne.n	800b9a4 <SD_PowerON+0x124>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e000      	b.n	800b9a6 <SD_PowerON+0x126>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0ca      	beq.n	800b944 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	645a      	str	r2, [r3, #68]	; 0x44
 800b9be:	e002      	b.n	800b9c6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800b9e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9e8:	e018      	b.n	800ba1c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f2:	041b      	lsls	r3, r3, #16
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	f002 fc96 	bl	800e328 <SDMMC_CmdSendStatus>
 800b9fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <SD_SendStatus+0x38>
  {
    return errorstate;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	e009      	b.n	800ba1c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f002 fa16 	bl	800de40 <SDIO_GetResponse>
 800ba14:	4602      	mov	r2, r0
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	2300      	movs	r3, #0
 800ba32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f002 f9fe 	bl	800de40 <SDIO_GetResponse>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba4e:	d102      	bne.n	800ba56 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba54:	e02f      	b.n	800bab6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba56:	f107 030c 	add.w	r3, r7, #12
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f87b 	bl	800bb58 <SD_FindSCR>
 800ba62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	e023      	b.n	800bab6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01c      	beq.n	800bab2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	041b      	lsls	r3, r3, #16
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f002 fb5b 	bl	800e140 <SDMMC_CmdAppCommand>
 800ba8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	e00f      	b.n	800bab6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2102      	movs	r1, #2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f002 fb98 	bl	800e1d2 <SDMMC_CmdBusWidth>
 800baa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	e003      	b.n	800bab6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800baae:	2300      	movs	r3, #0
 800bab0:	e001      	b.n	800bab6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bab2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b086      	sub	sp, #24
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	2300      	movs	r3, #0
 800bacc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bace:	2300      	movs	r3, #0
 800bad0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2100      	movs	r1, #0
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 f9b1 	bl	800de40 <SDIO_GetResponse>
 800bade:	4603      	mov	r3, r0
 800bae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bae8:	d102      	bne.n	800baf0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800baea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800baee:	e02f      	b.n	800bb50 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800baf0:	f107 030c 	add.w	r3, r7, #12
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f82e 	bl	800bb58 <SD_FindSCR>
 800bafc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	e023      	b.n	800bb50 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01c      	beq.n	800bb4c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1a:	041b      	lsls	r3, r3, #16
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	f002 fb0e 	bl	800e140 <SDMMC_CmdAppCommand>
 800bb24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	e00f      	b.n	800bb50 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2100      	movs	r1, #0
 800bb36:	4618      	mov	r0, r3
 800bb38:	f002 fb4b 	bl	800e1d2 <SDMMC_CmdBusWidth>
 800bb3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	e003      	b.n	800bb50 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e001      	b.n	800bb50 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b08f      	sub	sp, #60	; 0x3c
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800bb62:	2300      	movs	r3, #0
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800bb66:	f7fa ffcb 	bl	8006b00 <HAL_GetTick>
 800bb6a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	2300      	movs	r3, #0
 800bb76:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f002 f99f 	bl	800dec2 <SDMMC_CmdBlockLength>
 800bb84:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	e0a8      	b.n	800bce2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb98:	041b      	lsls	r3, r3, #16
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f002 facf 	bl	800e140 <SDMMC_CmdAppCommand>
 800bba2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <SD_FindSCR+0x56>
  {
    return errorstate;
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbac:	e099      	b.n	800bce2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbae:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800bbb4:	2308      	movs	r3, #8
 800bbb6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bbb8:	2330      	movs	r3, #48	; 0x30
 800bbba:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f107 0214 	add.w	r2, r7, #20
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 f949 	bl	800de6a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f002 fb1c 	bl	800e21a <SDMMC_CmdSendSCR>
 800bbe2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d022      	beq.n	800bc30 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	e079      	b.n	800bce2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00e      	beq.n	800bc1a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6819      	ldr	r1, [r3, #0]
 800bc00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	f107 020c 	add.w	r2, r7, #12
 800bc08:	18d4      	adds	r4, r2, r3
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	f002 f8a7 	bl	800dd5e <SDIO_ReadFIFO>
 800bc10:	4603      	mov	r3, r0
 800bc12:	6023      	str	r3, [r4, #0]
      index++;
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	3301      	adds	r3, #1
 800bc18:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc1a:	f7fa ff71 	bl	8006b00 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc28:	d102      	bne.n	800bc30 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc2e:	e058      	b.n	800bce2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc36:	f240 432a 	movw	r3, #1066	; 0x42a
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0d6      	beq.n	800bbee <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc46:	f003 0308 	and.w	r3, r3, #8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2208      	movs	r2, #8
 800bc54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc56:	2308      	movs	r3, #8
 800bc58:	e043      	b.n	800bce2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc70:	2302      	movs	r3, #2
 800bc72:	e036      	b.n	800bce2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d005      	beq.n	800bc8e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2220      	movs	r2, #32
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	e029      	b.n	800bce2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800bc96:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	061a      	lsls	r2, r3, #24
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	021b      	lsls	r3, r3, #8
 800bca0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bca4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	0a1b      	lsrs	r3, r3, #8
 800bcaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bcae:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800bcba:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800bcbc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	061a      	lsls	r2, r3, #24
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	021b      	lsls	r3, r3, #8
 800bcc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcca:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bcd4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	0e1b      	lsrs	r3, r3, #24
 800bcda:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	373c      	adds	r7, #60	; 0x3c
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}

0800bcea <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bcea:	b590      	push	{r4, r7, lr}
 800bcec:	b085      	sub	sp, #20
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	e00d      	b.n	800bd1e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6819      	ldr	r1, [r3, #0]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	18d4      	adds	r4, r2, r3
 800bd0e:	4608      	mov	r0, r1
 800bd10:	f002 f825 	bl	800dd5e <SDIO_ReadFIFO>
 800bd14:	4603      	mov	r3, r0
 800bd16:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b07      	cmp	r3, #7
 800bd22:	d9ee      	bls.n	800bd02 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd28:	f103 0220 	add.w	r2, r3, #32
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd90      	pop	{r4, r7, pc}

0800bd3a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	e00b      	b.n	800bd6a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f002 f80a 	bl	800dd78 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2b07      	cmp	r3, #7
 800bd6e:	d9f0      	bls.n	800bd52 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6a1b      	ldr	r3, [r3, #32]
 800bd74:	f103 0220 	add.w	r2, r3, #32
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e056      	b.n	800be46 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f00a fa2c 	bl	8016210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	689b      	ldr	r3, [r3, #8]
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	431a      	orrs	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	ea42 0103 	orr.w	r1, r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	0c1b      	lsrs	r3, r3, #16
 800be16:	f003 0104 	and.w	r1, r3, #4
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	69da      	ldr	r2, [r3, #28]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b088      	sub	sp, #32
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	603b      	str	r3, [r7, #0]
 800be5a:	4613      	mov	r3, r2
 800be5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d101      	bne.n	800be70 <HAL_SPI_Transmit+0x22>
 800be6c:	2302      	movs	r3, #2
 800be6e:	e11e      	b.n	800c0ae <HAL_SPI_Transmit+0x260>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be78:	f7fa fe42 	bl	8006b00 <HAL_GetTick>
 800be7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be7e:	88fb      	ldrh	r3, [r7, #6]
 800be80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d002      	beq.n	800be94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800be8e:	2302      	movs	r3, #2
 800be90:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be92:	e103      	b.n	800c09c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <HAL_SPI_Transmit+0x52>
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d102      	bne.n	800bea6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bea4:	e0fa      	b.n	800c09c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2203      	movs	r2, #3
 800beaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	88fa      	ldrh	r2, [r7, #6]
 800bebe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	88fa      	ldrh	r2, [r7, #6]
 800bec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beec:	d107      	bne.n	800befe <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800befc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf08:	2b40      	cmp	r3, #64	; 0x40
 800bf0a:	d007      	beq.n	800bf1c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf24:	d14b      	bne.n	800bfbe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <HAL_SPI_Transmit+0xe6>
 800bf2e:	8afb      	ldrh	r3, [r7, #22]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d13e      	bne.n	800bfb2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf38:	881a      	ldrh	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf44:	1c9a      	adds	r2, r3, #2
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3b01      	subs	r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf58:	e02b      	b.n	800bfb2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d112      	bne.n	800bf8e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	881a      	ldrh	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf78:	1c9a      	adds	r2, r3, #2
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	86da      	strh	r2, [r3, #54]	; 0x36
 800bf8c:	e011      	b.n	800bfb2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf8e:	f7fa fdb7 	bl	8006b00 <HAL_GetTick>
 800bf92:	4602      	mov	r2, r0
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d803      	bhi.n	800bfa6 <HAL_SPI_Transmit+0x158>
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa4:	d102      	bne.n	800bfac <HAL_SPI_Transmit+0x15e>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d102      	bne.n	800bfb2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bfb0:	e074      	b.n	800c09c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1ce      	bne.n	800bf5a <HAL_SPI_Transmit+0x10c>
 800bfbc:	e04c      	b.n	800c058 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <HAL_SPI_Transmit+0x17e>
 800bfc6:	8afb      	ldrh	r3, [r7, #22]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d140      	bne.n	800c04e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	3b01      	subs	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bff2:	e02c      	b.n	800c04e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d113      	bne.n	800c02a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	330c      	adds	r3, #12
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c014:	1c5a      	adds	r2, r3, #1
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c01e:	b29b      	uxth	r3, r3
 800c020:	3b01      	subs	r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	86da      	strh	r2, [r3, #54]	; 0x36
 800c028:	e011      	b.n	800c04e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c02a:	f7fa fd69 	bl	8006b00 <HAL_GetTick>
 800c02e:	4602      	mov	r2, r0
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	429a      	cmp	r2, r3
 800c038:	d803      	bhi.n	800c042 <HAL_SPI_Transmit+0x1f4>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c040:	d102      	bne.n	800c048 <HAL_SPI_Transmit+0x1fa>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c04c:	e026      	b.n	800c09c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c052:	b29b      	uxth	r3, r3
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1cd      	bne.n	800bff4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 fa45 	bl	800c4ec <SPI_EndRxTxTransaction>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2220      	movs	r2, #32
 800c06c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10a      	bne.n	800c08c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c076:	2300      	movs	r3, #0
 800c078:	613b      	str	r3, [r7, #16]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	613b      	str	r3, [r7, #16]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	613b      	str	r3, [r7, #16]
 800c08a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e000      	b.n	800c09c <HAL_SPI_Transmit+0x24e>
  }

error:
 800c09a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c0ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b08c      	sub	sp, #48	; 0x30
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
 800c0c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d101      	bne.n	800c0dc <HAL_SPI_TransmitReceive+0x26>
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e18a      	b.n	800c3f2 <HAL_SPI_TransmitReceive+0x33c>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0e4:	f7fa fd0c 	bl	8006b00 <HAL_GetTick>
 800c0e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c0fa:	887b      	ldrh	r3, [r7, #2]
 800c0fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c0fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c102:	2b01      	cmp	r3, #1
 800c104:	d00f      	beq.n	800c126 <HAL_SPI_TransmitReceive+0x70>
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c10c:	d107      	bne.n	800c11e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d103      	bne.n	800c11e <HAL_SPI_TransmitReceive+0x68>
 800c116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d003      	beq.n	800c126 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c11e:	2302      	movs	r3, #2
 800c120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c124:	e15b      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <HAL_SPI_TransmitReceive+0x82>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <HAL_SPI_TransmitReceive+0x82>
 800c132:	887b      	ldrh	r3, [r7, #2]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d103      	bne.n	800c140 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c13e:	e14e      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d003      	beq.n	800c154 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2205      	movs	r2, #5
 800c150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	887a      	ldrh	r2, [r7, #2]
 800c164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	887a      	ldrh	r2, [r7, #2]
 800c16a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	887a      	ldrh	r2, [r7, #2]
 800c176:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	887a      	ldrh	r2, [r7, #2]
 800c17c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2200      	movs	r2, #0
 800c188:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c194:	2b40      	cmp	r3, #64	; 0x40
 800c196:	d007      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1b0:	d178      	bne.n	800c2a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <HAL_SPI_TransmitReceive+0x10a>
 800c1ba:	8b7b      	ldrh	r3, [r7, #26]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d166      	bne.n	800c28e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c4:	881a      	ldrh	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d0:	1c9a      	adds	r2, r3, #2
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1e4:	e053      	b.n	800c28e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f003 0302 	and.w	r3, r3, #2
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d11b      	bne.n	800c22c <HAL_SPI_TransmitReceive+0x176>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d016      	beq.n	800c22c <HAL_SPI_TransmitReceive+0x176>
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	2b01      	cmp	r3, #1
 800c202:	d113      	bne.n	800c22c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c208:	881a      	ldrh	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	1c9a      	adds	r2, r3, #2
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b01      	cmp	r3, #1
 800c238:	d119      	bne.n	800c26e <HAL_SPI_TransmitReceive+0x1b8>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c23e:	b29b      	uxth	r3, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d014      	beq.n	800c26e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	b292      	uxth	r2, r2
 800c250:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	1c9a      	adds	r2, r3, #2
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c260:	b29b      	uxth	r3, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	b29a      	uxth	r2, r3
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c26a:	2301      	movs	r3, #1
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c26e:	f7fa fc47 	bl	8006b00 <HAL_GetTick>
 800c272:	4602      	mov	r2, r0
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d807      	bhi.n	800c28e <HAL_SPI_TransmitReceive+0x1d8>
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c284:	d003      	beq.n	800c28e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c286:	2303      	movs	r3, #3
 800c288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c28c:	e0a7      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c292:	b29b      	uxth	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1a6      	bne.n	800c1e6 <HAL_SPI_TransmitReceive+0x130>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1a1      	bne.n	800c1e6 <HAL_SPI_TransmitReceive+0x130>
 800c2a2:	e07c      	b.n	800c39e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <HAL_SPI_TransmitReceive+0x1fc>
 800c2ac:	8b7b      	ldrh	r3, [r7, #26]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d16b      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	330c      	adds	r3, #12
 800c2bc:	7812      	ldrb	r2, [r2, #0]
 800c2be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2d8:	e057      	b.n	800c38a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d11c      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x26c>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d017      	beq.n	800c322 <HAL_SPI_TransmitReceive+0x26c>
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d114      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	330c      	adds	r3, #12
 800c302:	7812      	ldrb	r2, [r2, #0]
 800c304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c314:	b29b      	uxth	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	b29a      	uxth	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f003 0301 	and.w	r3, r3, #1
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d119      	bne.n	800c364 <HAL_SPI_TransmitReceive+0x2ae>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c334:	b29b      	uxth	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d014      	beq.n	800c364 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c344:	b2d2      	uxtb	r2, r2
 800c346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34c:	1c5a      	adds	r2, r3, #1
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c356:	b29b      	uxth	r3, r3
 800c358:	3b01      	subs	r3, #1
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c360:	2301      	movs	r3, #1
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c364:	f7fa fbcc 	bl	8006b00 <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c370:	429a      	cmp	r2, r3
 800c372:	d803      	bhi.n	800c37c <HAL_SPI_TransmitReceive+0x2c6>
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37a:	d102      	bne.n	800c382 <HAL_SPI_TransmitReceive+0x2cc>
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d103      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c382:	2303      	movs	r3, #3
 800c384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c388:	e029      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c38e:	b29b      	uxth	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1a2      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x224>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c398:	b29b      	uxth	r3, r3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d19d      	bne.n	800c2da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f8a2 	bl	800c4ec <SPI_EndRxTxTransaction>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d006      	beq.n	800c3bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c3ba:	e010      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10b      	bne.n	800c3dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	617b      	str	r3, [r7, #20]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	e000      	b.n	800c3de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c3dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c3ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3730      	adds	r7, #48	; 0x30
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c3fa:	b480      	push	{r7}
 800c3fc:	b083      	sub	sp, #12
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c408:	b2db      	uxtb	r3, r3
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	603b      	str	r3, [r7, #0]
 800c422:	4613      	mov	r3, r2
 800c424:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c426:	e04c      	b.n	800c4c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42e:	d048      	beq.n	800c4c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c430:	f7fa fb66 	bl	8006b00 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	683a      	ldr	r2, [r7, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d902      	bls.n	800c446 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d13d      	bne.n	800c4c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c45e:	d111      	bne.n	800c484 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c468:	d004      	beq.n	800c474 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c472:	d107      	bne.n	800c484 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c48c:	d10f      	bne.n	800c4ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c49c:	601a      	str	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e00f      	b.n	800c4e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4013      	ands	r3, r2
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	bf0c      	ite	eq
 800c4d2:	2301      	moveq	r3, #1
 800c4d4:	2300      	movne	r3, #0
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	461a      	mov	r2, r3
 800c4da:	79fb      	ldrb	r3, [r7, #7]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d1a3      	bne.n	800c428 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af02      	add	r7, sp, #8
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c4f8:	4b1b      	ldr	r3, [pc, #108]	; (800c568 <SPI_EndRxTxTransaction+0x7c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a1b      	ldr	r2, [pc, #108]	; (800c56c <SPI_EndRxTxTransaction+0x80>)
 800c4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c502:	0d5b      	lsrs	r3, r3, #21
 800c504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c508:	fb02 f303 	mul.w	r3, r2, r3
 800c50c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c516:	d112      	bne.n	800c53e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2200      	movs	r2, #0
 800c520:	2180      	movs	r1, #128	; 0x80
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f7ff ff77 	bl	800c416 <SPI_WaitFlagStateUntilTimeout>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d016      	beq.n	800c55c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c532:	f043 0220 	orr.w	r2, r3, #32
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e00f      	b.n	800c55e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00a      	beq.n	800c55a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	3b01      	subs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c554:	2b80      	cmp	r3, #128	; 0x80
 800c556:	d0f2      	beq.n	800c53e <SPI_EndRxTxTransaction+0x52>
 800c558:	e000      	b.n	800c55c <SPI_EndRxTxTransaction+0x70>
        break;
 800c55a:	bf00      	nop
  }

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20000170 	.word	0x20000170
 800c56c:	165e9f81 	.word	0x165e9f81

0800c570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e01d      	b.n	800c5be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f009 fe82 	bl	80162a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2202      	movs	r2, #2
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f000 fa76 	bl	800caa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b085      	sub	sp, #20
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	f003 0307 	and.w	r3, r3, #7
 800c5e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b06      	cmp	r3, #6
 800c5e6:	d007      	beq.n	800c5f8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f042 0201 	orr.w	r2, r2, #1
 800c5f6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b082      	sub	sp, #8
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e01d      	b.n	800c65c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f815 	bl	800c664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f000 fa27 	bl	800caa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2201      	movs	r2, #1
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fcf2 	bl	800d074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a15      	ldr	r2, [pc, #84]	; (800c6ec <HAL_TIM_PWM_Start+0x74>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d004      	beq.n	800c6a4 <HAL_TIM_PWM_Start+0x2c>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a14      	ldr	r2, [pc, #80]	; (800c6f0 <HAL_TIM_PWM_Start+0x78>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d101      	bne.n	800c6a8 <HAL_TIM_PWM_Start+0x30>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <HAL_TIM_PWM_Start+0x32>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d007      	beq.n	800c6be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b06      	cmp	r3, #6
 800c6ce:	d007      	beq.n	800c6e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f042 0201 	orr.w	r2, r2, #1
 800c6de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	40010000 	.word	0x40010000
 800c6f0:	40010400 	.word	0x40010400

0800c6f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fcb4 	bl	800d074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a22      	ldr	r2, [pc, #136]	; (800c79c <HAL_TIM_PWM_Stop+0xa8>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d004      	beq.n	800c720 <HAL_TIM_PWM_Stop+0x2c>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a21      	ldr	r2, [pc, #132]	; (800c7a0 <HAL_TIM_PWM_Stop+0xac>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d101      	bne.n	800c724 <HAL_TIM_PWM_Stop+0x30>
 800c720:	2301      	movs	r3, #1
 800c722:	e000      	b.n	800c726 <HAL_TIM_PWM_Stop+0x32>
 800c724:	2300      	movs	r3, #0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d017      	beq.n	800c75a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6a1a      	ldr	r2, [r3, #32]
 800c730:	f241 1311 	movw	r3, #4369	; 0x1111
 800c734:	4013      	ands	r3, r2
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10f      	bne.n	800c75a <HAL_TIM_PWM_Stop+0x66>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6a1a      	ldr	r2, [r3, #32]
 800c740:	f240 4344 	movw	r3, #1092	; 0x444
 800c744:	4013      	ands	r3, r2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d107      	bne.n	800c75a <HAL_TIM_PWM_Stop+0x66>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6a1a      	ldr	r2, [r3, #32]
 800c760:	f241 1311 	movw	r3, #4369	; 0x1111
 800c764:	4013      	ands	r3, r2
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10f      	bne.n	800c78a <HAL_TIM_PWM_Stop+0x96>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6a1a      	ldr	r2, [r3, #32]
 800c770:	f240 4344 	movw	r3, #1092	; 0x444
 800c774:	4013      	ands	r3, r2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d107      	bne.n	800c78a <HAL_TIM_PWM_Stop+0x96>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f022 0201 	bic.w	r2, r2, #1
 800c788:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	40010000 	.word	0x40010000
 800c7a0:	40010400 	.word	0x40010400

0800c7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d101      	bne.n	800c7be <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e0b4      	b.n	800c928 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b0c      	cmp	r3, #12
 800c7d2:	f200 809f 	bhi.w	800c914 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c7d6:	a201      	add	r2, pc, #4	; (adr r2, 800c7dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c811 	.word	0x0800c811
 800c7e0:	0800c915 	.word	0x0800c915
 800c7e4:	0800c915 	.word	0x0800c915
 800c7e8:	0800c915 	.word	0x0800c915
 800c7ec:	0800c851 	.word	0x0800c851
 800c7f0:	0800c915 	.word	0x0800c915
 800c7f4:	0800c915 	.word	0x0800c915
 800c7f8:	0800c915 	.word	0x0800c915
 800c7fc:	0800c893 	.word	0x0800c893
 800c800:	0800c915 	.word	0x0800c915
 800c804:	0800c915 	.word	0x0800c915
 800c808:	0800c915 	.word	0x0800c915
 800c80c:	0800c8d3 	.word	0x0800c8d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68b9      	ldr	r1, [r7, #8]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f9e2 	bl	800cbe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	699a      	ldr	r2, [r3, #24]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0208 	orr.w	r2, r2, #8
 800c82a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	699a      	ldr	r2, [r3, #24]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f022 0204 	bic.w	r2, r2, #4
 800c83a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6999      	ldr	r1, [r3, #24]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	691a      	ldr	r2, [r3, #16]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	619a      	str	r2, [r3, #24]
      break;
 800c84e:	e062      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	68b9      	ldr	r1, [r7, #8]
 800c856:	4618      	mov	r0, r3
 800c858:	f000 fa32 	bl	800ccc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	699a      	ldr	r2, [r3, #24]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c86a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	699a      	ldr	r2, [r3, #24]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c87a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6999      	ldr	r1, [r3, #24]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	021a      	lsls	r2, r3, #8
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	619a      	str	r2, [r3, #24]
      break;
 800c890:	e041      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68b9      	ldr	r1, [r7, #8]
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 fa87 	bl	800cdac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	69da      	ldr	r2, [r3, #28]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f042 0208 	orr.w	r2, r2, #8
 800c8ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	69da      	ldr	r2, [r3, #28]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f022 0204 	bic.w	r2, r2, #4
 800c8bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	69d9      	ldr	r1, [r3, #28]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	691a      	ldr	r2, [r3, #16]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	61da      	str	r2, [r3, #28]
      break;
 800c8d0:	e021      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 fadb 	bl	800ce94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	69da      	ldr	r2, [r3, #28]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	69da      	ldr	r2, [r3, #28]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69d9      	ldr	r1, [r3, #28]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	021a      	lsls	r2, r3, #8
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	430a      	orrs	r2, r1
 800c910:	61da      	str	r2, [r3, #28]
      break;
 800c912:	e000      	b.n	800c916 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c914:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c940:	2b01      	cmp	r3, #1
 800c942:	d101      	bne.n	800c948 <HAL_TIM_ConfigClockSource+0x18>
 800c944:	2302      	movs	r3, #2
 800c946:	e0a6      	b.n	800ca96 <HAL_TIM_ConfigClockSource+0x166>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2202      	movs	r2, #2
 800c954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c96e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b40      	cmp	r3, #64	; 0x40
 800c97e:	d067      	beq.n	800ca50 <HAL_TIM_ConfigClockSource+0x120>
 800c980:	2b40      	cmp	r3, #64	; 0x40
 800c982:	d80b      	bhi.n	800c99c <HAL_TIM_ConfigClockSource+0x6c>
 800c984:	2b10      	cmp	r3, #16
 800c986:	d073      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0x140>
 800c988:	2b10      	cmp	r3, #16
 800c98a:	d802      	bhi.n	800c992 <HAL_TIM_ConfigClockSource+0x62>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d06f      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c990:	e078      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c992:	2b20      	cmp	r3, #32
 800c994:	d06c      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0x140>
 800c996:	2b30      	cmp	r3, #48	; 0x30
 800c998:	d06a      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c99a:	e073      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c99c:	2b70      	cmp	r3, #112	; 0x70
 800c99e:	d00d      	beq.n	800c9bc <HAL_TIM_ConfigClockSource+0x8c>
 800c9a0:	2b70      	cmp	r3, #112	; 0x70
 800c9a2:	d804      	bhi.n	800c9ae <HAL_TIM_ConfigClockSource+0x7e>
 800c9a4:	2b50      	cmp	r3, #80	; 0x50
 800c9a6:	d033      	beq.n	800ca10 <HAL_TIM_ConfigClockSource+0xe0>
 800c9a8:	2b60      	cmp	r3, #96	; 0x60
 800c9aa:	d041      	beq.n	800ca30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c9ac:	e06a      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b2:	d066      	beq.n	800ca82 <HAL_TIM_ConfigClockSource+0x152>
 800c9b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9b8:	d017      	beq.n	800c9ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c9ba:	e063      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	6899      	ldr	r1, [r3, #8]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	f000 fb32 	bl	800d034 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	689b      	ldr	r3, [r3, #8]
 800c9d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	609a      	str	r2, [r3, #8]
      break;
 800c9e8:	e04c      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6899      	ldr	r1, [r3, #8]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	f000 fb1b 	bl	800d034 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca0c:	609a      	str	r2, [r3, #8]
      break;
 800ca0e:	e039      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6859      	ldr	r1, [r3, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f000 fa8f 	bl	800cf40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2150      	movs	r1, #80	; 0x50
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 fae8 	bl	800cffe <TIM_ITRx_SetConfig>
      break;
 800ca2e:	e029      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	6859      	ldr	r1, [r3, #4]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	f000 faae 	bl	800cf9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2160      	movs	r1, #96	; 0x60
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f000 fad8 	bl	800cffe <TIM_ITRx_SetConfig>
      break;
 800ca4e:	e019      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	6859      	ldr	r1, [r3, #4]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f000 fa6f 	bl	800cf40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2140      	movs	r1, #64	; 0x40
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 fac8 	bl	800cffe <TIM_ITRx_SetConfig>
      break;
 800ca6e:	e009      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	f000 fabf 	bl	800cffe <TIM_ITRx_SetConfig>
      break;
 800ca80:	e000      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ca82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a40      	ldr	r2, [pc, #256]	; (800cbb4 <TIM_Base_SetConfig+0x114>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d013      	beq.n	800cae0 <TIM_Base_SetConfig+0x40>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cabe:	d00f      	beq.n	800cae0 <TIM_Base_SetConfig+0x40>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a3d      	ldr	r2, [pc, #244]	; (800cbb8 <TIM_Base_SetConfig+0x118>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00b      	beq.n	800cae0 <TIM_Base_SetConfig+0x40>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a3c      	ldr	r2, [pc, #240]	; (800cbbc <TIM_Base_SetConfig+0x11c>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d007      	beq.n	800cae0 <TIM_Base_SetConfig+0x40>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a3b      	ldr	r2, [pc, #236]	; (800cbc0 <TIM_Base_SetConfig+0x120>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d003      	beq.n	800cae0 <TIM_Base_SetConfig+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a3a      	ldr	r2, [pc, #232]	; (800cbc4 <TIM_Base_SetConfig+0x124>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d108      	bne.n	800caf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a2f      	ldr	r2, [pc, #188]	; (800cbb4 <TIM_Base_SetConfig+0x114>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d02b      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb00:	d027      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a2c      	ldr	r2, [pc, #176]	; (800cbb8 <TIM_Base_SetConfig+0x118>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d023      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a2b      	ldr	r2, [pc, #172]	; (800cbbc <TIM_Base_SetConfig+0x11c>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d01f      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a2a      	ldr	r2, [pc, #168]	; (800cbc0 <TIM_Base_SetConfig+0x120>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d01b      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a29      	ldr	r2, [pc, #164]	; (800cbc4 <TIM_Base_SetConfig+0x124>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d017      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a28      	ldr	r2, [pc, #160]	; (800cbc8 <TIM_Base_SetConfig+0x128>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d013      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a27      	ldr	r2, [pc, #156]	; (800cbcc <TIM_Base_SetConfig+0x12c>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d00f      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a26      	ldr	r2, [pc, #152]	; (800cbd0 <TIM_Base_SetConfig+0x130>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d00b      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a25      	ldr	r2, [pc, #148]	; (800cbd4 <TIM_Base_SetConfig+0x134>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d007      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a24      	ldr	r2, [pc, #144]	; (800cbd8 <TIM_Base_SetConfig+0x138>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d003      	beq.n	800cb52 <TIM_Base_SetConfig+0xb2>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a23      	ldr	r2, [pc, #140]	; (800cbdc <TIM_Base_SetConfig+0x13c>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d108      	bne.n	800cb64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	689a      	ldr	r2, [r3, #8]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a0a      	ldr	r2, [pc, #40]	; (800cbb4 <TIM_Base_SetConfig+0x114>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d003      	beq.n	800cb98 <TIM_Base_SetConfig+0xf8>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a0c      	ldr	r2, [pc, #48]	; (800cbc4 <TIM_Base_SetConfig+0x124>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d103      	bne.n	800cba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	691a      	ldr	r2, [r3, #16]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	615a      	str	r2, [r3, #20]
}
 800cba6:	bf00      	nop
 800cba8:	3714      	adds	r7, #20
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
 800cbb2:	bf00      	nop
 800cbb4:	40010000 	.word	0x40010000
 800cbb8:	40000400 	.word	0x40000400
 800cbbc:	40000800 	.word	0x40000800
 800cbc0:	40000c00 	.word	0x40000c00
 800cbc4:	40010400 	.word	0x40010400
 800cbc8:	40014000 	.word	0x40014000
 800cbcc:	40014400 	.word	0x40014400
 800cbd0:	40014800 	.word	0x40014800
 800cbd4:	40001800 	.word	0x40001800
 800cbd8:	40001c00 	.word	0x40001c00
 800cbdc:	40002000 	.word	0x40002000

0800cbe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b087      	sub	sp, #28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	f023 0201 	bic.w	r2, r3, #1
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f023 0303 	bic.w	r3, r3, #3
 800cc16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f023 0302 	bic.w	r3, r3, #2
 800cc28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a20      	ldr	r2, [pc, #128]	; (800ccb8 <TIM_OC1_SetConfig+0xd8>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d003      	beq.n	800cc44 <TIM_OC1_SetConfig+0x64>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a1f      	ldr	r2, [pc, #124]	; (800ccbc <TIM_OC1_SetConfig+0xdc>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d10c      	bne.n	800cc5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f023 0308 	bic.w	r3, r3, #8
 800cc4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f023 0304 	bic.w	r3, r3, #4
 800cc5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a15      	ldr	r2, [pc, #84]	; (800ccb8 <TIM_OC1_SetConfig+0xd8>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d003      	beq.n	800cc6e <TIM_OC1_SetConfig+0x8e>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a14      	ldr	r2, [pc, #80]	; (800ccbc <TIM_OC1_SetConfig+0xdc>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d111      	bne.n	800cc92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cc7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	697a      	ldr	r2, [r7, #20]
 800ccaa:	621a      	str	r2, [r3, #32]
}
 800ccac:	bf00      	nop
 800ccae:	371c      	adds	r7, #28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr
 800ccb8:	40010000 	.word	0x40010000
 800ccbc:	40010400 	.word	0x40010400

0800ccc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	f023 0210 	bic.w	r2, r3, #16
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f023 0320 	bic.w	r3, r3, #32
 800cd0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	011b      	lsls	r3, r3, #4
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a22      	ldr	r2, [pc, #136]	; (800cda4 <TIM_OC2_SetConfig+0xe4>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d003      	beq.n	800cd28 <TIM_OC2_SetConfig+0x68>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a21      	ldr	r2, [pc, #132]	; (800cda8 <TIM_OC2_SetConfig+0xe8>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d10d      	bne.n	800cd44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	011b      	lsls	r3, r3, #4
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a17      	ldr	r2, [pc, #92]	; (800cda4 <TIM_OC2_SetConfig+0xe4>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d003      	beq.n	800cd54 <TIM_OC2_SetConfig+0x94>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a16      	ldr	r2, [pc, #88]	; (800cda8 <TIM_OC2_SetConfig+0xe8>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d113      	bne.n	800cd7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	693a      	ldr	r2, [r7, #16]
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	621a      	str	r2, [r3, #32]
}
 800cd96:	bf00      	nop
 800cd98:	371c      	adds	r7, #28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	40010000 	.word	0x40010000
 800cda8:	40010400 	.word	0x40010400

0800cdac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
 800cdc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	69db      	ldr	r3, [r3, #28]
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f023 0303 	bic.w	r3, r3, #3
 800cde2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	4313      	orrs	r3, r2
 800cdec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	021b      	lsls	r3, r3, #8
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a21      	ldr	r2, [pc, #132]	; (800ce8c <TIM_OC3_SetConfig+0xe0>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d003      	beq.n	800ce12 <TIM_OC3_SetConfig+0x66>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a20      	ldr	r2, [pc, #128]	; (800ce90 <TIM_OC3_SetConfig+0xe4>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d10d      	bne.n	800ce2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a16      	ldr	r2, [pc, #88]	; (800ce8c <TIM_OC3_SetConfig+0xe0>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d003      	beq.n	800ce3e <TIM_OC3_SetConfig+0x92>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a15      	ldr	r2, [pc, #84]	; (800ce90 <TIM_OC3_SetConfig+0xe4>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d113      	bne.n	800ce66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	4313      	orrs	r3, r2
 800ce64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	621a      	str	r2, [r3, #32]
}
 800ce80:	bf00      	nop
 800ce82:	371c      	adds	r7, #28
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	40010000 	.word	0x40010000
 800ce90:	40010400 	.word	0x40010400

0800ce94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ceca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	021b      	lsls	r3, r3, #8
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	031b      	lsls	r3, r3, #12
 800cee6:	693a      	ldr	r2, [r7, #16]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a12      	ldr	r2, [pc, #72]	; (800cf38 <TIM_OC4_SetConfig+0xa4>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d003      	beq.n	800cefc <TIM_OC4_SetConfig+0x68>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a11      	ldr	r2, [pc, #68]	; (800cf3c <TIM_OC4_SetConfig+0xa8>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d109      	bne.n	800cf10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	019b      	lsls	r3, r3, #6
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	693a      	ldr	r2, [r7, #16]
 800cf28:	621a      	str	r2, [r3, #32]
}
 800cf2a:	bf00      	nop
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	40010000 	.word	0x40010000
 800cf3c:	40010400 	.word	0x40010400

0800cf40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b087      	sub	sp, #28
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	f023 0201 	bic.w	r2, r3, #1
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f023 030a 	bic.w	r3, r3, #10
 800cf7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	693a      	ldr	r2, [r7, #16]
 800cf8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	697a      	ldr	r2, [r7, #20]
 800cf90:	621a      	str	r2, [r3, #32]
}
 800cf92:	bf00      	nop
 800cf94:	371c      	adds	r7, #28
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b087      	sub	sp, #28
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	60b9      	str	r1, [r7, #8]
 800cfa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	f023 0210 	bic.w	r2, r3, #16
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6a1b      	ldr	r3, [r3, #32]
 800cfc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	031b      	lsls	r3, r3, #12
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cfda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	011b      	lsls	r3, r3, #4
 800cfe0:	693a      	ldr	r2, [r7, #16]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	621a      	str	r2, [r3, #32]
}
 800cff2:	bf00      	nop
 800cff4:	371c      	adds	r7, #28
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cffe:	b480      	push	{r7}
 800d000:	b085      	sub	sp, #20
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	f043 0307 	orr.w	r3, r3, #7
 800d020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	609a      	str	r2, [r3, #8]
}
 800d028:	bf00      	nop
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d034:	b480      	push	{r7}
 800d036:	b087      	sub	sp, #28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d04e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	021a      	lsls	r2, r3, #8
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	431a      	orrs	r2, r3
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	4313      	orrs	r3, r2
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	4313      	orrs	r3, r2
 800d060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	697a      	ldr	r2, [r7, #20]
 800d066:	609a      	str	r2, [r3, #8]
}
 800d068:	bf00      	nop
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f003 031f 	and.w	r3, r3, #31
 800d086:	2201      	movs	r2, #1
 800d088:	fa02 f303 	lsl.w	r3, r2, r3
 800d08c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6a1a      	ldr	r2, [r3, #32]
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	43db      	mvns	r3, r3
 800d096:	401a      	ands	r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a1a      	ldr	r2, [r3, #32]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	f003 031f 	and.w	r3, r3, #31
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	621a      	str	r2, [r3, #32]
}
 800d0b2:	bf00      	nop
 800d0b4:	371c      	adds	r7, #28
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d101      	bne.n	800d0d6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	e032      	b.n	800d13c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	4313      	orrs	r3, r2
 800d106:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d10e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	4313      	orrs	r3, r2
 800d118:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e03f      	b.n	800d1da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f009 f944 	bl	80163fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2224      	movs	r2, #36	; 0x24
 800d178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d18a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fbb1 	bl	800d8f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	691a      	ldr	r2, [r3, #16]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	695a      	ldr	r2, [r3, #20]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68da      	ldr	r2, [r3, #12]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2220      	movs	r2, #32
 800d1cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2220      	movs	r2, #32
 800d1d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b088      	sub	sp, #32
 800d1e6:	af02      	add	r7, sp, #8
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	603b      	str	r3, [r7, #0]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	f040 8083 	bne.w	800d30a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <HAL_UART_Transmit+0x2e>
 800d20a:	88fb      	ldrh	r3, [r7, #6]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e07b      	b.n	800d30c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d101      	bne.n	800d222 <HAL_UART_Transmit+0x40>
 800d21e:	2302      	movs	r3, #2
 800d220:	e074      	b.n	800d30c <HAL_UART_Transmit+0x12a>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2221      	movs	r2, #33	; 0x21
 800d234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d238:	f7f9 fc62 	bl	8006b00 <HAL_GetTick>
 800d23c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	88fa      	ldrh	r2, [r7, #6]
 800d248:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d24a:	e042      	b.n	800d2d2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d250:	b29b      	uxth	r3, r3
 800d252:	3b01      	subs	r3, #1
 800d254:	b29a      	uxth	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d262:	d122      	bne.n	800d2aa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2200      	movs	r2, #0
 800d26c:	2180      	movs	r1, #128	; 0x80
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f000 f9d4 	bl	800d61c <UART_WaitOnFlagUntilTimeout>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800d27a:	2303      	movs	r3, #3
 800d27c:	e046      	b.n	800d30c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	461a      	mov	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d290:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	691b      	ldr	r3, [r3, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d103      	bne.n	800d2a2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	3302      	adds	r3, #2
 800d29e:	60bb      	str	r3, [r7, #8]
 800d2a0:	e017      	b.n	800d2d2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	60bb      	str	r3, [r7, #8]
 800d2a8:	e013      	b.n	800d2d2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	2180      	movs	r1, #128	; 0x80
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 f9b1 	bl	800d61c <UART_WaitOnFlagUntilTimeout>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d001      	beq.n	800d2c4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e023      	b.n	800d30c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	60ba      	str	r2, [r7, #8]
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1b7      	bne.n	800d24c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2140      	movs	r1, #64	; 0x40
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f000 f998 	bl	800d61c <UART_WaitOnFlagUntilTimeout>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d2f2:	2303      	movs	r3, #3
 800d2f4:	e00a      	b.n	800d30c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	e000      	b.n	800d30c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d30a:	2302      	movs	r3, #2
  }
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3718      	adds	r7, #24
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d314:	b480      	push	{r7}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d140      	bne.n	800d3b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <HAL_UART_Receive_IT+0x26>
 800d334:	88fb      	ldrh	r3, [r7, #6]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d33a:	2301      	movs	r3, #1
 800d33c:	e039      	b.n	800d3b2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d344:	2b01      	cmp	r3, #1
 800d346:	d101      	bne.n	800d34c <HAL_UART_Receive_IT+0x38>
 800d348:	2302      	movs	r3, #2
 800d34a:	e032      	b.n	800d3b2 <HAL_UART_Receive_IT+0x9e>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	88fa      	ldrh	r2, [r7, #6]
 800d35e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	88fa      	ldrh	r2, [r7, #6]
 800d364:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2222      	movs	r2, #34	; 0x22
 800d370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	68da      	ldr	r2, [r3, #12]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d38a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	695a      	ldr	r2, [r3, #20]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f042 0201 	orr.w	r2, r2, #1
 800d39a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f042 0220 	orr.w	r2, r2, #32
 800d3aa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	e000      	b.n	800d3b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d3b0:	2302      	movs	r3, #2
  }
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b088      	sub	sp, #32
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10d      	bne.n	800d412 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	f003 0320 	and.w	r3, r3, #32
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d008      	beq.n	800d412 <HAL_UART_IRQHandler+0x52>
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f9f0 	bl	800d7f0 <UART_Receive_IT>
      return;
 800d410:	e0cc      	b.n	800d5ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 80ab 	beq.w	800d570 <HAL_UART_IRQHandler+0x1b0>
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d105      	bne.n	800d430 <HAL_UART_IRQHandler+0x70>
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f000 80a0 	beq.w	800d570 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <HAL_UART_IRQHandler+0x90>
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d448:	f043 0201 	orr.w	r2, r3, #1
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	f003 0304 	and.w	r3, r3, #4
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <HAL_UART_IRQHandler+0xb0>
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f003 0301 	and.w	r3, r3, #1
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d468:	f043 0202 	orr.w	r2, r3, #2
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <HAL_UART_IRQHandler+0xd0>
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	2b00      	cmp	r3, #0
 800d482:	d005      	beq.n	800d490 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d488:	f043 0204 	orr.w	r2, r3, #4
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00a      	beq.n	800d4b0 <HAL_UART_IRQHandler+0xf0>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d005      	beq.n	800d4b0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a8:	f043 0208 	orr.w	r2, r3, #8
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d078      	beq.n	800d5aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	f003 0320 	and.w	r3, r3, #32
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d007      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x112>
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	f003 0320 	and.w	r3, r3, #32
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f98f 	bl	800d7f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4dc:	2b40      	cmp	r3, #64	; 0x40
 800d4de:	bf0c      	ite	eq
 800d4e0:	2301      	moveq	r3, #1
 800d4e2:	2300      	movne	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d102      	bne.n	800d4fa <HAL_UART_IRQHandler+0x13a>
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d031      	beq.n	800d55e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f8d8 	bl	800d6b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50a:	2b40      	cmp	r3, #64	; 0x40
 800d50c:	d123      	bne.n	800d556 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	695a      	ldr	r2, [r3, #20]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d51c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d522:	2b00      	cmp	r3, #0
 800d524:	d013      	beq.n	800d54e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	4a22      	ldr	r2, [pc, #136]	; (800d5b4 <HAL_UART_IRQHandler+0x1f4>)
 800d52c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d532:	4618      	mov	r0, r3
 800d534:	f7f9 fd32 	bl	8006f9c <HAL_DMA_Abort_IT>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d016      	beq.n	800d56c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d548:	4610      	mov	r0, r2
 800d54a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d54c:	e00e      	b.n	800d56c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f83c 	bl	800d5cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d554:	e00a      	b.n	800d56c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f838 	bl	800d5cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d55c:	e006      	b.n	800d56c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f834 	bl	800d5cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d56a:	e01e      	b.n	800d5aa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d56c:	bf00      	nop
    return;
 800d56e:	e01c      	b.n	800d5aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d576:	2b00      	cmp	r3, #0
 800d578:	d008      	beq.n	800d58c <HAL_UART_IRQHandler+0x1cc>
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d580:	2b00      	cmp	r3, #0
 800d582:	d003      	beq.n	800d58c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f8c5 	bl	800d714 <UART_Transmit_IT>
    return;
 800d58a:	e00f      	b.n	800d5ac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <HAL_UART_IRQHandler+0x1ec>
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d005      	beq.n	800d5ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f90d 	bl	800d7c0 <UART_EndTransmit_IT>
    return;
 800d5a6:	bf00      	nop
 800d5a8:	e000      	b.n	800d5ac <HAL_UART_IRQHandler+0x1ec>
    return;
 800d5aa:	bf00      	nop
  }
}
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	0800d6ed 	.word	0x0800d6ed

0800d5b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d600:	b2db      	uxtb	r3, r3
 800d602:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	b2da      	uxtb	r2, r3
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	4313      	orrs	r3, r2
 800d60e:	b2db      	uxtb	r3, r3
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	603b      	str	r3, [r7, #0]
 800d628:	4613      	mov	r3, r2
 800d62a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d62c:	e02c      	b.n	800d688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d634:	d028      	beq.n	800d688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d007      	beq.n	800d64c <UART_WaitOnFlagUntilTimeout+0x30>
 800d63c:	f7f9 fa60 	bl	8006b00 <HAL_GetTick>
 800d640:	4602      	mov	r2, r0
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	69ba      	ldr	r2, [r7, #24]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d21d      	bcs.n	800d688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d65a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	695a      	ldr	r2, [r3, #20]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 0201 	bic.w	r2, r2, #1
 800d66a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2220      	movs	r2, #32
 800d670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2220      	movs	r2, #32
 800d678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800d684:	2303      	movs	r3, #3
 800d686:	e00f      	b.n	800d6a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	4013      	ands	r3, r2
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	429a      	cmp	r2, r3
 800d696:	bf0c      	ite	eq
 800d698:	2301      	moveq	r3, #1
 800d69a:	2300      	movne	r3, #0
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	461a      	mov	r2, r3
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d0c3      	beq.n	800d62e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d6c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695a      	ldr	r2, [r3, #20]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f022 0201 	bic.w	r2, r2, #1
 800d6d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2220      	movs	r2, #32
 800d6dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7ff ff60 	bl	800d5cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b21      	cmp	r3, #33	; 0x21
 800d726:	d144      	bne.n	800d7b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d730:	d11a      	bne.n	800d768 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d746:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	691b      	ldr	r3, [r3, #16]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d105      	bne.n	800d75c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	1c9a      	adds	r2, r3, #2
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	621a      	str	r2, [r3, #32]
 800d75a:	e00e      	b.n	800d77a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a1b      	ldr	r3, [r3, #32]
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	621a      	str	r2, [r3, #32]
 800d766:	e008      	b.n	800d77a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a1b      	ldr	r3, [r3, #32]
 800d76c:	1c59      	adds	r1, r3, #1
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	6211      	str	r1, [r2, #32]
 800d772:	781a      	ldrb	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d77e:	b29b      	uxth	r3, r3
 800d780:	3b01      	subs	r3, #1
 800d782:	b29b      	uxth	r3, r3
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	4619      	mov	r1, r3
 800d788:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10f      	bne.n	800d7ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d79c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d7ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e000      	b.n	800d7b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d7b2:	2302      	movs	r3, #2
  }
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68da      	ldr	r2, [r3, #12]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2220      	movs	r2, #32
 800d7dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7ff fee9 	bl	800d5b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b22      	cmp	r3, #34	; 0x22
 800d802:	d171      	bne.n	800d8e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d80c:	d123      	bne.n	800d856 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d812:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10e      	bne.n	800d83a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	b29b      	uxth	r3, r3
 800d824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d828:	b29a      	uxth	r2, r3
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d832:	1c9a      	adds	r2, r3, #2
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	629a      	str	r2, [r3, #40]	; 0x28
 800d838:	e029      	b.n	800d88e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	b29b      	uxth	r3, r3
 800d842:	b2db      	uxtb	r3, r3
 800d844:	b29a      	uxth	r2, r3
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	629a      	str	r2, [r3, #40]	; 0x28
 800d854:	e01b      	b.n	800d88e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10a      	bne.n	800d874 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6858      	ldr	r0, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d868:	1c59      	adds	r1, r3, #1
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6291      	str	r1, [r2, #40]	; 0x28
 800d86e:	b2c2      	uxtb	r2, r0
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	e00c      	b.n	800d88e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d880:	1c58      	adds	r0, r3, #1
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	6288      	str	r0, [r1, #40]	; 0x28
 800d886:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d88a:	b2d2      	uxtb	r2, r2
 800d88c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d892:	b29b      	uxth	r3, r3
 800d894:	3b01      	subs	r3, #1
 800d896:	b29b      	uxth	r3, r3
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	4619      	mov	r1, r3
 800d89c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d120      	bne.n	800d8e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68da      	ldr	r2, [r3, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f022 0220 	bic.w	r2, r2, #32
 800d8b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68da      	ldr	r2, [r3, #12]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d8c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	695a      	ldr	r2, [r3, #20]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f022 0201 	bic.w	r2, r2, #1
 800d8d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f007 fc7e 	bl	80151dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e002      	b.n	800d8ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e000      	b.n	800d8ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d8e8:	2302      	movs	r3, #2
  }
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8f4:	b5b0      	push	{r4, r5, r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68da      	ldr	r2, [r3, #12]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	689a      	ldr	r2, [r3, #8]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	431a      	orrs	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	431a      	orrs	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d934:	f023 030c 	bic.w	r3, r3, #12
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	6812      	ldr	r2, [r2, #0]
 800d93c:	68f9      	ldr	r1, [r7, #12]
 800d93e:	430b      	orrs	r3, r1
 800d940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	699a      	ldr	r2, [r3, #24]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	430a      	orrs	r2, r1
 800d956:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d960:	f040 80e4 	bne.w	800db2c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4aab      	ldr	r2, [pc, #684]	; (800dc18 <UART_SetConfig+0x324>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d004      	beq.n	800d978 <UART_SetConfig+0x84>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4aaa      	ldr	r2, [pc, #680]	; (800dc1c <UART_SetConfig+0x328>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d16c      	bne.n	800da52 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d978:	f7fc fc80 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800d97c:	4602      	mov	r2, r0
 800d97e:	4613      	mov	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	009a      	lsls	r2, r3, #2
 800d986:	441a      	add	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d992:	4aa3      	ldr	r2, [pc, #652]	; (800dc20 <UART_SetConfig+0x32c>)
 800d994:	fba2 2303 	umull	r2, r3, r2, r3
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	011c      	lsls	r4, r3, #4
 800d99c:	f7fc fc6e 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	4413      	add	r3, r2
 800d9a8:	009a      	lsls	r2, r3, #2
 800d9aa:	441a      	add	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	fbb2 f5f3 	udiv	r5, r2, r3
 800d9b6:	f7fc fc61 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	4613      	mov	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	009a      	lsls	r2, r3, #2
 800d9c4:	441a      	add	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9d0:	4a93      	ldr	r2, [pc, #588]	; (800dc20 <UART_SetConfig+0x32c>)
 800d9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d6:	095b      	lsrs	r3, r3, #5
 800d9d8:	2264      	movs	r2, #100	; 0x64
 800d9da:	fb02 f303 	mul.w	r3, r2, r3
 800d9de:	1aeb      	subs	r3, r5, r3
 800d9e0:	00db      	lsls	r3, r3, #3
 800d9e2:	3332      	adds	r3, #50	; 0x32
 800d9e4:	4a8e      	ldr	r2, [pc, #568]	; (800dc20 <UART_SetConfig+0x32c>)
 800d9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ea:	095b      	lsrs	r3, r3, #5
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9f2:	441c      	add	r4, r3
 800d9f4:	f7fc fc42 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	009a      	lsls	r2, r3, #2
 800da02:	441a      	add	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	fbb2 f5f3 	udiv	r5, r2, r3
 800da0e:	f7fc fc35 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800da12:	4602      	mov	r2, r0
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	009a      	lsls	r2, r3, #2
 800da1c:	441a      	add	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	005b      	lsls	r3, r3, #1
 800da24:	fbb2 f3f3 	udiv	r3, r2, r3
 800da28:	4a7d      	ldr	r2, [pc, #500]	; (800dc20 <UART_SetConfig+0x32c>)
 800da2a:	fba2 2303 	umull	r2, r3, r2, r3
 800da2e:	095b      	lsrs	r3, r3, #5
 800da30:	2264      	movs	r2, #100	; 0x64
 800da32:	fb02 f303 	mul.w	r3, r2, r3
 800da36:	1aeb      	subs	r3, r5, r3
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	3332      	adds	r3, #50	; 0x32
 800da3c:	4a78      	ldr	r2, [pc, #480]	; (800dc20 <UART_SetConfig+0x32c>)
 800da3e:	fba2 2303 	umull	r2, r3, r2, r3
 800da42:	095b      	lsrs	r3, r3, #5
 800da44:	f003 0207 	and.w	r2, r3, #7
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4422      	add	r2, r4
 800da4e:	609a      	str	r2, [r3, #8]
 800da50:	e154      	b.n	800dcfc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800da52:	f7fc fbff 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800da56:	4602      	mov	r2, r0
 800da58:	4613      	mov	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4413      	add	r3, r2
 800da5e:	009a      	lsls	r2, r3, #2
 800da60:	441a      	add	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	005b      	lsls	r3, r3, #1
 800da68:	fbb2 f3f3 	udiv	r3, r2, r3
 800da6c:	4a6c      	ldr	r2, [pc, #432]	; (800dc20 <UART_SetConfig+0x32c>)
 800da6e:	fba2 2303 	umull	r2, r3, r2, r3
 800da72:	095b      	lsrs	r3, r3, #5
 800da74:	011c      	lsls	r4, r3, #4
 800da76:	f7fc fbed 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800da7a:	4602      	mov	r2, r0
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009a      	lsls	r2, r3, #2
 800da84:	441a      	add	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	fbb2 f5f3 	udiv	r5, r2, r3
 800da90:	f7fc fbe0 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800da94:	4602      	mov	r2, r0
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009a      	lsls	r2, r3, #2
 800da9e:	441a      	add	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800daaa:	4a5d      	ldr	r2, [pc, #372]	; (800dc20 <UART_SetConfig+0x32c>)
 800daac:	fba2 2303 	umull	r2, r3, r2, r3
 800dab0:	095b      	lsrs	r3, r3, #5
 800dab2:	2264      	movs	r2, #100	; 0x64
 800dab4:	fb02 f303 	mul.w	r3, r2, r3
 800dab8:	1aeb      	subs	r3, r5, r3
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	3332      	adds	r3, #50	; 0x32
 800dabe:	4a58      	ldr	r2, [pc, #352]	; (800dc20 <UART_SetConfig+0x32c>)
 800dac0:	fba2 2303 	umull	r2, r3, r2, r3
 800dac4:	095b      	lsrs	r3, r3, #5
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dacc:	441c      	add	r4, r3
 800dace:	f7fc fbc1 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dad2:	4602      	mov	r2, r0
 800dad4:	4613      	mov	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	009a      	lsls	r2, r3, #2
 800dadc:	441a      	add	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	fbb2 f5f3 	udiv	r5, r2, r3
 800dae8:	f7fc fbb4 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800daec:	4602      	mov	r2, r0
 800daee:	4613      	mov	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	009a      	lsls	r2, r3, #2
 800daf6:	441a      	add	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800db02:	4a47      	ldr	r2, [pc, #284]	; (800dc20 <UART_SetConfig+0x32c>)
 800db04:	fba2 2303 	umull	r2, r3, r2, r3
 800db08:	095b      	lsrs	r3, r3, #5
 800db0a:	2264      	movs	r2, #100	; 0x64
 800db0c:	fb02 f303 	mul.w	r3, r2, r3
 800db10:	1aeb      	subs	r3, r5, r3
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	3332      	adds	r3, #50	; 0x32
 800db16:	4a42      	ldr	r2, [pc, #264]	; (800dc20 <UART_SetConfig+0x32c>)
 800db18:	fba2 2303 	umull	r2, r3, r2, r3
 800db1c:	095b      	lsrs	r3, r3, #5
 800db1e:	f003 0207 	and.w	r2, r3, #7
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4422      	add	r2, r4
 800db28:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800db2a:	e0e7      	b.n	800dcfc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a39      	ldr	r2, [pc, #228]	; (800dc18 <UART_SetConfig+0x324>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d004      	beq.n	800db40 <UART_SetConfig+0x24c>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a38      	ldr	r2, [pc, #224]	; (800dc1c <UART_SetConfig+0x328>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d171      	bne.n	800dc24 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800db40:	f7fc fb9c 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800db44:	4602      	mov	r2, r0
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	009a      	lsls	r2, r3, #2
 800db4e:	441a      	add	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	fbb2 f3f3 	udiv	r3, r2, r3
 800db5a:	4a31      	ldr	r2, [pc, #196]	; (800dc20 <UART_SetConfig+0x32c>)
 800db5c:	fba2 2303 	umull	r2, r3, r2, r3
 800db60:	095b      	lsrs	r3, r3, #5
 800db62:	011c      	lsls	r4, r3, #4
 800db64:	f7fc fb8a 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800db68:	4602      	mov	r2, r0
 800db6a:	4613      	mov	r3, r2
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4413      	add	r3, r2
 800db70:	009a      	lsls	r2, r3, #2
 800db72:	441a      	add	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	fbb2 f5f3 	udiv	r5, r2, r3
 800db7e:	f7fc fb7d 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800db82:	4602      	mov	r2, r0
 800db84:	4613      	mov	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	4413      	add	r3, r2
 800db8a:	009a      	lsls	r2, r3, #2
 800db8c:	441a      	add	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	fbb2 f3f3 	udiv	r3, r2, r3
 800db98:	4a21      	ldr	r2, [pc, #132]	; (800dc20 <UART_SetConfig+0x32c>)
 800db9a:	fba2 2303 	umull	r2, r3, r2, r3
 800db9e:	095b      	lsrs	r3, r3, #5
 800dba0:	2264      	movs	r2, #100	; 0x64
 800dba2:	fb02 f303 	mul.w	r3, r2, r3
 800dba6:	1aeb      	subs	r3, r5, r3
 800dba8:	011b      	lsls	r3, r3, #4
 800dbaa:	3332      	adds	r3, #50	; 0x32
 800dbac:	4a1c      	ldr	r2, [pc, #112]	; (800dc20 <UART_SetConfig+0x32c>)
 800dbae:	fba2 2303 	umull	r2, r3, r2, r3
 800dbb2:	095b      	lsrs	r3, r3, #5
 800dbb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbb8:	441c      	add	r4, r3
 800dbba:	f7fc fb5f 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	4413      	add	r3, r2
 800dbc6:	009a      	lsls	r2, r3, #2
 800dbc8:	441a      	add	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	fbb2 f5f3 	udiv	r5, r2, r3
 800dbd4:	f7fc fb52 	bl	800a27c <HAL_RCC_GetPCLK2Freq>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	4613      	mov	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	009a      	lsls	r2, r3, #2
 800dbe2:	441a      	add	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbee:	4a0c      	ldr	r2, [pc, #48]	; (800dc20 <UART_SetConfig+0x32c>)
 800dbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf4:	095b      	lsrs	r3, r3, #5
 800dbf6:	2264      	movs	r2, #100	; 0x64
 800dbf8:	fb02 f303 	mul.w	r3, r2, r3
 800dbfc:	1aeb      	subs	r3, r5, r3
 800dbfe:	011b      	lsls	r3, r3, #4
 800dc00:	3332      	adds	r3, #50	; 0x32
 800dc02:	4a07      	ldr	r2, [pc, #28]	; (800dc20 <UART_SetConfig+0x32c>)
 800dc04:	fba2 2303 	umull	r2, r3, r2, r3
 800dc08:	095b      	lsrs	r3, r3, #5
 800dc0a:	f003 020f 	and.w	r2, r3, #15
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4422      	add	r2, r4
 800dc14:	609a      	str	r2, [r3, #8]
 800dc16:	e071      	b.n	800dcfc <UART_SetConfig+0x408>
 800dc18:	40011000 	.word	0x40011000
 800dc1c:	40011400 	.word	0x40011400
 800dc20:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dc24:	f7fc fb16 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	009a      	lsls	r2, r3, #2
 800dc32:	441a      	add	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc3e:	4a31      	ldr	r2, [pc, #196]	; (800dd04 <UART_SetConfig+0x410>)
 800dc40:	fba2 2303 	umull	r2, r3, r2, r3
 800dc44:	095b      	lsrs	r3, r3, #5
 800dc46:	011c      	lsls	r4, r3, #4
 800dc48:	f7fc fb04 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009a      	lsls	r2, r3, #2
 800dc56:	441a      	add	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc62:	f7fc faf7 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dc66:	4602      	mov	r2, r0
 800dc68:	4613      	mov	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	4413      	add	r3, r2
 800dc6e:	009a      	lsls	r2, r3, #2
 800dc70:	441a      	add	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc7c:	4a21      	ldr	r2, [pc, #132]	; (800dd04 <UART_SetConfig+0x410>)
 800dc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc82:	095b      	lsrs	r3, r3, #5
 800dc84:	2264      	movs	r2, #100	; 0x64
 800dc86:	fb02 f303 	mul.w	r3, r2, r3
 800dc8a:	1aeb      	subs	r3, r5, r3
 800dc8c:	011b      	lsls	r3, r3, #4
 800dc8e:	3332      	adds	r3, #50	; 0x32
 800dc90:	4a1c      	ldr	r2, [pc, #112]	; (800dd04 <UART_SetConfig+0x410>)
 800dc92:	fba2 2303 	umull	r2, r3, r2, r3
 800dc96:	095b      	lsrs	r3, r3, #5
 800dc98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc9c:	441c      	add	r4, r3
 800dc9e:	f7fc fad9 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dca2:	4602      	mov	r2, r0
 800dca4:	4613      	mov	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	009a      	lsls	r2, r3, #2
 800dcac:	441a      	add	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	fbb2 f5f3 	udiv	r5, r2, r3
 800dcb8:	f7fc facc 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	009a      	lsls	r2, r3, #2
 800dcc6:	441a      	add	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcd2:	4a0c      	ldr	r2, [pc, #48]	; (800dd04 <UART_SetConfig+0x410>)
 800dcd4:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd8:	095b      	lsrs	r3, r3, #5
 800dcda:	2264      	movs	r2, #100	; 0x64
 800dcdc:	fb02 f303 	mul.w	r3, r2, r3
 800dce0:	1aeb      	subs	r3, r5, r3
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	3332      	adds	r3, #50	; 0x32
 800dce6:	4a07      	ldr	r2, [pc, #28]	; (800dd04 <UART_SetConfig+0x410>)
 800dce8:	fba2 2303 	umull	r2, r3, r2, r3
 800dcec:	095b      	lsrs	r3, r3, #5
 800dcee:	f003 020f 	and.w	r2, r3, #15
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4422      	add	r2, r4
 800dcf8:	609a      	str	r2, [r3, #8]
}
 800dcfa:	e7ff      	b.n	800dcfc <UART_SetConfig+0x408>
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bdb0      	pop	{r4, r5, r7, pc}
 800dd04:	51eb851f 	.word	0x51eb851f

0800dd08 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dd08:	b084      	sub	sp, #16
 800dd0a:	b480      	push	{r7}
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	f107 001c 	add.w	r0, r7, #28
 800dd16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dd1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dd20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dd22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dd26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dd2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dd2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dd32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dd42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	b004      	add	sp, #16
 800dd5c:	4770      	bx	lr

0800dd5e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dd5e:	b480      	push	{r7}
 800dd60:	b083      	sub	sp, #12
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800dd9a:	b480      	push	{r7}
 800dd9c:	b083      	sub	sp, #12
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2203      	movs	r2, #3
 800dda6:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b083      	sub	sp, #12
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0303 	and.w	r3, r3, #3
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b085      	sub	sp, #20
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800dddc:	2300      	movs	r3, #0
 800ddde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddf0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ddf6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ddfc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4313      	orrs	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800de0c:	f023 030f 	bic.w	r3, r3, #15
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800de26:	b480      	push	{r7}
 800de28:	b083      	sub	sp, #12
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	b2db      	uxtb	r3, r3
}
 800de34:	4618      	mov	r0, r3
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	3314      	adds	r3, #20
 800de52:	461a      	mov	r2, r3
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	4413      	add	r3, r2
 800de58:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
}  
 800de5e:	4618      	mov	r0, r3
 800de60:	3714      	adds	r7, #20
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b085      	sub	sp, #20
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800de74:	2300      	movs	r3, #0
 800de76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	685a      	ldr	r2, [r3, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de90:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800de96:	431a      	orrs	r2, r3
                       Data->DPSM);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800de9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	431a      	orrs	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800deb4:	2300      	movs	r3, #0

}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr

0800dec2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b088      	sub	sp, #32
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800decc:	2300      	movs	r3, #0
 800dece:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ded4:	2310      	movs	r3, #16
 800ded6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ded8:	2340      	movs	r3, #64	; 0x40
 800deda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dedc:	2300      	movs	r3, #0
 800dede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dee4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dee6:	f107 0308 	add.w	r3, r7, #8
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff ff70 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800def2:	f241 3288 	movw	r2, #5000	; 0x1388
 800def6:	2110      	movs	r1, #16
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fa63 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800defe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df00:	69fb      	ldr	r3, [r7, #28]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3720      	adds	r7, #32
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b088      	sub	sp, #32
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df14:	2300      	movs	r3, #0
 800df16:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df1c:	2311      	movs	r3, #17
 800df1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df24:	2300      	movs	r3, #0
 800df26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df2c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff ff4c 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800df3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df3e:	2111      	movs	r1, #17
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fa3f 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800df46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df48:	69fb      	ldr	r3, [r7, #28]
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3720      	adds	r7, #32
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b088      	sub	sp, #32
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800df5c:	2300      	movs	r3, #0
 800df5e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df64:	2312      	movs	r3, #18
 800df66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df68:	2340      	movs	r3, #64	; 0x40
 800df6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df6c:	2300      	movs	r3, #0
 800df6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df74:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df76:	f107 0308 	add.w	r3, r7, #8
 800df7a:	4619      	mov	r1, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f7ff ff28 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800df82:	f241 3288 	movw	r2, #5000	; 0x1388
 800df86:	2112      	movs	r1, #18
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fa1b 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800df8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df90:	69fb      	ldr	r3, [r7, #28]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3720      	adds	r7, #32
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b088      	sub	sp, #32
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
 800dfa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dfac:	2318      	movs	r3, #24
 800dfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfb0:	2340      	movs	r3, #64	; 0x40
 800dfb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfbc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfbe:	f107 0308 	add.w	r3, r7, #8
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff ff04 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfce:	2118      	movs	r1, #24
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f9f7 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800dfd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b088      	sub	sp, #32
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dff4:	2319      	movs	r3, #25
 800dff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dff8:	2340      	movs	r3, #64	; 0x40
 800dffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dffc:	2300      	movs	r3, #0
 800dffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e004:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e006:	f107 0308 	add.w	r3, r7, #8
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fee0 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e012:	f241 3288 	movw	r2, #5000	; 0x1388
 800e016:	2119      	movs	r1, #25
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f9d3 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e020:	69fb      	ldr	r3, [r7, #28]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
	...

0800e02c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b088      	sub	sp, #32
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e034:	2300      	movs	r3, #0
 800e036:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e038:	2300      	movs	r3, #0
 800e03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e03c:	230c      	movs	r3, #12
 800e03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e040:	2340      	movs	r3, #64	; 0x40
 800e042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e044:	2300      	movs	r3, #0
 800e046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e04e:	f107 0308 	add.w	r3, r7, #8
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff febc 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800e05a:	4a05      	ldr	r2, [pc, #20]	; (800e070 <SDMMC_CmdStopTransfer+0x44>)
 800e05c:	210c      	movs	r1, #12
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f9b0 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e066:	69fb      	ldr	r3, [r7, #28]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	05f5e100 	.word	0x05f5e100

0800e074 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08a      	sub	sp, #40	; 0x28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e080:	2300      	movs	r3, #0
 800e082:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e088:	2307      	movs	r3, #7
 800e08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e08c:	2340      	movs	r3, #64	; 0x40
 800e08e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e090:	2300      	movs	r3, #0
 800e092:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e098:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e09a:	f107 0310 	add.w	r3, r7, #16
 800e09e:	4619      	mov	r1, r3
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f7ff fe96 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0aa:	2107      	movs	r1, #7
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f000 f989 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e0b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3728      	adds	r7, #40	; 0x28
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b088      	sub	sp, #32
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0de:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff fe73 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 f93f 	bl	800e370 <SDMMC_GetCmdError>
 800e0f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0f4:	69fb      	ldr	r3, [r7, #28]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3720      	adds	r7, #32
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b088      	sub	sp, #32
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e106:	2300      	movs	r3, #0
 800e108:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e10a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e110:	2308      	movs	r3, #8
 800e112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e114:	2340      	movs	r3, #64	; 0x40
 800e116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e118:	2300      	movs	r3, #0
 800e11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e120:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e122:	f107 0308 	add.w	r3, r7, #8
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fe52 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fb10 	bl	800e754 <SDMMC_GetCmdResp7>
 800e134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e136:	69fb      	ldr	r3, [r7, #28]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3720      	adds	r7, #32
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b088      	sub	sp, #32
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e14a:	2300      	movs	r3, #0
 800e14c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e152:	2337      	movs	r3, #55	; 0x37
 800e154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e156:	2340      	movs	r3, #64	; 0x40
 800e158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e15a:	2300      	movs	r3, #0
 800e15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e162:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e164:	f107 0308 	add.w	r3, r7, #8
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7ff fe31 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e170:	f241 3288 	movw	r2, #5000	; 0x1388
 800e174:	2137      	movs	r1, #55	; 0x37
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f924 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e17e:	69fb      	ldr	r3, [r7, #28]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3720      	adds	r7, #32
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e192:	2300      	movs	r3, #0
 800e194:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e19c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e1a2:	2329      	movs	r3, #41	; 0x29
 800e1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1a6:	2340      	movs	r3, #64	; 0x40
 800e1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1b2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1b4:	f107 0308 	add.w	r3, r7, #8
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fe09 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fa25 	bl	800e610 <SDMMC_GetCmdResp3>
 800e1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3720      	adds	r7, #32
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b088      	sub	sp, #32
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
 800e1da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e1e4:	2306      	movs	r3, #6
 800e1e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1e8:	2340      	movs	r3, #64	; 0x40
 800e1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1f6:	f107 0308 	add.w	r3, r7, #8
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff fde8 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e202:	f241 3288 	movw	r2, #5000	; 0x1388
 800e206:	2106      	movs	r1, #6
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 f8db 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e210:	69fb      	ldr	r3, [r7, #28]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3720      	adds	r7, #32
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b088      	sub	sp, #32
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e222:	2300      	movs	r3, #0
 800e224:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e226:	2300      	movs	r3, #0
 800e228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e22a:	2333      	movs	r3, #51	; 0x33
 800e22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e22e:	2340      	movs	r3, #64	; 0x40
 800e230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e23a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e23c:	f107 0308 	add.w	r3, r7, #8
 800e240:	4619      	mov	r1, r3
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fdc5 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e248:	f241 3288 	movw	r2, #5000	; 0x1388
 800e24c:	2133      	movs	r1, #51	; 0x33
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 f8b8 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e256:	69fb      	ldr	r3, [r7, #28]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3720      	adds	r7, #32
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e268:	2300      	movs	r3, #0
 800e26a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e270:	2302      	movs	r3, #2
 800e272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e274:	23c0      	movs	r3, #192	; 0xc0
 800e276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e280:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e282:	f107 0308 	add.w	r3, r7, #8
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7ff fda2 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f97e 	bl	800e590 <SDMMC_GetCmdResp2>
 800e294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3720      	adds	r7, #32
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b088      	sub	sp, #32
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e2b2:	2309      	movs	r3, #9
 800e2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e2b6:	23c0      	movs	r3, #192	; 0xc0
 800e2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2c2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2c4:	f107 0308 	add.w	r3, r7, #8
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff fd81 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f95d 	bl	800e590 <SDMMC_GetCmdResp2>
 800e2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d8:	69fb      	ldr	r3, [r7, #28]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b088      	sub	sp, #32
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e304:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e306:	f107 0308 	add.w	r3, r7, #8
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7ff fd60 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	2103      	movs	r1, #3
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f9ae 	bl	800e678 <SDMMC_GetCmdResp6>
 800e31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e31e:	69fb      	ldr	r3, [r7, #28]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3720      	adds	r7, #32
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b088      	sub	sp, #32
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800e332:	2300      	movs	r3, #0
 800e334:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e33a:	230d      	movs	r3, #13
 800e33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e33e:	2340      	movs	r3, #64	; 0x40
 800e340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e342:	2300      	movs	r3, #0
 800e344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e34a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e34c:	f107 0308 	add.w	r3, r7, #8
 800e350:	4619      	mov	r1, r3
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f7ff fd3d 	bl	800ddd2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e358:	f241 3288 	movw	r2, #5000	; 0x1388
 800e35c:	210d      	movs	r1, #13
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f830 	bl	800e3c4 <SDMMC_GetCmdResp1>
 800e364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e366:	69fb      	ldr	r3, [r7, #28]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3720      	adds	r7, #32
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e370:	b490      	push	{r4, r7}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e378:	4b10      	ldr	r3, [pc, #64]	; (800e3bc <SDMMC_GetCmdError+0x4c>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a10      	ldr	r2, [pc, #64]	; (800e3c0 <SDMMC_GetCmdError+0x50>)
 800e37e:	fba2 2303 	umull	r2, r3, r2, r3
 800e382:	0a5b      	lsrs	r3, r3, #9
 800e384:	f241 3288 	movw	r2, #5000	; 0x1388
 800e388:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e38c:	4623      	mov	r3, r4
 800e38e:	1e5c      	subs	r4, r3, #1
 800e390:	2b00      	cmp	r3, #0
 800e392:	d102      	bne.n	800e39a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e398:	e00a      	b.n	800e3b0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d0f2      	beq.n	800e38c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e3ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bc90      	pop	{r4, r7}
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	20000170 	.word	0x20000170
 800e3c0:	10624dd3 	.word	0x10624dd3

0800e3c4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3d2:	4b6c      	ldr	r3, [pc, #432]	; (800e584 <SDMMC_GetCmdResp1+0x1c0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a6c      	ldr	r2, [pc, #432]	; (800e588 <SDMMC_GetCmdResp1+0x1c4>)
 800e3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3dc:	0a5b      	lsrs	r3, r3, #9
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e3e4:	4623      	mov	r3, r4
 800e3e6:	1e5c      	subs	r4, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d102      	bne.n	800e3f2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3f0:	e0c3      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d0f2      	beq.n	800e3e4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e402:	f003 0304 	and.w	r3, r3, #4
 800e406:	2b00      	cmp	r3, #0
 800e408:	d004      	beq.n	800e414 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2204      	movs	r2, #4
 800e40e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e410:	2304      	movs	r3, #4
 800e412:	e0b2      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d004      	beq.n	800e42a <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2201      	movs	r2, #1
 800e424:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e426:	2301      	movs	r3, #1
 800e428:	e0a7      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7ff fcfb 	bl	800de26 <SDIO_GetCommandResponse>
 800e430:	4603      	mov	r3, r0
 800e432:	461a      	mov	r2, r3
 800e434:	7afb      	ldrb	r3, [r7, #11]
 800e436:	4293      	cmp	r3, r2
 800e438:	d001      	beq.n	800e43e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e09d      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e444:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e446:	2100      	movs	r1, #0
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f7ff fcf9 	bl	800de40 <SDIO_GetResponse>
 800e44e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	4b4e      	ldr	r3, [pc, #312]	; (800e58c <SDMMC_GetCmdResp1+0x1c8>)
 800e454:	4013      	ands	r3, r2
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	e08d      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2b00      	cmp	r3, #0
 800e462:	da02      	bge.n	800e46a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e468:	e087      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d001      	beq.n	800e478 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e474:	2340      	movs	r3, #64	; 0x40
 800e476:	e080      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e482:	2380      	movs	r3, #128	; 0x80
 800e484:	e079      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d002      	beq.n	800e496 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e490:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e494:	e071      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d002      	beq.n	800e4a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4a4:	e069      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e4b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4b4:	e061      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e4c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4c4:	e059      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4d4:	e051      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d002      	beq.n	800e4e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4e4:	e049      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e4f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e4f4:	e041      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d002      	beq.n	800e506 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800e500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e504:	e039      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d002      	beq.n	800e516 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e514:	e031      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e520:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e524:	e029      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d002      	beq.n	800e536 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e530:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e534:	e021      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e540:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e544:	e019      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e550:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e554:	e011      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e560:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e564:	e009      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	f003 0308 	and.w	r3, r3, #8
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e570:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e574:	e001      	b.n	800e57a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	371c      	adds	r7, #28
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd90      	pop	{r4, r7, pc}
 800e582:	bf00      	nop
 800e584:	20000170 	.word	0x20000170
 800e588:	10624dd3 	.word	0x10624dd3
 800e58c:	fdffe008 	.word	0xfdffe008

0800e590 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e590:	b490      	push	{r4, r7}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e598:	4b1b      	ldr	r3, [pc, #108]	; (800e608 <SDMMC_GetCmdResp2+0x78>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a1b      	ldr	r2, [pc, #108]	; (800e60c <SDMMC_GetCmdResp2+0x7c>)
 800e59e:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a2:	0a5b      	lsrs	r3, r3, #9
 800e5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e5ac:	4623      	mov	r3, r4
 800e5ae:	1e5c      	subs	r4, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e5b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5b8:	e020      	b.n	800e5fc <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d0f2      	beq.n	800e5ac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ca:	f003 0304 	and.w	r3, r3, #4
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2204      	movs	r2, #4
 800e5d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5d8:	2304      	movs	r3, #4
 800e5da:	e00f      	b.n	800e5fc <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	f003 0301 	and.w	r3, r3, #1
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e004      	b.n	800e5fc <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e5f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bc90      	pop	{r4, r7}
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	20000170 	.word	0x20000170
 800e60c:	10624dd3 	.word	0x10624dd3

0800e610 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e610:	b490      	push	{r4, r7}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e618:	4b15      	ldr	r3, [pc, #84]	; (800e670 <SDMMC_GetCmdResp3+0x60>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a15      	ldr	r2, [pc, #84]	; (800e674 <SDMMC_GetCmdResp3+0x64>)
 800e61e:	fba2 2303 	umull	r2, r3, r2, r3
 800e622:	0a5b      	lsrs	r3, r3, #9
 800e624:	f241 3288 	movw	r2, #5000	; 0x1388
 800e628:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e62c:	4623      	mov	r3, r4
 800e62e:	1e5c      	subs	r4, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	d102      	bne.n	800e63a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e638:	e015      	b.n	800e666 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0f2      	beq.n	800e62c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64a:	f003 0304 	and.w	r3, r3, #4
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d004      	beq.n	800e65c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2204      	movs	r2, #4
 800e656:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e658:	2304      	movs	r3, #4
 800e65a:	e004      	b.n	800e666 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e662:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3708      	adds	r7, #8
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bc90      	pop	{r4, r7}
 800e66e:	4770      	bx	lr
 800e670:	20000170 	.word	0x20000170
 800e674:	10624dd3 	.word	0x10624dd3

0800e678 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e678:	b590      	push	{r4, r7, lr}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	460b      	mov	r3, r1
 800e682:	607a      	str	r2, [r7, #4]
 800e684:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e686:	4b31      	ldr	r3, [pc, #196]	; (800e74c <SDMMC_GetCmdResp6+0xd4>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a31      	ldr	r2, [pc, #196]	; (800e750 <SDMMC_GetCmdResp6+0xd8>)
 800e68c:	fba2 2303 	umull	r2, r3, r2, r3
 800e690:	0a5b      	lsrs	r3, r3, #9
 800e692:	f241 3288 	movw	r2, #5000	; 0x1388
 800e696:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e69a:	4623      	mov	r3, r4
 800e69c:	1e5c      	subs	r4, r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6a6:	e04c      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0f2      	beq.n	800e69a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d004      	beq.n	800e6ca <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2204      	movs	r2, #4
 800e6c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c6:	2304      	movs	r3, #4
 800e6c8:	e03b      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ce:	f003 0301 	and.w	r3, r3, #1
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d004      	beq.n	800e6e0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e030      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7ff fba0 	bl	800de26 <SDIO_GetCommandResponse>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	7afb      	ldrb	r3, [r7, #11]
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d001      	beq.n	800e6f4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e026      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f7ff fb9e 	bl	800de40 <SDIO_GetResponse>
 800e704:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	0c1b      	lsrs	r3, r3, #16
 800e714:	b29a      	uxth	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	e011      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e72c:	e009      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e73c:	e001      	b.n	800e742 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e73e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20000170 	.word	0x20000170
 800e750:	10624dd3 	.word	0x10624dd3

0800e754 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e754:	b490      	push	{r4, r7}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e75c:	4b18      	ldr	r3, [pc, #96]	; (800e7c0 <SDMMC_GetCmdResp7+0x6c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a18      	ldr	r2, [pc, #96]	; (800e7c4 <SDMMC_GetCmdResp7+0x70>)
 800e762:	fba2 2303 	umull	r2, r3, r2, r3
 800e766:	0a5b      	lsrs	r3, r3, #9
 800e768:	f241 3288 	movw	r2, #5000	; 0x1388
 800e76c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e770:	4623      	mov	r3, r4
 800e772:	1e5c      	subs	r4, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e77c:	e01a      	b.n	800e7b4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e782:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0f2      	beq.n	800e770 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e78e:	f003 0304 	and.w	r3, r3, #4
 800e792:	2b00      	cmp	r3, #0
 800e794:	d004      	beq.n	800e7a0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2240      	movs	r2, #64	; 0x40
 800e79a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e79c:	2304      	movs	r3, #4
 800e79e:	e009      	b.n	800e7b4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2240      	movs	r2, #64	; 0x40
 800e7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e7b2:	2300      	movs	r3, #0
  
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bc90      	pop	{r4, r7}
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20000170 	.word	0x20000170
 800e7c4:	10624dd3 	.word	0x10624dd3

0800e7c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	f107 001c 	add.w	r0, r7, #28
 800e7d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d122      	bne.n	800e826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e7f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d105      	bne.n	800e81a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f001 fa7c 	bl	800fd18 <USB_CoreReset>
 800e820:	4603      	mov	r3, r0
 800e822:	73fb      	strb	r3, [r7, #15]
 800e824:	e01a      	b.n	800e85c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f001 fa70 	bl	800fd18 <USB_CoreReset>
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	639a      	str	r2, [r3, #56]	; 0x38
 800e84e:	e005      	b.n	800e85c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d10b      	bne.n	800e87a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f043 0206 	orr.w	r2, r3, #6
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f043 0220 	orr.w	r2, r3, #32
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e886:	b004      	add	sp, #16
 800e888:	4770      	bx	lr
	...

0800e88c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b087      	sub	sp, #28
 800e890:	af00      	add	r7, sp, #0
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	60b9      	str	r1, [r7, #8]
 800e896:	4613      	mov	r3, r2
 800e898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d165      	bne.n	800e96c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	4a41      	ldr	r2, [pc, #260]	; (800e9a8 <USB_SetTurnaroundTime+0x11c>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d906      	bls.n	800e8b6 <USB_SetTurnaroundTime+0x2a>
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	4a40      	ldr	r2, [pc, #256]	; (800e9ac <USB_SetTurnaroundTime+0x120>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d802      	bhi.n	800e8b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e8b0:	230f      	movs	r3, #15
 800e8b2:	617b      	str	r3, [r7, #20]
 800e8b4:	e062      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	4a3c      	ldr	r2, [pc, #240]	; (800e9ac <USB_SetTurnaroundTime+0x120>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d906      	bls.n	800e8cc <USB_SetTurnaroundTime+0x40>
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	4a3b      	ldr	r2, [pc, #236]	; (800e9b0 <USB_SetTurnaroundTime+0x124>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d802      	bhi.n	800e8cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e8c6:	230e      	movs	r3, #14
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e057      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	4a38      	ldr	r2, [pc, #224]	; (800e9b0 <USB_SetTurnaroundTime+0x124>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d906      	bls.n	800e8e2 <USB_SetTurnaroundTime+0x56>
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4a37      	ldr	r2, [pc, #220]	; (800e9b4 <USB_SetTurnaroundTime+0x128>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d802      	bhi.n	800e8e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e8dc:	230d      	movs	r3, #13
 800e8de:	617b      	str	r3, [r7, #20]
 800e8e0:	e04c      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	4a33      	ldr	r2, [pc, #204]	; (800e9b4 <USB_SetTurnaroundTime+0x128>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d906      	bls.n	800e8f8 <USB_SetTurnaroundTime+0x6c>
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	4a32      	ldr	r2, [pc, #200]	; (800e9b8 <USB_SetTurnaroundTime+0x12c>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d802      	bhi.n	800e8f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	617b      	str	r3, [r7, #20]
 800e8f6:	e041      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	4a2f      	ldr	r2, [pc, #188]	; (800e9b8 <USB_SetTurnaroundTime+0x12c>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d906      	bls.n	800e90e <USB_SetTurnaroundTime+0x82>
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	4a2e      	ldr	r2, [pc, #184]	; (800e9bc <USB_SetTurnaroundTime+0x130>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d802      	bhi.n	800e90e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e908:	230b      	movs	r3, #11
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	e036      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	4a2a      	ldr	r2, [pc, #168]	; (800e9bc <USB_SetTurnaroundTime+0x130>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d906      	bls.n	800e924 <USB_SetTurnaroundTime+0x98>
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	4a29      	ldr	r2, [pc, #164]	; (800e9c0 <USB_SetTurnaroundTime+0x134>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d802      	bhi.n	800e924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e91e:	230a      	movs	r3, #10
 800e920:	617b      	str	r3, [r7, #20]
 800e922:	e02b      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	4a26      	ldr	r2, [pc, #152]	; (800e9c0 <USB_SetTurnaroundTime+0x134>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d906      	bls.n	800e93a <USB_SetTurnaroundTime+0xae>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4a25      	ldr	r2, [pc, #148]	; (800e9c4 <USB_SetTurnaroundTime+0x138>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d802      	bhi.n	800e93a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e934:	2309      	movs	r3, #9
 800e936:	617b      	str	r3, [r7, #20]
 800e938:	e020      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	4a21      	ldr	r2, [pc, #132]	; (800e9c4 <USB_SetTurnaroundTime+0x138>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d906      	bls.n	800e950 <USB_SetTurnaroundTime+0xc4>
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	4a20      	ldr	r2, [pc, #128]	; (800e9c8 <USB_SetTurnaroundTime+0x13c>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d802      	bhi.n	800e950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e94a:	2308      	movs	r3, #8
 800e94c:	617b      	str	r3, [r7, #20]
 800e94e:	e015      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	4a1d      	ldr	r2, [pc, #116]	; (800e9c8 <USB_SetTurnaroundTime+0x13c>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d906      	bls.n	800e966 <USB_SetTurnaroundTime+0xda>
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4a1c      	ldr	r2, [pc, #112]	; (800e9cc <USB_SetTurnaroundTime+0x140>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d802      	bhi.n	800e966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e960:	2307      	movs	r3, #7
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	e00a      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e966:	2306      	movs	r3, #6
 800e968:	617b      	str	r3, [r7, #20]
 800e96a:	e007      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e96c:	79fb      	ldrb	r3, [r7, #7]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d102      	bne.n	800e978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e972:	2309      	movs	r3, #9
 800e974:	617b      	str	r3, [r7, #20]
 800e976:	e001      	b.n	800e97c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e978:	2309      	movs	r3, #9
 800e97a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	68da      	ldr	r2, [r3, #12]
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	029b      	lsls	r3, r3, #10
 800e990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e994:	431a      	orrs	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	371c      	adds	r7, #28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr
 800e9a8:	00d8acbf 	.word	0x00d8acbf
 800e9ac:	00e4e1bf 	.word	0x00e4e1bf
 800e9b0:	00f423ff 	.word	0x00f423ff
 800e9b4:	0106737f 	.word	0x0106737f
 800e9b8:	011a499f 	.word	0x011a499f
 800e9bc:	01312cff 	.word	0x01312cff
 800e9c0:	014ca43f 	.word	0x014ca43f
 800e9c4:	016e35ff 	.word	0x016e35ff
 800e9c8:	01a6ab1f 	.word	0x01a6ab1f
 800e9cc:	01e847ff 	.word	0x01e847ff

0800e9d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	f043 0201 	orr.w	r2, r3, #1
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f023 0201 	bic.w	r2, r3, #1
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea2c:	78fb      	ldrb	r3, [r7, #3]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d106      	bne.n	800ea40 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	60da      	str	r2, [r3, #12]
 800ea3e:	e00b      	b.n	800ea58 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea40:	78fb      	ldrb	r3, [r7, #3]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	60da      	str	r2, [r3, #12]
 800ea52:	e001      	b.n	800ea58 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e003      	b.n	800ea60 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ea58:	2032      	movs	r0, #50	; 0x32
 800ea5a:	f7f8 f85d 	bl	8006b18 <HAL_Delay>

  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea68:	b084      	sub	sp, #16
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b086      	sub	sp, #24
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ea76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ea82:	2300      	movs	r3, #0
 800ea84:	613b      	str	r3, [r7, #16]
 800ea86:	e009      	b.n	800ea9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3340      	adds	r3, #64	; 0x40
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	613b      	str	r3, [r7, #16]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	2b0e      	cmp	r3, #14
 800eaa0:	d9f2      	bls.n	800ea88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d112      	bne.n	800eace <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38
 800eacc:	e00b      	b.n	800eae6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eade:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eaec:	461a      	mov	r2, r3
 800eaee:	2300      	movs	r3, #0
 800eaf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf8:	4619      	mov	r1, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb00:	461a      	mov	r2, r3
 800eb02:	680b      	ldr	r3, [r1, #0]
 800eb04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d10c      	bne.n	800eb26 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d104      	bne.n	800eb1c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eb12:	2100      	movs	r1, #0
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f961 	bl	800eddc <USB_SetDevSpeed>
 800eb1a:	e008      	b.n	800eb2e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f95c 	bl	800eddc <USB_SetDevSpeed>
 800eb24:	e003      	b.n	800eb2e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eb26:	2103      	movs	r1, #3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f957 	bl	800eddc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eb2e:	2110      	movs	r1, #16
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 f90b 	bl	800ed4c <USB_FlushTxFifo>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 f929 	bl	800ed98 <USB_FlushRxFifo>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb56:	461a      	mov	r2, r3
 800eb58:	2300      	movs	r3, #0
 800eb5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb62:	461a      	mov	r2, r3
 800eb64:	2300      	movs	r3, #0
 800eb66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb6e:	461a      	mov	r2, r3
 800eb70:	2300      	movs	r3, #0
 800eb72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb74:	2300      	movs	r3, #0
 800eb76:	613b      	str	r3, [r7, #16]
 800eb78:	e043      	b.n	800ec02 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	015a      	lsls	r2, r3, #5
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	4413      	add	r3, r2
 800eb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb90:	d118      	bne.n	800ebc4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10a      	bne.n	800ebae <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eba4:	461a      	mov	r2, r3
 800eba6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ebaa:	6013      	str	r3, [r2, #0]
 800ebac:	e013      	b.n	800ebd6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebba:	461a      	mov	r2, r3
 800ebbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ebc0:	6013      	str	r3, [r2, #0]
 800ebc2:	e008      	b.n	800ebd6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	015a      	lsls	r2, r3, #5
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	4413      	add	r3, r2
 800ebcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	015a      	lsls	r2, r3, #5
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ebfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	613b      	str	r3, [r7, #16]
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d3b7      	bcc.n	800eb7a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	e043      	b.n	800ec98 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	015a      	lsls	r2, r3, #5
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	4413      	add	r3, r2
 800ec18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec26:	d118      	bne.n	800ec5a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10a      	bne.n	800ec44 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	015a      	lsls	r2, r3, #5
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	4413      	add	r3, r2
 800ec36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec40:	6013      	str	r3, [r2, #0]
 800ec42:	e013      	b.n	800ec6c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec50:	461a      	mov	r2, r3
 800ec52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	e008      	b.n	800ec6c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	015a      	lsls	r2, r3, #5
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	4413      	add	r3, r2
 800ec62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec66:	461a      	mov	r2, r3
 800ec68:	2300      	movs	r3, #0
 800ec6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	015a      	lsls	r2, r3, #5
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	4413      	add	r3, r2
 800ec74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec78:	461a      	mov	r2, r3
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	3301      	adds	r3, #1
 800ec96:	613b      	str	r3, [r7, #16]
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	693a      	ldr	r2, [r7, #16]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d3b7      	bcc.n	800ec10 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ecb2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d111      	bne.n	800ecde <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	4b20      	ldr	r3, [pc, #128]	; (800ed44 <USB_DevInit+0x2dc>)
 800ecc4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ecd8:	f043 0303 	orr.w	r3, r3, #3
 800ecdc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ecea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ecec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	699b      	ldr	r3, [r3, #24]
 800ecf6:	f043 0210 	orr.w	r2, r3, #16
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	699a      	ldr	r2, [r3, #24]
 800ed02:	4b11      	ldr	r3, [pc, #68]	; (800ed48 <USB_DevInit+0x2e0>)
 800ed04:	4313      	orrs	r3, r2
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d005      	beq.n	800ed1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	f043 0208 	orr.w	r2, r3, #8
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d107      	bne.n	800ed32 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed2a:	f043 0304 	orr.w	r3, r3, #4
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed3e:	b004      	add	sp, #16
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	00800100 	.word	0x00800100
 800ed48:	803c3800 	.word	0x803c3800

0800ed4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ed56:	2300      	movs	r3, #0
 800ed58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	019b      	lsls	r3, r3, #6
 800ed5e:	f043 0220 	orr.w	r2, r3, #32
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	4a09      	ldr	r2, [pc, #36]	; (800ed94 <USB_FlushTxFifo+0x48>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d901      	bls.n	800ed78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ed74:	2303      	movs	r3, #3
 800ed76:	e006      	b.n	800ed86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	691b      	ldr	r3, [r3, #16]
 800ed7c:	f003 0320 	and.w	r3, r3, #32
 800ed80:	2b20      	cmp	r3, #32
 800ed82:	d0f0      	beq.n	800ed66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	00030d40 	.word	0x00030d40

0800ed98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b085      	sub	sp, #20
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800eda0:	2300      	movs	r3, #0
 800eda2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2210      	movs	r2, #16
 800eda8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	3301      	adds	r3, #1
 800edae:	60fb      	str	r3, [r7, #12]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4a09      	ldr	r2, [pc, #36]	; (800edd8 <USB_FlushRxFifo+0x40>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d901      	bls.n	800edbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800edb8:	2303      	movs	r3, #3
 800edba:	e006      	b.n	800edca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	f003 0310 	and.w	r3, r3, #16
 800edc4:	2b10      	cmp	r3, #16
 800edc6:	d0f0      	beq.n	800edaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr
 800edd6:	bf00      	nop
 800edd8:	00030d40 	.word	0x00030d40

0800eddc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	460b      	mov	r3, r1
 800ede6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	78fb      	ldrb	r3, [r7, #3]
 800edf6:	68f9      	ldr	r1, [r7, #12]
 800edf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edfc:	4313      	orrs	r3, r2
 800edfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee00:	2300      	movs	r3, #0
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b087      	sub	sp, #28
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	f003 0306 	and.w	r3, r3, #6
 800ee26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	75fb      	strb	r3, [r7, #23]
 800ee32:	e00a      	b.n	800ee4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d002      	beq.n	800ee40 <USB_GetDevSpeed+0x32>
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b06      	cmp	r3, #6
 800ee3e:	d102      	bne.n	800ee46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ee40:	2302      	movs	r3, #2
 800ee42:	75fb      	strb	r3, [r7, #23]
 800ee44:	e001      	b.n	800ee4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ee46:	230f      	movs	r3, #15
 800ee48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	371c      	adds	r7, #28
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	785b      	ldrb	r3, [r3, #1]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d13a      	bne.n	800eeea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7a:	69da      	ldr	r2, [r3, #28]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 030f 	and.w	r3, r3, #15
 800ee84:	2101      	movs	r1, #1
 800ee86:	fa01 f303 	lsl.w	r3, r1, r3
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	68f9      	ldr	r1, [r7, #12]
 800ee8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee92:	4313      	orrs	r3, r2
 800ee94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	015a      	lsls	r2, r3, #5
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d155      	bne.n	800ef58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	78db      	ldrb	r3, [r3, #3]
 800eec6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eec8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	059b      	lsls	r3, r3, #22
 800eece:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eed0:	4313      	orrs	r3, r2
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	0151      	lsls	r1, r2, #5
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	440a      	add	r2, r1
 800eeda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	e036      	b.n	800ef58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eef0:	69da      	ldr	r2, [r3, #28]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	f003 030f 	and.w	r3, r3, #15
 800eefa:	2101      	movs	r1, #1
 800eefc:	fa01 f303 	lsl.w	r3, r1, r3
 800ef00:	041b      	lsls	r3, r3, #16
 800ef02:	68f9      	ldr	r1, [r7, #12]
 800ef04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	015a      	lsls	r2, r3, #5
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	4413      	add	r3, r2
 800ef14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d11a      	bne.n	800ef58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	78db      	ldrb	r3, [r3, #3]
 800ef3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ef3e:	430b      	orrs	r3, r1
 800ef40:	4313      	orrs	r3, r2
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	0151      	lsls	r1, r2, #5
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	440a      	add	r2, r1
 800ef4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
	...

0800ef68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	785b      	ldrb	r3, [r3, #1]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d135      	bne.n	800eff0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 030f 	and.w	r3, r3, #15
 800ef94:	2101      	movs	r1, #1
 800ef96:	fa01 f303 	lsl.w	r3, r1, r3
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	43db      	mvns	r3, r3
 800ef9e:	68f9      	ldr	r1, [r7, #12]
 800efa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efa4:	4013      	ands	r3, r2
 800efa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efae:	69da      	ldr	r2, [r3, #28]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	f003 030f 	and.w	r3, r3, #15
 800efb8:	2101      	movs	r1, #1
 800efba:	fa01 f303 	lsl.w	r3, r1, r3
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	43db      	mvns	r3, r3
 800efc2:	68f9      	ldr	r1, [r7, #12]
 800efc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efc8:	4013      	ands	r3, r2
 800efca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	015a      	lsls	r2, r3, #5
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	4413      	add	r3, r2
 800efd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	0159      	lsls	r1, r3, #5
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	440b      	add	r3, r1
 800efe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe6:	4619      	mov	r1, r3
 800efe8:	4b1f      	ldr	r3, [pc, #124]	; (800f068 <USB_DeactivateEndpoint+0x100>)
 800efea:	4013      	ands	r3, r2
 800efec:	600b      	str	r3, [r1, #0]
 800efee:	e034      	b.n	800f05a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f003 030f 	and.w	r3, r3, #15
 800f000:	2101      	movs	r1, #1
 800f002:	fa01 f303 	lsl.w	r3, r1, r3
 800f006:	041b      	lsls	r3, r3, #16
 800f008:	43db      	mvns	r3, r3
 800f00a:	68f9      	ldr	r1, [r7, #12]
 800f00c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f010:	4013      	ands	r3, r2
 800f012:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01a:	69da      	ldr	r2, [r3, #28]
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	f003 030f 	and.w	r3, r3, #15
 800f024:	2101      	movs	r1, #1
 800f026:	fa01 f303 	lsl.w	r3, r1, r3
 800f02a:	041b      	lsls	r3, r3, #16
 800f02c:	43db      	mvns	r3, r3
 800f02e:	68f9      	ldr	r1, [r7, #12]
 800f030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f034:	4013      	ands	r3, r2
 800f036:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	015a      	lsls	r2, r3, #5
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	0159      	lsls	r1, r3, #5
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	440b      	add	r3, r1
 800f04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f052:	4619      	mov	r1, r3
 800f054:	4b05      	ldr	r3, [pc, #20]	; (800f06c <USB_DeactivateEndpoint+0x104>)
 800f056:	4013      	ands	r3, r2
 800f058:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3714      	adds	r7, #20
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	ec337800 	.word	0xec337800
 800f06c:	eff37800 	.word	0xeff37800

0800f070 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08a      	sub	sp, #40	; 0x28
 800f074:	af02      	add	r7, sp, #8
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	60b9      	str	r1, [r7, #8]
 800f07a:	4613      	mov	r3, r2
 800f07c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	785b      	ldrb	r3, [r3, #1]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	f040 815c 	bne.w	800f34a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d132      	bne.n	800f100 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	015a      	lsls	r2, r3, #5
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a6:	691b      	ldr	r3, [r3, #16]
 800f0a8:	69ba      	ldr	r2, [r7, #24]
 800f0aa:	0151      	lsls	r1, r2, #5
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	440a      	add	r2, r1
 800f0b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	015a      	lsls	r2, r3, #5
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	0151      	lsls	r1, r2, #5
 800f0d0:	69fa      	ldr	r2, [r7, #28]
 800f0d2:	440a      	add	r2, r1
 800f0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	015a      	lsls	r2, r3, #5
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	69ba      	ldr	r2, [r7, #24]
 800f0ee:	0151      	lsls	r1, r2, #5
 800f0f0:	69fa      	ldr	r2, [r7, #28]
 800f0f2:	440a      	add	r2, r1
 800f0f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0f8:	0cdb      	lsrs	r3, r3, #19
 800f0fa:	04db      	lsls	r3, r3, #19
 800f0fc:	6113      	str	r3, [r2, #16]
 800f0fe:	e074      	b.n	800f1ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	4413      	add	r3, r2
 800f108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	69ba      	ldr	r2, [r7, #24]
 800f110:	0151      	lsls	r1, r2, #5
 800f112:	69fa      	ldr	r2, [r7, #28]
 800f114:	440a      	add	r2, r1
 800f116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f11a:	0cdb      	lsrs	r3, r3, #19
 800f11c:	04db      	lsls	r3, r3, #19
 800f11e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	015a      	lsls	r2, r3, #5
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	4413      	add	r3, r2
 800f128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	0151      	lsls	r1, r2, #5
 800f132:	69fa      	ldr	r2, [r7, #28]
 800f134:	440a      	add	r2, r1
 800f136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f13a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f13e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f150:	691a      	ldr	r2, [r3, #16]
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	6959      	ldr	r1, [r3, #20]
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	440b      	add	r3, r1
 800f15c:	1e59      	subs	r1, r3, #1
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	fbb1 f3f3 	udiv	r3, r1, r3
 800f166:	04d9      	lsls	r1, r3, #19
 800f168:	4b9d      	ldr	r3, [pc, #628]	; (800f3e0 <USB_EPStartXfer+0x370>)
 800f16a:	400b      	ands	r3, r1
 800f16c:	69b9      	ldr	r1, [r7, #24]
 800f16e:	0148      	lsls	r0, r1, #5
 800f170:	69f9      	ldr	r1, [r7, #28]
 800f172:	4401      	add	r1, r0
 800f174:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f178:	4313      	orrs	r3, r2
 800f17a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	015a      	lsls	r2, r3, #5
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	4413      	add	r3, r2
 800f184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f188:	691a      	ldr	r2, [r3, #16]
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f192:	69b9      	ldr	r1, [r7, #24]
 800f194:	0148      	lsls	r0, r1, #5
 800f196:	69f9      	ldr	r1, [r7, #28]
 800f198:	4401      	add	r1, r0
 800f19a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	78db      	ldrb	r3, [r3, #3]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d11f      	bne.n	800f1ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	015a      	lsls	r2, r3, #5
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1b6:	691b      	ldr	r3, [r3, #16]
 800f1b8:	69ba      	ldr	r2, [r7, #24]
 800f1ba:	0151      	lsls	r1, r2, #5
 800f1bc:	69fa      	ldr	r2, [r7, #28]
 800f1be:	440a      	add	r2, r1
 800f1c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f1c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	015a      	lsls	r2, r3, #5
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	69ba      	ldr	r2, [r7, #24]
 800f1da:	0151      	lsls	r1, r2, #5
 800f1dc:	69fa      	ldr	r2, [r7, #28]
 800f1de:	440a      	add	r2, r1
 800f1e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f1e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f1ea:	79fb      	ldrb	r3, [r7, #7]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d14b      	bne.n	800f288 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d009      	beq.n	800f20c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	015a      	lsls	r2, r3, #5
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	4413      	add	r3, r2
 800f200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f204:	461a      	mov	r2, r3
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	78db      	ldrb	r3, [r3, #3]
 800f210:	2b01      	cmp	r3, #1
 800f212:	d128      	bne.n	800f266 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f220:	2b00      	cmp	r3, #0
 800f222:	d110      	bne.n	800f246 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	015a      	lsls	r2, r3, #5
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	4413      	add	r3, r2
 800f22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	0151      	lsls	r1, r2, #5
 800f236:	69fa      	ldr	r2, [r7, #28]
 800f238:	440a      	add	r2, r1
 800f23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f23e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	e00f      	b.n	800f266 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	69ba      	ldr	r2, [r7, #24]
 800f256:	0151      	lsls	r1, r2, #5
 800f258:	69fa      	ldr	r2, [r7, #28]
 800f25a:	440a      	add	r2, r1
 800f25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f264:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	69ba      	ldr	r2, [r7, #24]
 800f276:	0151      	lsls	r1, r2, #5
 800f278:	69fa      	ldr	r2, [r7, #28]
 800f27a:	440a      	add	r2, r1
 800f27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f280:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f284:	6013      	str	r3, [r2, #0]
 800f286:	e12f      	b.n	800f4e8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	015a      	lsls	r2, r3, #5
 800f28c:	69fb      	ldr	r3, [r7, #28]
 800f28e:	4413      	add	r3, r2
 800f290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	69ba      	ldr	r2, [r7, #24]
 800f298:	0151      	lsls	r1, r2, #5
 800f29a:	69fa      	ldr	r2, [r7, #28]
 800f29c:	440a      	add	r2, r1
 800f29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f2a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	78db      	ldrb	r3, [r3, #3]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d015      	beq.n	800f2dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	695b      	ldr	r3, [r3, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 8117 	beq.w	800f4e8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	f003 030f 	and.w	r3, r3, #15
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800f2d0:	69f9      	ldr	r1, [r7, #28]
 800f2d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	634b      	str	r3, [r1, #52]	; 0x34
 800f2da:	e105      	b.n	800f4e8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d110      	bne.n	800f30e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	015a      	lsls	r2, r3, #5
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	69ba      	ldr	r2, [r7, #24]
 800f2fc:	0151      	lsls	r1, r2, #5
 800f2fe:	69fa      	ldr	r2, [r7, #28]
 800f300:	440a      	add	r2, r1
 800f302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f306:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f30a:	6013      	str	r3, [r2, #0]
 800f30c:	e00f      	b.n	800f32e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	015a      	lsls	r2, r3, #5
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	4413      	add	r3, r2
 800f316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	69ba      	ldr	r2, [r7, #24]
 800f31e:	0151      	lsls	r1, r2, #5
 800f320:	69fa      	ldr	r2, [r7, #28]
 800f322:	440a      	add	r2, r1
 800f324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f32c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	68d9      	ldr	r1, [r3, #12]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	781a      	ldrb	r2, [r3, #0]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	b298      	uxth	r0, r3
 800f33c:	79fb      	ldrb	r3, [r7, #7]
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	4603      	mov	r3, r0
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f000 fa2b 	bl	800f79e <USB_WritePacket>
 800f348:	e0ce      	b.n	800f4e8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	4413      	add	r3, r2
 800f352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	69ba      	ldr	r2, [r7, #24]
 800f35a:	0151      	lsls	r1, r2, #5
 800f35c:	69fa      	ldr	r2, [r7, #28]
 800f35e:	440a      	add	r2, r1
 800f360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f364:	0cdb      	lsrs	r3, r3, #19
 800f366:	04db      	lsls	r3, r3, #19
 800f368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	015a      	lsls	r2, r3, #5
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	4413      	add	r3, r2
 800f372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	69ba      	ldr	r2, [r7, #24]
 800f37a:	0151      	lsls	r1, r2, #5
 800f37c:	69fa      	ldr	r2, [r7, #28]
 800f37e:	440a      	add	r2, r1
 800f380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f38c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	695b      	ldr	r3, [r3, #20]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d126      	bne.n	800f3e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	015a      	lsls	r2, r3, #5
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	4413      	add	r3, r2
 800f39e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a2:	691a      	ldr	r2, [r3, #16]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f3ac:	69b9      	ldr	r1, [r7, #24]
 800f3ae:	0148      	lsls	r0, r1, #5
 800f3b0:	69f9      	ldr	r1, [r7, #28]
 800f3b2:	4401      	add	r1, r0
 800f3b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c8:	691b      	ldr	r3, [r3, #16]
 800f3ca:	69ba      	ldr	r2, [r7, #24]
 800f3cc:	0151      	lsls	r1, r2, #5
 800f3ce:	69fa      	ldr	r2, [r7, #28]
 800f3d0:	440a      	add	r2, r1
 800f3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3da:	6113      	str	r3, [r2, #16]
 800f3dc:	e036      	b.n	800f44c <USB_EPStartXfer+0x3dc>
 800f3de:	bf00      	nop
 800f3e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	695a      	ldr	r2, [r3, #20]
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	1e5a      	subs	r2, r3, #1
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f406:	691a      	ldr	r2, [r3, #16]
 800f408:	8afb      	ldrh	r3, [r7, #22]
 800f40a:	04d9      	lsls	r1, r3, #19
 800f40c:	4b39      	ldr	r3, [pc, #228]	; (800f4f4 <USB_EPStartXfer+0x484>)
 800f40e:	400b      	ands	r3, r1
 800f410:	69b9      	ldr	r1, [r7, #24]
 800f412:	0148      	lsls	r0, r1, #5
 800f414:	69f9      	ldr	r1, [r7, #28]
 800f416:	4401      	add	r1, r0
 800f418:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f41c:	4313      	orrs	r3, r2
 800f41e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	015a      	lsls	r2, r3, #5
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	4413      	add	r3, r2
 800f428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f42c:	691a      	ldr	r2, [r3, #16]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	8af9      	ldrh	r1, [r7, #22]
 800f434:	fb01 f303 	mul.w	r3, r1, r3
 800f438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f43c:	69b9      	ldr	r1, [r7, #24]
 800f43e:	0148      	lsls	r0, r1, #5
 800f440:	69f9      	ldr	r1, [r7, #28]
 800f442:	4401      	add	r1, r0
 800f444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f448:	4313      	orrs	r3, r2
 800f44a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d10d      	bne.n	800f46e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d009      	beq.n	800f46e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	68d9      	ldr	r1, [r3, #12]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46a:	460a      	mov	r2, r1
 800f46c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	78db      	ldrb	r3, [r3, #3]
 800f472:	2b01      	cmp	r3, #1
 800f474:	d128      	bne.n	800f4c8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f482:	2b00      	cmp	r3, #0
 800f484:	d110      	bne.n	800f4a8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	015a      	lsls	r2, r3, #5
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	4413      	add	r3, r2
 800f48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	69ba      	ldr	r2, [r7, #24]
 800f496:	0151      	lsls	r1, r2, #5
 800f498:	69fa      	ldr	r2, [r7, #28]
 800f49a:	440a      	add	r2, r1
 800f49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	e00f      	b.n	800f4c8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	015a      	lsls	r2, r3, #5
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	69ba      	ldr	r2, [r7, #24]
 800f4b8:	0151      	lsls	r1, r2, #5
 800f4ba:	69fa      	ldr	r2, [r7, #28]
 800f4bc:	440a      	add	r2, r1
 800f4be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	69ba      	ldr	r2, [r7, #24]
 800f4d8:	0151      	lsls	r1, r2, #5
 800f4da:	69fa      	ldr	r2, [r7, #28]
 800f4dc:	440a      	add	r2, r1
 800f4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f4e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3720      	adds	r7, #32
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	1ff80000 	.word	0x1ff80000

0800f4f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b087      	sub	sp, #28
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	4613      	mov	r3, r2
 800f504:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	785b      	ldrb	r3, [r3, #1]
 800f514:	2b01      	cmp	r3, #1
 800f516:	f040 80cd 	bne.w	800f6b4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d132      	bne.n	800f588 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	015a      	lsls	r2, r3, #5
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	4413      	add	r3, r2
 800f52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	0151      	lsls	r1, r2, #5
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	440a      	add	r2, r1
 800f538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f53c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	015a      	lsls	r2, r3, #5
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	4413      	add	r3, r2
 800f54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	693a      	ldr	r2, [r7, #16]
 800f556:	0151      	lsls	r1, r2, #5
 800f558:	697a      	ldr	r2, [r7, #20]
 800f55a:	440a      	add	r2, r1
 800f55c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	015a      	lsls	r2, r3, #5
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	4413      	add	r3, r2
 800f56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	0151      	lsls	r1, r2, #5
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	440a      	add	r2, r1
 800f57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f580:	0cdb      	lsrs	r3, r3, #19
 800f582:	04db      	lsls	r3, r3, #19
 800f584:	6113      	str	r3, [r2, #16]
 800f586:	e04e      	b.n	800f626 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	015a      	lsls	r2, r3, #5
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	4413      	add	r3, r2
 800f590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f594:	691b      	ldr	r3, [r3, #16]
 800f596:	693a      	ldr	r2, [r7, #16]
 800f598:	0151      	lsls	r1, r2, #5
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	440a      	add	r2, r1
 800f59e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a2:	0cdb      	lsrs	r3, r3, #19
 800f5a4:	04db      	lsls	r3, r3, #19
 800f5a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	015a      	lsls	r2, r3, #5
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	0151      	lsls	r1, r2, #5
 800f5ba:	697a      	ldr	r2, [r7, #20]
 800f5bc:	440a      	add	r2, r1
 800f5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	695a      	ldr	r2, [r3, #20]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d903      	bls.n	800f5e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	689a      	ldr	r2, [r3, #8]
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ec:	691b      	ldr	r3, [r3, #16]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	0151      	lsls	r1, r2, #5
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	440a      	add	r2, r1
 800f5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60c:	691a      	ldr	r2, [r3, #16]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	695b      	ldr	r3, [r3, #20]
 800f612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f616:	6939      	ldr	r1, [r7, #16]
 800f618:	0148      	lsls	r0, r1, #5
 800f61a:	6979      	ldr	r1, [r7, #20]
 800f61c:	4401      	add	r1, r0
 800f61e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f622:	4313      	orrs	r3, r2
 800f624:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f626:	79fb      	ldrb	r3, [r7, #7]
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d11e      	bne.n	800f66a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d009      	beq.n	800f648 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	015a      	lsls	r2, r3, #5
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	4413      	add	r3, r2
 800f63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f640:	461a      	mov	r2, r3
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	015a      	lsls	r2, r3, #5
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	4413      	add	r3, r2
 800f650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	0151      	lsls	r1, r2, #5
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	440a      	add	r2, r1
 800f65e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f662:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	e092      	b.n	800f790 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	015a      	lsls	r2, r3, #5
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	4413      	add	r3, r2
 800f672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	0151      	lsls	r1, r2, #5
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	440a      	add	r2, r1
 800f680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f688:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	695b      	ldr	r3, [r3, #20]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d07e      	beq.n	800f790 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f692:	697b      	ldr	r3, [r7, #20]
 800f694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 030f 	and.w	r3, r3, #15
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a8:	6979      	ldr	r1, [r7, #20]
 800f6aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	634b      	str	r3, [r1, #52]	; 0x34
 800f6b2:	e06d      	b.n	800f790 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	015a      	lsls	r2, r3, #5
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	0151      	lsls	r1, r2, #5
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	440a      	add	r2, r1
 800f6ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6ce:	0cdb      	lsrs	r3, r3, #19
 800f6d0:	04db      	lsls	r3, r3, #19
 800f6d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	015a      	lsls	r2, r3, #5
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	4413      	add	r3, r2
 800f6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	0151      	lsls	r1, r2, #5
 800f6e6:	697a      	ldr	r2, [r7, #20]
 800f6e8:	440a      	add	r2, r1
 800f6ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f6f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f6f6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d003      	beq.n	800f708 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	689a      	ldr	r2, [r3, #8]
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	015a      	lsls	r2, r3, #5
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	4413      	add	r3, r2
 800f710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f714:	691b      	ldr	r3, [r3, #16]
 800f716:	693a      	ldr	r2, [r7, #16]
 800f718:	0151      	lsls	r1, r2, #5
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	440a      	add	r2, r1
 800f71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f726:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	015a      	lsls	r2, r3, #5
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	4413      	add	r3, r2
 800f730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f734:	691a      	ldr	r2, [r3, #16]
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f73e:	6939      	ldr	r1, [r7, #16]
 800f740:	0148      	lsls	r0, r1, #5
 800f742:	6979      	ldr	r1, [r7, #20]
 800f744:	4401      	add	r1, r0
 800f746:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f74a:	4313      	orrs	r3, r2
 800f74c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d10d      	bne.n	800f770 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	68d9      	ldr	r1, [r3, #12]
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	015a      	lsls	r2, r3, #5
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	4413      	add	r3, r2
 800f768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f76c:	460a      	mov	r2, r1
 800f76e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	0151      	lsls	r1, r2, #5
 800f782:	697a      	ldr	r2, [r7, #20]
 800f784:	440a      	add	r2, r1
 800f786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f78a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f78e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	371c      	adds	r7, #28
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr

0800f79e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f79e:	b480      	push	{r7}
 800f7a0:	b089      	sub	sp, #36	; 0x24
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	60f8      	str	r0, [r7, #12]
 800f7a6:	60b9      	str	r1, [r7, #8]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	71fb      	strb	r3, [r7, #7]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f7bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d11a      	bne.n	800f7fa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f7c4:	88bb      	ldrh	r3, [r7, #4]
 800f7c6:	3303      	adds	r3, #3
 800f7c8:	089b      	lsrs	r3, r3, #2
 800f7ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	61bb      	str	r3, [r7, #24]
 800f7d0:	e00f      	b.n	800f7f2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	031a      	lsls	r2, r3, #12
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	4413      	add	r3, r2
 800f7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7de:	461a      	mov	r2, r3
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	61bb      	str	r3, [r7, #24]
 800f7f2:	69ba      	ldr	r2, [r7, #24]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d3eb      	bcc.n	800f7d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3724      	adds	r7, #36	; 0x24
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f808:	b480      	push	{r7}
 800f80a:	b089      	sub	sp, #36	; 0x24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f81e:	88fb      	ldrh	r3, [r7, #6]
 800f820:	3303      	adds	r3, #3
 800f822:	089b      	lsrs	r3, r3, #2
 800f824:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f826:	2300      	movs	r3, #0
 800f828:	61bb      	str	r3, [r7, #24]
 800f82a:	e00b      	b.n	800f844 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	601a      	str	r2, [r3, #0]
    pDest++;
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	3304      	adds	r3, #4
 800f83c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	3301      	adds	r3, #1
 800f842:	61bb      	str	r3, [r7, #24]
 800f844:	69ba      	ldr	r2, [r7, #24]
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d3ef      	bcc.n	800f82c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f84c:	69fb      	ldr	r3, [r7, #28]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3724      	adds	r7, #36	; 0x24
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr

0800f85a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b085      	sub	sp, #20
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
 800f862:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	785b      	ldrb	r3, [r3, #1]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d12c      	bne.n	800f8d0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	015a      	lsls	r2, r3, #5
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	4413      	add	r3, r2
 800f87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	db12      	blt.n	800f8ae <USB_EPSetStall+0x54>
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00f      	beq.n	800f8ae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	015a      	lsls	r2, r3, #5
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	4413      	add	r3, r2
 800f896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	0151      	lsls	r1, r2, #5
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	440a      	add	r2, r1
 800f8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f8ac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	015a      	lsls	r2, r3, #5
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	0151      	lsls	r1, r2, #5
 800f8c0:	68fa      	ldr	r2, [r7, #12]
 800f8c2:	440a      	add	r2, r1
 800f8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f8cc:	6013      	str	r3, [r2, #0]
 800f8ce:	e02b      	b.n	800f928 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	015a      	lsls	r2, r3, #5
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	db12      	blt.n	800f908 <USB_EPSetStall+0xae>
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d00f      	beq.n	800f908 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	0151      	lsls	r1, r2, #5
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	440a      	add	r2, r1
 800f8fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f902:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f906:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	015a      	lsls	r2, r3, #5
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	4413      	add	r3, r2
 800f910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	0151      	lsls	r1, r2, #5
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	440a      	add	r2, r1
 800f91e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f936:	b480      	push	{r7}
 800f938:	b085      	sub	sp, #20
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	785b      	ldrb	r3, [r3, #1]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d128      	bne.n	800f9a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	015a      	lsls	r2, r3, #5
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	4413      	add	r3, r2
 800f95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	0151      	lsls	r1, r2, #5
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	440a      	add	r2, r1
 800f968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f96c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f970:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	78db      	ldrb	r3, [r3, #3]
 800f976:	2b03      	cmp	r3, #3
 800f978:	d003      	beq.n	800f982 <USB_EPClearStall+0x4c>
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	78db      	ldrb	r3, [r3, #3]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d138      	bne.n	800f9f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	015a      	lsls	r2, r3, #5
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	4413      	add	r3, r2
 800f98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	0151      	lsls	r1, r2, #5
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	440a      	add	r2, r1
 800f998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f99c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9a0:	6013      	str	r3, [r2, #0]
 800f9a2:	e027      	b.n	800f9f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	015a      	lsls	r2, r3, #5
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	0151      	lsls	r1, r2, #5
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	440a      	add	r2, r1
 800f9ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f9c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	78db      	ldrb	r3, [r3, #3]
 800f9c8:	2b03      	cmp	r3, #3
 800f9ca:	d003      	beq.n	800f9d4 <USB_EPClearStall+0x9e>
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	78db      	ldrb	r3, [r3, #3]
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d10f      	bne.n	800f9f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	015a      	lsls	r2, r3, #5
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4413      	add	r3, r2
 800f9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	0151      	lsls	r1, r2, #5
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	440a      	add	r2, r1
 800f9ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3714      	adds	r7, #20
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr

0800fa02 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fa02:	b480      	push	{r7}
 800fa04:	b085      	sub	sp, #20
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fa24:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	78fb      	ldrb	r3, [r7, #3]
 800fa30:	011b      	lsls	r3, r3, #4
 800fa32:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fa36:	68f9      	ldr	r1, [r7, #12]
 800fa38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3714      	adds	r7, #20
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr

0800fa4e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	68fa      	ldr	r2, [r7, #12]
 800fa64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa68:	f023 0302 	bic.w	r3, r3, #2
 800fa6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa6e:	2003      	movs	r0, #3
 800fa70:	f7f7 f852 	bl	8006b18 <HAL_Delay>

  return HAL_OK;
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b084      	sub	sp, #16
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa98:	f043 0302 	orr.w	r3, r3, #2
 800fa9c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800fa9e:	2003      	movs	r0, #3
 800faa0:	f7f7 f83a 	bl	8006b18 <HAL_Delay>

  return HAL_OK;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800faae:	b480      	push	{r7}
 800fab0:	b085      	sub	sp, #20
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	699b      	ldr	r3, [r3, #24]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	4013      	ands	r3, r2
 800fac4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fac6:	68fb      	ldr	r3, [r7, #12]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf0:	69db      	ldr	r3, [r3, #28]
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	4013      	ands	r3, r2
 800faf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	0c1b      	lsrs	r3, r3, #16
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3714      	adds	r7, #20
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb1a:	699b      	ldr	r3, [r3, #24]
 800fb1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	b29b      	uxth	r3, r3
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3714      	adds	r7, #20
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	460b      	mov	r3, r1
 800fb46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fb4c:	78fb      	ldrb	r3, [r7, #3]
 800fb4e:	015a      	lsls	r2, r3, #5
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	4413      	add	r3, r2
 800fb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	4013      	ands	r3, r2
 800fb68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb6a:	68bb      	ldr	r3, [r7, #8]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3714      	adds	r7, #20
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb9c:	78fb      	ldrb	r3, [r7, #3]
 800fb9e:	f003 030f 	and.w	r3, r3, #15
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	fa22 f303 	lsr.w	r3, r2, r3
 800fba8:	01db      	lsls	r3, r3, #7
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	693a      	ldr	r2, [r7, #16]
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fbb2:	78fb      	ldrb	r3, [r7, #3]
 800fbb4:	015a      	lsls	r2, r3, #5
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	4413      	add	r3, r2
 800fbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fbc6:	68bb      	ldr	r3, [r7, #8]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	371c      	adds	r7, #28
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	695b      	ldr	r3, [r3, #20]
 800fbe0:	f003 0301 	and.w	r3, r3, #1
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	370c      	adds	r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbee:	4770      	bx	lr

0800fbf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fc0e:	f023 0307 	bic.w	r3, r3, #7
 800fc12:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	f003 0306 	and.w	r3, r3, #6
 800fc20:	2b04      	cmp	r3, #4
 800fc22:	d109      	bne.n	800fc38 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc32:	f043 0303 	orr.w	r3, r3, #3
 800fc36:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fc4c:	2300      	movs	r3, #0
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
	...

0800fc5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b087      	sub	sp, #28
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	60f8      	str	r0, [r7, #12]
 800fc64:	460b      	mov	r3, r1
 800fc66:	607a      	str	r2, [r7, #4]
 800fc68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	333c      	adds	r3, #60	; 0x3c
 800fc72:	3304      	adds	r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	4a26      	ldr	r2, [pc, #152]	; (800fd14 <USB_EP0_OutStart+0xb8>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d90a      	bls.n	800fc96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc90:	d101      	bne.n	800fc96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	e037      	b.n	800fd06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	2300      	movs	r3, #0
 800fca0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fcb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	697a      	ldr	r2, [r7, #20]
 800fcc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcc4:	f043 0318 	orr.w	r3, r3, #24
 800fcc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	697a      	ldr	r2, [r7, #20]
 800fcd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fcdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fcde:	7afb      	ldrb	r3, [r7, #11]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d10f      	bne.n	800fd04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcea:	461a      	mov	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	697a      	ldr	r2, [r7, #20]
 800fcfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fd02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	371c      	adds	r7, #28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	4f54300a 	.word	0x4f54300a

0800fd18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fd20:	2300      	movs	r3, #0
 800fd22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	3301      	adds	r3, #1
 800fd28:	60fb      	str	r3, [r7, #12]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	4a13      	ldr	r2, [pc, #76]	; (800fd7c <USB_CoreReset+0x64>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d901      	bls.n	800fd36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fd32:	2303      	movs	r3, #3
 800fd34:	e01b      	b.n	800fd6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	daf2      	bge.n	800fd24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	691b      	ldr	r3, [r3, #16]
 800fd46:	f043 0201 	orr.w	r2, r3, #1
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	3301      	adds	r3, #1
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4a09      	ldr	r2, [pc, #36]	; (800fd7c <USB_CoreReset+0x64>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d901      	bls.n	800fd60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fd5c:	2303      	movs	r3, #3
 800fd5e:	e006      	b.n	800fd6e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	f003 0301 	and.w	r3, r3, #1
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d0f0      	beq.n	800fd4e <USB_CoreReset+0x36>

  return HAL_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3714      	adds	r7, #20
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	00030d40 	.word	0x00030d40

0800fd80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	460b      	mov	r3, r1
 800fd8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7c1b      	ldrb	r3, [r3, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d115      	bne.n	800fdc4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	2181      	movs	r1, #129	; 0x81
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f006 ff06 	bl	8016bb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fdac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	2101      	movs	r1, #1
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f006 fefc 	bl	8016bb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800fdc2:	e012      	b.n	800fdea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fdc4:	2340      	movs	r3, #64	; 0x40
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	2181      	movs	r1, #129	; 0x81
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f006 fef1 	bl	8016bb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fdd6:	2340      	movs	r3, #64	; 0x40
 800fdd8:	2202      	movs	r2, #2
 800fdda:	2101      	movs	r1, #1
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f006 fee8 	bl	8016bb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2201      	movs	r2, #1
 800fde6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fdea:	2308      	movs	r3, #8
 800fdec:	2203      	movs	r2, #3
 800fdee:	2182      	movs	r1, #130	; 0x82
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f006 fede 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800fdfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fe00:	f007 f996 	bl	8017130 <malloc>
 800fe04:	4603      	mov	r3, r0
 800fe06:	461a      	mov	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d102      	bne.n	800fe1e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	73fb      	strb	r3, [r7, #15]
 800fe1c:	e026      	b.n	800fe6c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fe24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2200      	movs	r2, #0
 800fe34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	7c1b      	ldrb	r3, [r3, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe52:	2101      	movs	r1, #1
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f006 ff9d 	bl	8016d94 <USBD_LL_PrepareReceive>
 800fe5a:	e007      	b.n	800fe6c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fe62:	2340      	movs	r3, #64	; 0x40
 800fe64:	2101      	movs	r1, #1
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f006 ff94 	bl	8016d94 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	460b      	mov	r3, r1
 800fe80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800fe82:	2300      	movs	r3, #0
 800fe84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fe86:	2181      	movs	r1, #129	; 0x81
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f006 feb8 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2200      	movs	r2, #0
 800fe92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fe94:	2101      	movs	r1, #1
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f006 feb1 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fea4:	2182      	movs	r1, #130	; 0x82
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f006 fea9 	bl	8016bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00e      	beq.n	800feda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fecc:	4618      	mov	r0, r3
 800fece:	f007 f937 	bl	8017140 <free>
    pdev->pClassData = NULL;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800feda:	7bfb      	ldrb	r3, [r7, #15]
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3710      	adds	r7, #16
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b086      	sub	sp, #24
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800fef4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800fef6:	2300      	movs	r3, #0
 800fef8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800fefa:	2300      	movs	r3, #0
 800fefc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d039      	beq.n	800ff82 <USBD_CDC_Setup+0x9e>
 800ff0e:	2b20      	cmp	r3, #32
 800ff10:	d17c      	bne.n	801000c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	88db      	ldrh	r3, [r3, #6]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d029      	beq.n	800ff6e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	b25b      	sxtb	r3, r3
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	da11      	bge.n	800ff48 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	683a      	ldr	r2, [r7, #0]
 800ff2e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ff30:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	88d2      	ldrh	r2, [r2, #6]
 800ff36:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ff38:	6939      	ldr	r1, [r7, #16]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	88db      	ldrh	r3, [r3, #6]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f001 f9c9 	bl	80112d8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800ff46:	e068      	b.n	801001a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	785a      	ldrb	r2, [r3, #1]
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	88db      	ldrh	r3, [r3, #6]
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ff5e:	6939      	ldr	r1, [r7, #16]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	88db      	ldrh	r3, [r3, #6]
 800ff64:	461a      	mov	r2, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f001 f9e4 	bl	8011334 <USBD_CtlPrepareRx>
    break;
 800ff6c:	e055      	b.n	801001a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ff74:	689b      	ldr	r3, [r3, #8]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	7850      	ldrb	r0, [r2, #1]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	4798      	blx	r3
    break;
 800ff80:	e04b      	b.n	801001a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	785b      	ldrb	r3, [r3, #1]
 800ff86:	2b0a      	cmp	r3, #10
 800ff88:	d017      	beq.n	800ffba <USBD_CDC_Setup+0xd6>
 800ff8a:	2b0b      	cmp	r3, #11
 800ff8c:	d029      	beq.n	800ffe2 <USBD_CDC_Setup+0xfe>
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d133      	bne.n	800fffa <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ff98:	2b03      	cmp	r3, #3
 800ff9a:	d107      	bne.n	800ffac <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800ff9c:	f107 030c 	add.w	r3, r7, #12
 800ffa0:	2202      	movs	r2, #2
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f001 f997 	bl	80112d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ffaa:	e02e      	b.n	801000a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f001 f927 	bl	8011202 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ffb4:	2302      	movs	r3, #2
 800ffb6:	75fb      	strb	r3, [r7, #23]
      break;
 800ffb8:	e027      	b.n	801000a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d107      	bne.n	800ffd4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800ffc4:	f107 030f 	add.w	r3, r7, #15
 800ffc8:	2201      	movs	r2, #1
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f001 f983 	bl	80112d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ffd2:	e01a      	b.n	801000a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f001 f913 	bl	8011202 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ffdc:	2302      	movs	r3, #2
 800ffde:	75fb      	strb	r3, [r7, #23]
      break;
 800ffe0:	e013      	b.n	801000a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ffe8:	2b03      	cmp	r3, #3
 800ffea:	d00d      	beq.n	8010008 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800ffec:	6839      	ldr	r1, [r7, #0]
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f001 f907 	bl	8011202 <USBD_CtlError>
			  ret = USBD_FAIL;
 800fff4:	2302      	movs	r3, #2
 800fff6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800fff8:	e006      	b.n	8010008 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f001 f900 	bl	8011202 <USBD_CtlError>
      ret = USBD_FAIL;
 8010002:	2302      	movs	r3, #2
 8010004:	75fb      	strb	r3, [r7, #23]
      break;
 8010006:	e000      	b.n	801000a <USBD_CDC_Setup+0x126>
      break;
 8010008:	bf00      	nop
    }
    break;
 801000a:	e006      	b.n	801001a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f001 f8f7 	bl	8011202 <USBD_CtlError>
    ret = USBD_FAIL;
 8010014:	2302      	movs	r3, #2
 8010016:	75fb      	strb	r3, [r7, #23]
    break;
 8010018:	bf00      	nop
  }

  return ret;
 801001a:	7dfb      	ldrb	r3, [r7, #23]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010036:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801003e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010046:	2b00      	cmp	r3, #0
 8010048:	d03a      	beq.n	80100c0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801004a:	78fa      	ldrb	r2, [r7, #3]
 801004c:	6879      	ldr	r1, [r7, #4]
 801004e:	4613      	mov	r3, r2
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4413      	add	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	440b      	add	r3, r1
 8010058:	331c      	adds	r3, #28
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d029      	beq.n	80100b4 <USBD_CDC_DataIn+0x90>
 8010060:	78fa      	ldrb	r2, [r7, #3]
 8010062:	6879      	ldr	r1, [r7, #4]
 8010064:	4613      	mov	r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4413      	add	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	440b      	add	r3, r1
 801006e:	331c      	adds	r3, #28
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	78f9      	ldrb	r1, [r7, #3]
 8010074:	68b8      	ldr	r0, [r7, #8]
 8010076:	460b      	mov	r3, r1
 8010078:	00db      	lsls	r3, r3, #3
 801007a:	1a5b      	subs	r3, r3, r1
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	4403      	add	r3, r0
 8010080:	3344      	adds	r3, #68	; 0x44
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	fbb2 f1f3 	udiv	r1, r2, r3
 8010088:	fb03 f301 	mul.w	r3, r3, r1
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d110      	bne.n	80100b4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010092:	78fa      	ldrb	r2, [r7, #3]
 8010094:	6879      	ldr	r1, [r7, #4]
 8010096:	4613      	mov	r3, r2
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	4413      	add	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	440b      	add	r3, r1
 80100a0:	331c      	adds	r3, #28
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80100a6:	78f9      	ldrb	r1, [r7, #3]
 80100a8:	2300      	movs	r3, #0
 80100aa:	2200      	movs	r2, #0
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f006 fe4e 	bl	8016d4e <USBD_LL_Transmit>
 80100b2:	e003      	b.n	80100bc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80100bc:	2300      	movs	r3, #0
 80100be:	e000      	b.n	80100c2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80100c0:	2302      	movs	r3, #2
  }
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b084      	sub	sp, #16
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
 80100d2:	460b      	mov	r3, r1
 80100d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80100de:	78fb      	ldrb	r3, [r7, #3]
 80100e0:	4619      	mov	r1, r3
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f006 fe79 	bl	8016dda <USBD_LL_GetRxDataSize>
 80100e8:	4602      	mov	r2, r0
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00d      	beq.n	8010116 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010108:	68fa      	ldr	r2, [r7, #12]
 801010a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801010e:	4611      	mov	r1, r2
 8010110:	4798      	blx	r3

    return USBD_OK;
 8010112:	2300      	movs	r3, #0
 8010114:	e000      	b.n	8010118 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010116:	2302      	movs	r3, #2
  }
}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801012e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010136:	2b00      	cmp	r3, #0
 8010138:	d015      	beq.n	8010166 <USBD_CDC_EP0_RxReady+0x46>
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010140:	2bff      	cmp	r3, #255	; 0xff
 8010142:	d010      	beq.n	8010166 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010152:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801015a:	b292      	uxth	r2, r2
 801015c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	22ff      	movs	r2, #255	; 0xff
 8010162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2243      	movs	r2, #67	; 0x43
 801017c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801017e:	4b03      	ldr	r3, [pc, #12]	; (801018c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010180:	4618      	mov	r0, r3
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr
 801018c:	20000094 	.word	0x20000094

08010190 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2243      	movs	r2, #67	; 0x43
 801019c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801019e:	4b03      	ldr	r3, [pc, #12]	; (80101ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	20000050 	.word	0x20000050

080101b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2243      	movs	r2, #67	; 0x43
 80101bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80101be:	4b03      	ldr	r3, [pc, #12]	; (80101cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr
 80101cc:	200000d8 	.word	0x200000d8

080101d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	220a      	movs	r2, #10
 80101dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80101de:	4b03      	ldr	r3, [pc, #12]	; (80101ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	2000000c 	.word	0x2000000c

080101f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80101fa:	2302      	movs	r3, #2
 80101fc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 801020c:	2300      	movs	r3, #0
 801020e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010210:	7bfb      	ldrb	r3, [r7, #15]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr

0801021e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 801021e:	b480      	push	{r7}
 8010220:	b087      	sub	sp, #28
 8010222:	af00      	add	r7, sp, #0
 8010224:	60f8      	str	r0, [r7, #12]
 8010226:	60b9      	str	r1, [r7, #8]
 8010228:	4613      	mov	r3, r2
 801022a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010232:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801023c:	88fa      	ldrh	r2, [r7, #6]
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	371c      	adds	r7, #28
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr

08010252 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010252:	b480      	push	{r7}
 8010254:	b085      	sub	sp, #20
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010262:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3714      	adds	r7, #20
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b084      	sub	sp, #16
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010288:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010290:	2b00      	cmp	r3, #0
 8010292:	d01c      	beq.n	80102ce <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801029a:	2b00      	cmp	r3, #0
 801029c:	d115      	bne.n	80102ca <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2181      	movs	r1, #129	; 0x81
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f006 fd44 	bl	8016d4e <USBD_LL_Transmit>

      return USBD_OK;
 80102c6:	2300      	movs	r3, #0
 80102c8:	e002      	b.n	80102d0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80102ca:	2301      	movs	r3, #1
 80102cc:	e000      	b.n	80102d0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80102ce:	2302      	movs	r3, #2
  }
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102e6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d017      	beq.n	8010322 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	7c1b      	ldrb	r3, [r3, #16]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d109      	bne.n	801030e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010304:	2101      	movs	r1, #1
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f006 fd44 	bl	8016d94 <USBD_LL_PrepareReceive>
 801030c:	e007      	b.n	801031e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010314:	2340      	movs	r3, #64	; 0x40
 8010316:	2101      	movs	r1, #1
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f006 fd3b 	bl	8016d94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801031e:	2300      	movs	r3, #0
 8010320:	e000      	b.n	8010324 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010322:	2302      	movs	r3, #2
  }
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	4613      	mov	r3, r2
 8010338:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d101      	bne.n	8010344 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010340:	2302      	movs	r3, #2
 8010342:	e01a      	b.n	801037a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d003      	beq.n	8010364 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2201      	movs	r2, #1
 8010368:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	79fa      	ldrb	r2, [r7, #7]
 8010370:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f006 fbb6 	bl	8016ae4 <USBD_LL_Init>

  return USBD_OK;
 8010378:	2300      	movs	r3, #0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010382:	b480      	push	{r7}
 8010384:	b085      	sub	sp, #20
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 801038c:	2300      	movs	r3, #0
 801038e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d006      	beq.n	80103a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	683a      	ldr	r2, [r7, #0]
 801039a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	73fb      	strb	r3, [r7, #15]
 80103a2:	e001      	b.n	80103a8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80103a4:	2302      	movs	r3, #2
 80103a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80103a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3714      	adds	r7, #20
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr

080103b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f006 fbdc 	bl	8016b7c <USBD_LL_Start>

  return USBD_OK;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80103ce:	b480      	push	{r7}
 80103d0:	b083      	sub	sp, #12
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80103d6:	2300      	movs	r3, #0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	460b      	mov	r3, r1
 80103ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80103f0:	2302      	movs	r3, #2
 80103f2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00c      	beq.n	8010418 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	78fa      	ldrb	r2, [r7, #3]
 8010408:	4611      	mov	r1, r2
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	4798      	blx	r3
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010414:	2300      	movs	r3, #0
 8010416:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b082      	sub	sp, #8
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	460b      	mov	r3, r1
 801042c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	78fa      	ldrb	r2, [r7, #3]
 8010438:	4611      	mov	r1, r2
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	4798      	blx	r3
  return USBD_OK;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	4618      	mov	r0, r3
 801045c:	f000 fe94 	bl	8011188 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801046e:	461a      	mov	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 801047c:	f003 031f 	and.w	r3, r3, #31
 8010480:	2b01      	cmp	r3, #1
 8010482:	d00c      	beq.n	801049e <USBD_LL_SetupStage+0x56>
 8010484:	2b01      	cmp	r3, #1
 8010486:	d302      	bcc.n	801048e <USBD_LL_SetupStage+0x46>
 8010488:	2b02      	cmp	r3, #2
 801048a:	d010      	beq.n	80104ae <USBD_LL_SetupStage+0x66>
 801048c:	e017      	b.n	80104be <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010494:	4619      	mov	r1, r3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 fa04 	bl	80108a4 <USBD_StdDevReq>
    break;
 801049c:	e01a      	b.n	80104d4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80104a4:	4619      	mov	r1, r3
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f000 fa66 	bl	8010978 <USBD_StdItfReq>
    break;
 80104ac:	e012      	b.n	80104d4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80104b4:	4619      	mov	r1, r3
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 faa4 	bl	8010a04 <USBD_StdEPReq>
    break;
 80104bc:	e00a      	b.n	80104d4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80104c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	4619      	mov	r1, r3
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f006 fbb5 	bl	8016c3c <USBD_LL_StallEP>
    break;
 80104d2:	bf00      	nop
  }

  return USBD_OK;
 80104d4:	2300      	movs	r3, #0
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3708      	adds	r7, #8
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}

080104de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80104de:	b580      	push	{r7, lr}
 80104e0:	b086      	sub	sp, #24
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	60f8      	str	r0, [r7, #12]
 80104e6:	460b      	mov	r3, r1
 80104e8:	607a      	str	r2, [r7, #4]
 80104ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80104ec:	7afb      	ldrb	r3, [r7, #11]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d14b      	bne.n	801058a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80104f8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010500:	2b03      	cmp	r3, #3
 8010502:	d134      	bne.n	801056e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	68da      	ldr	r2, [r3, #12]
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	691b      	ldr	r3, [r3, #16]
 801050c:	429a      	cmp	r2, r3
 801050e:	d919      	bls.n	8010544 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	68da      	ldr	r2, [r3, #12]
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	1ad2      	subs	r2, r2, r3
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	68da      	ldr	r2, [r3, #12]
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010526:	429a      	cmp	r2, r3
 8010528:	d203      	bcs.n	8010532 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 801052e:	b29b      	uxth	r3, r3
 8010530:	e002      	b.n	8010538 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010536:	b29b      	uxth	r3, r3
 8010538:	461a      	mov	r2, r3
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 ff17 	bl	8011370 <USBD_CtlContinueRx>
 8010542:	e038      	b.n	80105b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00a      	beq.n	8010566 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010556:	2b03      	cmp	r3, #3
 8010558:	d105      	bne.n	8010566 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010560:	691b      	ldr	r3, [r3, #16]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f000 ff14 	bl	8011394 <USBD_CtlSendStatus>
 801056c:	e023      	b.n	80105b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010574:	2b05      	cmp	r3, #5
 8010576:	d11e      	bne.n	80105b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2200      	movs	r2, #0
 801057c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010580:	2100      	movs	r1, #0
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f006 fb5a 	bl	8016c3c <USBD_LL_StallEP>
 8010588:	e015      	b.n	80105b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00d      	beq.n	80105b2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 801059c:	2b03      	cmp	r3, #3
 801059e:	d108      	bne.n	80105b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	7afa      	ldrb	r2, [r7, #11]
 80105aa:	4611      	mov	r1, r2
 80105ac:	68f8      	ldr	r0, [r7, #12]
 80105ae:	4798      	blx	r3
 80105b0:	e001      	b.n	80105b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80105b2:	2302      	movs	r3, #2
 80105b4:	e000      	b.n	80105b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3718      	adds	r7, #24
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	460b      	mov	r3, r1
 80105ca:	607a      	str	r2, [r7, #4]
 80105cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80105ce:	7afb      	ldrb	r3, [r7, #11]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d17f      	bne.n	80106d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3314      	adds	r3, #20
 80105d8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d15c      	bne.n	801069e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	68da      	ldr	r2, [r3, #12]
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	691b      	ldr	r3, [r3, #16]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d915      	bls.n	801061c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	68da      	ldr	r2, [r3, #12]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	1ad2      	subs	r2, r2, r3
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	b29b      	uxth	r3, r3
 8010604:	461a      	mov	r2, r3
 8010606:	6879      	ldr	r1, [r7, #4]
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f000 fe81 	bl	8011310 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801060e:	2300      	movs	r3, #0
 8010610:	2200      	movs	r2, #0
 8010612:	2100      	movs	r1, #0
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f006 fbbd 	bl	8016d94 <USBD_LL_PrepareReceive>
 801061a:	e04e      	b.n	80106ba <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	697a      	ldr	r2, [r7, #20]
 8010622:	6912      	ldr	r2, [r2, #16]
 8010624:	fbb3 f1f2 	udiv	r1, r3, r2
 8010628:	fb02 f201 	mul.w	r2, r2, r1
 801062c:	1a9b      	subs	r3, r3, r2
 801062e:	2b00      	cmp	r3, #0
 8010630:	d11c      	bne.n	801066c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	689a      	ldr	r2, [r3, #8]
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 801063a:	429a      	cmp	r2, r3
 801063c:	d316      	bcc.n	801066c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	689a      	ldr	r2, [r3, #8]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010648:	429a      	cmp	r2, r3
 801064a:	d20f      	bcs.n	801066c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801064c:	2200      	movs	r2, #0
 801064e:	2100      	movs	r1, #0
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f000 fe5d 	bl	8011310 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2200      	movs	r2, #0
 801065a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801065e:	2300      	movs	r3, #0
 8010660:	2200      	movs	r2, #0
 8010662:	2100      	movs	r1, #0
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f006 fb95 	bl	8016d94 <USBD_LL_PrepareReceive>
 801066a:	e026      	b.n	80106ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00a      	beq.n	801068e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 801067e:	2b03      	cmp	r3, #3
 8010680:	d105      	bne.n	801068e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801068e:	2180      	movs	r1, #128	; 0x80
 8010690:	68f8      	ldr	r0, [r7, #12]
 8010692:	f006 fad3 	bl	8016c3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f000 fe8f 	bl	80113ba <USBD_CtlReceiveStatus>
 801069c:	e00d      	b.n	80106ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80106a4:	2b04      	cmp	r3, #4
 80106a6:	d004      	beq.n	80106b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d103      	bne.n	80106ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80106b2:	2180      	movs	r1, #128	; 0x80
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f006 fac1 	bl	8016c3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d11d      	bne.n	8010700 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f7ff fe82 	bl	80103ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80106d2:	e015      	b.n	8010700 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106da:	695b      	ldr	r3, [r3, #20]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00d      	beq.n	80106fc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	d108      	bne.n	80106fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80106f0:	695b      	ldr	r3, [r3, #20]
 80106f2:	7afa      	ldrb	r2, [r7, #11]
 80106f4:	4611      	mov	r1, r2
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	4798      	blx	r3
 80106fa:	e001      	b.n	8010700 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80106fc:	2302      	movs	r3, #2
 80106fe:	e000      	b.n	8010702 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010700:	2300      	movs	r3, #0
}
 8010702:	4618      	mov	r0, r3
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b082      	sub	sp, #8
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010712:	2340      	movs	r3, #64	; 0x40
 8010714:	2200      	movs	r2, #0
 8010716:	2100      	movs	r1, #0
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f006 fa4a 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2240      	movs	r2, #64	; 0x40
 801072a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801072e:	2340      	movs	r3, #64	; 0x40
 8010730:	2200      	movs	r2, #0
 8010732:	2180      	movs	r1, #128	; 0x80
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f006 fa3c 	bl	8016bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2201      	movs	r2, #1
 801073e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2240      	movs	r2, #64	; 0x40
 8010744:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2201      	movs	r2, #1
 801074a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801076a:	2b00      	cmp	r3, #0
 801076c:	d009      	beq.n	8010782 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	6852      	ldr	r2, [r2, #4]
 801077a:	b2d2      	uxtb	r2, r2
 801077c:	4611      	mov	r1, r2
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	4798      	blx	r3
  }

  return USBD_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	78fa      	ldrb	r2, [r7, #3]
 801079c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 801079e:	2300      	movs	r3, #0
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2204      	movs	r2, #4
 80107c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	370c      	adds	r7, #12
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80107d6:	b480      	push	{r7}
 80107d8:	b083      	sub	sp, #12
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010806:	2b03      	cmp	r3, #3
 8010808:	d10b      	bne.n	8010822 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d005      	beq.n	8010822 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801081c:	69db      	ldr	r3, [r3, #28]
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	460b      	mov	r3, r1
 8010836:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010846:	b480      	push	{r7}
 8010848:	b083      	sub	sp, #12
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
 801084e:	460b      	mov	r3, r1
 8010850:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	370c      	adds	r7, #12
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2201      	movs	r2, #1
 8010882:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	6852      	ldr	r2, [r2, #4]
 8010892:	b2d2      	uxtb	r2, r2
 8010894:	4611      	mov	r1, r2
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	4798      	blx	r3

  return USBD_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80108ba:	2b20      	cmp	r3, #32
 80108bc:	d004      	beq.n	80108c8 <USBD_StdDevReq+0x24>
 80108be:	2b40      	cmp	r3, #64	; 0x40
 80108c0:	d002      	beq.n	80108c8 <USBD_StdDevReq+0x24>
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d008      	beq.n	80108d8 <USBD_StdDevReq+0x34>
 80108c6:	e04c      	b.n	8010962 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	4798      	blx	r3
    break;
 80108d6:	e049      	b.n	801096c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	785b      	ldrb	r3, [r3, #1]
 80108dc:	2b09      	cmp	r3, #9
 80108de:	d83a      	bhi.n	8010956 <USBD_StdDevReq+0xb2>
 80108e0:	a201      	add	r2, pc, #4	; (adr r2, 80108e8 <USBD_StdDevReq+0x44>)
 80108e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e6:	bf00      	nop
 80108e8:	08010939 	.word	0x08010939
 80108ec:	0801094d 	.word	0x0801094d
 80108f0:	08010957 	.word	0x08010957
 80108f4:	08010943 	.word	0x08010943
 80108f8:	08010957 	.word	0x08010957
 80108fc:	0801091b 	.word	0x0801091b
 8010900:	08010911 	.word	0x08010911
 8010904:	08010957 	.word	0x08010957
 8010908:	0801092f 	.word	0x0801092f
 801090c:	08010925 	.word	0x08010925
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010910:	6839      	ldr	r1, [r7, #0]
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f9d2 	bl	8010cbc <USBD_GetDescriptor>
      break;
 8010918:	e022      	b.n	8010960 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801091a:	6839      	ldr	r1, [r7, #0]
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 fac7 	bl	8010eb0 <USBD_SetAddress>
      break;
 8010922:	e01d      	b.n	8010960 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fb04 	bl	8010f34 <USBD_SetConfig>
      break;
 801092c:	e018      	b.n	8010960 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fb8d 	bl	8011050 <USBD_GetConfig>
      break;
 8010936:	e013      	b.n	8010960 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 fbbc 	bl	80110b8 <USBD_GetStatus>
      break;
 8010940:	e00e      	b.n	8010960 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fbea 	bl	801111e <USBD_SetFeature>
      break;
 801094a:	e009      	b.n	8010960 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fbf9 	bl	8011146 <USBD_ClrFeature>
      break;
 8010954:	e004      	b.n	8010960 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fc52 	bl	8011202 <USBD_CtlError>
      break;
 801095e:	bf00      	nop
    }
    break;
 8010960:	e004      	b.n	801096c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 fc4c 	bl	8011202 <USBD_CtlError>
    break;
 801096a:	bf00      	nop
  }

  return ret;
 801096c:	7bfb      	ldrb	r3, [r7, #15]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop

08010978 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801098e:	2b20      	cmp	r3, #32
 8010990:	d003      	beq.n	801099a <USBD_StdItfReq+0x22>
 8010992:	2b40      	cmp	r3, #64	; 0x40
 8010994:	d001      	beq.n	801099a <USBD_StdItfReq+0x22>
 8010996:	2b00      	cmp	r3, #0
 8010998:	d12a      	bne.n	80109f0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80109a0:	3b01      	subs	r3, #1
 80109a2:	2b02      	cmp	r3, #2
 80109a4:	d81d      	bhi.n	80109e2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	889b      	ldrh	r3, [r3, #4]
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	2b01      	cmp	r3, #1
 80109ae:	d813      	bhi.n	80109d8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	6839      	ldr	r1, [r7, #0]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	4798      	blx	r3
 80109be:	4603      	mov	r3, r0
 80109c0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	88db      	ldrh	r3, [r3, #6]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d110      	bne.n	80109ec <USBD_StdItfReq+0x74>
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10d      	bne.n	80109ec <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 fcdf 	bl	8011394 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80109d6:	e009      	b.n	80109ec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80109d8:	6839      	ldr	r1, [r7, #0]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 fc11 	bl	8011202 <USBD_CtlError>
      break;
 80109e0:	e004      	b.n	80109ec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80109e2:	6839      	ldr	r1, [r7, #0]
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 fc0c 	bl	8011202 <USBD_CtlError>
      break;
 80109ea:	e000      	b.n	80109ee <USBD_StdItfReq+0x76>
      break;
 80109ec:	bf00      	nop
    }
    break;
 80109ee:	e004      	b.n	80109fa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80109f0:	6839      	ldr	r1, [r7, #0]
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 fc05 	bl	8011202 <USBD_CtlError>
    break;
 80109f8:	bf00      	nop
  }

  return USBD_OK;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3710      	adds	r7, #16
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	889b      	ldrh	r3, [r3, #4]
 8010a16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a20:	2b20      	cmp	r3, #32
 8010a22:	d004      	beq.n	8010a2e <USBD_StdEPReq+0x2a>
 8010a24:	2b40      	cmp	r3, #64	; 0x40
 8010a26:	d002      	beq.n	8010a2e <USBD_StdEPReq+0x2a>
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d008      	beq.n	8010a3e <USBD_StdEPReq+0x3a>
 8010a2c:	e13b      	b.n	8010ca6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	4798      	blx	r3
    break;
 8010a3c:	e138      	b.n	8010cb0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010a46:	2b20      	cmp	r3, #32
 8010a48:	d10a      	bne.n	8010a60 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a50:	689b      	ldr	r3, [r3, #8]
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	4798      	blx	r3
 8010a58:	4603      	mov	r3, r0
 8010a5a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
 8010a5e:	e128      	b.n	8010cb2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	785b      	ldrb	r3, [r3, #1]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d03e      	beq.n	8010ae6 <USBD_StdEPReq+0xe2>
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	d002      	beq.n	8010a72 <USBD_StdEPReq+0x6e>
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d070      	beq.n	8010b52 <USBD_StdEPReq+0x14e>
 8010a70:	e113      	b.n	8010c9a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	d002      	beq.n	8010a82 <USBD_StdEPReq+0x7e>
 8010a7c:	2b03      	cmp	r3, #3
 8010a7e:	d015      	beq.n	8010aac <USBD_StdEPReq+0xa8>
 8010a80:	e02b      	b.n	8010ada <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a82:	7bbb      	ldrb	r3, [r7, #14]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00c      	beq.n	8010aa2 <USBD_StdEPReq+0x9e>
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
 8010a8a:	2b80      	cmp	r3, #128	; 0x80
 8010a8c:	d009      	beq.n	8010aa2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010a8e:	7bbb      	ldrb	r3, [r7, #14]
 8010a90:	4619      	mov	r1, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f006 f8d2 	bl	8016c3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010a98:	2180      	movs	r1, #128	; 0x80
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f006 f8ce 	bl	8016c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010aa0:	e020      	b.n	8010ae4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 fbac 	bl	8011202 <USBD_CtlError>
        break;
 8010aaa:	e01b      	b.n	8010ae4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	885b      	ldrh	r3, [r3, #2]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10e      	bne.n	8010ad2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ab4:	7bbb      	ldrb	r3, [r7, #14]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00b      	beq.n	8010ad2 <USBD_StdEPReq+0xce>
 8010aba:	7bbb      	ldrb	r3, [r7, #14]
 8010abc:	2b80      	cmp	r3, #128	; 0x80
 8010abe:	d008      	beq.n	8010ad2 <USBD_StdEPReq+0xce>
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	88db      	ldrh	r3, [r3, #6]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d104      	bne.n	8010ad2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8010ac8:	7bbb      	ldrb	r3, [r7, #14]
 8010aca:	4619      	mov	r1, r3
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f006 f8b5 	bl	8016c3c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 fc5e 	bl	8011394 <USBD_CtlSendStatus>

        break;
 8010ad8:	e004      	b.n	8010ae4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 fb90 	bl	8011202 <USBD_CtlError>
        break;
 8010ae2:	bf00      	nop
      }
      break;
 8010ae4:	e0de      	b.n	8010ca4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d002      	beq.n	8010af6 <USBD_StdEPReq+0xf2>
 8010af0:	2b03      	cmp	r3, #3
 8010af2:	d015      	beq.n	8010b20 <USBD_StdEPReq+0x11c>
 8010af4:	e026      	b.n	8010b44 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010af6:	7bbb      	ldrb	r3, [r7, #14]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00c      	beq.n	8010b16 <USBD_StdEPReq+0x112>
 8010afc:	7bbb      	ldrb	r3, [r7, #14]
 8010afe:	2b80      	cmp	r3, #128	; 0x80
 8010b00:	d009      	beq.n	8010b16 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010b02:	7bbb      	ldrb	r3, [r7, #14]
 8010b04:	4619      	mov	r1, r3
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f006 f898 	bl	8016c3c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010b0c:	2180      	movs	r1, #128	; 0x80
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f006 f894 	bl	8016c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010b14:	e01c      	b.n	8010b50 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8010b16:	6839      	ldr	r1, [r7, #0]
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 fb72 	bl	8011202 <USBD_CtlError>
        break;
 8010b1e:	e017      	b.n	8010b50 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	885b      	ldrh	r3, [r3, #2]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d112      	bne.n	8010b4e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010b28:	7bbb      	ldrb	r3, [r7, #14]
 8010b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d004      	beq.n	8010b3c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	4619      	mov	r1, r3
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f006 f89f 	bl	8016c7a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f000 fc29 	bl	8011394 <USBD_CtlSendStatus>
        }
        break;
 8010b42:	e004      	b.n	8010b4e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 fb5b 	bl	8011202 <USBD_CtlError>
        break;
 8010b4c:	e000      	b.n	8010b50 <USBD_StdEPReq+0x14c>
        break;
 8010b4e:	bf00      	nop
      }
      break;
 8010b50:	e0a8      	b.n	8010ca4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d002      	beq.n	8010b62 <USBD_StdEPReq+0x15e>
 8010b5c:	2b03      	cmp	r3, #3
 8010b5e:	d031      	beq.n	8010bc4 <USBD_StdEPReq+0x1c0>
 8010b60:	e095      	b.n	8010c8e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d007      	beq.n	8010b78 <USBD_StdEPReq+0x174>
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	2b80      	cmp	r3, #128	; 0x80
 8010b6c:	d004      	beq.n	8010b78 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f000 fb46 	bl	8011202 <USBD_CtlError>
          break;
 8010b76:	e08f      	b.n	8010c98 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	da0b      	bge.n	8010b98 <USBD_StdEPReq+0x194>
 8010b80:	7bbb      	ldrb	r3, [r7, #14]
 8010b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b86:	4613      	mov	r3, r2
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	4413      	add	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	3310      	adds	r3, #16
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	4413      	add	r3, r2
 8010b94:	3304      	adds	r3, #4
 8010b96:	e00a      	b.n	8010bae <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010b98:	7bbb      	ldrb	r3, [r7, #14]
 8010b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4413      	add	r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	4413      	add	r3, r2
 8010bae:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	2202      	movs	r2, #2
 8010bba:	4619      	mov	r1, r3
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fb8b 	bl	80112d8 <USBD_CtlSendData>
          break;
 8010bc2:	e069      	b.n	8010c98 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8010bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	da11      	bge.n	8010bf0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010bcc:	7bbb      	ldrb	r3, [r7, #14]
 8010bce:	f003 020f 	and.w	r2, r3, #15
 8010bd2:	6879      	ldr	r1, [r7, #4]
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4413      	add	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	440b      	add	r3, r1
 8010bde:	3318      	adds	r3, #24
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d117      	bne.n	8010c16 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010be6:	6839      	ldr	r1, [r7, #0]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fb0a 	bl	8011202 <USBD_CtlError>
            break;
 8010bee:	e053      	b.n	8010c98 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010bf0:	7bbb      	ldrb	r3, [r7, #14]
 8010bf2:	f003 020f 	and.w	r2, r3, #15
 8010bf6:	6879      	ldr	r1, [r7, #4]
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	440b      	add	r3, r1
 8010c02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d104      	bne.n	8010c16 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f000 faf7 	bl	8011202 <USBD_CtlError>
            break;
 8010c14:	e040      	b.n	8010c98 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	da0b      	bge.n	8010c36 <USBD_StdEPReq+0x232>
 8010c1e:	7bbb      	ldrb	r3, [r7, #14]
 8010c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010c24:	4613      	mov	r3, r2
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	4413      	add	r3, r2
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	3310      	adds	r3, #16
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	4413      	add	r3, r2
 8010c32:	3304      	adds	r3, #4
 8010c34:	e00a      	b.n	8010c4c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8010c36:	7bbb      	ldrb	r3, [r7, #14]
 8010c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <USBD_StdEPReq+0x256>
 8010c54:	7bbb      	ldrb	r3, [r7, #14]
 8010c56:	2b80      	cmp	r3, #128	; 0x80
 8010c58:	d103      	bne.n	8010c62 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]
 8010c60:	e00e      	b.n	8010c80 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8010c62:	7bbb      	ldrb	r3, [r7, #14]
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f006 f826 	bl	8016cb8 <USBD_LL_IsStallEP>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2201      	movs	r2, #1
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	e002      	b.n	8010c80 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	2202      	movs	r2, #2
 8010c84:	4619      	mov	r1, r3
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fb26 	bl	80112d8 <USBD_CtlSendData>
          break;
 8010c8c:	e004      	b.n	8010c98 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8010c8e:	6839      	ldr	r1, [r7, #0]
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 fab6 	bl	8011202 <USBD_CtlError>
        break;
 8010c96:	bf00      	nop
      }
      break;
 8010c98:	e004      	b.n	8010ca4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 fab0 	bl	8011202 <USBD_CtlError>
      break;
 8010ca2:	bf00      	nop
    }
    break;
 8010ca4:	e004      	b.n	8010cb0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 faaa 	bl	8011202 <USBD_CtlError>
    break;
 8010cae:	bf00      	nop
  }

  return ret;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	885b      	ldrh	r3, [r3, #2]
 8010cca:	0a1b      	lsrs	r3, r3, #8
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	3b01      	subs	r3, #1
 8010cd0:	2b06      	cmp	r3, #6
 8010cd2:	f200 80c9 	bhi.w	8010e68 <USBD_GetDescriptor+0x1ac>
 8010cd6:	a201      	add	r2, pc, #4	; (adr r2, 8010cdc <USBD_GetDescriptor+0x20>)
 8010cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cdc:	08010cf9 	.word	0x08010cf9
 8010ce0:	08010d11 	.word	0x08010d11
 8010ce4:	08010d51 	.word	0x08010d51
 8010ce8:	08010e69 	.word	0x08010e69
 8010cec:	08010e69 	.word	0x08010e69
 8010cf0:	08010e15 	.word	0x08010e15
 8010cf4:	08010e3b 	.word	0x08010e3b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	7c12      	ldrb	r2, [r2, #16]
 8010d04:	f107 010a 	add.w	r1, r7, #10
 8010d08:	4610      	mov	r0, r2
 8010d0a:	4798      	blx	r3
 8010d0c:	60f8      	str	r0, [r7, #12]
    break;
 8010d0e:	e0b0      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	7c1b      	ldrb	r3, [r3, #16]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d10d      	bne.n	8010d34 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d20:	f107 020a 	add.w	r2, r7, #10
 8010d24:	4610      	mov	r0, r2
 8010d26:	4798      	blx	r3
 8010d28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	2202      	movs	r2, #2
 8010d30:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010d32:	e09e      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d3c:	f107 020a 	add.w	r2, r7, #10
 8010d40:	4610      	mov	r0, r2
 8010d42:	4798      	blx	r3
 8010d44:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	701a      	strb	r2, [r3, #0]
    break;
 8010d4e:	e090      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	885b      	ldrh	r3, [r3, #2]
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b05      	cmp	r3, #5
 8010d58:	d856      	bhi.n	8010e08 <USBD_GetDescriptor+0x14c>
 8010d5a:	a201      	add	r2, pc, #4	; (adr r2, 8010d60 <USBD_GetDescriptor+0xa4>)
 8010d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d60:	08010d79 	.word	0x08010d79
 8010d64:	08010d91 	.word	0x08010d91
 8010d68:	08010da9 	.word	0x08010da9
 8010d6c:	08010dc1 	.word	0x08010dc1
 8010d70:	08010dd9 	.word	0x08010dd9
 8010d74:	08010df1 	.word	0x08010df1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	7c12      	ldrb	r2, [r2, #16]
 8010d84:	f107 010a 	add.w	r1, r7, #10
 8010d88:	4610      	mov	r0, r2
 8010d8a:	4798      	blx	r3
 8010d8c:	60f8      	str	r0, [r7, #12]
      break;
 8010d8e:	e040      	b.n	8010e12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	7c12      	ldrb	r2, [r2, #16]
 8010d9c:	f107 010a 	add.w	r1, r7, #10
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
 8010da4:	60f8      	str	r0, [r7, #12]
      break;
 8010da6:	e034      	b.n	8010e12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	7c12      	ldrb	r2, [r2, #16]
 8010db4:	f107 010a 	add.w	r1, r7, #10
 8010db8:	4610      	mov	r0, r2
 8010dba:	4798      	blx	r3
 8010dbc:	60f8      	str	r0, [r7, #12]
      break;
 8010dbe:	e028      	b.n	8010e12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010dc6:	691b      	ldr	r3, [r3, #16]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	7c12      	ldrb	r2, [r2, #16]
 8010dcc:	f107 010a 	add.w	r1, r7, #10
 8010dd0:	4610      	mov	r0, r2
 8010dd2:	4798      	blx	r3
 8010dd4:	60f8      	str	r0, [r7, #12]
      break;
 8010dd6:	e01c      	b.n	8010e12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	7c12      	ldrb	r2, [r2, #16]
 8010de4:	f107 010a 	add.w	r1, r7, #10
 8010de8:	4610      	mov	r0, r2
 8010dea:	4798      	blx	r3
 8010dec:	60f8      	str	r0, [r7, #12]
      break;
 8010dee:	e010      	b.n	8010e12 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8010df6:	699b      	ldr	r3, [r3, #24]
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	7c12      	ldrb	r2, [r2, #16]
 8010dfc:	f107 010a 	add.w	r1, r7, #10
 8010e00:	4610      	mov	r0, r2
 8010e02:	4798      	blx	r3
 8010e04:	60f8      	str	r0, [r7, #12]
      break;
 8010e06:	e004      	b.n	8010e12 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 f9f9 	bl	8011202 <USBD_CtlError>
      return;
 8010e10:	e04b      	b.n	8010eaa <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8010e12:	e02e      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	7c1b      	ldrb	r3, [r3, #16]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d109      	bne.n	8010e30 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e24:	f107 020a 	add.w	r2, r7, #10
 8010e28:	4610      	mov	r0, r2
 8010e2a:	4798      	blx	r3
 8010e2c:	60f8      	str	r0, [r7, #12]
      break;
 8010e2e:	e020      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010e30:	6839      	ldr	r1, [r7, #0]
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f000 f9e5 	bl	8011202 <USBD_CtlError>
      return;
 8010e38:	e037      	b.n	8010eaa <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7c1b      	ldrb	r3, [r3, #16]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d10d      	bne.n	8010e5e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4a:	f107 020a 	add.w	r2, r7, #10
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4798      	blx	r3
 8010e52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3301      	adds	r3, #1
 8010e58:	2207      	movs	r2, #7
 8010e5a:	701a      	strb	r2, [r3, #0]
      break;
 8010e5c:	e009      	b.n	8010e72 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f9ce 	bl	8011202 <USBD_CtlError>
      return;
 8010e66:	e020      	b.n	8010eaa <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8010e68:	6839      	ldr	r1, [r7, #0]
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f000 f9c9 	bl	8011202 <USBD_CtlError>
    return;
 8010e70:	e01b      	b.n	8010eaa <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8010e72:	897b      	ldrh	r3, [r7, #10]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d011      	beq.n	8010e9c <USBD_GetDescriptor+0x1e0>
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	88db      	ldrh	r3, [r3, #6]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00d      	beq.n	8010e9c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	88da      	ldrh	r2, [r3, #6]
 8010e84:	897b      	ldrh	r3, [r7, #10]
 8010e86:	4293      	cmp	r3, r2
 8010e88:	bf28      	it	cs
 8010e8a:	4613      	movcs	r3, r2
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8010e90:	897b      	ldrh	r3, [r7, #10]
 8010e92:	461a      	mov	r2, r3
 8010e94:	68f9      	ldr	r1, [r7, #12]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 fa1e 	bl	80112d8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	88db      	ldrh	r3, [r3, #6]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d102      	bne.n	8010eaa <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 fa75 	bl	8011394 <USBD_CtlSendStatus>
  }
}
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	889b      	ldrh	r3, [r3, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d130      	bne.n	8010f24 <USBD_SetAddress+0x74>
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	88db      	ldrh	r3, [r3, #6]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d12c      	bne.n	8010f24 <USBD_SetAddress+0x74>
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	885b      	ldrh	r3, [r3, #2]
 8010ece:	2b7f      	cmp	r3, #127	; 0x7f
 8010ed0:	d828      	bhi.n	8010f24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	885b      	ldrh	r3, [r3, #2]
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010edc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010ee4:	2b03      	cmp	r3, #3
 8010ee6:	d104      	bne.n	8010ef2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 f989 	bl	8011202 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ef0:	e01c      	b.n	8010f2c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	7bfa      	ldrb	r2, [r7, #15]
 8010ef6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010efa:	7bfb      	ldrb	r3, [r7, #15]
 8010efc:	4619      	mov	r1, r3
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f005 ff06 	bl	8016d10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 fa45 	bl	8011394 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f0a:	7bfb      	ldrb	r3, [r7, #15]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d004      	beq.n	8010f1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2202      	movs	r2, #2
 8010f14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f18:	e008      	b.n	8010f2c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f22:	e003      	b.n	8010f2c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010f24:	6839      	ldr	r1, [r7, #0]
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f96b 	bl	8011202 <USBD_CtlError>
  }
}
 8010f2c:	bf00      	nop
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	885b      	ldrh	r3, [r3, #2]
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	4b41      	ldr	r3, [pc, #260]	; (801104c <USBD_SetConfig+0x118>)
 8010f46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010f48:	4b40      	ldr	r3, [pc, #256]	; (801104c <USBD_SetConfig+0x118>)
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d904      	bls.n	8010f5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010f50:	6839      	ldr	r1, [r7, #0]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f955 	bl	8011202 <USBD_CtlError>
 8010f58:	e075      	b.n	8011046 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d002      	beq.n	8010f6a <USBD_SetConfig+0x36>
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	d023      	beq.n	8010fb0 <USBD_SetConfig+0x7c>
 8010f68:	e062      	b.n	8011030 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8010f6a:	4b38      	ldr	r3, [pc, #224]	; (801104c <USBD_SetConfig+0x118>)
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d01a      	beq.n	8010fa8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8010f72:	4b36      	ldr	r3, [pc, #216]	; (801104c <USBD_SetConfig+0x118>)
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2203      	movs	r2, #3
 8010f80:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010f84:	4b31      	ldr	r3, [pc, #196]	; (801104c <USBD_SetConfig+0x118>)
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fa2a 	bl	80103e4 <USBD_SetClassConfig>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b02      	cmp	r3, #2
 8010f94:	d104      	bne.n	8010fa0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8010f96:	6839      	ldr	r1, [r7, #0]
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f932 	bl	8011202 <USBD_CtlError>
          return;
 8010f9e:	e052      	b.n	8011046 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 f9f7 	bl	8011394 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010fa6:	e04e      	b.n	8011046 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f000 f9f3 	bl	8011394 <USBD_CtlSendStatus>
      break;
 8010fae:	e04a      	b.n	8011046 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010fb0:	4b26      	ldr	r3, [pc, #152]	; (801104c <USBD_SetConfig+0x118>)
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d112      	bne.n	8010fde <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2202      	movs	r2, #2
 8010fbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8010fc0:	4b22      	ldr	r3, [pc, #136]	; (801104c <USBD_SetConfig+0x118>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8010fca:	4b20      	ldr	r3, [pc, #128]	; (801104c <USBD_SetConfig+0x118>)
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7ff fa26 	bl	8010422 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f9dc 	bl	8011394 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8010fdc:	e033      	b.n	8011046 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8010fde:	4b1b      	ldr	r3, [pc, #108]	; (801104c <USBD_SetConfig+0x118>)
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d01d      	beq.n	8011028 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff fa14 	bl	8010422 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010ffa:	4b14      	ldr	r3, [pc, #80]	; (801104c <USBD_SetConfig+0x118>)
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	461a      	mov	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011004:	4b11      	ldr	r3, [pc, #68]	; (801104c <USBD_SetConfig+0x118>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	4619      	mov	r1, r3
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7ff f9ea 	bl	80103e4 <USBD_SetClassConfig>
 8011010:	4603      	mov	r3, r0
 8011012:	2b02      	cmp	r3, #2
 8011014:	d104      	bne.n	8011020 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8011016:	6839      	ldr	r1, [r7, #0]
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 f8f2 	bl	8011202 <USBD_CtlError>
          return;
 801101e:	e012      	b.n	8011046 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 f9b7 	bl	8011394 <USBD_CtlSendStatus>
      break;
 8011026:	e00e      	b.n	8011046 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f000 f9b3 	bl	8011394 <USBD_CtlSendStatus>
      break;
 801102e:	e00a      	b.n	8011046 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011030:	6839      	ldr	r1, [r7, #0]
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 f8e5 	bl	8011202 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8011038:	4b04      	ldr	r3, [pc, #16]	; (801104c <USBD_SetConfig+0x118>)
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	4619      	mov	r1, r3
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff f9ef 	bl	8010422 <USBD_ClrClassConfig>
      break;
 8011044:	bf00      	nop
    }
  }
}
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	200009ec 	.word	0x200009ec

08011050 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	88db      	ldrh	r3, [r3, #6]
 801105e:	2b01      	cmp	r3, #1
 8011060:	d004      	beq.n	801106c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f8cc 	bl	8011202 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801106a:	e021      	b.n	80110b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011072:	2b01      	cmp	r3, #1
 8011074:	db17      	blt.n	80110a6 <USBD_GetConfig+0x56>
 8011076:	2b02      	cmp	r3, #2
 8011078:	dd02      	ble.n	8011080 <USBD_GetConfig+0x30>
 801107a:	2b03      	cmp	r3, #3
 801107c:	d00b      	beq.n	8011096 <USBD_GetConfig+0x46>
 801107e:	e012      	b.n	80110a6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	3308      	adds	r3, #8
 801108a:	2201      	movs	r2, #1
 801108c:	4619      	mov	r1, r3
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f000 f922 	bl	80112d8 <USBD_CtlSendData>
      break;
 8011094:	e00c      	b.n	80110b0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	3304      	adds	r3, #4
 801109a:	2201      	movs	r2, #1
 801109c:	4619      	mov	r1, r3
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 f91a 	bl	80112d8 <USBD_CtlSendData>
      break;
 80110a4:	e004      	b.n	80110b0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f000 f8aa 	bl	8011202 <USBD_CtlError>
      break;
 80110ae:	bf00      	nop
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80110c8:	3b01      	subs	r3, #1
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	d81e      	bhi.n	801110c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	88db      	ldrh	r3, [r3, #6]
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	d004      	beq.n	80110e0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80110d6:	6839      	ldr	r1, [r7, #0]
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f892 	bl	8011202 <USBD_CtlError>
      break;
 80110de:	e01a      	b.n	8011116 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2201      	movs	r2, #1
 80110e4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d005      	beq.n	80110fc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	f043 0202 	orr.w	r2, r3, #2
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	330c      	adds	r3, #12
 8011100:	2202      	movs	r2, #2
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 f8e7 	bl	80112d8 <USBD_CtlSendData>
    break;
 801110a:	e004      	b.n	8011116 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 801110c:	6839      	ldr	r1, [r7, #0]
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 f877 	bl	8011202 <USBD_CtlError>
    break;
 8011114:	bf00      	nop
  }
}
 8011116:	bf00      	nop
 8011118:	3708      	adds	r7, #8
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801111e:	b580      	push	{r7, lr}
 8011120:	b082      	sub	sp, #8
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
 8011126:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	885b      	ldrh	r3, [r3, #2]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d106      	bne.n	801113e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2201      	movs	r2, #1
 8011134:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f000 f92b 	bl	8011394 <USBD_CtlSendStatus>
  }

}
 801113e:	bf00      	nop
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b082      	sub	sp, #8
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
 801114e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011156:	3b01      	subs	r3, #1
 8011158:	2b02      	cmp	r3, #2
 801115a:	d80b      	bhi.n	8011174 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	885b      	ldrh	r3, [r3, #2]
 8011160:	2b01      	cmp	r3, #1
 8011162:	d10c      	bne.n	801117e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2200      	movs	r2, #0
 8011168:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 f911 	bl	8011394 <USBD_CtlSendStatus>
    }
    break;
 8011172:	e004      	b.n	801117e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8011174:	6839      	ldr	r1, [r7, #0]
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 f843 	bl	8011202 <USBD_CtlError>
    break;
 801117c:	e000      	b.n	8011180 <USBD_ClrFeature+0x3a>
    break;
 801117e:	bf00      	nop
  }
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	781a      	ldrb	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	785a      	ldrb	r2, [r3, #1]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	3302      	adds	r3, #2
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	3303      	adds	r3, #3
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	021b      	lsls	r3, r3, #8
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	4413      	add	r3, r2
 80111b8:	b29a      	uxth	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	3304      	adds	r3, #4
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	3305      	adds	r3, #5
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	021b      	lsls	r3, r3, #8
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	4413      	add	r3, r2
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	3306      	adds	r3, #6
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	3307      	adds	r3, #7
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	021b      	lsls	r3, r3, #8
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4413      	add	r3, r2
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	80da      	strh	r2, [r3, #6]

}
 80111f6:	bf00      	nop
 80111f8:	370c      	adds	r7, #12
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr

08011202 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 801120c:	2180      	movs	r1, #128	; 0x80
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f005 fd14 	bl	8016c3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011214:	2100      	movs	r1, #0
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f005 fd10 	bl	8016c3c <USBD_LL_StallEP>
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011230:	2300      	movs	r3, #0
 8011232:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d032      	beq.n	80112a0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801123a:	68f8      	ldr	r0, [r7, #12]
 801123c:	f000 f834 	bl	80112a8 <USBD_GetLen>
 8011240:	4603      	mov	r3, r0
 8011242:	3301      	adds	r3, #1
 8011244:	b29b      	uxth	r3, r3
 8011246:	005b      	lsls	r3, r3, #1
 8011248:	b29a      	uxth	r2, r3
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	1c5a      	adds	r2, r3, #1
 8011252:	75fa      	strb	r2, [r7, #23]
 8011254:	461a      	mov	r2, r3
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	4413      	add	r3, r2
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	7812      	ldrb	r2, [r2, #0]
 801125e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011260:	7dfb      	ldrb	r3, [r7, #23]
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	75fa      	strb	r2, [r7, #23]
 8011266:	461a      	mov	r2, r3
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	4413      	add	r3, r2
 801126c:	2203      	movs	r2, #3
 801126e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011270:	e012      	b.n	8011298 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	1c5a      	adds	r2, r3, #1
 8011276:	60fa      	str	r2, [r7, #12]
 8011278:	7dfa      	ldrb	r2, [r7, #23]
 801127a:	1c51      	adds	r1, r2, #1
 801127c:	75f9      	strb	r1, [r7, #23]
 801127e:	4611      	mov	r1, r2
 8011280:	68ba      	ldr	r2, [r7, #8]
 8011282:	440a      	add	r2, r1
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011288:	7dfb      	ldrb	r3, [r7, #23]
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	75fa      	strb	r2, [r7, #23]
 801128e:	461a      	mov	r2, r3
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	4413      	add	r3, r2
 8011294:	2200      	movs	r2, #0
 8011296:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1e8      	bne.n	8011272 <USBD_GetString+0x4e>
    }
  }
}
 80112a0:	bf00      	nop
 80112a2:	3718      	adds	r7, #24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80112b0:	2300      	movs	r3, #0
 80112b2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80112b4:	e005      	b.n	80112c2 <USBD_GetLen+0x1a>
    {
        len++;
 80112b6:	7bfb      	ldrb	r3, [r7, #15]
 80112b8:	3301      	adds	r3, #1
 80112ba:	73fb      	strb	r3, [r7, #15]
        buf++;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3301      	adds	r3, #1
 80112c0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1f5      	bne.n	80112b6 <USBD_GetLen+0xe>
    }

    return len;
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3714      	adds	r7, #20
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b084      	sub	sp, #16
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	4613      	mov	r3, r2
 80112e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2202      	movs	r2, #2
 80112ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80112ee:	88fa      	ldrh	r2, [r7, #6]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80112f4:	88fa      	ldrh	r2, [r7, #6]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80112fa:	88fb      	ldrh	r3, [r7, #6]
 80112fc:	68ba      	ldr	r2, [r7, #8]
 80112fe:	2100      	movs	r1, #0
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f005 fd24 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	4613      	mov	r3, r2
 801131c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 801131e:	88fb      	ldrh	r3, [r7, #6]
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	2100      	movs	r1, #0
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f005 fd12 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 801132a:	2300      	movs	r3, #0
}
 801132c:	4618      	mov	r0, r3
 801132e:	3710      	adds	r7, #16
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	4613      	mov	r3, r2
 8011340:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2203      	movs	r2, #3
 8011346:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 801134a:	88fa      	ldrh	r2, [r7, #6]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011352:	88fa      	ldrh	r2, [r7, #6]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 801135a:	88fb      	ldrh	r3, [r7, #6]
 801135c:	68ba      	ldr	r2, [r7, #8]
 801135e:	2100      	movs	r1, #0
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f005 fd17 	bl	8016d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011366:	2300      	movs	r3, #0
}
 8011368:	4618      	mov	r0, r3
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	4613      	mov	r3, r2
 801137c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801137e:	88fb      	ldrh	r3, [r7, #6]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	2100      	movs	r1, #0
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f005 fd05 	bl	8016d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2204      	movs	r2, #4
 80113a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80113a4:	2300      	movs	r3, #0
 80113a6:	2200      	movs	r2, #0
 80113a8:	2100      	movs	r1, #0
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f005 fccf 	bl	8016d4e <USBD_LL_Transmit>

  return USBD_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b082      	sub	sp, #8
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2205      	movs	r2, #5
 80113c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80113ca:	2300      	movs	r3, #0
 80113cc:	2200      	movs	r2, #0
 80113ce:	2100      	movs	r1, #0
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f005 fcdf 	bl	8016d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80113ea:	79fb      	ldrb	r3, [r7, #7]
 80113ec:	4a08      	ldr	r2, [pc, #32]	; (8011410 <disk_status+0x30>)
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	79fa      	ldrb	r2, [r7, #7]
 80113f8:	4905      	ldr	r1, [pc, #20]	; (8011410 <disk_status+0x30>)
 80113fa:	440a      	add	r2, r1
 80113fc:	7a12      	ldrb	r2, [r2, #8]
 80113fe:	4610      	mov	r0, r2
 8011400:	4798      	blx	r3
 8011402:	4603      	mov	r3, r0
 8011404:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011406:	7bfb      	ldrb	r3, [r7, #15]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3710      	adds	r7, #16
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	20000a18 	.word	0x20000a18

08011414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	4603      	mov	r3, r0
 801141c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	4a0d      	ldr	r2, [pc, #52]	; (801145c <disk_initialize+0x48>)
 8011426:	5cd3      	ldrb	r3, [r2, r3]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d111      	bne.n	8011450 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	4a0b      	ldr	r2, [pc, #44]	; (801145c <disk_initialize+0x48>)
 8011430:	2101      	movs	r1, #1
 8011432:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011434:	79fb      	ldrb	r3, [r7, #7]
 8011436:	4a09      	ldr	r2, [pc, #36]	; (801145c <disk_initialize+0x48>)
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	79fa      	ldrb	r2, [r7, #7]
 8011442:	4906      	ldr	r1, [pc, #24]	; (801145c <disk_initialize+0x48>)
 8011444:	440a      	add	r2, r1
 8011446:	7a12      	ldrb	r2, [r2, #8]
 8011448:	4610      	mov	r0, r2
 801144a:	4798      	blx	r3
 801144c:	4603      	mov	r3, r0
 801144e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011450:	7bfb      	ldrb	r3, [r7, #15]
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	20000a18 	.word	0x20000a18

08011460 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011460:	b590      	push	{r4, r7, lr}
 8011462:	b087      	sub	sp, #28
 8011464:	af00      	add	r7, sp, #0
 8011466:	60b9      	str	r1, [r7, #8]
 8011468:	607a      	str	r2, [r7, #4]
 801146a:	603b      	str	r3, [r7, #0]
 801146c:	4603      	mov	r3, r0
 801146e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011470:	7bfb      	ldrb	r3, [r7, #15]
 8011472:	4a0a      	ldr	r2, [pc, #40]	; (801149c <disk_read+0x3c>)
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4413      	add	r3, r2
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	689c      	ldr	r4, [r3, #8]
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	4a07      	ldr	r2, [pc, #28]	; (801149c <disk_read+0x3c>)
 8011480:	4413      	add	r3, r2
 8011482:	7a18      	ldrb	r0, [r3, #8]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	68b9      	ldr	r1, [r7, #8]
 801148a:	47a0      	blx	r4
 801148c:	4603      	mov	r3, r0
 801148e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011490:	7dfb      	ldrb	r3, [r7, #23]
}
 8011492:	4618      	mov	r0, r3
 8011494:	371c      	adds	r7, #28
 8011496:	46bd      	mov	sp, r7
 8011498:	bd90      	pop	{r4, r7, pc}
 801149a:	bf00      	nop
 801149c:	20000a18 	.word	0x20000a18

080114a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80114a0:	b590      	push	{r4, r7, lr}
 80114a2:	b087      	sub	sp, #28
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60b9      	str	r1, [r7, #8]
 80114a8:	607a      	str	r2, [r7, #4]
 80114aa:	603b      	str	r3, [r7, #0]
 80114ac:	4603      	mov	r3, r0
 80114ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80114b0:	7bfb      	ldrb	r3, [r7, #15]
 80114b2:	4a0a      	ldr	r2, [pc, #40]	; (80114dc <disk_write+0x3c>)
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	4413      	add	r3, r2
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	68dc      	ldr	r4, [r3, #12]
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
 80114be:	4a07      	ldr	r2, [pc, #28]	; (80114dc <disk_write+0x3c>)
 80114c0:	4413      	add	r3, r2
 80114c2:	7a18      	ldrb	r0, [r3, #8]
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	68b9      	ldr	r1, [r7, #8]
 80114ca:	47a0      	blx	r4
 80114cc:	4603      	mov	r3, r0
 80114ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80114d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	371c      	adds	r7, #28
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd90      	pop	{r4, r7, pc}
 80114da:	bf00      	nop
 80114dc:	20000a18 	.word	0x20000a18

080114e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	4603      	mov	r3, r0
 80114e8:	603a      	str	r2, [r7, #0]
 80114ea:	71fb      	strb	r3, [r7, #7]
 80114ec:	460b      	mov	r3, r1
 80114ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80114f0:	79fb      	ldrb	r3, [r7, #7]
 80114f2:	4a09      	ldr	r2, [pc, #36]	; (8011518 <disk_ioctl+0x38>)
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4413      	add	r3, r2
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	79fa      	ldrb	r2, [r7, #7]
 80114fe:	4906      	ldr	r1, [pc, #24]	; (8011518 <disk_ioctl+0x38>)
 8011500:	440a      	add	r2, r1
 8011502:	7a10      	ldrb	r0, [r2, #8]
 8011504:	79b9      	ldrb	r1, [r7, #6]
 8011506:	683a      	ldr	r2, [r7, #0]
 8011508:	4798      	blx	r3
 801150a:	4603      	mov	r3, r0
 801150c:	73fb      	strb	r3, [r7, #15]
  return res;
 801150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011510:	4618      	mov	r0, r3
 8011512:	3710      	adds	r7, #16
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	20000a18 	.word	0x20000a18

0801151c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801151c:	b480      	push	{r7}
 801151e:	b085      	sub	sp, #20
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	3301      	adds	r3, #1
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801152c:	89fb      	ldrh	r3, [r7, #14]
 801152e:	021b      	lsls	r3, r3, #8
 8011530:	b21a      	sxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	b21b      	sxth	r3, r3
 8011538:	4313      	orrs	r3, r2
 801153a:	b21b      	sxth	r3, r3
 801153c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801153e:	89fb      	ldrh	r3, [r7, #14]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3303      	adds	r3, #3
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	021b      	lsls	r3, r3, #8
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	3202      	adds	r2, #2
 8011564:	7812      	ldrb	r2, [r2, #0]
 8011566:	4313      	orrs	r3, r2
 8011568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	021b      	lsls	r3, r3, #8
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	3201      	adds	r2, #1
 8011572:	7812      	ldrb	r2, [r2, #0]
 8011574:	4313      	orrs	r3, r2
 8011576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	021b      	lsls	r3, r3, #8
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	7812      	ldrb	r2, [r2, #0]
 8011580:	4313      	orrs	r3, r2
 8011582:	60fb      	str	r3, [r7, #12]
	return rv;
 8011584:	68fb      	ldr	r3, [r7, #12]
}
 8011586:	4618      	mov	r0, r3
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011592:	b480      	push	{r7}
 8011594:	b083      	sub	sp, #12
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
 801159a:	460b      	mov	r3, r1
 801159c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	1c5a      	adds	r2, r3, #1
 80115a2:	607a      	str	r2, [r7, #4]
 80115a4:	887a      	ldrh	r2, [r7, #2]
 80115a6:	b2d2      	uxtb	r2, r2
 80115a8:	701a      	strb	r2, [r3, #0]
 80115aa:	887b      	ldrh	r3, [r7, #2]
 80115ac:	0a1b      	lsrs	r3, r3, #8
 80115ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	607a      	str	r2, [r7, #4]
 80115b6:	887a      	ldrh	r2, [r7, #2]
 80115b8:	b2d2      	uxtb	r2, r2
 80115ba:	701a      	strb	r2, [r3, #0]
}
 80115bc:	bf00      	nop
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	607a      	str	r2, [r7, #4]
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	b2d2      	uxtb	r2, r2
 80115dc:	701a      	strb	r2, [r3, #0]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	0a1b      	lsrs	r3, r3, #8
 80115e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	1c5a      	adds	r2, r3, #1
 80115e8:	607a      	str	r2, [r7, #4]
 80115ea:	683a      	ldr	r2, [r7, #0]
 80115ec:	b2d2      	uxtb	r2, r2
 80115ee:	701a      	strb	r2, [r3, #0]
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	0a1b      	lsrs	r3, r3, #8
 80115f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	1c5a      	adds	r2, r3, #1
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	b2d2      	uxtb	r2, r2
 8011600:	701a      	strb	r2, [r3, #0]
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	0a1b      	lsrs	r3, r3, #8
 8011606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	1c5a      	adds	r2, r3, #1
 801160c:	607a      	str	r2, [r7, #4]
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	b2d2      	uxtb	r2, r2
 8011612:	701a      	strb	r2, [r3, #0]
}
 8011614:	bf00      	nop
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr

08011620 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011620:	b480      	push	{r7}
 8011622:	b087      	sub	sp, #28
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00d      	beq.n	8011656 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801163a:	693a      	ldr	r2, [r7, #16]
 801163c:	1c53      	adds	r3, r2, #1
 801163e:	613b      	str	r3, [r7, #16]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	1c59      	adds	r1, r3, #1
 8011644:	6179      	str	r1, [r7, #20]
 8011646:	7812      	ldrb	r2, [r2, #0]
 8011648:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	3b01      	subs	r3, #1
 801164e:	607b      	str	r3, [r7, #4]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1f1      	bne.n	801163a <mem_cpy+0x1a>
	}
}
 8011656:	bf00      	nop
 8011658:	371c      	adds	r7, #28
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011662:	b480      	push	{r7}
 8011664:	b087      	sub	sp, #28
 8011666:	af00      	add	r7, sp, #0
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	617a      	str	r2, [r7, #20]
 8011678:	68ba      	ldr	r2, [r7, #8]
 801167a:	b2d2      	uxtb	r2, r2
 801167c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	3b01      	subs	r3, #1
 8011682:	607b      	str	r3, [r7, #4]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d1f3      	bne.n	8011672 <mem_set+0x10>
}
 801168a:	bf00      	nop
 801168c:	371c      	adds	r7, #28
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr

08011696 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011696:	b480      	push	{r7}
 8011698:	b089      	sub	sp, #36	; 0x24
 801169a:	af00      	add	r7, sp, #0
 801169c:	60f8      	str	r0, [r7, #12]
 801169e:	60b9      	str	r1, [r7, #8]
 80116a0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	61fb      	str	r3, [r7, #28]
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80116aa:	2300      	movs	r3, #0
 80116ac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	61fa      	str	r2, [r7, #28]
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	4619      	mov	r1, r3
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	1c5a      	adds	r2, r3, #1
 80116bc:	61ba      	str	r2, [r7, #24]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	1acb      	subs	r3, r1, r3
 80116c2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	3b01      	subs	r3, #1
 80116c8:	607b      	str	r3, [r7, #4]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d002      	beq.n	80116d6 <mem_cmp+0x40>
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0eb      	beq.n	80116ae <mem_cmp+0x18>

	return r;
 80116d6:	697b      	ldr	r3, [r7, #20]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3724      	adds	r7, #36	; 0x24
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80116ee:	e002      	b.n	80116f6 <chk_chr+0x12>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3301      	adds	r3, #1
 80116f4:	607b      	str	r3, [r7, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d005      	beq.n	801170a <chk_chr+0x26>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	461a      	mov	r2, r3
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	4293      	cmp	r3, r2
 8011708:	d1f2      	bne.n	80116f0 <chk_chr+0xc>
	return *str;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	781b      	ldrb	r3, [r3, #0]
}
 801170e:	4618      	mov	r0, r3
 8011710:	370c      	adds	r7, #12
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
	...

0801171c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801171c:	b480      	push	{r7}
 801171e:	b085      	sub	sp, #20
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011726:	2300      	movs	r3, #0
 8011728:	60bb      	str	r3, [r7, #8]
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	60fb      	str	r3, [r7, #12]
 801172e:	e029      	b.n	8011784 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011730:	4a27      	ldr	r2, [pc, #156]	; (80117d0 <chk_lock+0xb4>)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	4413      	add	r3, r2
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d01d      	beq.n	801177a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801173e:	4a24      	ldr	r2, [pc, #144]	; (80117d0 <chk_lock+0xb4>)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	011b      	lsls	r3, r3, #4
 8011744:	4413      	add	r3, r2
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d116      	bne.n	801177e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011750:	4a1f      	ldr	r2, [pc, #124]	; (80117d0 <chk_lock+0xb4>)
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	011b      	lsls	r3, r3, #4
 8011756:	4413      	add	r3, r2
 8011758:	3304      	adds	r3, #4
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011760:	429a      	cmp	r2, r3
 8011762:	d10c      	bne.n	801177e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011764:	4a1a      	ldr	r2, [pc, #104]	; (80117d0 <chk_lock+0xb4>)
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	4413      	add	r3, r2
 801176c:	3308      	adds	r3, #8
 801176e:	681a      	ldr	r2, [r3, #0]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011774:	429a      	cmp	r2, r3
 8011776:	d102      	bne.n	801177e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011778:	e007      	b.n	801178a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801177a:	2301      	movs	r3, #1
 801177c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3301      	adds	r3, #1
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d9d2      	bls.n	8011730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b02      	cmp	r3, #2
 801178e:	d109      	bne.n	80117a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <chk_lock+0x80>
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b02      	cmp	r3, #2
 801179a:	d101      	bne.n	80117a0 <chk_lock+0x84>
 801179c:	2300      	movs	r3, #0
 801179e:	e010      	b.n	80117c2 <chk_lock+0xa6>
 80117a0:	2312      	movs	r3, #18
 80117a2:	e00e      	b.n	80117c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d108      	bne.n	80117bc <chk_lock+0xa0>
 80117aa:	4a09      	ldr	r2, [pc, #36]	; (80117d0 <chk_lock+0xb4>)
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	011b      	lsls	r3, r3, #4
 80117b0:	4413      	add	r3, r2
 80117b2:	330c      	adds	r3, #12
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117ba:	d101      	bne.n	80117c0 <chk_lock+0xa4>
 80117bc:	2310      	movs	r3, #16
 80117be:	e000      	b.n	80117c2 <chk_lock+0xa6>
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
 80117ce:	bf00      	nop
 80117d0:	200009f8 	.word	0x200009f8

080117d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117da:	2300      	movs	r3, #0
 80117dc:	607b      	str	r3, [r7, #4]
 80117de:	e002      	b.n	80117e6 <enq_lock+0x12>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d806      	bhi.n	80117fa <enq_lock+0x26>
 80117ec:	4a09      	ldr	r2, [pc, #36]	; (8011814 <enq_lock+0x40>)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	011b      	lsls	r3, r3, #4
 80117f2:	4413      	add	r3, r2
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d1f2      	bne.n	80117e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b02      	cmp	r3, #2
 80117fe:	bf14      	ite	ne
 8011800:	2301      	movne	r3, #1
 8011802:	2300      	moveq	r3, #0
 8011804:	b2db      	uxtb	r3, r3
}
 8011806:	4618      	mov	r0, r3
 8011808:	370c      	adds	r7, #12
 801180a:	46bd      	mov	sp, r7
 801180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011810:	4770      	bx	lr
 8011812:	bf00      	nop
 8011814:	200009f8 	.word	0x200009f8

08011818 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011822:	2300      	movs	r3, #0
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	e01f      	b.n	8011868 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011828:	4a41      	ldr	r2, [pc, #260]	; (8011930 <inc_lock+0x118>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	4413      	add	r3, r2
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	429a      	cmp	r2, r3
 8011838:	d113      	bne.n	8011862 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801183a:	4a3d      	ldr	r2, [pc, #244]	; (8011930 <inc_lock+0x118>)
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	011b      	lsls	r3, r3, #4
 8011840:	4413      	add	r3, r2
 8011842:	3304      	adds	r3, #4
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801184a:	429a      	cmp	r2, r3
 801184c:	d109      	bne.n	8011862 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801184e:	4a38      	ldr	r2, [pc, #224]	; (8011930 <inc_lock+0x118>)
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	011b      	lsls	r3, r3, #4
 8011854:	4413      	add	r3, r2
 8011856:	3308      	adds	r3, #8
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801185e:	429a      	cmp	r2, r3
 8011860:	d006      	beq.n	8011870 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	3301      	adds	r3, #1
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d9dc      	bls.n	8011828 <inc_lock+0x10>
 801186e:	e000      	b.n	8011872 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011870:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2b02      	cmp	r3, #2
 8011876:	d132      	bne.n	80118de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]
 801187c:	e002      	b.n	8011884 <inc_lock+0x6c>
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	3301      	adds	r3, #1
 8011882:	60fb      	str	r3, [r7, #12]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d806      	bhi.n	8011898 <inc_lock+0x80>
 801188a:	4a29      	ldr	r2, [pc, #164]	; (8011930 <inc_lock+0x118>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	4413      	add	r3, r2
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1f2      	bne.n	801187e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b02      	cmp	r3, #2
 801189c:	d101      	bne.n	80118a2 <inc_lock+0x8a>
 801189e:	2300      	movs	r3, #0
 80118a0:	e040      	b.n	8011924 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	4922      	ldr	r1, [pc, #136]	; (8011930 <inc_lock+0x118>)
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	011b      	lsls	r3, r3, #4
 80118ac:	440b      	add	r3, r1
 80118ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	689a      	ldr	r2, [r3, #8]
 80118b4:	491e      	ldr	r1, [pc, #120]	; (8011930 <inc_lock+0x118>)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	440b      	add	r3, r1
 80118bc:	3304      	adds	r3, #4
 80118be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	695a      	ldr	r2, [r3, #20]
 80118c4:	491a      	ldr	r1, [pc, #104]	; (8011930 <inc_lock+0x118>)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	440b      	add	r3, r1
 80118cc:	3308      	adds	r3, #8
 80118ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80118d0:	4a17      	ldr	r2, [pc, #92]	; (8011930 <inc_lock+0x118>)
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	011b      	lsls	r3, r3, #4
 80118d6:	4413      	add	r3, r2
 80118d8:	330c      	adds	r3, #12
 80118da:	2200      	movs	r2, #0
 80118dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d009      	beq.n	80118f8 <inc_lock+0xe0>
 80118e4:	4a12      	ldr	r2, [pc, #72]	; (8011930 <inc_lock+0x118>)
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	011b      	lsls	r3, r3, #4
 80118ea:	4413      	add	r3, r2
 80118ec:	330c      	adds	r3, #12
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <inc_lock+0xe0>
 80118f4:	2300      	movs	r3, #0
 80118f6:	e015      	b.n	8011924 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d108      	bne.n	8011910 <inc_lock+0xf8>
 80118fe:	4a0c      	ldr	r2, [pc, #48]	; (8011930 <inc_lock+0x118>)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	330c      	adds	r3, #12
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	3301      	adds	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	e001      	b.n	8011914 <inc_lock+0xfc>
 8011910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011914:	4906      	ldr	r1, [pc, #24]	; (8011930 <inc_lock+0x118>)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	011b      	lsls	r3, r3, #4
 801191a:	440b      	add	r3, r1
 801191c:	330c      	adds	r3, #12
 801191e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	3301      	adds	r3, #1
}
 8011924:	4618      	mov	r0, r3
 8011926:	3714      	adds	r7, #20
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr
 8011930:	200009f8 	.word	0x200009f8

08011934 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011934:	b480      	push	{r7}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	3b01      	subs	r3, #1
 8011940:	607b      	str	r3, [r7, #4]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d825      	bhi.n	8011994 <dec_lock+0x60>
		n = Files[i].ctr;
 8011948:	4a17      	ldr	r2, [pc, #92]	; (80119a8 <dec_lock+0x74>)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	011b      	lsls	r3, r3, #4
 801194e:	4413      	add	r3, r2
 8011950:	330c      	adds	r3, #12
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011956:	89fb      	ldrh	r3, [r7, #14]
 8011958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801195c:	d101      	bne.n	8011962 <dec_lock+0x2e>
 801195e:	2300      	movs	r3, #0
 8011960:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011962:	89fb      	ldrh	r3, [r7, #14]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <dec_lock+0x3a>
 8011968:	89fb      	ldrh	r3, [r7, #14]
 801196a:	3b01      	subs	r3, #1
 801196c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801196e:	4a0e      	ldr	r2, [pc, #56]	; (80119a8 <dec_lock+0x74>)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	011b      	lsls	r3, r3, #4
 8011974:	4413      	add	r3, r2
 8011976:	330c      	adds	r3, #12
 8011978:	89fa      	ldrh	r2, [r7, #14]
 801197a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801197c:	89fb      	ldrh	r3, [r7, #14]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d105      	bne.n	801198e <dec_lock+0x5a>
 8011982:	4a09      	ldr	r2, [pc, #36]	; (80119a8 <dec_lock+0x74>)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	011b      	lsls	r3, r3, #4
 8011988:	4413      	add	r3, r2
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801198e:	2300      	movs	r3, #0
 8011990:	737b      	strb	r3, [r7, #13]
 8011992:	e001      	b.n	8011998 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011994:	2302      	movs	r3, #2
 8011996:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011998:	7b7b      	ldrb	r3, [r7, #13]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	200009f8 	.word	0x200009f8

080119ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80119b4:	2300      	movs	r3, #0
 80119b6:	60fb      	str	r3, [r7, #12]
 80119b8:	e010      	b.n	80119dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80119ba:	4a0d      	ldr	r2, [pc, #52]	; (80119f0 <clear_lock+0x44>)
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	011b      	lsls	r3, r3, #4
 80119c0:	4413      	add	r3, r2
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d105      	bne.n	80119d6 <clear_lock+0x2a>
 80119ca:	4a09      	ldr	r2, [pc, #36]	; (80119f0 <clear_lock+0x44>)
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	011b      	lsls	r3, r3, #4
 80119d0:	4413      	add	r3, r2
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3301      	adds	r3, #1
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d9eb      	bls.n	80119ba <clear_lock+0xe>
	}
}
 80119e2:	bf00      	nop
 80119e4:	3714      	adds	r7, #20
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop
 80119f0:	200009f8 	.word	0x200009f8

080119f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	78db      	ldrb	r3, [r3, #3]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d034      	beq.n	8011a72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7858      	ldrb	r0, [r3, #1]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a18:	2301      	movs	r3, #1
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	f7ff fd40 	bl	80114a0 <disk_write>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a26:	2301      	movs	r3, #1
 8011a28:	73fb      	strb	r3, [r7, #15]
 8011a2a:	e022      	b.n	8011a72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	1ad2      	subs	r2, r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	69db      	ldr	r3, [r3, #28]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d217      	bcs.n	8011a72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	789b      	ldrb	r3, [r3, #2]
 8011a46:	613b      	str	r3, [r7, #16]
 8011a48:	e010      	b.n	8011a6c <sync_window+0x78>
					wsect += fs->fsize;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	69db      	ldr	r3, [r3, #28]
 8011a4e:	697a      	ldr	r2, [r7, #20]
 8011a50:	4413      	add	r3, r2
 8011a52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7858      	ldrb	r0, [r3, #1]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011a5e:	2301      	movs	r3, #1
 8011a60:	697a      	ldr	r2, [r7, #20]
 8011a62:	f7ff fd1d 	bl	80114a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	613b      	str	r3, [r7, #16]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d8eb      	bhi.n	8011a4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8e:	683a      	ldr	r2, [r7, #0]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d01b      	beq.n	8011acc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff ffad 	bl	80119f4 <sync_window>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a9e:	7bfb      	ldrb	r3, [r7, #15]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d113      	bne.n	8011acc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	7858      	ldrb	r0, [r3, #1]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011aae:	2301      	movs	r3, #1
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	f7ff fcd5 	bl	8011460 <disk_read>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	683a      	ldr	r2, [r7, #0]
 8011aca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7ff ff87 	bl	80119f4 <sync_window>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011aea:	7bfb      	ldrb	r3, [r7, #15]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d159      	bne.n	8011ba4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b03      	cmp	r3, #3
 8011af6:	d149      	bne.n	8011b8c <sync_fs+0xb4>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	791b      	ldrb	r3, [r3, #4]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d145      	bne.n	8011b8c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	899b      	ldrh	r3, [r3, #12]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	2100      	movs	r1, #0
 8011b0e:	f7ff fda8 	bl	8011662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	3334      	adds	r3, #52	; 0x34
 8011b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b1a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7ff fd37 	bl	8011592 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	3334      	adds	r3, #52	; 0x34
 8011b28:	4921      	ldr	r1, [pc, #132]	; (8011bb0 <sync_fs+0xd8>)
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7ff fd4c 	bl	80115c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	3334      	adds	r3, #52	; 0x34
 8011b34:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011b38:	491e      	ldr	r1, [pc, #120]	; (8011bb4 <sync_fs+0xdc>)
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7ff fd44 	bl	80115c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	3334      	adds	r3, #52	; 0x34
 8011b44:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	4610      	mov	r0, r2
 8011b50:	f7ff fd3a 	bl	80115c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3334      	adds	r3, #52	; 0x34
 8011b58:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	691b      	ldr	r3, [r3, #16]
 8011b60:	4619      	mov	r1, r3
 8011b62:	4610      	mov	r0, r2
 8011b64:	f7ff fd30 	bl	80115c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6a1b      	ldr	r3, [r3, #32]
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	7858      	ldrb	r0, [r3, #1]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b80:	2301      	movs	r3, #1
 8011b82:	f7ff fc8d 	bl	80114a0 <disk_write>
			fs->fsi_flag = 0;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	785b      	ldrb	r3, [r3, #1]
 8011b90:	2200      	movs	r2, #0
 8011b92:	2100      	movs	r1, #0
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff fca3 	bl	80114e0 <disk_ioctl>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <sync_fs+0xcc>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	41615252 	.word	0x41615252
 8011bb4:	61417272 	.word	0x61417272

08011bb8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	3b02      	subs	r3, #2
 8011bc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	699b      	ldr	r3, [r3, #24]
 8011bcc:	3b02      	subs	r3, #2
 8011bce:	683a      	ldr	r2, [r7, #0]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d301      	bcc.n	8011bd8 <clust2sect+0x20>
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	e008      	b.n	8011bea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	895b      	ldrh	r3, [r3, #10]
 8011bdc:	461a      	mov	r2, r3
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	fb03 f202 	mul.w	r2, r3, r2
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be8:	4413      	add	r3, r2
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	370c      	adds	r7, #12
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr

08011bf6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011bf6:	b580      	push	{r7, lr}
 8011bf8:	b086      	sub	sp, #24
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d904      	bls.n	8011c16 <get_fat+0x20>
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	699b      	ldr	r3, [r3, #24]
 8011c10:	683a      	ldr	r2, [r7, #0]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d302      	bcc.n	8011c1c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c16:	2301      	movs	r3, #1
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	e0b7      	b.n	8011d8c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b02      	cmp	r3, #2
 8011c28:	d05a      	beq.n	8011ce0 <get_fat+0xea>
 8011c2a:	2b03      	cmp	r3, #3
 8011c2c:	d07d      	beq.n	8011d2a <get_fat+0x134>
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	f040 80a2 	bne.w	8011d78 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	085b      	lsrs	r3, r3, #1
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	4413      	add	r3, r2
 8011c40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	899b      	ldrh	r3, [r3, #12]
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c52:	4413      	add	r3, r2
 8011c54:	4619      	mov	r1, r3
 8011c56:	6938      	ldr	r0, [r7, #16]
 8011c58:	f7ff ff10 	bl	8011a7c <move_window>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f040 808d 	bne.w	8011d7e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	1c5a      	adds	r2, r3, #1
 8011c68:	60fa      	str	r2, [r7, #12]
 8011c6a:	693a      	ldr	r2, [r7, #16]
 8011c6c:	8992      	ldrh	r2, [r2, #12]
 8011c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c72:	fb02 f201 	mul.w	r2, r2, r1
 8011c76:	1a9b      	subs	r3, r3, r2
 8011c78:	693a      	ldr	r2, [r7, #16]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011c80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	899b      	ldrh	r3, [r3, #12]
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c92:	4413      	add	r3, r2
 8011c94:	4619      	mov	r1, r3
 8011c96:	6938      	ldr	r0, [r7, #16]
 8011c98:	f7ff fef0 	bl	8011a7c <move_window>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d16f      	bne.n	8011d82 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cae:	fb02 f201 	mul.w	r2, r2, r1
 8011cb2:	1a9b      	subs	r3, r3, r2
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011cbc:	021b      	lsls	r3, r3, #8
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	f003 0301 	and.w	r3, r3, #1
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d002      	beq.n	8011cd6 <get_fat+0xe0>
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	091b      	lsrs	r3, r3, #4
 8011cd4:	e002      	b.n	8011cdc <get_fat+0xe6>
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011cdc:	617b      	str	r3, [r7, #20]
			break;
 8011cde:	e055      	b.n	8011d8c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	899b      	ldrh	r3, [r3, #12]
 8011ce8:	085b      	lsrs	r3, r3, #1
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	4619      	mov	r1, r3
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cf4:	4413      	add	r3, r2
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6938      	ldr	r0, [r7, #16]
 8011cfa:	f7ff febf 	bl	8011a7c <move_window>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d140      	bne.n	8011d86 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	693a      	ldr	r2, [r7, #16]
 8011d10:	8992      	ldrh	r2, [r2, #12]
 8011d12:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d16:	fb02 f200 	mul.w	r2, r2, r0
 8011d1a:	1a9b      	subs	r3, r3, r2
 8011d1c:	440b      	add	r3, r1
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fbfc 	bl	801151c <ld_word>
 8011d24:	4603      	mov	r3, r0
 8011d26:	617b      	str	r3, [r7, #20]
			break;
 8011d28:	e030      	b.n	8011d8c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	899b      	ldrh	r3, [r3, #12]
 8011d32:	089b      	lsrs	r3, r3, #2
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	4619      	mov	r1, r3
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d3e:	4413      	add	r3, r2
 8011d40:	4619      	mov	r1, r3
 8011d42:	6938      	ldr	r0, [r7, #16]
 8011d44:	f7ff fe9a 	bl	8011a7c <move_window>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d11d      	bne.n	8011d8a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	693a      	ldr	r2, [r7, #16]
 8011d5a:	8992      	ldrh	r2, [r2, #12]
 8011d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d60:	fb02 f200 	mul.w	r2, r2, r0
 8011d64:	1a9b      	subs	r3, r3, r2
 8011d66:	440b      	add	r3, r1
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7ff fbef 	bl	801154c <ld_dword>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011d74:	617b      	str	r3, [r7, #20]
			break;
 8011d76:	e009      	b.n	8011d8c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011d78:	2301      	movs	r3, #1
 8011d7a:	617b      	str	r3, [r7, #20]
 8011d7c:	e006      	b.n	8011d8c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d7e:	bf00      	nop
 8011d80:	e004      	b.n	8011d8c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d82:	bf00      	nop
 8011d84:	e002      	b.n	8011d8c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d86:	bf00      	nop
 8011d88:	e000      	b.n	8011d8c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d8a:	bf00      	nop
		}
	}

	return val;
 8011d8c:	697b      	ldr	r3, [r7, #20]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3718      	adds	r7, #24
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011d96:	b590      	push	{r4, r7, lr}
 8011d98:	b089      	sub	sp, #36	; 0x24
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	60b9      	str	r1, [r7, #8]
 8011da0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011da2:	2302      	movs	r3, #2
 8011da4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	f240 8106 	bls.w	8011fba <put_fat+0x224>
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	699b      	ldr	r3, [r3, #24]
 8011db2:	68ba      	ldr	r2, [r7, #8]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	f080 8100 	bcs.w	8011fba <put_fat+0x224>
		switch (fs->fs_type) {
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	f000 8088 	beq.w	8011ed4 <put_fat+0x13e>
 8011dc4:	2b03      	cmp	r3, #3
 8011dc6:	f000 80b0 	beq.w	8011f2a <put_fat+0x194>
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	f040 80f5 	bne.w	8011fba <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	61bb      	str	r3, [r7, #24]
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	085b      	lsrs	r3, r3, #1
 8011dd8:	69ba      	ldr	r2, [r7, #24]
 8011dda:	4413      	add	r3, r2
 8011ddc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	4619      	mov	r1, r3
 8011de8:	69bb      	ldr	r3, [r7, #24]
 8011dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dee:	4413      	add	r3, r2
 8011df0:	4619      	mov	r1, r3
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	f7ff fe42 	bl	8011a7c <move_window>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011dfc:	7ffb      	ldrb	r3, [r7, #31]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f040 80d4 	bne.w	8011fac <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	1c5a      	adds	r2, r3, #1
 8011e0e:	61ba      	str	r2, [r7, #24]
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	8992      	ldrh	r2, [r2, #12]
 8011e14:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e18:	fb02 f200 	mul.w	r2, r2, r0
 8011e1c:	1a9b      	subs	r3, r3, r2
 8011e1e:	440b      	add	r3, r1
 8011e20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00d      	beq.n	8011e48 <put_fat+0xb2>
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	b25b      	sxtb	r3, r3
 8011e32:	f003 030f 	and.w	r3, r3, #15
 8011e36:	b25a      	sxtb	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	011b      	lsls	r3, r3, #4
 8011e3e:	b25b      	sxtb	r3, r3
 8011e40:	4313      	orrs	r3, r2
 8011e42:	b25b      	sxtb	r3, r3
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	e001      	b.n	8011e4c <put_fat+0xb6>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	697a      	ldr	r2, [r7, #20]
 8011e4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2201      	movs	r2, #1
 8011e54:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	899b      	ldrh	r3, [r3, #12]
 8011e5e:	4619      	mov	r1, r3
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e66:	4413      	add	r3, r2
 8011e68:	4619      	mov	r1, r3
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f7ff fe06 	bl	8011a7c <move_window>
 8011e70:	4603      	mov	r3, r0
 8011e72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e74:	7ffb      	ldrb	r3, [r7, #31]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	f040 809a 	bne.w	8011fb0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	899b      	ldrh	r3, [r3, #12]
 8011e86:	461a      	mov	r2, r3
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e8e:	fb02 f200 	mul.w	r2, r2, r0
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	440b      	add	r3, r1
 8011e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	f003 0301 	and.w	r3, r3, #1
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d003      	beq.n	8011eaa <put_fat+0x114>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	091b      	lsrs	r3, r3, #4
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	e00e      	b.n	8011ec8 <put_fat+0x132>
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	b25b      	sxtb	r3, r3
 8011eb0:	f023 030f 	bic.w	r3, r3, #15
 8011eb4:	b25a      	sxtb	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	0a1b      	lsrs	r3, r3, #8
 8011eba:	b25b      	sxtb	r3, r3
 8011ebc:	f003 030f 	and.w	r3, r3, #15
 8011ec0:	b25b      	sxtb	r3, r3
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	b25b      	sxtb	r3, r3
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	697a      	ldr	r2, [r7, #20]
 8011eca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	70da      	strb	r2, [r3, #3]
			break;
 8011ed2:	e072      	b.n	8011fba <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	899b      	ldrh	r3, [r3, #12]
 8011edc:	085b      	lsrs	r3, r3, #1
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ee8:	4413      	add	r3, r2
 8011eea:	4619      	mov	r1, r3
 8011eec:	68f8      	ldr	r0, [r7, #12]
 8011eee:	f7ff fdc5 	bl	8011a7c <move_window>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ef6:	7ffb      	ldrb	r3, [r7, #31]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d15b      	bne.n	8011fb4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	68fa      	ldr	r2, [r7, #12]
 8011f08:	8992      	ldrh	r2, [r2, #12]
 8011f0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f0e:	fb02 f200 	mul.w	r2, r2, r0
 8011f12:	1a9b      	subs	r3, r3, r2
 8011f14:	440b      	add	r3, r1
 8011f16:	687a      	ldr	r2, [r7, #4]
 8011f18:	b292      	uxth	r2, r2
 8011f1a:	4611      	mov	r1, r2
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fb38 	bl	8011592 <st_word>
			fs->wflag = 1;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2201      	movs	r2, #1
 8011f26:	70da      	strb	r2, [r3, #3]
			break;
 8011f28:	e047      	b.n	8011fba <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	899b      	ldrh	r3, [r3, #12]
 8011f32:	089b      	lsrs	r3, r3, #2
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	4619      	mov	r1, r3
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f3e:	4413      	add	r3, r2
 8011f40:	4619      	mov	r1, r3
 8011f42:	68f8      	ldr	r0, [r7, #12]
 8011f44:	f7ff fd9a 	bl	8011a7c <move_window>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f4c:	7ffb      	ldrb	r3, [r7, #31]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d132      	bne.n	8011fb8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	68fa      	ldr	r2, [r7, #12]
 8011f64:	8992      	ldrh	r2, [r2, #12]
 8011f66:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f6a:	fb02 f200 	mul.w	r2, r2, r0
 8011f6e:	1a9b      	subs	r3, r3, r2
 8011f70:	440b      	add	r3, r1
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7ff faea 	bl	801154c <ld_dword>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011f7e:	4323      	orrs	r3, r4
 8011f80:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	8992      	ldrh	r2, [r2, #12]
 8011f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f94:	fb02 f200 	mul.w	r2, r2, r0
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	440b      	add	r3, r1
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff fb12 	bl	80115c8 <st_dword>
			fs->wflag = 1;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	70da      	strb	r2, [r3, #3]
			break;
 8011faa:	e006      	b.n	8011fba <put_fat+0x224>
			if (res != FR_OK) break;
 8011fac:	bf00      	nop
 8011fae:	e004      	b.n	8011fba <put_fat+0x224>
			if (res != FR_OK) break;
 8011fb0:	bf00      	nop
 8011fb2:	e002      	b.n	8011fba <put_fat+0x224>
			if (res != FR_OK) break;
 8011fb4:	bf00      	nop
 8011fb6:	e000      	b.n	8011fba <put_fat+0x224>
			if (res != FR_OK) break;
 8011fb8:	bf00      	nop
		}
	}
	return res;
 8011fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3724      	adds	r7, #36	; 0x24
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd90      	pop	{r4, r7, pc}

08011fc4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d904      	bls.n	8011fea <remove_chain+0x26>
 8011fe0:	69bb      	ldr	r3, [r7, #24]
 8011fe2:	699b      	ldr	r3, [r3, #24]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d301      	bcc.n	8011fee <remove_chain+0x2a>
 8011fea:	2302      	movs	r3, #2
 8011fec:	e04b      	b.n	8012086 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00c      	beq.n	801200e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff8:	6879      	ldr	r1, [r7, #4]
 8011ffa:	69b8      	ldr	r0, [r7, #24]
 8011ffc:	f7ff fecb 	bl	8011d96 <put_fat>
 8012000:	4603      	mov	r3, r0
 8012002:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012004:	7ffb      	ldrb	r3, [r7, #31]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d001      	beq.n	801200e <remove_chain+0x4a>
 801200a:	7ffb      	ldrb	r3, [r7, #31]
 801200c:	e03b      	b.n	8012086 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801200e:	68b9      	ldr	r1, [r7, #8]
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f7ff fdf0 	bl	8011bf6 <get_fat>
 8012016:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d031      	beq.n	8012082 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d101      	bne.n	8012028 <remove_chain+0x64>
 8012024:	2302      	movs	r3, #2
 8012026:	e02e      	b.n	8012086 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202e:	d101      	bne.n	8012034 <remove_chain+0x70>
 8012030:	2301      	movs	r3, #1
 8012032:	e028      	b.n	8012086 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012034:	2200      	movs	r2, #0
 8012036:	68b9      	ldr	r1, [r7, #8]
 8012038:	69b8      	ldr	r0, [r7, #24]
 801203a:	f7ff feac 	bl	8011d96 <put_fat>
 801203e:	4603      	mov	r3, r0
 8012040:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012042:	7ffb      	ldrb	r3, [r7, #31]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d001      	beq.n	801204c <remove_chain+0x88>
 8012048:	7ffb      	ldrb	r3, [r7, #31]
 801204a:	e01c      	b.n	8012086 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	695a      	ldr	r2, [r3, #20]
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	3b02      	subs	r3, #2
 8012056:	429a      	cmp	r2, r3
 8012058:	d20b      	bcs.n	8012072 <remove_chain+0xae>
			fs->free_clst++;
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	695b      	ldr	r3, [r3, #20]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	791b      	ldrb	r3, [r3, #4]
 8012068:	f043 0301 	orr.w	r3, r3, #1
 801206c:	b2da      	uxtb	r2, r3
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	699b      	ldr	r3, [r3, #24]
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	429a      	cmp	r2, r3
 801207e:	d3c6      	bcc.n	801200e <remove_chain+0x4a>
 8012080:	e000      	b.n	8012084 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012082:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012084:	2300      	movs	r3, #0
}
 8012086:	4618      	mov	r0, r3
 8012088:	3720      	adds	r7, #32
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801208e:	b580      	push	{r7, lr}
 8012090:	b088      	sub	sp, #32
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d10d      	bne.n	80120c0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	691b      	ldr	r3, [r3, #16]
 80120a8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d004      	beq.n	80120ba <create_chain+0x2c>
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	699b      	ldr	r3, [r3, #24]
 80120b4:	69ba      	ldr	r2, [r7, #24]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d31b      	bcc.n	80120f2 <create_chain+0x64>
 80120ba:	2301      	movs	r3, #1
 80120bc:	61bb      	str	r3, [r7, #24]
 80120be:	e018      	b.n	80120f2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff fd97 	bl	8011bf6 <get_fat>
 80120c8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d801      	bhi.n	80120d4 <create_chain+0x46>
 80120d0:	2301      	movs	r3, #1
 80120d2:	e070      	b.n	80121b6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120da:	d101      	bne.n	80120e0 <create_chain+0x52>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	e06a      	b.n	80121b6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d201      	bcs.n	80120ee <create_chain+0x60>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	e063      	b.n	80121b6 <create_chain+0x128>
		scl = clst;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	3301      	adds	r3, #1
 80120fa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	699b      	ldr	r3, [r3, #24]
 8012100:	69fa      	ldr	r2, [r7, #28]
 8012102:	429a      	cmp	r2, r3
 8012104:	d307      	bcc.n	8012116 <create_chain+0x88>
				ncl = 2;
 8012106:	2302      	movs	r3, #2
 8012108:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801210a:	69fa      	ldr	r2, [r7, #28]
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	429a      	cmp	r2, r3
 8012110:	d901      	bls.n	8012116 <create_chain+0x88>
 8012112:	2300      	movs	r3, #0
 8012114:	e04f      	b.n	80121b6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012116:	69f9      	ldr	r1, [r7, #28]
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7ff fd6c 	bl	8011bf6 <get_fat>
 801211e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d00e      	beq.n	8012144 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d003      	beq.n	8012134 <create_chain+0xa6>
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012132:	d101      	bne.n	8012138 <create_chain+0xaa>
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	e03e      	b.n	80121b6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012138:	69fa      	ldr	r2, [r7, #28]
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	429a      	cmp	r2, r3
 801213e:	d1da      	bne.n	80120f6 <create_chain+0x68>
 8012140:	2300      	movs	r3, #0
 8012142:	e038      	b.n	80121b6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012144:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012146:	f04f 32ff 	mov.w	r2, #4294967295
 801214a:	69f9      	ldr	r1, [r7, #28]
 801214c:	6938      	ldr	r0, [r7, #16]
 801214e:	f7ff fe22 	bl	8011d96 <put_fat>
 8012152:	4603      	mov	r3, r0
 8012154:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012156:	7dfb      	ldrb	r3, [r7, #23]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d109      	bne.n	8012170 <create_chain+0xe2>
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d006      	beq.n	8012170 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012162:	69fa      	ldr	r2, [r7, #28]
 8012164:	6839      	ldr	r1, [r7, #0]
 8012166:	6938      	ldr	r0, [r7, #16]
 8012168:	f7ff fe15 	bl	8011d96 <put_fat>
 801216c:	4603      	mov	r3, r0
 801216e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012170:	7dfb      	ldrb	r3, [r7, #23]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d116      	bne.n	80121a4 <create_chain+0x116>
		fs->last_clst = ncl;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	69fa      	ldr	r2, [r7, #28]
 801217a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	695a      	ldr	r2, [r3, #20]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	699b      	ldr	r3, [r3, #24]
 8012184:	3b02      	subs	r3, #2
 8012186:	429a      	cmp	r2, r3
 8012188:	d804      	bhi.n	8012194 <create_chain+0x106>
 801218a:	693b      	ldr	r3, [r7, #16]
 801218c:	695b      	ldr	r3, [r3, #20]
 801218e:	1e5a      	subs	r2, r3, #1
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	791b      	ldrb	r3, [r3, #4]
 8012198:	f043 0301 	orr.w	r3, r3, #1
 801219c:	b2da      	uxtb	r2, r3
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	711a      	strb	r2, [r3, #4]
 80121a2:	e007      	b.n	80121b4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80121a4:	7dfb      	ldrb	r3, [r7, #23]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d102      	bne.n	80121b0 <create_chain+0x122>
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295
 80121ae:	e000      	b.n	80121b2 <create_chain+0x124>
 80121b0:	2301      	movs	r3, #1
 80121b2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80121b4:	69fb      	ldr	r3, [r7, #28]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80121be:	b480      	push	{r7}
 80121c0:	b087      	sub	sp, #28
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d2:	3304      	adds	r3, #4
 80121d4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	899b      	ldrh	r3, [r3, #12]
 80121da:	461a      	mov	r2, r3
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	fbb3 f3f2 	udiv	r3, r3, r2
 80121e2:	68fa      	ldr	r2, [r7, #12]
 80121e4:	8952      	ldrh	r2, [r2, #10]
 80121e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80121ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	1d1a      	adds	r2, r3, #4
 80121f0:	613a      	str	r2, [r7, #16]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <clmt_clust+0x42>
 80121fc:	2300      	movs	r3, #0
 80121fe:	e010      	b.n	8012222 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012200:	697a      	ldr	r2, [r7, #20]
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	429a      	cmp	r2, r3
 8012206:	d307      	bcc.n	8012218 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012208:	697a      	ldr	r2, [r7, #20]
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	617b      	str	r3, [r7, #20]
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	3304      	adds	r3, #4
 8012214:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012216:	e7e9      	b.n	80121ec <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012218:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	4413      	add	r3, r2
}
 8012222:	4618      	mov	r0, r3
 8012224:	371c      	adds	r7, #28
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr

0801222e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b086      	sub	sp, #24
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012244:	d204      	bcs.n	8012250 <dir_sdi+0x22>
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	f003 031f 	and.w	r3, r3, #31
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012250:	2302      	movs	r3, #2
 8012252:	e071      	b.n	8012338 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	683a      	ldr	r2, [r7, #0]
 8012258:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d106      	bne.n	8012274 <dir_sdi+0x46>
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	2b02      	cmp	r3, #2
 801226c:	d902      	bls.n	8012274 <dir_sdi+0x46>
		clst = fs->dirbase;
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012272:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10c      	bne.n	8012294 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	095b      	lsrs	r3, r3, #5
 801227e:	693a      	ldr	r2, [r7, #16]
 8012280:	8912      	ldrh	r2, [r2, #8]
 8012282:	4293      	cmp	r3, r2
 8012284:	d301      	bcc.n	801228a <dir_sdi+0x5c>
 8012286:	2302      	movs	r3, #2
 8012288:	e056      	b.n	8012338 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	61da      	str	r2, [r3, #28]
 8012292:	e02d      	b.n	80122f0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	895b      	ldrh	r3, [r3, #10]
 8012298:	461a      	mov	r2, r3
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	899b      	ldrh	r3, [r3, #12]
 801229e:	fb03 f302 	mul.w	r3, r3, r2
 80122a2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122a4:	e019      	b.n	80122da <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6979      	ldr	r1, [r7, #20]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7ff fca3 	bl	8011bf6 <get_fat>
 80122b0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b8:	d101      	bne.n	80122be <dir_sdi+0x90>
 80122ba:	2301      	movs	r3, #1
 80122bc:	e03c      	b.n	8012338 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d904      	bls.n	80122ce <dir_sdi+0xa0>
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	699b      	ldr	r3, [r3, #24]
 80122c8:	697a      	ldr	r2, [r7, #20]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d301      	bcc.n	80122d2 <dir_sdi+0xa4>
 80122ce:	2302      	movs	r3, #2
 80122d0:	e032      	b.n	8012338 <dir_sdi+0x10a>
			ofs -= csz;
 80122d2:	683a      	ldr	r2, [r7, #0]
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	1ad3      	subs	r3, r2, r3
 80122d8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122da:	683a      	ldr	r2, [r7, #0]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d2e1      	bcs.n	80122a6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80122e2:	6979      	ldr	r1, [r7, #20]
 80122e4:	6938      	ldr	r0, [r7, #16]
 80122e6:	f7ff fc67 	bl	8011bb8 <clust2sect>
 80122ea:	4602      	mov	r2, r0
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	697a      	ldr	r2, [r7, #20]
 80122f4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	69db      	ldr	r3, [r3, #28]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <dir_sdi+0xd4>
 80122fe:	2302      	movs	r3, #2
 8012300:	e01a      	b.n	8012338 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	69da      	ldr	r2, [r3, #28]
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	4619      	mov	r1, r3
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012312:	441a      	add	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	899b      	ldrh	r3, [r3, #12]
 8012322:	461a      	mov	r2, r3
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	fbb3 f0f2 	udiv	r0, r3, r2
 801232a:	fb02 f200 	mul.w	r2, r2, r0
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	18ca      	adds	r2, r1, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012336:	2300      	movs	r3, #0
}
 8012338:	4618      	mov	r0, r3
 801233a:	3718      	adds	r7, #24
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b086      	sub	sp, #24
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	695b      	ldr	r3, [r3, #20]
 8012354:	3320      	adds	r3, #32
 8012356:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	69db      	ldr	r3, [r3, #28]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d003      	beq.n	8012368 <dir_next+0x28>
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012366:	d301      	bcc.n	801236c <dir_next+0x2c>
 8012368:	2304      	movs	r3, #4
 801236a:	e0bb      	b.n	80124e4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	899b      	ldrh	r3, [r3, #12]
 8012370:	461a      	mov	r2, r3
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	fbb3 f1f2 	udiv	r1, r3, r2
 8012378:	fb02 f201 	mul.w	r2, r2, r1
 801237c:	1a9b      	subs	r3, r3, r2
 801237e:	2b00      	cmp	r3, #0
 8012380:	f040 809d 	bne.w	80124be <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	1c5a      	adds	r2, r3, #1
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d10b      	bne.n	80123ae <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	095b      	lsrs	r3, r3, #5
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	8912      	ldrh	r2, [r2, #8]
 801239e:	4293      	cmp	r3, r2
 80123a0:	f0c0 808d 	bcc.w	80124be <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	61da      	str	r2, [r3, #28]
 80123aa:	2304      	movs	r3, #4
 80123ac:	e09a      	b.n	80124e4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	899b      	ldrh	r3, [r3, #12]
 80123b2:	461a      	mov	r2, r3
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80123ba:	68fa      	ldr	r2, [r7, #12]
 80123bc:	8952      	ldrh	r2, [r2, #10]
 80123be:	3a01      	subs	r2, #1
 80123c0:	4013      	ands	r3, r2
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d17b      	bne.n	80124be <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	699b      	ldr	r3, [r3, #24]
 80123cc:	4619      	mov	r1, r3
 80123ce:	4610      	mov	r0, r2
 80123d0:	f7ff fc11 	bl	8011bf6 <get_fat>
 80123d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d801      	bhi.n	80123e0 <dir_next+0xa0>
 80123dc:	2302      	movs	r3, #2
 80123de:	e081      	b.n	80124e4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e6:	d101      	bne.n	80123ec <dir_next+0xac>
 80123e8:	2301      	movs	r3, #1
 80123ea:	e07b      	b.n	80124e4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	699b      	ldr	r3, [r3, #24]
 80123f0:	697a      	ldr	r2, [r7, #20]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d359      	bcc.n	80124aa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d104      	bne.n	8012406 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2200      	movs	r2, #0
 8012400:	61da      	str	r2, [r3, #28]
 8012402:	2304      	movs	r3, #4
 8012404:	e06e      	b.n	80124e4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	699b      	ldr	r3, [r3, #24]
 801240c:	4619      	mov	r1, r3
 801240e:	4610      	mov	r0, r2
 8012410:	f7ff fe3d 	bl	801208e <create_chain>
 8012414:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d101      	bne.n	8012420 <dir_next+0xe0>
 801241c:	2307      	movs	r3, #7
 801241e:	e061      	b.n	80124e4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	2b01      	cmp	r3, #1
 8012424:	d101      	bne.n	801242a <dir_next+0xea>
 8012426:	2302      	movs	r3, #2
 8012428:	e05c      	b.n	80124e4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012430:	d101      	bne.n	8012436 <dir_next+0xf6>
 8012432:	2301      	movs	r3, #1
 8012434:	e056      	b.n	80124e4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012436:	68f8      	ldr	r0, [r7, #12]
 8012438:	f7ff fadc 	bl	80119f4 <sync_window>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <dir_next+0x106>
 8012442:	2301      	movs	r3, #1
 8012444:	e04e      	b.n	80124e4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	899b      	ldrh	r3, [r3, #12]
 8012450:	461a      	mov	r2, r3
 8012452:	2100      	movs	r1, #0
 8012454:	f7ff f905 	bl	8011662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012458:	2300      	movs	r3, #0
 801245a:	613b      	str	r3, [r7, #16]
 801245c:	6979      	ldr	r1, [r7, #20]
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f7ff fbaa 	bl	8011bb8 <clust2sect>
 8012464:	4602      	mov	r2, r0
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	631a      	str	r2, [r3, #48]	; 0x30
 801246a:	e012      	b.n	8012492 <dir_next+0x152>
						fs->wflag = 1;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2201      	movs	r2, #1
 8012470:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	f7ff fabe 	bl	80119f4 <sync_window>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d001      	beq.n	8012482 <dir_next+0x142>
 801247e:	2301      	movs	r3, #1
 8012480:	e030      	b.n	80124e4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	3301      	adds	r3, #1
 8012486:	613b      	str	r3, [r7, #16]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	631a      	str	r2, [r3, #48]	; 0x30
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	895b      	ldrh	r3, [r3, #10]
 8012496:	461a      	mov	r2, r3
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	4293      	cmp	r3, r2
 801249c:	d3e6      	bcc.n	801246c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	1ad2      	subs	r2, r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	697a      	ldr	r2, [r7, #20]
 80124ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124b0:	6979      	ldr	r1, [r7, #20]
 80124b2:	68f8      	ldr	r0, [r7, #12]
 80124b4:	f7ff fb80 	bl	8011bb8 <clust2sect>
 80124b8:	4602      	mov	r2, r0
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	899b      	ldrh	r3, [r3, #12]
 80124ce:	461a      	mov	r2, r3
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80124d6:	fb02 f200 	mul.w	r2, r2, r0
 80124da:	1a9b      	subs	r3, r3, r2
 80124dc:	18ca      	adds	r2, r1, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3718      	adds	r7, #24
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80124fc:	2100      	movs	r1, #0
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7ff fe95 	bl	801222e <dir_sdi>
 8012504:	4603      	mov	r3, r0
 8012506:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012508:	7dfb      	ldrb	r3, [r7, #23]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d12b      	bne.n	8012566 <dir_alloc+0x7a>
		n = 0;
 801250e:	2300      	movs	r3, #0
 8012510:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	69db      	ldr	r3, [r3, #28]
 8012516:	4619      	mov	r1, r3
 8012518:	68f8      	ldr	r0, [r7, #12]
 801251a:	f7ff faaf 	bl	8011a7c <move_window>
 801251e:	4603      	mov	r3, r0
 8012520:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012522:	7dfb      	ldrb	r3, [r7, #23]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d11d      	bne.n	8012564 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6a1b      	ldr	r3, [r3, #32]
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	2be5      	cmp	r3, #229	; 0xe5
 8012530:	d004      	beq.n	801253c <dir_alloc+0x50>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a1b      	ldr	r3, [r3, #32]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d107      	bne.n	801254c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	3301      	adds	r3, #1
 8012540:	613b      	str	r3, [r7, #16]
 8012542:	693a      	ldr	r2, [r7, #16]
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	429a      	cmp	r2, r3
 8012548:	d102      	bne.n	8012550 <dir_alloc+0x64>
 801254a:	e00c      	b.n	8012566 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801254c:	2300      	movs	r3, #0
 801254e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012550:	2101      	movs	r1, #1
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff fef4 	bl	8012340 <dir_next>
 8012558:	4603      	mov	r3, r0
 801255a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801255c:	7dfb      	ldrb	r3, [r7, #23]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d0d7      	beq.n	8012512 <dir_alloc+0x26>
 8012562:	e000      	b.n	8012566 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012564:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012566:	7dfb      	ldrb	r3, [r7, #23]
 8012568:	2b04      	cmp	r3, #4
 801256a:	d101      	bne.n	8012570 <dir_alloc+0x84>
 801256c:	2307      	movs	r3, #7
 801256e:	75fb      	strb	r3, [r7, #23]
	return res;
 8012570:	7dfb      	ldrb	r3, [r7, #23]
}
 8012572:	4618      	mov	r0, r3
 8012574:	3718      	adds	r7, #24
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b084      	sub	sp, #16
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	331a      	adds	r3, #26
 8012588:	4618      	mov	r0, r3
 801258a:	f7fe ffc7 	bl	801151c <ld_word>
 801258e:	4603      	mov	r3, r0
 8012590:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b03      	cmp	r3, #3
 8012598:	d109      	bne.n	80125ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	3314      	adds	r3, #20
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fe ffbc 	bl	801151c <ld_word>
 80125a4:	4603      	mov	r3, r0
 80125a6:	041b      	lsls	r3, r3, #16
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	4313      	orrs	r3, r2
 80125ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80125ae:	68fb      	ldr	r3, [r7, #12]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	331a      	adds	r3, #26
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	b292      	uxth	r2, r2
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7fe ffdf 	bl	8011592 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b03      	cmp	r3, #3
 80125da:	d109      	bne.n	80125f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	f103 0214 	add.w	r2, r3, #20
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	0c1b      	lsrs	r3, r3, #16
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4619      	mov	r1, r3
 80125ea:	4610      	mov	r0, r2
 80125ec:	f7fe ffd1 	bl	8011592 <st_word>
	}
}
 80125f0:	bf00      	nop
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b086      	sub	sp, #24
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012606:	2100      	movs	r1, #0
 8012608:	6878      	ldr	r0, [r7, #4]
 801260a:	f7ff fe10 	bl	801222e <dir_sdi>
 801260e:	4603      	mov	r3, r0
 8012610:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012612:	7dfb      	ldrb	r3, [r7, #23]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d001      	beq.n	801261c <dir_find+0x24>
 8012618:	7dfb      	ldrb	r3, [r7, #23]
 801261a:	e03e      	b.n	801269a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	69db      	ldr	r3, [r3, #28]
 8012620:	4619      	mov	r1, r3
 8012622:	6938      	ldr	r0, [r7, #16]
 8012624:	f7ff fa2a 	bl	8011a7c <move_window>
 8012628:	4603      	mov	r3, r0
 801262a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801262c:	7dfb      	ldrb	r3, [r7, #23]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d12f      	bne.n	8012692 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6a1b      	ldr	r3, [r3, #32]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801263a:	7bfb      	ldrb	r3, [r7, #15]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <dir_find+0x4e>
 8012640:	2304      	movs	r3, #4
 8012642:	75fb      	strb	r3, [r7, #23]
 8012644:	e028      	b.n	8012698 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a1b      	ldr	r3, [r3, #32]
 801264a:	330b      	adds	r3, #11
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012652:	b2da      	uxtb	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6a1b      	ldr	r3, [r3, #32]
 801265c:	330b      	adds	r3, #11
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	f003 0308 	and.w	r3, r3, #8
 8012664:	2b00      	cmp	r3, #0
 8012666:	d10a      	bne.n	801267e <dir_find+0x86>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a18      	ldr	r0, [r3, #32]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	3324      	adds	r3, #36	; 0x24
 8012670:	220b      	movs	r2, #11
 8012672:	4619      	mov	r1, r3
 8012674:	f7ff f80f 	bl	8011696 <mem_cmp>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	d00b      	beq.n	8012696 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801267e:	2100      	movs	r1, #0
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f7ff fe5d 	bl	8012340 <dir_next>
 8012686:	4603      	mov	r3, r0
 8012688:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801268a:	7dfb      	ldrb	r3, [r7, #23]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d0c5      	beq.n	801261c <dir_find+0x24>
 8012690:	e002      	b.n	8012698 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012692:	bf00      	nop
 8012694:	e000      	b.n	8012698 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012696:	bf00      	nop

	return res;
 8012698:	7dfb      	ldrb	r3, [r7, #23]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}

080126a2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b084      	sub	sp, #16
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80126b0:	2101      	movs	r1, #1
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7ff ff1a 	bl	80124ec <dir_alloc>
 80126b8:	4603      	mov	r3, r0
 80126ba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d11c      	bne.n	80126fc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	69db      	ldr	r3, [r3, #28]
 80126c6:	4619      	mov	r1, r3
 80126c8:	68b8      	ldr	r0, [r7, #8]
 80126ca:	f7ff f9d7 	bl	8011a7c <move_window>
 80126ce:	4603      	mov	r3, r0
 80126d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80126d2:	7bfb      	ldrb	r3, [r7, #15]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d111      	bne.n	80126fc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6a1b      	ldr	r3, [r3, #32]
 80126dc:	2220      	movs	r2, #32
 80126de:	2100      	movs	r1, #0
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fe ffbe 	bl	8011662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6a18      	ldr	r0, [r3, #32]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	3324      	adds	r3, #36	; 0x24
 80126ee:	220b      	movs	r2, #11
 80126f0:	4619      	mov	r1, r3
 80126f2:	f7fe ff95 	bl	8011620 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	2201      	movs	r2, #1
 80126fa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80126fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3710      	adds	r7, #16
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
	...

08012708 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b088      	sub	sp, #32
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	3324      	adds	r3, #36	; 0x24
 801271c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801271e:	220b      	movs	r2, #11
 8012720:	2120      	movs	r1, #32
 8012722:	68b8      	ldr	r0, [r7, #8]
 8012724:	f7fe ff9d 	bl	8011662 <mem_set>
	si = i = 0; ni = 8;
 8012728:	2300      	movs	r3, #0
 801272a:	613b      	str	r3, [r7, #16]
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	617b      	str	r3, [r7, #20]
 8012730:	2308      	movs	r3, #8
 8012732:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	1c5a      	adds	r2, r3, #1
 8012738:	617a      	str	r2, [r7, #20]
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	4413      	add	r3, r2
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012742:	7ffb      	ldrb	r3, [r7, #31]
 8012744:	2b20      	cmp	r3, #32
 8012746:	d94e      	bls.n	80127e6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012748:	7ffb      	ldrb	r3, [r7, #31]
 801274a:	2b2f      	cmp	r3, #47	; 0x2f
 801274c:	d006      	beq.n	801275c <create_name+0x54>
 801274e:	7ffb      	ldrb	r3, [r7, #31]
 8012750:	2b5c      	cmp	r3, #92	; 0x5c
 8012752:	d110      	bne.n	8012776 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012754:	e002      	b.n	801275c <create_name+0x54>
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	3301      	adds	r3, #1
 801275a:	617b      	str	r3, [r7, #20]
 801275c:	68fa      	ldr	r2, [r7, #12]
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	4413      	add	r3, r2
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	2b2f      	cmp	r3, #47	; 0x2f
 8012766:	d0f6      	beq.n	8012756 <create_name+0x4e>
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	4413      	add	r3, r2
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	2b5c      	cmp	r3, #92	; 0x5c
 8012772:	d0f0      	beq.n	8012756 <create_name+0x4e>
			break;
 8012774:	e038      	b.n	80127e8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012776:	7ffb      	ldrb	r3, [r7, #31]
 8012778:	2b2e      	cmp	r3, #46	; 0x2e
 801277a:	d003      	beq.n	8012784 <create_name+0x7c>
 801277c:	693a      	ldr	r2, [r7, #16]
 801277e:	69bb      	ldr	r3, [r7, #24]
 8012780:	429a      	cmp	r2, r3
 8012782:	d30c      	bcc.n	801279e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012784:	69bb      	ldr	r3, [r7, #24]
 8012786:	2b0b      	cmp	r3, #11
 8012788:	d002      	beq.n	8012790 <create_name+0x88>
 801278a:	7ffb      	ldrb	r3, [r7, #31]
 801278c:	2b2e      	cmp	r3, #46	; 0x2e
 801278e:	d001      	beq.n	8012794 <create_name+0x8c>
 8012790:	2306      	movs	r3, #6
 8012792:	e044      	b.n	801281e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012794:	2308      	movs	r3, #8
 8012796:	613b      	str	r3, [r7, #16]
 8012798:	230b      	movs	r3, #11
 801279a:	61bb      	str	r3, [r7, #24]
			continue;
 801279c:	e022      	b.n	80127e4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801279e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	da04      	bge.n	80127b0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80127a6:	7ffb      	ldrb	r3, [r7, #31]
 80127a8:	3b80      	subs	r3, #128	; 0x80
 80127aa:	4a1f      	ldr	r2, [pc, #124]	; (8012828 <create_name+0x120>)
 80127ac:	5cd3      	ldrb	r3, [r2, r3]
 80127ae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80127b0:	7ffb      	ldrb	r3, [r7, #31]
 80127b2:	4619      	mov	r1, r3
 80127b4:	481d      	ldr	r0, [pc, #116]	; (801282c <create_name+0x124>)
 80127b6:	f7fe ff95 	bl	80116e4 <chk_chr>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d001      	beq.n	80127c4 <create_name+0xbc>
 80127c0:	2306      	movs	r3, #6
 80127c2:	e02c      	b.n	801281e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80127c4:	7ffb      	ldrb	r3, [r7, #31]
 80127c6:	2b60      	cmp	r3, #96	; 0x60
 80127c8:	d905      	bls.n	80127d6 <create_name+0xce>
 80127ca:	7ffb      	ldrb	r3, [r7, #31]
 80127cc:	2b7a      	cmp	r3, #122	; 0x7a
 80127ce:	d802      	bhi.n	80127d6 <create_name+0xce>
 80127d0:	7ffb      	ldrb	r3, [r7, #31]
 80127d2:	3b20      	subs	r3, #32
 80127d4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	613a      	str	r2, [r7, #16]
 80127dc:	68ba      	ldr	r2, [r7, #8]
 80127de:	4413      	add	r3, r2
 80127e0:	7ffa      	ldrb	r2, [r7, #31]
 80127e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80127e4:	e7a6      	b.n	8012734 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80127e6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	441a      	add	r2, r3
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d101      	bne.n	80127fc <create_name+0xf4>
 80127f8:	2306      	movs	r3, #6
 80127fa:	e010      	b.n	801281e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2be5      	cmp	r3, #229	; 0xe5
 8012802:	d102      	bne.n	801280a <create_name+0x102>
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2205      	movs	r2, #5
 8012808:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801280a:	7ffb      	ldrb	r3, [r7, #31]
 801280c:	2b20      	cmp	r3, #32
 801280e:	d801      	bhi.n	8012814 <create_name+0x10c>
 8012810:	2204      	movs	r2, #4
 8012812:	e000      	b.n	8012816 <create_name+0x10e>
 8012814:	2200      	movs	r2, #0
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	330b      	adds	r3, #11
 801281a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801281c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801281e:	4618      	mov	r0, r3
 8012820:	3720      	adds	r7, #32
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	0801e224 	.word	0x0801e224
 801282c:	0801de10 	.word	0x0801de10

08012830 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b086      	sub	sp, #24
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012844:	e002      	b.n	801284c <follow_path+0x1c>
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	3301      	adds	r3, #1
 801284a:	603b      	str	r3, [r7, #0]
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b2f      	cmp	r3, #47	; 0x2f
 8012852:	d0f8      	beq.n	8012846 <follow_path+0x16>
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b5c      	cmp	r3, #92	; 0x5c
 801285a:	d0f4      	beq.n	8012846 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2200      	movs	r2, #0
 8012860:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	2b1f      	cmp	r3, #31
 8012868:	d80a      	bhi.n	8012880 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2280      	movs	r2, #128	; 0x80
 801286e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012872:	2100      	movs	r1, #0
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f7ff fcda 	bl	801222e <dir_sdi>
 801287a:	4603      	mov	r3, r0
 801287c:	75fb      	strb	r3, [r7, #23]
 801287e:	e048      	b.n	8012912 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012880:	463b      	mov	r3, r7
 8012882:	4619      	mov	r1, r3
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7ff ff3f 	bl	8012708 <create_name>
 801288a:	4603      	mov	r3, r0
 801288c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d139      	bne.n	8012908 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7ff feaf 	bl	80125f8 <dir_find>
 801289a:	4603      	mov	r3, r0
 801289c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80128a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80128a6:	7dfb      	ldrb	r3, [r7, #23]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d00a      	beq.n	80128c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80128ac:	7dfb      	ldrb	r3, [r7, #23]
 80128ae:	2b04      	cmp	r3, #4
 80128b0:	d12c      	bne.n	801290c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80128b2:	7afb      	ldrb	r3, [r7, #11]
 80128b4:	f003 0304 	and.w	r3, r3, #4
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d127      	bne.n	801290c <follow_path+0xdc>
 80128bc:	2305      	movs	r3, #5
 80128be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80128c0:	e024      	b.n	801290c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	f003 0304 	and.w	r3, r3, #4
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d121      	bne.n	8012910 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	799b      	ldrb	r3, [r3, #6]
 80128d0:	f003 0310 	and.w	r3, r3, #16
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d102      	bne.n	80128de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80128d8:	2305      	movs	r3, #5
 80128da:	75fb      	strb	r3, [r7, #23]
 80128dc:	e019      	b.n	8012912 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	695b      	ldr	r3, [r3, #20]
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	8992      	ldrh	r2, [r2, #12]
 80128ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80128f0:	fb02 f200 	mul.w	r2, r2, r0
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	440b      	add	r3, r1
 80128f8:	4619      	mov	r1, r3
 80128fa:	68f8      	ldr	r0, [r7, #12]
 80128fc:	f7ff fe3d 	bl	801257a <ld_clust>
 8012900:	4602      	mov	r2, r0
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012906:	e7bb      	b.n	8012880 <follow_path+0x50>
			if (res != FR_OK) break;
 8012908:	bf00      	nop
 801290a:	e002      	b.n	8012912 <follow_path+0xe2>
				break;
 801290c:	bf00      	nop
 801290e:	e000      	b.n	8012912 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012910:	bf00      	nop
			}
		}
	}

	return res;
 8012912:	7dfb      	ldrb	r3, [r7, #23]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801291c:	b480      	push	{r7}
 801291e:	b087      	sub	sp, #28
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012924:	f04f 33ff 	mov.w	r3, #4294967295
 8012928:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d031      	beq.n	8012996 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	617b      	str	r3, [r7, #20]
 8012938:	e002      	b.n	8012940 <get_ldnumber+0x24>
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	3301      	adds	r3, #1
 801293e:	617b      	str	r3, [r7, #20]
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	2b20      	cmp	r3, #32
 8012946:	d903      	bls.n	8012950 <get_ldnumber+0x34>
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	2b3a      	cmp	r3, #58	; 0x3a
 801294e:	d1f4      	bne.n	801293a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b3a      	cmp	r3, #58	; 0x3a
 8012956:	d11c      	bne.n	8012992 <get_ldnumber+0x76>
			tp = *path;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	1c5a      	adds	r2, r3, #1
 8012962:	60fa      	str	r2, [r7, #12]
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	3b30      	subs	r3, #48	; 0x30
 8012968:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	2b09      	cmp	r3, #9
 801296e:	d80e      	bhi.n	801298e <get_ldnumber+0x72>
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	429a      	cmp	r2, r3
 8012976:	d10a      	bne.n	801298e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d107      	bne.n	801298e <get_ldnumber+0x72>
					vol = (int)i;
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	3301      	adds	r3, #1
 8012986:	617b      	str	r3, [r7, #20]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	e002      	b.n	8012998 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012992:	2300      	movs	r3, #0
 8012994:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012996:	693b      	ldr	r3, [r7, #16]
}
 8012998:	4618      	mov	r0, r3
 801299a:	371c      	adds	r7, #28
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr

080129a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	70da      	strb	r2, [r3, #3]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f04f 32ff 	mov.w	r2, #4294967295
 80129ba:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80129bc:	6839      	ldr	r1, [r7, #0]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ff f85c 	bl	8011a7c <move_window>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d001      	beq.n	80129ce <check_fs+0x2a>
 80129ca:	2304      	movs	r3, #4
 80129cc:	e038      	b.n	8012a40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3334      	adds	r3, #52	; 0x34
 80129d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fe fda0 	bl	801151c <ld_word>
 80129dc:	4603      	mov	r3, r0
 80129de:	461a      	mov	r2, r3
 80129e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d001      	beq.n	80129ec <check_fs+0x48>
 80129e8:	2303      	movs	r3, #3
 80129ea:	e029      	b.n	8012a40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129f2:	2be9      	cmp	r3, #233	; 0xe9
 80129f4:	d009      	beq.n	8012a0a <check_fs+0x66>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80129fc:	2beb      	cmp	r3, #235	; 0xeb
 80129fe:	d11e      	bne.n	8012a3e <check_fs+0x9a>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012a06:	2b90      	cmp	r3, #144	; 0x90
 8012a08:	d119      	bne.n	8012a3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	3334      	adds	r3, #52	; 0x34
 8012a0e:	3336      	adds	r3, #54	; 0x36
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fe fd9b 	bl	801154c <ld_dword>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a1c:	4a0a      	ldr	r2, [pc, #40]	; (8012a48 <check_fs+0xa4>)
 8012a1e:	4293      	cmp	r3, r2
 8012a20:	d101      	bne.n	8012a26 <check_fs+0x82>
 8012a22:	2300      	movs	r3, #0
 8012a24:	e00c      	b.n	8012a40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	3334      	adds	r3, #52	; 0x34
 8012a2a:	3352      	adds	r3, #82	; 0x52
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fe fd8d 	bl	801154c <ld_dword>
 8012a32:	4602      	mov	r2, r0
 8012a34:	4b05      	ldr	r3, [pc, #20]	; (8012a4c <check_fs+0xa8>)
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d101      	bne.n	8012a3e <check_fs+0x9a>
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	e000      	b.n	8012a40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012a3e:	2302      	movs	r3, #2
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	00544146 	.word	0x00544146
 8012a4c:	33544146 	.word	0x33544146

08012a50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b096      	sub	sp, #88	; 0x58
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2200      	movs	r2, #0
 8012a62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	f7ff ff59 	bl	801291c <get_ldnumber>
 8012a6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	da01      	bge.n	8012a76 <find_volume+0x26>
 8012a72:	230b      	movs	r3, #11
 8012a74:	e265      	b.n	8012f42 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012a76:	4ab0      	ldr	r2, [pc, #704]	; (8012d38 <find_volume+0x2e8>)
 8012a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d101      	bne.n	8012a8a <find_volume+0x3a>
 8012a86:	230c      	movs	r3, #12
 8012a88:	e25b      	b.n	8012f42 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012a90:	79fb      	ldrb	r3, [r7, #7]
 8012a92:	f023 0301 	bic.w	r3, r3, #1
 8012a96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d01a      	beq.n	8012ad6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	785b      	ldrb	r3, [r3, #1]
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7fe fc9b 	bl	80113e0 <disk_status>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10c      	bne.n	8012ad6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012abc:	79fb      	ldrb	r3, [r7, #7]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d007      	beq.n	8012ad2 <find_volume+0x82>
 8012ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ac6:	f003 0304 	and.w	r3, r3, #4
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012ace:	230a      	movs	r3, #10
 8012ad0:	e237      	b.n	8012f42 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	e235      	b.n	8012f42 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ade:	b2da      	uxtb	r2, r3
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	785b      	ldrb	r3, [r3, #1]
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fe fc93 	bl	8011414 <disk_initialize>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012af8:	f003 0301 	and.w	r3, r3, #1
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012b00:	2303      	movs	r3, #3
 8012b02:	e21e      	b.n	8012f42 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012b04:	79fb      	ldrb	r3, [r7, #7]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d007      	beq.n	8012b1a <find_volume+0xca>
 8012b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b0e:	f003 0304 	and.w	r3, r3, #4
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d001      	beq.n	8012b1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012b16:	230a      	movs	r3, #10
 8012b18:	e213      	b.n	8012f42 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1c:	7858      	ldrb	r0, [r3, #1]
 8012b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b20:	330c      	adds	r3, #12
 8012b22:	461a      	mov	r2, r3
 8012b24:	2102      	movs	r1, #2
 8012b26:	f7fe fcdb 	bl	80114e0 <disk_ioctl>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d001      	beq.n	8012b34 <find_volume+0xe4>
 8012b30:	2301      	movs	r3, #1
 8012b32:	e206      	b.n	8012f42 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	899b      	ldrh	r3, [r3, #12]
 8012b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b3c:	d80d      	bhi.n	8012b5a <find_volume+0x10a>
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	899b      	ldrh	r3, [r3, #12]
 8012b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b46:	d308      	bcc.n	8012b5a <find_volume+0x10a>
 8012b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4a:	899b      	ldrh	r3, [r3, #12]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b50:	899b      	ldrh	r3, [r3, #12]
 8012b52:	3b01      	subs	r3, #1
 8012b54:	4013      	ands	r3, r2
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d001      	beq.n	8012b5e <find_volume+0x10e>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	e1f1      	b.n	8012f42 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b66:	f7ff ff1d 	bl	80129a4 <check_fs>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012b70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b74:	2b02      	cmp	r3, #2
 8012b76:	d14b      	bne.n	8012c10 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012b78:	2300      	movs	r3, #0
 8012b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8012b7c:	e01f      	b.n	8012bbe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b80:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b86:	011b      	lsls	r3, r3, #4
 8012b88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012b8c:	4413      	add	r3, r2
 8012b8e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	3304      	adds	r3, #4
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d006      	beq.n	8012ba8 <find_volume+0x158>
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9c:	3308      	adds	r3, #8
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fe fcd4 	bl	801154c <ld_dword>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	e000      	b.n	8012baa <find_volume+0x15a>
 8012ba8:	2200      	movs	r2, #0
 8012baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012bb2:	440b      	add	r3, r1
 8012bb4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bba:	3301      	adds	r3, #1
 8012bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8012bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bc0:	2b03      	cmp	r3, #3
 8012bc2:	d9dc      	bls.n	8012b7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d002      	beq.n	8012bd4 <find_volume+0x184>
 8012bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012bdc:	4413      	add	r3, r2
 8012bde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012be2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d005      	beq.n	8012bf6 <find_volume+0x1a6>
 8012bea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bee:	f7ff fed9 	bl	80129a4 <check_fs>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	e000      	b.n	8012bf8 <find_volume+0x1a8>
 8012bf6:	2303      	movs	r3, #3
 8012bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d905      	bls.n	8012c10 <find_volume+0x1c0>
 8012c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c06:	3301      	adds	r3, #1
 8012c08:	643b      	str	r3, [r7, #64]	; 0x40
 8012c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c0c:	2b03      	cmp	r3, #3
 8012c0e:	d9e1      	bls.n	8012bd4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c14:	2b04      	cmp	r3, #4
 8012c16:	d101      	bne.n	8012c1c <find_volume+0x1cc>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e192      	b.n	8012f42 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d901      	bls.n	8012c28 <find_volume+0x1d8>
 8012c24:	230d      	movs	r3, #13
 8012c26:	e18c      	b.n	8012f42 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2a:	3334      	adds	r3, #52	; 0x34
 8012c2c:	330b      	adds	r3, #11
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fe fc74 	bl	801151c <ld_word>
 8012c34:	4603      	mov	r3, r0
 8012c36:	461a      	mov	r2, r3
 8012c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3a:	899b      	ldrh	r3, [r3, #12]
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d001      	beq.n	8012c44 <find_volume+0x1f4>
 8012c40:	230d      	movs	r3, #13
 8012c42:	e17e      	b.n	8012f42 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c46:	3334      	adds	r3, #52	; 0x34
 8012c48:	3316      	adds	r3, #22
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fe fc66 	bl	801151c <ld_word>
 8012c50:	4603      	mov	r3, r0
 8012c52:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <find_volume+0x218>
 8012c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5c:	3334      	adds	r3, #52	; 0x34
 8012c5e:	3324      	adds	r3, #36	; 0x24
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fe fc73 	bl	801154c <ld_dword>
 8012c66:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c6c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c70:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c76:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	789b      	ldrb	r3, [r3, #2]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d005      	beq.n	8012c8c <find_volume+0x23c>
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	789b      	ldrb	r3, [r3, #2]
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d001      	beq.n	8012c8c <find_volume+0x23c>
 8012c88:	230d      	movs	r3, #13
 8012c8a:	e15a      	b.n	8012f42 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	789b      	ldrb	r3, [r3, #2]
 8012c90:	461a      	mov	r2, r3
 8012c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c94:	fb02 f303 	mul.w	r3, r2, r3
 8012c98:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012ca0:	b29a      	uxth	r2, r3
 8012ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca8:	895b      	ldrh	r3, [r3, #10]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d008      	beq.n	8012cc0 <find_volume+0x270>
 8012cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb0:	895b      	ldrh	r3, [r3, #10]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	895b      	ldrh	r3, [r3, #10]
 8012cb8:	3b01      	subs	r3, #1
 8012cba:	4013      	ands	r3, r2
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <find_volume+0x274>
 8012cc0:	230d      	movs	r3, #13
 8012cc2:	e13e      	b.n	8012f42 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	3334      	adds	r3, #52	; 0x34
 8012cc8:	3311      	adds	r3, #17
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7fe fc26 	bl	801151c <ld_word>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cda:	891b      	ldrh	r3, [r3, #8]
 8012cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cde:	8992      	ldrh	r2, [r2, #12]
 8012ce0:	0952      	lsrs	r2, r2, #5
 8012ce2:	b292      	uxth	r2, r2
 8012ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ce8:	fb02 f201 	mul.w	r2, r2, r1
 8012cec:	1a9b      	subs	r3, r3, r2
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d001      	beq.n	8012cf8 <find_volume+0x2a8>
 8012cf4:	230d      	movs	r3, #13
 8012cf6:	e124      	b.n	8012f42 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfa:	3334      	adds	r3, #52	; 0x34
 8012cfc:	3313      	adds	r3, #19
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7fe fc0c 	bl	801151c <ld_word>
 8012d04:	4603      	mov	r3, r0
 8012d06:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <find_volume+0x2cc>
 8012d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d10:	3334      	adds	r3, #52	; 0x34
 8012d12:	3320      	adds	r3, #32
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe fc19 	bl	801154c <ld_dword>
 8012d1a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	3334      	adds	r3, #52	; 0x34
 8012d20:	330e      	adds	r3, #14
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7fe fbfa 	bl	801151c <ld_word>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d104      	bne.n	8012d3c <find_volume+0x2ec>
 8012d32:	230d      	movs	r3, #13
 8012d34:	e105      	b.n	8012f42 <find_volume+0x4f2>
 8012d36:	bf00      	nop
 8012d38:	200009f0 	.word	0x200009f0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012d3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d40:	4413      	add	r3, r2
 8012d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d44:	8911      	ldrh	r1, [r2, #8]
 8012d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d48:	8992      	ldrh	r2, [r2, #12]
 8012d4a:	0952      	lsrs	r2, r2, #5
 8012d4c:	b292      	uxth	r2, r2
 8012d4e:	fbb1 f2f2 	udiv	r2, r1, r2
 8012d52:	b292      	uxth	r2, r2
 8012d54:	4413      	add	r3, r2
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d201      	bcs.n	8012d64 <find_volume+0x314>
 8012d60:	230d      	movs	r3, #13
 8012d62:	e0ee      	b.n	8012f42 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d68:	1ad3      	subs	r3, r2, r3
 8012d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d6c:	8952      	ldrh	r2, [r2, #10]
 8012d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d101      	bne.n	8012d7e <find_volume+0x32e>
 8012d7a:	230d      	movs	r3, #13
 8012d7c:	e0e1      	b.n	8012f42 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8012d7e:	2303      	movs	r3, #3
 8012d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d802      	bhi.n	8012d94 <find_volume+0x344>
 8012d8e:	2302      	movs	r3, #2
 8012d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d96:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d802      	bhi.n	8012da4 <find_volume+0x354>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	1c9a      	adds	r2, r3, #2
 8012da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012daa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8012dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012db0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012db2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012db6:	441a      	add	r2, r3
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8012dbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc0:	441a      	add	r2, r3
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dca:	2b03      	cmp	r3, #3
 8012dcc:	d11e      	bne.n	8012e0c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	3334      	adds	r3, #52	; 0x34
 8012dd2:	332a      	adds	r3, #42	; 0x2a
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe fba1 	bl	801151c <ld_word>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <find_volume+0x394>
 8012de0:	230d      	movs	r3, #13
 8012de2:	e0ae      	b.n	8012f42 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	891b      	ldrh	r3, [r3, #8]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d001      	beq.n	8012df0 <find_volume+0x3a0>
 8012dec:	230d      	movs	r3, #13
 8012dee:	e0a8      	b.n	8012f42 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df2:	3334      	adds	r3, #52	; 0x34
 8012df4:	332c      	adds	r3, #44	; 0x2c
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fba8 	bl	801154c <ld_dword>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e00:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e04:	699b      	ldr	r3, [r3, #24]
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	647b      	str	r3, [r7, #68]	; 0x44
 8012e0a:	e01f      	b.n	8012e4c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	891b      	ldrh	r3, [r3, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d101      	bne.n	8012e18 <find_volume+0x3c8>
 8012e14:	230d      	movs	r3, #13
 8012e16:	e094      	b.n	8012f42 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e1e:	441a      	add	r2, r3
 8012e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e22:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e28:	2b02      	cmp	r3, #2
 8012e2a:	d103      	bne.n	8012e34 <find_volume+0x3e4>
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	699b      	ldr	r3, [r3, #24]
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	e00a      	b.n	8012e4a <find_volume+0x3fa>
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	699a      	ldr	r2, [r3, #24]
 8012e38:	4613      	mov	r3, r2
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	4413      	add	r3, r2
 8012e3e:	085a      	lsrs	r2, r3, #1
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	699b      	ldr	r3, [r3, #24]
 8012e44:	f003 0301 	and.w	r3, r3, #1
 8012e48:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012e4a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4e:	69da      	ldr	r2, [r3, #28]
 8012e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e52:	899b      	ldrh	r3, [r3, #12]
 8012e54:	4619      	mov	r1, r3
 8012e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e58:	440b      	add	r3, r1
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e5e:	8989      	ldrh	r1, [r1, #12]
 8012e60:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d201      	bcs.n	8012e6c <find_volume+0x41c>
 8012e68:	230d      	movs	r3, #13
 8012e6a:	e06a      	b.n	8012f42 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e72:	615a      	str	r2, [r3, #20]
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	695a      	ldr	r2, [r3, #20]
 8012e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	2280      	movs	r2, #128	; 0x80
 8012e80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012e82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d149      	bne.n	8012f1e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8c:	3334      	adds	r3, #52	; 0x34
 8012e8e:	3330      	adds	r3, #48	; 0x30
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fe fb43 	bl	801151c <ld_word>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d140      	bne.n	8012f1e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ea4:	f7fe fdea 	bl	8011a7c <move_window>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d137      	bne.n	8012f1e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	3334      	adds	r3, #52	; 0x34
 8012eb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fe fb2d 	bl	801151c <ld_word>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d127      	bne.n	8012f1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed0:	3334      	adds	r3, #52	; 0x34
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fe fb3a 	bl	801154c <ld_dword>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	4b1c      	ldr	r3, [pc, #112]	; (8012f4c <find_volume+0x4fc>)
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d11e      	bne.n	8012f1e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	3334      	adds	r3, #52	; 0x34
 8012ee4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fb2f 	bl	801154c <ld_dword>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	4b17      	ldr	r3, [pc, #92]	; (8012f50 <find_volume+0x500>)
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d113      	bne.n	8012f1e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef8:	3334      	adds	r3, #52	; 0x34
 8012efa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7fe fb24 	bl	801154c <ld_dword>
 8012f04:	4602      	mov	r2, r0
 8012f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f08:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0c:	3334      	adds	r3, #52	; 0x34
 8012f0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7fe fb1a 	bl	801154c <ld_dword>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f20:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012f24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012f26:	4b0b      	ldr	r3, [pc, #44]	; (8012f54 <find_volume+0x504>)
 8012f28:	881b      	ldrh	r3, [r3, #0]
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	4b09      	ldr	r3, [pc, #36]	; (8012f54 <find_volume+0x504>)
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	4b08      	ldr	r3, [pc, #32]	; (8012f54 <find_volume+0x504>)
 8012f34:	881a      	ldrh	r2, [r3, #0]
 8012f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012f3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f3c:	f7fe fd36 	bl	80119ac <clear_lock>
#endif
	return FR_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3758      	adds	r7, #88	; 0x58
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	41615252 	.word	0x41615252
 8012f50:	61417272 	.word	0x61417272
 8012f54:	200009f4 	.word	0x200009f4

08012f58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012f62:	2309      	movs	r3, #9
 8012f64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01c      	beq.n	8012fa6 <validate+0x4e>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d018      	beq.n	8012fa6 <validate+0x4e>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d013      	beq.n	8012fa6 <validate+0x4e>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	889a      	ldrh	r2, [r3, #4]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	88db      	ldrh	r3, [r3, #6]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d10c      	bne.n	8012fa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	785b      	ldrb	r3, [r3, #1]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7fe fa24 	bl	80113e0 <disk_status>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	f003 0301 	and.w	r3, r3, #1
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d101      	bne.n	8012fa6 <validate+0x4e>
			res = FR_OK;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012fa6:	7bfb      	ldrb	r3, [r7, #15]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d102      	bne.n	8012fb2 <validate+0x5a>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	e000      	b.n	8012fb4 <validate+0x5c>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	6013      	str	r3, [r2, #0]
	return res;
 8012fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b088      	sub	sp, #32
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012fd6:	f107 0310 	add.w	r3, r7, #16
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7ff fc9e 	bl	801291c <get_ldnumber>
 8012fe0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	da01      	bge.n	8012fec <f_mount+0x28>
 8012fe8:	230b      	movs	r3, #11
 8012fea:	e02b      	b.n	8013044 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012fec:	4a17      	ldr	r2, [pc, #92]	; (801304c <f_mount+0x88>)
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ff4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012ff6:	69bb      	ldr	r3, [r7, #24]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d005      	beq.n	8013008 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ffc:	69b8      	ldr	r0, [r7, #24]
 8012ffe:	f7fe fcd5 	bl	80119ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	2200      	movs	r2, #0
 8013006:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d002      	beq.n	8013014 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	490d      	ldr	r1, [pc, #52]	; (801304c <f_mount+0x88>)
 8013018:	69fb      	ldr	r3, [r7, #28]
 801301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <f_mount+0x66>
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	2b01      	cmp	r3, #1
 8013028:	d001      	beq.n	801302e <f_mount+0x6a>
 801302a:	2300      	movs	r3, #0
 801302c:	e00a      	b.n	8013044 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801302e:	f107 010c 	add.w	r1, r7, #12
 8013032:	f107 0308 	add.w	r3, r7, #8
 8013036:	2200      	movs	r2, #0
 8013038:	4618      	mov	r0, r3
 801303a:	f7ff fd09 	bl	8012a50 <find_volume>
 801303e:	4603      	mov	r3, r0
 8013040:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013042:	7dfb      	ldrb	r3, [r7, #23]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3720      	adds	r7, #32
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	200009f0 	.word	0x200009f0

08013050 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b098      	sub	sp, #96	; 0x60
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	4613      	mov	r3, r2
 801305c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d101      	bne.n	8013068 <f_open+0x18>
 8013064:	2309      	movs	r3, #9
 8013066:	e1bb      	b.n	80133e0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013068:	79fb      	ldrb	r3, [r7, #7]
 801306a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801306e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013070:	79fa      	ldrb	r2, [r7, #7]
 8013072:	f107 0110 	add.w	r1, r7, #16
 8013076:	f107 0308 	add.w	r3, r7, #8
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff fce8 	bl	8012a50 <find_volume>
 8013080:	4603      	mov	r3, r0
 8013082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801308a:	2b00      	cmp	r3, #0
 801308c:	f040 819f 	bne.w	80133ce <f_open+0x37e>
		dj.obj.fs = fs;
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013094:	68ba      	ldr	r2, [r7, #8]
 8013096:	f107 0314 	add.w	r3, r7, #20
 801309a:	4611      	mov	r1, r2
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff fbc7 	bl	8012830 <follow_path>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80130a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d11a      	bne.n	80130e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80130b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80130b4:	b25b      	sxtb	r3, r3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	da03      	bge.n	80130c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80130ba:	2306      	movs	r3, #6
 80130bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80130c0:	e011      	b.n	80130e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	f023 0301 	bic.w	r3, r3, #1
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	bf14      	ite	ne
 80130cc:	2301      	movne	r3, #1
 80130ce:	2300      	moveq	r3, #0
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	461a      	mov	r2, r3
 80130d4:	f107 0314 	add.w	r3, r7, #20
 80130d8:	4611      	mov	r1, r2
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fe fb1e 	bl	801171c <chk_lock>
 80130e0:	4603      	mov	r3, r0
 80130e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	f003 031c 	and.w	r3, r3, #28
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d07f      	beq.n	80131f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80130f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d017      	beq.n	8013128 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80130f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130fc:	2b04      	cmp	r3, #4
 80130fe:	d10e      	bne.n	801311e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013100:	f7fe fb68 	bl	80117d4 <enq_lock>
 8013104:	4603      	mov	r3, r0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <f_open+0xc8>
 801310a:	f107 0314 	add.w	r3, r7, #20
 801310e:	4618      	mov	r0, r3
 8013110:	f7ff fac7 	bl	80126a2 <dir_register>
 8013114:	4603      	mov	r3, r0
 8013116:	e000      	b.n	801311a <f_open+0xca>
 8013118:	2312      	movs	r3, #18
 801311a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801311e:	79fb      	ldrb	r3, [r7, #7]
 8013120:	f043 0308 	orr.w	r3, r3, #8
 8013124:	71fb      	strb	r3, [r7, #7]
 8013126:	e010      	b.n	801314a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013128:	7ebb      	ldrb	r3, [r7, #26]
 801312a:	f003 0311 	and.w	r3, r3, #17
 801312e:	2b00      	cmp	r3, #0
 8013130:	d003      	beq.n	801313a <f_open+0xea>
					res = FR_DENIED;
 8013132:	2307      	movs	r3, #7
 8013134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013138:	e007      	b.n	801314a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801313a:	79fb      	ldrb	r3, [r7, #7]
 801313c:	f003 0304 	and.w	r3, r3, #4
 8013140:	2b00      	cmp	r3, #0
 8013142:	d002      	beq.n	801314a <f_open+0xfa>
 8013144:	2308      	movs	r3, #8
 8013146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801314a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801314e:	2b00      	cmp	r3, #0
 8013150:	d168      	bne.n	8013224 <f_open+0x1d4>
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	f003 0308 	and.w	r3, r3, #8
 8013158:	2b00      	cmp	r3, #0
 801315a:	d063      	beq.n	8013224 <f_open+0x1d4>
				dw = GET_FATTIME();
 801315c:	f000 fdf2 	bl	8013d44 <get_fattime>
 8013160:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013164:	330e      	adds	r3, #14
 8013166:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013168:	4618      	mov	r0, r3
 801316a:	f7fe fa2d 	bl	80115c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013170:	3316      	adds	r3, #22
 8013172:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013174:	4618      	mov	r0, r3
 8013176:	f7fe fa27 	bl	80115c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801317a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317c:	330b      	adds	r3, #11
 801317e:	2220      	movs	r2, #32
 8013180:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013186:	4611      	mov	r1, r2
 8013188:	4618      	mov	r0, r3
 801318a:	f7ff f9f6 	bl	801257a <ld_clust>
 801318e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013194:	2200      	movs	r2, #0
 8013196:	4618      	mov	r0, r3
 8013198:	f7ff fa0e 	bl	80125b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801319e:	331c      	adds	r3, #28
 80131a0:	2100      	movs	r1, #0
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fe fa10 	bl	80115c8 <st_dword>
					fs->wflag = 1;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	2201      	movs	r2, #1
 80131ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80131ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d037      	beq.n	8013224 <f_open+0x1d4>
						dw = fs->winsect;
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80131ba:	f107 0314 	add.w	r3, r7, #20
 80131be:	2200      	movs	r2, #0
 80131c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7fe fefe 	bl	8011fc4 <remove_chain>
 80131c8:	4603      	mov	r3, r0
 80131ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80131ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d126      	bne.n	8013224 <f_open+0x1d4>
							res = move_window(fs, dw);
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fe fc4e 	bl	8011a7c <move_window>
 80131e0:	4603      	mov	r3, r0
 80131e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80131ea:	3a01      	subs	r2, #1
 80131ec:	611a      	str	r2, [r3, #16]
 80131ee:	e019      	b.n	8013224 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80131f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d115      	bne.n	8013224 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80131f8:	7ebb      	ldrb	r3, [r7, #26]
 80131fa:	f003 0310 	and.w	r3, r3, #16
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d003      	beq.n	801320a <f_open+0x1ba>
					res = FR_NO_FILE;
 8013202:	2304      	movs	r3, #4
 8013204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013208:	e00c      	b.n	8013224 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801320a:	79fb      	ldrb	r3, [r7, #7]
 801320c:	f003 0302 	and.w	r3, r3, #2
 8013210:	2b00      	cmp	r3, #0
 8013212:	d007      	beq.n	8013224 <f_open+0x1d4>
 8013214:	7ebb      	ldrb	r3, [r7, #26]
 8013216:	f003 0301 	and.w	r3, r3, #1
 801321a:	2b00      	cmp	r3, #0
 801321c:	d002      	beq.n	8013224 <f_open+0x1d4>
						res = FR_DENIED;
 801321e:	2307      	movs	r3, #7
 8013220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013228:	2b00      	cmp	r3, #0
 801322a:	d128      	bne.n	801327e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801322c:	79fb      	ldrb	r3, [r7, #7]
 801322e:	f003 0308 	and.w	r3, r3, #8
 8013232:	2b00      	cmp	r3, #0
 8013234:	d003      	beq.n	801323e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8013236:	79fb      	ldrb	r3, [r7, #7]
 8013238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801323c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801324c:	79fb      	ldrb	r3, [r7, #7]
 801324e:	f023 0301 	bic.w	r3, r3, #1
 8013252:	2b00      	cmp	r3, #0
 8013254:	bf14      	ite	ne
 8013256:	2301      	movne	r3, #1
 8013258:	2300      	moveq	r3, #0
 801325a:	b2db      	uxtb	r3, r3
 801325c:	461a      	mov	r2, r3
 801325e:	f107 0314 	add.w	r3, r7, #20
 8013262:	4611      	mov	r1, r2
 8013264:	4618      	mov	r0, r3
 8013266:	f7fe fad7 	bl	8011818 <inc_lock>
 801326a:	4602      	mov	r2, r0
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <f_open+0x22e>
 8013278:	2302      	movs	r3, #2
 801327a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801327e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013282:	2b00      	cmp	r3, #0
 8013284:	f040 80a3 	bne.w	80133ce <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801328c:	4611      	mov	r1, r2
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff f973 	bl	801257a <ld_clust>
 8013294:	4602      	mov	r2, r0
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329c:	331c      	adds	r3, #28
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fe f954 	bl	801154c <ld_dword>
 80132a4:	4602      	mov	r2, r0
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	88da      	ldrh	r2, [r3, #6]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	79fa      	ldrb	r2, [r7, #7]
 80132c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2200      	movs	r2, #0
 80132c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	2200      	movs	r2, #0
 80132ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	2200      	movs	r2, #0
 80132d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	3330      	adds	r3, #48	; 0x30
 80132da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80132de:	2100      	movs	r1, #0
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fe f9be 	bl	8011662 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80132e6:	79fb      	ldrb	r3, [r7, #7]
 80132e8:	f003 0320 	and.w	r3, r3, #32
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d06e      	beq.n	80133ce <f_open+0x37e>
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d06a      	beq.n	80133ce <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	68da      	ldr	r2, [r3, #12]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	895b      	ldrh	r3, [r3, #10]
 8013304:	461a      	mov	r2, r3
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	899b      	ldrh	r3, [r3, #12]
 801330a:	fb03 f302 	mul.w	r3, r3, r2
 801330e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	689b      	ldr	r3, [r3, #8]
 8013314:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	657b      	str	r3, [r7, #84]	; 0x54
 801331c:	e016      	b.n	801334c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013322:	4618      	mov	r0, r3
 8013324:	f7fe fc67 	bl	8011bf6 <get_fat>
 8013328:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801332a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801332c:	2b01      	cmp	r3, #1
 801332e:	d802      	bhi.n	8013336 <f_open+0x2e6>
 8013330:	2302      	movs	r3, #2
 8013332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801333c:	d102      	bne.n	8013344 <f_open+0x2f4>
 801333e:	2301      	movs	r3, #1
 8013340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	657b      	str	r3, [r7, #84]	; 0x54
 801334c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013350:	2b00      	cmp	r3, #0
 8013352:	d103      	bne.n	801335c <f_open+0x30c>
 8013354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013358:	429a      	cmp	r2, r3
 801335a:	d8e0      	bhi.n	801331e <f_open+0x2ce>
				}
				fp->clust = clst;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013360:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013366:	2b00      	cmp	r3, #0
 8013368:	d131      	bne.n	80133ce <f_open+0x37e>
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	899b      	ldrh	r3, [r3, #12]
 801336e:	461a      	mov	r2, r3
 8013370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013372:	fbb3 f1f2 	udiv	r1, r3, r2
 8013376:	fb02 f201 	mul.w	r2, r2, r1
 801337a:	1a9b      	subs	r3, r3, r2
 801337c:	2b00      	cmp	r3, #0
 801337e:	d026      	beq.n	80133ce <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013384:	4618      	mov	r0, r3
 8013386:	f7fe fc17 	bl	8011bb8 <clust2sect>
 801338a:	6478      	str	r0, [r7, #68]	; 0x44
 801338c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801338e:	2b00      	cmp	r3, #0
 8013390:	d103      	bne.n	801339a <f_open+0x34a>
						res = FR_INT_ERR;
 8013392:	2302      	movs	r3, #2
 8013394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013398:	e019      	b.n	80133ce <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	899b      	ldrh	r3, [r3, #12]
 801339e:	461a      	mov	r2, r3
 80133a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80133a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133a8:	441a      	add	r2, r3
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	7858      	ldrb	r0, [r3, #1]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	6a1a      	ldr	r2, [r3, #32]
 80133bc:	2301      	movs	r3, #1
 80133be:	f7fe f84f 	bl	8011460 <disk_read>
 80133c2:	4603      	mov	r3, r0
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d002      	beq.n	80133ce <f_open+0x37e>
 80133c8:	2301      	movs	r3, #1
 80133ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80133ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d002      	beq.n	80133dc <f_open+0x38c>
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80133dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3760      	adds	r7, #96	; 0x60
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b08c      	sub	sp, #48	; 0x30
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	60b9      	str	r1, [r7, #8]
 80133f2:	607a      	str	r2, [r7, #4]
 80133f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	2200      	movs	r2, #0
 80133fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f107 0210 	add.w	r2, r7, #16
 8013406:	4611      	mov	r1, r2
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff fda5 	bl	8012f58 <validate>
 801340e:	4603      	mov	r3, r0
 8013410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013418:	2b00      	cmp	r3, #0
 801341a:	d107      	bne.n	801342c <f_write+0x44>
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	7d5b      	ldrb	r3, [r3, #21]
 8013420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <f_write+0x4a>
 801342c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013430:	e16a      	b.n	8013708 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	7d1b      	ldrb	r3, [r3, #20]
 8013436:	f003 0302 	and.w	r3, r3, #2
 801343a:	2b00      	cmp	r3, #0
 801343c:	d101      	bne.n	8013442 <f_write+0x5a>
 801343e:	2307      	movs	r3, #7
 8013440:	e162      	b.n	8013708 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	699a      	ldr	r2, [r3, #24]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	441a      	add	r2, r3
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	699b      	ldr	r3, [r3, #24]
 801344e:	429a      	cmp	r2, r3
 8013450:	f080 814c 	bcs.w	80136ec <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	699b      	ldr	r3, [r3, #24]
 8013458:	43db      	mvns	r3, r3
 801345a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801345c:	e146      	b.n	80136ec <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	699b      	ldr	r3, [r3, #24]
 8013462:	693a      	ldr	r2, [r7, #16]
 8013464:	8992      	ldrh	r2, [r2, #12]
 8013466:	fbb3 f1f2 	udiv	r1, r3, r2
 801346a:	fb02 f201 	mul.w	r2, r2, r1
 801346e:	1a9b      	subs	r3, r3, r2
 8013470:	2b00      	cmp	r3, #0
 8013472:	f040 80f1 	bne.w	8013658 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	699b      	ldr	r3, [r3, #24]
 801347a:	693a      	ldr	r2, [r7, #16]
 801347c:	8992      	ldrh	r2, [r2, #12]
 801347e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013482:	693a      	ldr	r2, [r7, #16]
 8013484:	8952      	ldrh	r2, [r2, #10]
 8013486:	3a01      	subs	r2, #1
 8013488:	4013      	ands	r3, r2
 801348a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d143      	bne.n	801351a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	699b      	ldr	r3, [r3, #24]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d10c      	bne.n	80134b4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	689b      	ldr	r3, [r3, #8]
 801349e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80134a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d11a      	bne.n	80134dc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2100      	movs	r1, #0
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fe fdef 	bl	801208e <create_chain>
 80134b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80134b2:	e013      	b.n	80134dc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d007      	beq.n	80134cc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	699b      	ldr	r3, [r3, #24]
 80134c0:	4619      	mov	r1, r3
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f7fe fe7b 	bl	80121be <clmt_clust>
 80134c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80134ca:	e007      	b.n	80134dc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80134cc:	68fa      	ldr	r2, [r7, #12]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	69db      	ldr	r3, [r3, #28]
 80134d2:	4619      	mov	r1, r3
 80134d4:	4610      	mov	r0, r2
 80134d6:	f7fe fdda 	bl	801208e <create_chain>
 80134da:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80134dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 8109 	beq.w	80136f6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80134e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d104      	bne.n	80134f4 <f_write+0x10c>
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2202      	movs	r2, #2
 80134ee:	755a      	strb	r2, [r3, #21]
 80134f0:	2302      	movs	r3, #2
 80134f2:	e109      	b.n	8013708 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134fa:	d104      	bne.n	8013506 <f_write+0x11e>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	2201      	movs	r2, #1
 8013500:	755a      	strb	r2, [r3, #21]
 8013502:	2301      	movs	r3, #1
 8013504:	e100      	b.n	8013708 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801350a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	689b      	ldr	r3, [r3, #8]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d102      	bne.n	801351a <f_write+0x132>
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013518:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	7d1b      	ldrb	r3, [r3, #20]
 801351e:	b25b      	sxtb	r3, r3
 8013520:	2b00      	cmp	r3, #0
 8013522:	da18      	bge.n	8013556 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	7858      	ldrb	r0, [r3, #1]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6a1a      	ldr	r2, [r3, #32]
 8013532:	2301      	movs	r3, #1
 8013534:	f7fd ffb4 	bl	80114a0 <disk_write>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d004      	beq.n	8013548 <f_write+0x160>
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2201      	movs	r2, #1
 8013542:	755a      	strb	r2, [r3, #21]
 8013544:	2301      	movs	r3, #1
 8013546:	e0df      	b.n	8013708 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	7d1b      	ldrb	r3, [r3, #20]
 801354c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013550:	b2da      	uxtb	r2, r3
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013556:	693a      	ldr	r2, [r7, #16]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	69db      	ldr	r3, [r3, #28]
 801355c:	4619      	mov	r1, r3
 801355e:	4610      	mov	r0, r2
 8013560:	f7fe fb2a 	bl	8011bb8 <clust2sect>
 8013564:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d104      	bne.n	8013576 <f_write+0x18e>
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2202      	movs	r2, #2
 8013570:	755a      	strb	r2, [r3, #21]
 8013572:	2302      	movs	r3, #2
 8013574:	e0c8      	b.n	8013708 <f_write+0x320>
			sect += csect;
 8013576:	697a      	ldr	r2, [r7, #20]
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	4413      	add	r3, r2
 801357c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	899b      	ldrh	r3, [r3, #12]
 8013582:	461a      	mov	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	fbb3 f3f2 	udiv	r3, r3, r2
 801358a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801358c:	6a3b      	ldr	r3, [r7, #32]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d043      	beq.n	801361a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013592:	69ba      	ldr	r2, [r7, #24]
 8013594:	6a3b      	ldr	r3, [r7, #32]
 8013596:	4413      	add	r3, r2
 8013598:	693a      	ldr	r2, [r7, #16]
 801359a:	8952      	ldrh	r2, [r2, #10]
 801359c:	4293      	cmp	r3, r2
 801359e:	d905      	bls.n	80135ac <f_write+0x1c4>
					cc = fs->csize - csect;
 80135a0:	693b      	ldr	r3, [r7, #16]
 80135a2:	895b      	ldrh	r3, [r3, #10]
 80135a4:	461a      	mov	r2, r3
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	7858      	ldrb	r0, [r3, #1]
 80135b0:	6a3b      	ldr	r3, [r7, #32]
 80135b2:	697a      	ldr	r2, [r7, #20]
 80135b4:	69f9      	ldr	r1, [r7, #28]
 80135b6:	f7fd ff73 	bl	80114a0 <disk_write>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d004      	beq.n	80135ca <f_write+0x1e2>
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2201      	movs	r2, #1
 80135c4:	755a      	strb	r2, [r3, #21]
 80135c6:	2301      	movs	r3, #1
 80135c8:	e09e      	b.n	8013708 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6a1a      	ldr	r2, [r3, #32]
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	6a3a      	ldr	r2, [r7, #32]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d918      	bls.n	801360a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	6a1a      	ldr	r2, [r3, #32]
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	8992      	ldrh	r2, [r2, #12]
 80135ea:	fb02 f303 	mul.w	r3, r2, r3
 80135ee:	69fa      	ldr	r2, [r7, #28]
 80135f0:	18d1      	adds	r1, r2, r3
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	899b      	ldrh	r3, [r3, #12]
 80135f6:	461a      	mov	r2, r3
 80135f8:	f7fe f812 	bl	8011620 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	7d1b      	ldrb	r3, [r3, #20]
 8013600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013604:	b2da      	uxtb	r2, r3
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	899b      	ldrh	r3, [r3, #12]
 801360e:	461a      	mov	r2, r3
 8013610:	6a3b      	ldr	r3, [r7, #32]
 8013612:	fb02 f303 	mul.w	r3, r2, r3
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013618:	e04b      	b.n	80136b2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	6a1b      	ldr	r3, [r3, #32]
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	429a      	cmp	r2, r3
 8013622:	d016      	beq.n	8013652 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	699a      	ldr	r2, [r3, #24]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801362c:	429a      	cmp	r2, r3
 801362e:	d210      	bcs.n	8013652 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	7858      	ldrb	r0, [r3, #1]
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801363a:	2301      	movs	r3, #1
 801363c:	697a      	ldr	r2, [r7, #20]
 801363e:	f7fd ff0f 	bl	8011460 <disk_read>
 8013642:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013644:	2b00      	cmp	r3, #0
 8013646:	d004      	beq.n	8013652 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2201      	movs	r2, #1
 801364c:	755a      	strb	r2, [r3, #21]
 801364e:	2301      	movs	r3, #1
 8013650:	e05a      	b.n	8013708 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	899b      	ldrh	r3, [r3, #12]
 801365c:	4618      	mov	r0, r3
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	699b      	ldr	r3, [r3, #24]
 8013662:	693a      	ldr	r2, [r7, #16]
 8013664:	8992      	ldrh	r2, [r2, #12]
 8013666:	fbb3 f1f2 	udiv	r1, r3, r2
 801366a:	fb02 f201 	mul.w	r2, r2, r1
 801366e:	1a9b      	subs	r3, r3, r2
 8013670:	1ac3      	subs	r3, r0, r3
 8013672:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	429a      	cmp	r2, r3
 801367a:	d901      	bls.n	8013680 <f_write+0x298>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	699b      	ldr	r3, [r3, #24]
 801368a:	693a      	ldr	r2, [r7, #16]
 801368c:	8992      	ldrh	r2, [r2, #12]
 801368e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013692:	fb02 f200 	mul.w	r2, r2, r0
 8013696:	1a9b      	subs	r3, r3, r2
 8013698:	440b      	add	r3, r1
 801369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801369c:	69f9      	ldr	r1, [r7, #28]
 801369e:	4618      	mov	r0, r3
 80136a0:	f7fd ffbe 	bl	8011620 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	7d1b      	ldrb	r3, [r3, #20]
 80136a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80136b2:	69fa      	ldr	r2, [r7, #28]
 80136b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b6:	4413      	add	r3, r2
 80136b8:	61fb      	str	r3, [r7, #28]
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	699a      	ldr	r2, [r3, #24]
 80136be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c0:	441a      	add	r2, r3
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	619a      	str	r2, [r3, #24]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	68da      	ldr	r2, [r3, #12]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	699b      	ldr	r3, [r3, #24]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	bf38      	it	cc
 80136d2:	461a      	movcc	r2, r3
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	60da      	str	r2, [r3, #12]
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136de:	441a      	add	r2, r3
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	601a      	str	r2, [r3, #0]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	f47f aeb5 	bne.w	801345e <f_write+0x76>
 80136f4:	e000      	b.n	80136f8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136f6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	7d1b      	ldrb	r3, [r3, #20]
 80136fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013700:	b2da      	uxtb	r2, r3
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013706:	2300      	movs	r3, #0
}
 8013708:	4618      	mov	r0, r3
 801370a:	3730      	adds	r7, #48	; 0x30
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f107 0208 	add.w	r2, r7, #8
 801371e:	4611      	mov	r1, r2
 8013720:	4618      	mov	r0, r3
 8013722:	f7ff fc19 	bl	8012f58 <validate>
 8013726:	4603      	mov	r3, r0
 8013728:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801372a:	7dfb      	ldrb	r3, [r7, #23]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d168      	bne.n	8013802 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	7d1b      	ldrb	r3, [r3, #20]
 8013734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013738:	2b00      	cmp	r3, #0
 801373a:	d062      	beq.n	8013802 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	7d1b      	ldrb	r3, [r3, #20]
 8013740:	b25b      	sxtb	r3, r3
 8013742:	2b00      	cmp	r3, #0
 8013744:	da15      	bge.n	8013772 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	7858      	ldrb	r0, [r3, #1]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6a1a      	ldr	r2, [r3, #32]
 8013754:	2301      	movs	r3, #1
 8013756:	f7fd fea3 	bl	80114a0 <disk_write>
 801375a:	4603      	mov	r3, r0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d001      	beq.n	8013764 <f_sync+0x54>
 8013760:	2301      	movs	r3, #1
 8013762:	e04f      	b.n	8013804 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	7d1b      	ldrb	r3, [r3, #20]
 8013768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801376c:	b2da      	uxtb	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013772:	f000 fae7 	bl	8013d44 <get_fattime>
 8013776:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013778:	68ba      	ldr	r2, [r7, #8]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801377e:	4619      	mov	r1, r3
 8013780:	4610      	mov	r0, r2
 8013782:	f7fe f97b 	bl	8011a7c <move_window>
 8013786:	4603      	mov	r3, r0
 8013788:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801378a:	7dfb      	ldrb	r3, [r7, #23]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d138      	bne.n	8013802 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013794:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	330b      	adds	r3, #11
 801379a:	781a      	ldrb	r2, [r3, #0]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	330b      	adds	r3, #11
 80137a0:	f042 0220 	orr.w	r2, r2, #32
 80137a4:	b2d2      	uxtb	r2, r2
 80137a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6818      	ldr	r0, [r3, #0]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	689b      	ldr	r3, [r3, #8]
 80137b0:	461a      	mov	r2, r3
 80137b2:	68f9      	ldr	r1, [r7, #12]
 80137b4:	f7fe ff00 	bl	80125b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f103 021c 	add.w	r2, r3, #28
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	4619      	mov	r1, r3
 80137c4:	4610      	mov	r0, r2
 80137c6:	f7fd feff 	bl	80115c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	3316      	adds	r3, #22
 80137ce:	6939      	ldr	r1, [r7, #16]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fd fef9 	bl	80115c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	3312      	adds	r3, #18
 80137da:	2100      	movs	r1, #0
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fd fed8 	bl	8011592 <st_word>
					fs->wflag = 1;
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	2201      	movs	r2, #1
 80137e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fe f974 	bl	8011ad8 <sync_fs>
 80137f0:	4603      	mov	r3, r0
 80137f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	7d1b      	ldrb	r3, [r3, #20]
 80137f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137fc:	b2da      	uxtb	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013802:	7dfb      	ldrb	r3, [r7, #23]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3718      	adds	r7, #24
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7ff ff7b 	bl	8013710 <f_sync>
 801381a:	4603      	mov	r3, r0
 801381c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801381e:	7bfb      	ldrb	r3, [r7, #15]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d118      	bne.n	8013856 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f107 0208 	add.w	r2, r7, #8
 801382a:	4611      	mov	r1, r2
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff fb93 	bl	8012f58 <validate>
 8013832:	4603      	mov	r3, r0
 8013834:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013836:	7bfb      	ldrb	r3, [r7, #15]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d10c      	bne.n	8013856 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	691b      	ldr	r3, [r3, #16]
 8013840:	4618      	mov	r0, r3
 8013842:	f7fe f877 	bl	8011934 <dec_lock>
 8013846:	4603      	mov	r3, r0
 8013848:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801384a:	7bfb      	ldrb	r3, [r7, #15]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d102      	bne.n	8013856 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013856:	7bfb      	ldrb	r3, [r7, #15]
}
 8013858:	4618      	mov	r0, r3
 801385a:	3710      	adds	r7, #16
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}

08013860 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	b096      	sub	sp, #88	; 0x58
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013868:	f107 0108 	add.w	r1, r7, #8
 801386c:	1d3b      	adds	r3, r7, #4
 801386e:	2202      	movs	r2, #2
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff f8ed 	bl	8012a50 <find_volume>
 8013876:	4603      	mov	r3, r0
 8013878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013884:	2b00      	cmp	r3, #0
 8013886:	f040 80f2 	bne.w	8013a6e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	f107 030c 	add.w	r3, r7, #12
 8013890:	4611      	mov	r1, r2
 8013892:	4618      	mov	r0, r3
 8013894:	f7fe ffcc 	bl	8012830 <follow_path>
 8013898:	4603      	mov	r3, r0
 801389a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801389e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d102      	bne.n	80138ac <f_mkdir+0x4c>
 80138a6:	2308      	movs	r3, #8
 80138a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80138ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138b0:	2b04      	cmp	r3, #4
 80138b2:	f040 80dc 	bne.w	8013a6e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80138b6:	f107 030c 	add.w	r3, r7, #12
 80138ba:	2100      	movs	r1, #0
 80138bc:	4618      	mov	r0, r3
 80138be:	f7fe fbe6 	bl	801208e <create_chain>
 80138c2:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	895b      	ldrh	r3, [r3, #10]
 80138c8:	461a      	mov	r2, r3
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	899b      	ldrh	r3, [r3, #12]
 80138ce:	fb03 f302 	mul.w	r3, r3, r2
 80138d2:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80138d4:	2300      	movs	r3, #0
 80138d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80138da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d102      	bne.n	80138e6 <f_mkdir+0x86>
 80138e0:	2307      	movs	r3, #7
 80138e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80138e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138e8:	2b01      	cmp	r3, #1
 80138ea:	d102      	bne.n	80138f2 <f_mkdir+0x92>
 80138ec:	2302      	movs	r3, #2
 80138ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80138f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138f8:	d102      	bne.n	8013900 <f_mkdir+0xa0>
 80138fa:	2301      	movs	r3, #1
 80138fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013904:	2b00      	cmp	r3, #0
 8013906:	d106      	bne.n	8013916 <f_mkdir+0xb6>
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	4618      	mov	r0, r3
 801390c:	f7fe f872 	bl	80119f4 <sync_window>
 8013910:	4603      	mov	r3, r0
 8013912:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013916:	f000 fa15 	bl	8013d44 <get_fattime>
 801391a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801391c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013920:	2b00      	cmp	r3, #0
 8013922:	d16c      	bne.n	80139fe <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013928:	4618      	mov	r0, r3
 801392a:	f7fe f945 	bl	8011bb8 <clust2sect>
 801392e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	3334      	adds	r3, #52	; 0x34
 8013934:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	899b      	ldrh	r3, [r3, #12]
 801393a:	461a      	mov	r2, r3
 801393c:	2100      	movs	r1, #0
 801393e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013940:	f7fd fe8f 	bl	8011662 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013944:	220b      	movs	r2, #11
 8013946:	2120      	movs	r1, #32
 8013948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801394a:	f7fd fe8a 	bl	8011662 <mem_set>
					dir[DIR_Name] = '.';
 801394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013950:	222e      	movs	r2, #46	; 0x2e
 8013952:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013956:	330b      	adds	r3, #11
 8013958:	2210      	movs	r2, #16
 801395a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801395e:	3316      	adds	r3, #22
 8013960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013962:	4618      	mov	r0, r3
 8013964:	f7fd fe30 	bl	80115c8 <st_dword>
					st_clust(fs, dir, dcl);
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801396c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe fe22 	bl	80125b8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013976:	3320      	adds	r3, #32
 8013978:	2220      	movs	r2, #32
 801397a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801397c:	4618      	mov	r0, r3
 801397e:	f7fd fe4f 	bl	8011620 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013984:	3321      	adds	r3, #33	; 0x21
 8013986:	222e      	movs	r2, #46	; 0x2e
 8013988:	701a      	strb	r2, [r3, #0]
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	2b03      	cmp	r3, #3
 8013994:	d106      	bne.n	80139a4 <f_mkdir+0x144>
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801399a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801399c:	429a      	cmp	r2, r3
 801399e:	d101      	bne.n	80139a4 <f_mkdir+0x144>
 80139a0:	2300      	movs	r3, #0
 80139a2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80139a4:	68b8      	ldr	r0, [r7, #8]
 80139a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139a8:	3320      	adds	r3, #32
 80139aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139ac:	4619      	mov	r1, r3
 80139ae:	f7fe fe03 	bl	80125b8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	895b      	ldrh	r3, [r3, #10]
 80139b6:	653b      	str	r3, [r7, #80]	; 0x50
 80139b8:	e01c      	b.n	80139f4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 80139ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139bc:	1c5a      	adds	r2, r3, #1
 80139be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80139c0:	68ba      	ldr	r2, [r7, #8]
 80139c2:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2201      	movs	r2, #1
 80139c8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7fe f811 	bl	80119f4 <sync_window>
 80139d2:	4603      	mov	r3, r0
 80139d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80139d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d10d      	bne.n	80139fc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	899b      	ldrh	r3, [r3, #12]
 80139e4:	461a      	mov	r2, r3
 80139e6:	2100      	movs	r1, #0
 80139e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80139ea:	f7fd fe3a 	bl	8011662 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80139ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f0:	3b01      	subs	r3, #1
 80139f2:	653b      	str	r3, [r7, #80]	; 0x50
 80139f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d1df      	bne.n	80139ba <f_mkdir+0x15a>
 80139fa:	e000      	b.n	80139fe <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80139fc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80139fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d107      	bne.n	8013a16 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013a06:	f107 030c 	add.w	r3, r7, #12
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fe fe49 	bl	80126a2 <dir_register>
 8013a10:	4603      	mov	r3, r0
 8013a12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d120      	bne.n	8013a60 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a20:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a24:	3316      	adds	r3, #22
 8013a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7fd fdcd 	bl	80115c8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7fe fdbf 	bl	80125b8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a3c:	330b      	adds	r3, #11
 8013a3e:	2210      	movs	r2, #16
 8013a40:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	2201      	movs	r2, #1
 8013a46:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d10e      	bne.n	8013a6e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fe f840 	bl	8011ad8 <sync_fs>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013a5e:	e006      	b.n	8013a6e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013a60:	f107 030c 	add.w	r3, r7, #12
 8013a64:	2200      	movs	r2, #0
 8013a66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7fe faab 	bl	8011fc4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	3758      	adds	r7, #88	; 0x58
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
	...

08013a7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b087      	sub	sp, #28
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	4613      	mov	r3, r2
 8013a88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013a92:	4b1f      	ldr	r3, [pc, #124]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013a94:	7a5b      	ldrb	r3, [r3, #9]
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d131      	bne.n	8013b00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013a9c:	4b1c      	ldr	r3, [pc, #112]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013a9e:	7a5b      	ldrb	r3, [r3, #9]
 8013aa0:	b2db      	uxtb	r3, r3
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	4b1a      	ldr	r3, [pc, #104]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013aaa:	4b19      	ldr	r3, [pc, #100]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013aac:	7a5b      	ldrb	r3, [r3, #9]
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	4a17      	ldr	r2, [pc, #92]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013ab2:	009b      	lsls	r3, r3, #2
 8013ab4:	4413      	add	r3, r2
 8013ab6:	68fa      	ldr	r2, [r7, #12]
 8013ab8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013aba:	4b15      	ldr	r3, [pc, #84]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013abc:	7a5b      	ldrb	r3, [r3, #9]
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	4b13      	ldr	r3, [pc, #76]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013ac4:	4413      	add	r3, r2
 8013ac6:	79fa      	ldrb	r2, [r7, #7]
 8013ac8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013aca:	4b11      	ldr	r3, [pc, #68]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013acc:	7a5b      	ldrb	r3, [r3, #9]
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	1c5a      	adds	r2, r3, #1
 8013ad2:	b2d1      	uxtb	r1, r2
 8013ad4:	4a0e      	ldr	r2, [pc, #56]	; (8013b10 <FATFS_LinkDriverEx+0x94>)
 8013ad6:	7251      	strb	r1, [r2, #9]
 8013ad8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013ada:	7dbb      	ldrb	r3, [r7, #22]
 8013adc:	3330      	adds	r3, #48	; 0x30
 8013ade:	b2da      	uxtb	r2, r3
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	223a      	movs	r2, #58	; 0x3a
 8013aea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	3302      	adds	r3, #2
 8013af0:	222f      	movs	r2, #47	; 0x2f
 8013af2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	3303      	adds	r3, #3
 8013af8:	2200      	movs	r2, #0
 8013afa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013afc:	2300      	movs	r3, #0
 8013afe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	371c      	adds	r7, #28
 8013b06:	46bd      	mov	sp, r7
 8013b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	20000a18 	.word	0x20000a18

08013b14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013b1e:	2200      	movs	r2, #0
 8013b20:	6839      	ldr	r1, [r7, #0]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f7ff ffaa 	bl	8013a7c <FATFS_LinkDriverEx>
 8013b28:	4603      	mov	r3, r0
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
	...

08013b34 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8013b34:	b480      	push	{r7}
 8013b36:	b085      	sub	sp, #20
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8013b40:	2300      	movs	r3, #0
 8013b42:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8013b44:	2301      	movs	r3, #1
 8013b46:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8013b48:	4b15      	ldr	r3, [pc, #84]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b4a:	7a5b      	ldrb	r3, [r3, #9]
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d01e      	beq.n	8013b90 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	3b30      	subs	r3, #48	; 0x30
 8013b58:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8013b5a:	7bbb      	ldrb	r3, [r7, #14]
 8013b5c:	4a10      	ldr	r2, [pc, #64]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b5e:	009b      	lsls	r3, r3, #2
 8013b60:	4413      	add	r3, r2
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d013      	beq.n	8013b90 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8013b68:	7bbb      	ldrb	r3, [r7, #14]
 8013b6a:	4a0d      	ldr	r2, [pc, #52]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	4413      	add	r3, r2
 8013b70:	2200      	movs	r2, #0
 8013b72:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8013b74:	7bbb      	ldrb	r3, [r7, #14]
 8013b76:	4a0a      	ldr	r2, [pc, #40]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b78:	4413      	add	r3, r2
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8013b7e:	4b08      	ldr	r3, [pc, #32]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b80:	7a5b      	ldrb	r3, [r3, #9]
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	3b01      	subs	r3, #1
 8013b86:	b2da      	uxtb	r2, r3
 8013b88:	4b05      	ldr	r3, [pc, #20]	; (8013ba0 <FATFS_UnLinkDriverEx+0x6c>)
 8013b8a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3714      	adds	r7, #20
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	20000a18 	.word	0x20000a18

08013ba4 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8013bac:	2100      	movs	r1, #0
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff ffc0 	bl	8013b34 <FATFS_UnLinkDriverEx>
 8013bb4:	4603      	mov	r3, r0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3708      	adds	r7, #8
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
	...

08013bc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013bca:	f000 f896 	bl	8013cfa <BSP_SD_IsDetected>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d001      	beq.n	8013bd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e012      	b.n	8013bfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013bd8:	480b      	ldr	r0, [pc, #44]	; (8013c08 <BSP_SD_Init+0x48>)
 8013bda:	f7f6 fdf5 	bl	800a7c8 <HAL_SD_Init>
 8013bde:	4603      	mov	r3, r0
 8013be0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013be2:	79fb      	ldrb	r3, [r7, #7]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d109      	bne.n	8013bfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8013be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013bec:	4806      	ldr	r0, [pc, #24]	; (8013c08 <BSP_SD_Init+0x48>)
 8013bee:	f7f7 fbd0 	bl	800b392 <HAL_SD_ConfigWideBusOperation>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d001      	beq.n	8013bfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	20008e8c 	.word	0x20008e8c

08013c0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	68ba      	ldr	r2, [r7, #8]
 8013c20:	68f9      	ldr	r1, [r7, #12]
 8013c22:	4806      	ldr	r0, [pc, #24]	; (8013c3c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013c24:	f7f6 fe58 	bl	800a8d8 <HAL_SD_ReadBlocks_DMA>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	20008e8c 	.word	0x20008e8c

08013c40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b086      	sub	sp, #24
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	68f9      	ldr	r1, [r7, #12]
 8013c56:	4806      	ldr	r0, [pc, #24]	; (8013c70 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013c58:	f7f6 ff0a 	bl	800aa70 <HAL_SD_WriteBlocks_DMA>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d001      	beq.n	8013c66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c62:	2301      	movs	r3, #1
 8013c64:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3718      	adds	r7, #24
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}
 8013c70:	20008e8c 	.word	0x20008e8c

08013c74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013c78:	4805      	ldr	r0, [pc, #20]	; (8013c90 <BSP_SD_GetCardState+0x1c>)
 8013c7a:	f7f7 fc06 	bl	800b48a <HAL_SD_GetCardState>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b04      	cmp	r3, #4
 8013c82:	bf14      	ite	ne
 8013c84:	2301      	movne	r3, #1
 8013c86:	2300      	moveq	r3, #0
 8013c88:	b2db      	uxtb	r3, r3
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	20008e8c 	.word	0x20008e8c

08013c94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8013c9c:	6879      	ldr	r1, [r7, #4]
 8013c9e:	4803      	ldr	r0, [pc, #12]	; (8013cac <BSP_SD_GetCardInfo+0x18>)
 8013ca0:	f7f7 fb4b 	bl	800b33a <HAL_SD_GetCardInfo>
}
 8013ca4:	bf00      	nop
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20008e8c 	.word	0x20008e8c

08013cb0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8013cb8:	f000 f818 	bl	8013cec <BSP_SD_AbortCallback>
}
 8013cbc:	bf00      	nop
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013ccc:	f002 f902 	bl	8015ed4 <BSP_SD_WriteCpltCallback>
}
 8013cd0:	bf00      	nop
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013ce0:	f002 f904 	bl	8015eec <BSP_SD_ReadCpltCallback>
}
 8013ce4:	bf00      	nop
 8013ce6:	3708      	adds	r7, #8
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8013cec:	b480      	push	{r7}
 8013cee:	af00      	add	r7, sp, #0

}
 8013cf0:	bf00      	nop
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf8:	4770      	bx	lr

08013cfa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8013cfa:	b580      	push	{r7, lr}
 8013cfc:	b082      	sub	sp, #8
 8013cfe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013d00:	2301      	movs	r3, #1
 8013d02:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8013d04:	f000 f826 	bl	8013d54 <BSP_PlatformIsDetected>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d101      	bne.n	8013d12 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013d12:	79fb      	ldrb	r3, [r7, #7]
 8013d14:	b2db      	uxtb	r3, r3
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3708      	adds	r7, #8
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
	...

08013d20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013d24:	4904      	ldr	r1, [pc, #16]	; (8013d38 <MX_FATFS_Init+0x18>)
 8013d26:	4805      	ldr	r0, [pc, #20]	; (8013d3c <MX_FATFS_Init+0x1c>)
 8013d28:	f7ff fef4 	bl	8013b14 <FATFS_LinkDriver>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	461a      	mov	r2, r3
 8013d30:	4b03      	ldr	r3, [pc, #12]	; (8013d40 <MX_FATFS_Init+0x20>)
 8013d32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8013d34:	bf00      	nop
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	20006c30 	.word	0x20006c30
 8013d3c:	0801e2a4 	.word	0x0801e2a4
 8013d40:	20006c2c 	.word	0x20006c2c

08013d44 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013d44:	b480      	push	{r7}
 8013d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013d48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b082      	sub	sp, #8
 8013d58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d62:	4806      	ldr	r0, [pc, #24]	; (8013d7c <BSP_PlatformIsDetected+0x28>)
 8013d64:	f7f3 fd3e 	bl	80077e4 <HAL_GPIO_ReadPin>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d001      	beq.n	8013d72 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8013d72:	79fb      	ldrb	r3, [r7, #7]
}  
 8013d74:	4618      	mov	r0, r3
 8013d76:	3708      	adds	r7, #8
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	40020000 	.word	0x40020000

08013d80 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8013d80:	b480      	push	{r7}
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8013d94:	b480      	push	{r7}
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9e:	4a04      	ldr	r2, [pc, #16]	; (8013db0 <millis+0x1c>)
 8013da0:	fba2 2303 	umull	r2, r3, r2, r3
 8013da4:	099b      	lsrs	r3, r3, #6
 8013da6:	4618      	mov	r0, r3
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr
 8013db0:	10624dd3 	.word	0x10624dd3

08013db4 <getTime>:
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b08c      	sub	sp, #48	; 0x30
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8013dbc:	f107 031c 	add.w	r3, r7, #28
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	601a      	str	r2, [r3, #0]
 8013dc4:	605a      	str	r2, [r3, #4]
 8013dc6:	609a      	str	r2, [r3, #8]
 8013dc8:	60da      	str	r2, [r3, #12]
 8013dca:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8013dcc:	2300      	movs	r3, #0
 8013dce:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8013dd0:	f107 030c 	add.w	r3, r7, #12
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	601a      	str	r2, [r3, #0]
 8013dd8:	605a      	str	r2, [r3, #4]
 8013dda:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8013ddc:	f001 fe48 	bl	8015a70 <Get_RTC_Instance>
 8013de0:	f107 031c 	add.w	r3, r7, #28
 8013de4:	2200      	movs	r2, #0
 8013de6:	4619      	mov	r1, r3
 8013de8:	f7f6 fbcf 	bl	800a58a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8013dec:	f001 fe40 	bl	8015a70 <Get_RTC_Instance>
 8013df0:	f107 0318 	add.w	r3, r7, #24
 8013df4:	2200      	movs	r2, #0
 8013df6:	4619      	mov	r1, r3
 8013df8:	f7f6 fc25 	bl	800a646 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 8013dfc:	7efb      	ldrb	r3, [r7, #27]
 8013dfe:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8013e00:	7e7b      	ldrb	r3, [r7, #25]
 8013e02:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8013e04:	7ebb      	ldrb	r3, [r7, #26]
 8013e06:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8013e08:	7e3b      	ldrb	r3, [r7, #24]
 8013e0a:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8013e0c:	7f3b      	ldrb	r3, [r7, #28]
 8013e0e:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8013e10:	7f7b      	ldrb	r3, [r7, #29]
 8013e12:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8013e14:	7fbb      	ldrb	r3, [r7, #30]
 8013e16:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8013e18:	f7ff ffbc 	bl	8013d94 <millis>
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	4b0c      	ldr	r3, [pc, #48]	; (8013e50 <getTime+0x9c>)
 8013e20:	fba3 1302 	umull	r1, r3, r3, r2
 8013e24:	099b      	lsrs	r3, r3, #6
 8013e26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013e2a:	fb01 f303 	mul.w	r3, r1, r3
 8013e2e:	1ad3      	subs	r3, r2, r3
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	461a      	mov	r2, r3
 8013e38:	f107 030c 	add.w	r3, r7, #12
 8013e3c:	cb03      	ldmia	r3!, {r0, r1}
 8013e3e:	6010      	str	r0, [r2, #0]
 8013e40:	6051      	str	r1, [r2, #4]
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	8113      	strh	r3, [r2, #8]
}
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	3730      	adds	r7, #48	; 0x30
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	10624dd3 	.word	0x10624dd3

08013e54 <print>:
{
 8013e54:	b40f      	push	{r0, r1, r2, r3}
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b084      	sub	sp, #16
 8013e5a:	af00      	add	r7, sp, #0
	if (usbPresent)
 8013e5c:	4b1f      	ldr	r3, [pc, #124]	; (8013edc <print+0x88>)
 8013e5e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8013e62:	2b03      	cmp	r3, #3
 8013e64:	d131      	bne.n	8013eca <print+0x76>
		writePin(LEDD, HIGH);
 8013e66:	2201      	movs	r2, #1
 8013e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013e6c:	481c      	ldr	r0, [pc, #112]	; (8013ee0 <print+0x8c>)
 8013e6e:	f7f3 fcd1 	bl	8007814 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8013e72:	f107 031c 	add.w	r3, r7, #28
 8013e76:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	69b9      	ldr	r1, [r7, #24]
 8013e7c:	4819      	ldr	r0, [pc, #100]	; (8013ee4 <print+0x90>)
 8013e7e:	f004 ffd1 	bl	8018e24 <vsiprintf>
 8013e82:	4603      	mov	r3, r0
 8013e84:	461a      	mov	r2, r3
 8013e86:	4b18      	ldr	r3, [pc, #96]	; (8013ee8 <print+0x94>)
 8013e88:	601a      	str	r2, [r3, #0]
		uint32_t printStart = micros();
 8013e8a:	f7ff ff79 	bl	8013d80 <micros>
 8013e8e:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8013e90:	4b15      	ldr	r3, [pc, #84]	; (8013ee8 <print+0x94>)
 8013e92:	681a      	ldr	r2, [r3, #0]
 8013e94:	4613      	mov	r3, r2
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	4413      	add	r3, r2
 8013e9a:	005b      	lsls	r3, r3, #1
 8013e9c:	3346      	adds	r3, #70	; 0x46
 8013e9e:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013ea0:	e001      	b.n	8013ea6 <print+0x52>
			if (micros() - printStart > timeout && false)
 8013ea2:	f7ff ff6d 	bl	8013d80 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013ea6:	4b10      	ldr	r3, [pc, #64]	; (8013ee8 <print+0x94>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	4619      	mov	r1, r3
 8013eae:	480d      	ldr	r0, [pc, #52]	; (8013ee4 <print+0x90>)
 8013eb0:	f002 fcac 	bl	801680c <CDC_Transmit_FS>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	d0f3      	beq.n	8013ea2 <print+0x4e>
		writePin(LEDD, LOW);
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013ec0:	4807      	ldr	r0, [pc, #28]	; (8013ee0 <print+0x8c>)
 8013ec2:	f7f3 fca7 	bl	8007814 <HAL_GPIO_WritePin>
		return true;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	e000      	b.n	8013ecc <print+0x78>
	return false;
 8013eca:	2300      	movs	r3, #0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ed6:	b004      	add	sp, #16
 8013ed8:	4770      	bx	lr
 8013eda:	bf00      	nop
 8013edc:	20000e3c 	.word	0x20000e3c
 8013ee0:	40020400 	.word	0x40020400
 8013ee4:	20000a28 	.word	0x20000a28
 8013ee8:	20000a24 	.word	0x20000a24

08013eec <println>:
{
 8013eec:	b40f      	push	{r0, r1, r2, r3}
 8013eee:	b580      	push	{r7, lr}
 8013ef0:	b084      	sub	sp, #16
 8013ef2:	af00      	add	r7, sp, #0
	if (usbPresent)
 8013ef4:	4b2a      	ldr	r3, [pc, #168]	; (8013fa0 <println+0xb4>)
 8013ef6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8013efa:	2b03      	cmp	r3, #3
 8013efc:	d147      	bne.n	8013f8e <println+0xa2>
		writePin(LEDD, HIGH);
 8013efe:	2201      	movs	r2, #1
 8013f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f04:	4827      	ldr	r0, [pc, #156]	; (8013fa4 <println+0xb8>)
 8013f06:	f7f3 fc85 	bl	8007814 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 8013f0a:	f107 031c 	add.w	r3, r7, #28
 8013f0e:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	69b9      	ldr	r1, [r7, #24]
 8013f14:	4824      	ldr	r0, [pc, #144]	; (8013fa8 <println+0xbc>)
 8013f16:	f004 ff85 	bl	8018e24 <vsiprintf>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	4b23      	ldr	r3, [pc, #140]	; (8013fac <println+0xc0>)
 8013f20:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 8013f22:	4b22      	ldr	r3, [pc, #136]	; (8013fac <println+0xc0>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4a20      	ldr	r2, [pc, #128]	; (8013fa8 <println+0xbc>)
 8013f28:	210d      	movs	r1, #13
 8013f2a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8013f2c:	4b1f      	ldr	r3, [pc, #124]	; (8013fac <println+0xc0>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	3301      	adds	r3, #1
 8013f32:	4a1d      	ldr	r2, [pc, #116]	; (8013fa8 <println+0xbc>)
 8013f34:	210a      	movs	r1, #10
 8013f36:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8013f38:	4b1c      	ldr	r3, [pc, #112]	; (8013fac <println+0xc0>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	3302      	adds	r3, #2
 8013f3e:	4a1a      	ldr	r2, [pc, #104]	; (8013fa8 <println+0xbc>)
 8013f40:	2100      	movs	r1, #0
 8013f42:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8013f44:	4b19      	ldr	r3, [pc, #100]	; (8013fac <println+0xc0>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	3303      	adds	r3, #3
 8013f4a:	4a18      	ldr	r2, [pc, #96]	; (8013fac <println+0xc0>)
 8013f4c:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 8013f4e:	f7ff ff17 	bl	8013d80 <micros>
 8013f52:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8013f54:	4b15      	ldr	r3, [pc, #84]	; (8013fac <println+0xc0>)
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	4613      	mov	r3, r2
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	005b      	lsls	r3, r3, #1
 8013f60:	3346      	adds	r3, #70	; 0x46
 8013f62:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f64:	e001      	b.n	8013f6a <println+0x7e>
			if (micros() - printStart > timeout && false)
 8013f66:	f7ff ff0b 	bl	8013d80 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8013f6a:	4b10      	ldr	r3, [pc, #64]	; (8013fac <println+0xc0>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	4619      	mov	r1, r3
 8013f72:	480d      	ldr	r0, [pc, #52]	; (8013fa8 <println+0xbc>)
 8013f74:	f002 fc4a 	bl	801680c <CDC_Transmit_FS>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b01      	cmp	r3, #1
 8013f7c:	d0f3      	beq.n	8013f66 <println+0x7a>
		writePin(LEDD, LOW);
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013f84:	4807      	ldr	r0, [pc, #28]	; (8013fa4 <println+0xb8>)
 8013f86:	f7f3 fc45 	bl	8007814 <HAL_GPIO_WritePin>
		return true;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	e000      	b.n	8013f90 <println+0xa4>
	return false;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3710      	adds	r7, #16
 8013f94:	46bd      	mov	sp, r7
 8013f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f9a:	b004      	add	sp, #16
 8013f9c:	4770      	bx	lr
 8013f9e:	bf00      	nop
 8013fa0:	20000e3c 	.word	0x20000e3c
 8013fa4:	40020400 	.word	0x40020400
 8013fa8:	20000a28 	.word	0x20000a28
 8013fac:	20000a24 	.word	0x20000a24

08013fb0 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8013fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fb2:	b091      	sub	sp, #68	; 0x44
 8013fb4:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 8013fb6:	f7ed f97d 	bl	80012b4 <SD_init>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d172      	bne.n	80140a6 <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8013fc0:	4841      	ldr	r0, [pc, #260]	; (80140c8 <sdTest_begin+0x118>)
 8013fc2:	f7ff ff93 	bl	8013eec <println>
		print("[SD] Creating test file...");
 8013fc6:	4841      	ldr	r0, [pc, #260]	; (80140cc <sdTest_begin+0x11c>)
 8013fc8:	f7ff ff44 	bl	8013e54 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 8013fcc:	4840      	ldr	r0, [pc, #256]	; (80140d0 <sdTest_begin+0x120>)
 8013fce:	f7ed f9ad 	bl	800132c <SD_newFile>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d161      	bne.n	801409c <sdTest_begin+0xec>
		{
			println("successful.");
 8013fd8:	483e      	ldr	r0, [pc, #248]	; (80140d4 <sdTest_begin+0x124>)
 8013fda:	f7ff ff87 	bl	8013eec <println>
			bool status = true;
 8013fde:	2301      	movs	r3, #1
 8013fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8013fe4:	493c      	ldr	r1, [pc, #240]	; (80140d8 <sdTest_begin+0x128>)
 8013fe6:	483a      	ldr	r0, [pc, #232]	; (80140d0 <sdTest_begin+0x120>)
 8013fe8:	f7ed f9c8 	bl	800137c <SD_writeToFile>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	bf0c      	ite	eq
 8013ff2:	2301      	moveq	r3, #1
 8013ff4:	2300      	movne	r3, #0
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ffe:	4313      	orrs	r3, r2
 8014000:	2b00      	cmp	r3, #0
 8014002:	bf14      	ite	ne
 8014004:	2301      	movne	r3, #1
 8014006:	2300      	moveq	r3, #0
 8014008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 801400c:	f107 031c 	add.w	r3, r7, #28
 8014010:	4618      	mov	r0, r3
 8014012:	f7ff fecf 	bl	8013db4 <getTime>
			char dateStr[26] = {0};
 8014016:	463b      	mov	r3, r7
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	605a      	str	r2, [r3, #4]
 801401e:	609a      	str	r2, [r3, #8]
 8014020:	60da      	str	r2, [r3, #12]
 8014022:	611a      	str	r2, [r3, #16]
 8014024:	615a      	str	r2, [r3, #20]
 8014026:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8014028:	7fbb      	ldrb	r3, [r7, #30]
 801402a:	461e      	mov	r6, r3
 801402c:	7f7b      	ldrb	r3, [r7, #29]
 801402e:	469c      	mov	ip, r3
 8014030:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8014032:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014036:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 801403a:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 801403e:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8014040:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8014042:	4605      	mov	r5, r0
 8014044:	4638      	mov	r0, r7
 8014046:	9504      	str	r5, [sp, #16]
 8014048:	9403      	str	r4, [sp, #12]
 801404a:	9102      	str	r1, [sp, #8]
 801404c:	9201      	str	r2, [sp, #4]
 801404e:	9300      	str	r3, [sp, #0]
 8014050:	4663      	mov	r3, ip
 8014052:	4632      	mov	r2, r6
 8014054:	4921      	ldr	r1, [pc, #132]	; (80140dc <sdTest_begin+0x12c>)
 8014056:	f003 ff8b 	bl	8017f70 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 801405a:	463b      	mov	r3, r7
 801405c:	4619      	mov	r1, r3
 801405e:	481c      	ldr	r0, [pc, #112]	; (80140d0 <sdTest_begin+0x120>)
 8014060:	f7ed f98c 	bl	800137c <SD_writeToFile>
 8014064:	4603      	mov	r3, r0
 8014066:	2b00      	cmp	r3, #0
 8014068:	bf0c      	ite	eq
 801406a:	2301      	moveq	r3, #1
 801406c:	2300      	movne	r3, #0
 801406e:	b2db      	uxtb	r3, r3
 8014070:	461a      	mov	r2, r3
 8014072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014076:	4313      	orrs	r3, r2
 8014078:	2b00      	cmp	r3, #0
 801407a:	bf14      	ite	ne
 801407c:	2301      	movne	r3, #1
 801407e:	2300      	moveq	r3, #0
 8014080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8014084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014088:	2b00      	cmp	r3, #0
 801408a:	d003      	beq.n	8014094 <sdTest_begin+0xe4>
 801408c:	4814      	ldr	r0, [pc, #80]	; (80140e0 <sdTest_begin+0x130>)
 801408e:	f7ff ff2d 	bl	8013eec <println>
 8014092:	e010      	b.n	80140b6 <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8014094:	4813      	ldr	r0, [pc, #76]	; (80140e4 <sdTest_begin+0x134>)
 8014096:	f7ff ff29 	bl	8013eec <println>
 801409a:	e00c      	b.n	80140b6 <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 801409c:	4812      	ldr	r0, [pc, #72]	; (80140e8 <sdTest_begin+0x138>)
 801409e:	f7ff ff25 	bl	8013eec <println>
			return false;
 80140a2:	2300      	movs	r3, #0
 80140a4:	e00b      	b.n	80140be <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 80140a6:	4811      	ldr	r0, [pc, #68]	; (80140ec <sdTest_begin+0x13c>)
 80140a8:	f7ff ff20 	bl	8013eec <println>
		sdActive = false;
 80140ac:	4b10      	ldr	r3, [pc, #64]	; (80140f0 <sdTest_begin+0x140>)
 80140ae:	2200      	movs	r2, #0
 80140b0:	701a      	strb	r2, [r3, #0]
		return false;
 80140b2:	2300      	movs	r3, #0
 80140b4:	e003      	b.n	80140be <sdTest_begin+0x10e>
	}

	sdActive = true;
 80140b6:	4b0e      	ldr	r3, [pc, #56]	; (80140f0 <sdTest_begin+0x140>)
 80140b8:	2201      	movs	r2, #1
 80140ba:	701a      	strb	r2, [r3, #0]
	return true;
 80140bc:	2301      	movs	r3, #1
}
 80140be:	4618      	mov	r0, r3
 80140c0:	372c      	adds	r7, #44	; 0x2c
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140c6:	bf00      	nop
 80140c8:	0801de54 	.word	0x0801de54
 80140cc:	0801de64 	.word	0x0801de64
 80140d0:	0801de80 	.word	0x0801de80
 80140d4:	0801de8c 	.word	0x0801de8c
 80140d8:	0801de98 	.word	0x0801de98
 80140dc:	0801dea8 	.word	0x0801dea8
 80140e0:	0801dec0 	.word	0x0801dec0
 80140e4:	0801dee4 	.word	0x0801dee4
 80140e8:	0801df08 	.word	0x0801df08
 80140ec:	0801df18 	.word	0x0801df18
 80140f0:	20006800 	.word	0x20006800

080140f4 <duplex_begin>:
bool isReceiving;
bool firstTransmission;
uint8_t packetNumber;

static bool duplex_begin(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 80140fa:	4b26      	ldr	r3, [pc, #152]	; (8014194 <duplex_begin+0xa0>)
 80140fc:	2220      	movs	r2, #32
 80140fe:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 8014100:	4b24      	ldr	r3, [pc, #144]	; (8014194 <duplex_begin+0xa0>)
 8014102:	2240      	movs	r2, #64	; 0x40
 8014104:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 8014106:	4b23      	ldr	r3, [pc, #140]	; (8014194 <duplex_begin+0xa0>)
 8014108:	f44f 7200 	mov.w	r2, #512	; 0x200
 801410c:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 801410e:	4b21      	ldr	r3, [pc, #132]	; (8014194 <duplex_begin+0xa0>)
 8014110:	2280      	movs	r2, #128	; 0x80
 8014112:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 8014114:	4b1f      	ldr	r3, [pc, #124]	; (8014194 <duplex_begin+0xa0>)
 8014116:	4a20      	ldr	r2, [pc, #128]	; (8014198 <duplex_begin+0xa4>)
 8014118:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 801411a:	4b1e      	ldr	r3, [pc, #120]	; (8014194 <duplex_begin+0xa0>)
 801411c:	4a1f      	ldr	r2, [pc, #124]	; (801419c <duplex_begin+0xa8>)
 801411e:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 8014120:	4b1c      	ldr	r3, [pc, #112]	; (8014194 <duplex_begin+0xa0>)
 8014122:	4a1f      	ldr	r2, [pc, #124]	; (80141a0 <duplex_begin+0xac>)
 8014124:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 8014126:	4b1b      	ldr	r3, [pc, #108]	; (8014194 <duplex_begin+0xa0>)
 8014128:	4a1c      	ldr	r2, [pc, #112]	; (801419c <duplex_begin+0xa8>)
 801412a:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 801412c:	f001 fc8c 	bl	8015a48 <Get_SPI1_Instance>
 8014130:	4602      	mov	r2, r0
 8014132:	4b18      	ldr	r3, [pc, #96]	; (8014194 <duplex_begin+0xa0>)
 8014134:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 8014136:	4b17      	ldr	r3, [pc, #92]	; (8014194 <duplex_begin+0xa0>)
 8014138:	4a1a      	ldr	r2, [pc, #104]	; (80141a4 <duplex_begin+0xb0>)
 801413a:	ca07      	ldmia	r2, {r0, r1, r2}
 801413c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 8014140:	4b14      	ldr	r3, [pc, #80]	; (8014194 <duplex_begin+0xa0>)
 8014142:	2201      	movs	r2, #1
 8014144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	uint8_t attempts = 0;
 8014148:	2300      	movs	r3, #0
 801414a:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 801414c:	e00b      	b.n	8014166 <duplex_begin+0x72>
	{
		HAL_Delay(500);
 801414e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014152:	f7f2 fce1 	bl	8006b18 <HAL_Delay>
		if (DUPLEX_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
		attempts++;
 8014156:	79fb      	ldrb	r3, [r7, #7]
 8014158:	3301      	adds	r3, #1
 801415a:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 801415c:	79fb      	ldrb	r3, [r7, #7]
 801415e:	2b04      	cmp	r3, #4
 8014160:	d901      	bls.n	8014166 <duplex_begin+0x72>
		{
			if (DUPLEX_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
			return false;
 8014162:	2300      	movs	r3, #0
 8014164:	e011      	b.n	801418a <duplex_begin+0x96>
	while (!SX1278_init(&radio))
 8014166:	480b      	ldr	r0, [pc, #44]	; (8014194 <duplex_begin+0xa0>)
 8014168:	f7ed fa66 	bl	8001638 <SX1278_init>
 801416c:	4603      	mov	r3, r0
 801416e:	f083 0301 	eor.w	r3, r3, #1
 8014172:	b2db      	uxtb	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d1ea      	bne.n	801414e <duplex_begin+0x5a>
		}
	}
	if (DUPLEX_DEBUG) println("[LoRa] Radio successful init!");
	packetNumber = 1;
 8014178:	4b0b      	ldr	r3, [pc, #44]	; (80141a8 <duplex_begin+0xb4>)
 801417a:	2201      	movs	r2, #1
 801417c:	701a      	strb	r2, [r3, #0]
	firstTransmission = true;
 801417e:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <duplex_begin+0xb8>)
 8014180:	2201      	movs	r2, #1
 8014182:	701a      	strb	r2, [r3, #0]
	isReceiving = false;
 8014184:	4b0a      	ldr	r3, [pc, #40]	; (80141b0 <duplex_begin+0xbc>)
 8014186:	2200      	movs	r2, #0
 8014188:	701a      	strb	r2, [r3, #0]
}
 801418a:	4618      	mov	r0, r3
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	2000314c 	.word	0x2000314c
 8014198:	40020800 	.word	0x40020800
 801419c:	40020000 	.word	0x40020000
 80141a0:	40020400 	.word	0x40020400
 80141a4:	2000011c 	.word	0x2000011c
 80141a8:	200067f8 	.word	0x200067f8
 80141ac:	200049d4 	.word	0x200049d4
 80141b0:	20006c20 	.word	0x20006c20

080141b4 <duplex_checkINT>:

static bool duplex_checkINT()
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	af00      	add	r7, sp, #0
	return (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET) || SX1278_intTimeout(&radio));
 80141b8:	4b10      	ldr	r3, [pc, #64]	; (80141fc <duplex_checkINT+0x48>)
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d115      	bne.n	80141ec <duplex_checkINT+0x38>
 80141c0:	4b0f      	ldr	r3, [pc, #60]	; (8014200 <duplex_checkINT+0x4c>)
 80141c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00a      	beq.n	80141e0 <duplex_checkINT+0x2c>
 80141ca:	4b0d      	ldr	r3, [pc, #52]	; (8014200 <duplex_checkINT+0x4c>)
 80141cc:	69da      	ldr	r2, [r3, #28]
 80141ce:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <duplex_checkINT+0x4c>)
 80141d0:	8a1b      	ldrh	r3, [r3, #16]
 80141d2:	4619      	mov	r1, r3
 80141d4:	4610      	mov	r0, r2
 80141d6:	f7f3 fb05 	bl	80077e4 <HAL_GPIO_ReadPin>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d005      	beq.n	80141ec <duplex_checkINT+0x38>
 80141e0:	4807      	ldr	r0, [pc, #28]	; (8014200 <duplex_checkINT+0x4c>)
 80141e2:	f7ed fd66 	bl	8001cb2 <SX1278_intTimeout>
 80141e6:	4603      	mov	r3, r0
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d001      	beq.n	80141f0 <duplex_checkINT+0x3c>
 80141ec:	2301      	movs	r3, #1
 80141ee:	e000      	b.n	80141f2 <duplex_checkINT+0x3e>
 80141f0:	2300      	movs	r3, #0
 80141f2:	f003 0301 	and.w	r3, r3, #1
 80141f6:	b2db      	uxtb	r3, r3
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	200049d4 	.word	0x200049d4
 8014200:	2000314c 	.word	0x2000314c

08014204 <duplex_loop>:

static bool duplex_loop(uint8_t* buf, uint8_t len, bool externallyInvoked)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	460b      	mov	r3, r1
 801420e:	70fb      	strb	r3, [r7, #3]
 8014210:	4613      	mov	r3, r2
 8014212:	70bb      	strb	r3, [r7, #2]
	if (radio.active)
 8014214:	4b45      	ldr	r3, [pc, #276]	; (801432c <duplex_loop+0x128>)
 8014216:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 801421a:	2b00      	cmp	r3, #0
 801421c:	f000 8081 	beq.w	8014322 <duplex_loop+0x11e>
	{
		if (radio.useDio0IRQ)
 8014220:	4b42      	ldr	r3, [pc, #264]	; (801432c <duplex_loop+0x128>)
 8014222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014226:	2b00      	cmp	r3, #0
 8014228:	d073      	beq.n	8014312 <duplex_loop+0x10e>
		{
			// manually check for interrupt
			if (externallyInvoked || duplex_checkINT())
 801422a:	78bb      	ldrb	r3, [r7, #2]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d104      	bne.n	801423a <duplex_loop+0x36>
 8014230:	f7ff ffc0 	bl	80141b4 <duplex_checkINT>
 8014234:	4603      	mov	r3, r0
 8014236:	2b00      	cmp	r3, #0
 8014238:	d069      	beq.n	801430e <duplex_loop+0x10a>
			{
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 801423a:	4b3d      	ldr	r3, [pc, #244]	; (8014330 <duplex_loop+0x12c>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	f083 0301 	eor.w	r3, r3, #1
 8014242:	b2db      	uxtb	r3, r3
 8014244:	2b00      	cmp	r3, #0
 8014246:	d002      	beq.n	801424e <duplex_loop+0x4a>
 8014248:	4838      	ldr	r0, [pc, #224]	; (801432c <duplex_loop+0x128>)
 801424a:	f7ed fd05 	bl	8001c58 <SX1278_dio0_IRQ>
				if (packetNumber == 0)
 801424e:	4b39      	ldr	r3, [pc, #228]	; (8014334 <duplex_loop+0x130>)
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d112      	bne.n	801427c <duplex_loop+0x78>
				{
					if (DUPLEX_DEBUG) println("[LoRa] Packet received!");
					if (radio.newPacket)
 8014256:	4b35      	ldr	r3, [pc, #212]	; (801432c <duplex_loop+0x128>)
 8014258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801425c:	2b00      	cmp	r3, #0
 801425e:	d003      	beq.n	8014268 <duplex_loop+0x64>
					{
						log_radio(&radio, false);
 8014260:	2100      	movs	r1, #0
 8014262:	4832      	ldr	r0, [pc, #200]	; (801432c <duplex_loop+0x128>)
 8014264:	f7f2 fb8c 	bl	8006980 <log_radio>
					}
					else if (radio.rxTimeout)
					{
						if (DUPLEX_DEBUG) println("[LoRa] Receive timeout.");
					}
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8014268:	2200      	movs	r2, #0
 801426a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801426e:	4832      	ldr	r0, [pc, #200]	; (8014338 <duplex_loop+0x134>)
 8014270:	f7f3 fad0 	bl	8007814 <HAL_GPIO_WritePin>
					isReceiving = false;
 8014274:	4b31      	ldr	r3, [pc, #196]	; (801433c <duplex_loop+0x138>)
 8014276:	2200      	movs	r2, #0
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	e003      	b.n	8014284 <duplex_loop+0x80>
						printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
						printv(printBuffer, printLen);
						printv(buf, len);
						println("]");
					}
					log_radio(&radio, true);
 801427c:	2101      	movs	r1, #1
 801427e:	482b      	ldr	r0, [pc, #172]	; (801432c <duplex_loop+0x128>)
 8014280:	f7f2 fb7e 	bl	8006980 <log_radio>
				}

				if (packetNumber == DUPLEX_TX_COUNT - 1)
 8014284:	4b2b      	ldr	r3, [pc, #172]	; (8014334 <duplex_loop+0x130>)
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	2b06      	cmp	r3, #6
 801428a:	d10f      	bne.n	80142ac <duplex_loop+0xa8>
				{
					SX1278_receive(&radio);
 801428c:	4827      	ldr	r0, [pc, #156]	; (801432c <duplex_loop+0x128>)
 801428e:	f7ed fb07 	bl	80018a0 <SX1278_receive>
					packetNumber = -1;
 8014292:	4b28      	ldr	r3, [pc, #160]	; (8014334 <duplex_loop+0x130>)
 8014294:	22ff      	movs	r2, #255	; 0xff
 8014296:	701a      	strb	r2, [r3, #0]
					isReceiving = true;
 8014298:	4b28      	ldr	r3, [pc, #160]	; (801433c <duplex_loop+0x138>)
 801429a:	2201      	movs	r2, #1
 801429c:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 801429e:	2201      	movs	r2, #1
 80142a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80142a4:	4824      	ldr	r0, [pc, #144]	; (8014338 <duplex_loop+0x134>)
 80142a6:	f7f3 fab5 	bl	8007814 <HAL_GPIO_WritePin>
 80142aa:	e00c      	b.n	80142c6 <duplex_loop+0xc2>
				}
				else
				{
					buf[len - 1] = packetNumber;
 80142ac:	78fb      	ldrb	r3, [r7, #3]
 80142ae:	3b01      	subs	r3, #1
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	4413      	add	r3, r2
 80142b4:	4a1f      	ldr	r2, [pc, #124]	; (8014334 <duplex_loop+0x130>)
 80142b6:	7812      	ldrb	r2, [r2, #0]
 80142b8:	701a      	strb	r2, [r3, #0]
					SX1278_transmit(&radio, buf, len);
 80142ba:	78fb      	ldrb	r3, [r7, #3]
 80142bc:	461a      	mov	r2, r3
 80142be:	6879      	ldr	r1, [r7, #4]
 80142c0:	481a      	ldr	r0, [pc, #104]	; (801432c <duplex_loop+0x128>)
 80142c2:	f7ed fab1 	bl	8001828 <SX1278_transmit>
					if (DUPLEX_DEBUG) println("[LoRa] Packet pushed!");
				}
				firstTransmission = false;
 80142c6:	4b1a      	ldr	r3, [pc, #104]	; (8014330 <duplex_loop+0x12c>)
 80142c8:	2200      	movs	r2, #0
 80142ca:	701a      	strb	r2, [r3, #0]
				packetNumber++;
 80142cc:	4b19      	ldr	r3, [pc, #100]	; (8014334 <duplex_loop+0x130>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	3301      	adds	r3, #1
 80142d2:	b2da      	uxtb	r2, r3
 80142d4:	4b17      	ldr	r3, [pc, #92]	; (8014334 <duplex_loop+0x130>)
 80142d6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 80142d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80142dc:	4816      	ldr	r0, [pc, #88]	; (8014338 <duplex_loop+0x134>)
 80142de:	f7f3 fab2 	bl	8007846 <HAL_GPIO_TogglePin>
				return true && !(radio.rxTimeout && isReceiving);
 80142e2:	4b12      	ldr	r3, [pc, #72]	; (801432c <duplex_loop+0x128>)
 80142e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80142e8:	f083 0301 	eor.w	r3, r3, #1
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <duplex_loop+0xfc>
 80142f2:	4b12      	ldr	r3, [pc, #72]	; (801433c <duplex_loop+0x138>)
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	f083 0301 	eor.w	r3, r3, #1
 80142fa:	b2db      	uxtb	r3, r3
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d001      	beq.n	8014304 <duplex_loop+0x100>
 8014300:	2301      	movs	r3, #1
 8014302:	e000      	b.n	8014306 <duplex_loop+0x102>
 8014304:	2300      	movs	r3, #0
 8014306:	f003 0301 	and.w	r3, r3, #1
 801430a:	b2db      	uxtb	r3, r3
 801430c:	e00a      	b.n	8014324 <duplex_loop+0x120>
			}
			else return false;
 801430e:	2300      	movs	r3, #0
 8014310:	e008      	b.n	8014324 <duplex_loop+0x120>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 8014312:	78fb      	ldrb	r3, [r7, #3]
 8014314:	461a      	mov	r2, r3
 8014316:	6879      	ldr	r1, [r7, #4]
 8014318:	4804      	ldr	r0, [pc, #16]	; (801432c <duplex_loop+0x128>)
 801431a:	f7ed fa85 	bl	8001828 <SX1278_transmit>
			if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
			return true;
 801431e:	2301      	movs	r3, #1
 8014320:	e000      	b.n	8014324 <duplex_loop+0x120>
		}
	}
	return false;
 8014322:	2300      	movs	r3, #0
}
 8014324:	4618      	mov	r0, r3
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}
 801432c:	2000314c 	.word	0x2000314c
 8014330:	200049d4 	.word	0x200049d4
 8014334:	200067f8 	.word	0x200067f8
 8014338:	40020400 	.word	0x40020400
 801433c:	20006c20 	.word	0x20006c20

08014340 <imuTest_printData>:

MPU9250 mpu;
uint32_t lastPrint;

static void imuTest_printData(void)
{
 8014340:	b480      	push	{r7}
 8014342:	af00      	add	r7, sp, #0
	#endif

	#if IMUTEST_PRINT_3DPLOT
	println("w%fwa%fab%fbc%fc%f", mpu.q[0], mpu.q[1], mpu.q[2], mpu.q[3], mpu.alg_deltat);
	#endif
}
 8014344:	bf00      	nop
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr
	...

08014350 <imuTest_printBiases>:


static void imuTest_printBiases(void)
{
 8014350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014354:	b084      	sub	sp, #16
 8014356:	af04      	add	r7, sp, #16
	println("accel biases [ms]:\t%f\t%f\t%f", 1000.0 * mpu.accelBias[0], 1000.0 * mpu.accelBias[1], 1000.0 * mpu.accelBias[2]);
 8014358:	4b3a      	ldr	r3, [pc, #232]	; (8014444 <imuTest_printBiases+0xf4>)
 801435a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801435c:	4618      	mov	r0, r3
 801435e:	f7ec f903 	bl	8000568 <__aeabi_f2d>
 8014362:	f04f 0200 	mov.w	r2, #0
 8014366:	4b38      	ldr	r3, [pc, #224]	; (8014448 <imuTest_printBiases+0xf8>)
 8014368:	f7ec f956 	bl	8000618 <__aeabi_dmul>
 801436c:	4603      	mov	r3, r0
 801436e:	460c      	mov	r4, r1
 8014370:	4698      	mov	r8, r3
 8014372:	46a1      	mov	r9, r4
 8014374:	4b33      	ldr	r3, [pc, #204]	; (8014444 <imuTest_printBiases+0xf4>)
 8014376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014378:	4618      	mov	r0, r3
 801437a:	f7ec f8f5 	bl	8000568 <__aeabi_f2d>
 801437e:	f04f 0200 	mov.w	r2, #0
 8014382:	4b31      	ldr	r3, [pc, #196]	; (8014448 <imuTest_printBiases+0xf8>)
 8014384:	f7ec f948 	bl	8000618 <__aeabi_dmul>
 8014388:	4603      	mov	r3, r0
 801438a:	460c      	mov	r4, r1
 801438c:	4625      	mov	r5, r4
 801438e:	461c      	mov	r4, r3
 8014390:	4b2c      	ldr	r3, [pc, #176]	; (8014444 <imuTest_printBiases+0xf4>)
 8014392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014394:	4618      	mov	r0, r3
 8014396:	f7ec f8e7 	bl	8000568 <__aeabi_f2d>
 801439a:	f04f 0200 	mov.w	r2, #0
 801439e:	4b2a      	ldr	r3, [pc, #168]	; (8014448 <imuTest_printBiases+0xf8>)
 80143a0:	f7ec f93a 	bl	8000618 <__aeabi_dmul>
 80143a4:	4602      	mov	r2, r0
 80143a6:	460b      	mov	r3, r1
 80143a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143ac:	e9cd 4500 	strd	r4, r5, [sp]
 80143b0:	4642      	mov	r2, r8
 80143b2:	464b      	mov	r3, r9
 80143b4:	4825      	ldr	r0, [pc, #148]	; (801444c <imuTest_printBiases+0xfc>)
 80143b6:	f7ff fd99 	bl	8013eec <println>
	println("gyro biases [dps]:\t%f\t%f\t%f", mpu.gyroBias[0], mpu.gyroBias[1], mpu.gyroBias[2]);
 80143ba:	4b22      	ldr	r3, [pc, #136]	; (8014444 <imuTest_printBiases+0xf4>)
 80143bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ec f8d2 	bl	8000568 <__aeabi_f2d>
 80143c4:	4680      	mov	r8, r0
 80143c6:	4689      	mov	r9, r1
 80143c8:	4b1e      	ldr	r3, [pc, #120]	; (8014444 <imuTest_printBiases+0xf4>)
 80143ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7ec f8cb 	bl	8000568 <__aeabi_f2d>
 80143d2:	4604      	mov	r4, r0
 80143d4:	460d      	mov	r5, r1
 80143d6:	4b1b      	ldr	r3, [pc, #108]	; (8014444 <imuTest_printBiases+0xf4>)
 80143d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80143da:	4618      	mov	r0, r3
 80143dc:	f7ec f8c4 	bl	8000568 <__aeabi_f2d>
 80143e0:	4602      	mov	r2, r0
 80143e2:	460b      	mov	r3, r1
 80143e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80143e8:	e9cd 4500 	strd	r4, r5, [sp]
 80143ec:	4642      	mov	r2, r8
 80143ee:	464b      	mov	r3, r9
 80143f0:	4817      	ldr	r0, [pc, #92]	; (8014450 <imuTest_printBiases+0x100>)
 80143f2:	f7ff fd7b 	bl	8013eec <println>
	println("mag biases [mG]:\t%f\t%f\t%f", mpu.magBias[0], mpu.magBias[1], mpu.magBias[2]);
 80143f6:	4b13      	ldr	r3, [pc, #76]	; (8014444 <imuTest_printBiases+0xf4>)
 80143f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7ec f8b4 	bl	8000568 <__aeabi_f2d>
 8014400:	4680      	mov	r8, r0
 8014402:	4689      	mov	r9, r1
 8014404:	4b0f      	ldr	r3, [pc, #60]	; (8014444 <imuTest_printBiases+0xf4>)
 8014406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014408:	4618      	mov	r0, r3
 801440a:	f7ec f8ad 	bl	8000568 <__aeabi_f2d>
 801440e:	4604      	mov	r4, r0
 8014410:	460d      	mov	r5, r1
 8014412:	4b0c      	ldr	r3, [pc, #48]	; (8014444 <imuTest_printBiases+0xf4>)
 8014414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014416:	4618      	mov	r0, r3
 8014418:	f7ec f8a6 	bl	8000568 <__aeabi_f2d>
 801441c:	4602      	mov	r2, r0
 801441e:	460b      	mov	r3, r1
 8014420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014424:	e9cd 4500 	strd	r4, r5, [sp]
 8014428:	4642      	mov	r2, r8
 801442a:	464b      	mov	r3, r9
 801442c:	4809      	ldr	r0, [pc, #36]	; (8014454 <imuTest_printBiases+0x104>)
 801442e:	f7ff fd5d 	bl	8013eec <println>
	delay(2000);
 8014432:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014436:	f7f2 fb6f 	bl	8006b18 <HAL_Delay>
}
 801443a:	bf00      	nop
 801443c:	46bd      	mov	sp, r7
 801443e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014442:	bf00      	nop
 8014444:	20006740 	.word	0x20006740
 8014448:	408f4000 	.word	0x408f4000
 801444c:	0801df68 	.word	0x0801df68
 8014450:	0801df84 	.word	0x0801df84
 8014454:	0801dfa0 	.word	0x0801dfa0

08014458 <imuTest_begin>:

static bool imuTest_begin(void)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	af00      	add	r7, sp, #0
	mpu.i2c = Get_I2C1_Instance();
 801445c:	f001 faea 	bl	8015a34 <Get_I2C1_Instance>
 8014460:	4602      	mov	r2, r0
 8014462:	4b25      	ldr	r3, [pc, #148]	; (80144f8 <imuTest_begin+0xa0>)
 8014464:	601a      	str	r2, [r3, #0]
	mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 8014466:	4b24      	ldr	r3, [pc, #144]	; (80144f8 <imuTest_begin+0xa0>)
 8014468:	22d2      	movs	r2, #210	; 0xd2
 801446a:	711a      	strb	r2, [r3, #4]
	mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 801446c:	4b22      	ldr	r3, [pc, #136]	; (80144f8 <imuTest_begin+0xa0>)
 801446e:	2218      	movs	r2, #24
 8014470:	715a      	strb	r2, [r3, #5]

	writePin(LEDB, HIGH);
 8014472:	2201      	movs	r2, #1
 8014474:	2140      	movs	r1, #64	; 0x40
 8014476:	4821      	ldr	r0, [pc, #132]	; (80144fc <imuTest_begin+0xa4>)
 8014478:	f7f3 f9cc 	bl	8007814 <HAL_GPIO_WritePin>
	MPU9250_init(&mpu, &mpu9250_default_config);
 801447c:	4920      	ldr	r1, [pc, #128]	; (8014500 <imuTest_begin+0xa8>)
 801447e:	481e      	ldr	r0, [pc, #120]	; (80144f8 <imuTest_begin+0xa0>)
 8014480:	f7ef fdc6 	bl	8004010 <MPU9250_init>
	writePin(LEDB, LOW);
 8014484:	2200      	movs	r2, #0
 8014486:	2140      	movs	r1, #64	; 0x40
 8014488:	481c      	ldr	r0, [pc, #112]	; (80144fc <imuTest_begin+0xa4>)
 801448a:	f7f3 f9c3 	bl	8007814 <HAL_GPIO_WritePin>

	writePin(LEDA, HIGH);
 801448e:	2201      	movs	r2, #1
 8014490:	2180      	movs	r1, #128	; 0x80
 8014492:	481a      	ldr	r0, [pc, #104]	; (80144fc <imuTest_begin+0xa4>)
 8014494:	f7f3 f9be 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDB, HIGH);
 8014498:	2201      	movs	r2, #1
 801449a:	2140      	movs	r1, #64	; 0x40
 801449c:	4817      	ldr	r0, [pc, #92]	; (80144fc <imuTest_begin+0xa4>)
 801449e:	f7f3 f9b9 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDC, HIGH);
 80144a2:	2201      	movs	r2, #1
 80144a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80144a8:	4816      	ldr	r0, [pc, #88]	; (8014504 <imuTest_begin+0xac>)
 80144aa:	f7f3 f9b3 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDD, HIGH);
 80144ae:	2201      	movs	r2, #1
 80144b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80144b4:	4813      	ldr	r0, [pc, #76]	; (8014504 <imuTest_begin+0xac>)
 80144b6:	f7f3 f9ad 	bl	8007814 <HAL_GPIO_WritePin>
	AK8963_init(&mpu, &mpu9250_default_config);
 80144ba:	4911      	ldr	r1, [pc, #68]	; (8014500 <imuTest_begin+0xa8>)
 80144bc:	480e      	ldr	r0, [pc, #56]	; (80144f8 <imuTest_begin+0xa0>)
 80144be:	f7ef fedf 	bl	8004280 <AK8963_init>
	writePin(LEDA, LOW);
 80144c2:	2200      	movs	r2, #0
 80144c4:	2180      	movs	r1, #128	; 0x80
 80144c6:	480d      	ldr	r0, [pc, #52]	; (80144fc <imuTest_begin+0xa4>)
 80144c8:	f7f3 f9a4 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDB, LOW);
 80144cc:	2200      	movs	r2, #0
 80144ce:	2140      	movs	r1, #64	; 0x40
 80144d0:	480a      	ldr	r0, [pc, #40]	; (80144fc <imuTest_begin+0xa4>)
 80144d2:	f7f3 f99f 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDC, LOW);
 80144d6:	2200      	movs	r2, #0
 80144d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80144dc:	4809      	ldr	r0, [pc, #36]	; (8014504 <imuTest_begin+0xac>)
 80144de:	f7f3 f999 	bl	8007814 <HAL_GPIO_WritePin>
	writePin(LEDD, LOW);
 80144e2:	2200      	movs	r2, #0
 80144e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80144e8:	4806      	ldr	r0, [pc, #24]	; (8014504 <imuTest_begin+0xac>)
 80144ea:	f7f3 f993 	bl	8007814 <HAL_GPIO_WritePin>

	imuTest_printBiases();
 80144ee:	f7ff ff2f 	bl	8014350 <imuTest_printBiases>
	return false;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	20006740 	.word	0x20006740
 80144fc:	40020800 	.word	0x40020800
 8014500:	20000128 	.word	0x20000128
 8014504:	40020400 	.word	0x40020400

08014508 <sensing_begin>:
uint32_t lastBmpRead;
uint32_t lastGpsRead;
// (SPS)

static bool sensing_begin(void)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0

	uint8_t attempts = 0;
 801450e:	2300      	movs	r3, #0
 8014510:	71fb      	strb	r3, [r7, #7]


	attempts = 0;
 8014512:	2300      	movs	r3, #0
 8014514:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 8014516:	4b45      	ldr	r3, [pc, #276]	; (801462c <sensing_begin+0x124>)
 8014518:	4a45      	ldr	r2, [pc, #276]	; (8014630 <sensing_begin+0x128>)
 801451a:	3306      	adds	r3, #6
 801451c:	6810      	ldr	r0, [r2, #0]
 801451e:	6018      	str	r0, [r3, #0]
 8014520:	7912      	ldrb	r2, [r2, #4]
 8014522:	711a      	strb	r2, [r3, #4]
	bmp.i2c_addr = BMP280_I2C_ADDRESS;
 8014524:	4b41      	ldr	r3, [pc, #260]	; (801462c <sensing_begin+0x124>)
 8014526:	22ec      	movs	r2, #236	; 0xec
 8014528:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 801452a:	f001 fa83 	bl	8015a34 <Get_I2C1_Instance>
 801452e:	4602      	mov	r2, r0
 8014530:	4b3e      	ldr	r3, [pc, #248]	; (801462c <sensing_begin+0x124>)
 8014532:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 8014534:	e010      	b.n	8014558 <sensing_begin+0x50>
	{
		HAL_Delay(500);
 8014536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801453a:	f7f2 faed 	bl	8006b18 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 801453e:	483d      	ldr	r0, [pc, #244]	; (8014634 <sensing_begin+0x12c>)
 8014540:	f7ff fcd4 	bl	8013eec <println>
		attempts++;
 8014544:	79fb      	ldrb	r3, [r7, #7]
 8014546:	3301      	adds	r3, #1
 8014548:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 801454a:	79fb      	ldrb	r3, [r7, #7]
 801454c:	2b04      	cmp	r3, #4
 801454e:	d903      	bls.n	8014558 <sensing_begin+0x50>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8014550:	4839      	ldr	r0, [pc, #228]	; (8014638 <sensing_begin+0x130>)
 8014552:	f7ff fccb 	bl	8013eec <println>
			//log_print("Unable to init BMP");
			break;
 8014556:	e009      	b.n	801456c <sensing_begin+0x64>
	while (!bmp280_init(&bmp, &bmp.params))
 8014558:	4938      	ldr	r1, [pc, #224]	; (801463c <sensing_begin+0x134>)
 801455a:	4834      	ldr	r0, [pc, #208]	; (801462c <sensing_begin+0x124>)
 801455c:	f7ed ff47 	bl	80023ee <bmp280_init>
 8014560:	4603      	mov	r3, r0
 8014562:	f083 0301 	eor.w	r3, r3, #1
 8014566:	b2db      	uxtb	r3, r3
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1e4      	bne.n	8014536 <sensing_begin+0x2e>

	//if (imuTest_begin()) { println("[IMU] Init successful!"); log_print("IMU init success"); }
	//	else { log_print("Unable to init IMU"); }


	attempts = 0;
 801456c:	2300      	movs	r3, #0
 801456e:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 8014570:	f001 fa74 	bl	8015a5c <Get_UART3_Instance>
 8014574:	4602      	mov	r2, r0
 8014576:	4b32      	ldr	r3, [pc, #200]	; (8014640 <sensing_begin+0x138>)
 8014578:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 801457c:	e010      	b.n	80145a0 <sensing_begin+0x98>
	{
		HAL_Delay(500);
 801457e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014582:	f7f2 fac9 	bl	8006b18 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 8014586:	482f      	ldr	r0, [pc, #188]	; (8014644 <sensing_begin+0x13c>)
 8014588:	f7ff fcb0 	bl	8013eec <println>
		attempts++;
 801458c:	79fb      	ldrb	r3, [r7, #7]
 801458e:	3301      	adds	r3, #1
 8014590:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8014592:	79fb      	ldrb	r3, [r7, #7]
 8014594:	2b04      	cmp	r3, #4
 8014596:	d903      	bls.n	80145a0 <sensing_begin+0x98>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8014598:	482b      	ldr	r0, [pc, #172]	; (8014648 <sensing_begin+0x140>)
 801459a:	f7ff fca7 	bl	8013eec <println>
			//log_print("Unable to init GPS");
			break;
 801459e:	e008      	b.n	80145b2 <sensing_begin+0xaa>
	while (!GPS_init(&gps))
 80145a0:	4827      	ldr	r0, [pc, #156]	; (8014640 <sensing_begin+0x138>)
 80145a2:	f7ee f92d 	bl	8002800 <GPS_init>
 80145a6:	4603      	mov	r3, r0
 80145a8:	f083 0301 	eor.w	r3, r3, #1
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1e5      	bne.n	801457e <sensing_begin+0x76>
		}
	}
	gps.active = true;
 80145b2:	4b23      	ldr	r3, [pc, #140]	; (8014640 <sensing_begin+0x138>)
 80145b4:	2201      	movs	r2, #1
 80145b6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	mpu.active = true;
 80145ba:	4b24      	ldr	r3, [pc, #144]	; (801464c <sensing_begin+0x144>)
 80145bc:	2201      	movs	r2, #1
 80145be:	721a      	strb	r2, [r3, #8]

	imuTest_begin();
 80145c0:	f7ff ff4a 	bl	8014458 <imuTest_begin>

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 80145c4:	4822      	ldr	r0, [pc, #136]	; (8014650 <sensing_begin+0x148>)
 80145c6:	f7ff fc91 	bl	8013eec <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 80145ca:	4822      	ldr	r0, [pc, #136]	; (8014654 <sensing_begin+0x14c>)
 80145cc:	f7ff fc42 	bl	8013e54 <print>
 80145d0:	4b1b      	ldr	r3, [pc, #108]	; (8014640 <sensing_begin+0x138>)
 80145d2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d003      	beq.n	80145e2 <sensing_begin+0xda>
 80145da:	481f      	ldr	r0, [pc, #124]	; (8014658 <sensing_begin+0x150>)
 80145dc:	f7ff fc86 	bl	8013eec <println>
 80145e0:	e002      	b.n	80145e8 <sensing_begin+0xe0>
 80145e2:	481e      	ldr	r0, [pc, #120]	; (801465c <sensing_begin+0x154>)
 80145e4:	f7ff fc82 	bl	8013eec <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 80145e8:	481d      	ldr	r0, [pc, #116]	; (8014660 <sensing_begin+0x158>)
 80145ea:	f7ff fc33 	bl	8013e54 <print>
 80145ee:	4b0f      	ldr	r3, [pc, #60]	; (801462c <sensing_begin+0x124>)
 80145f0:	7e1b      	ldrb	r3, [r3, #24]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d003      	beq.n	80145fe <sensing_begin+0xf6>
 80145f6:	4818      	ldr	r0, [pc, #96]	; (8014658 <sensing_begin+0x150>)
 80145f8:	f7ff fc78 	bl	8013eec <println>
 80145fc:	e002      	b.n	8014604 <sensing_begin+0xfc>
 80145fe:	4817      	ldr	r0, [pc, #92]	; (801465c <sensing_begin+0x154>)
 8014600:	f7ff fc74 	bl	8013eec <println>
		print("IMU - "); imu.active ? println("active") : println("not active");
 8014604:	4817      	ldr	r0, [pc, #92]	; (8014664 <sensing_begin+0x15c>)
 8014606:	f7ff fc25 	bl	8013e54 <print>
 801460a:	4b17      	ldr	r3, [pc, #92]	; (8014668 <sensing_begin+0x160>)
 801460c:	7a1b      	ldrb	r3, [r3, #8]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d003      	beq.n	801461a <sensing_begin+0x112>
 8014612:	4811      	ldr	r0, [pc, #68]	; (8014658 <sensing_begin+0x150>)
 8014614:	f7ff fc6a 	bl	8013eec <println>
 8014618:	e002      	b.n	8014620 <sensing_begin+0x118>
 801461a:	4810      	ldr	r0, [pc, #64]	; (801465c <sensing_begin+0x154>)
 801461c:	f7ff fc66 	bl	8013eec <println>
	}
}
 8014620:	bf00      	nop
 8014622:	4618      	mov	r0, r3
 8014624:	3708      	adds	r7, #8
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	200049fc 	.word	0x200049fc
 8014630:	20000168 	.word	0x20000168
 8014634:	0801e03c 	.word	0x0801e03c
 8014638:	0801e064 	.word	0x0801e064
 801463c:	20004a02 	.word	0x20004a02
 8014640:	200043b4 	.word	0x200043b4
 8014644:	0801e090 	.word	0x0801e090
 8014648:	0801e0b8 	.word	0x0801e0b8
 801464c:	20006740 	.word	0x20006740
 8014650:	0801e0e4 	.word	0x0801e0e4
 8014654:	0801e0fc 	.word	0x0801e0fc
 8014658:	0801e104 	.word	0x0801e104
 801465c:	0801e10c 	.word	0x0801e10c
 8014660:	0801e118 	.word	0x0801e118
 8014664:	0801e120 	.word	0x0801e120
 8014668:	20004a30 	.word	0x20004a30

0801466c <sensing_loop>:

static void sensing_loop(void)
{
 801466c:	b598      	push	{r3, r4, r7, lr}
 801466e:	af00      	add	r7, sp, #0

	if (gps.active)
 8014670:	4b6b      	ldr	r3, [pc, #428]	; (8014820 <sensing_loop+0x1b4>)
 8014672:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8014676:	2b00      	cmp	r3, #0
 8014678:	d02b      	beq.n	80146d2 <sensing_loop+0x66>
	{
		//while (GPS_read(&gps));
		if (GPS_newNMEAreceived(&gps))
 801467a:	4869      	ldr	r0, [pc, #420]	; (8014820 <sensing_loop+0x1b4>)
 801467c:	f7ef f9ad 	bl	80039da <GPS_newNMEAreceived>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	d020      	beq.n	80146c8 <sensing_loop+0x5c>
		{
			println(GPS_lastNMEA(&gps));
 8014686:	4866      	ldr	r0, [pc, #408]	; (8014820 <sensing_loop+0x1b4>)
 8014688:	f7ef f9b5 	bl	80039f6 <GPS_lastNMEA>
 801468c:	4603      	mov	r3, r0
 801468e:	4618      	mov	r0, r3
 8014690:	f7ff fc2c 	bl	8013eec <println>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 8014694:	4862      	ldr	r0, [pc, #392]	; (8014820 <sensing_loop+0x1b4>)
 8014696:	f7ef f9ae 	bl	80039f6 <GPS_lastNMEA>
 801469a:	4603      	mov	r3, r0
 801469c:	4619      	mov	r1, r3
 801469e:	4860      	ldr	r0, [pc, #384]	; (8014820 <sensing_loop+0x1b4>)
 80146a0:	f7ee fa52 	bl	8002b48 <GPS_parse>
			//if (gps.fix) log_gps(&gps);
			if (gps.fix) HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 1);
 80146a4:	4b5e      	ldr	r3, [pc, #376]	; (8014820 <sensing_loop+0x1b4>)
 80146a6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d006      	beq.n	80146bc <sensing_loop+0x50>
 80146ae:	2201      	movs	r2, #1
 80146b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80146b4:	485b      	ldr	r0, [pc, #364]	; (8014824 <sensing_loop+0x1b8>)
 80146b6:	f7f3 f8ad 	bl	8007814 <HAL_GPIO_WritePin>
 80146ba:	e005      	b.n	80146c8 <sensing_loop+0x5c>
			else HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 0);
 80146bc:	2200      	movs	r2, #0
 80146be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80146c2:	4858      	ldr	r0, [pc, #352]	; (8014824 <sensing_loop+0x1b8>)
 80146c4:	f7f3 f8a6 	bl	8007814 <HAL_GPIO_WritePin>
		}
		lastGpsRead = millis();
 80146c8:	f7ff fb64 	bl	8013d94 <millis>
 80146cc:	4602      	mov	r2, r0
 80146ce:	4b56      	ldr	r3, [pc, #344]	; (8014828 <sensing_loop+0x1bc>)
 80146d0:	601a      	str	r2, [r3, #0]
	}


	if (bmp.active && millis() - lastBmpRead >= 50)
 80146d2:	4b56      	ldr	r3, [pc, #344]	; (801482c <sensing_loop+0x1c0>)
 80146d4:	7e1b      	ldrb	r3, [r3, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d01f      	beq.n	801471a <sensing_loop+0xae>
 80146da:	f7ff fb5b 	bl	8013d94 <millis>
 80146de:	4602      	mov	r2, r0
 80146e0:	4b53      	ldr	r3, [pc, #332]	; (8014830 <sensing_loop+0x1c4>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	2b31      	cmp	r3, #49	; 0x31
 80146e8:	d917      	bls.n	801471a <sensing_loop+0xae>
	{

		//bmp280_read_float(&bmp, tee, pee);
		bmp280_update(&bmp);
 80146ea:	4850      	ldr	r0, [pc, #320]	; (801482c <sensing_loop+0x1c0>)
 80146ec:	f7ed fefc 	bl	80024e8 <bmp280_update>
		lastBmpRead = millis();
 80146f0:	f7ff fb50 	bl	8013d94 <millis>
 80146f4:	4602      	mov	r2, r0
 80146f6:	4b4e      	ldr	r3, [pc, #312]	; (8014830 <sensing_loop+0x1c4>)
 80146f8:	601a      	str	r2, [r3, #0]
		if (millis() - lastBmpLog >= 100)
 80146fa:	f7ff fb4b 	bl	8013d94 <millis>
 80146fe:	4602      	mov	r2, r0
 8014700:	4b4c      	ldr	r3, [pc, #304]	; (8014834 <sensing_loop+0x1c8>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	2b63      	cmp	r3, #99	; 0x63
 8014708:	d907      	bls.n	801471a <sensing_loop+0xae>
		{
			log_bmp(&bmp);
 801470a:	4848      	ldr	r0, [pc, #288]	; (801482c <sensing_loop+0x1c0>)
 801470c:	f7f2 f8ea 	bl	80068e4 <log_bmp>
			lastBmpLog = millis();
 8014710:	f7ff fb40 	bl	8013d94 <millis>
 8014714:	4602      	mov	r2, r0
 8014716:	4b47      	ldr	r3, [pc, #284]	; (8014834 <sensing_loop+0x1c8>)
 8014718:	601a      	str	r2, [r3, #0]
		}
	}


	if (mpu.active)
 801471a:	4b47      	ldr	r3, [pc, #284]	; (8014838 <sensing_loop+0x1cc>)
 801471c:	7a1b      	ldrb	r3, [r3, #8]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d026      	beq.n	8014770 <sensing_loop+0x104>
	{
		if (MPU9250_update(&mpu))
 8014722:	4845      	ldr	r0, [pc, #276]	; (8014838 <sensing_loop+0x1cc>)
 8014724:	f7ef fe88 	bl	8004438 <MPU9250_update>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d020      	beq.n	8014770 <sensing_loop+0x104>
		{
			imuTest_printData();
 801472e:	f7ff fe07 	bl	8014340 <imuTest_printData>
			if (mpu.yaw >= 178.0 && mpu.yaw <= 182.0) writePin(LEDA, HIGH);
 8014732:	4b41      	ldr	r3, [pc, #260]	; (8014838 <sensing_loop+0x1cc>)
 8014734:	edd3 7a03 	vldr	s15, [r3, #12]
 8014738:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801483c <sensing_loop+0x1d0>
 801473c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014744:	db0f      	blt.n	8014766 <sensing_loop+0xfa>
 8014746:	4b3c      	ldr	r3, [pc, #240]	; (8014838 <sensing_loop+0x1cc>)
 8014748:	edd3 7a03 	vldr	s15, [r3, #12]
 801474c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8014840 <sensing_loop+0x1d4>
 8014750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	d805      	bhi.n	8014766 <sensing_loop+0xfa>
 801475a:	2201      	movs	r2, #1
 801475c:	2180      	movs	r1, #128	; 0x80
 801475e:	4839      	ldr	r0, [pc, #228]	; (8014844 <sensing_loop+0x1d8>)
 8014760:	f7f3 f858 	bl	8007814 <HAL_GPIO_WritePin>
 8014764:	e004      	b.n	8014770 <sensing_loop+0x104>
			else writePin(LEDA, LOW);
 8014766:	2200      	movs	r2, #0
 8014768:	2180      	movs	r1, #128	; 0x80
 801476a:	4836      	ldr	r0, [pc, #216]	; (8014844 <sensing_loop+0x1d8>)
 801476c:	f7f3 f852 	bl	8007814 <HAL_GPIO_WritePin>
		}
	}

	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8014770:	f7ff fb10 	bl	8013d94 <millis>
 8014774:	4602      	mov	r2, r0
 8014776:	4b34      	ldr	r3, [pc, #208]	; (8014848 <sensing_loop+0x1dc>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	1ad3      	subs	r3, r2, r3
 801477c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014780:	d34b      	bcc.n	801481a <sensing_loop+0x1ae>
	{
		if (bmp.active)
 8014782:	4b2a      	ldr	r3, [pc, #168]	; (801482c <sensing_loop+0x1c0>)
 8014784:	7e1b      	ldrb	r3, [r3, #24]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d017      	beq.n	80147ba <sensing_loop+0x14e>
		{
			println("Pressure: %f", bmp.pressure);
 801478a:	4b28      	ldr	r3, [pc, #160]	; (801482c <sensing_loop+0x1c0>)
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	4618      	mov	r0, r3
 8014790:	f7eb feea 	bl	8000568 <__aeabi_f2d>
 8014794:	4603      	mov	r3, r0
 8014796:	460c      	mov	r4, r1
 8014798:	461a      	mov	r2, r3
 801479a:	4623      	mov	r3, r4
 801479c:	482b      	ldr	r0, [pc, #172]	; (801484c <sensing_loop+0x1e0>)
 801479e:	f7ff fba5 	bl	8013eec <println>
			println("Temperature: %f", bmp.temperature);
 80147a2:	4b22      	ldr	r3, [pc, #136]	; (801482c <sensing_loop+0x1c0>)
 80147a4:	691b      	ldr	r3, [r3, #16]
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7eb fede 	bl	8000568 <__aeabi_f2d>
 80147ac:	4603      	mov	r3, r0
 80147ae:	460c      	mov	r4, r1
 80147b0:	461a      	mov	r2, r3
 80147b2:	4623      	mov	r3, r4
 80147b4:	4826      	ldr	r0, [pc, #152]	; (8014850 <sensing_loop+0x1e4>)
 80147b6:	f7ff fb99 	bl	8013eec <println>
		}
		if (gps.active)
 80147ba:	4b19      	ldr	r3, [pc, #100]	; (8014820 <sensing_loop+0x1b4>)
 80147bc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d025      	beq.n	8014810 <sensing_loop+0x1a4>
		{
			if (gps.fix)
 80147c4:	4b16      	ldr	r3, [pc, #88]	; (8014820 <sensing_loop+0x1b4>)
 80147c6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d018      	beq.n	8014800 <sensing_loop+0x194>
			{
				println("Latitude: %f", gps.latitudeDegrees);
 80147ce:	4b14      	ldr	r3, [pc, #80]	; (8014820 <sensing_loop+0x1b4>)
 80147d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7eb fec8 	bl	8000568 <__aeabi_f2d>
 80147d8:	4603      	mov	r3, r0
 80147da:	460c      	mov	r4, r1
 80147dc:	461a      	mov	r2, r3
 80147de:	4623      	mov	r3, r4
 80147e0:	481c      	ldr	r0, [pc, #112]	; (8014854 <sensing_loop+0x1e8>)
 80147e2:	f7ff fb83 	bl	8013eec <println>
				println("Longitude: %f", gps.longitudeDegrees);
 80147e6:	4b0e      	ldr	r3, [pc, #56]	; (8014820 <sensing_loop+0x1b4>)
 80147e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7eb febc 	bl	8000568 <__aeabi_f2d>
 80147f0:	4603      	mov	r3, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	461a      	mov	r2, r3
 80147f6:	4623      	mov	r3, r4
 80147f8:	4817      	ldr	r0, [pc, #92]	; (8014858 <sensing_loop+0x1ec>)
 80147fa:	f7ff fb77 	bl	8013eec <println>
 80147fe:	e007      	b.n	8014810 <sensing_loop+0x1a4>
			}
			else
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014800:	2200      	movs	r2, #0
 8014802:	2140      	movs	r1, #64	; 0x40
 8014804:	480f      	ldr	r0, [pc, #60]	; (8014844 <sensing_loop+0x1d8>)
 8014806:	f7f3 f805 	bl	8007814 <HAL_GPIO_WritePin>
				println("GPS has no fix!");
 801480a:	4814      	ldr	r0, [pc, #80]	; (801485c <sensing_loop+0x1f0>)
 801480c:	f7ff fb6e 	bl	8013eec <println>
			}
		}
		lastDataPrint = millis();
 8014810:	f7ff fac0 	bl	8013d94 <millis>
 8014814:	4602      	mov	r2, r0
 8014816:	4b0c      	ldr	r3, [pc, #48]	; (8014848 <sensing_loop+0x1dc>)
 8014818:	601a      	str	r2, [r3, #0]
	}
}
 801481a:	bf00      	nop
 801481c:	bd98      	pop	{r3, r4, r7, pc}
 801481e:	bf00      	nop
 8014820:	200043b4 	.word	0x200043b4
 8014824:	40020400 	.word	0x40020400
 8014828:	20004f14 	.word	0x20004f14
 801482c:	200049fc 	.word	0x200049fc
 8014830:	2000631c 	.word	0x2000631c
 8014834:	20006c24 	.word	0x20006c24
 8014838:	20006740 	.word	0x20006740
 801483c:	43320000 	.word	0x43320000
 8014840:	43360000 	.word	0x43360000
 8014844:	40020800 	.word	0x40020800
 8014848:	20006818 	.word	0x20006818
 801484c:	0801e128 	.word	0x0801e128
 8014850:	0801e138 	.word	0x0801e138
 8014854:	0801e148 	.word	0x0801e148
 8014858:	0801e158 	.word	0x0801e158
 801485c:	0801e168 	.word	0x0801e168

08014860 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 8014860:	b5b0      	push	{r4, r5, r7, lr}
 8014862:	ed2d 8b02 	vpush	{d8}
 8014866:	b08c      	sub	sp, #48	; 0x30
 8014868:	af00      	add	r7, sp, #0
 801486a:	ed87 0a01 	vstr	s0, [r7, #4]
 801486e:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.6;	// scale of motor power
 8014872:	4b9f      	ldr	r3, [pc, #636]	; (8014af0 <algoGalgo+0x290>)
 8014874:	623b      	str	r3, [r7, #32]
	float TurboMode= 50.0;
 8014876:	4b9f      	ldr	r3, [pc, #636]	; (8014af4 <algoGalgo+0x294>)
 8014878:	61fb      	str	r3, [r7, #28]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 801487a:	ed97 7a00 	vldr	s14, [r7]
 801487e:	edd7 7a01 	vldr	s15, [r7, #4]
 8014882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014886:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust;

	if (error<-180.0) //ulomne modulo
 801488a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801488e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8014af8 <algoGalgo+0x298>
 8014892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801489a:	d50c      	bpl.n	80148b6 <algoGalgo+0x56>
		error = target_yaw-yaw+360.0;
 801489c:	ed97 7a00 	vldr	s14, [r7]
 80148a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80148a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148a8:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8014afc <algoGalgo+0x29c>
 80148ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80148b4:	e014      	b.n	80148e0 <algoGalgo+0x80>
	else if (error>180.0)
 80148b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80148ba:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8014b00 <algoGalgo+0x2a0>
 80148be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c6:	dd0b      	ble.n	80148e0 <algoGalgo+0x80>
		error = target_yaw-yaw-360.0;
 80148c8:	ed97 7a00 	vldr	s14, [r7]
 80148cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80148d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148d4:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8014afc <algoGalgo+0x29c>
 80148d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if (error>-10 && error<10)
 80148e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80148e4:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80148e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f0:	dd0b      	ble.n	801490a <algoGalgo+0xaa>
 80148f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80148f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80148fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014902:	d502      	bpl.n	801490a <algoGalgo+0xaa>
		thrust = 340.0;
 8014904:	4b7f      	ldr	r3, [pc, #508]	; (8014b04 <algoGalgo+0x2a4>)
 8014906:	62bb      	str	r3, [r7, #40]	; 0x28
 8014908:	e007      	b.n	801491a <algoGalgo+0xba>
	else
		thrust = 180.0+TurboMode;
 801490a:	edd7 7a07 	vldr	s15, [r7, #28]
 801490e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8014b00 <algoGalgo+0x2a0>
 8014912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014916:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 801491a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801491e:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 8014920:	4b79      	ldr	r3, [pc, #484]	; (8014b08 <algoGalgo+0x2a8>)
 8014922:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 8014924:	ed97 7a06 	vldr	s14, [r7, #24]
 8014928:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801492c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014930:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 8014934:	4b75      	ldr	r3, [pc, #468]	; (8014b0c <algoGalgo+0x2ac>)
 8014936:	edd3 7a00 	vldr	s15, [r3]
 801493a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801493e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8014942:	f7ff fa27 	bl	8013d94 <millis>
 8014946:	4602      	mov	r2, r0
 8014948:	4b71      	ldr	r3, [pc, #452]	; (8014b10 <algoGalgo+0x2b0>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	ee07 3a90 	vmov	s15, r3
 8014952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014956:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801495a:	ed97 7a05 	vldr	s14, [r7, #20]
 801495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014962:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 8014966:	ed97 7a04 	vldr	s14, [r7, #16]
 801496a:	edd7 7a03 	vldr	s15, [r7, #12]
 801496e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014972:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (PID>180.0-TurboMode)
 8014976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014978:	f7eb fdf6 	bl	8000568 <__aeabi_f2d>
 801497c:	4604      	mov	r4, r0
 801497e:	460d      	mov	r5, r1
 8014980:	69f8      	ldr	r0, [r7, #28]
 8014982:	f7eb fdf1 	bl	8000568 <__aeabi_f2d>
 8014986:	4602      	mov	r2, r0
 8014988:	460b      	mov	r3, r1
 801498a:	f04f 0000 	mov.w	r0, #0
 801498e:	4961      	ldr	r1, [pc, #388]	; (8014b14 <algoGalgo+0x2b4>)
 8014990:	f7eb fc8a 	bl	80002a8 <__aeabi_dsub>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4620      	mov	r0, r4
 801499a:	4629      	mov	r1, r5
 801499c:	f7ec f8cc 	bl	8000b38 <__aeabi_dcmpgt>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d008      	beq.n	80149b8 <algoGalgo+0x158>
			PID=180.0-TurboMode;
 80149a6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8014b00 <algoGalgo+0x2a0>
 80149aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80149ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80149b6:	e01d      	b.n	80149f4 <algoGalgo+0x194>
		else if (PID<-180.0+TurboMode)
 80149b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149ba:	f7eb fdd5 	bl	8000568 <__aeabi_f2d>
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	69f8      	ldr	r0, [r7, #28]
 80149c4:	f7eb fdd0 	bl	8000568 <__aeabi_f2d>
 80149c8:	f04f 0200 	mov.w	r2, #0
 80149cc:	4b51      	ldr	r3, [pc, #324]	; (8014b14 <algoGalgo+0x2b4>)
 80149ce:	f7eb fc6b 	bl	80002a8 <__aeabi_dsub>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	4620      	mov	r0, r4
 80149d8:	4629      	mov	r1, r5
 80149da:	f7ec f88f 	bl	8000afc <__aeabi_dcmplt>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d007      	beq.n	80149f4 <algoGalgo+0x194>
			PID=-180.0+TurboMode;
 80149e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80149e8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8014b00 <algoGalgo+0x2a0>
 80149ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 80149f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80149f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80149fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8014a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a08:	ee17 0a90 	vmov	r0, s15
 8014a0c:	f7eb fdac 	bl	8000568 <__aeabi_f2d>
 8014a10:	a333      	add	r3, pc, #204	; (adr r3, 8014ae0 <algoGalgo+0x280>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	f7eb fdff 	bl	8000618 <__aeabi_dmul>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	460c      	mov	r4, r1
 8014a1e:	4618      	mov	r0, r3
 8014a20:	4621      	mov	r1, r4
 8014a22:	f7ec f8f1 	bl	8000c08 <__aeabi_d2f>
 8014a26:	4605      	mov	r5, r0
 8014a28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014a2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a34:	edd7 7a08 	vldr	s15, [r7, #32]
 8014a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a3c:	ee17 0a90 	vmov	r0, s15
 8014a40:	f7eb fd92 	bl	8000568 <__aeabi_f2d>
 8014a44:	a326      	add	r3, pc, #152	; (adr r3, 8014ae0 <algoGalgo+0x280>)
 8014a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4a:	f7eb fde5 	bl	8000618 <__aeabi_dmul>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	460c      	mov	r4, r1
 8014a52:	4618      	mov	r0, r3
 8014a54:	4621      	mov	r1, r4
 8014a56:	a324      	add	r3, pc, #144	; (adr r3, 8014ae8 <algoGalgo+0x288>)
 8014a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5c:	f7eb fddc 	bl	8000618 <__aeabi_dmul>
 8014a60:	4603      	mov	r3, r0
 8014a62:	460c      	mov	r4, r1
 8014a64:	4618      	mov	r0, r3
 8014a66:	4621      	mov	r1, r4
 8014a68:	f7ec f8ce 	bl	8000c08 <__aeabi_d2f>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	ee00 3a90 	vmov	s1, r3
 8014a72:	ee00 5a10 	vmov	s0, r5
 8014a76:	f7ec fb53 	bl	8001120 <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8014a7a:	edd7 7a00 	vldr	s15, [r7]
 8014a7e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a86:	ed97 7a01 	vldr	s14, [r7, #4]
 8014a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a92:	db12      	blt.n	8014aba <algoGalgo+0x25a>
 8014a94:	edd7 7a00 	vldr	s15, [r7]
 8014a98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014aa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8014aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aac:	d805      	bhi.n	8014aba <algoGalgo+0x25a>
 8014aae:	2201      	movs	r2, #1
 8014ab0:	2180      	movs	r1, #128	; 0x80
 8014ab2:	4819      	ldr	r0, [pc, #100]	; (8014b18 <algoGalgo+0x2b8>)
 8014ab4:	f7f2 feae 	bl	8007814 <HAL_GPIO_WritePin>
 8014ab8:	e004      	b.n	8014ac4 <algoGalgo+0x264>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8014aba:	2200      	movs	r2, #0
 8014abc:	2180      	movs	r1, #128	; 0x80
 8014abe:	4816      	ldr	r0, [pc, #88]	; (8014b18 <algoGalgo+0x2b8>)
 8014ac0:	f7f2 fea8 	bl	8007814 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 8014ac4:	4a11      	ldr	r2, [pc, #68]	; (8014b0c <algoGalgo+0x2ac>)
 8014ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac8:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 8014aca:	f7ff f963 	bl	8013d94 <millis>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	4b0f      	ldr	r3, [pc, #60]	; (8014b10 <algoGalgo+0x2b0>)
 8014ad2:	601a      	str	r2, [r3, #0]
}
 8014ad4:	bf00      	nop
 8014ad6:	3730      	adds	r7, #48	; 0x30
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	ecbd 8b02 	vpop	{d8}
 8014ade:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae0:	16c16c17 	.word	0x16c16c17
 8014ae4:	3f66c16c 	.word	0x3f66c16c
 8014ae8:	d70a3d71 	.word	0xd70a3d71
 8014aec:	3fed70a3 	.word	0x3fed70a3
 8014af0:	3f19999a 	.word	0x3f19999a
 8014af4:	42480000 	.word	0x42480000
 8014af8:	c3340000 	.word	0xc3340000
 8014afc:	43b40000 	.word	0x43b40000
 8014b00:	43340000 	.word	0x43340000
 8014b04:	43aa0000 	.word	0x43aa0000
 8014b08:	43fa0000 	.word	0x43fa0000
 8014b0c:	20003148 	.word	0x20003148
 8014b10:	20003144 	.word	0x20003144
 8014b14:	40668000 	.word	0x40668000
 8014b18:	40020800 	.word	0x40020800
 8014b1c:	00000000 	.word	0x00000000

08014b20 <bearing>:

static float bearing(float lat,float lon,float lat2,float lon2){
 8014b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014b24:	b08c      	sub	sp, #48	; 0x30
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	ed87 0a03 	vstr	s0, [r7, #12]
 8014b2c:	edc7 0a02 	vstr	s1, [r7, #8]
 8014b30:	ed87 1a01 	vstr	s2, [r7, #4]
 8014b34:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f7eb fd15 	bl	8000568 <__aeabi_f2d>
 8014b3e:	a39e      	add	r3, pc, #632	; (adr r3, 8014db8 <bearing+0x298>)
 8014b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b44:	f7eb fd68 	bl	8000618 <__aeabi_dmul>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	460c      	mov	r4, r1
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	4621      	mov	r1, r4
 8014b50:	f04f 0200 	mov.w	r2, #0
 8014b54:	4b9c      	ldr	r3, [pc, #624]	; (8014dc8 <bearing+0x2a8>)
 8014b56:	f7eb fe89 	bl	800086c <__aeabi_ddiv>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	460c      	mov	r4, r1
 8014b5e:	4618      	mov	r0, r3
 8014b60:	4621      	mov	r1, r4
 8014b62:	f7ec f851 	bl	8000c08 <__aeabi_d2f>
 8014b66:	4603      	mov	r3, r0
 8014b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7eb fcfc 	bl	8000568 <__aeabi_f2d>
 8014b70:	a391      	add	r3, pc, #580	; (adr r3, 8014db8 <bearing+0x298>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	f7eb fd4f 	bl	8000618 <__aeabi_dmul>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	460c      	mov	r4, r1
 8014b7e:	4618      	mov	r0, r3
 8014b80:	4621      	mov	r1, r4
 8014b82:	f04f 0200 	mov.w	r2, #0
 8014b86:	4b90      	ldr	r3, [pc, #576]	; (8014dc8 <bearing+0x2a8>)
 8014b88:	f7eb fe70 	bl	800086c <__aeabi_ddiv>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	460c      	mov	r4, r1
 8014b90:	4618      	mov	r0, r3
 8014b92:	4621      	mov	r1, r4
 8014b94:	f7ec f838 	bl	8000c08 <__aeabi_d2f>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 8014b9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8014ba0:	edd7 7a03 	vldr	s15, [r7, #12]
 8014ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ba8:	ee17 0a90 	vmov	r0, s15
 8014bac:	f7eb fcdc 	bl	8000568 <__aeabi_f2d>
 8014bb0:	a381      	add	r3, pc, #516	; (adr r3, 8014db8 <bearing+0x298>)
 8014bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb6:	f7eb fd2f 	bl	8000618 <__aeabi_dmul>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	460c      	mov	r4, r1
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	4621      	mov	r1, r4
 8014bc2:	f04f 0200 	mov.w	r2, #0
 8014bc6:	4b80      	ldr	r3, [pc, #512]	; (8014dc8 <bearing+0x2a8>)
 8014bc8:	f7eb fe50 	bl	800086c <__aeabi_ddiv>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	460c      	mov	r4, r1
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	4621      	mov	r1, r4
 8014bd4:	f7ec f818 	bl	8000c08 <__aeabi_d2f>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 8014bdc:	ed97 7a00 	vldr	s14, [r7]
 8014be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8014be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014be8:	ee17 0a90 	vmov	r0, s15
 8014bec:	f7eb fcbc 	bl	8000568 <__aeabi_f2d>
 8014bf0:	a371      	add	r3, pc, #452	; (adr r3, 8014db8 <bearing+0x298>)
 8014bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf6:	f7eb fd0f 	bl	8000618 <__aeabi_dmul>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	460c      	mov	r4, r1
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4621      	mov	r1, r4
 8014c02:	f04f 0200 	mov.w	r2, #0
 8014c06:	4b70      	ldr	r3, [pc, #448]	; (8014dc8 <bearing+0x2a8>)
 8014c08:	f7eb fe30 	bl	800086c <__aeabi_ddiv>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	460c      	mov	r4, r1
 8014c10:	4618      	mov	r0, r3
 8014c12:	4621      	mov	r1, r4
 8014c14:	f7eb fff8 	bl	8000c08 <__aeabi_d2f>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 8014c1c:	6a38      	ldr	r0, [r7, #32]
 8014c1e:	f7eb fca3 	bl	8000568 <__aeabi_f2d>
 8014c22:	4603      	mov	r3, r0
 8014c24:	460c      	mov	r4, r1
 8014c26:	ec44 3b10 	vmov	d0, r3, r4
 8014c2a:	f006 f891 	bl	801ad50 <sin>
 8014c2e:	ec55 4b10 	vmov	r4, r5, d0
 8014c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c34:	f7eb fc98 	bl	8000568 <__aeabi_f2d>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	460b      	mov	r3, r1
 8014c3c:	ec43 2b10 	vmov	d0, r2, r3
 8014c40:	f006 f842 	bl	801acc8 <cos>
 8014c44:	ec53 2b10 	vmov	r2, r3, d0
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f7eb fce4 	bl	8000618 <__aeabi_dmul>
 8014c50:	4603      	mov	r3, r0
 8014c52:	460c      	mov	r4, r1
 8014c54:	4618      	mov	r0, r3
 8014c56:	4621      	mov	r1, r4
 8014c58:	f7eb ffd6 	bl	8000c08 <__aeabi_d2f>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8014c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c62:	f7eb fc81 	bl	8000568 <__aeabi_f2d>
 8014c66:	4603      	mov	r3, r0
 8014c68:	460c      	mov	r4, r1
 8014c6a:	ec44 3b10 	vmov	d0, r3, r4
 8014c6e:	f006 f82b 	bl	801acc8 <cos>
 8014c72:	ec55 4b10 	vmov	r4, r5, d0
 8014c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c78:	f7eb fc76 	bl	8000568 <__aeabi_f2d>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	ec43 2b10 	vmov	d0, r2, r3
 8014c84:	f006 f864 	bl	801ad50 <sin>
 8014c88:	ec53 2b10 	vmov	r2, r3, d0
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	4629      	mov	r1, r5
 8014c90:	f7eb fcc2 	bl	8000618 <__aeabi_dmul>
 8014c94:	4603      	mov	r3, r0
 8014c96:	460c      	mov	r4, r1
 8014c98:	4625      	mov	r5, r4
 8014c9a:	461c      	mov	r4, r3
 8014c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c9e:	f7eb fc63 	bl	8000568 <__aeabi_f2d>
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	ec43 2b10 	vmov	d0, r2, r3
 8014caa:	f006 f851 	bl	801ad50 <sin>
 8014cae:	ec59 8b10 	vmov	r8, r9, d0
 8014cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cb4:	f7eb fc58 	bl	8000568 <__aeabi_f2d>
 8014cb8:	4602      	mov	r2, r0
 8014cba:	460b      	mov	r3, r1
 8014cbc:	ec43 2b10 	vmov	d0, r2, r3
 8014cc0:	f006 f802 	bl	801acc8 <cos>
 8014cc4:	ec53 2b10 	vmov	r2, r3, d0
 8014cc8:	4640      	mov	r0, r8
 8014cca:	4649      	mov	r1, r9
 8014ccc:	f7eb fca4 	bl	8000618 <__aeabi_dmul>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4690      	mov	r8, r2
 8014cd6:	4699      	mov	r9, r3
 8014cd8:	6a38      	ldr	r0, [r7, #32]
 8014cda:	f7eb fc45 	bl	8000568 <__aeabi_f2d>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	ec43 2b10 	vmov	d0, r2, r3
 8014ce6:	f005 ffef 	bl	801acc8 <cos>
 8014cea:	ec53 2b10 	vmov	r2, r3, d0
 8014cee:	4640      	mov	r0, r8
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	f7eb fc91 	bl	8000618 <__aeabi_dmul>
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	4629      	mov	r1, r5
 8014cfe:	f7eb fad3 	bl	80002a8 <__aeabi_dsub>
 8014d02:	4603      	mov	r3, r0
 8014d04:	460c      	mov	r4, r1
 8014d06:	4618      	mov	r0, r3
 8014d08:	4621      	mov	r1, r4
 8014d0a:	f7eb ff7d 	bl	8000c08 <__aeabi_d2f>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8014d12:	69f8      	ldr	r0, [r7, #28]
 8014d14:	f7eb fc28 	bl	8000568 <__aeabi_f2d>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	460d      	mov	r5, r1
 8014d1c:	69b8      	ldr	r0, [r7, #24]
 8014d1e:	f7eb fc23 	bl	8000568 <__aeabi_f2d>
 8014d22:	4602      	mov	r2, r0
 8014d24:	460b      	mov	r3, r1
 8014d26:	ec43 2b11 	vmov	d1, r2, r3
 8014d2a:	ec45 4b10 	vmov	d0, r4, r5
 8014d2e:	f006 f8af 	bl	801ae90 <atan2>
 8014d32:	ec54 3b10 	vmov	r3, r4, d0
 8014d36:	4618      	mov	r0, r3
 8014d38:	4621      	mov	r1, r4
 8014d3a:	f7eb ff65 	bl	8000c08 <__aeabi_d2f>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;// radians to degrees
 8014d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8014d46:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8014dcc <bearing+0x2ac>
 8014d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d4e:	ee17 0a90 	vmov	r0, s15
 8014d52:	f7eb fc09 	bl	8000568 <__aeabi_f2d>
 8014d56:	a318      	add	r3, pc, #96	; (adr r3, 8014db8 <bearing+0x298>)
 8014d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5c:	f7eb fd86 	bl	800086c <__aeabi_ddiv>
 8014d60:	4603      	mov	r3, r0
 8014d62:	460c      	mov	r4, r1
 8014d64:	4618      	mov	r0, r3
 8014d66:	4621      	mov	r1, r4
 8014d68:	f7eb ff4e 	bl	8000c08 <__aeabi_d2f>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8014d70:	edd7 7a05 	vldr	s15, [r7, #20]
 8014d74:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8014dd0 <bearing+0x2b0>
 8014d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d7c:	ee17 0a90 	vmov	r0, s15
 8014d80:	f7eb fbf2 	bl	8000568 <__aeabi_f2d>
 8014d84:	4603      	mov	r3, r0
 8014d86:	460c      	mov	r4, r1
 8014d88:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8014dc0 <bearing+0x2a0>
 8014d8c:	ec44 3b10 	vmov	d0, r3, r4
 8014d90:	f006 f880 	bl	801ae94 <fmod>
 8014d94:	ec54 3b10 	vmov	r3, r4, d0
 8014d98:	4618      	mov	r0, r3
 8014d9a:	4621      	mov	r1, r4
 8014d9c:	f7eb ff34 	bl	8000c08 <__aeabi_d2f>
 8014da0:	4603      	mov	r3, r0
 8014da2:	617b      	str	r3, [r7, #20]
   // std::cout<< brng;
    return brng;
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	ee07 3a90 	vmov	s15, r3
    }
 8014daa:	eeb0 0a67 	vmov.f32	s0, s15
 8014dae:	3730      	adds	r7, #48	; 0x30
 8014db0:	46bd      	mov	sp, r7
 8014db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014db6:	bf00      	nop
 8014db8:	54442d18 	.word	0x54442d18
 8014dbc:	400921fb 	.word	0x400921fb
 8014dc0:	00000000 	.word	0x00000000
 8014dc4:	40768000 	.word	0x40768000
 8014dc8:	40668000 	.word	0x40668000
 8014dcc:	43340000 	.word	0x43340000
 8014dd0:	43b40000 	.word	0x43b40000

08014dd4 <fdr_setup>:
float target_lat;
float target_lon;
uint8_t servoState;

static void fdr_setup(void)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8014dd8:	f000 fe54 	bl	8015a84 <Get_TIM3_Instance>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	2108      	movs	r1, #8
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7f7 fc49 	bl	800c678 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 990;
 8014de6:	4b26      	ldr	r3, [pc, #152]	; (8014e80 <fdr_setup+0xac>)
 8014de8:	f240 32de 	movw	r2, #990	; 0x3de
 8014dec:	63da      	str	r2, [r3, #60]	; 0x3c

	// wait for USR button press
	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8014dee:	2201      	movs	r2, #1
 8014df0:	2140      	movs	r1, #64	; 0x40
 8014df2:	4824      	ldr	r0, [pc, #144]	; (8014e84 <fdr_setup+0xb0>)
 8014df4:	f7f2 fd0e 	bl	8007814 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8014df8:	4823      	ldr	r0, [pc, #140]	; (8014e88 <fdr_setup+0xb4>)
 8014dfa:	f7ff f877 	bl	8013eec <println>
 8014dfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014e02:	f7f1 fe89 	bl	8006b18 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8014e06:	2200      	movs	r2, #0
 8014e08:	2140      	movs	r1, #64	; 0x40
 8014e0a:	481e      	ldr	r0, [pc, #120]	; (8014e84 <fdr_setup+0xb0>)
 8014e0c:	f7f2 fd02 	bl	8007814 <HAL_GPIO_WritePin>

	TIM3->CCR3 = 600;
 8014e10:	4b1b      	ldr	r3, [pc, #108]	; (8014e80 <fdr_setup+0xac>)
 8014e12:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014e16:	63da      	str	r2, [r3, #60]	; 0x3c

	if (sdTest_begin()) { println("SD card is working!");}
 8014e18:	f7ff f8ca 	bl	8013fb0 <sdTest_begin>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d002      	beq.n	8014e28 <fdr_setup+0x54>
 8014e22:	481a      	ldr	r0, [pc, #104]	; (8014e8c <fdr_setup+0xb8>)
 8014e24:	f7ff f862 	bl	8013eec <println>
	log_new();
 8014e28:	f7f1 fb2a 	bl	8006480 <log_new>
	SD_init();
 8014e2c:	f7ec fa42 	bl	80012b4 <SD_init>
	if (duplex_begin()) { println("Radio is working");}
 8014e30:	f7ff f960 	bl	80140f4 <duplex_begin>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d002      	beq.n	8014e40 <fdr_setup+0x6c>
 8014e3a:	4815      	ldr	r0, [pc, #84]	; (8014e90 <fdr_setup+0xbc>)
 8014e3c:	f7ff f856 	bl	8013eec <println>

	sensing_begin();
 8014e40:	f7ff fb62 	bl	8014508 <sensing_begin>

	target_lat = 20.0;
 8014e44:	4b13      	ldr	r3, [pc, #76]	; (8014e94 <fdr_setup+0xc0>)
 8014e46:	4a14      	ldr	r2, [pc, #80]	; (8014e98 <fdr_setup+0xc4>)
 8014e48:	601a      	str	r2, [r3, #0]
	target_lon = 30.0;
 8014e4a:	4b14      	ldr	r3, [pc, #80]	; (8014e9c <fdr_setup+0xc8>)
 8014e4c:	4a14      	ldr	r2, [pc, #80]	; (8014ea0 <fdr_setup+0xcc>)
 8014e4e:	601a      	str	r2, [r3, #0]
	target_yaw = 180.0; //statyczne 180.0
 8014e50:	4b14      	ldr	r3, [pc, #80]	; (8014ea4 <fdr_setup+0xd0>)
 8014e52:	4a15      	ldr	r2, [pc, #84]	; (8014ea8 <fdr_setup+0xd4>)
 8014e54:	601a      	str	r2, [r3, #0]

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8014e56:	2200      	movs	r2, #0
 8014e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014e5c:	4813      	ldr	r0, [pc, #76]	; (8014eac <fdr_setup+0xd8>)
 8014e5e:	f7f2 fcd9 	bl	8007814 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);

	duplex_loop("new transmit", 14, true);
 8014e62:	2201      	movs	r2, #1
 8014e64:	210e      	movs	r1, #14
 8014e66:	4812      	ldr	r0, [pc, #72]	; (8014eb0 <fdr_setup+0xdc>)
 8014e68:	f7ff f9cc 	bl	8014204 <duplex_loop>
	lastSave = millis();
 8014e6c:	f7fe ff92 	bl	8013d94 <millis>
 8014e70:	4602      	mov	r2, r0
 8014e72:	4b10      	ldr	r3, [pc, #64]	; (8014eb4 <fdr_setup+0xe0>)
 8014e74:	601a      	str	r2, [r3, #0]
	servoState = 0;
 8014e76:	4b10      	ldr	r3, [pc, #64]	; (8014eb8 <fdr_setup+0xe4>)
 8014e78:	2200      	movs	r2, #0
 8014e7a:	701a      	strb	r2, [r3, #0]
}
 8014e7c:	bf00      	nop
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	40000400 	.word	0x40000400
 8014e84:	40020800 	.word	0x40020800
 8014e88:	0801e18c 	.word	0x0801e18c
 8014e8c:	0801e19c 	.word	0x0801e19c
 8014e90:	0801e1b0 	.word	0x0801e1b0
 8014e94:	20006804 	.word	0x20006804
 8014e98:	41a00000 	.word	0x41a00000
 8014e9c:	20006808 	.word	0x20006808
 8014ea0:	41f00000 	.word	0x41f00000
 8014ea4:	2000680c 	.word	0x2000680c
 8014ea8:	43340000 	.word	0x43340000
 8014eac:	40020400 	.word	0x40020400
 8014eb0:	0801e1c4 	.word	0x0801e1c4
 8014eb4:	2000681c 	.word	0x2000681c
 8014eb8:	200067fc 	.word	0x200067fc

08014ebc <preparePacket>:

static void preparePacket()
{
 8014ebc:	b480      	push	{r7}
 8014ebe:	b083      	sub	sp, #12
 8014ec0:	af00      	add	r7, sp, #0
	uint32_t temv = 0;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	607b      	str	r3, [r7, #4]
	temv = (uint32_t)(bmp.pressure * 10);
 8014ec6:	4b4d      	ldr	r3, [pc, #308]	; (8014ffc <preparePacket+0x140>)
 8014ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8014ecc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ed8:	ee17 3a90 	vmov	r3, s15
 8014edc:	607b      	str	r3, [r7, #4]
	radio.txBuffer[0] = (uint8_t)(temv >> 0) & 0xFF;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	b2da      	uxtb	r2, r3
 8014ee2:	4b47      	ldr	r3, [pc, #284]	; (8015000 <preparePacket+0x144>)
 8014ee4:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	radio.txBuffer[1] = (uint8_t)(temv >> 8) & 0xFF;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	0a1b      	lsrs	r3, r3, #8
 8014eec:	b2da      	uxtb	r2, r3
 8014eee:	4b44      	ldr	r3, [pc, #272]	; (8015000 <preparePacket+0x144>)
 8014ef0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	radio.txBuffer[2] = (uint8_t)(temv >> 16) & 0xFF;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	0c1b      	lsrs	r3, r3, #16
 8014ef8:	b2da      	uxtb	r2, r3
 8014efa:	4b41      	ldr	r3, [pc, #260]	; (8015000 <preparePacket+0x144>)
 8014efc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	radio.txBuffer[3] = (uint8_t)(temv >> 24) & 0xFF;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	0e1b      	lsrs	r3, r3, #24
 8014f04:	b2da      	uxtb	r2, r3
 8014f06:	4b3e      	ldr	r3, [pc, #248]	; (8015000 <preparePacket+0x144>)
 8014f08:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

	temv = (uint32_t)(bmp.temperature * 10);
 8014f0c:	4b3b      	ldr	r3, [pc, #236]	; (8014ffc <preparePacket+0x140>)
 8014f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8014f12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f1e:	ee17 3a90 	vmov	r3, s15
 8014f22:	607b      	str	r3, [r7, #4]
	radio.txBuffer[4] = (uint8_t)(temv >> 0) & 0xFF;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	b2da      	uxtb	r2, r3
 8014f28:	4b35      	ldr	r3, [pc, #212]	; (8015000 <preparePacket+0x144>)
 8014f2a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	radio.txBuffer[5] = (uint8_t)(temv >> 8) & 0xFF;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	0a1b      	lsrs	r3, r3, #8
 8014f32:	b2da      	uxtb	r2, r3
 8014f34:	4b32      	ldr	r3, [pc, #200]	; (8015000 <preparePacket+0x144>)
 8014f36:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	radio.txBuffer[6] = (uint8_t)(temv >> 16) & 0xFF;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	0c1b      	lsrs	r3, r3, #16
 8014f3e:	b2da      	uxtb	r2, r3
 8014f40:	4b2f      	ldr	r3, [pc, #188]	; (8015000 <preparePacket+0x144>)
 8014f42:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	radio.txBuffer[7] = (uint8_t)(temv >> 24) & 0xFF;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	0e1b      	lsrs	r3, r3, #24
 8014f4a:	b2da      	uxtb	r2, r3
 8014f4c:	4b2c      	ldr	r3, [pc, #176]	; (8015000 <preparePacket+0x144>)
 8014f4e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	temv = (uint32_t)(gps.latitudeDegrees * 10000000);
 8014f52:	4b2c      	ldr	r3, [pc, #176]	; (8015004 <preparePacket+0x148>)
 8014f54:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8014f58:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8015008 <preparePacket+0x14c>
 8014f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f64:	ee17 3a90 	vmov	r3, s15
 8014f68:	607b      	str	r3, [r7, #4]
	radio.txBuffer[8] = (uint8_t)(temv >> 0) & 0xFF;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	b2da      	uxtb	r2, r3
 8014f6e:	4b24      	ldr	r3, [pc, #144]	; (8015000 <preparePacket+0x144>)
 8014f70:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	radio.txBuffer[9] = (uint8_t)(temv >> 8) & 0xFF;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	0a1b      	lsrs	r3, r3, #8
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	4b21      	ldr	r3, [pc, #132]	; (8015000 <preparePacket+0x144>)
 8014f7c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	radio.txBuffer[10] = (uint8_t)(temv >> 16) & 0xFF;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	0c1b      	lsrs	r3, r3, #16
 8014f84:	b2da      	uxtb	r2, r3
 8014f86:	4b1e      	ldr	r3, [pc, #120]	; (8015000 <preparePacket+0x144>)
 8014f88:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	radio.txBuffer[11] = (uint8_t)(temv >> 24) & 0xFF;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	0e1b      	lsrs	r3, r3, #24
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	4b1b      	ldr	r3, [pc, #108]	; (8015000 <preparePacket+0x144>)
 8014f94:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

	temv = (uint32_t)(gps.longitudeDegrees * 10000000);
 8014f98:	4b1a      	ldr	r3, [pc, #104]	; (8015004 <preparePacket+0x148>)
 8014f9a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8014f9e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015008 <preparePacket+0x14c>
 8014fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014faa:	ee17 3a90 	vmov	r3, s15
 8014fae:	607b      	str	r3, [r7, #4]
	radio.txBuffer[12] = (uint8_t)(temv >> 0) & 0xFF;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	b2da      	uxtb	r2, r3
 8014fb4:	4b12      	ldr	r3, [pc, #72]	; (8015000 <preparePacket+0x144>)
 8014fb6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	radio.txBuffer[13] = (uint8_t)(temv >> 8) & 0xFF;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	0a1b      	lsrs	r3, r3, #8
 8014fbe:	b2da      	uxtb	r2, r3
 8014fc0:	4b0f      	ldr	r3, [pc, #60]	; (8015000 <preparePacket+0x144>)
 8014fc2:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	radio.txBuffer[14] = (uint8_t)(temv >> 16) & 0xFF;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	0c1b      	lsrs	r3, r3, #16
 8014fca:	b2da      	uxtb	r2, r3
 8014fcc:	4b0c      	ldr	r3, [pc, #48]	; (8015000 <preparePacket+0x144>)
 8014fce:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	radio.txBuffer[15] = (uint8_t)(temv >> 24) & 0xFF;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	0e1b      	lsrs	r3, r3, #24
 8014fd6:	b2da      	uxtb	r2, r3
 8014fd8:	4b09      	ldr	r3, [pc, #36]	; (8015000 <preparePacket+0x144>)
 8014fda:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
	radio.txBuffer[16] = (uint8_t)(yaw * (255.0 / 360.0));
	radio.txBuffer[17] = (uint8_t)(pitch * (255.0 / 360.0));
	radio.txBuffer[18] = (uint8_t)(roll * (255.0 / 360.0));
	 */

	radio.txBuffer[19] = 0x00;
 8014fde:	4b08      	ldr	r3, [pc, #32]	; (8015000 <preparePacket+0x144>)
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	radio.txLen = 20;
 8014fe6:	4b06      	ldr	r3, [pc, #24]	; (8015000 <preparePacket+0x144>)
 8014fe8:	2214      	movs	r2, #20
 8014fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8014fee:	bf00      	nop
 8014ff0:	370c      	adds	r7, #12
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	200049fc 	.word	0x200049fc
 8015000:	2000314c 	.word	0x2000314c
 8015004:	200043b4 	.word	0x200043b4
 8015008:	4b189680 	.word	0x4b189680
 801500c:	00000000 	.word	0x00000000

08015010 <fdr_loop>:


static void fdr_loop(void)
{
 8015010:	b590      	push	{r4, r7, lr}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
	sensing_loop();
 8015016:	f7ff fb29 	bl	801466c <sensing_loop>


	if (millis() - lastSave >= 1137)	// save SD buffers while waiting for packet but no frequent than 1Hz
 801501a:	f7fe febb 	bl	8013d94 <millis>
 801501e:	4602      	mov	r2, r0
 8015020:	4b5d      	ldr	r3, [pc, #372]	; (8015198 <fdr_loop+0x188>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 801502a:	d909      	bls.n	8015040 <fdr_loop+0x30>
	{
		log_print("yo helo!\n\r");
 801502c:	485b      	ldr	r0, [pc, #364]	; (801519c <fdr_loop+0x18c>)
 801502e:	f7f1 fc2b 	bl	8006888 <log_print>
		log_save();
 8015032:	f7f1 fb03 	bl	800663c <log_save>
		lastSave = millis();
 8015036:	f7fe fead 	bl	8013d94 <millis>
 801503a:	4602      	mov	r2, r0
 801503c:	4b56      	ldr	r3, [pc, #344]	; (8015198 <fdr_loop+0x188>)
 801503e:	601a      	str	r2, [r3, #0]
	}



	if (duplex_checkINT())
 8015040:	f7ff f8b8 	bl	80141b4 <duplex_checkINT>
 8015044:	4603      	mov	r3, r0
 8015046:	2b00      	cmp	r3, #0
 8015048:	d06b      	beq.n	8015122 <fdr_loop+0x112>
	{
		//radio.txLen = sprintf(radio.txBuffer, "%.01f_%.01f_%.07f_%.07f ", bmp.pressure, bmp.temperature, gps.latitudeDegrees, gps.longitudeDegrees); //imortant to leave last byte
		preparePacket();
 801504a:	f7ff ff37 	bl	8014ebc <preparePacket>
		duplex_loop(radio.txBuffer, radio.txLen, true);
 801504e:	4b54      	ldr	r3, [pc, #336]	; (80151a0 <fdr_loop+0x190>)
 8015050:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015054:	2201      	movs	r2, #1
 8015056:	4619      	mov	r1, r3
 8015058:	4852      	ldr	r0, [pc, #328]	; (80151a4 <fdr_loop+0x194>)
 801505a:	f7ff f8d3 	bl	8014204 <duplex_loop>

		if ((float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0))
 801505e:	4b50      	ldr	r3, [pc, #320]	; (80151a0 <fdr_loop+0x190>)
 8015060:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015064:	3b01      	subs	r3, #1
 8015066:	4a4e      	ldr	r2, [pc, #312]	; (80151a0 <fdr_loop+0x190>)
 8015068:	4413      	add	r3, r2
 801506a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801506e:	ee07 3a90 	vmov	s15, r3
 8015072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015076:	ee17 0a90 	vmov	r0, s15
 801507a:	f7eb fa75 	bl	8000568 <__aeabi_f2d>
 801507e:	a344      	add	r3, pc, #272	; (adr r3, 8015190 <fdr_loop+0x180>)
 8015080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015084:	f7eb fac8 	bl	8000618 <__aeabi_dmul>
 8015088:	4603      	mov	r3, r0
 801508a:	460c      	mov	r4, r1
 801508c:	4618      	mov	r0, r3
 801508e:	4621      	mov	r1, r4
 8015090:	f04f 0200 	mov.w	r2, #0
 8015094:	f04f 0300 	mov.w	r3, #0
 8015098:	f7eb fd26 	bl	8000ae8 <__aeabi_dcmpeq>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d11d      	bne.n	80150de <fdr_loop+0xce>
		{
			target_yaw = (float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0);
 80150a2:	4b3f      	ldr	r3, [pc, #252]	; (80151a0 <fdr_loop+0x190>)
 80150a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80150a8:	3b01      	subs	r3, #1
 80150aa:	4a3d      	ldr	r2, [pc, #244]	; (80151a0 <fdr_loop+0x190>)
 80150ac:	4413      	add	r3, r2
 80150ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150b2:	ee07 3a90 	vmov	s15, r3
 80150b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150ba:	ee17 0a90 	vmov	r0, s15
 80150be:	f7eb fa53 	bl	8000568 <__aeabi_f2d>
 80150c2:	a333      	add	r3, pc, #204	; (adr r3, 8015190 <fdr_loop+0x180>)
 80150c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c8:	f7eb faa6 	bl	8000618 <__aeabi_dmul>
 80150cc:	4603      	mov	r3, r0
 80150ce:	460c      	mov	r4, r1
 80150d0:	4618      	mov	r0, r3
 80150d2:	4621      	mov	r1, r4
 80150d4:	f7eb fd98 	bl	8000c08 <__aeabi_d2f>
 80150d8:	4602      	mov	r2, r0
 80150da:	4b33      	ldr	r3, [pc, #204]	; (80151a8 <fdr_loop+0x198>)
 80150dc:	601a      	str	r2, [r3, #0]
		}

		//print_float(target_yaw); println("<< YAW << YAW");
		//print_int(radio.rxBuffer[0]); println("<< SERVO");
		if (radio.rxBuffer[0] == 1 || radio.rxBuffer[0] == 3) TIM3->CCR3 = 600;
 80150de:	4b30      	ldr	r3, [pc, #192]	; (80151a0 <fdr_loop+0x190>)
 80150e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150e4:	2b01      	cmp	r3, #1
 80150e6:	d004      	beq.n	80150f2 <fdr_loop+0xe2>
 80150e8:	4b2d      	ldr	r3, [pc, #180]	; (80151a0 <fdr_loop+0x190>)
 80150ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80150ee:	2b03      	cmp	r3, #3
 80150f0:	d104      	bne.n	80150fc <fdr_loop+0xec>
 80150f2:	4b2e      	ldr	r3, [pc, #184]	; (80151ac <fdr_loop+0x19c>)
 80150f4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80150f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80150fa:	e003      	b.n	8015104 <fdr_loop+0xf4>
		else TIM3->CCR3 = 900;
 80150fc:	4b2b      	ldr	r3, [pc, #172]	; (80151ac <fdr_loop+0x19c>)
 80150fe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8015102:	63da      	str	r2, [r3, #60]	; 0x3c
		if (radio.rxBuffer[0] == 2 || radio.rxBuffer[0] == 3) enableMotors();
 8015104:	4b26      	ldr	r3, [pc, #152]	; (80151a0 <fdr_loop+0x190>)
 8015106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801510a:	2b02      	cmp	r3, #2
 801510c:	d004      	beq.n	8015118 <fdr_loop+0x108>
 801510e:	4b24      	ldr	r3, [pc, #144]	; (80151a0 <fdr_loop+0x190>)
 8015110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015114:	2b03      	cmp	r3, #3
 8015116:	d102      	bne.n	801511e <fdr_loop+0x10e>
 8015118:	f7ec f868 	bl	80011ec <enableMotors>
 801511c:	e001      	b.n	8015122 <fdr_loop+0x112>
		else disableMotors();
 801511e:	f7ec f8a7 	bl	8001270 <disableMotors>
	}


	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 8015122:	f7fe fe37 	bl	8013d94 <millis>
 8015126:	4602      	mov	r2, r0
 8015128:	4b21      	ldr	r3, [pc, #132]	; (80151b0 <fdr_loop+0x1a0>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	1ad3      	subs	r3, r2, r3
 801512e:	2b09      	cmp	r3, #9
 8015130:	d928      	bls.n	8015184 <fdr_loop+0x174>
	{

		//imuTest_getEuler();
		float brng = bearing(gps.latitudeDegrees, gps.longitudeDegrees, target_lat, target_lon);
 8015132:	4b20      	ldr	r3, [pc, #128]	; (80151b4 <fdr_loop+0x1a4>)
 8015134:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8015138:	4b1e      	ldr	r3, [pc, #120]	; (80151b4 <fdr_loop+0x1a4>)
 801513a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 801513e:	4b1e      	ldr	r3, [pc, #120]	; (80151b8 <fdr_loop+0x1a8>)
 8015140:	edd3 6a00 	vldr	s13, [r3]
 8015144:	4b1d      	ldr	r3, [pc, #116]	; (80151bc <fdr_loop+0x1ac>)
 8015146:	ed93 6a00 	vldr	s12, [r3]
 801514a:	eef0 1a46 	vmov.f32	s3, s12
 801514e:	eeb0 1a66 	vmov.f32	s2, s13
 8015152:	eef0 0a47 	vmov.f32	s1, s14
 8015156:	eeb0 0a67 	vmov.f32	s0, s15
 801515a:	f7ff fce1 	bl	8014b20 <bearing>
 801515e:	ed87 0a01 	vstr	s0, [r7, #4]
	    //algoGalgo(yaw, brng); // target_yaw wyliczane z pozycji anteny;

		algoGalgo(mpu.yaw, target_yaw); //statyczny target_yaw
 8015162:	4b17      	ldr	r3, [pc, #92]	; (80151c0 <fdr_loop+0x1b0>)
 8015164:	edd3 7a03 	vldr	s15, [r3, #12]
 8015168:	4b0f      	ldr	r3, [pc, #60]	; (80151a8 <fdr_loop+0x198>)
 801516a:	ed93 7a00 	vldr	s14, [r3]
 801516e:	eef0 0a47 	vmov.f32	s1, s14
 8015172:	eeb0 0a67 	vmov.f32	s0, s15
 8015176:	f7ff fb73 	bl	8014860 <algoGalgo>

		//print_float(yaw); println("");
		lastMotUpdate = millis();
 801517a:	f7fe fe0b 	bl	8013d94 <millis>
 801517e:	4602      	mov	r2, r0
 8015180:	4b0b      	ldr	r3, [pc, #44]	; (80151b0 <fdr_loop+0x1a0>)
 8015182:	601a      	str	r2, [r3, #0]
	}
}
 8015184:	bf00      	nop
 8015186:	370c      	adds	r7, #12
 8015188:	46bd      	mov	sp, r7
 801518a:	bd90      	pop	{r4, r7, pc}
 801518c:	f3af 8000 	nop.w
 8015190:	96969697 	.word	0x96969697
 8015194:	3ff69696 	.word	0x3ff69696
 8015198:	2000681c 	.word	0x2000681c
 801519c:	0801e1d4 	.word	0x0801e1d4
 80151a0:	2000314c 	.word	0x2000314c
 80151a4:	20003290 	.word	0x20003290
 80151a8:	2000680c 	.word	0x2000680c
 80151ac:	40000400 	.word	0x40000400
 80151b0:	200049d8 	.word	0x200049d8
 80151b4:	200043b4 	.word	0x200043b4
 80151b8:	20006804 	.word	0x20006804
 80151bc:	20006808 	.word	0x20006808
 80151c0:	20006740 	.word	0x20006740

080151c4 <setup>:
 */

#include "Scripts/FunctionalTests/fdr_tests.c"

static void setup(void)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	af00      	add	r7, sp, #0
	

	//gps.uart = Get_UART3_Instance();
	//GPS_init(&gps);

	fdr_setup();
 80151c8:	f7ff fe04 	bl	8014dd4 <fdr_setup>
}
 80151cc:	bf00      	nop
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <loop>:

static void loop(void)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	af00      	add	r7, sp, #0
	{
		char toPrint[2] = {gps.uartBuffer[0], '\0'};
		print(toPrint);
	}
	*/
	fdr_loop();
 80151d4:	f7ff ff1c 	bl	8015010 <fdr_loop>
}
 80151d8:	bf00      	nop
 80151da:	bd80      	pop	{r7, pc}

080151dc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
 80151e4:	2201      	movs	r2, #1
 80151e6:	4905      	ldr	r1, [pc, #20]	; (80151fc <HAL_UART_RxCpltCallback+0x20>)
 80151e8:	6878      	ldr	r0, [r7, #4]
 80151ea:	f7f8 f893 	bl	800d314 <HAL_UART_Receive_IT>
	GPS_read(&gps);
 80151ee:	4804      	ldr	r0, [pc, #16]	; (8015200 <HAL_UART_RxCpltCallback+0x24>)
 80151f0:	f7ed fa86 	bl	8002700 <GPS_read>
}
 80151f4:	bf00      	nop
 80151f6:	3708      	adds	r7, #8
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	200045d2 	.word	0x200045d2
 8015200:	200043b4 	.word	0x200043b4

08015204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015208:	f7f1 fc14 	bl	8006a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801520c:	f000 f862 	bl	80152d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015210:	f000 fb32 	bl	8015878 <MX_GPIO_Init>
  MX_DMA_Init();
 8015214:	f000 fb08 	bl	8015828 <MX_DMA_Init>
  MX_I2C1_Init();
 8015218:	f000 f8de 	bl	80153d8 <MX_I2C1_Init>
  MX_RTC_Init();
 801521c:	f000 f90a 	bl	8015434 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8015220:	f000 f92e 	bl	8015480 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8015224:	f000 f94c 	bl	80154c0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8015228:	f000 f980 	bl	801552c <MX_TIM2_Init>
  MX_TIM3_Init();
 801522c:	f000 f9cc 	bl	80155c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8015230:	f000 fa4c 	bl	80156cc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8015234:	f000 face 	bl	80157d4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8015238:	f7fe fd72 	bl	8013d20 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 801523c:	f001 f9f0 	bl	8016620 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8015240:	4820      	ldr	r0, [pc, #128]	; (80152c4 <main+0xc0>)
 8015242:	f7f7 f9c0 	bl	800c5c6 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8015246:	2200      	movs	r2, #0
 8015248:	2180      	movs	r1, #128	; 0x80
 801524a:	481f      	ldr	r0, [pc, #124]	; (80152c8 <main+0xc4>)
 801524c:	f7f2 fae2 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8015250:	2200      	movs	r2, #0
 8015252:	2140      	movs	r1, #64	; 0x40
 8015254:	481c      	ldr	r0, [pc, #112]	; (80152c8 <main+0xc4>)
 8015256:	f7f2 fadd 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 801525a:	2200      	movs	r2, #0
 801525c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015260:	481a      	ldr	r0, [pc, #104]	; (80152cc <main+0xc8>)
 8015262:	f7f2 fad7 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8015266:	2200      	movs	r2, #0
 8015268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801526c:	4817      	ldr	r0, [pc, #92]	; (80152cc <main+0xc8>)
 801526e:	f7f2 fad1 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8015272:	2200      	movs	r2, #0
 8015274:	2101      	movs	r1, #1
 8015276:	4816      	ldr	r0, [pc, #88]	; (80152d0 <main+0xcc>)
 8015278:	f7f2 facc 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 801527c:	2200      	movs	r2, #0
 801527e:	2104      	movs	r1, #4
 8015280:	4813      	ldr	r0, [pc, #76]	; (80152d0 <main+0xcc>)
 8015282:	f7f2 fac7 	bl	8007814 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8015286:	2200      	movs	r2, #0
 8015288:	2101      	movs	r1, #1
 801528a:	480f      	ldr	r0, [pc, #60]	; (80152c8 <main+0xc4>)
 801528c:	f7f2 fac2 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8015290:	2200      	movs	r2, #0
 8015292:	2104      	movs	r1, #4
 8015294:	480c      	ldr	r0, [pc, #48]	; (80152c8 <main+0xc4>)
 8015296:	f7f2 fabd 	bl	8007814 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 801529a:	2200      	movs	r2, #0
 801529c:	2102      	movs	r1, #2
 801529e:	480a      	ldr	r0, [pc, #40]	; (80152c8 <main+0xc4>)
 80152a0:	f7f2 fab8 	bl	8007814 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 80152a4:	2201      	movs	r2, #1
 80152a6:	2108      	movs	r1, #8
 80152a8:	4807      	ldr	r0, [pc, #28]	; (80152c8 <main+0xc4>)
 80152aa:	f7f2 fab3 	bl	8007814 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 80152ae:	2200      	movs	r2, #0
 80152b0:	2110      	movs	r1, #16
 80152b2:	4807      	ldr	r0, [pc, #28]	; (80152d0 <main+0xcc>)
 80152b4:	f7f2 faae 	bl	8007814 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 80152b8:	f7ff ff84 	bl	80151c4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 80152bc:	f7ff ff88 	bl	80151d0 <loop>
 80152c0:	e7fc      	b.n	80152bc <main+0xb8>
 80152c2:	bf00      	nop
 80152c4:	20008f68 	.word	0x20008f68
 80152c8:	40020800 	.word	0x40020800
 80152cc:	40020400 	.word	0x40020400
 80152d0:	40020000 	.word	0x40020000

080152d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b098      	sub	sp, #96	; 0x60
 80152d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80152da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80152de:	2230      	movs	r2, #48	; 0x30
 80152e0:	2100      	movs	r1, #0
 80152e2:	4618      	mov	r0, r3
 80152e4:	f001 ff3f 	bl	8017166 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80152e8:	f107 031c 	add.w	r3, r7, #28
 80152ec:	2200      	movs	r2, #0
 80152ee:	601a      	str	r2, [r3, #0]
 80152f0:	605a      	str	r2, [r3, #4]
 80152f2:	609a      	str	r2, [r3, #8]
 80152f4:	60da      	str	r2, [r3, #12]
 80152f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80152f8:	f107 030c 	add.w	r3, r7, #12
 80152fc:	2200      	movs	r2, #0
 80152fe:	601a      	str	r2, [r3, #0]
 8015300:	605a      	str	r2, [r3, #4]
 8015302:	609a      	str	r2, [r3, #8]
 8015304:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015306:	2300      	movs	r3, #0
 8015308:	60bb      	str	r3, [r7, #8]
 801530a:	4b31      	ldr	r3, [pc, #196]	; (80153d0 <SystemClock_Config+0xfc>)
 801530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801530e:	4a30      	ldr	r2, [pc, #192]	; (80153d0 <SystemClock_Config+0xfc>)
 8015310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015314:	6413      	str	r3, [r2, #64]	; 0x40
 8015316:	4b2e      	ldr	r3, [pc, #184]	; (80153d0 <SystemClock_Config+0xfc>)
 8015318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801531a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801531e:	60bb      	str	r3, [r7, #8]
 8015320:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015322:	2300      	movs	r3, #0
 8015324:	607b      	str	r3, [r7, #4]
 8015326:	4b2b      	ldr	r3, [pc, #172]	; (80153d4 <SystemClock_Config+0x100>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	4a2a      	ldr	r2, [pc, #168]	; (80153d4 <SystemClock_Config+0x100>)
 801532c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015330:	6013      	str	r3, [r2, #0]
 8015332:	4b28      	ldr	r3, [pc, #160]	; (80153d4 <SystemClock_Config+0x100>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801533a:	607b      	str	r3, [r7, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 801533e:	2305      	movs	r3, #5
 8015340:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8015348:	2301      	movs	r3, #1
 801534a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801534c:	2302      	movs	r3, #2
 801534e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015354:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8015356:	2306      	movs	r3, #6
 8015358:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 801535a:	23a8      	movs	r3, #168	; 0xa8
 801535c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801535e:	2302      	movs	r3, #2
 8015360:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8015362:	2307      	movs	r3, #7
 8015364:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801536a:	4618      	mov	r0, r3
 801536c:	f7f4 fb90 	bl	8009a90 <HAL_RCC_OscConfig>
 8015370:	4603      	mov	r3, r0
 8015372:	2b00      	cmp	r3, #0
 8015374:	d001      	beq.n	801537a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8015376:	f000 fb99 	bl	8015aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801537a:	230f      	movs	r3, #15
 801537c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801537e:	2302      	movs	r3, #2
 8015380:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015382:	2300      	movs	r3, #0
 8015384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015386:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801538a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801538c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015390:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8015392:	f107 031c 	add.w	r3, r7, #28
 8015396:	2105      	movs	r1, #5
 8015398:	4618      	mov	r0, r3
 801539a:	f7f4 fdbb 	bl	8009f14 <HAL_RCC_ClockConfig>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d001      	beq.n	80153a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80153a4:	f000 fb82 	bl	8015aac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80153a8:	2302      	movs	r3, #2
 80153aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80153ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80153b0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80153b2:	f107 030c 	add.w	r3, r7, #12
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f4 ff74 	bl	800a2a4 <HAL_RCCEx_PeriphCLKConfig>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d001      	beq.n	80153c6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80153c2:	f000 fb73 	bl	8015aac <Error_Handler>
  }
}
 80153c6:	bf00      	nop
 80153c8:	3760      	adds	r7, #96	; 0x60
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	40023800 	.word	0x40023800
 80153d4:	40007000 	.word	0x40007000

080153d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80153dc:	4b12      	ldr	r3, [pc, #72]	; (8015428 <MX_I2C1_Init+0x50>)
 80153de:	4a13      	ldr	r2, [pc, #76]	; (801542c <MX_I2C1_Init+0x54>)
 80153e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80153e2:	4b11      	ldr	r3, [pc, #68]	; (8015428 <MX_I2C1_Init+0x50>)
 80153e4:	4a12      	ldr	r2, [pc, #72]	; (8015430 <MX_I2C1_Init+0x58>)
 80153e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80153e8:	4b0f      	ldr	r3, [pc, #60]	; (8015428 <MX_I2C1_Init+0x50>)
 80153ea:	2200      	movs	r2, #0
 80153ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80153ee:	4b0e      	ldr	r3, [pc, #56]	; (8015428 <MX_I2C1_Init+0x50>)
 80153f0:	2200      	movs	r2, #0
 80153f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80153f4:	4b0c      	ldr	r3, [pc, #48]	; (8015428 <MX_I2C1_Init+0x50>)
 80153f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80153fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80153fc:	4b0a      	ldr	r3, [pc, #40]	; (8015428 <MX_I2C1_Init+0x50>)
 80153fe:	2200      	movs	r2, #0
 8015400:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8015402:	4b09      	ldr	r3, [pc, #36]	; (8015428 <MX_I2C1_Init+0x50>)
 8015404:	2200      	movs	r2, #0
 8015406:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015408:	4b07      	ldr	r3, [pc, #28]	; (8015428 <MX_I2C1_Init+0x50>)
 801540a:	2200      	movs	r2, #0
 801540c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801540e:	4b06      	ldr	r3, [pc, #24]	; (8015428 <MX_I2C1_Init+0x50>)
 8015410:	2200      	movs	r2, #0
 8015412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015414:	4804      	ldr	r0, [pc, #16]	; (8015428 <MX_I2C1_Init+0x50>)
 8015416:	f7f2 fa31 	bl	800787c <HAL_I2C_Init>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d001      	beq.n	8015424 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8015420:	f000 fb44 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015424:	bf00      	nop
 8015426:	bd80      	pop	{r7, pc}
 8015428:	20008d38 	.word	0x20008d38
 801542c:	40005400 	.word	0x40005400
 8015430:	00061a80 	.word	0x00061a80

08015434 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015438:	4b0f      	ldr	r3, [pc, #60]	; (8015478 <MX_RTC_Init+0x44>)
 801543a:	4a10      	ldr	r2, [pc, #64]	; (801547c <MX_RTC_Init+0x48>)
 801543c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801543e:	4b0e      	ldr	r3, [pc, #56]	; (8015478 <MX_RTC_Init+0x44>)
 8015440:	2200      	movs	r2, #0
 8015442:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015444:	4b0c      	ldr	r3, [pc, #48]	; (8015478 <MX_RTC_Init+0x44>)
 8015446:	227f      	movs	r2, #127	; 0x7f
 8015448:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801544a:	4b0b      	ldr	r3, [pc, #44]	; (8015478 <MX_RTC_Init+0x44>)
 801544c:	22ff      	movs	r2, #255	; 0xff
 801544e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8015450:	4b09      	ldr	r3, [pc, #36]	; (8015478 <MX_RTC_Init+0x44>)
 8015452:	2200      	movs	r2, #0
 8015454:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015456:	4b08      	ldr	r3, [pc, #32]	; (8015478 <MX_RTC_Init+0x44>)
 8015458:	2200      	movs	r2, #0
 801545a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801545c:	4b06      	ldr	r3, [pc, #24]	; (8015478 <MX_RTC_Init+0x44>)
 801545e:	2200      	movs	r2, #0
 8015460:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8015462:	4805      	ldr	r0, [pc, #20]	; (8015478 <MX_RTC_Init+0x44>)
 8015464:	f7f5 f800 	bl	800a468 <HAL_RTC_Init>
 8015468:	4603      	mov	r3, r0
 801546a:	2b00      	cmp	r3, #0
 801546c:	d001      	beq.n	8015472 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 801546e:	f000 fb1d 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8015472:	bf00      	nop
 8015474:	bd80      	pop	{r7, pc}
 8015476:	bf00      	nop
 8015478:	20008e0c 	.word	0x20008e0c
 801547c:	40002800 	.word	0x40002800

08015480 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8015480:	b480      	push	{r7}
 8015482:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8015484:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 8015486:	4a0d      	ldr	r2, [pc, #52]	; (80154bc <MX_SDIO_SD_Init+0x3c>)
 8015488:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 801548a:	4b0b      	ldr	r3, [pc, #44]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 801548c:	2200      	movs	r2, #0
 801548e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8015490:	4b09      	ldr	r3, [pc, #36]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 8015492:	2200      	movs	r2, #0
 8015494:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8015496:	4b08      	ldr	r3, [pc, #32]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 8015498:	2200      	movs	r2, #0
 801549a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 801549c:	4b06      	ldr	r3, [pc, #24]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 801549e:	2200      	movs	r2, #0
 80154a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80154a2:	4b05      	ldr	r3, [pc, #20]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 80154a4:	2200      	movs	r2, #0
 80154a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80154a8:	4b03      	ldr	r3, [pc, #12]	; (80154b8 <MX_SDIO_SD_Init+0x38>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80154ae:	bf00      	nop
 80154b0:	46bd      	mov	sp, r7
 80154b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b6:	4770      	bx	lr
 80154b8:	20008e8c 	.word	0x20008e8c
 80154bc:	40012c00 	.word	0x40012c00

080154c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80154c4:	4b17      	ldr	r3, [pc, #92]	; (8015524 <MX_SPI1_Init+0x64>)
 80154c6:	4a18      	ldr	r2, [pc, #96]	; (8015528 <MX_SPI1_Init+0x68>)
 80154c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80154ca:	4b16      	ldr	r3, [pc, #88]	; (8015524 <MX_SPI1_Init+0x64>)
 80154cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80154d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80154d2:	4b14      	ldr	r3, [pc, #80]	; (8015524 <MX_SPI1_Init+0x64>)
 80154d4:	2200      	movs	r2, #0
 80154d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80154d8:	4b12      	ldr	r3, [pc, #72]	; (8015524 <MX_SPI1_Init+0x64>)
 80154da:	2200      	movs	r2, #0
 80154dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80154de:	4b11      	ldr	r3, [pc, #68]	; (8015524 <MX_SPI1_Init+0x64>)
 80154e0:	2200      	movs	r2, #0
 80154e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80154e4:	4b0f      	ldr	r3, [pc, #60]	; (8015524 <MX_SPI1_Init+0x64>)
 80154e6:	2200      	movs	r2, #0
 80154e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80154ea:	4b0e      	ldr	r3, [pc, #56]	; (8015524 <MX_SPI1_Init+0x64>)
 80154ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80154f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80154f2:	4b0c      	ldr	r3, [pc, #48]	; (8015524 <MX_SPI1_Init+0x64>)
 80154f4:	2218      	movs	r2, #24
 80154f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80154f8:	4b0a      	ldr	r3, [pc, #40]	; (8015524 <MX_SPI1_Init+0x64>)
 80154fa:	2200      	movs	r2, #0
 80154fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80154fe:	4b09      	ldr	r3, [pc, #36]	; (8015524 <MX_SPI1_Init+0x64>)
 8015500:	2200      	movs	r2, #0
 8015502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015504:	4b07      	ldr	r3, [pc, #28]	; (8015524 <MX_SPI1_Init+0x64>)
 8015506:	2200      	movs	r2, #0
 8015508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 801550a:	4b06      	ldr	r3, [pc, #24]	; (8015524 <MX_SPI1_Init+0x64>)
 801550c:	220a      	movs	r2, #10
 801550e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8015510:	4804      	ldr	r0, [pc, #16]	; (8015524 <MX_SPI1_Init+0x64>)
 8015512:	f7f6 fc38 	bl	800bd86 <HAL_SPI_Init>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d001      	beq.n	8015520 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 801551c:	f000 fac6 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8015520:	bf00      	nop
 8015522:	bd80      	pop	{r7, pc}
 8015524:	20008f10 	.word	0x20008f10
 8015528:	40013000 	.word	0x40013000

0801552c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b086      	sub	sp, #24
 8015530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8015532:	f107 0308 	add.w	r3, r7, #8
 8015536:	2200      	movs	r2, #0
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	605a      	str	r2, [r3, #4]
 801553c:	609a      	str	r2, [r3, #8]
 801553e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8015540:	463b      	mov	r3, r7
 8015542:	2200      	movs	r2, #0
 8015544:	601a      	str	r2, [r3, #0]
 8015546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8015548:	4b1d      	ldr	r3, [pc, #116]	; (80155c0 <MX_TIM2_Init+0x94>)
 801554a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801554e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8015550:	4b1b      	ldr	r3, [pc, #108]	; (80155c0 <MX_TIM2_Init+0x94>)
 8015552:	2253      	movs	r2, #83	; 0x53
 8015554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015556:	4b1a      	ldr	r3, [pc, #104]	; (80155c0 <MX_TIM2_Init+0x94>)
 8015558:	2200      	movs	r2, #0
 801555a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 801555c:	4b18      	ldr	r3, [pc, #96]	; (80155c0 <MX_TIM2_Init+0x94>)
 801555e:	4a19      	ldr	r2, [pc, #100]	; (80155c4 <MX_TIM2_Init+0x98>)
 8015560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015562:	4b17      	ldr	r3, [pc, #92]	; (80155c0 <MX_TIM2_Init+0x94>)
 8015564:	2200      	movs	r2, #0
 8015566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015568:	4b15      	ldr	r3, [pc, #84]	; (80155c0 <MX_TIM2_Init+0x94>)
 801556a:	2200      	movs	r2, #0
 801556c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801556e:	4814      	ldr	r0, [pc, #80]	; (80155c0 <MX_TIM2_Init+0x94>)
 8015570:	f7f6 fffe 	bl	800c570 <HAL_TIM_Base_Init>
 8015574:	4603      	mov	r3, r0
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 801557a:	f000 fa97 	bl	8015aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801557e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8015584:	f107 0308 	add.w	r3, r7, #8
 8015588:	4619      	mov	r1, r3
 801558a:	480d      	ldr	r0, [pc, #52]	; (80155c0 <MX_TIM2_Init+0x94>)
 801558c:	f7f7 f9d0 	bl	800c930 <HAL_TIM_ConfigClockSource>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d001      	beq.n	801559a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8015596:	f000 fa89 	bl	8015aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801559a:	2300      	movs	r3, #0
 801559c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801559e:	2300      	movs	r3, #0
 80155a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80155a2:	463b      	mov	r3, r7
 80155a4:	4619      	mov	r1, r3
 80155a6:	4806      	ldr	r0, [pc, #24]	; (80155c0 <MX_TIM2_Init+0x94>)
 80155a8:	f7f7 fd89 	bl	800d0be <HAL_TIMEx_MasterConfigSynchronization>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d001      	beq.n	80155b6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80155b2:	f000 fa7b 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80155b6:	bf00      	nop
 80155b8:	3718      	adds	r7, #24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	20008f68 	.word	0x20008f68
 80155c4:	fa56ea00 	.word	0xfa56ea00

080155c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b08e      	sub	sp, #56	; 0x38
 80155cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80155ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80155d2:	2200      	movs	r2, #0
 80155d4:	601a      	str	r2, [r3, #0]
 80155d6:	605a      	str	r2, [r3, #4]
 80155d8:	609a      	str	r2, [r3, #8]
 80155da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80155dc:	f107 0320 	add.w	r3, r7, #32
 80155e0:	2200      	movs	r2, #0
 80155e2:	601a      	str	r2, [r3, #0]
 80155e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80155e6:	1d3b      	adds	r3, r7, #4
 80155e8:	2200      	movs	r2, #0
 80155ea:	601a      	str	r2, [r3, #0]
 80155ec:	605a      	str	r2, [r3, #4]
 80155ee:	609a      	str	r2, [r3, #8]
 80155f0:	60da      	str	r2, [r3, #12]
 80155f2:	611a      	str	r2, [r3, #16]
 80155f4:	615a      	str	r2, [r3, #20]
 80155f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80155f8:	4b32      	ldr	r3, [pc, #200]	; (80156c4 <MX_TIM3_Init+0xfc>)
 80155fa:	4a33      	ldr	r2, [pc, #204]	; (80156c8 <MX_TIM3_Init+0x100>)
 80155fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80155fe:	4b31      	ldr	r3, [pc, #196]	; (80156c4 <MX_TIM3_Init+0xfc>)
 8015600:	22a7      	movs	r2, #167	; 0xa7
 8015602:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015604:	4b2f      	ldr	r3, [pc, #188]	; (80156c4 <MX_TIM3_Init+0xfc>)
 8015606:	2200      	movs	r2, #0
 8015608:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 801560a:	4b2e      	ldr	r3, [pc, #184]	; (80156c4 <MX_TIM3_Init+0xfc>)
 801560c:	f242 7210 	movw	r2, #10000	; 0x2710
 8015610:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015612:	4b2c      	ldr	r3, [pc, #176]	; (80156c4 <MX_TIM3_Init+0xfc>)
 8015614:	2200      	movs	r2, #0
 8015616:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015618:	4b2a      	ldr	r3, [pc, #168]	; (80156c4 <MX_TIM3_Init+0xfc>)
 801561a:	2200      	movs	r2, #0
 801561c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801561e:	4829      	ldr	r0, [pc, #164]	; (80156c4 <MX_TIM3_Init+0xfc>)
 8015620:	f7f6 ffa6 	bl	800c570 <HAL_TIM_Base_Init>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d001      	beq.n	801562e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 801562a:	f000 fa3f 	bl	8015aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801562e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015632:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8015634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015638:	4619      	mov	r1, r3
 801563a:	4822      	ldr	r0, [pc, #136]	; (80156c4 <MX_TIM3_Init+0xfc>)
 801563c:	f7f7 f978 	bl	800c930 <HAL_TIM_ConfigClockSource>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d001      	beq.n	801564a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8015646:	f000 fa31 	bl	8015aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801564a:	481e      	ldr	r0, [pc, #120]	; (80156c4 <MX_TIM3_Init+0xfc>)
 801564c:	f7f6 ffdf 	bl	800c60e <HAL_TIM_PWM_Init>
 8015650:	4603      	mov	r3, r0
 8015652:	2b00      	cmp	r3, #0
 8015654:	d001      	beq.n	801565a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8015656:	f000 fa29 	bl	8015aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801565a:	2300      	movs	r3, #0
 801565c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801565e:	2300      	movs	r3, #0
 8015660:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8015662:	f107 0320 	add.w	r3, r7, #32
 8015666:	4619      	mov	r1, r3
 8015668:	4816      	ldr	r0, [pc, #88]	; (80156c4 <MX_TIM3_Init+0xfc>)
 801566a:	f7f7 fd28 	bl	800d0be <HAL_TIMEx_MasterConfigSynchronization>
 801566e:	4603      	mov	r3, r0
 8015670:	2b00      	cmp	r3, #0
 8015672:	d001      	beq.n	8015678 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8015674:	f000 fa1a 	bl	8015aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8015678:	2360      	movs	r3, #96	; 0x60
 801567a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 801567c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015680:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015682:	2300      	movs	r3, #0
 8015684:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8015686:	2300      	movs	r3, #0
 8015688:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801568a:	1d3b      	adds	r3, r7, #4
 801568c:	2208      	movs	r2, #8
 801568e:	4619      	mov	r1, r3
 8015690:	480c      	ldr	r0, [pc, #48]	; (80156c4 <MX_TIM3_Init+0xfc>)
 8015692:	f7f7 f887 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 8015696:	4603      	mov	r3, r0
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 801569c:	f000 fa06 	bl	8015aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80156a0:	1d3b      	adds	r3, r7, #4
 80156a2:	220c      	movs	r2, #12
 80156a4:	4619      	mov	r1, r3
 80156a6:	4807      	ldr	r0, [pc, #28]	; (80156c4 <MX_TIM3_Init+0xfc>)
 80156a8:	f7f7 f87c 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80156b2:	f000 f9fb 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80156b6:	4803      	ldr	r0, [pc, #12]	; (80156c4 <MX_TIM3_Init+0xfc>)
 80156b8:	f000 fe3e 	bl	8016338 <HAL_TIM_MspPostInit>

}
 80156bc:	bf00      	nop
 80156be:	3738      	adds	r7, #56	; 0x38
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	20008dcc 	.word	0x20008dcc
 80156c8:	40000400 	.word	0x40000400

080156cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08e      	sub	sp, #56	; 0x38
 80156d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80156d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80156d6:	2200      	movs	r2, #0
 80156d8:	601a      	str	r2, [r3, #0]
 80156da:	605a      	str	r2, [r3, #4]
 80156dc:	609a      	str	r2, [r3, #8]
 80156de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80156e0:	f107 0320 	add.w	r3, r7, #32
 80156e4:	2200      	movs	r2, #0
 80156e6:	601a      	str	r2, [r3, #0]
 80156e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80156ea:	1d3b      	adds	r3, r7, #4
 80156ec:	2200      	movs	r2, #0
 80156ee:	601a      	str	r2, [r3, #0]
 80156f0:	605a      	str	r2, [r3, #4]
 80156f2:	609a      	str	r2, [r3, #8]
 80156f4:	60da      	str	r2, [r3, #12]
 80156f6:	611a      	str	r2, [r3, #16]
 80156f8:	615a      	str	r2, [r3, #20]
 80156fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80156fc:	4b33      	ldr	r3, [pc, #204]	; (80157cc <MX_TIM5_Init+0x100>)
 80156fe:	4a34      	ldr	r2, [pc, #208]	; (80157d0 <MX_TIM5_Init+0x104>)
 8015700:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 8015702:	4b32      	ldr	r3, [pc, #200]	; (80157cc <MX_TIM5_Init+0x100>)
 8015704:	2201      	movs	r2, #1
 8015706:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015708:	4b30      	ldr	r3, [pc, #192]	; (80157cc <MX_TIM5_Init+0x100>)
 801570a:	2200      	movs	r2, #0
 801570c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 801570e:	4b2f      	ldr	r3, [pc, #188]	; (80157cc <MX_TIM5_Init+0x100>)
 8015710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015714:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015716:	4b2d      	ldr	r3, [pc, #180]	; (80157cc <MX_TIM5_Init+0x100>)
 8015718:	2200      	movs	r2, #0
 801571a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801571c:	4b2b      	ldr	r3, [pc, #172]	; (80157cc <MX_TIM5_Init+0x100>)
 801571e:	2200      	movs	r2, #0
 8015720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8015722:	482a      	ldr	r0, [pc, #168]	; (80157cc <MX_TIM5_Init+0x100>)
 8015724:	f7f6 ff24 	bl	800c570 <HAL_TIM_Base_Init>
 8015728:	4603      	mov	r3, r0
 801572a:	2b00      	cmp	r3, #0
 801572c:	d001      	beq.n	8015732 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801572e:	f000 f9bd 	bl	8015aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015736:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8015738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801573c:	4619      	mov	r1, r3
 801573e:	4823      	ldr	r0, [pc, #140]	; (80157cc <MX_TIM5_Init+0x100>)
 8015740:	f7f7 f8f6 	bl	800c930 <HAL_TIM_ConfigClockSource>
 8015744:	4603      	mov	r3, r0
 8015746:	2b00      	cmp	r3, #0
 8015748:	d001      	beq.n	801574e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 801574a:	f000 f9af 	bl	8015aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 801574e:	481f      	ldr	r0, [pc, #124]	; (80157cc <MX_TIM5_Init+0x100>)
 8015750:	f7f6 ff5d 	bl	800c60e <HAL_TIM_PWM_Init>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 801575a:	f000 f9a7 	bl	8015aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801575e:	2300      	movs	r3, #0
 8015760:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015762:	2300      	movs	r3, #0
 8015764:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8015766:	f107 0320 	add.w	r3, r7, #32
 801576a:	4619      	mov	r1, r3
 801576c:	4817      	ldr	r0, [pc, #92]	; (80157cc <MX_TIM5_Init+0x100>)
 801576e:	f7f7 fca6 	bl	800d0be <HAL_TIMEx_MasterConfigSynchronization>
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8015778:	f000 f998 	bl	8015aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 801577c:	2370      	movs	r3, #112	; 0x70
 801577e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8015780:	2364      	movs	r3, #100	; 0x64
 8015782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8015784:	2300      	movs	r3, #0
 8015786:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8015788:	2300      	movs	r3, #0
 801578a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801578c:	1d3b      	adds	r3, r7, #4
 801578e:	2204      	movs	r2, #4
 8015790:	4619      	mov	r1, r3
 8015792:	480e      	ldr	r0, [pc, #56]	; (80157cc <MX_TIM5_Init+0x100>)
 8015794:	f7f7 f806 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d001      	beq.n	80157a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 801579e:	f000 f985 	bl	8015aac <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80157a2:	2304      	movs	r3, #4
 80157a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80157a6:	1d3b      	adds	r3, r7, #4
 80157a8:	220c      	movs	r2, #12
 80157aa:	4619      	mov	r1, r3
 80157ac:	4807      	ldr	r0, [pc, #28]	; (80157cc <MX_TIM5_Init+0x100>)
 80157ae:	f7f6 fff9 	bl	800c7a4 <HAL_TIM_PWM_ConfigChannel>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d001      	beq.n	80157bc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 80157b8:	f000 f978 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80157bc:	4803      	ldr	r0, [pc, #12]	; (80157cc <MX_TIM5_Init+0x100>)
 80157be:	f000 fdbb 	bl	8016338 <HAL_TIM_MspPostInit>

}
 80157c2:	bf00      	nop
 80157c4:	3738      	adds	r7, #56	; 0x38
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20008d8c 	.word	0x20008d8c
 80157d0:	40000c00 	.word	0x40000c00

080157d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80157d8:	4b11      	ldr	r3, [pc, #68]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157da:	4a12      	ldr	r2, [pc, #72]	; (8015824 <MX_USART3_UART_Init+0x50>)
 80157dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80157de:	4b10      	ldr	r3, [pc, #64]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80157e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80157e6:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157e8:	2200      	movs	r2, #0
 80157ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80157ec:	4b0c      	ldr	r3, [pc, #48]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157ee:	2200      	movs	r2, #0
 80157f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80157f2:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157f4:	2200      	movs	r2, #0
 80157f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80157f8:	4b09      	ldr	r3, [pc, #36]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 80157fa:	220c      	movs	r2, #12
 80157fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80157fe:	4b08      	ldr	r3, [pc, #32]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 8015800:	2200      	movs	r2, #0
 8015802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8015804:	4b06      	ldr	r3, [pc, #24]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 8015806:	2200      	movs	r2, #0
 8015808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801580a:	4805      	ldr	r0, [pc, #20]	; (8015820 <MX_USART3_UART_Init+0x4c>)
 801580c:	f7f7 fc9c 	bl	800d148 <HAL_UART_Init>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	d001      	beq.n	801581a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8015816:	f000 f949 	bl	8015aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801581a:	bf00      	nop
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	20008cf8 	.word	0x20008cf8
 8015824:	40004800 	.word	0x40004800

08015828 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801582e:	2300      	movs	r3, #0
 8015830:	607b      	str	r3, [r7, #4]
 8015832:	4b10      	ldr	r3, [pc, #64]	; (8015874 <MX_DMA_Init+0x4c>)
 8015834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015836:	4a0f      	ldr	r2, [pc, #60]	; (8015874 <MX_DMA_Init+0x4c>)
 8015838:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801583c:	6313      	str	r3, [r2, #48]	; 0x30
 801583e:	4b0d      	ldr	r3, [pc, #52]	; (8015874 <MX_DMA_Init+0x4c>)
 8015840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015846:	607b      	str	r3, [r7, #4]
 8015848:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 801584a:	2200      	movs	r2, #0
 801584c:	2100      	movs	r1, #0
 801584e:	203b      	movs	r0, #59	; 0x3b
 8015850:	f7f1 fa5f 	bl	8006d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8015854:	203b      	movs	r0, #59	; 0x3b
 8015856:	f7f1 fa78 	bl	8006d4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 801585a:	2200      	movs	r2, #0
 801585c:	2100      	movs	r1, #0
 801585e:	2045      	movs	r0, #69	; 0x45
 8015860:	f7f1 fa57 	bl	8006d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8015864:	2045      	movs	r0, #69	; 0x45
 8015866:	f7f1 fa70 	bl	8006d4a <HAL_NVIC_EnableIRQ>

}
 801586a:	bf00      	nop
 801586c:	3708      	adds	r7, #8
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	40023800 	.word	0x40023800

08015878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08a      	sub	sp, #40	; 0x28
 801587c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801587e:	f107 0314 	add.w	r3, r7, #20
 8015882:	2200      	movs	r2, #0
 8015884:	601a      	str	r2, [r3, #0]
 8015886:	605a      	str	r2, [r3, #4]
 8015888:	609a      	str	r2, [r3, #8]
 801588a:	60da      	str	r2, [r3, #12]
 801588c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801588e:	2300      	movs	r3, #0
 8015890:	613b      	str	r3, [r7, #16]
 8015892:	4b63      	ldr	r3, [pc, #396]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 8015894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015896:	4a62      	ldr	r2, [pc, #392]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 8015898:	f043 0304 	orr.w	r3, r3, #4
 801589c:	6313      	str	r3, [r2, #48]	; 0x30
 801589e:	4b60      	ldr	r3, [pc, #384]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158a2:	f003 0304 	and.w	r3, r3, #4
 80158a6:	613b      	str	r3, [r7, #16]
 80158a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80158aa:	2300      	movs	r3, #0
 80158ac:	60fb      	str	r3, [r7, #12]
 80158ae:	4b5c      	ldr	r3, [pc, #368]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158b2:	4a5b      	ldr	r2, [pc, #364]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158b8:	6313      	str	r3, [r2, #48]	; 0x30
 80158ba:	4b59      	ldr	r3, [pc, #356]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158c2:	60fb      	str	r3, [r7, #12]
 80158c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80158c6:	2300      	movs	r3, #0
 80158c8:	60bb      	str	r3, [r7, #8]
 80158ca:	4b55      	ldr	r3, [pc, #340]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158ce:	4a54      	ldr	r2, [pc, #336]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158d0:	f043 0301 	orr.w	r3, r3, #1
 80158d4:	6313      	str	r3, [r2, #48]	; 0x30
 80158d6:	4b52      	ldr	r3, [pc, #328]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158da:	f003 0301 	and.w	r3, r3, #1
 80158de:	60bb      	str	r3, [r7, #8]
 80158e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80158e2:	2300      	movs	r3, #0
 80158e4:	607b      	str	r3, [r7, #4]
 80158e6:	4b4e      	ldr	r3, [pc, #312]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158ea:	4a4d      	ldr	r2, [pc, #308]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158ec:	f043 0302 	orr.w	r3, r3, #2
 80158f0:	6313      	str	r3, [r2, #48]	; 0x30
 80158f2:	4b4b      	ldr	r3, [pc, #300]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 80158f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158f6:	f003 0302 	and.w	r3, r3, #2
 80158fa:	607b      	str	r3, [r7, #4]
 80158fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80158fe:	2300      	movs	r3, #0
 8015900:	603b      	str	r3, [r7, #0]
 8015902:	4b47      	ldr	r3, [pc, #284]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 8015904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015906:	4a46      	ldr	r2, [pc, #280]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 8015908:	f043 0308 	orr.w	r3, r3, #8
 801590c:	6313      	str	r3, [r2, #48]	; 0x30
 801590e:	4b44      	ldr	r3, [pc, #272]	; (8015a20 <MX_GPIO_Init+0x1a8>)
 8015910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015912:	f003 0308 	and.w	r3, r3, #8
 8015916:	603b      	str	r3, [r7, #0]
 8015918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 801591a:	2200      	movs	r2, #0
 801591c:	21ef      	movs	r1, #239	; 0xef
 801591e:	4841      	ldr	r0, [pc, #260]	; (8015a24 <MX_GPIO_Init+0x1ac>)
 8015920:	f7f1 ff78 	bl	8007814 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8015924:	2200      	movs	r2, #0
 8015926:	2115      	movs	r1, #21
 8015928:	483f      	ldr	r0, [pc, #252]	; (8015a28 <MX_GPIO_Init+0x1b0>)
 801592a:	f7f1 ff73 	bl	8007814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 801592e:	2200      	movs	r2, #0
 8015930:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8015934:	483d      	ldr	r0, [pc, #244]	; (8015a2c <MX_GPIO_Init+0x1b4>)
 8015936:	f7f1 ff6d 	bl	8007814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 801593a:	23cf      	movs	r3, #207	; 0xcf
 801593c:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801593e:	2301      	movs	r3, #1
 8015940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015942:	2300      	movs	r3, #0
 8015944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015946:	2300      	movs	r3, #0
 8015948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801594a:	f107 0314 	add.w	r3, r7, #20
 801594e:	4619      	mov	r1, r3
 8015950:	4834      	ldr	r0, [pc, #208]	; (8015a24 <MX_GPIO_Init+0x1ac>)
 8015952:	f7f1 fdad 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 8015956:	2305      	movs	r3, #5
 8015958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801595a:	2301      	movs	r3, #1
 801595c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801595e:	2302      	movs	r3, #2
 8015960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015962:	2300      	movs	r3, #0
 8015964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015966:	f107 0314 	add.w	r3, r7, #20
 801596a:	4619      	mov	r1, r3
 801596c:	482e      	ldr	r0, [pc, #184]	; (8015a28 <MX_GPIO_Init+0x1b0>)
 801596e:	f7f1 fd9f 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8015972:	2310      	movs	r3, #16
 8015974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015976:	2301      	movs	r3, #1
 8015978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801597a:	2300      	movs	r3, #0
 801597c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801597e:	2300      	movs	r3, #0
 8015980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8015982:	f107 0314 	add.w	r3, r7, #20
 8015986:	4619      	mov	r1, r3
 8015988:	4827      	ldr	r0, [pc, #156]	; (8015a28 <MX_GPIO_Init+0x1b0>)
 801598a:	f7f1 fd91 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 801598e:	23c0      	movs	r3, #192	; 0xc0
 8015990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8015992:	4b27      	ldr	r3, [pc, #156]	; (8015a30 <MX_GPIO_Init+0x1b8>)
 8015994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015996:	2300      	movs	r3, #0
 8015998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801599a:	f107 0314 	add.w	r3, r7, #20
 801599e:	4619      	mov	r1, r3
 80159a0:	4821      	ldr	r0, [pc, #132]	; (8015a28 <MX_GPIO_Init+0x1b0>)
 80159a2:	f7f1 fd85 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 80159a6:	2320      	movs	r3, #32
 80159a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80159aa:	2301      	movs	r3, #1
 80159ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80159ae:	2302      	movs	r3, #2
 80159b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159b2:	2300      	movs	r3, #0
 80159b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 80159b6:	f107 0314 	add.w	r3, r7, #20
 80159ba:	4619      	mov	r1, r3
 80159bc:	4819      	ldr	r0, [pc, #100]	; (8015a24 <MX_GPIO_Init+0x1ac>)
 80159be:	f7f1 fd77 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 80159c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80159c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80159c8:	2301      	movs	r3, #1
 80159ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159cc:	2300      	movs	r3, #0
 80159ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159d0:	2300      	movs	r3, #0
 80159d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80159d4:	f107 0314 	add.w	r3, r7, #20
 80159d8:	4619      	mov	r1, r3
 80159da:	4814      	ldr	r0, [pc, #80]	; (8015a2c <MX_GPIO_Init+0x1b4>)
 80159dc:	f7f1 fd68 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 80159e0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80159e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80159e6:	2300      	movs	r3, #0
 80159e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80159ea:	2301      	movs	r3, #1
 80159ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80159ee:	f107 0314 	add.w	r3, r7, #20
 80159f2:	4619      	mov	r1, r3
 80159f4:	480c      	ldr	r0, [pc, #48]	; (8015a28 <MX_GPIO_Init+0x1b0>)
 80159f6:	f7f1 fd5b 	bl	80074b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 80159fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80159fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a00:	2301      	movs	r3, #1
 8015a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015a04:	2302      	movs	r3, #2
 8015a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8015a0c:	f107 0314 	add.w	r3, r7, #20
 8015a10:	4619      	mov	r1, r3
 8015a12:	4806      	ldr	r0, [pc, #24]	; (8015a2c <MX_GPIO_Init+0x1b4>)
 8015a14:	f7f1 fd4c 	bl	80074b0 <HAL_GPIO_Init>

}
 8015a18:	bf00      	nop
 8015a1a:	3728      	adds	r7, #40	; 0x28
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}
 8015a20:	40023800 	.word	0x40023800
 8015a24:	40020800 	.word	0x40020800
 8015a28:	40020000 	.word	0x40020000
 8015a2c:	40020400 	.word	0x40020400
 8015a30:	10110000 	.word	0x10110000

08015a34 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8015a34:	b480      	push	{r7}
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	4b02      	ldr	r3, [pc, #8]	; (8015a44 <Get_I2C1_Instance+0x10>)
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr
 8015a44:	20008d38 	.word	0x20008d38

08015a48 <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 8015a48:	b480      	push	{r7}
 8015a4a:	af00      	add	r7, sp, #0
 8015a4c:	4b02      	ldr	r3, [pc, #8]	; (8015a58 <Get_SPI1_Instance+0x10>)
 8015a4e:	4618      	mov	r0, r3
 8015a50:	46bd      	mov	sp, r7
 8015a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a56:	4770      	bx	lr
 8015a58:	20008f10 	.word	0x20008f10

08015a5c <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8015a5c:	b480      	push	{r7}
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	4b02      	ldr	r3, [pc, #8]	; (8015a6c <Get_UART3_Instance+0x10>)
 8015a62:	4618      	mov	r0, r3
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr
 8015a6c:	20008cf8 	.word	0x20008cf8

08015a70 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8015a70:	b480      	push	{r7}
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	4b02      	ldr	r3, [pc, #8]	; (8015a80 <Get_RTC_Instance+0x10>)
 8015a76:	4618      	mov	r0, r3
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr
 8015a80:	20008e0c 	.word	0x20008e0c

08015a84 <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 8015a84:	b480      	push	{r7}
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	4b02      	ldr	r3, [pc, #8]	; (8015a94 <Get_TIM3_Instance+0x10>)
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr
 8015a94:	20008dcc 	.word	0x20008dcc

08015a98 <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 8015a98:	b480      	push	{r7}
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	4b02      	ldr	r3, [pc, #8]	; (8015aa8 <Get_TIM5_Instance+0x10>)
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa6:	4770      	bx	lr
 8015aa8:	20008d8c 	.word	0x20008d8c

08015aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8015aac:	b480      	push	{r7}
 8015aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8015ab0:	bf00      	nop
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab8:	4770      	bx	lr

08015aba <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8015aba:	b580      	push	{r7, lr}
 8015abc:	b084      	sub	sp, #16
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8015ac2:	f7f1 f81d 	bl	8006b00 <HAL_GetTick>
 8015ac6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015ac8:	e006      	b.n	8015ad8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015aca:	f7fe f8d3 	bl	8013c74 <BSP_SD_GetCardState>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d101      	bne.n	8015ad8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e009      	b.n	8015aec <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015ad8:	f7f1 f812 	bl	8006b00 <HAL_GetTick>
 8015adc:	4602      	mov	r2, r0
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d8f0      	bhi.n	8015aca <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3710      	adds	r7, #16
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	4603      	mov	r3, r0
 8015afc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015afe:	4b0b      	ldr	r3, [pc, #44]	; (8015b2c <SD_CheckStatus+0x38>)
 8015b00:	2201      	movs	r2, #1
 8015b02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015b04:	f7fe f8b6 	bl	8013c74 <BSP_SD_GetCardState>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d107      	bne.n	8015b1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015b0e:	4b07      	ldr	r3, [pc, #28]	; (8015b2c <SD_CheckStatus+0x38>)
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	b2db      	uxtb	r3, r3
 8015b14:	f023 0301 	bic.w	r3, r3, #1
 8015b18:	b2da      	uxtb	r2, r3
 8015b1a:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <SD_CheckStatus+0x38>)
 8015b1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015b1e:	4b03      	ldr	r3, [pc, #12]	; (8015b2c <SD_CheckStatus+0x38>)
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	b2db      	uxtb	r3, r3
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3708      	adds	r7, #8
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	2000016d 	.word	0x2000016d

08015b30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	4603      	mov	r3, r0
 8015b38:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015b3a:	f7fe f841 	bl	8013bc0 <BSP_SD_Init>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d107      	bne.n	8015b54 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015b44:	79fb      	ldrb	r3, [r7, #7]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7ff ffd4 	bl	8015af4 <SD_CheckStatus>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	461a      	mov	r2, r3
 8015b50:	4b04      	ldr	r3, [pc, #16]	; (8015b64 <SD_initialize+0x34>)
 8015b52:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8015b54:	4b03      	ldr	r3, [pc, #12]	; (8015b64 <SD_initialize+0x34>)
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	b2db      	uxtb	r3, r3
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3708      	adds	r7, #8
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	2000016d 	.word	0x2000016d

08015b68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	4603      	mov	r3, r0
 8015b70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015b72:	79fb      	ldrb	r3, [r7, #7]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ff ffbd 	bl	8015af4 <SD_CheckStatus>
 8015b7a:	4603      	mov	r3, r0
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b088      	sub	sp, #32
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	60b9      	str	r1, [r7, #8]
 8015b8c:	607a      	str	r2, [r7, #4]
 8015b8e:	603b      	str	r3, [r7, #0]
 8015b90:	4603      	mov	r3, r0
 8015b92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015b94:	2301      	movs	r3, #1
 8015b96:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015b98:	f247 5030 	movw	r0, #30000	; 0x7530
 8015b9c:	f7ff ff8d 	bl	8015aba <SD_CheckStatusWithTimeout>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	da01      	bge.n	8015baa <SD_read+0x26>
  {
    return res;
 8015ba6:	7ffb      	ldrb	r3, [r7, #31]
 8015ba8:	e08b      	b.n	8015cc2 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	f003 0303 	and.w	r3, r3, #3
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f040 8085 	bne.w	8015cc0 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8015bb6:	683a      	ldr	r2, [r7, #0]
 8015bb8:	6879      	ldr	r1, [r7, #4]
 8015bba:	68b8      	ldr	r0, [r7, #8]
 8015bbc:	f7fe f826 	bl	8013c0c <BSP_SD_ReadBlocks_DMA>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d133      	bne.n	8015c2e <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8015bc6:	4b41      	ldr	r3, [pc, #260]	; (8015ccc <SD_read+0x148>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8015bcc:	f7f0 ff98 	bl	8006b00 <HAL_GetTick>
 8015bd0:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015bd2:	bf00      	nop
 8015bd4:	4b3d      	ldr	r3, [pc, #244]	; (8015ccc <SD_read+0x148>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d108      	bne.n	8015bee <SD_read+0x6a>
 8015bdc:	f7f0 ff90 	bl	8006b00 <HAL_GetTick>
 8015be0:	4602      	mov	r2, r0
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	f247 522f 	movw	r2, #29999	; 0x752f
 8015bea:	4293      	cmp	r3, r2
 8015bec:	d9f2      	bls.n	8015bd4 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8015bee:	4b37      	ldr	r3, [pc, #220]	; (8015ccc <SD_read+0x148>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d102      	bne.n	8015bfc <SD_read+0x78>
      {
        res = RES_ERROR;
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	77fb      	strb	r3, [r7, #31]
 8015bfa:	e061      	b.n	8015cc0 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8015bfc:	4b33      	ldr	r3, [pc, #204]	; (8015ccc <SD_read+0x148>)
 8015bfe:	2200      	movs	r2, #0
 8015c00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015c02:	f7f0 ff7d 	bl	8006b00 <HAL_GetTick>
 8015c06:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015c08:	e007      	b.n	8015c1a <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015c0a:	f7fe f833 	bl	8013c74 <BSP_SD_GetCardState>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d102      	bne.n	8015c1a <SD_read+0x96>
          {
            res = RES_OK;
 8015c14:	2300      	movs	r3, #0
 8015c16:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015c18:	e052      	b.n	8015cc0 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015c1a:	f7f0 ff71 	bl	8006b00 <HAL_GetTick>
 8015c1e:	4602      	mov	r2, r0
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	f247 522f 	movw	r2, #29999	; 0x752f
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d9ee      	bls.n	8015c0a <SD_read+0x86>
 8015c2c:	e048      	b.n	8015cc0 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8015c2e:	2300      	movs	r3, #0
 8015c30:	61bb      	str	r3, [r7, #24]
 8015c32:	e034      	b.n	8015c9e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	1c5a      	adds	r2, r3, #1
 8015c38:	607a      	str	r2, [r7, #4]
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	4824      	ldr	r0, [pc, #144]	; (8015cd0 <SD_read+0x14c>)
 8015c40:	f7fd ffe4 	bl	8013c0c <BSP_SD_ReadBlocks_DMA>
 8015c44:	4603      	mov	r3, r0
 8015c46:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015c48:	7fbb      	ldrb	r3, [r7, #30]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d12c      	bne.n	8015ca8 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8015c4e:	4b1f      	ldr	r3, [pc, #124]	; (8015ccc <SD_read+0x148>)
 8015c50:	2200      	movs	r2, #0
 8015c52:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8015c54:	f7f0 ff54 	bl	8006b00 <HAL_GetTick>
 8015c58:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015c5a:	bf00      	nop
 8015c5c:	4b1b      	ldr	r3, [pc, #108]	; (8015ccc <SD_read+0x148>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d108      	bne.n	8015c76 <SD_read+0xf2>
 8015c64:	f7f0 ff4c 	bl	8006b00 <HAL_GetTick>
 8015c68:	4602      	mov	r2, r0
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	1ad3      	subs	r3, r2, r3
 8015c6e:	f247 522f 	movw	r2, #29999	; 0x752f
 8015c72:	4293      	cmp	r3, r2
 8015c74:	d9f2      	bls.n	8015c5c <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8015c76:	4b15      	ldr	r3, [pc, #84]	; (8015ccc <SD_read+0x148>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d016      	beq.n	8015cac <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	4a13      	ldr	r2, [pc, #76]	; (8015cd0 <SD_read+0x14c>)
 8015c82:	4618      	mov	r0, r3
 8015c84:	4611      	mov	r1, r2
 8015c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	f001 fa60 	bl	8017150 <memcpy>
          buff += BLOCKSIZE;
 8015c90:	68bb      	ldr	r3, [r7, #8]
 8015c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015c96:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	61bb      	str	r3, [r7, #24]
 8015c9e:	69bb      	ldr	r3, [r7, #24]
 8015ca0:	683a      	ldr	r2, [r7, #0]
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d8c6      	bhi.n	8015c34 <SD_read+0xb0>
 8015ca6:	e002      	b.n	8015cae <SD_read+0x12a>
        }
        else
        {
          break;
 8015ca8:	bf00      	nop
 8015caa:	e000      	b.n	8015cae <SD_read+0x12a>
            break;
 8015cac:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8015cae:	69bb      	ldr	r3, [r7, #24]
 8015cb0:	683a      	ldr	r2, [r7, #0]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d104      	bne.n	8015cc0 <SD_read+0x13c>
 8015cb6:	7fbb      	ldrb	r3, [r7, #30]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d101      	bne.n	8015cc0 <SD_read+0x13c>
        res = RES_OK;
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8015cc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3720      	adds	r7, #32
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
 8015cca:	bf00      	nop
 8015ccc:	20000e2c 	.word	0x20000e2c
 8015cd0:	20000c28 	.word	0x20000c28

08015cd4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b088      	sub	sp, #32
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60b9      	str	r1, [r7, #8]
 8015cdc:	607a      	str	r2, [r7, #4]
 8015cde:	603b      	str	r3, [r7, #0]
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8015ce8:	4b4c      	ldr	r3, [pc, #304]	; (8015e1c <SD_write+0x148>)
 8015cea:	2200      	movs	r2, #0
 8015cec:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015cee:	f247 5030 	movw	r0, #30000	; 0x7530
 8015cf2:	f7ff fee2 	bl	8015aba <SD_CheckStatusWithTimeout>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	da01      	bge.n	8015d00 <SD_write+0x2c>
  {
    return res;
 8015cfc:	7ffb      	ldrb	r3, [r7, #31]
 8015cfe:	e088      	b.n	8015e12 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	f003 0303 	and.w	r3, r3, #3
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	f040 8082 	bne.w	8015e10 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015d0c:	683a      	ldr	r2, [r7, #0]
 8015d0e:	6879      	ldr	r1, [r7, #4]
 8015d10:	68b8      	ldr	r0, [r7, #8]
 8015d12:	f7fd ff95 	bl	8013c40 <BSP_SD_WriteBlocks_DMA>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d130      	bne.n	8015d7e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015d1c:	f7f0 fef0 	bl	8006b00 <HAL_GetTick>
 8015d20:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015d22:	bf00      	nop
 8015d24:	4b3d      	ldr	r3, [pc, #244]	; (8015e1c <SD_write+0x148>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d108      	bne.n	8015d3e <SD_write+0x6a>
 8015d2c:	f7f0 fee8 	bl	8006b00 <HAL_GetTick>
 8015d30:	4602      	mov	r2, r0
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	f247 522f 	movw	r2, #29999	; 0x752f
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	d9f2      	bls.n	8015d24 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015d3e:	4b37      	ldr	r3, [pc, #220]	; (8015e1c <SD_write+0x148>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d102      	bne.n	8015d4c <SD_write+0x78>
      {
        res = RES_ERROR;
 8015d46:	2301      	movs	r3, #1
 8015d48:	77fb      	strb	r3, [r7, #31]
 8015d4a:	e061      	b.n	8015e10 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8015d4c:	4b33      	ldr	r3, [pc, #204]	; (8015e1c <SD_write+0x148>)
 8015d4e:	2200      	movs	r2, #0
 8015d50:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015d52:	f7f0 fed5 	bl	8006b00 <HAL_GetTick>
 8015d56:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d58:	e007      	b.n	8015d6a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015d5a:	f7fd ff8b 	bl	8013c74 <BSP_SD_GetCardState>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d102      	bne.n	8015d6a <SD_write+0x96>
          {
            res = RES_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	77fb      	strb	r3, [r7, #31]
            break;
 8015d68:	e052      	b.n	8015e10 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015d6a:	f7f0 fec9 	bl	8006b00 <HAL_GetTick>
 8015d6e:	4602      	mov	r2, r0
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	1ad3      	subs	r3, r2, r3
 8015d74:	f247 522f 	movw	r2, #29999	; 0x752f
 8015d78:	4293      	cmp	r3, r2
 8015d7a:	d9ee      	bls.n	8015d5a <SD_write+0x86>
 8015d7c:	e048      	b.n	8015e10 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8015d7e:	2300      	movs	r3, #0
 8015d80:	61bb      	str	r3, [r7, #24]
 8015d82:	e034      	b.n	8015dee <SD_write+0x11a>
      {
        WriteStatus = 0;
 8015d84:	4b25      	ldr	r3, [pc, #148]	; (8015e1c <SD_write+0x148>)
 8015d86:	2200      	movs	r2, #0
 8015d88:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	1c5a      	adds	r2, r3, #1
 8015d8e:	607a      	str	r2, [r7, #4]
 8015d90:	2201      	movs	r2, #1
 8015d92:	4619      	mov	r1, r3
 8015d94:	4822      	ldr	r0, [pc, #136]	; (8015e20 <SD_write+0x14c>)
 8015d96:	f7fd ff53 	bl	8013c40 <BSP_SD_WriteBlocks_DMA>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8015d9e:	7fbb      	ldrb	r3, [r7, #30]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d129      	bne.n	8015df8 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8015da4:	f7f0 feac 	bl	8006b00 <HAL_GetTick>
 8015da8:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015daa:	bf00      	nop
 8015dac:	4b1b      	ldr	r3, [pc, #108]	; (8015e1c <SD_write+0x148>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d108      	bne.n	8015dc6 <SD_write+0xf2>
 8015db4:	f7f0 fea4 	bl	8006b00 <HAL_GetTick>
 8015db8:	4602      	mov	r2, r0
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	1ad3      	subs	r3, r2, r3
 8015dbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8015dc2:	4293      	cmp	r3, r2
 8015dc4:	d9f2      	bls.n	8015dac <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8015dc6:	4b15      	ldr	r3, [pc, #84]	; (8015e1c <SD_write+0x148>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d016      	beq.n	8015dfc <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8015dce:	68bb      	ldr	r3, [r7, #8]
 8015dd0:	4a13      	ldr	r2, [pc, #76]	; (8015e20 <SD_write+0x14c>)
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015dda:	461a      	mov	r2, r3
 8015ddc:	f001 f9b8 	bl	8017150 <memcpy>
          buff += BLOCKSIZE;
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8015de6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8015de8:	69bb      	ldr	r3, [r7, #24]
 8015dea:	3301      	adds	r3, #1
 8015dec:	61bb      	str	r3, [r7, #24]
 8015dee:	69bb      	ldr	r3, [r7, #24]
 8015df0:	683a      	ldr	r2, [r7, #0]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d8c6      	bhi.n	8015d84 <SD_write+0xb0>
 8015df6:	e002      	b.n	8015dfe <SD_write+0x12a>
        }
        else
        {
          break;
 8015df8:	bf00      	nop
 8015dfa:	e000      	b.n	8015dfe <SD_write+0x12a>
            break;
 8015dfc:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8015dfe:	69bb      	ldr	r3, [r7, #24]
 8015e00:	683a      	ldr	r2, [r7, #0]
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d104      	bne.n	8015e10 <SD_write+0x13c>
 8015e06:	7fbb      	ldrb	r3, [r7, #30]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <SD_write+0x13c>
        res = RES_OK;
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8015e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3720      	adds	r7, #32
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20000e28 	.word	0x20000e28
 8015e20:	20000c28 	.word	0x20000c28

08015e24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b08c      	sub	sp, #48	; 0x30
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	603a      	str	r2, [r7, #0]
 8015e2e:	71fb      	strb	r3, [r7, #7]
 8015e30:	460b      	mov	r3, r1
 8015e32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015e34:	2301      	movs	r3, #1
 8015e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8015e3a:	4b25      	ldr	r3, [pc, #148]	; (8015ed0 <SD_ioctl+0xac>)
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	b2db      	uxtb	r3, r3
 8015e40:	f003 0301 	and.w	r3, r3, #1
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d001      	beq.n	8015e4c <SD_ioctl+0x28>
 8015e48:	2303      	movs	r3, #3
 8015e4a:	e03c      	b.n	8015ec6 <SD_ioctl+0xa2>

  switch (cmd)
 8015e4c:	79bb      	ldrb	r3, [r7, #6]
 8015e4e:	2b03      	cmp	r3, #3
 8015e50:	d834      	bhi.n	8015ebc <SD_ioctl+0x98>
 8015e52:	a201      	add	r2, pc, #4	; (adr r2, 8015e58 <SD_ioctl+0x34>)
 8015e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e58:	08015e69 	.word	0x08015e69
 8015e5c:	08015e71 	.word	0x08015e71
 8015e60:	08015e89 	.word	0x08015e89
 8015e64:	08015ea3 	.word	0x08015ea3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e6e:	e028      	b.n	8015ec2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015e70:	f107 030c 	add.w	r3, r7, #12
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7fd ff0d 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8015e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015e80:	2300      	movs	r3, #0
 8015e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015e86:	e01c      	b.n	8015ec2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015e88:	f107 030c 	add.w	r3, r7, #12
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7fd ff01 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015ea0:	e00f      	b.n	8015ec2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015ea2:	f107 030c 	add.w	r3, r7, #12
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7fd fef4 	bl	8013c94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eae:	0a5a      	lsrs	r2, r3, #9
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015eba:	e002      	b.n	8015ec2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015ebc:	2304      	movs	r3, #4
 8015ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3730      	adds	r7, #48	; 0x30
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	2000016d 	.word	0x2000016d

08015ed4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8015ed8:	4b03      	ldr	r3, [pc, #12]	; (8015ee8 <BSP_SD_WriteCpltCallback+0x14>)
 8015eda:	2201      	movs	r2, #1
 8015edc:	601a      	str	r2, [r3, #0]
}
 8015ede:	bf00      	nop
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr
 8015ee8:	20000e28 	.word	0x20000e28

08015eec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015eec:	b480      	push	{r7}
 8015eee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8015ef0:	4b03      	ldr	r3, [pc, #12]	; (8015f00 <BSP_SD_ReadCpltCallback+0x14>)
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	601a      	str	r2, [r3, #0]
}
 8015ef6:	bf00      	nop
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efe:	4770      	bx	lr
 8015f00:	20000e2c 	.word	0x20000e2c

08015f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	607b      	str	r3, [r7, #4]
 8015f0e:	4b10      	ldr	r3, [pc, #64]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f12:	4a0f      	ldr	r2, [pc, #60]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015f18:	6453      	str	r3, [r2, #68]	; 0x44
 8015f1a:	4b0d      	ldr	r3, [pc, #52]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015f22:	607b      	str	r3, [r7, #4]
 8015f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015f26:	2300      	movs	r3, #0
 8015f28:	603b      	str	r3, [r7, #0]
 8015f2a:	4b09      	ldr	r3, [pc, #36]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f2e:	4a08      	ldr	r2, [pc, #32]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f34:	6413      	str	r3, [r2, #64]	; 0x40
 8015f36:	4b06      	ldr	r3, [pc, #24]	; (8015f50 <HAL_MspInit+0x4c>)
 8015f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015f3e:	603b      	str	r3, [r7, #0]
 8015f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015f42:	bf00      	nop
 8015f44:	370c      	adds	r7, #12
 8015f46:	46bd      	mov	sp, r7
 8015f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4c:	4770      	bx	lr
 8015f4e:	bf00      	nop
 8015f50:	40023800 	.word	0x40023800

08015f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b08a      	sub	sp, #40	; 0x28
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015f5c:	f107 0314 	add.w	r3, r7, #20
 8015f60:	2200      	movs	r2, #0
 8015f62:	601a      	str	r2, [r3, #0]
 8015f64:	605a      	str	r2, [r3, #4]
 8015f66:	609a      	str	r2, [r3, #8]
 8015f68:	60da      	str	r2, [r3, #12]
 8015f6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	4a19      	ldr	r2, [pc, #100]	; (8015fd8 <HAL_I2C_MspInit+0x84>)
 8015f72:	4293      	cmp	r3, r2
 8015f74:	d12b      	bne.n	8015fce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015f76:	2300      	movs	r3, #0
 8015f78:	613b      	str	r3, [r7, #16]
 8015f7a:	4b18      	ldr	r3, [pc, #96]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f7e:	4a17      	ldr	r2, [pc, #92]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015f80:	f043 0302 	orr.w	r3, r3, #2
 8015f84:	6313      	str	r3, [r2, #48]	; 0x30
 8015f86:	4b15      	ldr	r3, [pc, #84]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f8a:	f003 0302 	and.w	r3, r3, #2
 8015f8e:	613b      	str	r3, [r7, #16]
 8015f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8015f92:	23c0      	movs	r3, #192	; 0xc0
 8015f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015f96:	2312      	movs	r3, #18
 8015f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f9e:	2303      	movs	r3, #3
 8015fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015fa2:	2304      	movs	r3, #4
 8015fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015fa6:	f107 0314 	add.w	r3, r7, #20
 8015faa:	4619      	mov	r1, r3
 8015fac:	480c      	ldr	r0, [pc, #48]	; (8015fe0 <HAL_I2C_MspInit+0x8c>)
 8015fae:	f7f1 fa7f 	bl	80074b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	60fb      	str	r3, [r7, #12]
 8015fb6:	4b09      	ldr	r3, [pc, #36]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fba:	4a08      	ldr	r2, [pc, #32]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8015fc2:	4b06      	ldr	r3, [pc, #24]	; (8015fdc <HAL_I2C_MspInit+0x88>)
 8015fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015fca:	60fb      	str	r3, [r7, #12]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8015fce:	bf00      	nop
 8015fd0:	3728      	adds	r7, #40	; 0x28
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	40005400 	.word	0x40005400
 8015fdc:	40023800 	.word	0x40023800
 8015fe0:	40020400 	.word	0x40020400

08015fe4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b083      	sub	sp, #12
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a05      	ldr	r2, [pc, #20]	; (8016008 <HAL_RTC_MspInit+0x24>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	d102      	bne.n	8015ffc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015ff6:	4b05      	ldr	r3, [pc, #20]	; (801600c <HAL_RTC_MspInit+0x28>)
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015ffc:	bf00      	nop
 8015ffe:	370c      	adds	r7, #12
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr
 8016008:	40002800 	.word	0x40002800
 801600c:	42470e3c 	.word	0x42470e3c

08016010 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b08a      	sub	sp, #40	; 0x28
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016018:	f107 0314 	add.w	r3, r7, #20
 801601c:	2200      	movs	r2, #0
 801601e:	601a      	str	r2, [r3, #0]
 8016020:	605a      	str	r2, [r3, #4]
 8016022:	609a      	str	r2, [r3, #8]
 8016024:	60da      	str	r2, [r3, #12]
 8016026:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4a70      	ldr	r2, [pc, #448]	; (80161f0 <HAL_SD_MspInit+0x1e0>)
 801602e:	4293      	cmp	r3, r2
 8016030:	f040 80da 	bne.w	80161e8 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8016034:	2300      	movs	r3, #0
 8016036:	613b      	str	r3, [r7, #16]
 8016038:	4b6e      	ldr	r3, [pc, #440]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 801603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801603c:	4a6d      	ldr	r2, [pc, #436]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 801603e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016042:	6453      	str	r3, [r2, #68]	; 0x44
 8016044:	4b6b      	ldr	r3, [pc, #428]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 8016046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801604c:	613b      	str	r3, [r7, #16]
 801604e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016050:	2300      	movs	r3, #0
 8016052:	60fb      	str	r3, [r7, #12]
 8016054:	4b67      	ldr	r3, [pc, #412]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 8016056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016058:	4a66      	ldr	r2, [pc, #408]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 801605a:	f043 0304 	orr.w	r3, r3, #4
 801605e:	6313      	str	r3, [r2, #48]	; 0x30
 8016060:	4b64      	ldr	r3, [pc, #400]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 8016062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016064:	f003 0304 	and.w	r3, r3, #4
 8016068:	60fb      	str	r3, [r7, #12]
 801606a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801606c:	2300      	movs	r3, #0
 801606e:	60bb      	str	r3, [r7, #8]
 8016070:	4b60      	ldr	r3, [pc, #384]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 8016072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016074:	4a5f      	ldr	r2, [pc, #380]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 8016076:	f043 0308 	orr.w	r3, r3, #8
 801607a:	6313      	str	r3, [r2, #48]	; 0x30
 801607c:	4b5d      	ldr	r3, [pc, #372]	; (80161f4 <HAL_SD_MspInit+0x1e4>)
 801607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016080:	f003 0308 	and.w	r3, r3, #8
 8016084:	60bb      	str	r3, [r7, #8]
 8016086:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8016088:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801608c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801608e:	2302      	movs	r3, #2
 8016090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016092:	2301      	movs	r3, #1
 8016094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016096:	2303      	movs	r3, #3
 8016098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801609a:	230c      	movs	r3, #12
 801609c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801609e:	f107 0314 	add.w	r3, r7, #20
 80160a2:	4619      	mov	r1, r3
 80160a4:	4854      	ldr	r0, [pc, #336]	; (80161f8 <HAL_SD_MspInit+0x1e8>)
 80160a6:	f7f1 fa03 	bl	80074b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80160aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80160ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80160b0:	2302      	movs	r3, #2
 80160b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80160b4:	2300      	movs	r3, #0
 80160b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80160b8:	2303      	movs	r3, #3
 80160ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80160bc:	230c      	movs	r3, #12
 80160be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80160c0:	f107 0314 	add.w	r3, r7, #20
 80160c4:	4619      	mov	r1, r3
 80160c6:	484c      	ldr	r0, [pc, #304]	; (80161f8 <HAL_SD_MspInit+0x1e8>)
 80160c8:	f7f1 f9f2 	bl	80074b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80160cc:	2304      	movs	r3, #4
 80160ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80160d0:	2302      	movs	r3, #2
 80160d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80160d4:	2301      	movs	r3, #1
 80160d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80160d8:	2303      	movs	r3, #3
 80160da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80160dc:	230c      	movs	r3, #12
 80160de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80160e0:	f107 0314 	add.w	r3, r7, #20
 80160e4:	4619      	mov	r1, r3
 80160e6:	4845      	ldr	r0, [pc, #276]	; (80161fc <HAL_SD_MspInit+0x1ec>)
 80160e8:	f7f1 f9e2 	bl	80074b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80160ec:	4b44      	ldr	r3, [pc, #272]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 80160ee:	4a45      	ldr	r2, [pc, #276]	; (8016204 <HAL_SD_MspInit+0x1f4>)
 80160f0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80160f2:	4b43      	ldr	r3, [pc, #268]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 80160f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80160f8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80160fa:	4b41      	ldr	r3, [pc, #260]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 80160fc:	2200      	movs	r2, #0
 80160fe:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016100:	4b3f      	ldr	r3, [pc, #252]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016102:	2200      	movs	r2, #0
 8016104:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8016106:	4b3e      	ldr	r3, [pc, #248]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801610c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801610e:	4b3c      	ldr	r3, [pc, #240]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016114:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016116:	4b3a      	ldr	r3, [pc, #232]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801611c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 801611e:	4b38      	ldr	r3, [pc, #224]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016120:	2220      	movs	r2, #32
 8016122:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016124:	4b36      	ldr	r3, [pc, #216]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016126:	2200      	movs	r2, #0
 8016128:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 801612a:	4b35      	ldr	r3, [pc, #212]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 801612c:	2204      	movs	r2, #4
 801612e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8016130:	4b33      	ldr	r3, [pc, #204]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016132:	2203      	movs	r2, #3
 8016134:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8016136:	4b32      	ldr	r3, [pc, #200]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016138:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801613c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 801613e:	4b30      	ldr	r3, [pc, #192]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016140:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016144:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8016146:	482e      	ldr	r0, [pc, #184]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 8016148:	f7f0 fe1a 	bl	8006d80 <HAL_DMA_Init>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8016152:	f7ff fcab 	bl	8015aac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	4a29      	ldr	r2, [pc, #164]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 801615a:	63da      	str	r2, [r3, #60]	; 0x3c
 801615c:	4a28      	ldr	r2, [pc, #160]	; (8016200 <HAL_SD_MspInit+0x1f0>)
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8016162:	4b29      	ldr	r3, [pc, #164]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 8016164:	4a29      	ldr	r2, [pc, #164]	; (801620c <HAL_SD_MspInit+0x1fc>)
 8016166:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8016168:	4b27      	ldr	r3, [pc, #156]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 801616a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801616e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016170:	4b25      	ldr	r3, [pc, #148]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 8016172:	2240      	movs	r2, #64	; 0x40
 8016174:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016176:	4b24      	ldr	r3, [pc, #144]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 8016178:	2200      	movs	r2, #0
 801617a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 801617c:	4b22      	ldr	r3, [pc, #136]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 801617e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016182:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016184:	4b20      	ldr	r3, [pc, #128]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 8016186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801618a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801618c:	4b1e      	ldr	r3, [pc, #120]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 801618e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016192:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8016194:	4b1c      	ldr	r3, [pc, #112]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 8016196:	2220      	movs	r2, #32
 8016198:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 801619a:	4b1b      	ldr	r3, [pc, #108]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 801619c:	2200      	movs	r2, #0
 801619e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80161a0:	4b19      	ldr	r3, [pc, #100]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161a2:	2204      	movs	r2, #4
 80161a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80161a6:	4b18      	ldr	r3, [pc, #96]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161a8:	2203      	movs	r2, #3
 80161aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80161ac:	4b16      	ldr	r3, [pc, #88]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80161b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80161b4:	4b14      	ldr	r3, [pc, #80]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80161ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80161bc:	4812      	ldr	r0, [pc, #72]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161be:	f7f0 fddf 	bl	8006d80 <HAL_DMA_Init>
 80161c2:	4603      	mov	r3, r0
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d001      	beq.n	80161cc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80161c8:	f7ff fc70 	bl	8015aac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	4a0e      	ldr	r2, [pc, #56]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161d0:	641a      	str	r2, [r3, #64]	; 0x40
 80161d2:	4a0d      	ldr	r2, [pc, #52]	; (8016208 <HAL_SD_MspInit+0x1f8>)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80161d8:	2200      	movs	r2, #0
 80161da:	2100      	movs	r1, #0
 80161dc:	2031      	movs	r0, #49	; 0x31
 80161de:	f7f0 fd98 	bl	8006d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80161e2:	2031      	movs	r0, #49	; 0x31
 80161e4:	f7f0 fdb1 	bl	8006d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80161e8:	bf00      	nop
 80161ea:	3728      	adds	r7, #40	; 0x28
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	40012c00 	.word	0x40012c00
 80161f4:	40023800 	.word	0x40023800
 80161f8:	40020800 	.word	0x40020800
 80161fc:	40020c00 	.word	0x40020c00
 8016200:	20008c98 	.word	0x20008c98
 8016204:	40026458 	.word	0x40026458
 8016208:	20008e2c 	.word	0x20008e2c
 801620c:	400264a0 	.word	0x400264a0

08016210 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b08a      	sub	sp, #40	; 0x28
 8016214:	af00      	add	r7, sp, #0
 8016216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016218:	f107 0314 	add.w	r3, r7, #20
 801621c:	2200      	movs	r2, #0
 801621e:	601a      	str	r2, [r3, #0]
 8016220:	605a      	str	r2, [r3, #4]
 8016222:	609a      	str	r2, [r3, #8]
 8016224:	60da      	str	r2, [r3, #12]
 8016226:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	4a19      	ldr	r2, [pc, #100]	; (8016294 <HAL_SPI_MspInit+0x84>)
 801622e:	4293      	cmp	r3, r2
 8016230:	d12b      	bne.n	801628a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016232:	2300      	movs	r3, #0
 8016234:	613b      	str	r3, [r7, #16]
 8016236:	4b18      	ldr	r3, [pc, #96]	; (8016298 <HAL_SPI_MspInit+0x88>)
 8016238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801623a:	4a17      	ldr	r2, [pc, #92]	; (8016298 <HAL_SPI_MspInit+0x88>)
 801623c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016240:	6453      	str	r3, [r2, #68]	; 0x44
 8016242:	4b15      	ldr	r3, [pc, #84]	; (8016298 <HAL_SPI_MspInit+0x88>)
 8016244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801624a:	613b      	str	r3, [r7, #16]
 801624c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801624e:	2300      	movs	r3, #0
 8016250:	60fb      	str	r3, [r7, #12]
 8016252:	4b11      	ldr	r3, [pc, #68]	; (8016298 <HAL_SPI_MspInit+0x88>)
 8016254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016256:	4a10      	ldr	r2, [pc, #64]	; (8016298 <HAL_SPI_MspInit+0x88>)
 8016258:	f043 0302 	orr.w	r3, r3, #2
 801625c:	6313      	str	r3, [r2, #48]	; 0x30
 801625e:	4b0e      	ldr	r3, [pc, #56]	; (8016298 <HAL_SPI_MspInit+0x88>)
 8016260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016262:	f003 0302 	and.w	r3, r3, #2
 8016266:	60fb      	str	r3, [r7, #12]
 8016268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 801626a:	2338      	movs	r3, #56	; 0x38
 801626c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801626e:	2302      	movs	r3, #2
 8016270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016272:	2300      	movs	r3, #0
 8016274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016276:	2303      	movs	r3, #3
 8016278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801627a:	2305      	movs	r3, #5
 801627c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801627e:	f107 0314 	add.w	r3, r7, #20
 8016282:	4619      	mov	r1, r3
 8016284:	4805      	ldr	r0, [pc, #20]	; (801629c <HAL_SPI_MspInit+0x8c>)
 8016286:	f7f1 f913 	bl	80074b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801628a:	bf00      	nop
 801628c:	3728      	adds	r7, #40	; 0x28
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
 8016292:	bf00      	nop
 8016294:	40013000 	.word	0x40013000
 8016298:	40023800 	.word	0x40023800
 801629c:	40020400 	.word	0x40020400

080162a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b087      	sub	sp, #28
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80162b0:	d10e      	bne.n	80162d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80162b2:	2300      	movs	r3, #0
 80162b4:	617b      	str	r3, [r7, #20]
 80162b6:	4b1d      	ldr	r3, [pc, #116]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ba:	4a1c      	ldr	r2, [pc, #112]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162bc:	f043 0301 	orr.w	r3, r3, #1
 80162c0:	6413      	str	r3, [r2, #64]	; 0x40
 80162c2:	4b1a      	ldr	r3, [pc, #104]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162c6:	f003 0301 	and.w	r3, r3, #1
 80162ca:	617b      	str	r3, [r7, #20]
 80162cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80162ce:	e026      	b.n	801631e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	4a16      	ldr	r2, [pc, #88]	; (8016330 <HAL_TIM_Base_MspInit+0x90>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d10e      	bne.n	80162f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80162da:	2300      	movs	r3, #0
 80162dc:	613b      	str	r3, [r7, #16]
 80162de:	4b13      	ldr	r3, [pc, #76]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162e2:	4a12      	ldr	r2, [pc, #72]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162e4:	f043 0302 	orr.w	r3, r3, #2
 80162e8:	6413      	str	r3, [r2, #64]	; 0x40
 80162ea:	4b10      	ldr	r3, [pc, #64]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 80162ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ee:	f003 0302 	and.w	r3, r3, #2
 80162f2:	613b      	str	r3, [r7, #16]
 80162f4:	693b      	ldr	r3, [r7, #16]
}
 80162f6:	e012      	b.n	801631e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	4a0d      	ldr	r2, [pc, #52]	; (8016334 <HAL_TIM_Base_MspInit+0x94>)
 80162fe:	4293      	cmp	r3, r2
 8016300:	d10d      	bne.n	801631e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8016302:	2300      	movs	r3, #0
 8016304:	60fb      	str	r3, [r7, #12]
 8016306:	4b09      	ldr	r3, [pc, #36]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 8016308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801630a:	4a08      	ldr	r2, [pc, #32]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 801630c:	f043 0308 	orr.w	r3, r3, #8
 8016310:	6413      	str	r3, [r2, #64]	; 0x40
 8016312:	4b06      	ldr	r3, [pc, #24]	; (801632c <HAL_TIM_Base_MspInit+0x8c>)
 8016314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016316:	f003 0308 	and.w	r3, r3, #8
 801631a:	60fb      	str	r3, [r7, #12]
 801631c:	68fb      	ldr	r3, [r7, #12]
}
 801631e:	bf00      	nop
 8016320:	371c      	adds	r7, #28
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
 801632a:	bf00      	nop
 801632c:	40023800 	.word	0x40023800
 8016330:	40000400 	.word	0x40000400
 8016334:	40000c00 	.word	0x40000c00

08016338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b08a      	sub	sp, #40	; 0x28
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016340:	f107 0314 	add.w	r3, r7, #20
 8016344:	2200      	movs	r2, #0
 8016346:	601a      	str	r2, [r3, #0]
 8016348:	605a      	str	r2, [r3, #4]
 801634a:	609a      	str	r2, [r3, #8]
 801634c:	60da      	str	r2, [r3, #12]
 801634e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4a24      	ldr	r2, [pc, #144]	; (80163e8 <HAL_TIM_MspPostInit+0xb0>)
 8016356:	4293      	cmp	r3, r2
 8016358:	d11e      	bne.n	8016398 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801635a:	2300      	movs	r3, #0
 801635c:	613b      	str	r3, [r7, #16]
 801635e:	4b23      	ldr	r3, [pc, #140]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 8016360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016362:	4a22      	ldr	r2, [pc, #136]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 8016364:	f043 0302 	orr.w	r3, r3, #2
 8016368:	6313      	str	r3, [r2, #48]	; 0x30
 801636a:	4b20      	ldr	r3, [pc, #128]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 801636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801636e:	f003 0302 	and.w	r3, r3, #2
 8016372:	613b      	str	r3, [r7, #16]
 8016374:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 8016376:	2303      	movs	r3, #3
 8016378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801637a:	2302      	movs	r3, #2
 801637c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801637e:	2300      	movs	r3, #0
 8016380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016382:	2300      	movs	r3, #0
 8016384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016386:	2302      	movs	r3, #2
 8016388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801638a:	f107 0314 	add.w	r3, r7, #20
 801638e:	4619      	mov	r1, r3
 8016390:	4817      	ldr	r0, [pc, #92]	; (80163f0 <HAL_TIM_MspPostInit+0xb8>)
 8016392:	f7f1 f88d 	bl	80074b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8016396:	e022      	b.n	80163de <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	4a15      	ldr	r2, [pc, #84]	; (80163f4 <HAL_TIM_MspPostInit+0xbc>)
 801639e:	4293      	cmp	r3, r2
 80163a0:	d11d      	bne.n	80163de <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80163a2:	2300      	movs	r3, #0
 80163a4:	60fb      	str	r3, [r7, #12]
 80163a6:	4b11      	ldr	r3, [pc, #68]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 80163a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163aa:	4a10      	ldr	r2, [pc, #64]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 80163ac:	f043 0301 	orr.w	r3, r3, #1
 80163b0:	6313      	str	r3, [r2, #48]	; 0x30
 80163b2:	4b0e      	ldr	r3, [pc, #56]	; (80163ec <HAL_TIM_MspPostInit+0xb4>)
 80163b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163b6:	f003 0301 	and.w	r3, r3, #1
 80163ba:	60fb      	str	r3, [r7, #12]
 80163bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 80163be:	230a      	movs	r3, #10
 80163c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80163c2:	2302      	movs	r3, #2
 80163c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163c6:	2300      	movs	r3, #0
 80163c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80163ca:	2300      	movs	r3, #0
 80163cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80163ce:	2302      	movs	r3, #2
 80163d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80163d2:	f107 0314 	add.w	r3, r7, #20
 80163d6:	4619      	mov	r1, r3
 80163d8:	4807      	ldr	r0, [pc, #28]	; (80163f8 <HAL_TIM_MspPostInit+0xc0>)
 80163da:	f7f1 f869 	bl	80074b0 <HAL_GPIO_Init>
}
 80163de:	bf00      	nop
 80163e0:	3728      	adds	r7, #40	; 0x28
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	40000400 	.word	0x40000400
 80163ec:	40023800 	.word	0x40023800
 80163f0:	40020400 	.word	0x40020400
 80163f4:	40000c00 	.word	0x40000c00
 80163f8:	40020000 	.word	0x40020000

080163fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b08a      	sub	sp, #40	; 0x28
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016404:	f107 0314 	add.w	r3, r7, #20
 8016408:	2200      	movs	r2, #0
 801640a:	601a      	str	r2, [r3, #0]
 801640c:	605a      	str	r2, [r3, #4]
 801640e:	609a      	str	r2, [r3, #8]
 8016410:	60da      	str	r2, [r3, #12]
 8016412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	4a1d      	ldr	r2, [pc, #116]	; (8016490 <HAL_UART_MspInit+0x94>)
 801641a:	4293      	cmp	r3, r2
 801641c:	d134      	bne.n	8016488 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801641e:	2300      	movs	r3, #0
 8016420:	613b      	str	r3, [r7, #16]
 8016422:	4b1c      	ldr	r3, [pc, #112]	; (8016494 <HAL_UART_MspInit+0x98>)
 8016424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016426:	4a1b      	ldr	r2, [pc, #108]	; (8016494 <HAL_UART_MspInit+0x98>)
 8016428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801642c:	6413      	str	r3, [r2, #64]	; 0x40
 801642e:	4b19      	ldr	r3, [pc, #100]	; (8016494 <HAL_UART_MspInit+0x98>)
 8016430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016436:	613b      	str	r3, [r7, #16]
 8016438:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801643a:	2300      	movs	r3, #0
 801643c:	60fb      	str	r3, [r7, #12]
 801643e:	4b15      	ldr	r3, [pc, #84]	; (8016494 <HAL_UART_MspInit+0x98>)
 8016440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016442:	4a14      	ldr	r2, [pc, #80]	; (8016494 <HAL_UART_MspInit+0x98>)
 8016444:	f043 0302 	orr.w	r3, r3, #2
 8016448:	6313      	str	r3, [r2, #48]	; 0x30
 801644a:	4b12      	ldr	r3, [pc, #72]	; (8016494 <HAL_UART_MspInit+0x98>)
 801644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801644e:	f003 0302 	and.w	r3, r3, #2
 8016452:	60fb      	str	r3, [r7, #12]
 8016454:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8016456:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801645a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801645c:	2302      	movs	r3, #2
 801645e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8016460:	2301      	movs	r3, #1
 8016462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016464:	2303      	movs	r3, #3
 8016466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016468:	2307      	movs	r3, #7
 801646a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801646c:	f107 0314 	add.w	r3, r7, #20
 8016470:	4619      	mov	r1, r3
 8016472:	4809      	ldr	r0, [pc, #36]	; (8016498 <HAL_UART_MspInit+0x9c>)
 8016474:	f7f1 f81c 	bl	80074b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8016478:	2200      	movs	r2, #0
 801647a:	2100      	movs	r1, #0
 801647c:	2027      	movs	r0, #39	; 0x27
 801647e:	f7f0 fc48 	bl	8006d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8016482:	2027      	movs	r0, #39	; 0x27
 8016484:	f7f0 fc61 	bl	8006d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8016488:	bf00      	nop
 801648a:	3728      	adds	r7, #40	; 0x28
 801648c:	46bd      	mov	sp, r7
 801648e:	bd80      	pop	{r7, pc}
 8016490:	40004800 	.word	0x40004800
 8016494:	40023800 	.word	0x40023800
 8016498:	40020400 	.word	0x40020400

0801649c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801649c:	b480      	push	{r7}
 801649e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80164a0:	bf00      	nop
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr

080164aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80164aa:	b480      	push	{r7}
 80164ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80164ae:	e7fe      	b.n	80164ae <HardFault_Handler+0x4>

080164b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80164b0:	b480      	push	{r7}
 80164b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80164b4:	e7fe      	b.n	80164b4 <MemManage_Handler+0x4>

080164b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80164b6:	b480      	push	{r7}
 80164b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80164ba:	e7fe      	b.n	80164ba <BusFault_Handler+0x4>

080164bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80164bc:	b480      	push	{r7}
 80164be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80164c0:	e7fe      	b.n	80164c0 <UsageFault_Handler+0x4>

080164c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80164c2:	b480      	push	{r7}
 80164c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80164c6:	bf00      	nop
 80164c8:	46bd      	mov	sp, r7
 80164ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ce:	4770      	bx	lr

080164d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80164d0:	b480      	push	{r7}
 80164d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80164d4:	bf00      	nop
 80164d6:	46bd      	mov	sp, r7
 80164d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164dc:	4770      	bx	lr

080164de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80164de:	b480      	push	{r7}
 80164e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80164e2:	bf00      	nop
 80164e4:	46bd      	mov	sp, r7
 80164e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ea:	4770      	bx	lr

080164ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80164f0:	f7f0 faf2 	bl	8006ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80164f4:	bf00      	nop
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80164fc:	4802      	ldr	r0, [pc, #8]	; (8016508 <USART3_IRQHandler+0x10>)
 80164fe:	f7f6 ff5f 	bl	800d3c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8016502:	bf00      	nop
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	20008cf8 	.word	0x20008cf8

0801650c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8016510:	4802      	ldr	r0, [pc, #8]	; (801651c <SDIO_IRQHandler+0x10>)
 8016512:	f7f4 fb79 	bl	800ac08 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8016516:	bf00      	nop
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	20008e8c 	.word	0x20008e8c

08016520 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8016524:	4802      	ldr	r0, [pc, #8]	; (8016530 <DMA2_Stream3_IRQHandler+0x10>)
 8016526:	f7f0 fd5b 	bl	8006fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801652a:	bf00      	nop
 801652c:	bd80      	pop	{r7, pc}
 801652e:	bf00      	nop
 8016530:	20008c98 	.word	0x20008c98

08016534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8016538:	4802      	ldr	r0, [pc, #8]	; (8016544 <OTG_FS_IRQHandler+0x10>)
 801653a:	f7f2 fa6e 	bl	8008a1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801653e:	bf00      	nop
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	20009fa8 	.word	0x20009fa8

08016548 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 801654c:	4802      	ldr	r0, [pc, #8]	; (8016558 <DMA2_Stream6_IRQHandler+0x10>)
 801654e:	f7f0 fd47 	bl	8006fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8016552:	bf00      	nop
 8016554:	bd80      	pop	{r7, pc}
 8016556:	bf00      	nop
 8016558:	20008e2c 	.word	0x20008e2c

0801655c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8016564:	4b11      	ldr	r3, [pc, #68]	; (80165ac <_sbrk+0x50>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d102      	bne.n	8016572 <_sbrk+0x16>
		heap_end = &end;
 801656c:	4b0f      	ldr	r3, [pc, #60]	; (80165ac <_sbrk+0x50>)
 801656e:	4a10      	ldr	r2, [pc, #64]	; (80165b0 <_sbrk+0x54>)
 8016570:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8016572:	4b0e      	ldr	r3, [pc, #56]	; (80165ac <_sbrk+0x50>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8016578:	4b0c      	ldr	r3, [pc, #48]	; (80165ac <_sbrk+0x50>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	4413      	add	r3, r2
 8016580:	466a      	mov	r2, sp
 8016582:	4293      	cmp	r3, r2
 8016584:	d907      	bls.n	8016596 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8016586:	f000 fda9 	bl	80170dc <__errno>
 801658a:	4602      	mov	r2, r0
 801658c:	230c      	movs	r3, #12
 801658e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8016590:	f04f 33ff 	mov.w	r3, #4294967295
 8016594:	e006      	b.n	80165a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8016596:	4b05      	ldr	r3, [pc, #20]	; (80165ac <_sbrk+0x50>)
 8016598:	681a      	ldr	r2, [r3, #0]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	4413      	add	r3, r2
 801659e:	4a03      	ldr	r2, [pc, #12]	; (80165ac <_sbrk+0x50>)
 80165a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80165a2:	68fb      	ldr	r3, [r7, #12]
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3710      	adds	r7, #16
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd80      	pop	{r7, pc}
 80165ac:	20000e30 	.word	0x20000e30
 80165b0:	2000a5b8 	.word	0x2000a5b8

080165b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80165b4:	b480      	push	{r7}
 80165b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80165b8:	4b16      	ldr	r3, [pc, #88]	; (8016614 <SystemInit+0x60>)
 80165ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80165be:	4a15      	ldr	r2, [pc, #84]	; (8016614 <SystemInit+0x60>)
 80165c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80165c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80165c8:	4b13      	ldr	r3, [pc, #76]	; (8016618 <SystemInit+0x64>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	4a12      	ldr	r2, [pc, #72]	; (8016618 <SystemInit+0x64>)
 80165ce:	f043 0301 	orr.w	r3, r3, #1
 80165d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80165d4:	4b10      	ldr	r3, [pc, #64]	; (8016618 <SystemInit+0x64>)
 80165d6:	2200      	movs	r2, #0
 80165d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80165da:	4b0f      	ldr	r3, [pc, #60]	; (8016618 <SystemInit+0x64>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4a0e      	ldr	r2, [pc, #56]	; (8016618 <SystemInit+0x64>)
 80165e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80165e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80165e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80165ea:	4b0b      	ldr	r3, [pc, #44]	; (8016618 <SystemInit+0x64>)
 80165ec:	4a0b      	ldr	r2, [pc, #44]	; (801661c <SystemInit+0x68>)
 80165ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80165f0:	4b09      	ldr	r3, [pc, #36]	; (8016618 <SystemInit+0x64>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	4a08      	ldr	r2, [pc, #32]	; (8016618 <SystemInit+0x64>)
 80165f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80165fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80165fc:	4b06      	ldr	r3, [pc, #24]	; (8016618 <SystemInit+0x64>)
 80165fe:	2200      	movs	r2, #0
 8016600:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016602:	4b04      	ldr	r3, [pc, #16]	; (8016614 <SystemInit+0x60>)
 8016604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016608:	609a      	str	r2, [r3, #8]
#endif
}
 801660a:	bf00      	nop
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr
 8016614:	e000ed00 	.word	0xe000ed00
 8016618:	40023800 	.word	0x40023800
 801661c:	24003010 	.word	0x24003010

08016620 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016624:	2200      	movs	r2, #0
 8016626:	4912      	ldr	r1, [pc, #72]	; (8016670 <MX_USB_DEVICE_Init+0x50>)
 8016628:	4812      	ldr	r0, [pc, #72]	; (8016674 <MX_USB_DEVICE_Init+0x54>)
 801662a:	f7f9 fe7f 	bl	801032c <USBD_Init>
 801662e:	4603      	mov	r3, r0
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016634:	f7ff fa3a 	bl	8015aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016638:	490f      	ldr	r1, [pc, #60]	; (8016678 <MX_USB_DEVICE_Init+0x58>)
 801663a:	480e      	ldr	r0, [pc, #56]	; (8016674 <MX_USB_DEVICE_Init+0x54>)
 801663c:	f7f9 fea1 	bl	8010382 <USBD_RegisterClass>
 8016640:	4603      	mov	r3, r0
 8016642:	2b00      	cmp	r3, #0
 8016644:	d001      	beq.n	801664a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016646:	f7ff fa31 	bl	8015aac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801664a:	490c      	ldr	r1, [pc, #48]	; (801667c <MX_USB_DEVICE_Init+0x5c>)
 801664c:	4809      	ldr	r0, [pc, #36]	; (8016674 <MX_USB_DEVICE_Init+0x54>)
 801664e:	f7f9 fdcf 	bl	80101f0 <USBD_CDC_RegisterInterface>
 8016652:	4603      	mov	r3, r0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d001      	beq.n	801665c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016658:	f7ff fa28 	bl	8015aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801665c:	4805      	ldr	r0, [pc, #20]	; (8016674 <MX_USB_DEVICE_Init+0x54>)
 801665e:	f7f9 feaa 	bl	80103b6 <USBD_Start>
 8016662:	4603      	mov	r3, r0
 8016664:	2b00      	cmp	r3, #0
 8016666:	d001      	beq.n	801666c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016668:	f7ff fa20 	bl	8015aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801666c:	bf00      	nop
 801666e:	bd80      	pop	{r7, pc}
 8016670:	20000184 	.word	0x20000184
 8016674:	20000e3c 	.word	0x20000e3c
 8016678:	20000018 	.word	0x20000018
 801667c:	20000174 	.word	0x20000174

08016680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016684:	2200      	movs	r2, #0
 8016686:	4905      	ldr	r1, [pc, #20]	; (801669c <CDC_Init_FS+0x1c>)
 8016688:	4805      	ldr	r0, [pc, #20]	; (80166a0 <CDC_Init_FS+0x20>)
 801668a:	f7f9 fdc8 	bl	801021e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801668e:	4905      	ldr	r1, [pc, #20]	; (80166a4 <CDC_Init_FS+0x24>)
 8016690:	4803      	ldr	r0, [pc, #12]	; (80166a0 <CDC_Init_FS+0x20>)
 8016692:	f7f9 fdde 	bl	8010252 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016696:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016698:	4618      	mov	r0, r3
 801669a:	bd80      	pop	{r7, pc}
 801669c:	200097a8 	.word	0x200097a8
 80166a0:	20000e3c 	.word	0x20000e3c
 80166a4:	20008fa8 	.word	0x20008fa8

080166a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80166a8:	b480      	push	{r7}
 80166aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80166ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr

080166b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166b8:	b480      	push	{r7}
 80166ba:	b085      	sub	sp, #20
 80166bc:	af00      	add	r7, sp, #0
 80166be:	4603      	mov	r3, r0
 80166c0:	6039      	str	r1, [r7, #0]
 80166c2:	71fb      	strb	r3, [r7, #7]
 80166c4:	4613      	mov	r3, r2
 80166c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80166c8:	f107 0308 	add.w	r3, r7, #8
 80166cc:	2200      	movs	r2, #0
 80166ce:	601a      	str	r2, [r3, #0]
 80166d0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80166d4:	79fb      	ldrb	r3, [r7, #7]
 80166d6:	2b23      	cmp	r3, #35	; 0x23
 80166d8:	d87c      	bhi.n	80167d4 <CDC_Control_FS+0x11c>
 80166da:	a201      	add	r2, pc, #4	; (adr r2, 80166e0 <CDC_Control_FS+0x28>)
 80166dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166e0:	080167d5 	.word	0x080167d5
 80166e4:	080167d5 	.word	0x080167d5
 80166e8:	080167d5 	.word	0x080167d5
 80166ec:	080167d5 	.word	0x080167d5
 80166f0:	080167d5 	.word	0x080167d5
 80166f4:	080167d5 	.word	0x080167d5
 80166f8:	080167d5 	.word	0x080167d5
 80166fc:	080167d5 	.word	0x080167d5
 8016700:	080167d5 	.word	0x080167d5
 8016704:	080167d5 	.word	0x080167d5
 8016708:	080167d5 	.word	0x080167d5
 801670c:	080167d5 	.word	0x080167d5
 8016710:	080167d5 	.word	0x080167d5
 8016714:	080167d5 	.word	0x080167d5
 8016718:	080167d5 	.word	0x080167d5
 801671c:	080167d5 	.word	0x080167d5
 8016720:	080167d5 	.word	0x080167d5
 8016724:	080167d5 	.word	0x080167d5
 8016728:	080167d5 	.word	0x080167d5
 801672c:	080167d5 	.word	0x080167d5
 8016730:	080167d5 	.word	0x080167d5
 8016734:	080167d5 	.word	0x080167d5
 8016738:	080167d5 	.word	0x080167d5
 801673c:	080167d5 	.word	0x080167d5
 8016740:	080167d5 	.word	0x080167d5
 8016744:	080167d5 	.word	0x080167d5
 8016748:	080167d5 	.word	0x080167d5
 801674c:	080167d5 	.word	0x080167d5
 8016750:	080167d5 	.word	0x080167d5
 8016754:	080167d5 	.word	0x080167d5
 8016758:	080167d5 	.word	0x080167d5
 801675c:	080167d5 	.word	0x080167d5
 8016760:	08016771 	.word	0x08016771
 8016764:	0801679d 	.word	0x0801679d
 8016768:	080167d5 	.word	0x080167d5
 801676c:	080167d5 	.word	0x080167d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	785b      	ldrb	r3, [r3, #1]
 801677a:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	789b      	ldrb	r3, [r3, #2]
 8016780:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	78db      	ldrb	r3, [r3, #3]
 8016786:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	791b      	ldrb	r3, [r3, #4]
 801678c:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	795b      	ldrb	r3, [r3, #5]
 8016792:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	799b      	ldrb	r3, [r3, #6]
 8016798:	73bb      	strb	r3, [r7, #14]
        	break;
 801679a:	e01c      	b.n	80167d6 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 801679c:	7a3a      	ldrb	r2, [r7, #8]
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	3301      	adds	r3, #1
 80167a6:	7a7a      	ldrb	r2, [r7, #9]
 80167a8:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	3302      	adds	r3, #2
 80167ae:	7aba      	ldrb	r2, [r7, #10]
 80167b0:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	3303      	adds	r3, #3
 80167b6:	7afa      	ldrb	r2, [r7, #11]
 80167b8:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	3304      	adds	r3, #4
 80167be:	7b3a      	ldrb	r2, [r7, #12]
 80167c0:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	3305      	adds	r3, #5
 80167c6:	7b7a      	ldrb	r2, [r7, #13]
 80167c8:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	3306      	adds	r3, #6
 80167ce:	7bba      	ldrb	r2, [r7, #14]
 80167d0:	701a      	strb	r2, [r3, #0]
        	break;
 80167d2:	e000      	b.n	80167d6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80167d4:	bf00      	nop
  }

  return (USBD_OK);
 80167d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3714      	adds	r7, #20
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr

080167e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80167ee:	6879      	ldr	r1, [r7, #4]
 80167f0:	4805      	ldr	r0, [pc, #20]	; (8016808 <CDC_Receive_FS+0x24>)
 80167f2:	f7f9 fd2e 	bl	8010252 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80167f6:	4804      	ldr	r0, [pc, #16]	; (8016808 <CDC_Receive_FS+0x24>)
 80167f8:	f7f9 fd6e 	bl	80102d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80167fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	20000e3c 	.word	0x20000e3c

0801680c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	460b      	mov	r3, r1
 8016816:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016818:	2300      	movs	r3, #0
 801681a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801681c:	4b0d      	ldr	r3, [pc, #52]	; (8016854 <CDC_Transmit_FS+0x48>)
 801681e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8016822:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801682a:	2b00      	cmp	r3, #0
 801682c:	d001      	beq.n	8016832 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801682e:	2301      	movs	r3, #1
 8016830:	e00b      	b.n	801684a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016832:	887b      	ldrh	r3, [r7, #2]
 8016834:	461a      	mov	r2, r3
 8016836:	6879      	ldr	r1, [r7, #4]
 8016838:	4806      	ldr	r0, [pc, #24]	; (8016854 <CDC_Transmit_FS+0x48>)
 801683a:	f7f9 fcf0 	bl	801021e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801683e:	4805      	ldr	r0, [pc, #20]	; (8016854 <CDC_Transmit_FS+0x48>)
 8016840:	f7f9 fd1b 	bl	801027a <USBD_CDC_TransmitPacket>
 8016844:	4603      	mov	r3, r0
 8016846:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016848:	7bfb      	ldrb	r3, [r7, #15]
}
 801684a:	4618      	mov	r0, r3
 801684c:	3710      	adds	r7, #16
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
 8016852:	bf00      	nop
 8016854:	20000e3c 	.word	0x20000e3c

08016858 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b08a      	sub	sp, #40	; 0x28
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016860:	f107 0314 	add.w	r3, r7, #20
 8016864:	2200      	movs	r2, #0
 8016866:	601a      	str	r2, [r3, #0]
 8016868:	605a      	str	r2, [r3, #4]
 801686a:	609a      	str	r2, [r3, #8]
 801686c:	60da      	str	r2, [r3, #12]
 801686e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016878:	d13a      	bne.n	80168f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801687a:	2300      	movs	r3, #0
 801687c:	613b      	str	r3, [r7, #16]
 801687e:	4b1e      	ldr	r3, [pc, #120]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 8016880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016882:	4a1d      	ldr	r2, [pc, #116]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 8016884:	f043 0301 	orr.w	r3, r3, #1
 8016888:	6313      	str	r3, [r2, #48]	; 0x30
 801688a:	4b1b      	ldr	r3, [pc, #108]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 801688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688e:	f003 0301 	and.w	r3, r3, #1
 8016892:	613b      	str	r3, [r7, #16]
 8016894:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8016896:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801689a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801689c:	2302      	movs	r3, #2
 801689e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80168a0:	2300      	movs	r3, #0
 80168a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80168a4:	2303      	movs	r3, #3
 80168a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80168a8:	230a      	movs	r3, #10
 80168aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80168ac:	f107 0314 	add.w	r3, r7, #20
 80168b0:	4619      	mov	r1, r3
 80168b2:	4812      	ldr	r0, [pc, #72]	; (80168fc <HAL_PCD_MspInit+0xa4>)
 80168b4:	f7f0 fdfc 	bl	80074b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80168b8:	4b0f      	ldr	r3, [pc, #60]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 80168ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80168bc:	4a0e      	ldr	r2, [pc, #56]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 80168be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168c2:	6353      	str	r3, [r2, #52]	; 0x34
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]
 80168c8:	4b0b      	ldr	r3, [pc, #44]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 80168ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168cc:	4a0a      	ldr	r2, [pc, #40]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 80168ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80168d2:	6453      	str	r3, [r2, #68]	; 0x44
 80168d4:	4b08      	ldr	r3, [pc, #32]	; (80168f8 <HAL_PCD_MspInit+0xa0>)
 80168d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80168e0:	2200      	movs	r2, #0
 80168e2:	2100      	movs	r1, #0
 80168e4:	2043      	movs	r0, #67	; 0x43
 80168e6:	f7f0 fa14 	bl	8006d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80168ea:	2043      	movs	r0, #67	; 0x43
 80168ec:	f7f0 fa2d 	bl	8006d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80168f0:	bf00      	nop
 80168f2:	3728      	adds	r7, #40	; 0x28
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	40023800 	.word	0x40023800
 80168fc:	40020000 	.word	0x40020000

08016900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016914:	4619      	mov	r1, r3
 8016916:	4610      	mov	r0, r2
 8016918:	f7f9 fd96 	bl	8010448 <USBD_LL_SetupStage>
}
 801691c:	bf00      	nop
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	460b      	mov	r3, r1
 801692e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016936:	78fa      	ldrb	r2, [r7, #3]
 8016938:	6879      	ldr	r1, [r7, #4]
 801693a:	4613      	mov	r3, r2
 801693c:	00db      	lsls	r3, r3, #3
 801693e:	1a9b      	subs	r3, r3, r2
 8016940:	009b      	lsls	r3, r3, #2
 8016942:	440b      	add	r3, r1
 8016944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016948:	681a      	ldr	r2, [r3, #0]
 801694a:	78fb      	ldrb	r3, [r7, #3]
 801694c:	4619      	mov	r1, r3
 801694e:	f7f9 fdc6 	bl	80104de <USBD_LL_DataOutStage>
}
 8016952:	bf00      	nop
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b082      	sub	sp, #8
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
 8016962:	460b      	mov	r3, r1
 8016964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801696c:	78fa      	ldrb	r2, [r7, #3]
 801696e:	6879      	ldr	r1, [r7, #4]
 8016970:	4613      	mov	r3, r2
 8016972:	00db      	lsls	r3, r3, #3
 8016974:	1a9b      	subs	r3, r3, r2
 8016976:	009b      	lsls	r3, r3, #2
 8016978:	440b      	add	r3, r1
 801697a:	3348      	adds	r3, #72	; 0x48
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	78fb      	ldrb	r3, [r7, #3]
 8016980:	4619      	mov	r1, r3
 8016982:	f7f9 fe1d 	bl	80105c0 <USBD_LL_DataInStage>
}
 8016986:	bf00      	nop
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801699c:	4618      	mov	r0, r3
 801699e:	f7f9 ff2b 	bl	80107f8 <USBD_LL_SOF>
}
 80169a2:	bf00      	nop
 80169a4:	3708      	adds	r7, #8
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b084      	sub	sp, #16
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80169b2:	2301      	movs	r3, #1
 80169b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	68db      	ldr	r3, [r3, #12]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d102      	bne.n	80169c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80169be:	2300      	movs	r3, #0
 80169c0:	73fb      	strb	r3, [r7, #15]
 80169c2:	e008      	b.n	80169d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	68db      	ldr	r3, [r3, #12]
 80169c8:	2b02      	cmp	r3, #2
 80169ca:	d102      	bne.n	80169d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169cc:	2301      	movs	r3, #1
 80169ce:	73fb      	strb	r3, [r7, #15]
 80169d0:	e001      	b.n	80169d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80169d2:	f7ff f86b 	bl	8015aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169dc:	7bfa      	ldrb	r2, [r7, #15]
 80169de:	4611      	mov	r1, r2
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7f9 fed3 	bl	801078c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f9 fe8c 	bl	801070a <USBD_LL_Reset>
}
 80169f2:	bf00      	nop
 80169f4:	3710      	adds	r7, #16
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}
	...

080169fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b082      	sub	sp, #8
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7f9 fece 	bl	80107ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	6812      	ldr	r2, [r2, #0]
 8016a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a22:	f043 0301 	orr.w	r3, r3, #1
 8016a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6a1b      	ldr	r3, [r3, #32]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d005      	beq.n	8016a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a30:	4b04      	ldr	r3, [pc, #16]	; (8016a44 <HAL_PCD_SuspendCallback+0x48>)
 8016a32:	691b      	ldr	r3, [r3, #16]
 8016a34:	4a03      	ldr	r2, [pc, #12]	; (8016a44 <HAL_PCD_SuspendCallback+0x48>)
 8016a36:	f043 0306 	orr.w	r3, r3, #6
 8016a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a3c:	bf00      	nop
 8016a3e:	3708      	adds	r7, #8
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	e000ed00 	.word	0xe000ed00

08016a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b082      	sub	sp, #8
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a56:	4618      	mov	r0, r3
 8016a58:	f7f9 febd 	bl	80107d6 <USBD_LL_Resume>
}
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	460b      	mov	r3, r1
 8016a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a76:	78fa      	ldrb	r2, [r7, #3]
 8016a78:	4611      	mov	r1, r2
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f9 fee3 	bl	8010846 <USBD_LL_IsoOUTIncomplete>
}
 8016a80:	bf00      	nop
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a9a:	78fa      	ldrb	r2, [r7, #3]
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7f9 fec4 	bl	801082c <USBD_LL_IsoINIncomplete>
}
 8016aa4:	bf00      	nop
 8016aa6:	3708      	adds	r7, #8
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7f9 fed0 	bl	8010860 <USBD_LL_DevConnected>
}
 8016ac0:	bf00      	nop
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7f9 fecd 	bl	8010876 <USBD_LL_DevDisconnected>
}
 8016adc:	bf00      	nop
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d13c      	bne.n	8016b6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016af4:	4a20      	ldr	r2, [pc, #128]	; (8016b78 <USBD_LL_Init+0x94>)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	4a1e      	ldr	r2, [pc, #120]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016b04:	4b1c      	ldr	r3, [pc, #112]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016b0c:	4b1a      	ldr	r3, [pc, #104]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b0e:	2204      	movs	r2, #4
 8016b10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016b12:	4b19      	ldr	r3, [pc, #100]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b14:	2202      	movs	r2, #2
 8016b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016b18:	4b17      	ldr	r3, [pc, #92]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016b1e:	4b16      	ldr	r3, [pc, #88]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b20:	2202      	movs	r2, #2
 8016b22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016b24:	4b14      	ldr	r3, [pc, #80]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b26:	2200      	movs	r2, #0
 8016b28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016b2a:	4b13      	ldr	r3, [pc, #76]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016b30:	4b11      	ldr	r3, [pc, #68]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016b36:	4b10      	ldr	r3, [pc, #64]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016b3c:	4b0e      	ldr	r3, [pc, #56]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b3e:	2200      	movs	r2, #0
 8016b40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016b42:	480d      	ldr	r0, [pc, #52]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b44:	f7f1 fe19 	bl	800877a <HAL_PCD_Init>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d001      	beq.n	8016b52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016b4e:	f7fe ffad 	bl	8015aac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016b52:	2180      	movs	r1, #128	; 0x80
 8016b54:	4808      	ldr	r0, [pc, #32]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b56:	f7f2 ff7e 	bl	8009a56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016b5a:	2240      	movs	r2, #64	; 0x40
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	4806      	ldr	r0, [pc, #24]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b60:	f7f2 ff32 	bl	80099c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016b64:	2280      	movs	r2, #128	; 0x80
 8016b66:	2101      	movs	r1, #1
 8016b68:	4803      	ldr	r0, [pc, #12]	; (8016b78 <USBD_LL_Init+0x94>)
 8016b6a:	f7f2 ff2d 	bl	80099c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016b6e:	2300      	movs	r3, #0
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3708      	adds	r7, #8
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	20009fa8 	.word	0x20009fa8

08016b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b84:	2300      	movs	r3, #0
 8016b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b92:	4618      	mov	r0, r3
 8016b94:	f7f1 ff0e 	bl	80089b4 <HAL_PCD_Start>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8016b9c:	7bfb      	ldrb	r3, [r7, #15]
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f000 f92e 	bl	8016e00 <USBD_Get_USB_Status>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}

08016bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b084      	sub	sp, #16
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	4608      	mov	r0, r1
 8016bbc:	4611      	mov	r1, r2
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	70fb      	strb	r3, [r7, #3]
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	70bb      	strb	r3, [r7, #2]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016bda:	78bb      	ldrb	r3, [r7, #2]
 8016bdc:	883a      	ldrh	r2, [r7, #0]
 8016bde:	78f9      	ldrb	r1, [r7, #3]
 8016be0:	f7f2 fae3 	bl	80091aa <HAL_PCD_EP_Open>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be8:	7bfb      	ldrb	r3, [r7, #15]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f000 f908 	bl	8016e00 <USBD_Get_USB_Status>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	460b      	mov	r3, r1
 8016c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016c18:	78fa      	ldrb	r2, [r7, #3]
 8016c1a:	4611      	mov	r1, r2
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f2 fb2c 	bl	800927a <HAL_PCD_EP_Close>
 8016c22:	4603      	mov	r3, r0
 8016c24:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8016c26:	7bfb      	ldrb	r3, [r7, #15]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f000 f8e9 	bl	8016e00 <USBD_Get_USB_Status>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8016c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3710      	adds	r7, #16
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016c56:	78fa      	ldrb	r2, [r7, #3]
 8016c58:	4611      	mov	r1, r2
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7f2 fc04 	bl	8009468 <HAL_PCD_EP_SetStall>
 8016c60:	4603      	mov	r3, r0
 8016c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c64:	7bfb      	ldrb	r3, [r7, #15]
 8016c66:	4618      	mov	r0, r3
 8016c68:	f000 f8ca 	bl	8016e00 <USBD_Get_USB_Status>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}

08016c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b084      	sub	sp, #16
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	460b      	mov	r3, r1
 8016c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c86:	2300      	movs	r3, #0
 8016c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016c94:	78fa      	ldrb	r2, [r7, #3]
 8016c96:	4611      	mov	r1, r2
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7f2 fc49 	bl	8009530 <HAL_PCD_EP_ClrStall>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8016ca2:	7bfb      	ldrb	r3, [r7, #15]
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f000 f8ab 	bl	8016e00 <USBD_Get_USB_Status>
 8016caa:	4603      	mov	r3, r0
 8016cac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8016cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	3710      	adds	r7, #16
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016cca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	da0b      	bge.n	8016cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016cd4:	78fb      	ldrb	r3, [r7, #3]
 8016cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cda:	68f9      	ldr	r1, [r7, #12]
 8016cdc:	4613      	mov	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	1a9b      	subs	r3, r3, r2
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	440b      	add	r3, r1
 8016ce6:	333e      	adds	r3, #62	; 0x3e
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	e00b      	b.n	8016d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016cec:	78fb      	ldrb	r3, [r7, #3]
 8016cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016cf2:	68f9      	ldr	r1, [r7, #12]
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	00db      	lsls	r3, r3, #3
 8016cf8:	1a9b      	subs	r3, r3, r2
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	440b      	add	r3, r1
 8016cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3714      	adds	r7, #20
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr

08016d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	460b      	mov	r3, r1
 8016d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d20:	2300      	movs	r3, #0
 8016d22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016d2a:	78fa      	ldrb	r2, [r7, #3]
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7f2 fa16 	bl	8009160 <HAL_PCD_SetAddress>
 8016d34:	4603      	mov	r3, r0
 8016d36:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d38:	7bfb      	ldrb	r3, [r7, #15]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f000 f860 	bl	8016e00 <USBD_Get_USB_Status>
 8016d40:	4603      	mov	r3, r0
 8016d42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3710      	adds	r7, #16
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}

08016d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016d4e:	b580      	push	{r7, lr}
 8016d50:	b086      	sub	sp, #24
 8016d52:	af00      	add	r7, sp, #0
 8016d54:	60f8      	str	r0, [r7, #12]
 8016d56:	607a      	str	r2, [r7, #4]
 8016d58:	461a      	mov	r2, r3
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	72fb      	strb	r3, [r7, #11]
 8016d5e:	4613      	mov	r3, r2
 8016d60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d62:	2300      	movs	r3, #0
 8016d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d66:	2300      	movs	r3, #0
 8016d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016d70:	893b      	ldrh	r3, [r7, #8]
 8016d72:	7af9      	ldrb	r1, [r7, #11]
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	f7f2 fb2d 	bl	80093d4 <HAL_PCD_EP_Transmit>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016d7e:	7dfb      	ldrb	r3, [r7, #23]
 8016d80:	4618      	mov	r0, r3
 8016d82:	f000 f83d 	bl	8016e00 <USBD_Get_USB_Status>
 8016d86:	4603      	mov	r3, r0
 8016d88:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3718      	adds	r7, #24
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}

08016d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b086      	sub	sp, #24
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	60f8      	str	r0, [r7, #12]
 8016d9c:	607a      	str	r2, [r7, #4]
 8016d9e:	461a      	mov	r2, r3
 8016da0:	460b      	mov	r3, r1
 8016da2:	72fb      	strb	r3, [r7, #11]
 8016da4:	4613      	mov	r3, r2
 8016da6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dac:	2300      	movs	r3, #0
 8016dae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016db6:	893b      	ldrh	r3, [r7, #8]
 8016db8:	7af9      	ldrb	r1, [r7, #11]
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	f7f2 faa7 	bl	800930e <HAL_PCD_EP_Receive>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016dc4:	7dfb      	ldrb	r3, [r7, #23]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f000 f81a 	bl	8016e00 <USBD_Get_USB_Status>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016dd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3718      	adds	r7, #24
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dda:	b580      	push	{r7, lr}
 8016ddc:	b082      	sub	sp, #8
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
 8016de2:	460b      	mov	r3, r1
 8016de4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016dec:	78fa      	ldrb	r2, [r7, #3]
 8016dee:	4611      	mov	r1, r2
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7f2 fad7 	bl	80093a4 <HAL_PCD_EP_GetRxCount>
 8016df6:	4603      	mov	r3, r0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e00:	b480      	push	{r7}
 8016e02:	b085      	sub	sp, #20
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	4603      	mov	r3, r0
 8016e08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e0e:	79fb      	ldrb	r3, [r7, #7]
 8016e10:	2b03      	cmp	r3, #3
 8016e12:	d817      	bhi.n	8016e44 <USBD_Get_USB_Status+0x44>
 8016e14:	a201      	add	r2, pc, #4	; (adr r2, 8016e1c <USBD_Get_USB_Status+0x1c>)
 8016e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e1a:	bf00      	nop
 8016e1c:	08016e2d 	.word	0x08016e2d
 8016e20:	08016e33 	.word	0x08016e33
 8016e24:	08016e39 	.word	0x08016e39
 8016e28:	08016e3f 	.word	0x08016e3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8016e30:	e00b      	b.n	8016e4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e32:	2302      	movs	r3, #2
 8016e34:	73fb      	strb	r3, [r7, #15]
    break;
 8016e36:	e008      	b.n	8016e4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8016e3c:	e005      	b.n	8016e4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016e3e:	2302      	movs	r3, #2
 8016e40:	73fb      	strb	r3, [r7, #15]
    break;
 8016e42:	e002      	b.n	8016e4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016e44:	2302      	movs	r3, #2
 8016e46:	73fb      	strb	r3, [r7, #15]
    break;
 8016e48:	bf00      	nop
  }
  return usb_status;
 8016e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	3714      	adds	r7, #20
 8016e50:	46bd      	mov	sp, r7
 8016e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e56:	4770      	bx	lr

08016e58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e58:	b480      	push	{r7}
 8016e5a:	b083      	sub	sp, #12
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	4603      	mov	r3, r0
 8016e60:	6039      	str	r1, [r7, #0]
 8016e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	2212      	movs	r2, #18
 8016e68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016e6a:	4b03      	ldr	r3, [pc, #12]	; (8016e78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	370c      	adds	r7, #12
 8016e70:	46bd      	mov	sp, r7
 8016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e76:	4770      	bx	lr
 8016e78:	200001a0 	.word	0x200001a0

08016e7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b083      	sub	sp, #12
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	4603      	mov	r3, r0
 8016e84:	6039      	str	r1, [r7, #0]
 8016e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	2204      	movs	r2, #4
 8016e8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e8e:	4b03      	ldr	r3, [pc, #12]	; (8016e9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	370c      	adds	r7, #12
 8016e94:	46bd      	mov	sp, r7
 8016e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9a:	4770      	bx	lr
 8016e9c:	200001b4 	.word	0x200001b4

08016ea0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	6039      	str	r1, [r7, #0]
 8016eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016eac:	79fb      	ldrb	r3, [r7, #7]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d105      	bne.n	8016ebe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016eb2:	683a      	ldr	r2, [r7, #0]
 8016eb4:	4907      	ldr	r1, [pc, #28]	; (8016ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016eb6:	4808      	ldr	r0, [pc, #32]	; (8016ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016eb8:	f7fa f9b4 	bl	8011224 <USBD_GetString>
 8016ebc:	e004      	b.n	8016ec8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016ebe:	683a      	ldr	r2, [r7, #0]
 8016ec0:	4904      	ldr	r1, [pc, #16]	; (8016ed4 <USBD_FS_ProductStrDescriptor+0x34>)
 8016ec2:	4805      	ldr	r0, [pc, #20]	; (8016ed8 <USBD_FS_ProductStrDescriptor+0x38>)
 8016ec4:	f7fa f9ae 	bl	8011224 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ec8:	4b02      	ldr	r3, [pc, #8]	; (8016ed4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3708      	adds	r7, #8
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	2000a3b0 	.word	0x2000a3b0
 8016ed8:	0801e1e0 	.word	0x0801e1e0

08016edc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	6039      	str	r1, [r7, #0]
 8016ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016ee8:	683a      	ldr	r2, [r7, #0]
 8016eea:	4904      	ldr	r1, [pc, #16]	; (8016efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016eec:	4804      	ldr	r0, [pc, #16]	; (8016f00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016eee:	f7fa f999 	bl	8011224 <USBD_GetString>
  return USBD_StrDesc;
 8016ef2:	4b02      	ldr	r3, [pc, #8]	; (8016efc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	2000a3b0 	.word	0x2000a3b0
 8016f00:	0801e1ec 	.word	0x0801e1ec

08016f04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	b082      	sub	sp, #8
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	6039      	str	r1, [r7, #0]
 8016f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	221a      	movs	r2, #26
 8016f14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016f16:	f000 f843 	bl	8016fa0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016f1a:	4b02      	ldr	r3, [pc, #8]	; (8016f24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3708      	adds	r7, #8
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	200001b8 	.word	0x200001b8

08016f28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	6039      	str	r1, [r7, #0]
 8016f32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f34:	79fb      	ldrb	r3, [r7, #7]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d105      	bne.n	8016f46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f3a:	683a      	ldr	r2, [r7, #0]
 8016f3c:	4907      	ldr	r1, [pc, #28]	; (8016f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f3e:	4808      	ldr	r0, [pc, #32]	; (8016f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f40:	f7fa f970 	bl	8011224 <USBD_GetString>
 8016f44:	e004      	b.n	8016f50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f46:	683a      	ldr	r2, [r7, #0]
 8016f48:	4904      	ldr	r1, [pc, #16]	; (8016f5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f4a:	4805      	ldr	r0, [pc, #20]	; (8016f60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f4c:	f7fa f96a 	bl	8011224 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f50:	4b02      	ldr	r3, [pc, #8]	; (8016f5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3708      	adds	r7, #8
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	2000a3b0 	.word	0x2000a3b0
 8016f60:	0801e200 	.word	0x0801e200

08016f64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f70:	79fb      	ldrb	r3, [r7, #7]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d105      	bne.n	8016f82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f76:	683a      	ldr	r2, [r7, #0]
 8016f78:	4907      	ldr	r1, [pc, #28]	; (8016f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f7a:	4808      	ldr	r0, [pc, #32]	; (8016f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f7c:	f7fa f952 	bl	8011224 <USBD_GetString>
 8016f80:	e004      	b.n	8016f8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f82:	683a      	ldr	r2, [r7, #0]
 8016f84:	4904      	ldr	r1, [pc, #16]	; (8016f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f86:	4805      	ldr	r0, [pc, #20]	; (8016f9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f88:	f7fa f94c 	bl	8011224 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f8c:	4b02      	ldr	r3, [pc, #8]	; (8016f98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	2000a3b0 	.word	0x2000a3b0
 8016f9c:	0801e20c 	.word	0x0801e20c

08016fa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b084      	sub	sp, #16
 8016fa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016fa6:	4b0f      	ldr	r3, [pc, #60]	; (8016fe4 <Get_SerialNum+0x44>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016fac:	4b0e      	ldr	r3, [pc, #56]	; (8016fe8 <Get_SerialNum+0x48>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016fb2:	4b0e      	ldr	r3, [pc, #56]	; (8016fec <Get_SerialNum+0x4c>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	4413      	add	r3, r2
 8016fbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d009      	beq.n	8016fda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016fc6:	2208      	movs	r2, #8
 8016fc8:	4909      	ldr	r1, [pc, #36]	; (8016ff0 <Get_SerialNum+0x50>)
 8016fca:	68f8      	ldr	r0, [r7, #12]
 8016fcc:	f000 f814 	bl	8016ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016fd0:	2204      	movs	r2, #4
 8016fd2:	4908      	ldr	r1, [pc, #32]	; (8016ff4 <Get_SerialNum+0x54>)
 8016fd4:	68b8      	ldr	r0, [r7, #8]
 8016fd6:	f000 f80f 	bl	8016ff8 <IntToUnicode>
  }
}
 8016fda:	bf00      	nop
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	1fff7a10 	.word	0x1fff7a10
 8016fe8:	1fff7a14 	.word	0x1fff7a14
 8016fec:	1fff7a18 	.word	0x1fff7a18
 8016ff0:	200001ba 	.word	0x200001ba
 8016ff4:	200001ca 	.word	0x200001ca

08016ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016ff8:	b480      	push	{r7}
 8016ffa:	b087      	sub	sp, #28
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	60f8      	str	r0, [r7, #12]
 8017000:	60b9      	str	r1, [r7, #8]
 8017002:	4613      	mov	r3, r2
 8017004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017006:	2300      	movs	r3, #0
 8017008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801700a:	2300      	movs	r3, #0
 801700c:	75fb      	strb	r3, [r7, #23]
 801700e:	e027      	b.n	8017060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	0f1b      	lsrs	r3, r3, #28
 8017014:	2b09      	cmp	r3, #9
 8017016:	d80b      	bhi.n	8017030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	0f1b      	lsrs	r3, r3, #28
 801701c:	b2da      	uxtb	r2, r3
 801701e:	7dfb      	ldrb	r3, [r7, #23]
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	4619      	mov	r1, r3
 8017024:	68bb      	ldr	r3, [r7, #8]
 8017026:	440b      	add	r3, r1
 8017028:	3230      	adds	r2, #48	; 0x30
 801702a:	b2d2      	uxtb	r2, r2
 801702c:	701a      	strb	r2, [r3, #0]
 801702e:	e00a      	b.n	8017046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	0f1b      	lsrs	r3, r3, #28
 8017034:	b2da      	uxtb	r2, r3
 8017036:	7dfb      	ldrb	r3, [r7, #23]
 8017038:	005b      	lsls	r3, r3, #1
 801703a:	4619      	mov	r1, r3
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	440b      	add	r3, r1
 8017040:	3237      	adds	r2, #55	; 0x37
 8017042:	b2d2      	uxtb	r2, r2
 8017044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	011b      	lsls	r3, r3, #4
 801704a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801704c:	7dfb      	ldrb	r3, [r7, #23]
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	3301      	adds	r3, #1
 8017052:	68ba      	ldr	r2, [r7, #8]
 8017054:	4413      	add	r3, r2
 8017056:	2200      	movs	r2, #0
 8017058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801705a:	7dfb      	ldrb	r3, [r7, #23]
 801705c:	3301      	adds	r3, #1
 801705e:	75fb      	strb	r3, [r7, #23]
 8017060:	7dfa      	ldrb	r2, [r7, #23]
 8017062:	79fb      	ldrb	r3, [r7, #7]
 8017064:	429a      	cmp	r2, r3
 8017066:	d3d3      	bcc.n	8017010 <IntToUnicode+0x18>
  }
}
 8017068:	bf00      	nop
 801706a:	371c      	adds	r7, #28
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr

08017074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8017074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80170ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8017078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801707a:	e003      	b.n	8017084 <LoopCopyDataInit>

0801707c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801707c:	4b0c      	ldr	r3, [pc, #48]	; (80170b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801707e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8017080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8017082:	3104      	adds	r1, #4

08017084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8017084:	480b      	ldr	r0, [pc, #44]	; (80170b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8017086:	4b0c      	ldr	r3, [pc, #48]	; (80170b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8017088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801708a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801708c:	d3f6      	bcc.n	801707c <CopyDataInit>
  ldr  r2, =_sbss
 801708e:	4a0b      	ldr	r2, [pc, #44]	; (80170bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8017090:	e002      	b.n	8017098 <LoopFillZerobss>

08017092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8017092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8017094:	f842 3b04 	str.w	r3, [r2], #4

08017098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017098:	4b09      	ldr	r3, [pc, #36]	; (80170c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801709a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801709c:	d3f9      	bcc.n	8017092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801709e:	f7ff fa89 	bl	80165b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80170a2:	f000 f821 	bl	80170e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80170a6:	f7fe f8ad 	bl	8015204 <main>
  bx  lr    
 80170aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80170ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80170b0:	0801e818 	.word	0x0801e818
  ldr  r0, =_sdata
 80170b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80170b8:	200003a8 	.word	0x200003a8
  ldr  r2, =_sbss
 80170bc:	200003a8 	.word	0x200003a8
  ldr  r3, = _ebss
 80170c0:	2000a5b4 	.word	0x2000a5b4

080170c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80170c4:	e7fe      	b.n	80170c4 <ADC_IRQHandler>

080170c6 <atof>:
 80170c6:	2100      	movs	r1, #0
 80170c8:	f001 bdde 	b.w	8018c88 <strtod>

080170cc <atoi>:
 80170cc:	220a      	movs	r2, #10
 80170ce:	2100      	movs	r1, #0
 80170d0:	f001 be7c 	b.w	8018dcc <strtol>

080170d4 <atol>:
 80170d4:	220a      	movs	r2, #10
 80170d6:	2100      	movs	r1, #0
 80170d8:	f001 be78 	b.w	8018dcc <strtol>

080170dc <__errno>:
 80170dc:	4b01      	ldr	r3, [pc, #4]	; (80170e4 <__errno+0x8>)
 80170de:	6818      	ldr	r0, [r3, #0]
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop
 80170e4:	200001d4 	.word	0x200001d4

080170e8 <__libc_init_array>:
 80170e8:	b570      	push	{r4, r5, r6, lr}
 80170ea:	4e0d      	ldr	r6, [pc, #52]	; (8017120 <__libc_init_array+0x38>)
 80170ec:	4c0d      	ldr	r4, [pc, #52]	; (8017124 <__libc_init_array+0x3c>)
 80170ee:	1ba4      	subs	r4, r4, r6
 80170f0:	10a4      	asrs	r4, r4, #2
 80170f2:	2500      	movs	r5, #0
 80170f4:	42a5      	cmp	r5, r4
 80170f6:	d109      	bne.n	801710c <__libc_init_array+0x24>
 80170f8:	4e0b      	ldr	r6, [pc, #44]	; (8017128 <__libc_init_array+0x40>)
 80170fa:	4c0c      	ldr	r4, [pc, #48]	; (801712c <__libc_init_array+0x44>)
 80170fc:	f006 fcba 	bl	801da74 <_init>
 8017100:	1ba4      	subs	r4, r4, r6
 8017102:	10a4      	asrs	r4, r4, #2
 8017104:	2500      	movs	r5, #0
 8017106:	42a5      	cmp	r5, r4
 8017108:	d105      	bne.n	8017116 <__libc_init_array+0x2e>
 801710a:	bd70      	pop	{r4, r5, r6, pc}
 801710c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017110:	4798      	blx	r3
 8017112:	3501      	adds	r5, #1
 8017114:	e7ee      	b.n	80170f4 <__libc_init_array+0xc>
 8017116:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801711a:	4798      	blx	r3
 801711c:	3501      	adds	r5, #1
 801711e:	e7f2      	b.n	8017106 <__libc_init_array+0x1e>
 8017120:	0801e810 	.word	0x0801e810
 8017124:	0801e810 	.word	0x0801e810
 8017128:	0801e810 	.word	0x0801e810
 801712c:	0801e814 	.word	0x0801e814

08017130 <malloc>:
 8017130:	4b02      	ldr	r3, [pc, #8]	; (801713c <malloc+0xc>)
 8017132:	4601      	mov	r1, r0
 8017134:	6818      	ldr	r0, [r3, #0]
 8017136:	f000 b86d 	b.w	8017214 <_malloc_r>
 801713a:	bf00      	nop
 801713c:	200001d4 	.word	0x200001d4

08017140 <free>:
 8017140:	4b02      	ldr	r3, [pc, #8]	; (801714c <free+0xc>)
 8017142:	4601      	mov	r1, r0
 8017144:	6818      	ldr	r0, [r3, #0]
 8017146:	f000 b817 	b.w	8017178 <_free_r>
 801714a:	bf00      	nop
 801714c:	200001d4 	.word	0x200001d4

08017150 <memcpy>:
 8017150:	b510      	push	{r4, lr}
 8017152:	1e43      	subs	r3, r0, #1
 8017154:	440a      	add	r2, r1
 8017156:	4291      	cmp	r1, r2
 8017158:	d100      	bne.n	801715c <memcpy+0xc>
 801715a:	bd10      	pop	{r4, pc}
 801715c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017164:	e7f7      	b.n	8017156 <memcpy+0x6>

08017166 <memset>:
 8017166:	4402      	add	r2, r0
 8017168:	4603      	mov	r3, r0
 801716a:	4293      	cmp	r3, r2
 801716c:	d100      	bne.n	8017170 <memset+0xa>
 801716e:	4770      	bx	lr
 8017170:	f803 1b01 	strb.w	r1, [r3], #1
 8017174:	e7f9      	b.n	801716a <memset+0x4>
	...

08017178 <_free_r>:
 8017178:	b538      	push	{r3, r4, r5, lr}
 801717a:	4605      	mov	r5, r0
 801717c:	2900      	cmp	r1, #0
 801717e:	d045      	beq.n	801720c <_free_r+0x94>
 8017180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017184:	1f0c      	subs	r4, r1, #4
 8017186:	2b00      	cmp	r3, #0
 8017188:	bfb8      	it	lt
 801718a:	18e4      	addlt	r4, r4, r3
 801718c:	f002 ffe4 	bl	801a158 <__malloc_lock>
 8017190:	4a1f      	ldr	r2, [pc, #124]	; (8017210 <_free_r+0x98>)
 8017192:	6813      	ldr	r3, [r2, #0]
 8017194:	4610      	mov	r0, r2
 8017196:	b933      	cbnz	r3, 80171a6 <_free_r+0x2e>
 8017198:	6063      	str	r3, [r4, #4]
 801719a:	6014      	str	r4, [r2, #0]
 801719c:	4628      	mov	r0, r5
 801719e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171a2:	f002 bfda 	b.w	801a15a <__malloc_unlock>
 80171a6:	42a3      	cmp	r3, r4
 80171a8:	d90c      	bls.n	80171c4 <_free_r+0x4c>
 80171aa:	6821      	ldr	r1, [r4, #0]
 80171ac:	1862      	adds	r2, r4, r1
 80171ae:	4293      	cmp	r3, r2
 80171b0:	bf04      	itt	eq
 80171b2:	681a      	ldreq	r2, [r3, #0]
 80171b4:	685b      	ldreq	r3, [r3, #4]
 80171b6:	6063      	str	r3, [r4, #4]
 80171b8:	bf04      	itt	eq
 80171ba:	1852      	addeq	r2, r2, r1
 80171bc:	6022      	streq	r2, [r4, #0]
 80171be:	6004      	str	r4, [r0, #0]
 80171c0:	e7ec      	b.n	801719c <_free_r+0x24>
 80171c2:	4613      	mov	r3, r2
 80171c4:	685a      	ldr	r2, [r3, #4]
 80171c6:	b10a      	cbz	r2, 80171cc <_free_r+0x54>
 80171c8:	42a2      	cmp	r2, r4
 80171ca:	d9fa      	bls.n	80171c2 <_free_r+0x4a>
 80171cc:	6819      	ldr	r1, [r3, #0]
 80171ce:	1858      	adds	r0, r3, r1
 80171d0:	42a0      	cmp	r0, r4
 80171d2:	d10b      	bne.n	80171ec <_free_r+0x74>
 80171d4:	6820      	ldr	r0, [r4, #0]
 80171d6:	4401      	add	r1, r0
 80171d8:	1858      	adds	r0, r3, r1
 80171da:	4282      	cmp	r2, r0
 80171dc:	6019      	str	r1, [r3, #0]
 80171de:	d1dd      	bne.n	801719c <_free_r+0x24>
 80171e0:	6810      	ldr	r0, [r2, #0]
 80171e2:	6852      	ldr	r2, [r2, #4]
 80171e4:	605a      	str	r2, [r3, #4]
 80171e6:	4401      	add	r1, r0
 80171e8:	6019      	str	r1, [r3, #0]
 80171ea:	e7d7      	b.n	801719c <_free_r+0x24>
 80171ec:	d902      	bls.n	80171f4 <_free_r+0x7c>
 80171ee:	230c      	movs	r3, #12
 80171f0:	602b      	str	r3, [r5, #0]
 80171f2:	e7d3      	b.n	801719c <_free_r+0x24>
 80171f4:	6820      	ldr	r0, [r4, #0]
 80171f6:	1821      	adds	r1, r4, r0
 80171f8:	428a      	cmp	r2, r1
 80171fa:	bf04      	itt	eq
 80171fc:	6811      	ldreq	r1, [r2, #0]
 80171fe:	6852      	ldreq	r2, [r2, #4]
 8017200:	6062      	str	r2, [r4, #4]
 8017202:	bf04      	itt	eq
 8017204:	1809      	addeq	r1, r1, r0
 8017206:	6021      	streq	r1, [r4, #0]
 8017208:	605c      	str	r4, [r3, #4]
 801720a:	e7c7      	b.n	801719c <_free_r+0x24>
 801720c:	bd38      	pop	{r3, r4, r5, pc}
 801720e:	bf00      	nop
 8017210:	20000e34 	.word	0x20000e34

08017214 <_malloc_r>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	1ccd      	adds	r5, r1, #3
 8017218:	f025 0503 	bic.w	r5, r5, #3
 801721c:	3508      	adds	r5, #8
 801721e:	2d0c      	cmp	r5, #12
 8017220:	bf38      	it	cc
 8017222:	250c      	movcc	r5, #12
 8017224:	2d00      	cmp	r5, #0
 8017226:	4606      	mov	r6, r0
 8017228:	db01      	blt.n	801722e <_malloc_r+0x1a>
 801722a:	42a9      	cmp	r1, r5
 801722c:	d903      	bls.n	8017236 <_malloc_r+0x22>
 801722e:	230c      	movs	r3, #12
 8017230:	6033      	str	r3, [r6, #0]
 8017232:	2000      	movs	r0, #0
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	f002 ff8f 	bl	801a158 <__malloc_lock>
 801723a:	4a21      	ldr	r2, [pc, #132]	; (80172c0 <_malloc_r+0xac>)
 801723c:	6814      	ldr	r4, [r2, #0]
 801723e:	4621      	mov	r1, r4
 8017240:	b991      	cbnz	r1, 8017268 <_malloc_r+0x54>
 8017242:	4c20      	ldr	r4, [pc, #128]	; (80172c4 <_malloc_r+0xb0>)
 8017244:	6823      	ldr	r3, [r4, #0]
 8017246:	b91b      	cbnz	r3, 8017250 <_malloc_r+0x3c>
 8017248:	4630      	mov	r0, r6
 801724a:	f000 fe7b 	bl	8017f44 <_sbrk_r>
 801724e:	6020      	str	r0, [r4, #0]
 8017250:	4629      	mov	r1, r5
 8017252:	4630      	mov	r0, r6
 8017254:	f000 fe76 	bl	8017f44 <_sbrk_r>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d124      	bne.n	80172a6 <_malloc_r+0x92>
 801725c:	230c      	movs	r3, #12
 801725e:	6033      	str	r3, [r6, #0]
 8017260:	4630      	mov	r0, r6
 8017262:	f002 ff7a 	bl	801a15a <__malloc_unlock>
 8017266:	e7e4      	b.n	8017232 <_malloc_r+0x1e>
 8017268:	680b      	ldr	r3, [r1, #0]
 801726a:	1b5b      	subs	r3, r3, r5
 801726c:	d418      	bmi.n	80172a0 <_malloc_r+0x8c>
 801726e:	2b0b      	cmp	r3, #11
 8017270:	d90f      	bls.n	8017292 <_malloc_r+0x7e>
 8017272:	600b      	str	r3, [r1, #0]
 8017274:	50cd      	str	r5, [r1, r3]
 8017276:	18cc      	adds	r4, r1, r3
 8017278:	4630      	mov	r0, r6
 801727a:	f002 ff6e 	bl	801a15a <__malloc_unlock>
 801727e:	f104 000b 	add.w	r0, r4, #11
 8017282:	1d23      	adds	r3, r4, #4
 8017284:	f020 0007 	bic.w	r0, r0, #7
 8017288:	1ac3      	subs	r3, r0, r3
 801728a:	d0d3      	beq.n	8017234 <_malloc_r+0x20>
 801728c:	425a      	negs	r2, r3
 801728e:	50e2      	str	r2, [r4, r3]
 8017290:	e7d0      	b.n	8017234 <_malloc_r+0x20>
 8017292:	428c      	cmp	r4, r1
 8017294:	684b      	ldr	r3, [r1, #4]
 8017296:	bf16      	itet	ne
 8017298:	6063      	strne	r3, [r4, #4]
 801729a:	6013      	streq	r3, [r2, #0]
 801729c:	460c      	movne	r4, r1
 801729e:	e7eb      	b.n	8017278 <_malloc_r+0x64>
 80172a0:	460c      	mov	r4, r1
 80172a2:	6849      	ldr	r1, [r1, #4]
 80172a4:	e7cc      	b.n	8017240 <_malloc_r+0x2c>
 80172a6:	1cc4      	adds	r4, r0, #3
 80172a8:	f024 0403 	bic.w	r4, r4, #3
 80172ac:	42a0      	cmp	r0, r4
 80172ae:	d005      	beq.n	80172bc <_malloc_r+0xa8>
 80172b0:	1a21      	subs	r1, r4, r0
 80172b2:	4630      	mov	r0, r6
 80172b4:	f000 fe46 	bl	8017f44 <_sbrk_r>
 80172b8:	3001      	adds	r0, #1
 80172ba:	d0cf      	beq.n	801725c <_malloc_r+0x48>
 80172bc:	6025      	str	r5, [r4, #0]
 80172be:	e7db      	b.n	8017278 <_malloc_r+0x64>
 80172c0:	20000e34 	.word	0x20000e34
 80172c4:	20000e38 	.word	0x20000e38

080172c8 <__cvt>:
 80172c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80172cc:	ec55 4b10 	vmov	r4, r5, d0
 80172d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80172d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80172d6:	2d00      	cmp	r5, #0
 80172d8:	460e      	mov	r6, r1
 80172da:	4691      	mov	r9, r2
 80172dc:	4619      	mov	r1, r3
 80172de:	bfb8      	it	lt
 80172e0:	4622      	movlt	r2, r4
 80172e2:	462b      	mov	r3, r5
 80172e4:	f027 0720 	bic.w	r7, r7, #32
 80172e8:	bfbb      	ittet	lt
 80172ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80172ee:	461d      	movlt	r5, r3
 80172f0:	2300      	movge	r3, #0
 80172f2:	232d      	movlt	r3, #45	; 0x2d
 80172f4:	bfb8      	it	lt
 80172f6:	4614      	movlt	r4, r2
 80172f8:	2f46      	cmp	r7, #70	; 0x46
 80172fa:	700b      	strb	r3, [r1, #0]
 80172fc:	d004      	beq.n	8017308 <__cvt+0x40>
 80172fe:	2f45      	cmp	r7, #69	; 0x45
 8017300:	d100      	bne.n	8017304 <__cvt+0x3c>
 8017302:	3601      	adds	r6, #1
 8017304:	2102      	movs	r1, #2
 8017306:	e000      	b.n	801730a <__cvt+0x42>
 8017308:	2103      	movs	r1, #3
 801730a:	ab03      	add	r3, sp, #12
 801730c:	9301      	str	r3, [sp, #4]
 801730e:	ab02      	add	r3, sp, #8
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	4632      	mov	r2, r6
 8017314:	4653      	mov	r3, sl
 8017316:	ec45 4b10 	vmov	d0, r4, r5
 801731a:	f001 fe19 	bl	8018f50 <_dtoa_r>
 801731e:	2f47      	cmp	r7, #71	; 0x47
 8017320:	4680      	mov	r8, r0
 8017322:	d102      	bne.n	801732a <__cvt+0x62>
 8017324:	f019 0f01 	tst.w	r9, #1
 8017328:	d026      	beq.n	8017378 <__cvt+0xb0>
 801732a:	2f46      	cmp	r7, #70	; 0x46
 801732c:	eb08 0906 	add.w	r9, r8, r6
 8017330:	d111      	bne.n	8017356 <__cvt+0x8e>
 8017332:	f898 3000 	ldrb.w	r3, [r8]
 8017336:	2b30      	cmp	r3, #48	; 0x30
 8017338:	d10a      	bne.n	8017350 <__cvt+0x88>
 801733a:	2200      	movs	r2, #0
 801733c:	2300      	movs	r3, #0
 801733e:	4620      	mov	r0, r4
 8017340:	4629      	mov	r1, r5
 8017342:	f7e9 fbd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8017346:	b918      	cbnz	r0, 8017350 <__cvt+0x88>
 8017348:	f1c6 0601 	rsb	r6, r6, #1
 801734c:	f8ca 6000 	str.w	r6, [sl]
 8017350:	f8da 3000 	ldr.w	r3, [sl]
 8017354:	4499      	add	r9, r3
 8017356:	2200      	movs	r2, #0
 8017358:	2300      	movs	r3, #0
 801735a:	4620      	mov	r0, r4
 801735c:	4629      	mov	r1, r5
 801735e:	f7e9 fbc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8017362:	b938      	cbnz	r0, 8017374 <__cvt+0xac>
 8017364:	2230      	movs	r2, #48	; 0x30
 8017366:	9b03      	ldr	r3, [sp, #12]
 8017368:	454b      	cmp	r3, r9
 801736a:	d205      	bcs.n	8017378 <__cvt+0xb0>
 801736c:	1c59      	adds	r1, r3, #1
 801736e:	9103      	str	r1, [sp, #12]
 8017370:	701a      	strb	r2, [r3, #0]
 8017372:	e7f8      	b.n	8017366 <__cvt+0x9e>
 8017374:	f8cd 900c 	str.w	r9, [sp, #12]
 8017378:	9b03      	ldr	r3, [sp, #12]
 801737a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801737c:	eba3 0308 	sub.w	r3, r3, r8
 8017380:	4640      	mov	r0, r8
 8017382:	6013      	str	r3, [r2, #0]
 8017384:	b004      	add	sp, #16
 8017386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801738a <__exponent>:
 801738a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801738c:	2900      	cmp	r1, #0
 801738e:	4604      	mov	r4, r0
 8017390:	bfba      	itte	lt
 8017392:	4249      	neglt	r1, r1
 8017394:	232d      	movlt	r3, #45	; 0x2d
 8017396:	232b      	movge	r3, #43	; 0x2b
 8017398:	2909      	cmp	r1, #9
 801739a:	f804 2b02 	strb.w	r2, [r4], #2
 801739e:	7043      	strb	r3, [r0, #1]
 80173a0:	dd20      	ble.n	80173e4 <__exponent+0x5a>
 80173a2:	f10d 0307 	add.w	r3, sp, #7
 80173a6:	461f      	mov	r7, r3
 80173a8:	260a      	movs	r6, #10
 80173aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80173ae:	fb06 1115 	mls	r1, r6, r5, r1
 80173b2:	3130      	adds	r1, #48	; 0x30
 80173b4:	2d09      	cmp	r5, #9
 80173b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80173ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80173be:	4629      	mov	r1, r5
 80173c0:	dc09      	bgt.n	80173d6 <__exponent+0x4c>
 80173c2:	3130      	adds	r1, #48	; 0x30
 80173c4:	3b02      	subs	r3, #2
 80173c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80173ca:	42bb      	cmp	r3, r7
 80173cc:	4622      	mov	r2, r4
 80173ce:	d304      	bcc.n	80173da <__exponent+0x50>
 80173d0:	1a10      	subs	r0, r2, r0
 80173d2:	b003      	add	sp, #12
 80173d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173d6:	4613      	mov	r3, r2
 80173d8:	e7e7      	b.n	80173aa <__exponent+0x20>
 80173da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173de:	f804 2b01 	strb.w	r2, [r4], #1
 80173e2:	e7f2      	b.n	80173ca <__exponent+0x40>
 80173e4:	2330      	movs	r3, #48	; 0x30
 80173e6:	4419      	add	r1, r3
 80173e8:	7083      	strb	r3, [r0, #2]
 80173ea:	1d02      	adds	r2, r0, #4
 80173ec:	70c1      	strb	r1, [r0, #3]
 80173ee:	e7ef      	b.n	80173d0 <__exponent+0x46>

080173f0 <_printf_float>:
 80173f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f4:	b08d      	sub	sp, #52	; 0x34
 80173f6:	460c      	mov	r4, r1
 80173f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80173fc:	4616      	mov	r6, r2
 80173fe:	461f      	mov	r7, r3
 8017400:	4605      	mov	r5, r0
 8017402:	f002 fe89 	bl	801a118 <_localeconv_r>
 8017406:	6803      	ldr	r3, [r0, #0]
 8017408:	9304      	str	r3, [sp, #16]
 801740a:	4618      	mov	r0, r3
 801740c:	f7e8 feea 	bl	80001e4 <strlen>
 8017410:	2300      	movs	r3, #0
 8017412:	930a      	str	r3, [sp, #40]	; 0x28
 8017414:	f8d8 3000 	ldr.w	r3, [r8]
 8017418:	9005      	str	r0, [sp, #20]
 801741a:	3307      	adds	r3, #7
 801741c:	f023 0307 	bic.w	r3, r3, #7
 8017420:	f103 0208 	add.w	r2, r3, #8
 8017424:	f894 a018 	ldrb.w	sl, [r4, #24]
 8017428:	f8d4 b000 	ldr.w	fp, [r4]
 801742c:	f8c8 2000 	str.w	r2, [r8]
 8017430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017438:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801743c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017440:	9307      	str	r3, [sp, #28]
 8017442:	f8cd 8018 	str.w	r8, [sp, #24]
 8017446:	f04f 32ff 	mov.w	r2, #4294967295
 801744a:	4ba7      	ldr	r3, [pc, #668]	; (80176e8 <_printf_float+0x2f8>)
 801744c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017450:	f7e9 fb7c 	bl	8000b4c <__aeabi_dcmpun>
 8017454:	bb70      	cbnz	r0, 80174b4 <_printf_float+0xc4>
 8017456:	f04f 32ff 	mov.w	r2, #4294967295
 801745a:	4ba3      	ldr	r3, [pc, #652]	; (80176e8 <_printf_float+0x2f8>)
 801745c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017460:	f7e9 fb56 	bl	8000b10 <__aeabi_dcmple>
 8017464:	bb30      	cbnz	r0, 80174b4 <_printf_float+0xc4>
 8017466:	2200      	movs	r2, #0
 8017468:	2300      	movs	r3, #0
 801746a:	4640      	mov	r0, r8
 801746c:	4649      	mov	r1, r9
 801746e:	f7e9 fb45 	bl	8000afc <__aeabi_dcmplt>
 8017472:	b110      	cbz	r0, 801747a <_printf_float+0x8a>
 8017474:	232d      	movs	r3, #45	; 0x2d
 8017476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801747a:	4a9c      	ldr	r2, [pc, #624]	; (80176ec <_printf_float+0x2fc>)
 801747c:	4b9c      	ldr	r3, [pc, #624]	; (80176f0 <_printf_float+0x300>)
 801747e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8017482:	bf8c      	ite	hi
 8017484:	4690      	movhi	r8, r2
 8017486:	4698      	movls	r8, r3
 8017488:	2303      	movs	r3, #3
 801748a:	f02b 0204 	bic.w	r2, fp, #4
 801748e:	6123      	str	r3, [r4, #16]
 8017490:	6022      	str	r2, [r4, #0]
 8017492:	f04f 0900 	mov.w	r9, #0
 8017496:	9700      	str	r7, [sp, #0]
 8017498:	4633      	mov	r3, r6
 801749a:	aa0b      	add	r2, sp, #44	; 0x2c
 801749c:	4621      	mov	r1, r4
 801749e:	4628      	mov	r0, r5
 80174a0:	f000 f9e6 	bl	8017870 <_printf_common>
 80174a4:	3001      	adds	r0, #1
 80174a6:	f040 808d 	bne.w	80175c4 <_printf_float+0x1d4>
 80174aa:	f04f 30ff 	mov.w	r0, #4294967295
 80174ae:	b00d      	add	sp, #52	; 0x34
 80174b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b4:	4642      	mov	r2, r8
 80174b6:	464b      	mov	r3, r9
 80174b8:	4640      	mov	r0, r8
 80174ba:	4649      	mov	r1, r9
 80174bc:	f7e9 fb46 	bl	8000b4c <__aeabi_dcmpun>
 80174c0:	b110      	cbz	r0, 80174c8 <_printf_float+0xd8>
 80174c2:	4a8c      	ldr	r2, [pc, #560]	; (80176f4 <_printf_float+0x304>)
 80174c4:	4b8c      	ldr	r3, [pc, #560]	; (80176f8 <_printf_float+0x308>)
 80174c6:	e7da      	b.n	801747e <_printf_float+0x8e>
 80174c8:	6861      	ldr	r1, [r4, #4]
 80174ca:	1c4b      	adds	r3, r1, #1
 80174cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80174d0:	a80a      	add	r0, sp, #40	; 0x28
 80174d2:	d13e      	bne.n	8017552 <_printf_float+0x162>
 80174d4:	2306      	movs	r3, #6
 80174d6:	6063      	str	r3, [r4, #4]
 80174d8:	2300      	movs	r3, #0
 80174da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80174de:	ab09      	add	r3, sp, #36	; 0x24
 80174e0:	9300      	str	r3, [sp, #0]
 80174e2:	ec49 8b10 	vmov	d0, r8, r9
 80174e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80174ea:	6022      	str	r2, [r4, #0]
 80174ec:	f8cd a004 	str.w	sl, [sp, #4]
 80174f0:	6861      	ldr	r1, [r4, #4]
 80174f2:	4628      	mov	r0, r5
 80174f4:	f7ff fee8 	bl	80172c8 <__cvt>
 80174f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80174fc:	2b47      	cmp	r3, #71	; 0x47
 80174fe:	4680      	mov	r8, r0
 8017500:	d109      	bne.n	8017516 <_printf_float+0x126>
 8017502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017504:	1cd8      	adds	r0, r3, #3
 8017506:	db02      	blt.n	801750e <_printf_float+0x11e>
 8017508:	6862      	ldr	r2, [r4, #4]
 801750a:	4293      	cmp	r3, r2
 801750c:	dd47      	ble.n	801759e <_printf_float+0x1ae>
 801750e:	f1aa 0a02 	sub.w	sl, sl, #2
 8017512:	fa5f fa8a 	uxtb.w	sl, sl
 8017516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801751a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801751c:	d824      	bhi.n	8017568 <_printf_float+0x178>
 801751e:	3901      	subs	r1, #1
 8017520:	4652      	mov	r2, sl
 8017522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017526:	9109      	str	r1, [sp, #36]	; 0x24
 8017528:	f7ff ff2f 	bl	801738a <__exponent>
 801752c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801752e:	1813      	adds	r3, r2, r0
 8017530:	2a01      	cmp	r2, #1
 8017532:	4681      	mov	r9, r0
 8017534:	6123      	str	r3, [r4, #16]
 8017536:	dc02      	bgt.n	801753e <_printf_float+0x14e>
 8017538:	6822      	ldr	r2, [r4, #0]
 801753a:	07d1      	lsls	r1, r2, #31
 801753c:	d501      	bpl.n	8017542 <_printf_float+0x152>
 801753e:	3301      	adds	r3, #1
 8017540:	6123      	str	r3, [r4, #16]
 8017542:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017546:	2b00      	cmp	r3, #0
 8017548:	d0a5      	beq.n	8017496 <_printf_float+0xa6>
 801754a:	232d      	movs	r3, #45	; 0x2d
 801754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017550:	e7a1      	b.n	8017496 <_printf_float+0xa6>
 8017552:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8017556:	f000 8177 	beq.w	8017848 <_printf_float+0x458>
 801755a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801755e:	d1bb      	bne.n	80174d8 <_printf_float+0xe8>
 8017560:	2900      	cmp	r1, #0
 8017562:	d1b9      	bne.n	80174d8 <_printf_float+0xe8>
 8017564:	2301      	movs	r3, #1
 8017566:	e7b6      	b.n	80174d6 <_printf_float+0xe6>
 8017568:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801756c:	d119      	bne.n	80175a2 <_printf_float+0x1b2>
 801756e:	2900      	cmp	r1, #0
 8017570:	6863      	ldr	r3, [r4, #4]
 8017572:	dd0c      	ble.n	801758e <_printf_float+0x19e>
 8017574:	6121      	str	r1, [r4, #16]
 8017576:	b913      	cbnz	r3, 801757e <_printf_float+0x18e>
 8017578:	6822      	ldr	r2, [r4, #0]
 801757a:	07d2      	lsls	r2, r2, #31
 801757c:	d502      	bpl.n	8017584 <_printf_float+0x194>
 801757e:	3301      	adds	r3, #1
 8017580:	440b      	add	r3, r1
 8017582:	6123      	str	r3, [r4, #16]
 8017584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017586:	65a3      	str	r3, [r4, #88]	; 0x58
 8017588:	f04f 0900 	mov.w	r9, #0
 801758c:	e7d9      	b.n	8017542 <_printf_float+0x152>
 801758e:	b913      	cbnz	r3, 8017596 <_printf_float+0x1a6>
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	07d0      	lsls	r0, r2, #31
 8017594:	d501      	bpl.n	801759a <_printf_float+0x1aa>
 8017596:	3302      	adds	r3, #2
 8017598:	e7f3      	b.n	8017582 <_printf_float+0x192>
 801759a:	2301      	movs	r3, #1
 801759c:	e7f1      	b.n	8017582 <_printf_float+0x192>
 801759e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80175a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80175a6:	4293      	cmp	r3, r2
 80175a8:	db05      	blt.n	80175b6 <_printf_float+0x1c6>
 80175aa:	6822      	ldr	r2, [r4, #0]
 80175ac:	6123      	str	r3, [r4, #16]
 80175ae:	07d1      	lsls	r1, r2, #31
 80175b0:	d5e8      	bpl.n	8017584 <_printf_float+0x194>
 80175b2:	3301      	adds	r3, #1
 80175b4:	e7e5      	b.n	8017582 <_printf_float+0x192>
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	bfd4      	ite	le
 80175ba:	f1c3 0302 	rsble	r3, r3, #2
 80175be:	2301      	movgt	r3, #1
 80175c0:	4413      	add	r3, r2
 80175c2:	e7de      	b.n	8017582 <_printf_float+0x192>
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	055a      	lsls	r2, r3, #21
 80175c8:	d407      	bmi.n	80175da <_printf_float+0x1ea>
 80175ca:	6923      	ldr	r3, [r4, #16]
 80175cc:	4642      	mov	r2, r8
 80175ce:	4631      	mov	r1, r6
 80175d0:	4628      	mov	r0, r5
 80175d2:	47b8      	blx	r7
 80175d4:	3001      	adds	r0, #1
 80175d6:	d12b      	bne.n	8017630 <_printf_float+0x240>
 80175d8:	e767      	b.n	80174aa <_printf_float+0xba>
 80175da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80175de:	f240 80dc 	bls.w	801779a <_printf_float+0x3aa>
 80175e2:	2200      	movs	r2, #0
 80175e4:	2300      	movs	r3, #0
 80175e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80175ea:	f7e9 fa7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d033      	beq.n	801765a <_printf_float+0x26a>
 80175f2:	2301      	movs	r3, #1
 80175f4:	4a41      	ldr	r2, [pc, #260]	; (80176fc <_printf_float+0x30c>)
 80175f6:	4631      	mov	r1, r6
 80175f8:	4628      	mov	r0, r5
 80175fa:	47b8      	blx	r7
 80175fc:	3001      	adds	r0, #1
 80175fe:	f43f af54 	beq.w	80174aa <_printf_float+0xba>
 8017602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017606:	429a      	cmp	r2, r3
 8017608:	db02      	blt.n	8017610 <_printf_float+0x220>
 801760a:	6823      	ldr	r3, [r4, #0]
 801760c:	07d8      	lsls	r0, r3, #31
 801760e:	d50f      	bpl.n	8017630 <_printf_float+0x240>
 8017610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017614:	4631      	mov	r1, r6
 8017616:	4628      	mov	r0, r5
 8017618:	47b8      	blx	r7
 801761a:	3001      	adds	r0, #1
 801761c:	f43f af45 	beq.w	80174aa <_printf_float+0xba>
 8017620:	f04f 0800 	mov.w	r8, #0
 8017624:	f104 091a 	add.w	r9, r4, #26
 8017628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801762a:	3b01      	subs	r3, #1
 801762c:	4543      	cmp	r3, r8
 801762e:	dc09      	bgt.n	8017644 <_printf_float+0x254>
 8017630:	6823      	ldr	r3, [r4, #0]
 8017632:	079b      	lsls	r3, r3, #30
 8017634:	f100 8103 	bmi.w	801783e <_printf_float+0x44e>
 8017638:	68e0      	ldr	r0, [r4, #12]
 801763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801763c:	4298      	cmp	r0, r3
 801763e:	bfb8      	it	lt
 8017640:	4618      	movlt	r0, r3
 8017642:	e734      	b.n	80174ae <_printf_float+0xbe>
 8017644:	2301      	movs	r3, #1
 8017646:	464a      	mov	r2, r9
 8017648:	4631      	mov	r1, r6
 801764a:	4628      	mov	r0, r5
 801764c:	47b8      	blx	r7
 801764e:	3001      	adds	r0, #1
 8017650:	f43f af2b 	beq.w	80174aa <_printf_float+0xba>
 8017654:	f108 0801 	add.w	r8, r8, #1
 8017658:	e7e6      	b.n	8017628 <_printf_float+0x238>
 801765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765c:	2b00      	cmp	r3, #0
 801765e:	dc2b      	bgt.n	80176b8 <_printf_float+0x2c8>
 8017660:	2301      	movs	r3, #1
 8017662:	4a26      	ldr	r2, [pc, #152]	; (80176fc <_printf_float+0x30c>)
 8017664:	4631      	mov	r1, r6
 8017666:	4628      	mov	r0, r5
 8017668:	47b8      	blx	r7
 801766a:	3001      	adds	r0, #1
 801766c:	f43f af1d 	beq.w	80174aa <_printf_float+0xba>
 8017670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017672:	b923      	cbnz	r3, 801767e <_printf_float+0x28e>
 8017674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017676:	b913      	cbnz	r3, 801767e <_printf_float+0x28e>
 8017678:	6823      	ldr	r3, [r4, #0]
 801767a:	07d9      	lsls	r1, r3, #31
 801767c:	d5d8      	bpl.n	8017630 <_printf_float+0x240>
 801767e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017682:	4631      	mov	r1, r6
 8017684:	4628      	mov	r0, r5
 8017686:	47b8      	blx	r7
 8017688:	3001      	adds	r0, #1
 801768a:	f43f af0e 	beq.w	80174aa <_printf_float+0xba>
 801768e:	f04f 0900 	mov.w	r9, #0
 8017692:	f104 0a1a 	add.w	sl, r4, #26
 8017696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017698:	425b      	negs	r3, r3
 801769a:	454b      	cmp	r3, r9
 801769c:	dc01      	bgt.n	80176a2 <_printf_float+0x2b2>
 801769e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176a0:	e794      	b.n	80175cc <_printf_float+0x1dc>
 80176a2:	2301      	movs	r3, #1
 80176a4:	4652      	mov	r2, sl
 80176a6:	4631      	mov	r1, r6
 80176a8:	4628      	mov	r0, r5
 80176aa:	47b8      	blx	r7
 80176ac:	3001      	adds	r0, #1
 80176ae:	f43f aefc 	beq.w	80174aa <_printf_float+0xba>
 80176b2:	f109 0901 	add.w	r9, r9, #1
 80176b6:	e7ee      	b.n	8017696 <_printf_float+0x2a6>
 80176b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80176bc:	429a      	cmp	r2, r3
 80176be:	bfa8      	it	ge
 80176c0:	461a      	movge	r2, r3
 80176c2:	2a00      	cmp	r2, #0
 80176c4:	4691      	mov	r9, r2
 80176c6:	dd07      	ble.n	80176d8 <_printf_float+0x2e8>
 80176c8:	4613      	mov	r3, r2
 80176ca:	4631      	mov	r1, r6
 80176cc:	4642      	mov	r2, r8
 80176ce:	4628      	mov	r0, r5
 80176d0:	47b8      	blx	r7
 80176d2:	3001      	adds	r0, #1
 80176d4:	f43f aee9 	beq.w	80174aa <_printf_float+0xba>
 80176d8:	f104 031a 	add.w	r3, r4, #26
 80176dc:	f04f 0b00 	mov.w	fp, #0
 80176e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80176e4:	9306      	str	r3, [sp, #24]
 80176e6:	e015      	b.n	8017714 <_printf_float+0x324>
 80176e8:	7fefffff 	.word	0x7fefffff
 80176ec:	0801e2d4 	.word	0x0801e2d4
 80176f0:	0801e2d0 	.word	0x0801e2d0
 80176f4:	0801e2dc 	.word	0x0801e2dc
 80176f8:	0801e2d8 	.word	0x0801e2d8
 80176fc:	0801e2e0 	.word	0x0801e2e0
 8017700:	2301      	movs	r3, #1
 8017702:	9a06      	ldr	r2, [sp, #24]
 8017704:	4631      	mov	r1, r6
 8017706:	4628      	mov	r0, r5
 8017708:	47b8      	blx	r7
 801770a:	3001      	adds	r0, #1
 801770c:	f43f aecd 	beq.w	80174aa <_printf_float+0xba>
 8017710:	f10b 0b01 	add.w	fp, fp, #1
 8017714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017718:	ebaa 0309 	sub.w	r3, sl, r9
 801771c:	455b      	cmp	r3, fp
 801771e:	dcef      	bgt.n	8017700 <_printf_float+0x310>
 8017720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017724:	429a      	cmp	r2, r3
 8017726:	44d0      	add	r8, sl
 8017728:	db15      	blt.n	8017756 <_printf_float+0x366>
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	07da      	lsls	r2, r3, #31
 801772e:	d412      	bmi.n	8017756 <_printf_float+0x366>
 8017730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017734:	eba3 020a 	sub.w	r2, r3, sl
 8017738:	eba3 0a01 	sub.w	sl, r3, r1
 801773c:	4592      	cmp	sl, r2
 801773e:	bfa8      	it	ge
 8017740:	4692      	movge	sl, r2
 8017742:	f1ba 0f00 	cmp.w	sl, #0
 8017746:	dc0e      	bgt.n	8017766 <_printf_float+0x376>
 8017748:	f04f 0800 	mov.w	r8, #0
 801774c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017750:	f104 091a 	add.w	r9, r4, #26
 8017754:	e019      	b.n	801778a <_printf_float+0x39a>
 8017756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801775a:	4631      	mov	r1, r6
 801775c:	4628      	mov	r0, r5
 801775e:	47b8      	blx	r7
 8017760:	3001      	adds	r0, #1
 8017762:	d1e5      	bne.n	8017730 <_printf_float+0x340>
 8017764:	e6a1      	b.n	80174aa <_printf_float+0xba>
 8017766:	4653      	mov	r3, sl
 8017768:	4642      	mov	r2, r8
 801776a:	4631      	mov	r1, r6
 801776c:	4628      	mov	r0, r5
 801776e:	47b8      	blx	r7
 8017770:	3001      	adds	r0, #1
 8017772:	d1e9      	bne.n	8017748 <_printf_float+0x358>
 8017774:	e699      	b.n	80174aa <_printf_float+0xba>
 8017776:	2301      	movs	r3, #1
 8017778:	464a      	mov	r2, r9
 801777a:	4631      	mov	r1, r6
 801777c:	4628      	mov	r0, r5
 801777e:	47b8      	blx	r7
 8017780:	3001      	adds	r0, #1
 8017782:	f43f ae92 	beq.w	80174aa <_printf_float+0xba>
 8017786:	f108 0801 	add.w	r8, r8, #1
 801778a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801778e:	1a9b      	subs	r3, r3, r2
 8017790:	eba3 030a 	sub.w	r3, r3, sl
 8017794:	4543      	cmp	r3, r8
 8017796:	dcee      	bgt.n	8017776 <_printf_float+0x386>
 8017798:	e74a      	b.n	8017630 <_printf_float+0x240>
 801779a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801779c:	2a01      	cmp	r2, #1
 801779e:	dc01      	bgt.n	80177a4 <_printf_float+0x3b4>
 80177a0:	07db      	lsls	r3, r3, #31
 80177a2:	d53a      	bpl.n	801781a <_printf_float+0x42a>
 80177a4:	2301      	movs	r3, #1
 80177a6:	4642      	mov	r2, r8
 80177a8:	4631      	mov	r1, r6
 80177aa:	4628      	mov	r0, r5
 80177ac:	47b8      	blx	r7
 80177ae:	3001      	adds	r0, #1
 80177b0:	f43f ae7b 	beq.w	80174aa <_printf_float+0xba>
 80177b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80177b8:	4631      	mov	r1, r6
 80177ba:	4628      	mov	r0, r5
 80177bc:	47b8      	blx	r7
 80177be:	3001      	adds	r0, #1
 80177c0:	f108 0801 	add.w	r8, r8, #1
 80177c4:	f43f ae71 	beq.w	80174aa <_printf_float+0xba>
 80177c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177ca:	2200      	movs	r2, #0
 80177cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80177d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80177d4:	2300      	movs	r3, #0
 80177d6:	f7e9 f987 	bl	8000ae8 <__aeabi_dcmpeq>
 80177da:	b9c8      	cbnz	r0, 8017810 <_printf_float+0x420>
 80177dc:	4653      	mov	r3, sl
 80177de:	4642      	mov	r2, r8
 80177e0:	4631      	mov	r1, r6
 80177e2:	4628      	mov	r0, r5
 80177e4:	47b8      	blx	r7
 80177e6:	3001      	adds	r0, #1
 80177e8:	d10e      	bne.n	8017808 <_printf_float+0x418>
 80177ea:	e65e      	b.n	80174aa <_printf_float+0xba>
 80177ec:	2301      	movs	r3, #1
 80177ee:	4652      	mov	r2, sl
 80177f0:	4631      	mov	r1, r6
 80177f2:	4628      	mov	r0, r5
 80177f4:	47b8      	blx	r7
 80177f6:	3001      	adds	r0, #1
 80177f8:	f43f ae57 	beq.w	80174aa <_printf_float+0xba>
 80177fc:	f108 0801 	add.w	r8, r8, #1
 8017800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017802:	3b01      	subs	r3, #1
 8017804:	4543      	cmp	r3, r8
 8017806:	dcf1      	bgt.n	80177ec <_printf_float+0x3fc>
 8017808:	464b      	mov	r3, r9
 801780a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801780e:	e6de      	b.n	80175ce <_printf_float+0x1de>
 8017810:	f04f 0800 	mov.w	r8, #0
 8017814:	f104 0a1a 	add.w	sl, r4, #26
 8017818:	e7f2      	b.n	8017800 <_printf_float+0x410>
 801781a:	2301      	movs	r3, #1
 801781c:	e7df      	b.n	80177de <_printf_float+0x3ee>
 801781e:	2301      	movs	r3, #1
 8017820:	464a      	mov	r2, r9
 8017822:	4631      	mov	r1, r6
 8017824:	4628      	mov	r0, r5
 8017826:	47b8      	blx	r7
 8017828:	3001      	adds	r0, #1
 801782a:	f43f ae3e 	beq.w	80174aa <_printf_float+0xba>
 801782e:	f108 0801 	add.w	r8, r8, #1
 8017832:	68e3      	ldr	r3, [r4, #12]
 8017834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017836:	1a9b      	subs	r3, r3, r2
 8017838:	4543      	cmp	r3, r8
 801783a:	dcf0      	bgt.n	801781e <_printf_float+0x42e>
 801783c:	e6fc      	b.n	8017638 <_printf_float+0x248>
 801783e:	f04f 0800 	mov.w	r8, #0
 8017842:	f104 0919 	add.w	r9, r4, #25
 8017846:	e7f4      	b.n	8017832 <_printf_float+0x442>
 8017848:	2900      	cmp	r1, #0
 801784a:	f43f ae8b 	beq.w	8017564 <_printf_float+0x174>
 801784e:	2300      	movs	r3, #0
 8017850:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8017854:	ab09      	add	r3, sp, #36	; 0x24
 8017856:	9300      	str	r3, [sp, #0]
 8017858:	ec49 8b10 	vmov	d0, r8, r9
 801785c:	6022      	str	r2, [r4, #0]
 801785e:	f8cd a004 	str.w	sl, [sp, #4]
 8017862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017866:	4628      	mov	r0, r5
 8017868:	f7ff fd2e 	bl	80172c8 <__cvt>
 801786c:	4680      	mov	r8, r0
 801786e:	e648      	b.n	8017502 <_printf_float+0x112>

08017870 <_printf_common>:
 8017870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017874:	4691      	mov	r9, r2
 8017876:	461f      	mov	r7, r3
 8017878:	688a      	ldr	r2, [r1, #8]
 801787a:	690b      	ldr	r3, [r1, #16]
 801787c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017880:	4293      	cmp	r3, r2
 8017882:	bfb8      	it	lt
 8017884:	4613      	movlt	r3, r2
 8017886:	f8c9 3000 	str.w	r3, [r9]
 801788a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801788e:	4606      	mov	r6, r0
 8017890:	460c      	mov	r4, r1
 8017892:	b112      	cbz	r2, 801789a <_printf_common+0x2a>
 8017894:	3301      	adds	r3, #1
 8017896:	f8c9 3000 	str.w	r3, [r9]
 801789a:	6823      	ldr	r3, [r4, #0]
 801789c:	0699      	lsls	r1, r3, #26
 801789e:	bf42      	ittt	mi
 80178a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80178a4:	3302      	addmi	r3, #2
 80178a6:	f8c9 3000 	strmi.w	r3, [r9]
 80178aa:	6825      	ldr	r5, [r4, #0]
 80178ac:	f015 0506 	ands.w	r5, r5, #6
 80178b0:	d107      	bne.n	80178c2 <_printf_common+0x52>
 80178b2:	f104 0a19 	add.w	sl, r4, #25
 80178b6:	68e3      	ldr	r3, [r4, #12]
 80178b8:	f8d9 2000 	ldr.w	r2, [r9]
 80178bc:	1a9b      	subs	r3, r3, r2
 80178be:	42ab      	cmp	r3, r5
 80178c0:	dc28      	bgt.n	8017914 <_printf_common+0xa4>
 80178c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80178c6:	6822      	ldr	r2, [r4, #0]
 80178c8:	3300      	adds	r3, #0
 80178ca:	bf18      	it	ne
 80178cc:	2301      	movne	r3, #1
 80178ce:	0692      	lsls	r2, r2, #26
 80178d0:	d42d      	bmi.n	801792e <_printf_common+0xbe>
 80178d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178d6:	4639      	mov	r1, r7
 80178d8:	4630      	mov	r0, r6
 80178da:	47c0      	blx	r8
 80178dc:	3001      	adds	r0, #1
 80178de:	d020      	beq.n	8017922 <_printf_common+0xb2>
 80178e0:	6823      	ldr	r3, [r4, #0]
 80178e2:	68e5      	ldr	r5, [r4, #12]
 80178e4:	f8d9 2000 	ldr.w	r2, [r9]
 80178e8:	f003 0306 	and.w	r3, r3, #6
 80178ec:	2b04      	cmp	r3, #4
 80178ee:	bf08      	it	eq
 80178f0:	1aad      	subeq	r5, r5, r2
 80178f2:	68a3      	ldr	r3, [r4, #8]
 80178f4:	6922      	ldr	r2, [r4, #16]
 80178f6:	bf0c      	ite	eq
 80178f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178fc:	2500      	movne	r5, #0
 80178fe:	4293      	cmp	r3, r2
 8017900:	bfc4      	itt	gt
 8017902:	1a9b      	subgt	r3, r3, r2
 8017904:	18ed      	addgt	r5, r5, r3
 8017906:	f04f 0900 	mov.w	r9, #0
 801790a:	341a      	adds	r4, #26
 801790c:	454d      	cmp	r5, r9
 801790e:	d11a      	bne.n	8017946 <_printf_common+0xd6>
 8017910:	2000      	movs	r0, #0
 8017912:	e008      	b.n	8017926 <_printf_common+0xb6>
 8017914:	2301      	movs	r3, #1
 8017916:	4652      	mov	r2, sl
 8017918:	4639      	mov	r1, r7
 801791a:	4630      	mov	r0, r6
 801791c:	47c0      	blx	r8
 801791e:	3001      	adds	r0, #1
 8017920:	d103      	bne.n	801792a <_printf_common+0xba>
 8017922:	f04f 30ff 	mov.w	r0, #4294967295
 8017926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801792a:	3501      	adds	r5, #1
 801792c:	e7c3      	b.n	80178b6 <_printf_common+0x46>
 801792e:	18e1      	adds	r1, r4, r3
 8017930:	1c5a      	adds	r2, r3, #1
 8017932:	2030      	movs	r0, #48	; 0x30
 8017934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017938:	4422      	add	r2, r4
 801793a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801793e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017942:	3302      	adds	r3, #2
 8017944:	e7c5      	b.n	80178d2 <_printf_common+0x62>
 8017946:	2301      	movs	r3, #1
 8017948:	4622      	mov	r2, r4
 801794a:	4639      	mov	r1, r7
 801794c:	4630      	mov	r0, r6
 801794e:	47c0      	blx	r8
 8017950:	3001      	adds	r0, #1
 8017952:	d0e6      	beq.n	8017922 <_printf_common+0xb2>
 8017954:	f109 0901 	add.w	r9, r9, #1
 8017958:	e7d8      	b.n	801790c <_printf_common+0x9c>
	...

0801795c <_printf_i>:
 801795c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017964:	460c      	mov	r4, r1
 8017966:	7e09      	ldrb	r1, [r1, #24]
 8017968:	b085      	sub	sp, #20
 801796a:	296e      	cmp	r1, #110	; 0x6e
 801796c:	4617      	mov	r7, r2
 801796e:	4606      	mov	r6, r0
 8017970:	4698      	mov	r8, r3
 8017972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017974:	f000 80b3 	beq.w	8017ade <_printf_i+0x182>
 8017978:	d822      	bhi.n	80179c0 <_printf_i+0x64>
 801797a:	2963      	cmp	r1, #99	; 0x63
 801797c:	d036      	beq.n	80179ec <_printf_i+0x90>
 801797e:	d80a      	bhi.n	8017996 <_printf_i+0x3a>
 8017980:	2900      	cmp	r1, #0
 8017982:	f000 80b9 	beq.w	8017af8 <_printf_i+0x19c>
 8017986:	2958      	cmp	r1, #88	; 0x58
 8017988:	f000 8083 	beq.w	8017a92 <_printf_i+0x136>
 801798c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017994:	e032      	b.n	80179fc <_printf_i+0xa0>
 8017996:	2964      	cmp	r1, #100	; 0x64
 8017998:	d001      	beq.n	801799e <_printf_i+0x42>
 801799a:	2969      	cmp	r1, #105	; 0x69
 801799c:	d1f6      	bne.n	801798c <_printf_i+0x30>
 801799e:	6820      	ldr	r0, [r4, #0]
 80179a0:	6813      	ldr	r3, [r2, #0]
 80179a2:	0605      	lsls	r5, r0, #24
 80179a4:	f103 0104 	add.w	r1, r3, #4
 80179a8:	d52a      	bpl.n	8017a00 <_printf_i+0xa4>
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	6011      	str	r1, [r2, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	da03      	bge.n	80179ba <_printf_i+0x5e>
 80179b2:	222d      	movs	r2, #45	; 0x2d
 80179b4:	425b      	negs	r3, r3
 80179b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80179ba:	486f      	ldr	r0, [pc, #444]	; (8017b78 <_printf_i+0x21c>)
 80179bc:	220a      	movs	r2, #10
 80179be:	e039      	b.n	8017a34 <_printf_i+0xd8>
 80179c0:	2973      	cmp	r1, #115	; 0x73
 80179c2:	f000 809d 	beq.w	8017b00 <_printf_i+0x1a4>
 80179c6:	d808      	bhi.n	80179da <_printf_i+0x7e>
 80179c8:	296f      	cmp	r1, #111	; 0x6f
 80179ca:	d020      	beq.n	8017a0e <_printf_i+0xb2>
 80179cc:	2970      	cmp	r1, #112	; 0x70
 80179ce:	d1dd      	bne.n	801798c <_printf_i+0x30>
 80179d0:	6823      	ldr	r3, [r4, #0]
 80179d2:	f043 0320 	orr.w	r3, r3, #32
 80179d6:	6023      	str	r3, [r4, #0]
 80179d8:	e003      	b.n	80179e2 <_printf_i+0x86>
 80179da:	2975      	cmp	r1, #117	; 0x75
 80179dc:	d017      	beq.n	8017a0e <_printf_i+0xb2>
 80179de:	2978      	cmp	r1, #120	; 0x78
 80179e0:	d1d4      	bne.n	801798c <_printf_i+0x30>
 80179e2:	2378      	movs	r3, #120	; 0x78
 80179e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80179e8:	4864      	ldr	r0, [pc, #400]	; (8017b7c <_printf_i+0x220>)
 80179ea:	e055      	b.n	8017a98 <_printf_i+0x13c>
 80179ec:	6813      	ldr	r3, [r2, #0]
 80179ee:	1d19      	adds	r1, r3, #4
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	6011      	str	r1, [r2, #0]
 80179f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179fc:	2301      	movs	r3, #1
 80179fe:	e08c      	b.n	8017b1a <_printf_i+0x1be>
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	6011      	str	r1, [r2, #0]
 8017a04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a08:	bf18      	it	ne
 8017a0a:	b21b      	sxthne	r3, r3
 8017a0c:	e7cf      	b.n	80179ae <_printf_i+0x52>
 8017a0e:	6813      	ldr	r3, [r2, #0]
 8017a10:	6825      	ldr	r5, [r4, #0]
 8017a12:	1d18      	adds	r0, r3, #4
 8017a14:	6010      	str	r0, [r2, #0]
 8017a16:	0628      	lsls	r0, r5, #24
 8017a18:	d501      	bpl.n	8017a1e <_printf_i+0xc2>
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	e002      	b.n	8017a24 <_printf_i+0xc8>
 8017a1e:	0668      	lsls	r0, r5, #25
 8017a20:	d5fb      	bpl.n	8017a1a <_printf_i+0xbe>
 8017a22:	881b      	ldrh	r3, [r3, #0]
 8017a24:	4854      	ldr	r0, [pc, #336]	; (8017b78 <_printf_i+0x21c>)
 8017a26:	296f      	cmp	r1, #111	; 0x6f
 8017a28:	bf14      	ite	ne
 8017a2a:	220a      	movne	r2, #10
 8017a2c:	2208      	moveq	r2, #8
 8017a2e:	2100      	movs	r1, #0
 8017a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a34:	6865      	ldr	r5, [r4, #4]
 8017a36:	60a5      	str	r5, [r4, #8]
 8017a38:	2d00      	cmp	r5, #0
 8017a3a:	f2c0 8095 	blt.w	8017b68 <_printf_i+0x20c>
 8017a3e:	6821      	ldr	r1, [r4, #0]
 8017a40:	f021 0104 	bic.w	r1, r1, #4
 8017a44:	6021      	str	r1, [r4, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d13d      	bne.n	8017ac6 <_printf_i+0x16a>
 8017a4a:	2d00      	cmp	r5, #0
 8017a4c:	f040 808e 	bne.w	8017b6c <_printf_i+0x210>
 8017a50:	4665      	mov	r5, ip
 8017a52:	2a08      	cmp	r2, #8
 8017a54:	d10b      	bne.n	8017a6e <_printf_i+0x112>
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	07db      	lsls	r3, r3, #31
 8017a5a:	d508      	bpl.n	8017a6e <_printf_i+0x112>
 8017a5c:	6923      	ldr	r3, [r4, #16]
 8017a5e:	6862      	ldr	r2, [r4, #4]
 8017a60:	429a      	cmp	r2, r3
 8017a62:	bfde      	ittt	le
 8017a64:	2330      	movle	r3, #48	; 0x30
 8017a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a6e:	ebac 0305 	sub.w	r3, ip, r5
 8017a72:	6123      	str	r3, [r4, #16]
 8017a74:	f8cd 8000 	str.w	r8, [sp]
 8017a78:	463b      	mov	r3, r7
 8017a7a:	aa03      	add	r2, sp, #12
 8017a7c:	4621      	mov	r1, r4
 8017a7e:	4630      	mov	r0, r6
 8017a80:	f7ff fef6 	bl	8017870 <_printf_common>
 8017a84:	3001      	adds	r0, #1
 8017a86:	d14d      	bne.n	8017b24 <_printf_i+0x1c8>
 8017a88:	f04f 30ff 	mov.w	r0, #4294967295
 8017a8c:	b005      	add	sp, #20
 8017a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a92:	4839      	ldr	r0, [pc, #228]	; (8017b78 <_printf_i+0x21c>)
 8017a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017a98:	6813      	ldr	r3, [r2, #0]
 8017a9a:	6821      	ldr	r1, [r4, #0]
 8017a9c:	1d1d      	adds	r5, r3, #4
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	6015      	str	r5, [r2, #0]
 8017aa2:	060a      	lsls	r2, r1, #24
 8017aa4:	d50b      	bpl.n	8017abe <_printf_i+0x162>
 8017aa6:	07ca      	lsls	r2, r1, #31
 8017aa8:	bf44      	itt	mi
 8017aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8017aae:	6021      	strmi	r1, [r4, #0]
 8017ab0:	b91b      	cbnz	r3, 8017aba <_printf_i+0x15e>
 8017ab2:	6822      	ldr	r2, [r4, #0]
 8017ab4:	f022 0220 	bic.w	r2, r2, #32
 8017ab8:	6022      	str	r2, [r4, #0]
 8017aba:	2210      	movs	r2, #16
 8017abc:	e7b7      	b.n	8017a2e <_printf_i+0xd2>
 8017abe:	064d      	lsls	r5, r1, #25
 8017ac0:	bf48      	it	mi
 8017ac2:	b29b      	uxthmi	r3, r3
 8017ac4:	e7ef      	b.n	8017aa6 <_printf_i+0x14a>
 8017ac6:	4665      	mov	r5, ip
 8017ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8017acc:	fb02 3311 	mls	r3, r2, r1, r3
 8017ad0:	5cc3      	ldrb	r3, [r0, r3]
 8017ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017ad6:	460b      	mov	r3, r1
 8017ad8:	2900      	cmp	r1, #0
 8017ada:	d1f5      	bne.n	8017ac8 <_printf_i+0x16c>
 8017adc:	e7b9      	b.n	8017a52 <_printf_i+0xf6>
 8017ade:	6813      	ldr	r3, [r2, #0]
 8017ae0:	6825      	ldr	r5, [r4, #0]
 8017ae2:	6961      	ldr	r1, [r4, #20]
 8017ae4:	1d18      	adds	r0, r3, #4
 8017ae6:	6010      	str	r0, [r2, #0]
 8017ae8:	0628      	lsls	r0, r5, #24
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	d501      	bpl.n	8017af2 <_printf_i+0x196>
 8017aee:	6019      	str	r1, [r3, #0]
 8017af0:	e002      	b.n	8017af8 <_printf_i+0x19c>
 8017af2:	066a      	lsls	r2, r5, #25
 8017af4:	d5fb      	bpl.n	8017aee <_printf_i+0x192>
 8017af6:	8019      	strh	r1, [r3, #0]
 8017af8:	2300      	movs	r3, #0
 8017afa:	6123      	str	r3, [r4, #16]
 8017afc:	4665      	mov	r5, ip
 8017afe:	e7b9      	b.n	8017a74 <_printf_i+0x118>
 8017b00:	6813      	ldr	r3, [r2, #0]
 8017b02:	1d19      	adds	r1, r3, #4
 8017b04:	6011      	str	r1, [r2, #0]
 8017b06:	681d      	ldr	r5, [r3, #0]
 8017b08:	6862      	ldr	r2, [r4, #4]
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	f7e8 fb77 	bl	8000200 <memchr>
 8017b12:	b108      	cbz	r0, 8017b18 <_printf_i+0x1bc>
 8017b14:	1b40      	subs	r0, r0, r5
 8017b16:	6060      	str	r0, [r4, #4]
 8017b18:	6863      	ldr	r3, [r4, #4]
 8017b1a:	6123      	str	r3, [r4, #16]
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b22:	e7a7      	b.n	8017a74 <_printf_i+0x118>
 8017b24:	6923      	ldr	r3, [r4, #16]
 8017b26:	462a      	mov	r2, r5
 8017b28:	4639      	mov	r1, r7
 8017b2a:	4630      	mov	r0, r6
 8017b2c:	47c0      	blx	r8
 8017b2e:	3001      	adds	r0, #1
 8017b30:	d0aa      	beq.n	8017a88 <_printf_i+0x12c>
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	079b      	lsls	r3, r3, #30
 8017b36:	d413      	bmi.n	8017b60 <_printf_i+0x204>
 8017b38:	68e0      	ldr	r0, [r4, #12]
 8017b3a:	9b03      	ldr	r3, [sp, #12]
 8017b3c:	4298      	cmp	r0, r3
 8017b3e:	bfb8      	it	lt
 8017b40:	4618      	movlt	r0, r3
 8017b42:	e7a3      	b.n	8017a8c <_printf_i+0x130>
 8017b44:	2301      	movs	r3, #1
 8017b46:	464a      	mov	r2, r9
 8017b48:	4639      	mov	r1, r7
 8017b4a:	4630      	mov	r0, r6
 8017b4c:	47c0      	blx	r8
 8017b4e:	3001      	adds	r0, #1
 8017b50:	d09a      	beq.n	8017a88 <_printf_i+0x12c>
 8017b52:	3501      	adds	r5, #1
 8017b54:	68e3      	ldr	r3, [r4, #12]
 8017b56:	9a03      	ldr	r2, [sp, #12]
 8017b58:	1a9b      	subs	r3, r3, r2
 8017b5a:	42ab      	cmp	r3, r5
 8017b5c:	dcf2      	bgt.n	8017b44 <_printf_i+0x1e8>
 8017b5e:	e7eb      	b.n	8017b38 <_printf_i+0x1dc>
 8017b60:	2500      	movs	r5, #0
 8017b62:	f104 0919 	add.w	r9, r4, #25
 8017b66:	e7f5      	b.n	8017b54 <_printf_i+0x1f8>
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d1ac      	bne.n	8017ac6 <_printf_i+0x16a>
 8017b6c:	7803      	ldrb	r3, [r0, #0]
 8017b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b76:	e76c      	b.n	8017a52 <_printf_i+0xf6>
 8017b78:	0801e2e2 	.word	0x0801e2e2
 8017b7c:	0801e2f3 	.word	0x0801e2f3

08017b80 <_scanf_float>:
 8017b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b84:	469a      	mov	sl, r3
 8017b86:	688b      	ldr	r3, [r1, #8]
 8017b88:	4616      	mov	r6, r2
 8017b8a:	1e5a      	subs	r2, r3, #1
 8017b8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017b90:	b087      	sub	sp, #28
 8017b92:	bf83      	ittte	hi
 8017b94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8017b98:	189b      	addhi	r3, r3, r2
 8017b9a:	9301      	strhi	r3, [sp, #4]
 8017b9c:	2300      	movls	r3, #0
 8017b9e:	bf86      	itte	hi
 8017ba0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017ba4:	608b      	strhi	r3, [r1, #8]
 8017ba6:	9301      	strls	r3, [sp, #4]
 8017ba8:	680b      	ldr	r3, [r1, #0]
 8017baa:	4688      	mov	r8, r1
 8017bac:	f04f 0b00 	mov.w	fp, #0
 8017bb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017bb4:	f848 3b1c 	str.w	r3, [r8], #28
 8017bb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8017bbc:	4607      	mov	r7, r0
 8017bbe:	460c      	mov	r4, r1
 8017bc0:	4645      	mov	r5, r8
 8017bc2:	465a      	mov	r2, fp
 8017bc4:	46d9      	mov	r9, fp
 8017bc6:	f8cd b008 	str.w	fp, [sp, #8]
 8017bca:	68a1      	ldr	r1, [r4, #8]
 8017bcc:	b181      	cbz	r1, 8017bf0 <_scanf_float+0x70>
 8017bce:	6833      	ldr	r3, [r6, #0]
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	2b49      	cmp	r3, #73	; 0x49
 8017bd4:	d071      	beq.n	8017cba <_scanf_float+0x13a>
 8017bd6:	d84d      	bhi.n	8017c74 <_scanf_float+0xf4>
 8017bd8:	2b39      	cmp	r3, #57	; 0x39
 8017bda:	d840      	bhi.n	8017c5e <_scanf_float+0xde>
 8017bdc:	2b31      	cmp	r3, #49	; 0x31
 8017bde:	f080 8088 	bcs.w	8017cf2 <_scanf_float+0x172>
 8017be2:	2b2d      	cmp	r3, #45	; 0x2d
 8017be4:	f000 8090 	beq.w	8017d08 <_scanf_float+0x188>
 8017be8:	d815      	bhi.n	8017c16 <_scanf_float+0x96>
 8017bea:	2b2b      	cmp	r3, #43	; 0x2b
 8017bec:	f000 808c 	beq.w	8017d08 <_scanf_float+0x188>
 8017bf0:	f1b9 0f00 	cmp.w	r9, #0
 8017bf4:	d003      	beq.n	8017bfe <_scanf_float+0x7e>
 8017bf6:	6823      	ldr	r3, [r4, #0]
 8017bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	3a01      	subs	r2, #1
 8017c00:	2a01      	cmp	r2, #1
 8017c02:	f200 80ea 	bhi.w	8017dda <_scanf_float+0x25a>
 8017c06:	4545      	cmp	r5, r8
 8017c08:	f200 80dc 	bhi.w	8017dc4 <_scanf_float+0x244>
 8017c0c:	2601      	movs	r6, #1
 8017c0e:	4630      	mov	r0, r6
 8017c10:	b007      	add	sp, #28
 8017c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c16:	2b2e      	cmp	r3, #46	; 0x2e
 8017c18:	f000 809f 	beq.w	8017d5a <_scanf_float+0x1da>
 8017c1c:	2b30      	cmp	r3, #48	; 0x30
 8017c1e:	d1e7      	bne.n	8017bf0 <_scanf_float+0x70>
 8017c20:	6820      	ldr	r0, [r4, #0]
 8017c22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8017c26:	d064      	beq.n	8017cf2 <_scanf_float+0x172>
 8017c28:	9b01      	ldr	r3, [sp, #4]
 8017c2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8017c2e:	6020      	str	r0, [r4, #0]
 8017c30:	f109 0901 	add.w	r9, r9, #1
 8017c34:	b11b      	cbz	r3, 8017c3e <_scanf_float+0xbe>
 8017c36:	3b01      	subs	r3, #1
 8017c38:	3101      	adds	r1, #1
 8017c3a:	9301      	str	r3, [sp, #4]
 8017c3c:	60a1      	str	r1, [r4, #8]
 8017c3e:	68a3      	ldr	r3, [r4, #8]
 8017c40:	3b01      	subs	r3, #1
 8017c42:	60a3      	str	r3, [r4, #8]
 8017c44:	6923      	ldr	r3, [r4, #16]
 8017c46:	3301      	adds	r3, #1
 8017c48:	6123      	str	r3, [r4, #16]
 8017c4a:	6873      	ldr	r3, [r6, #4]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	6073      	str	r3, [r6, #4]
 8017c52:	f340 80ac 	ble.w	8017dae <_scanf_float+0x22e>
 8017c56:	6833      	ldr	r3, [r6, #0]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	6033      	str	r3, [r6, #0]
 8017c5c:	e7b5      	b.n	8017bca <_scanf_float+0x4a>
 8017c5e:	2b45      	cmp	r3, #69	; 0x45
 8017c60:	f000 8085 	beq.w	8017d6e <_scanf_float+0x1ee>
 8017c64:	2b46      	cmp	r3, #70	; 0x46
 8017c66:	d06a      	beq.n	8017d3e <_scanf_float+0x1be>
 8017c68:	2b41      	cmp	r3, #65	; 0x41
 8017c6a:	d1c1      	bne.n	8017bf0 <_scanf_float+0x70>
 8017c6c:	2a01      	cmp	r2, #1
 8017c6e:	d1bf      	bne.n	8017bf0 <_scanf_float+0x70>
 8017c70:	2202      	movs	r2, #2
 8017c72:	e046      	b.n	8017d02 <_scanf_float+0x182>
 8017c74:	2b65      	cmp	r3, #101	; 0x65
 8017c76:	d07a      	beq.n	8017d6e <_scanf_float+0x1ee>
 8017c78:	d818      	bhi.n	8017cac <_scanf_float+0x12c>
 8017c7a:	2b54      	cmp	r3, #84	; 0x54
 8017c7c:	d066      	beq.n	8017d4c <_scanf_float+0x1cc>
 8017c7e:	d811      	bhi.n	8017ca4 <_scanf_float+0x124>
 8017c80:	2b4e      	cmp	r3, #78	; 0x4e
 8017c82:	d1b5      	bne.n	8017bf0 <_scanf_float+0x70>
 8017c84:	2a00      	cmp	r2, #0
 8017c86:	d146      	bne.n	8017d16 <_scanf_float+0x196>
 8017c88:	f1b9 0f00 	cmp.w	r9, #0
 8017c8c:	d145      	bne.n	8017d1a <_scanf_float+0x19a>
 8017c8e:	6821      	ldr	r1, [r4, #0]
 8017c90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017c94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017c98:	d13f      	bne.n	8017d1a <_scanf_float+0x19a>
 8017c9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017c9e:	6021      	str	r1, [r4, #0]
 8017ca0:	2201      	movs	r2, #1
 8017ca2:	e02e      	b.n	8017d02 <_scanf_float+0x182>
 8017ca4:	2b59      	cmp	r3, #89	; 0x59
 8017ca6:	d01e      	beq.n	8017ce6 <_scanf_float+0x166>
 8017ca8:	2b61      	cmp	r3, #97	; 0x61
 8017caa:	e7de      	b.n	8017c6a <_scanf_float+0xea>
 8017cac:	2b6e      	cmp	r3, #110	; 0x6e
 8017cae:	d0e9      	beq.n	8017c84 <_scanf_float+0x104>
 8017cb0:	d815      	bhi.n	8017cde <_scanf_float+0x15e>
 8017cb2:	2b66      	cmp	r3, #102	; 0x66
 8017cb4:	d043      	beq.n	8017d3e <_scanf_float+0x1be>
 8017cb6:	2b69      	cmp	r3, #105	; 0x69
 8017cb8:	d19a      	bne.n	8017bf0 <_scanf_float+0x70>
 8017cba:	f1bb 0f00 	cmp.w	fp, #0
 8017cbe:	d138      	bne.n	8017d32 <_scanf_float+0x1b2>
 8017cc0:	f1b9 0f00 	cmp.w	r9, #0
 8017cc4:	d197      	bne.n	8017bf6 <_scanf_float+0x76>
 8017cc6:	6821      	ldr	r1, [r4, #0]
 8017cc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8017ccc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8017cd0:	d195      	bne.n	8017bfe <_scanf_float+0x7e>
 8017cd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017cd6:	6021      	str	r1, [r4, #0]
 8017cd8:	f04f 0b01 	mov.w	fp, #1
 8017cdc:	e011      	b.n	8017d02 <_scanf_float+0x182>
 8017cde:	2b74      	cmp	r3, #116	; 0x74
 8017ce0:	d034      	beq.n	8017d4c <_scanf_float+0x1cc>
 8017ce2:	2b79      	cmp	r3, #121	; 0x79
 8017ce4:	d184      	bne.n	8017bf0 <_scanf_float+0x70>
 8017ce6:	f1bb 0f07 	cmp.w	fp, #7
 8017cea:	d181      	bne.n	8017bf0 <_scanf_float+0x70>
 8017cec:	f04f 0b08 	mov.w	fp, #8
 8017cf0:	e007      	b.n	8017d02 <_scanf_float+0x182>
 8017cf2:	eb12 0f0b 	cmn.w	r2, fp
 8017cf6:	f47f af7b 	bne.w	8017bf0 <_scanf_float+0x70>
 8017cfa:	6821      	ldr	r1, [r4, #0]
 8017cfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8017d00:	6021      	str	r1, [r4, #0]
 8017d02:	702b      	strb	r3, [r5, #0]
 8017d04:	3501      	adds	r5, #1
 8017d06:	e79a      	b.n	8017c3e <_scanf_float+0xbe>
 8017d08:	6821      	ldr	r1, [r4, #0]
 8017d0a:	0608      	lsls	r0, r1, #24
 8017d0c:	f57f af70 	bpl.w	8017bf0 <_scanf_float+0x70>
 8017d10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017d14:	e7f4      	b.n	8017d00 <_scanf_float+0x180>
 8017d16:	2a02      	cmp	r2, #2
 8017d18:	d047      	beq.n	8017daa <_scanf_float+0x22a>
 8017d1a:	f1bb 0f01 	cmp.w	fp, #1
 8017d1e:	d003      	beq.n	8017d28 <_scanf_float+0x1a8>
 8017d20:	f1bb 0f04 	cmp.w	fp, #4
 8017d24:	f47f af64 	bne.w	8017bf0 <_scanf_float+0x70>
 8017d28:	f10b 0b01 	add.w	fp, fp, #1
 8017d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8017d30:	e7e7      	b.n	8017d02 <_scanf_float+0x182>
 8017d32:	f1bb 0f03 	cmp.w	fp, #3
 8017d36:	d0f7      	beq.n	8017d28 <_scanf_float+0x1a8>
 8017d38:	f1bb 0f05 	cmp.w	fp, #5
 8017d3c:	e7f2      	b.n	8017d24 <_scanf_float+0x1a4>
 8017d3e:	f1bb 0f02 	cmp.w	fp, #2
 8017d42:	f47f af55 	bne.w	8017bf0 <_scanf_float+0x70>
 8017d46:	f04f 0b03 	mov.w	fp, #3
 8017d4a:	e7da      	b.n	8017d02 <_scanf_float+0x182>
 8017d4c:	f1bb 0f06 	cmp.w	fp, #6
 8017d50:	f47f af4e 	bne.w	8017bf0 <_scanf_float+0x70>
 8017d54:	f04f 0b07 	mov.w	fp, #7
 8017d58:	e7d3      	b.n	8017d02 <_scanf_float+0x182>
 8017d5a:	6821      	ldr	r1, [r4, #0]
 8017d5c:	0588      	lsls	r0, r1, #22
 8017d5e:	f57f af47 	bpl.w	8017bf0 <_scanf_float+0x70>
 8017d62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8017d66:	6021      	str	r1, [r4, #0]
 8017d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d6c:	e7c9      	b.n	8017d02 <_scanf_float+0x182>
 8017d6e:	6821      	ldr	r1, [r4, #0]
 8017d70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8017d74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017d78:	d006      	beq.n	8017d88 <_scanf_float+0x208>
 8017d7a:	0548      	lsls	r0, r1, #21
 8017d7c:	f57f af38 	bpl.w	8017bf0 <_scanf_float+0x70>
 8017d80:	f1b9 0f00 	cmp.w	r9, #0
 8017d84:	f43f af3b 	beq.w	8017bfe <_scanf_float+0x7e>
 8017d88:	0588      	lsls	r0, r1, #22
 8017d8a:	bf58      	it	pl
 8017d8c:	9802      	ldrpl	r0, [sp, #8]
 8017d8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8017d92:	bf58      	it	pl
 8017d94:	eba9 0000 	subpl.w	r0, r9, r0
 8017d98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8017d9c:	bf58      	it	pl
 8017d9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8017da2:	6021      	str	r1, [r4, #0]
 8017da4:	f04f 0900 	mov.w	r9, #0
 8017da8:	e7ab      	b.n	8017d02 <_scanf_float+0x182>
 8017daa:	2203      	movs	r2, #3
 8017dac:	e7a9      	b.n	8017d02 <_scanf_float+0x182>
 8017dae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017db2:	9205      	str	r2, [sp, #20]
 8017db4:	4631      	mov	r1, r6
 8017db6:	4638      	mov	r0, r7
 8017db8:	4798      	blx	r3
 8017dba:	9a05      	ldr	r2, [sp, #20]
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	f43f af04 	beq.w	8017bca <_scanf_float+0x4a>
 8017dc2:	e715      	b.n	8017bf0 <_scanf_float+0x70>
 8017dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017dcc:	4632      	mov	r2, r6
 8017dce:	4638      	mov	r0, r7
 8017dd0:	4798      	blx	r3
 8017dd2:	6923      	ldr	r3, [r4, #16]
 8017dd4:	3b01      	subs	r3, #1
 8017dd6:	6123      	str	r3, [r4, #16]
 8017dd8:	e715      	b.n	8017c06 <_scanf_float+0x86>
 8017dda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017dde:	2b06      	cmp	r3, #6
 8017de0:	d80a      	bhi.n	8017df8 <_scanf_float+0x278>
 8017de2:	f1bb 0f02 	cmp.w	fp, #2
 8017de6:	d968      	bls.n	8017eba <_scanf_float+0x33a>
 8017de8:	f1ab 0b03 	sub.w	fp, fp, #3
 8017dec:	fa5f fb8b 	uxtb.w	fp, fp
 8017df0:	eba5 0b0b 	sub.w	fp, r5, fp
 8017df4:	455d      	cmp	r5, fp
 8017df6:	d14b      	bne.n	8017e90 <_scanf_float+0x310>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	05da      	lsls	r2, r3, #23
 8017dfc:	d51f      	bpl.n	8017e3e <_scanf_float+0x2be>
 8017dfe:	055b      	lsls	r3, r3, #21
 8017e00:	d468      	bmi.n	8017ed4 <_scanf_float+0x354>
 8017e02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017e06:	6923      	ldr	r3, [r4, #16]
 8017e08:	2965      	cmp	r1, #101	; 0x65
 8017e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017e0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8017e12:	6123      	str	r3, [r4, #16]
 8017e14:	d00d      	beq.n	8017e32 <_scanf_float+0x2b2>
 8017e16:	2945      	cmp	r1, #69	; 0x45
 8017e18:	d00b      	beq.n	8017e32 <_scanf_float+0x2b2>
 8017e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e1e:	4632      	mov	r2, r6
 8017e20:	4638      	mov	r0, r7
 8017e22:	4798      	blx	r3
 8017e24:	6923      	ldr	r3, [r4, #16]
 8017e26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8017e2a:	3b01      	subs	r3, #1
 8017e2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8017e30:	6123      	str	r3, [r4, #16]
 8017e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e36:	4632      	mov	r2, r6
 8017e38:	4638      	mov	r0, r7
 8017e3a:	4798      	blx	r3
 8017e3c:	465d      	mov	r5, fp
 8017e3e:	6826      	ldr	r6, [r4, #0]
 8017e40:	f016 0610 	ands.w	r6, r6, #16
 8017e44:	d17a      	bne.n	8017f3c <_scanf_float+0x3bc>
 8017e46:	702e      	strb	r6, [r5, #0]
 8017e48:	6823      	ldr	r3, [r4, #0]
 8017e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e52:	d142      	bne.n	8017eda <_scanf_float+0x35a>
 8017e54:	9b02      	ldr	r3, [sp, #8]
 8017e56:	eba9 0303 	sub.w	r3, r9, r3
 8017e5a:	425a      	negs	r2, r3
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d149      	bne.n	8017ef4 <_scanf_float+0x374>
 8017e60:	2200      	movs	r2, #0
 8017e62:	4641      	mov	r1, r8
 8017e64:	4638      	mov	r0, r7
 8017e66:	f000 feff 	bl	8018c68 <_strtod_r>
 8017e6a:	6825      	ldr	r5, [r4, #0]
 8017e6c:	f8da 3000 	ldr.w	r3, [sl]
 8017e70:	f015 0f02 	tst.w	r5, #2
 8017e74:	f103 0204 	add.w	r2, r3, #4
 8017e78:	ec59 8b10 	vmov	r8, r9, d0
 8017e7c:	f8ca 2000 	str.w	r2, [sl]
 8017e80:	d043      	beq.n	8017f0a <_scanf_float+0x38a>
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	e9c3 8900 	strd	r8, r9, [r3]
 8017e88:	68e3      	ldr	r3, [r4, #12]
 8017e8a:	3301      	adds	r3, #1
 8017e8c:	60e3      	str	r3, [r4, #12]
 8017e8e:	e6be      	b.n	8017c0e <_scanf_float+0x8e>
 8017e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017e98:	4632      	mov	r2, r6
 8017e9a:	4638      	mov	r0, r7
 8017e9c:	4798      	blx	r3
 8017e9e:	6923      	ldr	r3, [r4, #16]
 8017ea0:	3b01      	subs	r3, #1
 8017ea2:	6123      	str	r3, [r4, #16]
 8017ea4:	e7a6      	b.n	8017df4 <_scanf_float+0x274>
 8017ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017eaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017eae:	4632      	mov	r2, r6
 8017eb0:	4638      	mov	r0, r7
 8017eb2:	4798      	blx	r3
 8017eb4:	6923      	ldr	r3, [r4, #16]
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	6123      	str	r3, [r4, #16]
 8017eba:	4545      	cmp	r5, r8
 8017ebc:	d8f3      	bhi.n	8017ea6 <_scanf_float+0x326>
 8017ebe:	e6a5      	b.n	8017c0c <_scanf_float+0x8c>
 8017ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ec4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8017ec8:	4632      	mov	r2, r6
 8017eca:	4638      	mov	r0, r7
 8017ecc:	4798      	blx	r3
 8017ece:	6923      	ldr	r3, [r4, #16]
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	6123      	str	r3, [r4, #16]
 8017ed4:	4545      	cmp	r5, r8
 8017ed6:	d8f3      	bhi.n	8017ec0 <_scanf_float+0x340>
 8017ed8:	e698      	b.n	8017c0c <_scanf_float+0x8c>
 8017eda:	9b03      	ldr	r3, [sp, #12]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d0bf      	beq.n	8017e60 <_scanf_float+0x2e0>
 8017ee0:	9904      	ldr	r1, [sp, #16]
 8017ee2:	230a      	movs	r3, #10
 8017ee4:	4632      	mov	r2, r6
 8017ee6:	3101      	adds	r1, #1
 8017ee8:	4638      	mov	r0, r7
 8017eea:	f000 ff5d 	bl	8018da8 <_strtol_r>
 8017eee:	9b03      	ldr	r3, [sp, #12]
 8017ef0:	9d04      	ldr	r5, [sp, #16]
 8017ef2:	1ac2      	subs	r2, r0, r3
 8017ef4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017ef8:	429d      	cmp	r5, r3
 8017efa:	bf28      	it	cs
 8017efc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8017f00:	490f      	ldr	r1, [pc, #60]	; (8017f40 <_scanf_float+0x3c0>)
 8017f02:	4628      	mov	r0, r5
 8017f04:	f000 f834 	bl	8017f70 <siprintf>
 8017f08:	e7aa      	b.n	8017e60 <_scanf_float+0x2e0>
 8017f0a:	f015 0504 	ands.w	r5, r5, #4
 8017f0e:	d1b8      	bne.n	8017e82 <_scanf_float+0x302>
 8017f10:	681f      	ldr	r7, [r3, #0]
 8017f12:	ee10 2a10 	vmov	r2, s0
 8017f16:	464b      	mov	r3, r9
 8017f18:	ee10 0a10 	vmov	r0, s0
 8017f1c:	4649      	mov	r1, r9
 8017f1e:	f7e8 fe15 	bl	8000b4c <__aeabi_dcmpun>
 8017f22:	b128      	cbz	r0, 8017f30 <_scanf_float+0x3b0>
 8017f24:	4628      	mov	r0, r5
 8017f26:	f000 f81d 	bl	8017f64 <nanf>
 8017f2a:	ed87 0a00 	vstr	s0, [r7]
 8017f2e:	e7ab      	b.n	8017e88 <_scanf_float+0x308>
 8017f30:	4640      	mov	r0, r8
 8017f32:	4649      	mov	r1, r9
 8017f34:	f7e8 fe68 	bl	8000c08 <__aeabi_d2f>
 8017f38:	6038      	str	r0, [r7, #0]
 8017f3a:	e7a5      	b.n	8017e88 <_scanf_float+0x308>
 8017f3c:	2600      	movs	r6, #0
 8017f3e:	e666      	b.n	8017c0e <_scanf_float+0x8e>
 8017f40:	0801e304 	.word	0x0801e304

08017f44 <_sbrk_r>:
 8017f44:	b538      	push	{r3, r4, r5, lr}
 8017f46:	4c06      	ldr	r4, [pc, #24]	; (8017f60 <_sbrk_r+0x1c>)
 8017f48:	2300      	movs	r3, #0
 8017f4a:	4605      	mov	r5, r0
 8017f4c:	4608      	mov	r0, r1
 8017f4e:	6023      	str	r3, [r4, #0]
 8017f50:	f7fe fb04 	bl	801655c <_sbrk>
 8017f54:	1c43      	adds	r3, r0, #1
 8017f56:	d102      	bne.n	8017f5e <_sbrk_r+0x1a>
 8017f58:	6823      	ldr	r3, [r4, #0]
 8017f5a:	b103      	cbz	r3, 8017f5e <_sbrk_r+0x1a>
 8017f5c:	602b      	str	r3, [r5, #0]
 8017f5e:	bd38      	pop	{r3, r4, r5, pc}
 8017f60:	2000a5b0 	.word	0x2000a5b0

08017f64 <nanf>:
 8017f64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017f6c <nanf+0x8>
 8017f68:	4770      	bx	lr
 8017f6a:	bf00      	nop
 8017f6c:	7fc00000 	.word	0x7fc00000

08017f70 <siprintf>:
 8017f70:	b40e      	push	{r1, r2, r3}
 8017f72:	b500      	push	{lr}
 8017f74:	b09c      	sub	sp, #112	; 0x70
 8017f76:	ab1d      	add	r3, sp, #116	; 0x74
 8017f78:	9002      	str	r0, [sp, #8]
 8017f7a:	9006      	str	r0, [sp, #24]
 8017f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f80:	4809      	ldr	r0, [pc, #36]	; (8017fa8 <siprintf+0x38>)
 8017f82:	9107      	str	r1, [sp, #28]
 8017f84:	9104      	str	r1, [sp, #16]
 8017f86:	4909      	ldr	r1, [pc, #36]	; (8017fac <siprintf+0x3c>)
 8017f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f8c:	9105      	str	r1, [sp, #20]
 8017f8e:	6800      	ldr	r0, [r0, #0]
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	a902      	add	r1, sp, #8
 8017f94:	f002 fd4a 	bl	801aa2c <_svfiprintf_r>
 8017f98:	9b02      	ldr	r3, [sp, #8]
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	701a      	strb	r2, [r3, #0]
 8017f9e:	b01c      	add	sp, #112	; 0x70
 8017fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017fa4:	b003      	add	sp, #12
 8017fa6:	4770      	bx	lr
 8017fa8:	200001d4 	.word	0x200001d4
 8017fac:	ffff0208 	.word	0xffff0208

08017fb0 <strcat>:
 8017fb0:	b510      	push	{r4, lr}
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	781a      	ldrb	r2, [r3, #0]
 8017fb6:	1c5c      	adds	r4, r3, #1
 8017fb8:	b93a      	cbnz	r2, 8017fca <strcat+0x1a>
 8017fba:	3b01      	subs	r3, #1
 8017fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017fc4:	2a00      	cmp	r2, #0
 8017fc6:	d1f9      	bne.n	8017fbc <strcat+0xc>
 8017fc8:	bd10      	pop	{r4, pc}
 8017fca:	4623      	mov	r3, r4
 8017fcc:	e7f2      	b.n	8017fb4 <strcat+0x4>

08017fce <strchr>:
 8017fce:	b2c9      	uxtb	r1, r1
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017fd6:	b11a      	cbz	r2, 8017fe0 <strchr+0x12>
 8017fd8:	428a      	cmp	r2, r1
 8017fda:	d1f9      	bne.n	8017fd0 <strchr+0x2>
 8017fdc:	4618      	mov	r0, r3
 8017fde:	4770      	bx	lr
 8017fe0:	2900      	cmp	r1, #0
 8017fe2:	bf18      	it	ne
 8017fe4:	2300      	movne	r3, #0
 8017fe6:	e7f9      	b.n	8017fdc <strchr+0xe>

08017fe8 <strcpy>:
 8017fe8:	4603      	mov	r3, r0
 8017fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fee:	f803 2b01 	strb.w	r2, [r3], #1
 8017ff2:	2a00      	cmp	r2, #0
 8017ff4:	d1f9      	bne.n	8017fea <strcpy+0x2>
 8017ff6:	4770      	bx	lr

08017ff8 <strncmp>:
 8017ff8:	b510      	push	{r4, lr}
 8017ffa:	b16a      	cbz	r2, 8018018 <strncmp+0x20>
 8017ffc:	3901      	subs	r1, #1
 8017ffe:	1884      	adds	r4, r0, r2
 8018000:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018004:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018008:	4293      	cmp	r3, r2
 801800a:	d103      	bne.n	8018014 <strncmp+0x1c>
 801800c:	42a0      	cmp	r0, r4
 801800e:	d001      	beq.n	8018014 <strncmp+0x1c>
 8018010:	2b00      	cmp	r3, #0
 8018012:	d1f5      	bne.n	8018000 <strncmp+0x8>
 8018014:	1a98      	subs	r0, r3, r2
 8018016:	bd10      	pop	{r4, pc}
 8018018:	4610      	mov	r0, r2
 801801a:	e7fc      	b.n	8018016 <strncmp+0x1e>

0801801c <strncpy>:
 801801c:	b570      	push	{r4, r5, r6, lr}
 801801e:	3901      	subs	r1, #1
 8018020:	4604      	mov	r4, r0
 8018022:	b902      	cbnz	r2, 8018026 <strncpy+0xa>
 8018024:	bd70      	pop	{r4, r5, r6, pc}
 8018026:	4623      	mov	r3, r4
 8018028:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801802c:	f803 5b01 	strb.w	r5, [r3], #1
 8018030:	1e56      	subs	r6, r2, #1
 8018032:	b92d      	cbnz	r5, 8018040 <strncpy+0x24>
 8018034:	4414      	add	r4, r2
 8018036:	42a3      	cmp	r3, r4
 8018038:	d0f4      	beq.n	8018024 <strncpy+0x8>
 801803a:	f803 5b01 	strb.w	r5, [r3], #1
 801803e:	e7fa      	b.n	8018036 <strncpy+0x1a>
 8018040:	461c      	mov	r4, r3
 8018042:	4632      	mov	r2, r6
 8018044:	e7ed      	b.n	8018022 <strncpy+0x6>

08018046 <sulp>:
 8018046:	b570      	push	{r4, r5, r6, lr}
 8018048:	4604      	mov	r4, r0
 801804a:	460d      	mov	r5, r1
 801804c:	ec45 4b10 	vmov	d0, r4, r5
 8018050:	4616      	mov	r6, r2
 8018052:	f002 fb4f 	bl	801a6f4 <__ulp>
 8018056:	ec51 0b10 	vmov	r0, r1, d0
 801805a:	b17e      	cbz	r6, 801807c <sulp+0x36>
 801805c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018060:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018064:	2b00      	cmp	r3, #0
 8018066:	dd09      	ble.n	801807c <sulp+0x36>
 8018068:	051b      	lsls	r3, r3, #20
 801806a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801806e:	2400      	movs	r4, #0
 8018070:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018074:	4622      	mov	r2, r4
 8018076:	462b      	mov	r3, r5
 8018078:	f7e8 face 	bl	8000618 <__aeabi_dmul>
 801807c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018080 <_strtod_l>:
 8018080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018084:	461f      	mov	r7, r3
 8018086:	b0a1      	sub	sp, #132	; 0x84
 8018088:	2300      	movs	r3, #0
 801808a:	4681      	mov	r9, r0
 801808c:	4638      	mov	r0, r7
 801808e:	460e      	mov	r6, r1
 8018090:	9217      	str	r2, [sp, #92]	; 0x5c
 8018092:	931c      	str	r3, [sp, #112]	; 0x70
 8018094:	f002 f83d 	bl	801a112 <__localeconv_l>
 8018098:	4680      	mov	r8, r0
 801809a:	6800      	ldr	r0, [r0, #0]
 801809c:	f7e8 f8a2 	bl	80001e4 <strlen>
 80180a0:	f04f 0a00 	mov.w	sl, #0
 80180a4:	4604      	mov	r4, r0
 80180a6:	f04f 0b00 	mov.w	fp, #0
 80180aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80180ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80180ae:	781a      	ldrb	r2, [r3, #0]
 80180b0:	2a0d      	cmp	r2, #13
 80180b2:	d832      	bhi.n	801811a <_strtod_l+0x9a>
 80180b4:	2a09      	cmp	r2, #9
 80180b6:	d236      	bcs.n	8018126 <_strtod_l+0xa6>
 80180b8:	2a00      	cmp	r2, #0
 80180ba:	d03e      	beq.n	801813a <_strtod_l+0xba>
 80180bc:	2300      	movs	r3, #0
 80180be:	930d      	str	r3, [sp, #52]	; 0x34
 80180c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80180c2:	782b      	ldrb	r3, [r5, #0]
 80180c4:	2b30      	cmp	r3, #48	; 0x30
 80180c6:	f040 80ac 	bne.w	8018222 <_strtod_l+0x1a2>
 80180ca:	786b      	ldrb	r3, [r5, #1]
 80180cc:	2b58      	cmp	r3, #88	; 0x58
 80180ce:	d001      	beq.n	80180d4 <_strtod_l+0x54>
 80180d0:	2b78      	cmp	r3, #120	; 0x78
 80180d2:	d167      	bne.n	80181a4 <_strtod_l+0x124>
 80180d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180d6:	9301      	str	r3, [sp, #4]
 80180d8:	ab1c      	add	r3, sp, #112	; 0x70
 80180da:	9300      	str	r3, [sp, #0]
 80180dc:	9702      	str	r7, [sp, #8]
 80180de:	ab1d      	add	r3, sp, #116	; 0x74
 80180e0:	4a88      	ldr	r2, [pc, #544]	; (8018304 <_strtod_l+0x284>)
 80180e2:	a91b      	add	r1, sp, #108	; 0x6c
 80180e4:	4648      	mov	r0, r9
 80180e6:	f001 fd3a 	bl	8019b5e <__gethex>
 80180ea:	f010 0407 	ands.w	r4, r0, #7
 80180ee:	4606      	mov	r6, r0
 80180f0:	d005      	beq.n	80180fe <_strtod_l+0x7e>
 80180f2:	2c06      	cmp	r4, #6
 80180f4:	d12b      	bne.n	801814e <_strtod_l+0xce>
 80180f6:	3501      	adds	r5, #1
 80180f8:	2300      	movs	r3, #0
 80180fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80180fc:	930d      	str	r3, [sp, #52]	; 0x34
 80180fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018100:	2b00      	cmp	r3, #0
 8018102:	f040 859a 	bne.w	8018c3a <_strtod_l+0xbba>
 8018106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018108:	b1e3      	cbz	r3, 8018144 <_strtod_l+0xc4>
 801810a:	4652      	mov	r2, sl
 801810c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018110:	ec43 2b10 	vmov	d0, r2, r3
 8018114:	b021      	add	sp, #132	; 0x84
 8018116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801811a:	2a2b      	cmp	r2, #43	; 0x2b
 801811c:	d015      	beq.n	801814a <_strtod_l+0xca>
 801811e:	2a2d      	cmp	r2, #45	; 0x2d
 8018120:	d004      	beq.n	801812c <_strtod_l+0xac>
 8018122:	2a20      	cmp	r2, #32
 8018124:	d1ca      	bne.n	80180bc <_strtod_l+0x3c>
 8018126:	3301      	adds	r3, #1
 8018128:	931b      	str	r3, [sp, #108]	; 0x6c
 801812a:	e7bf      	b.n	80180ac <_strtod_l+0x2c>
 801812c:	2201      	movs	r2, #1
 801812e:	920d      	str	r2, [sp, #52]	; 0x34
 8018130:	1c5a      	adds	r2, r3, #1
 8018132:	921b      	str	r2, [sp, #108]	; 0x6c
 8018134:	785b      	ldrb	r3, [r3, #1]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d1c2      	bne.n	80180c0 <_strtod_l+0x40>
 801813a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801813c:	961b      	str	r6, [sp, #108]	; 0x6c
 801813e:	2b00      	cmp	r3, #0
 8018140:	f040 8579 	bne.w	8018c36 <_strtod_l+0xbb6>
 8018144:	4652      	mov	r2, sl
 8018146:	465b      	mov	r3, fp
 8018148:	e7e2      	b.n	8018110 <_strtod_l+0x90>
 801814a:	2200      	movs	r2, #0
 801814c:	e7ef      	b.n	801812e <_strtod_l+0xae>
 801814e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018150:	b13a      	cbz	r2, 8018162 <_strtod_l+0xe2>
 8018152:	2135      	movs	r1, #53	; 0x35
 8018154:	a81e      	add	r0, sp, #120	; 0x78
 8018156:	f002 fbc5 	bl	801a8e4 <__copybits>
 801815a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801815c:	4648      	mov	r0, r9
 801815e:	f002 f831 	bl	801a1c4 <_Bfree>
 8018162:	3c01      	subs	r4, #1
 8018164:	2c04      	cmp	r4, #4
 8018166:	d806      	bhi.n	8018176 <_strtod_l+0xf6>
 8018168:	e8df f004 	tbb	[pc, r4]
 801816c:	1714030a 	.word	0x1714030a
 8018170:	0a          	.byte	0x0a
 8018171:	00          	.byte	0x00
 8018172:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8018176:	0730      	lsls	r0, r6, #28
 8018178:	d5c1      	bpl.n	80180fe <_strtod_l+0x7e>
 801817a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801817e:	e7be      	b.n	80180fe <_strtod_l+0x7e>
 8018180:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8018184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801818a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801818e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018192:	e7f0      	b.n	8018176 <_strtod_l+0xf6>
 8018194:	f8df b170 	ldr.w	fp, [pc, #368]	; 8018308 <_strtod_l+0x288>
 8018198:	e7ed      	b.n	8018176 <_strtod_l+0xf6>
 801819a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801819e:	f04f 3aff 	mov.w	sl, #4294967295
 80181a2:	e7e8      	b.n	8018176 <_strtod_l+0xf6>
 80181a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181a6:	1c5a      	adds	r2, r3, #1
 80181a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80181aa:	785b      	ldrb	r3, [r3, #1]
 80181ac:	2b30      	cmp	r3, #48	; 0x30
 80181ae:	d0f9      	beq.n	80181a4 <_strtod_l+0x124>
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d0a4      	beq.n	80180fe <_strtod_l+0x7e>
 80181b4:	2301      	movs	r3, #1
 80181b6:	2500      	movs	r5, #0
 80181b8:	9306      	str	r3, [sp, #24]
 80181ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181bc:	9308      	str	r3, [sp, #32]
 80181be:	9507      	str	r5, [sp, #28]
 80181c0:	9505      	str	r5, [sp, #20]
 80181c2:	220a      	movs	r2, #10
 80181c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80181c6:	7807      	ldrb	r7, [r0, #0]
 80181c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80181cc:	b2d9      	uxtb	r1, r3
 80181ce:	2909      	cmp	r1, #9
 80181d0:	d929      	bls.n	8018226 <_strtod_l+0x1a6>
 80181d2:	4622      	mov	r2, r4
 80181d4:	f8d8 1000 	ldr.w	r1, [r8]
 80181d8:	f7ff ff0e 	bl	8017ff8 <strncmp>
 80181dc:	2800      	cmp	r0, #0
 80181de:	d031      	beq.n	8018244 <_strtod_l+0x1c4>
 80181e0:	2000      	movs	r0, #0
 80181e2:	9c05      	ldr	r4, [sp, #20]
 80181e4:	9004      	str	r0, [sp, #16]
 80181e6:	463b      	mov	r3, r7
 80181e8:	4602      	mov	r2, r0
 80181ea:	2b65      	cmp	r3, #101	; 0x65
 80181ec:	d001      	beq.n	80181f2 <_strtod_l+0x172>
 80181ee:	2b45      	cmp	r3, #69	; 0x45
 80181f0:	d114      	bne.n	801821c <_strtod_l+0x19c>
 80181f2:	b924      	cbnz	r4, 80181fe <_strtod_l+0x17e>
 80181f4:	b910      	cbnz	r0, 80181fc <_strtod_l+0x17c>
 80181f6:	9b06      	ldr	r3, [sp, #24]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d09e      	beq.n	801813a <_strtod_l+0xba>
 80181fc:	2400      	movs	r4, #0
 80181fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8018200:	1c73      	adds	r3, r6, #1
 8018202:	931b      	str	r3, [sp, #108]	; 0x6c
 8018204:	7873      	ldrb	r3, [r6, #1]
 8018206:	2b2b      	cmp	r3, #43	; 0x2b
 8018208:	d078      	beq.n	80182fc <_strtod_l+0x27c>
 801820a:	2b2d      	cmp	r3, #45	; 0x2d
 801820c:	d070      	beq.n	80182f0 <_strtod_l+0x270>
 801820e:	f04f 0c00 	mov.w	ip, #0
 8018212:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8018216:	2f09      	cmp	r7, #9
 8018218:	d97c      	bls.n	8018314 <_strtod_l+0x294>
 801821a:	961b      	str	r6, [sp, #108]	; 0x6c
 801821c:	f04f 0e00 	mov.w	lr, #0
 8018220:	e09a      	b.n	8018358 <_strtod_l+0x2d8>
 8018222:	2300      	movs	r3, #0
 8018224:	e7c7      	b.n	80181b6 <_strtod_l+0x136>
 8018226:	9905      	ldr	r1, [sp, #20]
 8018228:	2908      	cmp	r1, #8
 801822a:	bfdd      	ittte	le
 801822c:	9907      	ldrle	r1, [sp, #28]
 801822e:	fb02 3301 	mlale	r3, r2, r1, r3
 8018232:	9307      	strle	r3, [sp, #28]
 8018234:	fb02 3505 	mlagt	r5, r2, r5, r3
 8018238:	9b05      	ldr	r3, [sp, #20]
 801823a:	3001      	adds	r0, #1
 801823c:	3301      	adds	r3, #1
 801823e:	9305      	str	r3, [sp, #20]
 8018240:	901b      	str	r0, [sp, #108]	; 0x6c
 8018242:	e7bf      	b.n	80181c4 <_strtod_l+0x144>
 8018244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018246:	191a      	adds	r2, r3, r4
 8018248:	921b      	str	r2, [sp, #108]	; 0x6c
 801824a:	9a05      	ldr	r2, [sp, #20]
 801824c:	5d1b      	ldrb	r3, [r3, r4]
 801824e:	2a00      	cmp	r2, #0
 8018250:	d037      	beq.n	80182c2 <_strtod_l+0x242>
 8018252:	9c05      	ldr	r4, [sp, #20]
 8018254:	4602      	mov	r2, r0
 8018256:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801825a:	2909      	cmp	r1, #9
 801825c:	d913      	bls.n	8018286 <_strtod_l+0x206>
 801825e:	2101      	movs	r1, #1
 8018260:	9104      	str	r1, [sp, #16]
 8018262:	e7c2      	b.n	80181ea <_strtod_l+0x16a>
 8018264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018266:	1c5a      	adds	r2, r3, #1
 8018268:	921b      	str	r2, [sp, #108]	; 0x6c
 801826a:	785b      	ldrb	r3, [r3, #1]
 801826c:	3001      	adds	r0, #1
 801826e:	2b30      	cmp	r3, #48	; 0x30
 8018270:	d0f8      	beq.n	8018264 <_strtod_l+0x1e4>
 8018272:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018276:	2a08      	cmp	r2, #8
 8018278:	f200 84e4 	bhi.w	8018c44 <_strtod_l+0xbc4>
 801827c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801827e:	9208      	str	r2, [sp, #32]
 8018280:	4602      	mov	r2, r0
 8018282:	2000      	movs	r0, #0
 8018284:	4604      	mov	r4, r0
 8018286:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801828a:	f100 0101 	add.w	r1, r0, #1
 801828e:	d012      	beq.n	80182b6 <_strtod_l+0x236>
 8018290:	440a      	add	r2, r1
 8018292:	eb00 0c04 	add.w	ip, r0, r4
 8018296:	4621      	mov	r1, r4
 8018298:	270a      	movs	r7, #10
 801829a:	458c      	cmp	ip, r1
 801829c:	d113      	bne.n	80182c6 <_strtod_l+0x246>
 801829e:	1821      	adds	r1, r4, r0
 80182a0:	2908      	cmp	r1, #8
 80182a2:	f104 0401 	add.w	r4, r4, #1
 80182a6:	4404      	add	r4, r0
 80182a8:	dc19      	bgt.n	80182de <_strtod_l+0x25e>
 80182aa:	9b07      	ldr	r3, [sp, #28]
 80182ac:	210a      	movs	r1, #10
 80182ae:	fb01 e303 	mla	r3, r1, r3, lr
 80182b2:	9307      	str	r3, [sp, #28]
 80182b4:	2100      	movs	r1, #0
 80182b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80182b8:	1c58      	adds	r0, r3, #1
 80182ba:	901b      	str	r0, [sp, #108]	; 0x6c
 80182bc:	785b      	ldrb	r3, [r3, #1]
 80182be:	4608      	mov	r0, r1
 80182c0:	e7c9      	b.n	8018256 <_strtod_l+0x1d6>
 80182c2:	9805      	ldr	r0, [sp, #20]
 80182c4:	e7d3      	b.n	801826e <_strtod_l+0x1ee>
 80182c6:	2908      	cmp	r1, #8
 80182c8:	f101 0101 	add.w	r1, r1, #1
 80182cc:	dc03      	bgt.n	80182d6 <_strtod_l+0x256>
 80182ce:	9b07      	ldr	r3, [sp, #28]
 80182d0:	437b      	muls	r3, r7
 80182d2:	9307      	str	r3, [sp, #28]
 80182d4:	e7e1      	b.n	801829a <_strtod_l+0x21a>
 80182d6:	2910      	cmp	r1, #16
 80182d8:	bfd8      	it	le
 80182da:	437d      	mulle	r5, r7
 80182dc:	e7dd      	b.n	801829a <_strtod_l+0x21a>
 80182de:	2c10      	cmp	r4, #16
 80182e0:	bfdc      	itt	le
 80182e2:	210a      	movle	r1, #10
 80182e4:	fb01 e505 	mlale	r5, r1, r5, lr
 80182e8:	e7e4      	b.n	80182b4 <_strtod_l+0x234>
 80182ea:	2301      	movs	r3, #1
 80182ec:	9304      	str	r3, [sp, #16]
 80182ee:	e781      	b.n	80181f4 <_strtod_l+0x174>
 80182f0:	f04f 0c01 	mov.w	ip, #1
 80182f4:	1cb3      	adds	r3, r6, #2
 80182f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80182f8:	78b3      	ldrb	r3, [r6, #2]
 80182fa:	e78a      	b.n	8018212 <_strtod_l+0x192>
 80182fc:	f04f 0c00 	mov.w	ip, #0
 8018300:	e7f8      	b.n	80182f4 <_strtod_l+0x274>
 8018302:	bf00      	nop
 8018304:	0801e30c 	.word	0x0801e30c
 8018308:	7ff00000 	.word	0x7ff00000
 801830c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801830e:	1c5f      	adds	r7, r3, #1
 8018310:	971b      	str	r7, [sp, #108]	; 0x6c
 8018312:	785b      	ldrb	r3, [r3, #1]
 8018314:	2b30      	cmp	r3, #48	; 0x30
 8018316:	d0f9      	beq.n	801830c <_strtod_l+0x28c>
 8018318:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801831c:	2f08      	cmp	r7, #8
 801831e:	f63f af7d 	bhi.w	801821c <_strtod_l+0x19c>
 8018322:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8018326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018328:	930a      	str	r3, [sp, #40]	; 0x28
 801832a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801832c:	1c5f      	adds	r7, r3, #1
 801832e:	971b      	str	r7, [sp, #108]	; 0x6c
 8018330:	785b      	ldrb	r3, [r3, #1]
 8018332:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8018336:	f1b8 0f09 	cmp.w	r8, #9
 801833a:	d937      	bls.n	80183ac <_strtod_l+0x32c>
 801833c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801833e:	1a7f      	subs	r7, r7, r1
 8018340:	2f08      	cmp	r7, #8
 8018342:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8018346:	dc37      	bgt.n	80183b8 <_strtod_l+0x338>
 8018348:	45be      	cmp	lr, r7
 801834a:	bfa8      	it	ge
 801834c:	46be      	movge	lr, r7
 801834e:	f1bc 0f00 	cmp.w	ip, #0
 8018352:	d001      	beq.n	8018358 <_strtod_l+0x2d8>
 8018354:	f1ce 0e00 	rsb	lr, lr, #0
 8018358:	2c00      	cmp	r4, #0
 801835a:	d151      	bne.n	8018400 <_strtod_l+0x380>
 801835c:	2800      	cmp	r0, #0
 801835e:	f47f aece 	bne.w	80180fe <_strtod_l+0x7e>
 8018362:	9a06      	ldr	r2, [sp, #24]
 8018364:	2a00      	cmp	r2, #0
 8018366:	f47f aeca 	bne.w	80180fe <_strtod_l+0x7e>
 801836a:	9a04      	ldr	r2, [sp, #16]
 801836c:	2a00      	cmp	r2, #0
 801836e:	f47f aee4 	bne.w	801813a <_strtod_l+0xba>
 8018372:	2b4e      	cmp	r3, #78	; 0x4e
 8018374:	d027      	beq.n	80183c6 <_strtod_l+0x346>
 8018376:	dc21      	bgt.n	80183bc <_strtod_l+0x33c>
 8018378:	2b49      	cmp	r3, #73	; 0x49
 801837a:	f47f aede 	bne.w	801813a <_strtod_l+0xba>
 801837e:	49a0      	ldr	r1, [pc, #640]	; (8018600 <_strtod_l+0x580>)
 8018380:	a81b      	add	r0, sp, #108	; 0x6c
 8018382:	f001 fe1f 	bl	8019fc4 <__match>
 8018386:	2800      	cmp	r0, #0
 8018388:	f43f aed7 	beq.w	801813a <_strtod_l+0xba>
 801838c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801838e:	499d      	ldr	r1, [pc, #628]	; (8018604 <_strtod_l+0x584>)
 8018390:	3b01      	subs	r3, #1
 8018392:	a81b      	add	r0, sp, #108	; 0x6c
 8018394:	931b      	str	r3, [sp, #108]	; 0x6c
 8018396:	f001 fe15 	bl	8019fc4 <__match>
 801839a:	b910      	cbnz	r0, 80183a2 <_strtod_l+0x322>
 801839c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801839e:	3301      	adds	r3, #1
 80183a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80183a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8018618 <_strtod_l+0x598>
 80183a6:	f04f 0a00 	mov.w	sl, #0
 80183aa:	e6a8      	b.n	80180fe <_strtod_l+0x7e>
 80183ac:	210a      	movs	r1, #10
 80183ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 80183b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80183b6:	e7b8      	b.n	801832a <_strtod_l+0x2aa>
 80183b8:	46be      	mov	lr, r7
 80183ba:	e7c8      	b.n	801834e <_strtod_l+0x2ce>
 80183bc:	2b69      	cmp	r3, #105	; 0x69
 80183be:	d0de      	beq.n	801837e <_strtod_l+0x2fe>
 80183c0:	2b6e      	cmp	r3, #110	; 0x6e
 80183c2:	f47f aeba 	bne.w	801813a <_strtod_l+0xba>
 80183c6:	4990      	ldr	r1, [pc, #576]	; (8018608 <_strtod_l+0x588>)
 80183c8:	a81b      	add	r0, sp, #108	; 0x6c
 80183ca:	f001 fdfb 	bl	8019fc4 <__match>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	f43f aeb3 	beq.w	801813a <_strtod_l+0xba>
 80183d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	2b28      	cmp	r3, #40	; 0x28
 80183da:	d10e      	bne.n	80183fa <_strtod_l+0x37a>
 80183dc:	aa1e      	add	r2, sp, #120	; 0x78
 80183de:	498b      	ldr	r1, [pc, #556]	; (801860c <_strtod_l+0x58c>)
 80183e0:	a81b      	add	r0, sp, #108	; 0x6c
 80183e2:	f001 fe03 	bl	8019fec <__hexnan>
 80183e6:	2805      	cmp	r0, #5
 80183e8:	d107      	bne.n	80183fa <_strtod_l+0x37a>
 80183ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80183ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80183f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80183f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80183f8:	e681      	b.n	80180fe <_strtod_l+0x7e>
 80183fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8018620 <_strtod_l+0x5a0>
 80183fe:	e7d2      	b.n	80183a6 <_strtod_l+0x326>
 8018400:	ebae 0302 	sub.w	r3, lr, r2
 8018404:	9306      	str	r3, [sp, #24]
 8018406:	9b05      	ldr	r3, [sp, #20]
 8018408:	9807      	ldr	r0, [sp, #28]
 801840a:	2b00      	cmp	r3, #0
 801840c:	bf08      	it	eq
 801840e:	4623      	moveq	r3, r4
 8018410:	2c10      	cmp	r4, #16
 8018412:	9305      	str	r3, [sp, #20]
 8018414:	46a0      	mov	r8, r4
 8018416:	bfa8      	it	ge
 8018418:	f04f 0810 	movge.w	r8, #16
 801841c:	f7e8 f882 	bl	8000524 <__aeabi_ui2d>
 8018420:	2c09      	cmp	r4, #9
 8018422:	4682      	mov	sl, r0
 8018424:	468b      	mov	fp, r1
 8018426:	dc13      	bgt.n	8018450 <_strtod_l+0x3d0>
 8018428:	9b06      	ldr	r3, [sp, #24]
 801842a:	2b00      	cmp	r3, #0
 801842c:	f43f ae67 	beq.w	80180fe <_strtod_l+0x7e>
 8018430:	9b06      	ldr	r3, [sp, #24]
 8018432:	dd7a      	ble.n	801852a <_strtod_l+0x4aa>
 8018434:	2b16      	cmp	r3, #22
 8018436:	dc61      	bgt.n	80184fc <_strtod_l+0x47c>
 8018438:	4a75      	ldr	r2, [pc, #468]	; (8018610 <_strtod_l+0x590>)
 801843a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801843e:	e9de 0100 	ldrd	r0, r1, [lr]
 8018442:	4652      	mov	r2, sl
 8018444:	465b      	mov	r3, fp
 8018446:	f7e8 f8e7 	bl	8000618 <__aeabi_dmul>
 801844a:	4682      	mov	sl, r0
 801844c:	468b      	mov	fp, r1
 801844e:	e656      	b.n	80180fe <_strtod_l+0x7e>
 8018450:	4b6f      	ldr	r3, [pc, #444]	; (8018610 <_strtod_l+0x590>)
 8018452:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8018456:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801845a:	f7e8 f8dd 	bl	8000618 <__aeabi_dmul>
 801845e:	4606      	mov	r6, r0
 8018460:	4628      	mov	r0, r5
 8018462:	460f      	mov	r7, r1
 8018464:	f7e8 f85e 	bl	8000524 <__aeabi_ui2d>
 8018468:	4602      	mov	r2, r0
 801846a:	460b      	mov	r3, r1
 801846c:	4630      	mov	r0, r6
 801846e:	4639      	mov	r1, r7
 8018470:	f7e7 ff1c 	bl	80002ac <__adddf3>
 8018474:	2c0f      	cmp	r4, #15
 8018476:	4682      	mov	sl, r0
 8018478:	468b      	mov	fp, r1
 801847a:	ddd5      	ble.n	8018428 <_strtod_l+0x3a8>
 801847c:	9b06      	ldr	r3, [sp, #24]
 801847e:	eba4 0808 	sub.w	r8, r4, r8
 8018482:	4498      	add	r8, r3
 8018484:	f1b8 0f00 	cmp.w	r8, #0
 8018488:	f340 8096 	ble.w	80185b8 <_strtod_l+0x538>
 801848c:	f018 030f 	ands.w	r3, r8, #15
 8018490:	d00a      	beq.n	80184a8 <_strtod_l+0x428>
 8018492:	495f      	ldr	r1, [pc, #380]	; (8018610 <_strtod_l+0x590>)
 8018494:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018498:	4652      	mov	r2, sl
 801849a:	465b      	mov	r3, fp
 801849c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184a0:	f7e8 f8ba 	bl	8000618 <__aeabi_dmul>
 80184a4:	4682      	mov	sl, r0
 80184a6:	468b      	mov	fp, r1
 80184a8:	f038 080f 	bics.w	r8, r8, #15
 80184ac:	d073      	beq.n	8018596 <_strtod_l+0x516>
 80184ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80184b2:	dd47      	ble.n	8018544 <_strtod_l+0x4c4>
 80184b4:	2400      	movs	r4, #0
 80184b6:	46a0      	mov	r8, r4
 80184b8:	9407      	str	r4, [sp, #28]
 80184ba:	9405      	str	r4, [sp, #20]
 80184bc:	2322      	movs	r3, #34	; 0x22
 80184be:	f8df b158 	ldr.w	fp, [pc, #344]	; 8018618 <_strtod_l+0x598>
 80184c2:	f8c9 3000 	str.w	r3, [r9]
 80184c6:	f04f 0a00 	mov.w	sl, #0
 80184ca:	9b07      	ldr	r3, [sp, #28]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	f43f ae16 	beq.w	80180fe <_strtod_l+0x7e>
 80184d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80184d4:	4648      	mov	r0, r9
 80184d6:	f001 fe75 	bl	801a1c4 <_Bfree>
 80184da:	9905      	ldr	r1, [sp, #20]
 80184dc:	4648      	mov	r0, r9
 80184de:	f001 fe71 	bl	801a1c4 <_Bfree>
 80184e2:	4641      	mov	r1, r8
 80184e4:	4648      	mov	r0, r9
 80184e6:	f001 fe6d 	bl	801a1c4 <_Bfree>
 80184ea:	9907      	ldr	r1, [sp, #28]
 80184ec:	4648      	mov	r0, r9
 80184ee:	f001 fe69 	bl	801a1c4 <_Bfree>
 80184f2:	4621      	mov	r1, r4
 80184f4:	4648      	mov	r0, r9
 80184f6:	f001 fe65 	bl	801a1c4 <_Bfree>
 80184fa:	e600      	b.n	80180fe <_strtod_l+0x7e>
 80184fc:	9a06      	ldr	r2, [sp, #24]
 80184fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8018502:	4293      	cmp	r3, r2
 8018504:	dbba      	blt.n	801847c <_strtod_l+0x3fc>
 8018506:	4d42      	ldr	r5, [pc, #264]	; (8018610 <_strtod_l+0x590>)
 8018508:	f1c4 040f 	rsb	r4, r4, #15
 801850c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8018510:	4652      	mov	r2, sl
 8018512:	465b      	mov	r3, fp
 8018514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018518:	f7e8 f87e 	bl	8000618 <__aeabi_dmul>
 801851c:	9b06      	ldr	r3, [sp, #24]
 801851e:	1b1c      	subs	r4, r3, r4
 8018520:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8018524:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018528:	e78d      	b.n	8018446 <_strtod_l+0x3c6>
 801852a:	f113 0f16 	cmn.w	r3, #22
 801852e:	dba5      	blt.n	801847c <_strtod_l+0x3fc>
 8018530:	4a37      	ldr	r2, [pc, #220]	; (8018610 <_strtod_l+0x590>)
 8018532:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8018536:	e9d2 2300 	ldrd	r2, r3, [r2]
 801853a:	4650      	mov	r0, sl
 801853c:	4659      	mov	r1, fp
 801853e:	f7e8 f995 	bl	800086c <__aeabi_ddiv>
 8018542:	e782      	b.n	801844a <_strtod_l+0x3ca>
 8018544:	2300      	movs	r3, #0
 8018546:	4e33      	ldr	r6, [pc, #204]	; (8018614 <_strtod_l+0x594>)
 8018548:	ea4f 1828 	mov.w	r8, r8, asr #4
 801854c:	4650      	mov	r0, sl
 801854e:	4659      	mov	r1, fp
 8018550:	461d      	mov	r5, r3
 8018552:	f1b8 0f01 	cmp.w	r8, #1
 8018556:	dc21      	bgt.n	801859c <_strtod_l+0x51c>
 8018558:	b10b      	cbz	r3, 801855e <_strtod_l+0x4de>
 801855a:	4682      	mov	sl, r0
 801855c:	468b      	mov	fp, r1
 801855e:	4b2d      	ldr	r3, [pc, #180]	; (8018614 <_strtod_l+0x594>)
 8018560:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018564:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018568:	4652      	mov	r2, sl
 801856a:	465b      	mov	r3, fp
 801856c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018570:	f7e8 f852 	bl	8000618 <__aeabi_dmul>
 8018574:	4b28      	ldr	r3, [pc, #160]	; (8018618 <_strtod_l+0x598>)
 8018576:	460a      	mov	r2, r1
 8018578:	400b      	ands	r3, r1
 801857a:	4928      	ldr	r1, [pc, #160]	; (801861c <_strtod_l+0x59c>)
 801857c:	428b      	cmp	r3, r1
 801857e:	4682      	mov	sl, r0
 8018580:	d898      	bhi.n	80184b4 <_strtod_l+0x434>
 8018582:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018586:	428b      	cmp	r3, r1
 8018588:	bf86      	itte	hi
 801858a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8018624 <_strtod_l+0x5a4>
 801858e:	f04f 3aff 	movhi.w	sl, #4294967295
 8018592:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018596:	2300      	movs	r3, #0
 8018598:	9304      	str	r3, [sp, #16]
 801859a:	e077      	b.n	801868c <_strtod_l+0x60c>
 801859c:	f018 0f01 	tst.w	r8, #1
 80185a0:	d006      	beq.n	80185b0 <_strtod_l+0x530>
 80185a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80185a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185aa:	f7e8 f835 	bl	8000618 <__aeabi_dmul>
 80185ae:	2301      	movs	r3, #1
 80185b0:	3501      	adds	r5, #1
 80185b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80185b6:	e7cc      	b.n	8018552 <_strtod_l+0x4d2>
 80185b8:	d0ed      	beq.n	8018596 <_strtod_l+0x516>
 80185ba:	f1c8 0800 	rsb	r8, r8, #0
 80185be:	f018 020f 	ands.w	r2, r8, #15
 80185c2:	d00a      	beq.n	80185da <_strtod_l+0x55a>
 80185c4:	4b12      	ldr	r3, [pc, #72]	; (8018610 <_strtod_l+0x590>)
 80185c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80185ca:	4650      	mov	r0, sl
 80185cc:	4659      	mov	r1, fp
 80185ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185d2:	f7e8 f94b 	bl	800086c <__aeabi_ddiv>
 80185d6:	4682      	mov	sl, r0
 80185d8:	468b      	mov	fp, r1
 80185da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80185de:	d0da      	beq.n	8018596 <_strtod_l+0x516>
 80185e0:	f1b8 0f1f 	cmp.w	r8, #31
 80185e4:	dd20      	ble.n	8018628 <_strtod_l+0x5a8>
 80185e6:	2400      	movs	r4, #0
 80185e8:	46a0      	mov	r8, r4
 80185ea:	9407      	str	r4, [sp, #28]
 80185ec:	9405      	str	r4, [sp, #20]
 80185ee:	2322      	movs	r3, #34	; 0x22
 80185f0:	f04f 0a00 	mov.w	sl, #0
 80185f4:	f04f 0b00 	mov.w	fp, #0
 80185f8:	f8c9 3000 	str.w	r3, [r9]
 80185fc:	e765      	b.n	80184ca <_strtod_l+0x44a>
 80185fe:	bf00      	nop
 8018600:	0801e2d5 	.word	0x0801e2d5
 8018604:	0801e363 	.word	0x0801e363
 8018608:	0801e2dd 	.word	0x0801e2dd
 801860c:	0801e320 	.word	0x0801e320
 8018610:	0801e3a0 	.word	0x0801e3a0
 8018614:	0801e378 	.word	0x0801e378
 8018618:	7ff00000 	.word	0x7ff00000
 801861c:	7ca00000 	.word	0x7ca00000
 8018620:	fff80000 	.word	0xfff80000
 8018624:	7fefffff 	.word	0x7fefffff
 8018628:	f018 0310 	ands.w	r3, r8, #16
 801862c:	bf18      	it	ne
 801862e:	236a      	movne	r3, #106	; 0x6a
 8018630:	4da0      	ldr	r5, [pc, #640]	; (80188b4 <_strtod_l+0x834>)
 8018632:	9304      	str	r3, [sp, #16]
 8018634:	4650      	mov	r0, sl
 8018636:	4659      	mov	r1, fp
 8018638:	2300      	movs	r3, #0
 801863a:	f1b8 0f00 	cmp.w	r8, #0
 801863e:	f300 810a 	bgt.w	8018856 <_strtod_l+0x7d6>
 8018642:	b10b      	cbz	r3, 8018648 <_strtod_l+0x5c8>
 8018644:	4682      	mov	sl, r0
 8018646:	468b      	mov	fp, r1
 8018648:	9b04      	ldr	r3, [sp, #16]
 801864a:	b1bb      	cbz	r3, 801867c <_strtod_l+0x5fc>
 801864c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8018650:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018654:	2b00      	cmp	r3, #0
 8018656:	4659      	mov	r1, fp
 8018658:	dd10      	ble.n	801867c <_strtod_l+0x5fc>
 801865a:	2b1f      	cmp	r3, #31
 801865c:	f340 8107 	ble.w	801886e <_strtod_l+0x7ee>
 8018660:	2b34      	cmp	r3, #52	; 0x34
 8018662:	bfde      	ittt	le
 8018664:	3b20      	suble	r3, #32
 8018666:	f04f 32ff 	movle.w	r2, #4294967295
 801866a:	fa02 f303 	lslle.w	r3, r2, r3
 801866e:	f04f 0a00 	mov.w	sl, #0
 8018672:	bfcc      	ite	gt
 8018674:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8018678:	ea03 0b01 	andle.w	fp, r3, r1
 801867c:	2200      	movs	r2, #0
 801867e:	2300      	movs	r3, #0
 8018680:	4650      	mov	r0, sl
 8018682:	4659      	mov	r1, fp
 8018684:	f7e8 fa30 	bl	8000ae8 <__aeabi_dcmpeq>
 8018688:	2800      	cmp	r0, #0
 801868a:	d1ac      	bne.n	80185e6 <_strtod_l+0x566>
 801868c:	9b07      	ldr	r3, [sp, #28]
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	9a05      	ldr	r2, [sp, #20]
 8018692:	9908      	ldr	r1, [sp, #32]
 8018694:	4623      	mov	r3, r4
 8018696:	4648      	mov	r0, r9
 8018698:	f001 fde6 	bl	801a268 <__s2b>
 801869c:	9007      	str	r0, [sp, #28]
 801869e:	2800      	cmp	r0, #0
 80186a0:	f43f af08 	beq.w	80184b4 <_strtod_l+0x434>
 80186a4:	9a06      	ldr	r2, [sp, #24]
 80186a6:	9b06      	ldr	r3, [sp, #24]
 80186a8:	2a00      	cmp	r2, #0
 80186aa:	f1c3 0300 	rsb	r3, r3, #0
 80186ae:	bfa8      	it	ge
 80186b0:	2300      	movge	r3, #0
 80186b2:	930e      	str	r3, [sp, #56]	; 0x38
 80186b4:	2400      	movs	r4, #0
 80186b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80186ba:	9316      	str	r3, [sp, #88]	; 0x58
 80186bc:	46a0      	mov	r8, r4
 80186be:	9b07      	ldr	r3, [sp, #28]
 80186c0:	4648      	mov	r0, r9
 80186c2:	6859      	ldr	r1, [r3, #4]
 80186c4:	f001 fd4a 	bl	801a15c <_Balloc>
 80186c8:	9005      	str	r0, [sp, #20]
 80186ca:	2800      	cmp	r0, #0
 80186cc:	f43f aef6 	beq.w	80184bc <_strtod_l+0x43c>
 80186d0:	9b07      	ldr	r3, [sp, #28]
 80186d2:	691a      	ldr	r2, [r3, #16]
 80186d4:	3202      	adds	r2, #2
 80186d6:	f103 010c 	add.w	r1, r3, #12
 80186da:	0092      	lsls	r2, r2, #2
 80186dc:	300c      	adds	r0, #12
 80186de:	f7fe fd37 	bl	8017150 <memcpy>
 80186e2:	aa1e      	add	r2, sp, #120	; 0x78
 80186e4:	a91d      	add	r1, sp, #116	; 0x74
 80186e6:	ec4b ab10 	vmov	d0, sl, fp
 80186ea:	4648      	mov	r0, r9
 80186ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80186f0:	f002 f876 	bl	801a7e0 <__d2b>
 80186f4:	901c      	str	r0, [sp, #112]	; 0x70
 80186f6:	2800      	cmp	r0, #0
 80186f8:	f43f aee0 	beq.w	80184bc <_strtod_l+0x43c>
 80186fc:	2101      	movs	r1, #1
 80186fe:	4648      	mov	r0, r9
 8018700:	f001 fe3e 	bl	801a380 <__i2b>
 8018704:	4680      	mov	r8, r0
 8018706:	2800      	cmp	r0, #0
 8018708:	f43f aed8 	beq.w	80184bc <_strtod_l+0x43c>
 801870c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801870e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018710:	2e00      	cmp	r6, #0
 8018712:	bfab      	itete	ge
 8018714:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8018716:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8018718:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801871a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801871c:	bfac      	ite	ge
 801871e:	18f7      	addge	r7, r6, r3
 8018720:	1b9d      	sublt	r5, r3, r6
 8018722:	9b04      	ldr	r3, [sp, #16]
 8018724:	1af6      	subs	r6, r6, r3
 8018726:	4416      	add	r6, r2
 8018728:	4b63      	ldr	r3, [pc, #396]	; (80188b8 <_strtod_l+0x838>)
 801872a:	3e01      	subs	r6, #1
 801872c:	429e      	cmp	r6, r3
 801872e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018732:	f280 80af 	bge.w	8018894 <_strtod_l+0x814>
 8018736:	1b9b      	subs	r3, r3, r6
 8018738:	2b1f      	cmp	r3, #31
 801873a:	eba2 0203 	sub.w	r2, r2, r3
 801873e:	f04f 0101 	mov.w	r1, #1
 8018742:	f300 809b 	bgt.w	801887c <_strtod_l+0x7fc>
 8018746:	fa01 f303 	lsl.w	r3, r1, r3
 801874a:	930f      	str	r3, [sp, #60]	; 0x3c
 801874c:	2300      	movs	r3, #0
 801874e:	930a      	str	r3, [sp, #40]	; 0x28
 8018750:	18be      	adds	r6, r7, r2
 8018752:	9b04      	ldr	r3, [sp, #16]
 8018754:	42b7      	cmp	r7, r6
 8018756:	4415      	add	r5, r2
 8018758:	441d      	add	r5, r3
 801875a:	463b      	mov	r3, r7
 801875c:	bfa8      	it	ge
 801875e:	4633      	movge	r3, r6
 8018760:	42ab      	cmp	r3, r5
 8018762:	bfa8      	it	ge
 8018764:	462b      	movge	r3, r5
 8018766:	2b00      	cmp	r3, #0
 8018768:	bfc2      	ittt	gt
 801876a:	1af6      	subgt	r6, r6, r3
 801876c:	1aed      	subgt	r5, r5, r3
 801876e:	1aff      	subgt	r7, r7, r3
 8018770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018772:	b1bb      	cbz	r3, 80187a4 <_strtod_l+0x724>
 8018774:	4641      	mov	r1, r8
 8018776:	461a      	mov	r2, r3
 8018778:	4648      	mov	r0, r9
 801877a:	f001 fea1 	bl	801a4c0 <__pow5mult>
 801877e:	4680      	mov	r8, r0
 8018780:	2800      	cmp	r0, #0
 8018782:	f43f ae9b 	beq.w	80184bc <_strtod_l+0x43c>
 8018786:	4601      	mov	r1, r0
 8018788:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801878a:	4648      	mov	r0, r9
 801878c:	f001 fe01 	bl	801a392 <__multiply>
 8018790:	900c      	str	r0, [sp, #48]	; 0x30
 8018792:	2800      	cmp	r0, #0
 8018794:	f43f ae92 	beq.w	80184bc <_strtod_l+0x43c>
 8018798:	991c      	ldr	r1, [sp, #112]	; 0x70
 801879a:	4648      	mov	r0, r9
 801879c:	f001 fd12 	bl	801a1c4 <_Bfree>
 80187a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187a2:	931c      	str	r3, [sp, #112]	; 0x70
 80187a4:	2e00      	cmp	r6, #0
 80187a6:	dc7a      	bgt.n	801889e <_strtod_l+0x81e>
 80187a8:	9b06      	ldr	r3, [sp, #24]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	dd08      	ble.n	80187c0 <_strtod_l+0x740>
 80187ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80187b0:	9905      	ldr	r1, [sp, #20]
 80187b2:	4648      	mov	r0, r9
 80187b4:	f001 fe84 	bl	801a4c0 <__pow5mult>
 80187b8:	9005      	str	r0, [sp, #20]
 80187ba:	2800      	cmp	r0, #0
 80187bc:	f43f ae7e 	beq.w	80184bc <_strtod_l+0x43c>
 80187c0:	2d00      	cmp	r5, #0
 80187c2:	dd08      	ble.n	80187d6 <_strtod_l+0x756>
 80187c4:	462a      	mov	r2, r5
 80187c6:	9905      	ldr	r1, [sp, #20]
 80187c8:	4648      	mov	r0, r9
 80187ca:	f001 fec7 	bl	801a55c <__lshift>
 80187ce:	9005      	str	r0, [sp, #20]
 80187d0:	2800      	cmp	r0, #0
 80187d2:	f43f ae73 	beq.w	80184bc <_strtod_l+0x43c>
 80187d6:	2f00      	cmp	r7, #0
 80187d8:	dd08      	ble.n	80187ec <_strtod_l+0x76c>
 80187da:	4641      	mov	r1, r8
 80187dc:	463a      	mov	r2, r7
 80187de:	4648      	mov	r0, r9
 80187e0:	f001 febc 	bl	801a55c <__lshift>
 80187e4:	4680      	mov	r8, r0
 80187e6:	2800      	cmp	r0, #0
 80187e8:	f43f ae68 	beq.w	80184bc <_strtod_l+0x43c>
 80187ec:	9a05      	ldr	r2, [sp, #20]
 80187ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80187f0:	4648      	mov	r0, r9
 80187f2:	f001 ff21 	bl	801a638 <__mdiff>
 80187f6:	4604      	mov	r4, r0
 80187f8:	2800      	cmp	r0, #0
 80187fa:	f43f ae5f 	beq.w	80184bc <_strtod_l+0x43c>
 80187fe:	68c3      	ldr	r3, [r0, #12]
 8018800:	930c      	str	r3, [sp, #48]	; 0x30
 8018802:	2300      	movs	r3, #0
 8018804:	60c3      	str	r3, [r0, #12]
 8018806:	4641      	mov	r1, r8
 8018808:	f001 fefc 	bl	801a604 <__mcmp>
 801880c:	2800      	cmp	r0, #0
 801880e:	da55      	bge.n	80188bc <_strtod_l+0x83c>
 8018810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018812:	b9e3      	cbnz	r3, 801884e <_strtod_l+0x7ce>
 8018814:	f1ba 0f00 	cmp.w	sl, #0
 8018818:	d119      	bne.n	801884e <_strtod_l+0x7ce>
 801881a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801881e:	b9b3      	cbnz	r3, 801884e <_strtod_l+0x7ce>
 8018820:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018824:	0d1b      	lsrs	r3, r3, #20
 8018826:	051b      	lsls	r3, r3, #20
 8018828:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801882c:	d90f      	bls.n	801884e <_strtod_l+0x7ce>
 801882e:	6963      	ldr	r3, [r4, #20]
 8018830:	b913      	cbnz	r3, 8018838 <_strtod_l+0x7b8>
 8018832:	6923      	ldr	r3, [r4, #16]
 8018834:	2b01      	cmp	r3, #1
 8018836:	dd0a      	ble.n	801884e <_strtod_l+0x7ce>
 8018838:	4621      	mov	r1, r4
 801883a:	2201      	movs	r2, #1
 801883c:	4648      	mov	r0, r9
 801883e:	f001 fe8d 	bl	801a55c <__lshift>
 8018842:	4641      	mov	r1, r8
 8018844:	4604      	mov	r4, r0
 8018846:	f001 fedd 	bl	801a604 <__mcmp>
 801884a:	2800      	cmp	r0, #0
 801884c:	dc67      	bgt.n	801891e <_strtod_l+0x89e>
 801884e:	9b04      	ldr	r3, [sp, #16]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d171      	bne.n	8018938 <_strtod_l+0x8b8>
 8018854:	e63d      	b.n	80184d2 <_strtod_l+0x452>
 8018856:	f018 0f01 	tst.w	r8, #1
 801885a:	d004      	beq.n	8018866 <_strtod_l+0x7e6>
 801885c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018860:	f7e7 feda 	bl	8000618 <__aeabi_dmul>
 8018864:	2301      	movs	r3, #1
 8018866:	ea4f 0868 	mov.w	r8, r8, asr #1
 801886a:	3508      	adds	r5, #8
 801886c:	e6e5      	b.n	801863a <_strtod_l+0x5ba>
 801886e:	f04f 32ff 	mov.w	r2, #4294967295
 8018872:	fa02 f303 	lsl.w	r3, r2, r3
 8018876:	ea03 0a0a 	and.w	sl, r3, sl
 801887a:	e6ff      	b.n	801867c <_strtod_l+0x5fc>
 801887c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018880:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8018884:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8018888:	36e2      	adds	r6, #226	; 0xe2
 801888a:	fa01 f306 	lsl.w	r3, r1, r6
 801888e:	930a      	str	r3, [sp, #40]	; 0x28
 8018890:	910f      	str	r1, [sp, #60]	; 0x3c
 8018892:	e75d      	b.n	8018750 <_strtod_l+0x6d0>
 8018894:	2300      	movs	r3, #0
 8018896:	930a      	str	r3, [sp, #40]	; 0x28
 8018898:	2301      	movs	r3, #1
 801889a:	930f      	str	r3, [sp, #60]	; 0x3c
 801889c:	e758      	b.n	8018750 <_strtod_l+0x6d0>
 801889e:	4632      	mov	r2, r6
 80188a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80188a2:	4648      	mov	r0, r9
 80188a4:	f001 fe5a 	bl	801a55c <__lshift>
 80188a8:	901c      	str	r0, [sp, #112]	; 0x70
 80188aa:	2800      	cmp	r0, #0
 80188ac:	f47f af7c 	bne.w	80187a8 <_strtod_l+0x728>
 80188b0:	e604      	b.n	80184bc <_strtod_l+0x43c>
 80188b2:	bf00      	nop
 80188b4:	0801e338 	.word	0x0801e338
 80188b8:	fffffc02 	.word	0xfffffc02
 80188bc:	465d      	mov	r5, fp
 80188be:	f040 8086 	bne.w	80189ce <_strtod_l+0x94e>
 80188c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80188c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80188c8:	b32a      	cbz	r2, 8018916 <_strtod_l+0x896>
 80188ca:	4aaf      	ldr	r2, [pc, #700]	; (8018b88 <_strtod_l+0xb08>)
 80188cc:	4293      	cmp	r3, r2
 80188ce:	d153      	bne.n	8018978 <_strtod_l+0x8f8>
 80188d0:	9b04      	ldr	r3, [sp, #16]
 80188d2:	4650      	mov	r0, sl
 80188d4:	b1d3      	cbz	r3, 801890c <_strtod_l+0x88c>
 80188d6:	4aad      	ldr	r2, [pc, #692]	; (8018b8c <_strtod_l+0xb0c>)
 80188d8:	402a      	ands	r2, r5
 80188da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80188de:	f04f 31ff 	mov.w	r1, #4294967295
 80188e2:	d816      	bhi.n	8018912 <_strtod_l+0x892>
 80188e4:	0d12      	lsrs	r2, r2, #20
 80188e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80188ea:	fa01 f303 	lsl.w	r3, r1, r3
 80188ee:	4298      	cmp	r0, r3
 80188f0:	d142      	bne.n	8018978 <_strtod_l+0x8f8>
 80188f2:	4ba7      	ldr	r3, [pc, #668]	; (8018b90 <_strtod_l+0xb10>)
 80188f4:	429d      	cmp	r5, r3
 80188f6:	d102      	bne.n	80188fe <_strtod_l+0x87e>
 80188f8:	3001      	adds	r0, #1
 80188fa:	f43f addf 	beq.w	80184bc <_strtod_l+0x43c>
 80188fe:	4ba3      	ldr	r3, [pc, #652]	; (8018b8c <_strtod_l+0xb0c>)
 8018900:	402b      	ands	r3, r5
 8018902:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018906:	f04f 0a00 	mov.w	sl, #0
 801890a:	e7a0      	b.n	801884e <_strtod_l+0x7ce>
 801890c:	f04f 33ff 	mov.w	r3, #4294967295
 8018910:	e7ed      	b.n	80188ee <_strtod_l+0x86e>
 8018912:	460b      	mov	r3, r1
 8018914:	e7eb      	b.n	80188ee <_strtod_l+0x86e>
 8018916:	bb7b      	cbnz	r3, 8018978 <_strtod_l+0x8f8>
 8018918:	f1ba 0f00 	cmp.w	sl, #0
 801891c:	d12c      	bne.n	8018978 <_strtod_l+0x8f8>
 801891e:	9904      	ldr	r1, [sp, #16]
 8018920:	4a9a      	ldr	r2, [pc, #616]	; (8018b8c <_strtod_l+0xb0c>)
 8018922:	465b      	mov	r3, fp
 8018924:	b1f1      	cbz	r1, 8018964 <_strtod_l+0x8e4>
 8018926:	ea02 010b 	and.w	r1, r2, fp
 801892a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801892e:	dc19      	bgt.n	8018964 <_strtod_l+0x8e4>
 8018930:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018934:	f77f ae5b 	ble.w	80185ee <_strtod_l+0x56e>
 8018938:	4a96      	ldr	r2, [pc, #600]	; (8018b94 <_strtod_l+0xb14>)
 801893a:	2300      	movs	r3, #0
 801893c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8018940:	4650      	mov	r0, sl
 8018942:	4659      	mov	r1, fp
 8018944:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018948:	f7e7 fe66 	bl	8000618 <__aeabi_dmul>
 801894c:	4682      	mov	sl, r0
 801894e:	468b      	mov	fp, r1
 8018950:	2900      	cmp	r1, #0
 8018952:	f47f adbe 	bne.w	80184d2 <_strtod_l+0x452>
 8018956:	2800      	cmp	r0, #0
 8018958:	f47f adbb 	bne.w	80184d2 <_strtod_l+0x452>
 801895c:	2322      	movs	r3, #34	; 0x22
 801895e:	f8c9 3000 	str.w	r3, [r9]
 8018962:	e5b6      	b.n	80184d2 <_strtod_l+0x452>
 8018964:	4013      	ands	r3, r2
 8018966:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801896a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801896e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018972:	f04f 3aff 	mov.w	sl, #4294967295
 8018976:	e76a      	b.n	801884e <_strtod_l+0x7ce>
 8018978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801897a:	b193      	cbz	r3, 80189a2 <_strtod_l+0x922>
 801897c:	422b      	tst	r3, r5
 801897e:	f43f af66 	beq.w	801884e <_strtod_l+0x7ce>
 8018982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018984:	9a04      	ldr	r2, [sp, #16]
 8018986:	4650      	mov	r0, sl
 8018988:	4659      	mov	r1, fp
 801898a:	b173      	cbz	r3, 80189aa <_strtod_l+0x92a>
 801898c:	f7ff fb5b 	bl	8018046 <sulp>
 8018990:	4602      	mov	r2, r0
 8018992:	460b      	mov	r3, r1
 8018994:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018998:	f7e7 fc88 	bl	80002ac <__adddf3>
 801899c:	4682      	mov	sl, r0
 801899e:	468b      	mov	fp, r1
 80189a0:	e755      	b.n	801884e <_strtod_l+0x7ce>
 80189a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189a4:	ea13 0f0a 	tst.w	r3, sl
 80189a8:	e7e9      	b.n	801897e <_strtod_l+0x8fe>
 80189aa:	f7ff fb4c 	bl	8018046 <sulp>
 80189ae:	4602      	mov	r2, r0
 80189b0:	460b      	mov	r3, r1
 80189b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80189b6:	f7e7 fc77 	bl	80002a8 <__aeabi_dsub>
 80189ba:	2200      	movs	r2, #0
 80189bc:	2300      	movs	r3, #0
 80189be:	4682      	mov	sl, r0
 80189c0:	468b      	mov	fp, r1
 80189c2:	f7e8 f891 	bl	8000ae8 <__aeabi_dcmpeq>
 80189c6:	2800      	cmp	r0, #0
 80189c8:	f47f ae11 	bne.w	80185ee <_strtod_l+0x56e>
 80189cc:	e73f      	b.n	801884e <_strtod_l+0x7ce>
 80189ce:	4641      	mov	r1, r8
 80189d0:	4620      	mov	r0, r4
 80189d2:	f001 ff54 	bl	801a87e <__ratio>
 80189d6:	ec57 6b10 	vmov	r6, r7, d0
 80189da:	2200      	movs	r2, #0
 80189dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80189e0:	ee10 0a10 	vmov	r0, s0
 80189e4:	4639      	mov	r1, r7
 80189e6:	f7e8 f893 	bl	8000b10 <__aeabi_dcmple>
 80189ea:	2800      	cmp	r0, #0
 80189ec:	d077      	beq.n	8018ade <_strtod_l+0xa5e>
 80189ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d04a      	beq.n	8018a8a <_strtod_l+0xa0a>
 80189f4:	4b68      	ldr	r3, [pc, #416]	; (8018b98 <_strtod_l+0xb18>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80189fc:	4f66      	ldr	r7, [pc, #408]	; (8018b98 <_strtod_l+0xb18>)
 80189fe:	2600      	movs	r6, #0
 8018a00:	4b62      	ldr	r3, [pc, #392]	; (8018b8c <_strtod_l+0xb0c>)
 8018a02:	402b      	ands	r3, r5
 8018a04:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a08:	4b64      	ldr	r3, [pc, #400]	; (8018b9c <_strtod_l+0xb1c>)
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	f040 80ce 	bne.w	8018bac <_strtod_l+0xb2c>
 8018a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018a14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a18:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8018a1c:	ec4b ab10 	vmov	d0, sl, fp
 8018a20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8018a24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018a28:	f001 fe64 	bl	801a6f4 <__ulp>
 8018a2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a30:	ec53 2b10 	vmov	r2, r3, d0
 8018a34:	f7e7 fdf0 	bl	8000618 <__aeabi_dmul>
 8018a38:	4652      	mov	r2, sl
 8018a3a:	465b      	mov	r3, fp
 8018a3c:	f7e7 fc36 	bl	80002ac <__adddf3>
 8018a40:	460b      	mov	r3, r1
 8018a42:	4952      	ldr	r1, [pc, #328]	; (8018b8c <_strtod_l+0xb0c>)
 8018a44:	4a56      	ldr	r2, [pc, #344]	; (8018ba0 <_strtod_l+0xb20>)
 8018a46:	4019      	ands	r1, r3
 8018a48:	4291      	cmp	r1, r2
 8018a4a:	4682      	mov	sl, r0
 8018a4c:	d95b      	bls.n	8018b06 <_strtod_l+0xa86>
 8018a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018a54:	4293      	cmp	r3, r2
 8018a56:	d103      	bne.n	8018a60 <_strtod_l+0x9e0>
 8018a58:	9b08      	ldr	r3, [sp, #32]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	f43f ad2e 	beq.w	80184bc <_strtod_l+0x43c>
 8018a60:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8018b90 <_strtod_l+0xb10>
 8018a64:	f04f 3aff 	mov.w	sl, #4294967295
 8018a68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8018a6a:	4648      	mov	r0, r9
 8018a6c:	f001 fbaa 	bl	801a1c4 <_Bfree>
 8018a70:	9905      	ldr	r1, [sp, #20]
 8018a72:	4648      	mov	r0, r9
 8018a74:	f001 fba6 	bl	801a1c4 <_Bfree>
 8018a78:	4641      	mov	r1, r8
 8018a7a:	4648      	mov	r0, r9
 8018a7c:	f001 fba2 	bl	801a1c4 <_Bfree>
 8018a80:	4621      	mov	r1, r4
 8018a82:	4648      	mov	r0, r9
 8018a84:	f001 fb9e 	bl	801a1c4 <_Bfree>
 8018a88:	e619      	b.n	80186be <_strtod_l+0x63e>
 8018a8a:	f1ba 0f00 	cmp.w	sl, #0
 8018a8e:	d11a      	bne.n	8018ac6 <_strtod_l+0xa46>
 8018a90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a94:	b9eb      	cbnz	r3, 8018ad2 <_strtod_l+0xa52>
 8018a96:	2200      	movs	r2, #0
 8018a98:	4b3f      	ldr	r3, [pc, #252]	; (8018b98 <_strtod_l+0xb18>)
 8018a9a:	4630      	mov	r0, r6
 8018a9c:	4639      	mov	r1, r7
 8018a9e:	f7e8 f82d 	bl	8000afc <__aeabi_dcmplt>
 8018aa2:	b9c8      	cbnz	r0, 8018ad8 <_strtod_l+0xa58>
 8018aa4:	4630      	mov	r0, r6
 8018aa6:	4639      	mov	r1, r7
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	4b3e      	ldr	r3, [pc, #248]	; (8018ba4 <_strtod_l+0xb24>)
 8018aac:	f7e7 fdb4 	bl	8000618 <__aeabi_dmul>
 8018ab0:	4606      	mov	r6, r0
 8018ab2:	460f      	mov	r7, r1
 8018ab4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018ab8:	9618      	str	r6, [sp, #96]	; 0x60
 8018aba:	9319      	str	r3, [sp, #100]	; 0x64
 8018abc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8018ac0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018ac4:	e79c      	b.n	8018a00 <_strtod_l+0x980>
 8018ac6:	f1ba 0f01 	cmp.w	sl, #1
 8018aca:	d102      	bne.n	8018ad2 <_strtod_l+0xa52>
 8018acc:	2d00      	cmp	r5, #0
 8018ace:	f43f ad8e 	beq.w	80185ee <_strtod_l+0x56e>
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	4b34      	ldr	r3, [pc, #208]	; (8018ba8 <_strtod_l+0xb28>)
 8018ad6:	e78f      	b.n	80189f8 <_strtod_l+0x978>
 8018ad8:	2600      	movs	r6, #0
 8018ada:	4f32      	ldr	r7, [pc, #200]	; (8018ba4 <_strtod_l+0xb24>)
 8018adc:	e7ea      	b.n	8018ab4 <_strtod_l+0xa34>
 8018ade:	4b31      	ldr	r3, [pc, #196]	; (8018ba4 <_strtod_l+0xb24>)
 8018ae0:	4630      	mov	r0, r6
 8018ae2:	4639      	mov	r1, r7
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	f7e7 fd97 	bl	8000618 <__aeabi_dmul>
 8018aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018aec:	4606      	mov	r6, r0
 8018aee:	460f      	mov	r7, r1
 8018af0:	b933      	cbnz	r3, 8018b00 <_strtod_l+0xa80>
 8018af2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018af6:	9010      	str	r0, [sp, #64]	; 0x40
 8018af8:	9311      	str	r3, [sp, #68]	; 0x44
 8018afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018afe:	e7df      	b.n	8018ac0 <_strtod_l+0xa40>
 8018b00:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8018b04:	e7f9      	b.n	8018afa <_strtod_l+0xa7a>
 8018b06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018b0a:	9b04      	ldr	r3, [sp, #16]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d1ab      	bne.n	8018a68 <_strtod_l+0x9e8>
 8018b10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018b14:	0d1b      	lsrs	r3, r3, #20
 8018b16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b18:	051b      	lsls	r3, r3, #20
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	465d      	mov	r5, fp
 8018b1e:	d1a3      	bne.n	8018a68 <_strtod_l+0x9e8>
 8018b20:	4639      	mov	r1, r7
 8018b22:	4630      	mov	r0, r6
 8018b24:	f7e8 f828 	bl	8000b78 <__aeabi_d2iz>
 8018b28:	f7e7 fd0c 	bl	8000544 <__aeabi_i2d>
 8018b2c:	460b      	mov	r3, r1
 8018b2e:	4602      	mov	r2, r0
 8018b30:	4639      	mov	r1, r7
 8018b32:	4630      	mov	r0, r6
 8018b34:	f7e7 fbb8 	bl	80002a8 <__aeabi_dsub>
 8018b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b3a:	4606      	mov	r6, r0
 8018b3c:	460f      	mov	r7, r1
 8018b3e:	b933      	cbnz	r3, 8018b4e <_strtod_l+0xace>
 8018b40:	f1ba 0f00 	cmp.w	sl, #0
 8018b44:	d103      	bne.n	8018b4e <_strtod_l+0xace>
 8018b46:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8018b4a:	2d00      	cmp	r5, #0
 8018b4c:	d06d      	beq.n	8018c2a <_strtod_l+0xbaa>
 8018b4e:	a30a      	add	r3, pc, #40	; (adr r3, 8018b78 <_strtod_l+0xaf8>)
 8018b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b54:	4630      	mov	r0, r6
 8018b56:	4639      	mov	r1, r7
 8018b58:	f7e7 ffd0 	bl	8000afc <__aeabi_dcmplt>
 8018b5c:	2800      	cmp	r0, #0
 8018b5e:	f47f acb8 	bne.w	80184d2 <_strtod_l+0x452>
 8018b62:	a307      	add	r3, pc, #28	; (adr r3, 8018b80 <_strtod_l+0xb00>)
 8018b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b68:	4630      	mov	r0, r6
 8018b6a:	4639      	mov	r1, r7
 8018b6c:	f7e7 ffe4 	bl	8000b38 <__aeabi_dcmpgt>
 8018b70:	2800      	cmp	r0, #0
 8018b72:	f43f af79 	beq.w	8018a68 <_strtod_l+0x9e8>
 8018b76:	e4ac      	b.n	80184d2 <_strtod_l+0x452>
 8018b78:	94a03595 	.word	0x94a03595
 8018b7c:	3fdfffff 	.word	0x3fdfffff
 8018b80:	35afe535 	.word	0x35afe535
 8018b84:	3fe00000 	.word	0x3fe00000
 8018b88:	000fffff 	.word	0x000fffff
 8018b8c:	7ff00000 	.word	0x7ff00000
 8018b90:	7fefffff 	.word	0x7fefffff
 8018b94:	39500000 	.word	0x39500000
 8018b98:	3ff00000 	.word	0x3ff00000
 8018b9c:	7fe00000 	.word	0x7fe00000
 8018ba0:	7c9fffff 	.word	0x7c9fffff
 8018ba4:	3fe00000 	.word	0x3fe00000
 8018ba8:	bff00000 	.word	0xbff00000
 8018bac:	9b04      	ldr	r3, [sp, #16]
 8018bae:	b333      	cbz	r3, 8018bfe <_strtod_l+0xb7e>
 8018bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018bb6:	d822      	bhi.n	8018bfe <_strtod_l+0xb7e>
 8018bb8:	a327      	add	r3, pc, #156	; (adr r3, 8018c58 <_strtod_l+0xbd8>)
 8018bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	4639      	mov	r1, r7
 8018bc2:	f7e7 ffa5 	bl	8000b10 <__aeabi_dcmple>
 8018bc6:	b1a0      	cbz	r0, 8018bf2 <_strtod_l+0xb72>
 8018bc8:	4639      	mov	r1, r7
 8018bca:	4630      	mov	r0, r6
 8018bcc:	f7e7 fffc 	bl	8000bc8 <__aeabi_d2uiz>
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	bf08      	it	eq
 8018bd4:	2001      	moveq	r0, #1
 8018bd6:	f7e7 fca5 	bl	8000524 <__aeabi_ui2d>
 8018bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bdc:	4606      	mov	r6, r0
 8018bde:	460f      	mov	r7, r1
 8018be0:	bb03      	cbnz	r3, 8018c24 <_strtod_l+0xba4>
 8018be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018be6:	9012      	str	r0, [sp, #72]	; 0x48
 8018be8:	9313      	str	r3, [sp, #76]	; 0x4c
 8018bea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018bee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018bf6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018bfa:	1a9b      	subs	r3, r3, r2
 8018bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8018bfe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018c02:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8018c06:	f001 fd75 	bl	801a6f4 <__ulp>
 8018c0a:	4650      	mov	r0, sl
 8018c0c:	ec53 2b10 	vmov	r2, r3, d0
 8018c10:	4659      	mov	r1, fp
 8018c12:	f7e7 fd01 	bl	8000618 <__aeabi_dmul>
 8018c16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018c1a:	f7e7 fb47 	bl	80002ac <__adddf3>
 8018c1e:	4682      	mov	sl, r0
 8018c20:	468b      	mov	fp, r1
 8018c22:	e772      	b.n	8018b0a <_strtod_l+0xa8a>
 8018c24:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8018c28:	e7df      	b.n	8018bea <_strtod_l+0xb6a>
 8018c2a:	a30d      	add	r3, pc, #52	; (adr r3, 8018c60 <_strtod_l+0xbe0>)
 8018c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c30:	f7e7 ff64 	bl	8000afc <__aeabi_dcmplt>
 8018c34:	e79c      	b.n	8018b70 <_strtod_l+0xaf0>
 8018c36:	2300      	movs	r3, #0
 8018c38:	930d      	str	r3, [sp, #52]	; 0x34
 8018c3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018c3e:	6013      	str	r3, [r2, #0]
 8018c40:	f7ff ba61 	b.w	8018106 <_strtod_l+0x86>
 8018c44:	2b65      	cmp	r3, #101	; 0x65
 8018c46:	f04f 0200 	mov.w	r2, #0
 8018c4a:	f43f ab4e 	beq.w	80182ea <_strtod_l+0x26a>
 8018c4e:	2101      	movs	r1, #1
 8018c50:	4614      	mov	r4, r2
 8018c52:	9104      	str	r1, [sp, #16]
 8018c54:	f7ff bacb 	b.w	80181ee <_strtod_l+0x16e>
 8018c58:	ffc00000 	.word	0xffc00000
 8018c5c:	41dfffff 	.word	0x41dfffff
 8018c60:	94a03595 	.word	0x94a03595
 8018c64:	3fcfffff 	.word	0x3fcfffff

08018c68 <_strtod_r>:
 8018c68:	4b05      	ldr	r3, [pc, #20]	; (8018c80 <_strtod_r+0x18>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	b410      	push	{r4}
 8018c6e:	6a1b      	ldr	r3, [r3, #32]
 8018c70:	4c04      	ldr	r4, [pc, #16]	; (8018c84 <_strtod_r+0x1c>)
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	bf08      	it	eq
 8018c76:	4623      	moveq	r3, r4
 8018c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c7c:	f7ff ba00 	b.w	8018080 <_strtod_l>
 8018c80:	200001d4 	.word	0x200001d4
 8018c84:	20000238 	.word	0x20000238

08018c88 <strtod>:
 8018c88:	4b07      	ldr	r3, [pc, #28]	; (8018ca8 <strtod+0x20>)
 8018c8a:	4a08      	ldr	r2, [pc, #32]	; (8018cac <strtod+0x24>)
 8018c8c:	b410      	push	{r4}
 8018c8e:	681c      	ldr	r4, [r3, #0]
 8018c90:	6a23      	ldr	r3, [r4, #32]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	bf08      	it	eq
 8018c96:	4613      	moveq	r3, r2
 8018c98:	460a      	mov	r2, r1
 8018c9a:	4601      	mov	r1, r0
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ca2:	f7ff b9ed 	b.w	8018080 <_strtod_l>
 8018ca6:	bf00      	nop
 8018ca8:	200001d4 	.word	0x200001d4
 8018cac:	20000238 	.word	0x20000238

08018cb0 <_strtol_l.isra.0>:
 8018cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cb4:	4680      	mov	r8, r0
 8018cb6:	4689      	mov	r9, r1
 8018cb8:	4692      	mov	sl, r2
 8018cba:	461e      	mov	r6, r3
 8018cbc:	460f      	mov	r7, r1
 8018cbe:	463d      	mov	r5, r7
 8018cc0:	9808      	ldr	r0, [sp, #32]
 8018cc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018cc6:	f001 fa21 	bl	801a10c <__locale_ctype_ptr_l>
 8018cca:	4420      	add	r0, r4
 8018ccc:	7843      	ldrb	r3, [r0, #1]
 8018cce:	f013 0308 	ands.w	r3, r3, #8
 8018cd2:	d132      	bne.n	8018d3a <_strtol_l.isra.0+0x8a>
 8018cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8018cd6:	d132      	bne.n	8018d3e <_strtol_l.isra.0+0x8e>
 8018cd8:	787c      	ldrb	r4, [r7, #1]
 8018cda:	1cbd      	adds	r5, r7, #2
 8018cdc:	2201      	movs	r2, #1
 8018cde:	2e00      	cmp	r6, #0
 8018ce0:	d05d      	beq.n	8018d9e <_strtol_l.isra.0+0xee>
 8018ce2:	2e10      	cmp	r6, #16
 8018ce4:	d109      	bne.n	8018cfa <_strtol_l.isra.0+0x4a>
 8018ce6:	2c30      	cmp	r4, #48	; 0x30
 8018ce8:	d107      	bne.n	8018cfa <_strtol_l.isra.0+0x4a>
 8018cea:	782b      	ldrb	r3, [r5, #0]
 8018cec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018cf0:	2b58      	cmp	r3, #88	; 0x58
 8018cf2:	d14f      	bne.n	8018d94 <_strtol_l.isra.0+0xe4>
 8018cf4:	786c      	ldrb	r4, [r5, #1]
 8018cf6:	2610      	movs	r6, #16
 8018cf8:	3502      	adds	r5, #2
 8018cfa:	2a00      	cmp	r2, #0
 8018cfc:	bf14      	ite	ne
 8018cfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8018d02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8018d06:	2700      	movs	r7, #0
 8018d08:	fbb1 fcf6 	udiv	ip, r1, r6
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8018d12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8018d16:	2b09      	cmp	r3, #9
 8018d18:	d817      	bhi.n	8018d4a <_strtol_l.isra.0+0x9a>
 8018d1a:	461c      	mov	r4, r3
 8018d1c:	42a6      	cmp	r6, r4
 8018d1e:	dd23      	ble.n	8018d68 <_strtol_l.isra.0+0xb8>
 8018d20:	1c7b      	adds	r3, r7, #1
 8018d22:	d007      	beq.n	8018d34 <_strtol_l.isra.0+0x84>
 8018d24:	4584      	cmp	ip, r0
 8018d26:	d31c      	bcc.n	8018d62 <_strtol_l.isra.0+0xb2>
 8018d28:	d101      	bne.n	8018d2e <_strtol_l.isra.0+0x7e>
 8018d2a:	45a6      	cmp	lr, r4
 8018d2c:	db19      	blt.n	8018d62 <_strtol_l.isra.0+0xb2>
 8018d2e:	fb00 4006 	mla	r0, r0, r6, r4
 8018d32:	2701      	movs	r7, #1
 8018d34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d38:	e7eb      	b.n	8018d12 <_strtol_l.isra.0+0x62>
 8018d3a:	462f      	mov	r7, r5
 8018d3c:	e7bf      	b.n	8018cbe <_strtol_l.isra.0+0xe>
 8018d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8018d40:	bf04      	itt	eq
 8018d42:	1cbd      	addeq	r5, r7, #2
 8018d44:	787c      	ldrbeq	r4, [r7, #1]
 8018d46:	461a      	mov	r2, r3
 8018d48:	e7c9      	b.n	8018cde <_strtol_l.isra.0+0x2e>
 8018d4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8018d4e:	2b19      	cmp	r3, #25
 8018d50:	d801      	bhi.n	8018d56 <_strtol_l.isra.0+0xa6>
 8018d52:	3c37      	subs	r4, #55	; 0x37
 8018d54:	e7e2      	b.n	8018d1c <_strtol_l.isra.0+0x6c>
 8018d56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8018d5a:	2b19      	cmp	r3, #25
 8018d5c:	d804      	bhi.n	8018d68 <_strtol_l.isra.0+0xb8>
 8018d5e:	3c57      	subs	r4, #87	; 0x57
 8018d60:	e7dc      	b.n	8018d1c <_strtol_l.isra.0+0x6c>
 8018d62:	f04f 37ff 	mov.w	r7, #4294967295
 8018d66:	e7e5      	b.n	8018d34 <_strtol_l.isra.0+0x84>
 8018d68:	1c7b      	adds	r3, r7, #1
 8018d6a:	d108      	bne.n	8018d7e <_strtol_l.isra.0+0xce>
 8018d6c:	2322      	movs	r3, #34	; 0x22
 8018d6e:	f8c8 3000 	str.w	r3, [r8]
 8018d72:	4608      	mov	r0, r1
 8018d74:	f1ba 0f00 	cmp.w	sl, #0
 8018d78:	d107      	bne.n	8018d8a <_strtol_l.isra.0+0xda>
 8018d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d7e:	b102      	cbz	r2, 8018d82 <_strtol_l.isra.0+0xd2>
 8018d80:	4240      	negs	r0, r0
 8018d82:	f1ba 0f00 	cmp.w	sl, #0
 8018d86:	d0f8      	beq.n	8018d7a <_strtol_l.isra.0+0xca>
 8018d88:	b10f      	cbz	r7, 8018d8e <_strtol_l.isra.0+0xde>
 8018d8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8018d8e:	f8ca 9000 	str.w	r9, [sl]
 8018d92:	e7f2      	b.n	8018d7a <_strtol_l.isra.0+0xca>
 8018d94:	2430      	movs	r4, #48	; 0x30
 8018d96:	2e00      	cmp	r6, #0
 8018d98:	d1af      	bne.n	8018cfa <_strtol_l.isra.0+0x4a>
 8018d9a:	2608      	movs	r6, #8
 8018d9c:	e7ad      	b.n	8018cfa <_strtol_l.isra.0+0x4a>
 8018d9e:	2c30      	cmp	r4, #48	; 0x30
 8018da0:	d0a3      	beq.n	8018cea <_strtol_l.isra.0+0x3a>
 8018da2:	260a      	movs	r6, #10
 8018da4:	e7a9      	b.n	8018cfa <_strtol_l.isra.0+0x4a>
	...

08018da8 <_strtol_r>:
 8018da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018daa:	4c06      	ldr	r4, [pc, #24]	; (8018dc4 <_strtol_r+0x1c>)
 8018dac:	4d06      	ldr	r5, [pc, #24]	; (8018dc8 <_strtol_r+0x20>)
 8018dae:	6824      	ldr	r4, [r4, #0]
 8018db0:	6a24      	ldr	r4, [r4, #32]
 8018db2:	2c00      	cmp	r4, #0
 8018db4:	bf08      	it	eq
 8018db6:	462c      	moveq	r4, r5
 8018db8:	9400      	str	r4, [sp, #0]
 8018dba:	f7ff ff79 	bl	8018cb0 <_strtol_l.isra.0>
 8018dbe:	b003      	add	sp, #12
 8018dc0:	bd30      	pop	{r4, r5, pc}
 8018dc2:	bf00      	nop
 8018dc4:	200001d4 	.word	0x200001d4
 8018dc8:	20000238 	.word	0x20000238

08018dcc <strtol>:
 8018dcc:	4b08      	ldr	r3, [pc, #32]	; (8018df0 <strtol+0x24>)
 8018dce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018dd0:	681c      	ldr	r4, [r3, #0]
 8018dd2:	4d08      	ldr	r5, [pc, #32]	; (8018df4 <strtol+0x28>)
 8018dd4:	6a23      	ldr	r3, [r4, #32]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	bf08      	it	eq
 8018dda:	462b      	moveq	r3, r5
 8018ddc:	9300      	str	r3, [sp, #0]
 8018dde:	4613      	mov	r3, r2
 8018de0:	460a      	mov	r2, r1
 8018de2:	4601      	mov	r1, r0
 8018de4:	4620      	mov	r0, r4
 8018de6:	f7ff ff63 	bl	8018cb0 <_strtol_l.isra.0>
 8018dea:	b003      	add	sp, #12
 8018dec:	bd30      	pop	{r4, r5, pc}
 8018dee:	bf00      	nop
 8018df0:	200001d4 	.word	0x200001d4
 8018df4:	20000238 	.word	0x20000238

08018df8 <_vsiprintf_r>:
 8018df8:	b500      	push	{lr}
 8018dfa:	b09b      	sub	sp, #108	; 0x6c
 8018dfc:	9100      	str	r1, [sp, #0]
 8018dfe:	9104      	str	r1, [sp, #16]
 8018e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e04:	9105      	str	r1, [sp, #20]
 8018e06:	9102      	str	r1, [sp, #8]
 8018e08:	4905      	ldr	r1, [pc, #20]	; (8018e20 <_vsiprintf_r+0x28>)
 8018e0a:	9103      	str	r1, [sp, #12]
 8018e0c:	4669      	mov	r1, sp
 8018e0e:	f001 fe0d 	bl	801aa2c <_svfiprintf_r>
 8018e12:	9b00      	ldr	r3, [sp, #0]
 8018e14:	2200      	movs	r2, #0
 8018e16:	701a      	strb	r2, [r3, #0]
 8018e18:	b01b      	add	sp, #108	; 0x6c
 8018e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e1e:	bf00      	nop
 8018e20:	ffff0208 	.word	0xffff0208

08018e24 <vsiprintf>:
 8018e24:	4613      	mov	r3, r2
 8018e26:	460a      	mov	r2, r1
 8018e28:	4601      	mov	r1, r0
 8018e2a:	4802      	ldr	r0, [pc, #8]	; (8018e34 <vsiprintf+0x10>)
 8018e2c:	6800      	ldr	r0, [r0, #0]
 8018e2e:	f7ff bfe3 	b.w	8018df8 <_vsiprintf_r>
 8018e32:	bf00      	nop
 8018e34:	200001d4 	.word	0x200001d4

08018e38 <quorem>:
 8018e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e3c:	6903      	ldr	r3, [r0, #16]
 8018e3e:	690c      	ldr	r4, [r1, #16]
 8018e40:	42a3      	cmp	r3, r4
 8018e42:	4680      	mov	r8, r0
 8018e44:	f2c0 8082 	blt.w	8018f4c <quorem+0x114>
 8018e48:	3c01      	subs	r4, #1
 8018e4a:	f101 0714 	add.w	r7, r1, #20
 8018e4e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8018e52:	f100 0614 	add.w	r6, r0, #20
 8018e56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8018e5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8018e5e:	eb06 030c 	add.w	r3, r6, ip
 8018e62:	3501      	adds	r5, #1
 8018e64:	eb07 090c 	add.w	r9, r7, ip
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8018e6e:	b395      	cbz	r5, 8018ed6 <quorem+0x9e>
 8018e70:	f04f 0a00 	mov.w	sl, #0
 8018e74:	4638      	mov	r0, r7
 8018e76:	46b6      	mov	lr, r6
 8018e78:	46d3      	mov	fp, sl
 8018e7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8018e7e:	b293      	uxth	r3, r2
 8018e80:	fb05 a303 	mla	r3, r5, r3, sl
 8018e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	ebab 0303 	sub.w	r3, fp, r3
 8018e8e:	0c12      	lsrs	r2, r2, #16
 8018e90:	f8de b000 	ldr.w	fp, [lr]
 8018e94:	fb05 a202 	mla	r2, r5, r2, sl
 8018e98:	fa13 f38b 	uxtah	r3, r3, fp
 8018e9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8018ea0:	fa1f fb82 	uxth.w	fp, r2
 8018ea4:	f8de 2000 	ldr.w	r2, [lr]
 8018ea8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8018eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018eb0:	b29b      	uxth	r3, r3
 8018eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018eb6:	4581      	cmp	r9, r0
 8018eb8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8018ebc:	f84e 3b04 	str.w	r3, [lr], #4
 8018ec0:	d2db      	bcs.n	8018e7a <quorem+0x42>
 8018ec2:	f856 300c 	ldr.w	r3, [r6, ip]
 8018ec6:	b933      	cbnz	r3, 8018ed6 <quorem+0x9e>
 8018ec8:	9b01      	ldr	r3, [sp, #4]
 8018eca:	3b04      	subs	r3, #4
 8018ecc:	429e      	cmp	r6, r3
 8018ece:	461a      	mov	r2, r3
 8018ed0:	d330      	bcc.n	8018f34 <quorem+0xfc>
 8018ed2:	f8c8 4010 	str.w	r4, [r8, #16]
 8018ed6:	4640      	mov	r0, r8
 8018ed8:	f001 fb94 	bl	801a604 <__mcmp>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	db25      	blt.n	8018f2c <quorem+0xf4>
 8018ee0:	3501      	adds	r5, #1
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	f04f 0c00 	mov.w	ip, #0
 8018ee8:	f857 2b04 	ldr.w	r2, [r7], #4
 8018eec:	f8d0 e000 	ldr.w	lr, [r0]
 8018ef0:	b293      	uxth	r3, r2
 8018ef2:	ebac 0303 	sub.w	r3, ip, r3
 8018ef6:	0c12      	lsrs	r2, r2, #16
 8018ef8:	fa13 f38e 	uxtah	r3, r3, lr
 8018efc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018f0a:	45b9      	cmp	r9, r7
 8018f0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018f10:	f840 3b04 	str.w	r3, [r0], #4
 8018f14:	d2e8      	bcs.n	8018ee8 <quorem+0xb0>
 8018f16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8018f1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8018f1e:	b92a      	cbnz	r2, 8018f2c <quorem+0xf4>
 8018f20:	3b04      	subs	r3, #4
 8018f22:	429e      	cmp	r6, r3
 8018f24:	461a      	mov	r2, r3
 8018f26:	d30b      	bcc.n	8018f40 <quorem+0x108>
 8018f28:	f8c8 4010 	str.w	r4, [r8, #16]
 8018f2c:	4628      	mov	r0, r5
 8018f2e:	b003      	add	sp, #12
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	6812      	ldr	r2, [r2, #0]
 8018f36:	3b04      	subs	r3, #4
 8018f38:	2a00      	cmp	r2, #0
 8018f3a:	d1ca      	bne.n	8018ed2 <quorem+0x9a>
 8018f3c:	3c01      	subs	r4, #1
 8018f3e:	e7c5      	b.n	8018ecc <quorem+0x94>
 8018f40:	6812      	ldr	r2, [r2, #0]
 8018f42:	3b04      	subs	r3, #4
 8018f44:	2a00      	cmp	r2, #0
 8018f46:	d1ef      	bne.n	8018f28 <quorem+0xf0>
 8018f48:	3c01      	subs	r4, #1
 8018f4a:	e7ea      	b.n	8018f22 <quorem+0xea>
 8018f4c:	2000      	movs	r0, #0
 8018f4e:	e7ee      	b.n	8018f2e <quorem+0xf6>

08018f50 <_dtoa_r>:
 8018f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f54:	ec57 6b10 	vmov	r6, r7, d0
 8018f58:	b097      	sub	sp, #92	; 0x5c
 8018f5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018f5c:	9106      	str	r1, [sp, #24]
 8018f5e:	4604      	mov	r4, r0
 8018f60:	920b      	str	r2, [sp, #44]	; 0x2c
 8018f62:	9312      	str	r3, [sp, #72]	; 0x48
 8018f64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018f68:	e9cd 6700 	strd	r6, r7, [sp]
 8018f6c:	b93d      	cbnz	r5, 8018f7e <_dtoa_r+0x2e>
 8018f6e:	2010      	movs	r0, #16
 8018f70:	f7fe f8de 	bl	8017130 <malloc>
 8018f74:	6260      	str	r0, [r4, #36]	; 0x24
 8018f76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018f7a:	6005      	str	r5, [r0, #0]
 8018f7c:	60c5      	str	r5, [r0, #12]
 8018f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f80:	6819      	ldr	r1, [r3, #0]
 8018f82:	b151      	cbz	r1, 8018f9a <_dtoa_r+0x4a>
 8018f84:	685a      	ldr	r2, [r3, #4]
 8018f86:	604a      	str	r2, [r1, #4]
 8018f88:	2301      	movs	r3, #1
 8018f8a:	4093      	lsls	r3, r2
 8018f8c:	608b      	str	r3, [r1, #8]
 8018f8e:	4620      	mov	r0, r4
 8018f90:	f001 f918 	bl	801a1c4 <_Bfree>
 8018f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f96:	2200      	movs	r2, #0
 8018f98:	601a      	str	r2, [r3, #0]
 8018f9a:	1e3b      	subs	r3, r7, #0
 8018f9c:	bfbb      	ittet	lt
 8018f9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018fa2:	9301      	strlt	r3, [sp, #4]
 8018fa4:	2300      	movge	r3, #0
 8018fa6:	2201      	movlt	r2, #1
 8018fa8:	bfac      	ite	ge
 8018faa:	f8c8 3000 	strge.w	r3, [r8]
 8018fae:	f8c8 2000 	strlt.w	r2, [r8]
 8018fb2:	4baf      	ldr	r3, [pc, #700]	; (8019270 <_dtoa_r+0x320>)
 8018fb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018fb8:	ea33 0308 	bics.w	r3, r3, r8
 8018fbc:	d114      	bne.n	8018fe8 <_dtoa_r+0x98>
 8018fbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8018fc4:	6013      	str	r3, [r2, #0]
 8018fc6:	9b00      	ldr	r3, [sp, #0]
 8018fc8:	b923      	cbnz	r3, 8018fd4 <_dtoa_r+0x84>
 8018fca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	f000 8542 	beq.w	8019a58 <_dtoa_r+0xb08>
 8018fd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018fd6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8019284 <_dtoa_r+0x334>
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	f000 8544 	beq.w	8019a68 <_dtoa_r+0xb18>
 8018fe0:	f10b 0303 	add.w	r3, fp, #3
 8018fe4:	f000 bd3e 	b.w	8019a64 <_dtoa_r+0xb14>
 8018fe8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8018fec:	2200      	movs	r2, #0
 8018fee:	2300      	movs	r3, #0
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	4639      	mov	r1, r7
 8018ff4:	f7e7 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 8018ff8:	4681      	mov	r9, r0
 8018ffa:	b168      	cbz	r0, 8019018 <_dtoa_r+0xc8>
 8018ffc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ffe:	2301      	movs	r3, #1
 8019000:	6013      	str	r3, [r2, #0]
 8019002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019004:	2b00      	cmp	r3, #0
 8019006:	f000 8524 	beq.w	8019a52 <_dtoa_r+0xb02>
 801900a:	4b9a      	ldr	r3, [pc, #616]	; (8019274 <_dtoa_r+0x324>)
 801900c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801900e:	f103 3bff 	add.w	fp, r3, #4294967295
 8019012:	6013      	str	r3, [r2, #0]
 8019014:	f000 bd28 	b.w	8019a68 <_dtoa_r+0xb18>
 8019018:	aa14      	add	r2, sp, #80	; 0x50
 801901a:	a915      	add	r1, sp, #84	; 0x54
 801901c:	ec47 6b10 	vmov	d0, r6, r7
 8019020:	4620      	mov	r0, r4
 8019022:	f001 fbdd 	bl	801a7e0 <__d2b>
 8019026:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801902a:	9004      	str	r0, [sp, #16]
 801902c:	2d00      	cmp	r5, #0
 801902e:	d07c      	beq.n	801912a <_dtoa_r+0x1da>
 8019030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019034:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8019038:	46b2      	mov	sl, r6
 801903a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801903e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019042:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8019046:	2200      	movs	r2, #0
 8019048:	4b8b      	ldr	r3, [pc, #556]	; (8019278 <_dtoa_r+0x328>)
 801904a:	4650      	mov	r0, sl
 801904c:	4659      	mov	r1, fp
 801904e:	f7e7 f92b 	bl	80002a8 <__aeabi_dsub>
 8019052:	a381      	add	r3, pc, #516	; (adr r3, 8019258 <_dtoa_r+0x308>)
 8019054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019058:	f7e7 fade 	bl	8000618 <__aeabi_dmul>
 801905c:	a380      	add	r3, pc, #512	; (adr r3, 8019260 <_dtoa_r+0x310>)
 801905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019062:	f7e7 f923 	bl	80002ac <__adddf3>
 8019066:	4606      	mov	r6, r0
 8019068:	4628      	mov	r0, r5
 801906a:	460f      	mov	r7, r1
 801906c:	f7e7 fa6a 	bl	8000544 <__aeabi_i2d>
 8019070:	a37d      	add	r3, pc, #500	; (adr r3, 8019268 <_dtoa_r+0x318>)
 8019072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019076:	f7e7 facf 	bl	8000618 <__aeabi_dmul>
 801907a:	4602      	mov	r2, r0
 801907c:	460b      	mov	r3, r1
 801907e:	4630      	mov	r0, r6
 8019080:	4639      	mov	r1, r7
 8019082:	f7e7 f913 	bl	80002ac <__adddf3>
 8019086:	4606      	mov	r6, r0
 8019088:	460f      	mov	r7, r1
 801908a:	f7e7 fd75 	bl	8000b78 <__aeabi_d2iz>
 801908e:	2200      	movs	r2, #0
 8019090:	4682      	mov	sl, r0
 8019092:	2300      	movs	r3, #0
 8019094:	4630      	mov	r0, r6
 8019096:	4639      	mov	r1, r7
 8019098:	f7e7 fd30 	bl	8000afc <__aeabi_dcmplt>
 801909c:	b148      	cbz	r0, 80190b2 <_dtoa_r+0x162>
 801909e:	4650      	mov	r0, sl
 80190a0:	f7e7 fa50 	bl	8000544 <__aeabi_i2d>
 80190a4:	4632      	mov	r2, r6
 80190a6:	463b      	mov	r3, r7
 80190a8:	f7e7 fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80190ac:	b908      	cbnz	r0, 80190b2 <_dtoa_r+0x162>
 80190ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80190b2:	f1ba 0f16 	cmp.w	sl, #22
 80190b6:	d859      	bhi.n	801916c <_dtoa_r+0x21c>
 80190b8:	4970      	ldr	r1, [pc, #448]	; (801927c <_dtoa_r+0x32c>)
 80190ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80190be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80190c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190c6:	f7e7 fd37 	bl	8000b38 <__aeabi_dcmpgt>
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d050      	beq.n	8019170 <_dtoa_r+0x220>
 80190ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80190d2:	2300      	movs	r3, #0
 80190d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80190d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80190d8:	1b5d      	subs	r5, r3, r5
 80190da:	f1b5 0801 	subs.w	r8, r5, #1
 80190de:	bf49      	itett	mi
 80190e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80190e4:	2300      	movpl	r3, #0
 80190e6:	9305      	strmi	r3, [sp, #20]
 80190e8:	f04f 0800 	movmi.w	r8, #0
 80190ec:	bf58      	it	pl
 80190ee:	9305      	strpl	r3, [sp, #20]
 80190f0:	f1ba 0f00 	cmp.w	sl, #0
 80190f4:	db3e      	blt.n	8019174 <_dtoa_r+0x224>
 80190f6:	2300      	movs	r3, #0
 80190f8:	44d0      	add	r8, sl
 80190fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80190fe:	9307      	str	r3, [sp, #28]
 8019100:	9b06      	ldr	r3, [sp, #24]
 8019102:	2b09      	cmp	r3, #9
 8019104:	f200 8090 	bhi.w	8019228 <_dtoa_r+0x2d8>
 8019108:	2b05      	cmp	r3, #5
 801910a:	bfc4      	itt	gt
 801910c:	3b04      	subgt	r3, #4
 801910e:	9306      	strgt	r3, [sp, #24]
 8019110:	9b06      	ldr	r3, [sp, #24]
 8019112:	f1a3 0302 	sub.w	r3, r3, #2
 8019116:	bfcc      	ite	gt
 8019118:	2500      	movgt	r5, #0
 801911a:	2501      	movle	r5, #1
 801911c:	2b03      	cmp	r3, #3
 801911e:	f200 808f 	bhi.w	8019240 <_dtoa_r+0x2f0>
 8019122:	e8df f003 	tbb	[pc, r3]
 8019126:	7f7d      	.short	0x7f7d
 8019128:	7131      	.short	0x7131
 801912a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801912e:	441d      	add	r5, r3
 8019130:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8019134:	2820      	cmp	r0, #32
 8019136:	dd13      	ble.n	8019160 <_dtoa_r+0x210>
 8019138:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801913c:	9b00      	ldr	r3, [sp, #0]
 801913e:	fa08 f800 	lsl.w	r8, r8, r0
 8019142:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8019146:	fa23 f000 	lsr.w	r0, r3, r0
 801914a:	ea48 0000 	orr.w	r0, r8, r0
 801914e:	f7e7 f9e9 	bl	8000524 <__aeabi_ui2d>
 8019152:	2301      	movs	r3, #1
 8019154:	4682      	mov	sl, r0
 8019156:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801915a:	3d01      	subs	r5, #1
 801915c:	9313      	str	r3, [sp, #76]	; 0x4c
 801915e:	e772      	b.n	8019046 <_dtoa_r+0xf6>
 8019160:	9b00      	ldr	r3, [sp, #0]
 8019162:	f1c0 0020 	rsb	r0, r0, #32
 8019166:	fa03 f000 	lsl.w	r0, r3, r0
 801916a:	e7f0      	b.n	801914e <_dtoa_r+0x1fe>
 801916c:	2301      	movs	r3, #1
 801916e:	e7b1      	b.n	80190d4 <_dtoa_r+0x184>
 8019170:	900f      	str	r0, [sp, #60]	; 0x3c
 8019172:	e7b0      	b.n	80190d6 <_dtoa_r+0x186>
 8019174:	9b05      	ldr	r3, [sp, #20]
 8019176:	eba3 030a 	sub.w	r3, r3, sl
 801917a:	9305      	str	r3, [sp, #20]
 801917c:	f1ca 0300 	rsb	r3, sl, #0
 8019180:	9307      	str	r3, [sp, #28]
 8019182:	2300      	movs	r3, #0
 8019184:	930e      	str	r3, [sp, #56]	; 0x38
 8019186:	e7bb      	b.n	8019100 <_dtoa_r+0x1b0>
 8019188:	2301      	movs	r3, #1
 801918a:	930a      	str	r3, [sp, #40]	; 0x28
 801918c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801918e:	2b00      	cmp	r3, #0
 8019190:	dd59      	ble.n	8019246 <_dtoa_r+0x2f6>
 8019192:	9302      	str	r3, [sp, #8]
 8019194:	4699      	mov	r9, r3
 8019196:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019198:	2200      	movs	r2, #0
 801919a:	6072      	str	r2, [r6, #4]
 801919c:	2204      	movs	r2, #4
 801919e:	f102 0014 	add.w	r0, r2, #20
 80191a2:	4298      	cmp	r0, r3
 80191a4:	6871      	ldr	r1, [r6, #4]
 80191a6:	d953      	bls.n	8019250 <_dtoa_r+0x300>
 80191a8:	4620      	mov	r0, r4
 80191aa:	f000 ffd7 	bl	801a15c <_Balloc>
 80191ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80191b0:	6030      	str	r0, [r6, #0]
 80191b2:	f1b9 0f0e 	cmp.w	r9, #14
 80191b6:	f8d3 b000 	ldr.w	fp, [r3]
 80191ba:	f200 80e6 	bhi.w	801938a <_dtoa_r+0x43a>
 80191be:	2d00      	cmp	r5, #0
 80191c0:	f000 80e3 	beq.w	801938a <_dtoa_r+0x43a>
 80191c4:	ed9d 7b00 	vldr	d7, [sp]
 80191c8:	f1ba 0f00 	cmp.w	sl, #0
 80191cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80191d0:	dd74      	ble.n	80192bc <_dtoa_r+0x36c>
 80191d2:	4a2a      	ldr	r2, [pc, #168]	; (801927c <_dtoa_r+0x32c>)
 80191d4:	f00a 030f 	and.w	r3, sl, #15
 80191d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80191dc:	ed93 7b00 	vldr	d7, [r3]
 80191e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80191e4:	06f0      	lsls	r0, r6, #27
 80191e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80191ea:	d565      	bpl.n	80192b8 <_dtoa_r+0x368>
 80191ec:	4b24      	ldr	r3, [pc, #144]	; (8019280 <_dtoa_r+0x330>)
 80191ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80191f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80191f6:	f7e7 fb39 	bl	800086c <__aeabi_ddiv>
 80191fa:	e9cd 0100 	strd	r0, r1, [sp]
 80191fe:	f006 060f 	and.w	r6, r6, #15
 8019202:	2503      	movs	r5, #3
 8019204:	4f1e      	ldr	r7, [pc, #120]	; (8019280 <_dtoa_r+0x330>)
 8019206:	e04c      	b.n	80192a2 <_dtoa_r+0x352>
 8019208:	2301      	movs	r3, #1
 801920a:	930a      	str	r3, [sp, #40]	; 0x28
 801920c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801920e:	4453      	add	r3, sl
 8019210:	f103 0901 	add.w	r9, r3, #1
 8019214:	9302      	str	r3, [sp, #8]
 8019216:	464b      	mov	r3, r9
 8019218:	2b01      	cmp	r3, #1
 801921a:	bfb8      	it	lt
 801921c:	2301      	movlt	r3, #1
 801921e:	e7ba      	b.n	8019196 <_dtoa_r+0x246>
 8019220:	2300      	movs	r3, #0
 8019222:	e7b2      	b.n	801918a <_dtoa_r+0x23a>
 8019224:	2300      	movs	r3, #0
 8019226:	e7f0      	b.n	801920a <_dtoa_r+0x2ba>
 8019228:	2501      	movs	r5, #1
 801922a:	2300      	movs	r3, #0
 801922c:	9306      	str	r3, [sp, #24]
 801922e:	950a      	str	r5, [sp, #40]	; 0x28
 8019230:	f04f 33ff 	mov.w	r3, #4294967295
 8019234:	9302      	str	r3, [sp, #8]
 8019236:	4699      	mov	r9, r3
 8019238:	2200      	movs	r2, #0
 801923a:	2312      	movs	r3, #18
 801923c:	920b      	str	r2, [sp, #44]	; 0x2c
 801923e:	e7aa      	b.n	8019196 <_dtoa_r+0x246>
 8019240:	2301      	movs	r3, #1
 8019242:	930a      	str	r3, [sp, #40]	; 0x28
 8019244:	e7f4      	b.n	8019230 <_dtoa_r+0x2e0>
 8019246:	2301      	movs	r3, #1
 8019248:	9302      	str	r3, [sp, #8]
 801924a:	4699      	mov	r9, r3
 801924c:	461a      	mov	r2, r3
 801924e:	e7f5      	b.n	801923c <_dtoa_r+0x2ec>
 8019250:	3101      	adds	r1, #1
 8019252:	6071      	str	r1, [r6, #4]
 8019254:	0052      	lsls	r2, r2, #1
 8019256:	e7a2      	b.n	801919e <_dtoa_r+0x24e>
 8019258:	636f4361 	.word	0x636f4361
 801925c:	3fd287a7 	.word	0x3fd287a7
 8019260:	8b60c8b3 	.word	0x8b60c8b3
 8019264:	3fc68a28 	.word	0x3fc68a28
 8019268:	509f79fb 	.word	0x509f79fb
 801926c:	3fd34413 	.word	0x3fd34413
 8019270:	7ff00000 	.word	0x7ff00000
 8019274:	0801e2e1 	.word	0x0801e2e1
 8019278:	3ff80000 	.word	0x3ff80000
 801927c:	0801e3a0 	.word	0x0801e3a0
 8019280:	0801e378 	.word	0x0801e378
 8019284:	0801e369 	.word	0x0801e369
 8019288:	07f1      	lsls	r1, r6, #31
 801928a:	d508      	bpl.n	801929e <_dtoa_r+0x34e>
 801928c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019294:	f7e7 f9c0 	bl	8000618 <__aeabi_dmul>
 8019298:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801929c:	3501      	adds	r5, #1
 801929e:	1076      	asrs	r6, r6, #1
 80192a0:	3708      	adds	r7, #8
 80192a2:	2e00      	cmp	r6, #0
 80192a4:	d1f0      	bne.n	8019288 <_dtoa_r+0x338>
 80192a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80192aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80192ae:	f7e7 fadd 	bl	800086c <__aeabi_ddiv>
 80192b2:	e9cd 0100 	strd	r0, r1, [sp]
 80192b6:	e01a      	b.n	80192ee <_dtoa_r+0x39e>
 80192b8:	2502      	movs	r5, #2
 80192ba:	e7a3      	b.n	8019204 <_dtoa_r+0x2b4>
 80192bc:	f000 80a0 	beq.w	8019400 <_dtoa_r+0x4b0>
 80192c0:	f1ca 0600 	rsb	r6, sl, #0
 80192c4:	4b9f      	ldr	r3, [pc, #636]	; (8019544 <_dtoa_r+0x5f4>)
 80192c6:	4fa0      	ldr	r7, [pc, #640]	; (8019548 <_dtoa_r+0x5f8>)
 80192c8:	f006 020f 	and.w	r2, r6, #15
 80192cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80192d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80192d8:	f7e7 f99e 	bl	8000618 <__aeabi_dmul>
 80192dc:	e9cd 0100 	strd	r0, r1, [sp]
 80192e0:	1136      	asrs	r6, r6, #4
 80192e2:	2300      	movs	r3, #0
 80192e4:	2502      	movs	r5, #2
 80192e6:	2e00      	cmp	r6, #0
 80192e8:	d17f      	bne.n	80193ea <_dtoa_r+0x49a>
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d1e1      	bne.n	80192b2 <_dtoa_r+0x362>
 80192ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	f000 8087 	beq.w	8019404 <_dtoa_r+0x4b4>
 80192f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80192fa:	2200      	movs	r2, #0
 80192fc:	4b93      	ldr	r3, [pc, #588]	; (801954c <_dtoa_r+0x5fc>)
 80192fe:	4630      	mov	r0, r6
 8019300:	4639      	mov	r1, r7
 8019302:	f7e7 fbfb 	bl	8000afc <__aeabi_dcmplt>
 8019306:	2800      	cmp	r0, #0
 8019308:	d07c      	beq.n	8019404 <_dtoa_r+0x4b4>
 801930a:	f1b9 0f00 	cmp.w	r9, #0
 801930e:	d079      	beq.n	8019404 <_dtoa_r+0x4b4>
 8019310:	9b02      	ldr	r3, [sp, #8]
 8019312:	2b00      	cmp	r3, #0
 8019314:	dd35      	ble.n	8019382 <_dtoa_r+0x432>
 8019316:	f10a 33ff 	add.w	r3, sl, #4294967295
 801931a:	9308      	str	r3, [sp, #32]
 801931c:	4639      	mov	r1, r7
 801931e:	2200      	movs	r2, #0
 8019320:	4b8b      	ldr	r3, [pc, #556]	; (8019550 <_dtoa_r+0x600>)
 8019322:	4630      	mov	r0, r6
 8019324:	f7e7 f978 	bl	8000618 <__aeabi_dmul>
 8019328:	e9cd 0100 	strd	r0, r1, [sp]
 801932c:	9f02      	ldr	r7, [sp, #8]
 801932e:	3501      	adds	r5, #1
 8019330:	4628      	mov	r0, r5
 8019332:	f7e7 f907 	bl	8000544 <__aeabi_i2d>
 8019336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801933a:	f7e7 f96d 	bl	8000618 <__aeabi_dmul>
 801933e:	2200      	movs	r2, #0
 8019340:	4b84      	ldr	r3, [pc, #528]	; (8019554 <_dtoa_r+0x604>)
 8019342:	f7e6 ffb3 	bl	80002ac <__adddf3>
 8019346:	4605      	mov	r5, r0
 8019348:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801934c:	2f00      	cmp	r7, #0
 801934e:	d15d      	bne.n	801940c <_dtoa_r+0x4bc>
 8019350:	2200      	movs	r2, #0
 8019352:	4b81      	ldr	r3, [pc, #516]	; (8019558 <_dtoa_r+0x608>)
 8019354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019358:	f7e6 ffa6 	bl	80002a8 <__aeabi_dsub>
 801935c:	462a      	mov	r2, r5
 801935e:	4633      	mov	r3, r6
 8019360:	e9cd 0100 	strd	r0, r1, [sp]
 8019364:	f7e7 fbe8 	bl	8000b38 <__aeabi_dcmpgt>
 8019368:	2800      	cmp	r0, #0
 801936a:	f040 8288 	bne.w	801987e <_dtoa_r+0x92e>
 801936e:	462a      	mov	r2, r5
 8019370:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8019374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019378:	f7e7 fbc0 	bl	8000afc <__aeabi_dcmplt>
 801937c:	2800      	cmp	r0, #0
 801937e:	f040 827c 	bne.w	801987a <_dtoa_r+0x92a>
 8019382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019386:	e9cd 2300 	strd	r2, r3, [sp]
 801938a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801938c:	2b00      	cmp	r3, #0
 801938e:	f2c0 8150 	blt.w	8019632 <_dtoa_r+0x6e2>
 8019392:	f1ba 0f0e 	cmp.w	sl, #14
 8019396:	f300 814c 	bgt.w	8019632 <_dtoa_r+0x6e2>
 801939a:	4b6a      	ldr	r3, [pc, #424]	; (8019544 <_dtoa_r+0x5f4>)
 801939c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80193a0:	ed93 7b00 	vldr	d7, [r3]
 80193a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80193ac:	f280 80d8 	bge.w	8019560 <_dtoa_r+0x610>
 80193b0:	f1b9 0f00 	cmp.w	r9, #0
 80193b4:	f300 80d4 	bgt.w	8019560 <_dtoa_r+0x610>
 80193b8:	f040 825e 	bne.w	8019878 <_dtoa_r+0x928>
 80193bc:	2200      	movs	r2, #0
 80193be:	4b66      	ldr	r3, [pc, #408]	; (8019558 <_dtoa_r+0x608>)
 80193c0:	ec51 0b17 	vmov	r0, r1, d7
 80193c4:	f7e7 f928 	bl	8000618 <__aeabi_dmul>
 80193c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80193cc:	f7e7 fbaa 	bl	8000b24 <__aeabi_dcmpge>
 80193d0:	464f      	mov	r7, r9
 80193d2:	464e      	mov	r6, r9
 80193d4:	2800      	cmp	r0, #0
 80193d6:	f040 8234 	bne.w	8019842 <_dtoa_r+0x8f2>
 80193da:	2331      	movs	r3, #49	; 0x31
 80193dc:	f10b 0501 	add.w	r5, fp, #1
 80193e0:	f88b 3000 	strb.w	r3, [fp]
 80193e4:	f10a 0a01 	add.w	sl, sl, #1
 80193e8:	e22f      	b.n	801984a <_dtoa_r+0x8fa>
 80193ea:	07f2      	lsls	r2, r6, #31
 80193ec:	d505      	bpl.n	80193fa <_dtoa_r+0x4aa>
 80193ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80193f2:	f7e7 f911 	bl	8000618 <__aeabi_dmul>
 80193f6:	3501      	adds	r5, #1
 80193f8:	2301      	movs	r3, #1
 80193fa:	1076      	asrs	r6, r6, #1
 80193fc:	3708      	adds	r7, #8
 80193fe:	e772      	b.n	80192e6 <_dtoa_r+0x396>
 8019400:	2502      	movs	r5, #2
 8019402:	e774      	b.n	80192ee <_dtoa_r+0x39e>
 8019404:	f8cd a020 	str.w	sl, [sp, #32]
 8019408:	464f      	mov	r7, r9
 801940a:	e791      	b.n	8019330 <_dtoa_r+0x3e0>
 801940c:	4b4d      	ldr	r3, [pc, #308]	; (8019544 <_dtoa_r+0x5f4>)
 801940e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8019412:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8019416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019418:	2b00      	cmp	r3, #0
 801941a:	d047      	beq.n	80194ac <_dtoa_r+0x55c>
 801941c:	4602      	mov	r2, r0
 801941e:	460b      	mov	r3, r1
 8019420:	2000      	movs	r0, #0
 8019422:	494e      	ldr	r1, [pc, #312]	; (801955c <_dtoa_r+0x60c>)
 8019424:	f7e7 fa22 	bl	800086c <__aeabi_ddiv>
 8019428:	462a      	mov	r2, r5
 801942a:	4633      	mov	r3, r6
 801942c:	f7e6 ff3c 	bl	80002a8 <__aeabi_dsub>
 8019430:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8019434:	465d      	mov	r5, fp
 8019436:	e9dd 0100 	ldrd	r0, r1, [sp]
 801943a:	f7e7 fb9d 	bl	8000b78 <__aeabi_d2iz>
 801943e:	4606      	mov	r6, r0
 8019440:	f7e7 f880 	bl	8000544 <__aeabi_i2d>
 8019444:	4602      	mov	r2, r0
 8019446:	460b      	mov	r3, r1
 8019448:	e9dd 0100 	ldrd	r0, r1, [sp]
 801944c:	f7e6 ff2c 	bl	80002a8 <__aeabi_dsub>
 8019450:	3630      	adds	r6, #48	; 0x30
 8019452:	f805 6b01 	strb.w	r6, [r5], #1
 8019456:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801945a:	e9cd 0100 	strd	r0, r1, [sp]
 801945e:	f7e7 fb4d 	bl	8000afc <__aeabi_dcmplt>
 8019462:	2800      	cmp	r0, #0
 8019464:	d163      	bne.n	801952e <_dtoa_r+0x5de>
 8019466:	e9dd 2300 	ldrd	r2, r3, [sp]
 801946a:	2000      	movs	r0, #0
 801946c:	4937      	ldr	r1, [pc, #220]	; (801954c <_dtoa_r+0x5fc>)
 801946e:	f7e6 ff1b 	bl	80002a8 <__aeabi_dsub>
 8019472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019476:	f7e7 fb41 	bl	8000afc <__aeabi_dcmplt>
 801947a:	2800      	cmp	r0, #0
 801947c:	f040 80b7 	bne.w	80195ee <_dtoa_r+0x69e>
 8019480:	eba5 030b 	sub.w	r3, r5, fp
 8019484:	429f      	cmp	r7, r3
 8019486:	f77f af7c 	ble.w	8019382 <_dtoa_r+0x432>
 801948a:	2200      	movs	r2, #0
 801948c:	4b30      	ldr	r3, [pc, #192]	; (8019550 <_dtoa_r+0x600>)
 801948e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019492:	f7e7 f8c1 	bl	8000618 <__aeabi_dmul>
 8019496:	2200      	movs	r2, #0
 8019498:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801949c:	4b2c      	ldr	r3, [pc, #176]	; (8019550 <_dtoa_r+0x600>)
 801949e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194a2:	f7e7 f8b9 	bl	8000618 <__aeabi_dmul>
 80194a6:	e9cd 0100 	strd	r0, r1, [sp]
 80194aa:	e7c4      	b.n	8019436 <_dtoa_r+0x4e6>
 80194ac:	462a      	mov	r2, r5
 80194ae:	4633      	mov	r3, r6
 80194b0:	f7e7 f8b2 	bl	8000618 <__aeabi_dmul>
 80194b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80194b8:	eb0b 0507 	add.w	r5, fp, r7
 80194bc:	465e      	mov	r6, fp
 80194be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194c2:	f7e7 fb59 	bl	8000b78 <__aeabi_d2iz>
 80194c6:	4607      	mov	r7, r0
 80194c8:	f7e7 f83c 	bl	8000544 <__aeabi_i2d>
 80194cc:	3730      	adds	r7, #48	; 0x30
 80194ce:	4602      	mov	r2, r0
 80194d0:	460b      	mov	r3, r1
 80194d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194d6:	f7e6 fee7 	bl	80002a8 <__aeabi_dsub>
 80194da:	f806 7b01 	strb.w	r7, [r6], #1
 80194de:	42ae      	cmp	r6, r5
 80194e0:	e9cd 0100 	strd	r0, r1, [sp]
 80194e4:	f04f 0200 	mov.w	r2, #0
 80194e8:	d126      	bne.n	8019538 <_dtoa_r+0x5e8>
 80194ea:	4b1c      	ldr	r3, [pc, #112]	; (801955c <_dtoa_r+0x60c>)
 80194ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80194f0:	f7e6 fedc 	bl	80002ac <__adddf3>
 80194f4:	4602      	mov	r2, r0
 80194f6:	460b      	mov	r3, r1
 80194f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80194fc:	f7e7 fb1c 	bl	8000b38 <__aeabi_dcmpgt>
 8019500:	2800      	cmp	r0, #0
 8019502:	d174      	bne.n	80195ee <_dtoa_r+0x69e>
 8019504:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019508:	2000      	movs	r0, #0
 801950a:	4914      	ldr	r1, [pc, #80]	; (801955c <_dtoa_r+0x60c>)
 801950c:	f7e6 fecc 	bl	80002a8 <__aeabi_dsub>
 8019510:	4602      	mov	r2, r0
 8019512:	460b      	mov	r3, r1
 8019514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019518:	f7e7 faf0 	bl	8000afc <__aeabi_dcmplt>
 801951c:	2800      	cmp	r0, #0
 801951e:	f43f af30 	beq.w	8019382 <_dtoa_r+0x432>
 8019522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019526:	2b30      	cmp	r3, #48	; 0x30
 8019528:	f105 32ff 	add.w	r2, r5, #4294967295
 801952c:	d002      	beq.n	8019534 <_dtoa_r+0x5e4>
 801952e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019532:	e04a      	b.n	80195ca <_dtoa_r+0x67a>
 8019534:	4615      	mov	r5, r2
 8019536:	e7f4      	b.n	8019522 <_dtoa_r+0x5d2>
 8019538:	4b05      	ldr	r3, [pc, #20]	; (8019550 <_dtoa_r+0x600>)
 801953a:	f7e7 f86d 	bl	8000618 <__aeabi_dmul>
 801953e:	e9cd 0100 	strd	r0, r1, [sp]
 8019542:	e7bc      	b.n	80194be <_dtoa_r+0x56e>
 8019544:	0801e3a0 	.word	0x0801e3a0
 8019548:	0801e378 	.word	0x0801e378
 801954c:	3ff00000 	.word	0x3ff00000
 8019550:	40240000 	.word	0x40240000
 8019554:	401c0000 	.word	0x401c0000
 8019558:	40140000 	.word	0x40140000
 801955c:	3fe00000 	.word	0x3fe00000
 8019560:	e9dd 6700 	ldrd	r6, r7, [sp]
 8019564:	465d      	mov	r5, fp
 8019566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801956a:	4630      	mov	r0, r6
 801956c:	4639      	mov	r1, r7
 801956e:	f7e7 f97d 	bl	800086c <__aeabi_ddiv>
 8019572:	f7e7 fb01 	bl	8000b78 <__aeabi_d2iz>
 8019576:	4680      	mov	r8, r0
 8019578:	f7e6 ffe4 	bl	8000544 <__aeabi_i2d>
 801957c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019580:	f7e7 f84a 	bl	8000618 <__aeabi_dmul>
 8019584:	4602      	mov	r2, r0
 8019586:	460b      	mov	r3, r1
 8019588:	4630      	mov	r0, r6
 801958a:	4639      	mov	r1, r7
 801958c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8019590:	f7e6 fe8a 	bl	80002a8 <__aeabi_dsub>
 8019594:	f805 6b01 	strb.w	r6, [r5], #1
 8019598:	eba5 060b 	sub.w	r6, r5, fp
 801959c:	45b1      	cmp	r9, r6
 801959e:	4602      	mov	r2, r0
 80195a0:	460b      	mov	r3, r1
 80195a2:	d139      	bne.n	8019618 <_dtoa_r+0x6c8>
 80195a4:	f7e6 fe82 	bl	80002ac <__adddf3>
 80195a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80195ac:	4606      	mov	r6, r0
 80195ae:	460f      	mov	r7, r1
 80195b0:	f7e7 fac2 	bl	8000b38 <__aeabi_dcmpgt>
 80195b4:	b9c8      	cbnz	r0, 80195ea <_dtoa_r+0x69a>
 80195b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80195ba:	4630      	mov	r0, r6
 80195bc:	4639      	mov	r1, r7
 80195be:	f7e7 fa93 	bl	8000ae8 <__aeabi_dcmpeq>
 80195c2:	b110      	cbz	r0, 80195ca <_dtoa_r+0x67a>
 80195c4:	f018 0f01 	tst.w	r8, #1
 80195c8:	d10f      	bne.n	80195ea <_dtoa_r+0x69a>
 80195ca:	9904      	ldr	r1, [sp, #16]
 80195cc:	4620      	mov	r0, r4
 80195ce:	f000 fdf9 	bl	801a1c4 <_Bfree>
 80195d2:	2300      	movs	r3, #0
 80195d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195d6:	702b      	strb	r3, [r5, #0]
 80195d8:	f10a 0301 	add.w	r3, sl, #1
 80195dc:	6013      	str	r3, [r2, #0]
 80195de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	f000 8241 	beq.w	8019a68 <_dtoa_r+0xb18>
 80195e6:	601d      	str	r5, [r3, #0]
 80195e8:	e23e      	b.n	8019a68 <_dtoa_r+0xb18>
 80195ea:	f8cd a020 	str.w	sl, [sp, #32]
 80195ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80195f2:	2a39      	cmp	r2, #57	; 0x39
 80195f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80195f8:	d108      	bne.n	801960c <_dtoa_r+0x6bc>
 80195fa:	459b      	cmp	fp, r3
 80195fc:	d10a      	bne.n	8019614 <_dtoa_r+0x6c4>
 80195fe:	9b08      	ldr	r3, [sp, #32]
 8019600:	3301      	adds	r3, #1
 8019602:	9308      	str	r3, [sp, #32]
 8019604:	2330      	movs	r3, #48	; 0x30
 8019606:	f88b 3000 	strb.w	r3, [fp]
 801960a:	465b      	mov	r3, fp
 801960c:	781a      	ldrb	r2, [r3, #0]
 801960e:	3201      	adds	r2, #1
 8019610:	701a      	strb	r2, [r3, #0]
 8019612:	e78c      	b.n	801952e <_dtoa_r+0x5de>
 8019614:	461d      	mov	r5, r3
 8019616:	e7ea      	b.n	80195ee <_dtoa_r+0x69e>
 8019618:	2200      	movs	r2, #0
 801961a:	4b9b      	ldr	r3, [pc, #620]	; (8019888 <_dtoa_r+0x938>)
 801961c:	f7e6 fffc 	bl	8000618 <__aeabi_dmul>
 8019620:	2200      	movs	r2, #0
 8019622:	2300      	movs	r3, #0
 8019624:	4606      	mov	r6, r0
 8019626:	460f      	mov	r7, r1
 8019628:	f7e7 fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801962c:	2800      	cmp	r0, #0
 801962e:	d09a      	beq.n	8019566 <_dtoa_r+0x616>
 8019630:	e7cb      	b.n	80195ca <_dtoa_r+0x67a>
 8019632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019634:	2a00      	cmp	r2, #0
 8019636:	f000 808b 	beq.w	8019750 <_dtoa_r+0x800>
 801963a:	9a06      	ldr	r2, [sp, #24]
 801963c:	2a01      	cmp	r2, #1
 801963e:	dc6e      	bgt.n	801971e <_dtoa_r+0x7ce>
 8019640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019642:	2a00      	cmp	r2, #0
 8019644:	d067      	beq.n	8019716 <_dtoa_r+0x7c6>
 8019646:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801964a:	9f07      	ldr	r7, [sp, #28]
 801964c:	9d05      	ldr	r5, [sp, #20]
 801964e:	9a05      	ldr	r2, [sp, #20]
 8019650:	2101      	movs	r1, #1
 8019652:	441a      	add	r2, r3
 8019654:	4620      	mov	r0, r4
 8019656:	9205      	str	r2, [sp, #20]
 8019658:	4498      	add	r8, r3
 801965a:	f000 fe91 	bl	801a380 <__i2b>
 801965e:	4606      	mov	r6, r0
 8019660:	2d00      	cmp	r5, #0
 8019662:	dd0c      	ble.n	801967e <_dtoa_r+0x72e>
 8019664:	f1b8 0f00 	cmp.w	r8, #0
 8019668:	dd09      	ble.n	801967e <_dtoa_r+0x72e>
 801966a:	4545      	cmp	r5, r8
 801966c:	9a05      	ldr	r2, [sp, #20]
 801966e:	462b      	mov	r3, r5
 8019670:	bfa8      	it	ge
 8019672:	4643      	movge	r3, r8
 8019674:	1ad2      	subs	r2, r2, r3
 8019676:	9205      	str	r2, [sp, #20]
 8019678:	1aed      	subs	r5, r5, r3
 801967a:	eba8 0803 	sub.w	r8, r8, r3
 801967e:	9b07      	ldr	r3, [sp, #28]
 8019680:	b1eb      	cbz	r3, 80196be <_dtoa_r+0x76e>
 8019682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019684:	2b00      	cmp	r3, #0
 8019686:	d067      	beq.n	8019758 <_dtoa_r+0x808>
 8019688:	b18f      	cbz	r7, 80196ae <_dtoa_r+0x75e>
 801968a:	4631      	mov	r1, r6
 801968c:	463a      	mov	r2, r7
 801968e:	4620      	mov	r0, r4
 8019690:	f000 ff16 	bl	801a4c0 <__pow5mult>
 8019694:	9a04      	ldr	r2, [sp, #16]
 8019696:	4601      	mov	r1, r0
 8019698:	4606      	mov	r6, r0
 801969a:	4620      	mov	r0, r4
 801969c:	f000 fe79 	bl	801a392 <__multiply>
 80196a0:	9904      	ldr	r1, [sp, #16]
 80196a2:	9008      	str	r0, [sp, #32]
 80196a4:	4620      	mov	r0, r4
 80196a6:	f000 fd8d 	bl	801a1c4 <_Bfree>
 80196aa:	9b08      	ldr	r3, [sp, #32]
 80196ac:	9304      	str	r3, [sp, #16]
 80196ae:	9b07      	ldr	r3, [sp, #28]
 80196b0:	1bda      	subs	r2, r3, r7
 80196b2:	d004      	beq.n	80196be <_dtoa_r+0x76e>
 80196b4:	9904      	ldr	r1, [sp, #16]
 80196b6:	4620      	mov	r0, r4
 80196b8:	f000 ff02 	bl	801a4c0 <__pow5mult>
 80196bc:	9004      	str	r0, [sp, #16]
 80196be:	2101      	movs	r1, #1
 80196c0:	4620      	mov	r0, r4
 80196c2:	f000 fe5d 	bl	801a380 <__i2b>
 80196c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196c8:	4607      	mov	r7, r0
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	f000 81d0 	beq.w	8019a70 <_dtoa_r+0xb20>
 80196d0:	461a      	mov	r2, r3
 80196d2:	4601      	mov	r1, r0
 80196d4:	4620      	mov	r0, r4
 80196d6:	f000 fef3 	bl	801a4c0 <__pow5mult>
 80196da:	9b06      	ldr	r3, [sp, #24]
 80196dc:	2b01      	cmp	r3, #1
 80196de:	4607      	mov	r7, r0
 80196e0:	dc40      	bgt.n	8019764 <_dtoa_r+0x814>
 80196e2:	9b00      	ldr	r3, [sp, #0]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d139      	bne.n	801975c <_dtoa_r+0x80c>
 80196e8:	9b01      	ldr	r3, [sp, #4]
 80196ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d136      	bne.n	8019760 <_dtoa_r+0x810>
 80196f2:	9b01      	ldr	r3, [sp, #4]
 80196f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196f8:	0d1b      	lsrs	r3, r3, #20
 80196fa:	051b      	lsls	r3, r3, #20
 80196fc:	b12b      	cbz	r3, 801970a <_dtoa_r+0x7ba>
 80196fe:	9b05      	ldr	r3, [sp, #20]
 8019700:	3301      	adds	r3, #1
 8019702:	9305      	str	r3, [sp, #20]
 8019704:	f108 0801 	add.w	r8, r8, #1
 8019708:	2301      	movs	r3, #1
 801970a:	9307      	str	r3, [sp, #28]
 801970c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801970e:	2b00      	cmp	r3, #0
 8019710:	d12a      	bne.n	8019768 <_dtoa_r+0x818>
 8019712:	2001      	movs	r0, #1
 8019714:	e030      	b.n	8019778 <_dtoa_r+0x828>
 8019716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019718:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801971c:	e795      	b.n	801964a <_dtoa_r+0x6fa>
 801971e:	9b07      	ldr	r3, [sp, #28]
 8019720:	f109 37ff 	add.w	r7, r9, #4294967295
 8019724:	42bb      	cmp	r3, r7
 8019726:	bfbf      	itttt	lt
 8019728:	9b07      	ldrlt	r3, [sp, #28]
 801972a:	9707      	strlt	r7, [sp, #28]
 801972c:	1afa      	sublt	r2, r7, r3
 801972e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8019730:	bfbb      	ittet	lt
 8019732:	189b      	addlt	r3, r3, r2
 8019734:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019736:	1bdf      	subge	r7, r3, r7
 8019738:	2700      	movlt	r7, #0
 801973a:	f1b9 0f00 	cmp.w	r9, #0
 801973e:	bfb5      	itete	lt
 8019740:	9b05      	ldrlt	r3, [sp, #20]
 8019742:	9d05      	ldrge	r5, [sp, #20]
 8019744:	eba3 0509 	sublt.w	r5, r3, r9
 8019748:	464b      	movge	r3, r9
 801974a:	bfb8      	it	lt
 801974c:	2300      	movlt	r3, #0
 801974e:	e77e      	b.n	801964e <_dtoa_r+0x6fe>
 8019750:	9f07      	ldr	r7, [sp, #28]
 8019752:	9d05      	ldr	r5, [sp, #20]
 8019754:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019756:	e783      	b.n	8019660 <_dtoa_r+0x710>
 8019758:	9a07      	ldr	r2, [sp, #28]
 801975a:	e7ab      	b.n	80196b4 <_dtoa_r+0x764>
 801975c:	2300      	movs	r3, #0
 801975e:	e7d4      	b.n	801970a <_dtoa_r+0x7ba>
 8019760:	9b00      	ldr	r3, [sp, #0]
 8019762:	e7d2      	b.n	801970a <_dtoa_r+0x7ba>
 8019764:	2300      	movs	r3, #0
 8019766:	9307      	str	r3, [sp, #28]
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801976e:	6918      	ldr	r0, [r3, #16]
 8019770:	f000 fdb8 	bl	801a2e4 <__hi0bits>
 8019774:	f1c0 0020 	rsb	r0, r0, #32
 8019778:	4440      	add	r0, r8
 801977a:	f010 001f 	ands.w	r0, r0, #31
 801977e:	d047      	beq.n	8019810 <_dtoa_r+0x8c0>
 8019780:	f1c0 0320 	rsb	r3, r0, #32
 8019784:	2b04      	cmp	r3, #4
 8019786:	dd3b      	ble.n	8019800 <_dtoa_r+0x8b0>
 8019788:	9b05      	ldr	r3, [sp, #20]
 801978a:	f1c0 001c 	rsb	r0, r0, #28
 801978e:	4403      	add	r3, r0
 8019790:	9305      	str	r3, [sp, #20]
 8019792:	4405      	add	r5, r0
 8019794:	4480      	add	r8, r0
 8019796:	9b05      	ldr	r3, [sp, #20]
 8019798:	2b00      	cmp	r3, #0
 801979a:	dd05      	ble.n	80197a8 <_dtoa_r+0x858>
 801979c:	461a      	mov	r2, r3
 801979e:	9904      	ldr	r1, [sp, #16]
 80197a0:	4620      	mov	r0, r4
 80197a2:	f000 fedb 	bl	801a55c <__lshift>
 80197a6:	9004      	str	r0, [sp, #16]
 80197a8:	f1b8 0f00 	cmp.w	r8, #0
 80197ac:	dd05      	ble.n	80197ba <_dtoa_r+0x86a>
 80197ae:	4639      	mov	r1, r7
 80197b0:	4642      	mov	r2, r8
 80197b2:	4620      	mov	r0, r4
 80197b4:	f000 fed2 	bl	801a55c <__lshift>
 80197b8:	4607      	mov	r7, r0
 80197ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197bc:	b353      	cbz	r3, 8019814 <_dtoa_r+0x8c4>
 80197be:	4639      	mov	r1, r7
 80197c0:	9804      	ldr	r0, [sp, #16]
 80197c2:	f000 ff1f 	bl	801a604 <__mcmp>
 80197c6:	2800      	cmp	r0, #0
 80197c8:	da24      	bge.n	8019814 <_dtoa_r+0x8c4>
 80197ca:	2300      	movs	r3, #0
 80197cc:	220a      	movs	r2, #10
 80197ce:	9904      	ldr	r1, [sp, #16]
 80197d0:	4620      	mov	r0, r4
 80197d2:	f000 fd0e 	bl	801a1f2 <__multadd>
 80197d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197d8:	9004      	str	r0, [sp, #16]
 80197da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f000 814d 	beq.w	8019a7e <_dtoa_r+0xb2e>
 80197e4:	2300      	movs	r3, #0
 80197e6:	4631      	mov	r1, r6
 80197e8:	220a      	movs	r2, #10
 80197ea:	4620      	mov	r0, r4
 80197ec:	f000 fd01 	bl	801a1f2 <__multadd>
 80197f0:	9b02      	ldr	r3, [sp, #8]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	4606      	mov	r6, r0
 80197f6:	dc4f      	bgt.n	8019898 <_dtoa_r+0x948>
 80197f8:	9b06      	ldr	r3, [sp, #24]
 80197fa:	2b02      	cmp	r3, #2
 80197fc:	dd4c      	ble.n	8019898 <_dtoa_r+0x948>
 80197fe:	e011      	b.n	8019824 <_dtoa_r+0x8d4>
 8019800:	d0c9      	beq.n	8019796 <_dtoa_r+0x846>
 8019802:	9a05      	ldr	r2, [sp, #20]
 8019804:	331c      	adds	r3, #28
 8019806:	441a      	add	r2, r3
 8019808:	9205      	str	r2, [sp, #20]
 801980a:	441d      	add	r5, r3
 801980c:	4498      	add	r8, r3
 801980e:	e7c2      	b.n	8019796 <_dtoa_r+0x846>
 8019810:	4603      	mov	r3, r0
 8019812:	e7f6      	b.n	8019802 <_dtoa_r+0x8b2>
 8019814:	f1b9 0f00 	cmp.w	r9, #0
 8019818:	dc38      	bgt.n	801988c <_dtoa_r+0x93c>
 801981a:	9b06      	ldr	r3, [sp, #24]
 801981c:	2b02      	cmp	r3, #2
 801981e:	dd35      	ble.n	801988c <_dtoa_r+0x93c>
 8019820:	f8cd 9008 	str.w	r9, [sp, #8]
 8019824:	9b02      	ldr	r3, [sp, #8]
 8019826:	b963      	cbnz	r3, 8019842 <_dtoa_r+0x8f2>
 8019828:	4639      	mov	r1, r7
 801982a:	2205      	movs	r2, #5
 801982c:	4620      	mov	r0, r4
 801982e:	f000 fce0 	bl	801a1f2 <__multadd>
 8019832:	4601      	mov	r1, r0
 8019834:	4607      	mov	r7, r0
 8019836:	9804      	ldr	r0, [sp, #16]
 8019838:	f000 fee4 	bl	801a604 <__mcmp>
 801983c:	2800      	cmp	r0, #0
 801983e:	f73f adcc 	bgt.w	80193da <_dtoa_r+0x48a>
 8019842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019844:	465d      	mov	r5, fp
 8019846:	ea6f 0a03 	mvn.w	sl, r3
 801984a:	f04f 0900 	mov.w	r9, #0
 801984e:	4639      	mov	r1, r7
 8019850:	4620      	mov	r0, r4
 8019852:	f000 fcb7 	bl	801a1c4 <_Bfree>
 8019856:	2e00      	cmp	r6, #0
 8019858:	f43f aeb7 	beq.w	80195ca <_dtoa_r+0x67a>
 801985c:	f1b9 0f00 	cmp.w	r9, #0
 8019860:	d005      	beq.n	801986e <_dtoa_r+0x91e>
 8019862:	45b1      	cmp	r9, r6
 8019864:	d003      	beq.n	801986e <_dtoa_r+0x91e>
 8019866:	4649      	mov	r1, r9
 8019868:	4620      	mov	r0, r4
 801986a:	f000 fcab 	bl	801a1c4 <_Bfree>
 801986e:	4631      	mov	r1, r6
 8019870:	4620      	mov	r0, r4
 8019872:	f000 fca7 	bl	801a1c4 <_Bfree>
 8019876:	e6a8      	b.n	80195ca <_dtoa_r+0x67a>
 8019878:	2700      	movs	r7, #0
 801987a:	463e      	mov	r6, r7
 801987c:	e7e1      	b.n	8019842 <_dtoa_r+0x8f2>
 801987e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019882:	463e      	mov	r6, r7
 8019884:	e5a9      	b.n	80193da <_dtoa_r+0x48a>
 8019886:	bf00      	nop
 8019888:	40240000 	.word	0x40240000
 801988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801988e:	f8cd 9008 	str.w	r9, [sp, #8]
 8019892:	2b00      	cmp	r3, #0
 8019894:	f000 80fa 	beq.w	8019a8c <_dtoa_r+0xb3c>
 8019898:	2d00      	cmp	r5, #0
 801989a:	dd05      	ble.n	80198a8 <_dtoa_r+0x958>
 801989c:	4631      	mov	r1, r6
 801989e:	462a      	mov	r2, r5
 80198a0:	4620      	mov	r0, r4
 80198a2:	f000 fe5b 	bl	801a55c <__lshift>
 80198a6:	4606      	mov	r6, r0
 80198a8:	9b07      	ldr	r3, [sp, #28]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d04c      	beq.n	8019948 <_dtoa_r+0x9f8>
 80198ae:	6871      	ldr	r1, [r6, #4]
 80198b0:	4620      	mov	r0, r4
 80198b2:	f000 fc53 	bl	801a15c <_Balloc>
 80198b6:	6932      	ldr	r2, [r6, #16]
 80198b8:	3202      	adds	r2, #2
 80198ba:	4605      	mov	r5, r0
 80198bc:	0092      	lsls	r2, r2, #2
 80198be:	f106 010c 	add.w	r1, r6, #12
 80198c2:	300c      	adds	r0, #12
 80198c4:	f7fd fc44 	bl	8017150 <memcpy>
 80198c8:	2201      	movs	r2, #1
 80198ca:	4629      	mov	r1, r5
 80198cc:	4620      	mov	r0, r4
 80198ce:	f000 fe45 	bl	801a55c <__lshift>
 80198d2:	9b00      	ldr	r3, [sp, #0]
 80198d4:	f8cd b014 	str.w	fp, [sp, #20]
 80198d8:	f003 0301 	and.w	r3, r3, #1
 80198dc:	46b1      	mov	r9, r6
 80198de:	9307      	str	r3, [sp, #28]
 80198e0:	4606      	mov	r6, r0
 80198e2:	4639      	mov	r1, r7
 80198e4:	9804      	ldr	r0, [sp, #16]
 80198e6:	f7ff faa7 	bl	8018e38 <quorem>
 80198ea:	4649      	mov	r1, r9
 80198ec:	4605      	mov	r5, r0
 80198ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80198f2:	9804      	ldr	r0, [sp, #16]
 80198f4:	f000 fe86 	bl	801a604 <__mcmp>
 80198f8:	4632      	mov	r2, r6
 80198fa:	9000      	str	r0, [sp, #0]
 80198fc:	4639      	mov	r1, r7
 80198fe:	4620      	mov	r0, r4
 8019900:	f000 fe9a 	bl	801a638 <__mdiff>
 8019904:	68c3      	ldr	r3, [r0, #12]
 8019906:	4602      	mov	r2, r0
 8019908:	bb03      	cbnz	r3, 801994c <_dtoa_r+0x9fc>
 801990a:	4601      	mov	r1, r0
 801990c:	9008      	str	r0, [sp, #32]
 801990e:	9804      	ldr	r0, [sp, #16]
 8019910:	f000 fe78 	bl	801a604 <__mcmp>
 8019914:	9a08      	ldr	r2, [sp, #32]
 8019916:	4603      	mov	r3, r0
 8019918:	4611      	mov	r1, r2
 801991a:	4620      	mov	r0, r4
 801991c:	9308      	str	r3, [sp, #32]
 801991e:	f000 fc51 	bl	801a1c4 <_Bfree>
 8019922:	9b08      	ldr	r3, [sp, #32]
 8019924:	b9a3      	cbnz	r3, 8019950 <_dtoa_r+0xa00>
 8019926:	9a06      	ldr	r2, [sp, #24]
 8019928:	b992      	cbnz	r2, 8019950 <_dtoa_r+0xa00>
 801992a:	9a07      	ldr	r2, [sp, #28]
 801992c:	b982      	cbnz	r2, 8019950 <_dtoa_r+0xa00>
 801992e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019932:	d029      	beq.n	8019988 <_dtoa_r+0xa38>
 8019934:	9b00      	ldr	r3, [sp, #0]
 8019936:	2b00      	cmp	r3, #0
 8019938:	dd01      	ble.n	801993e <_dtoa_r+0x9ee>
 801993a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801993e:	9b05      	ldr	r3, [sp, #20]
 8019940:	1c5d      	adds	r5, r3, #1
 8019942:	f883 8000 	strb.w	r8, [r3]
 8019946:	e782      	b.n	801984e <_dtoa_r+0x8fe>
 8019948:	4630      	mov	r0, r6
 801994a:	e7c2      	b.n	80198d2 <_dtoa_r+0x982>
 801994c:	2301      	movs	r3, #1
 801994e:	e7e3      	b.n	8019918 <_dtoa_r+0x9c8>
 8019950:	9a00      	ldr	r2, [sp, #0]
 8019952:	2a00      	cmp	r2, #0
 8019954:	db04      	blt.n	8019960 <_dtoa_r+0xa10>
 8019956:	d125      	bne.n	80199a4 <_dtoa_r+0xa54>
 8019958:	9a06      	ldr	r2, [sp, #24]
 801995a:	bb1a      	cbnz	r2, 80199a4 <_dtoa_r+0xa54>
 801995c:	9a07      	ldr	r2, [sp, #28]
 801995e:	bb0a      	cbnz	r2, 80199a4 <_dtoa_r+0xa54>
 8019960:	2b00      	cmp	r3, #0
 8019962:	ddec      	ble.n	801993e <_dtoa_r+0x9ee>
 8019964:	2201      	movs	r2, #1
 8019966:	9904      	ldr	r1, [sp, #16]
 8019968:	4620      	mov	r0, r4
 801996a:	f000 fdf7 	bl	801a55c <__lshift>
 801996e:	4639      	mov	r1, r7
 8019970:	9004      	str	r0, [sp, #16]
 8019972:	f000 fe47 	bl	801a604 <__mcmp>
 8019976:	2800      	cmp	r0, #0
 8019978:	dc03      	bgt.n	8019982 <_dtoa_r+0xa32>
 801997a:	d1e0      	bne.n	801993e <_dtoa_r+0x9ee>
 801997c:	f018 0f01 	tst.w	r8, #1
 8019980:	d0dd      	beq.n	801993e <_dtoa_r+0x9ee>
 8019982:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8019986:	d1d8      	bne.n	801993a <_dtoa_r+0x9ea>
 8019988:	9b05      	ldr	r3, [sp, #20]
 801998a:	9a05      	ldr	r2, [sp, #20]
 801998c:	1c5d      	adds	r5, r3, #1
 801998e:	2339      	movs	r3, #57	; 0x39
 8019990:	7013      	strb	r3, [r2, #0]
 8019992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019996:	2b39      	cmp	r3, #57	; 0x39
 8019998:	f105 32ff 	add.w	r2, r5, #4294967295
 801999c:	d04f      	beq.n	8019a3e <_dtoa_r+0xaee>
 801999e:	3301      	adds	r3, #1
 80199a0:	7013      	strb	r3, [r2, #0]
 80199a2:	e754      	b.n	801984e <_dtoa_r+0x8fe>
 80199a4:	9a05      	ldr	r2, [sp, #20]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	f102 0501 	add.w	r5, r2, #1
 80199ac:	dd06      	ble.n	80199bc <_dtoa_r+0xa6c>
 80199ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80199b2:	d0e9      	beq.n	8019988 <_dtoa_r+0xa38>
 80199b4:	f108 0801 	add.w	r8, r8, #1
 80199b8:	9b05      	ldr	r3, [sp, #20]
 80199ba:	e7c2      	b.n	8019942 <_dtoa_r+0x9f2>
 80199bc:	9a02      	ldr	r2, [sp, #8]
 80199be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80199c2:	eba5 030b 	sub.w	r3, r5, fp
 80199c6:	4293      	cmp	r3, r2
 80199c8:	d021      	beq.n	8019a0e <_dtoa_r+0xabe>
 80199ca:	2300      	movs	r3, #0
 80199cc:	220a      	movs	r2, #10
 80199ce:	9904      	ldr	r1, [sp, #16]
 80199d0:	4620      	mov	r0, r4
 80199d2:	f000 fc0e 	bl	801a1f2 <__multadd>
 80199d6:	45b1      	cmp	r9, r6
 80199d8:	9004      	str	r0, [sp, #16]
 80199da:	f04f 0300 	mov.w	r3, #0
 80199de:	f04f 020a 	mov.w	r2, #10
 80199e2:	4649      	mov	r1, r9
 80199e4:	4620      	mov	r0, r4
 80199e6:	d105      	bne.n	80199f4 <_dtoa_r+0xaa4>
 80199e8:	f000 fc03 	bl	801a1f2 <__multadd>
 80199ec:	4681      	mov	r9, r0
 80199ee:	4606      	mov	r6, r0
 80199f0:	9505      	str	r5, [sp, #20]
 80199f2:	e776      	b.n	80198e2 <_dtoa_r+0x992>
 80199f4:	f000 fbfd 	bl	801a1f2 <__multadd>
 80199f8:	4631      	mov	r1, r6
 80199fa:	4681      	mov	r9, r0
 80199fc:	2300      	movs	r3, #0
 80199fe:	220a      	movs	r2, #10
 8019a00:	4620      	mov	r0, r4
 8019a02:	f000 fbf6 	bl	801a1f2 <__multadd>
 8019a06:	4606      	mov	r6, r0
 8019a08:	e7f2      	b.n	80199f0 <_dtoa_r+0xaa0>
 8019a0a:	f04f 0900 	mov.w	r9, #0
 8019a0e:	2201      	movs	r2, #1
 8019a10:	9904      	ldr	r1, [sp, #16]
 8019a12:	4620      	mov	r0, r4
 8019a14:	f000 fda2 	bl	801a55c <__lshift>
 8019a18:	4639      	mov	r1, r7
 8019a1a:	9004      	str	r0, [sp, #16]
 8019a1c:	f000 fdf2 	bl	801a604 <__mcmp>
 8019a20:	2800      	cmp	r0, #0
 8019a22:	dcb6      	bgt.n	8019992 <_dtoa_r+0xa42>
 8019a24:	d102      	bne.n	8019a2c <_dtoa_r+0xadc>
 8019a26:	f018 0f01 	tst.w	r8, #1
 8019a2a:	d1b2      	bne.n	8019992 <_dtoa_r+0xa42>
 8019a2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019a30:	2b30      	cmp	r3, #48	; 0x30
 8019a32:	f105 32ff 	add.w	r2, r5, #4294967295
 8019a36:	f47f af0a 	bne.w	801984e <_dtoa_r+0x8fe>
 8019a3a:	4615      	mov	r5, r2
 8019a3c:	e7f6      	b.n	8019a2c <_dtoa_r+0xadc>
 8019a3e:	4593      	cmp	fp, r2
 8019a40:	d105      	bne.n	8019a4e <_dtoa_r+0xafe>
 8019a42:	2331      	movs	r3, #49	; 0x31
 8019a44:	f10a 0a01 	add.w	sl, sl, #1
 8019a48:	f88b 3000 	strb.w	r3, [fp]
 8019a4c:	e6ff      	b.n	801984e <_dtoa_r+0x8fe>
 8019a4e:	4615      	mov	r5, r2
 8019a50:	e79f      	b.n	8019992 <_dtoa_r+0xa42>
 8019a52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8019ab8 <_dtoa_r+0xb68>
 8019a56:	e007      	b.n	8019a68 <_dtoa_r+0xb18>
 8019a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019a5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8019abc <_dtoa_r+0xb6c>
 8019a5e:	b11b      	cbz	r3, 8019a68 <_dtoa_r+0xb18>
 8019a60:	f10b 0308 	add.w	r3, fp, #8
 8019a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019a66:	6013      	str	r3, [r2, #0]
 8019a68:	4658      	mov	r0, fp
 8019a6a:	b017      	add	sp, #92	; 0x5c
 8019a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a70:	9b06      	ldr	r3, [sp, #24]
 8019a72:	2b01      	cmp	r3, #1
 8019a74:	f77f ae35 	ble.w	80196e2 <_dtoa_r+0x792>
 8019a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a7a:	9307      	str	r3, [sp, #28]
 8019a7c:	e649      	b.n	8019712 <_dtoa_r+0x7c2>
 8019a7e:	9b02      	ldr	r3, [sp, #8]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	dc03      	bgt.n	8019a8c <_dtoa_r+0xb3c>
 8019a84:	9b06      	ldr	r3, [sp, #24]
 8019a86:	2b02      	cmp	r3, #2
 8019a88:	f73f aecc 	bgt.w	8019824 <_dtoa_r+0x8d4>
 8019a8c:	465d      	mov	r5, fp
 8019a8e:	4639      	mov	r1, r7
 8019a90:	9804      	ldr	r0, [sp, #16]
 8019a92:	f7ff f9d1 	bl	8018e38 <quorem>
 8019a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8019a9a:	f805 8b01 	strb.w	r8, [r5], #1
 8019a9e:	9a02      	ldr	r2, [sp, #8]
 8019aa0:	eba5 030b 	sub.w	r3, r5, fp
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	ddb0      	ble.n	8019a0a <_dtoa_r+0xaba>
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	220a      	movs	r2, #10
 8019aac:	9904      	ldr	r1, [sp, #16]
 8019aae:	4620      	mov	r0, r4
 8019ab0:	f000 fb9f 	bl	801a1f2 <__multadd>
 8019ab4:	9004      	str	r0, [sp, #16]
 8019ab6:	e7ea      	b.n	8019a8e <_dtoa_r+0xb3e>
 8019ab8:	0801e2e0 	.word	0x0801e2e0
 8019abc:	0801e360 	.word	0x0801e360

08019ac0 <rshift>:
 8019ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ac2:	6906      	ldr	r6, [r0, #16]
 8019ac4:	114b      	asrs	r3, r1, #5
 8019ac6:	429e      	cmp	r6, r3
 8019ac8:	f100 0414 	add.w	r4, r0, #20
 8019acc:	dd30      	ble.n	8019b30 <rshift+0x70>
 8019ace:	f011 011f 	ands.w	r1, r1, #31
 8019ad2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019ad6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8019ada:	d108      	bne.n	8019aee <rshift+0x2e>
 8019adc:	4621      	mov	r1, r4
 8019ade:	42b2      	cmp	r2, r6
 8019ae0:	460b      	mov	r3, r1
 8019ae2:	d211      	bcs.n	8019b08 <rshift+0x48>
 8019ae4:	f852 3b04 	ldr.w	r3, [r2], #4
 8019ae8:	f841 3b04 	str.w	r3, [r1], #4
 8019aec:	e7f7      	b.n	8019ade <rshift+0x1e>
 8019aee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8019af2:	f1c1 0c20 	rsb	ip, r1, #32
 8019af6:	40cd      	lsrs	r5, r1
 8019af8:	3204      	adds	r2, #4
 8019afa:	4623      	mov	r3, r4
 8019afc:	42b2      	cmp	r2, r6
 8019afe:	4617      	mov	r7, r2
 8019b00:	d30c      	bcc.n	8019b1c <rshift+0x5c>
 8019b02:	601d      	str	r5, [r3, #0]
 8019b04:	b105      	cbz	r5, 8019b08 <rshift+0x48>
 8019b06:	3304      	adds	r3, #4
 8019b08:	1b1a      	subs	r2, r3, r4
 8019b0a:	42a3      	cmp	r3, r4
 8019b0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019b10:	bf08      	it	eq
 8019b12:	2300      	moveq	r3, #0
 8019b14:	6102      	str	r2, [r0, #16]
 8019b16:	bf08      	it	eq
 8019b18:	6143      	streq	r3, [r0, #20]
 8019b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b1c:	683f      	ldr	r7, [r7, #0]
 8019b1e:	fa07 f70c 	lsl.w	r7, r7, ip
 8019b22:	433d      	orrs	r5, r7
 8019b24:	f843 5b04 	str.w	r5, [r3], #4
 8019b28:	f852 5b04 	ldr.w	r5, [r2], #4
 8019b2c:	40cd      	lsrs	r5, r1
 8019b2e:	e7e5      	b.n	8019afc <rshift+0x3c>
 8019b30:	4623      	mov	r3, r4
 8019b32:	e7e9      	b.n	8019b08 <rshift+0x48>

08019b34 <__hexdig_fun>:
 8019b34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019b38:	2b09      	cmp	r3, #9
 8019b3a:	d802      	bhi.n	8019b42 <__hexdig_fun+0xe>
 8019b3c:	3820      	subs	r0, #32
 8019b3e:	b2c0      	uxtb	r0, r0
 8019b40:	4770      	bx	lr
 8019b42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019b46:	2b05      	cmp	r3, #5
 8019b48:	d801      	bhi.n	8019b4e <__hexdig_fun+0x1a>
 8019b4a:	3847      	subs	r0, #71	; 0x47
 8019b4c:	e7f7      	b.n	8019b3e <__hexdig_fun+0xa>
 8019b4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019b52:	2b05      	cmp	r3, #5
 8019b54:	d801      	bhi.n	8019b5a <__hexdig_fun+0x26>
 8019b56:	3827      	subs	r0, #39	; 0x27
 8019b58:	e7f1      	b.n	8019b3e <__hexdig_fun+0xa>
 8019b5a:	2000      	movs	r0, #0
 8019b5c:	4770      	bx	lr

08019b5e <__gethex>:
 8019b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b62:	b08b      	sub	sp, #44	; 0x2c
 8019b64:	468a      	mov	sl, r1
 8019b66:	9002      	str	r0, [sp, #8]
 8019b68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019b6a:	9306      	str	r3, [sp, #24]
 8019b6c:	4690      	mov	r8, r2
 8019b6e:	f000 fad0 	bl	801a112 <__localeconv_l>
 8019b72:	6803      	ldr	r3, [r0, #0]
 8019b74:	9303      	str	r3, [sp, #12]
 8019b76:	4618      	mov	r0, r3
 8019b78:	f7e6 fb34 	bl	80001e4 <strlen>
 8019b7c:	9b03      	ldr	r3, [sp, #12]
 8019b7e:	9001      	str	r0, [sp, #4]
 8019b80:	4403      	add	r3, r0
 8019b82:	f04f 0b00 	mov.w	fp, #0
 8019b86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019b8a:	9307      	str	r3, [sp, #28]
 8019b8c:	f8da 3000 	ldr.w	r3, [sl]
 8019b90:	3302      	adds	r3, #2
 8019b92:	461f      	mov	r7, r3
 8019b94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019b98:	2830      	cmp	r0, #48	; 0x30
 8019b9a:	d06c      	beq.n	8019c76 <__gethex+0x118>
 8019b9c:	f7ff ffca 	bl	8019b34 <__hexdig_fun>
 8019ba0:	4604      	mov	r4, r0
 8019ba2:	2800      	cmp	r0, #0
 8019ba4:	d16a      	bne.n	8019c7c <__gethex+0x11e>
 8019ba6:	9a01      	ldr	r2, [sp, #4]
 8019ba8:	9903      	ldr	r1, [sp, #12]
 8019baa:	4638      	mov	r0, r7
 8019bac:	f7fe fa24 	bl	8017ff8 <strncmp>
 8019bb0:	2800      	cmp	r0, #0
 8019bb2:	d166      	bne.n	8019c82 <__gethex+0x124>
 8019bb4:	9b01      	ldr	r3, [sp, #4]
 8019bb6:	5cf8      	ldrb	r0, [r7, r3]
 8019bb8:	18fe      	adds	r6, r7, r3
 8019bba:	f7ff ffbb 	bl	8019b34 <__hexdig_fun>
 8019bbe:	2800      	cmp	r0, #0
 8019bc0:	d062      	beq.n	8019c88 <__gethex+0x12a>
 8019bc2:	4633      	mov	r3, r6
 8019bc4:	7818      	ldrb	r0, [r3, #0]
 8019bc6:	2830      	cmp	r0, #48	; 0x30
 8019bc8:	461f      	mov	r7, r3
 8019bca:	f103 0301 	add.w	r3, r3, #1
 8019bce:	d0f9      	beq.n	8019bc4 <__gethex+0x66>
 8019bd0:	f7ff ffb0 	bl	8019b34 <__hexdig_fun>
 8019bd4:	fab0 f580 	clz	r5, r0
 8019bd8:	096d      	lsrs	r5, r5, #5
 8019bda:	4634      	mov	r4, r6
 8019bdc:	f04f 0b01 	mov.w	fp, #1
 8019be0:	463a      	mov	r2, r7
 8019be2:	4616      	mov	r6, r2
 8019be4:	3201      	adds	r2, #1
 8019be6:	7830      	ldrb	r0, [r6, #0]
 8019be8:	f7ff ffa4 	bl	8019b34 <__hexdig_fun>
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d1f8      	bne.n	8019be2 <__gethex+0x84>
 8019bf0:	9a01      	ldr	r2, [sp, #4]
 8019bf2:	9903      	ldr	r1, [sp, #12]
 8019bf4:	4630      	mov	r0, r6
 8019bf6:	f7fe f9ff 	bl	8017ff8 <strncmp>
 8019bfa:	b950      	cbnz	r0, 8019c12 <__gethex+0xb4>
 8019bfc:	b954      	cbnz	r4, 8019c14 <__gethex+0xb6>
 8019bfe:	9b01      	ldr	r3, [sp, #4]
 8019c00:	18f4      	adds	r4, r6, r3
 8019c02:	4622      	mov	r2, r4
 8019c04:	4616      	mov	r6, r2
 8019c06:	3201      	adds	r2, #1
 8019c08:	7830      	ldrb	r0, [r6, #0]
 8019c0a:	f7ff ff93 	bl	8019b34 <__hexdig_fun>
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	d1f8      	bne.n	8019c04 <__gethex+0xa6>
 8019c12:	b10c      	cbz	r4, 8019c18 <__gethex+0xba>
 8019c14:	1ba4      	subs	r4, r4, r6
 8019c16:	00a4      	lsls	r4, r4, #2
 8019c18:	7833      	ldrb	r3, [r6, #0]
 8019c1a:	2b50      	cmp	r3, #80	; 0x50
 8019c1c:	d001      	beq.n	8019c22 <__gethex+0xc4>
 8019c1e:	2b70      	cmp	r3, #112	; 0x70
 8019c20:	d140      	bne.n	8019ca4 <__gethex+0x146>
 8019c22:	7873      	ldrb	r3, [r6, #1]
 8019c24:	2b2b      	cmp	r3, #43	; 0x2b
 8019c26:	d031      	beq.n	8019c8c <__gethex+0x12e>
 8019c28:	2b2d      	cmp	r3, #45	; 0x2d
 8019c2a:	d033      	beq.n	8019c94 <__gethex+0x136>
 8019c2c:	1c71      	adds	r1, r6, #1
 8019c2e:	f04f 0900 	mov.w	r9, #0
 8019c32:	7808      	ldrb	r0, [r1, #0]
 8019c34:	f7ff ff7e 	bl	8019b34 <__hexdig_fun>
 8019c38:	1e43      	subs	r3, r0, #1
 8019c3a:	b2db      	uxtb	r3, r3
 8019c3c:	2b18      	cmp	r3, #24
 8019c3e:	d831      	bhi.n	8019ca4 <__gethex+0x146>
 8019c40:	f1a0 0210 	sub.w	r2, r0, #16
 8019c44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019c48:	f7ff ff74 	bl	8019b34 <__hexdig_fun>
 8019c4c:	1e43      	subs	r3, r0, #1
 8019c4e:	b2db      	uxtb	r3, r3
 8019c50:	2b18      	cmp	r3, #24
 8019c52:	d922      	bls.n	8019c9a <__gethex+0x13c>
 8019c54:	f1b9 0f00 	cmp.w	r9, #0
 8019c58:	d000      	beq.n	8019c5c <__gethex+0xfe>
 8019c5a:	4252      	negs	r2, r2
 8019c5c:	4414      	add	r4, r2
 8019c5e:	f8ca 1000 	str.w	r1, [sl]
 8019c62:	b30d      	cbz	r5, 8019ca8 <__gethex+0x14a>
 8019c64:	f1bb 0f00 	cmp.w	fp, #0
 8019c68:	bf0c      	ite	eq
 8019c6a:	2706      	moveq	r7, #6
 8019c6c:	2700      	movne	r7, #0
 8019c6e:	4638      	mov	r0, r7
 8019c70:	b00b      	add	sp, #44	; 0x2c
 8019c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c76:	f10b 0b01 	add.w	fp, fp, #1
 8019c7a:	e78a      	b.n	8019b92 <__gethex+0x34>
 8019c7c:	2500      	movs	r5, #0
 8019c7e:	462c      	mov	r4, r5
 8019c80:	e7ae      	b.n	8019be0 <__gethex+0x82>
 8019c82:	463e      	mov	r6, r7
 8019c84:	2501      	movs	r5, #1
 8019c86:	e7c7      	b.n	8019c18 <__gethex+0xba>
 8019c88:	4604      	mov	r4, r0
 8019c8a:	e7fb      	b.n	8019c84 <__gethex+0x126>
 8019c8c:	f04f 0900 	mov.w	r9, #0
 8019c90:	1cb1      	adds	r1, r6, #2
 8019c92:	e7ce      	b.n	8019c32 <__gethex+0xd4>
 8019c94:	f04f 0901 	mov.w	r9, #1
 8019c98:	e7fa      	b.n	8019c90 <__gethex+0x132>
 8019c9a:	230a      	movs	r3, #10
 8019c9c:	fb03 0202 	mla	r2, r3, r2, r0
 8019ca0:	3a10      	subs	r2, #16
 8019ca2:	e7cf      	b.n	8019c44 <__gethex+0xe6>
 8019ca4:	4631      	mov	r1, r6
 8019ca6:	e7da      	b.n	8019c5e <__gethex+0x100>
 8019ca8:	1bf3      	subs	r3, r6, r7
 8019caa:	3b01      	subs	r3, #1
 8019cac:	4629      	mov	r1, r5
 8019cae:	2b07      	cmp	r3, #7
 8019cb0:	dc49      	bgt.n	8019d46 <__gethex+0x1e8>
 8019cb2:	9802      	ldr	r0, [sp, #8]
 8019cb4:	f000 fa52 	bl	801a15c <_Balloc>
 8019cb8:	9b01      	ldr	r3, [sp, #4]
 8019cba:	f100 0914 	add.w	r9, r0, #20
 8019cbe:	f04f 0b00 	mov.w	fp, #0
 8019cc2:	f1c3 0301 	rsb	r3, r3, #1
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	f8cd 9010 	str.w	r9, [sp, #16]
 8019ccc:	46da      	mov	sl, fp
 8019cce:	9308      	str	r3, [sp, #32]
 8019cd0:	42b7      	cmp	r7, r6
 8019cd2:	d33b      	bcc.n	8019d4c <__gethex+0x1ee>
 8019cd4:	9804      	ldr	r0, [sp, #16]
 8019cd6:	f840 ab04 	str.w	sl, [r0], #4
 8019cda:	eba0 0009 	sub.w	r0, r0, r9
 8019cde:	1080      	asrs	r0, r0, #2
 8019ce0:	6128      	str	r0, [r5, #16]
 8019ce2:	0147      	lsls	r7, r0, #5
 8019ce4:	4650      	mov	r0, sl
 8019ce6:	f000 fafd 	bl	801a2e4 <__hi0bits>
 8019cea:	f8d8 6000 	ldr.w	r6, [r8]
 8019cee:	1a3f      	subs	r7, r7, r0
 8019cf0:	42b7      	cmp	r7, r6
 8019cf2:	dd64      	ble.n	8019dbe <__gethex+0x260>
 8019cf4:	1bbf      	subs	r7, r7, r6
 8019cf6:	4639      	mov	r1, r7
 8019cf8:	4628      	mov	r0, r5
 8019cfa:	f000 fe0d 	bl	801a918 <__any_on>
 8019cfe:	4682      	mov	sl, r0
 8019d00:	b178      	cbz	r0, 8019d22 <__gethex+0x1c4>
 8019d02:	1e7b      	subs	r3, r7, #1
 8019d04:	1159      	asrs	r1, r3, #5
 8019d06:	f003 021f 	and.w	r2, r3, #31
 8019d0a:	f04f 0a01 	mov.w	sl, #1
 8019d0e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019d12:	fa0a f202 	lsl.w	r2, sl, r2
 8019d16:	420a      	tst	r2, r1
 8019d18:	d003      	beq.n	8019d22 <__gethex+0x1c4>
 8019d1a:	4553      	cmp	r3, sl
 8019d1c:	dc46      	bgt.n	8019dac <__gethex+0x24e>
 8019d1e:	f04f 0a02 	mov.w	sl, #2
 8019d22:	4639      	mov	r1, r7
 8019d24:	4628      	mov	r0, r5
 8019d26:	f7ff fecb 	bl	8019ac0 <rshift>
 8019d2a:	443c      	add	r4, r7
 8019d2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019d30:	42a3      	cmp	r3, r4
 8019d32:	da52      	bge.n	8019dda <__gethex+0x27c>
 8019d34:	4629      	mov	r1, r5
 8019d36:	9802      	ldr	r0, [sp, #8]
 8019d38:	f000 fa44 	bl	801a1c4 <_Bfree>
 8019d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d3e:	2300      	movs	r3, #0
 8019d40:	6013      	str	r3, [r2, #0]
 8019d42:	27a3      	movs	r7, #163	; 0xa3
 8019d44:	e793      	b.n	8019c6e <__gethex+0x110>
 8019d46:	3101      	adds	r1, #1
 8019d48:	105b      	asrs	r3, r3, #1
 8019d4a:	e7b0      	b.n	8019cae <__gethex+0x150>
 8019d4c:	1e73      	subs	r3, r6, #1
 8019d4e:	9305      	str	r3, [sp, #20]
 8019d50:	9a07      	ldr	r2, [sp, #28]
 8019d52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019d56:	4293      	cmp	r3, r2
 8019d58:	d018      	beq.n	8019d8c <__gethex+0x22e>
 8019d5a:	f1bb 0f20 	cmp.w	fp, #32
 8019d5e:	d107      	bne.n	8019d70 <__gethex+0x212>
 8019d60:	9b04      	ldr	r3, [sp, #16]
 8019d62:	f8c3 a000 	str.w	sl, [r3]
 8019d66:	3304      	adds	r3, #4
 8019d68:	f04f 0a00 	mov.w	sl, #0
 8019d6c:	9304      	str	r3, [sp, #16]
 8019d6e:	46d3      	mov	fp, sl
 8019d70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019d74:	f7ff fede 	bl	8019b34 <__hexdig_fun>
 8019d78:	f000 000f 	and.w	r0, r0, #15
 8019d7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8019d80:	ea4a 0a00 	orr.w	sl, sl, r0
 8019d84:	f10b 0b04 	add.w	fp, fp, #4
 8019d88:	9b05      	ldr	r3, [sp, #20]
 8019d8a:	e00d      	b.n	8019da8 <__gethex+0x24a>
 8019d8c:	9b05      	ldr	r3, [sp, #20]
 8019d8e:	9a08      	ldr	r2, [sp, #32]
 8019d90:	4413      	add	r3, r2
 8019d92:	42bb      	cmp	r3, r7
 8019d94:	d3e1      	bcc.n	8019d5a <__gethex+0x1fc>
 8019d96:	4618      	mov	r0, r3
 8019d98:	9a01      	ldr	r2, [sp, #4]
 8019d9a:	9903      	ldr	r1, [sp, #12]
 8019d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d9e:	f7fe f92b 	bl	8017ff8 <strncmp>
 8019da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019da4:	2800      	cmp	r0, #0
 8019da6:	d1d8      	bne.n	8019d5a <__gethex+0x1fc>
 8019da8:	461e      	mov	r6, r3
 8019daa:	e791      	b.n	8019cd0 <__gethex+0x172>
 8019dac:	1eb9      	subs	r1, r7, #2
 8019dae:	4628      	mov	r0, r5
 8019db0:	f000 fdb2 	bl	801a918 <__any_on>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	d0b2      	beq.n	8019d1e <__gethex+0x1c0>
 8019db8:	f04f 0a03 	mov.w	sl, #3
 8019dbc:	e7b1      	b.n	8019d22 <__gethex+0x1c4>
 8019dbe:	da09      	bge.n	8019dd4 <__gethex+0x276>
 8019dc0:	1bf7      	subs	r7, r6, r7
 8019dc2:	4629      	mov	r1, r5
 8019dc4:	463a      	mov	r2, r7
 8019dc6:	9802      	ldr	r0, [sp, #8]
 8019dc8:	f000 fbc8 	bl	801a55c <__lshift>
 8019dcc:	1be4      	subs	r4, r4, r7
 8019dce:	4605      	mov	r5, r0
 8019dd0:	f100 0914 	add.w	r9, r0, #20
 8019dd4:	f04f 0a00 	mov.w	sl, #0
 8019dd8:	e7a8      	b.n	8019d2c <__gethex+0x1ce>
 8019dda:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019dde:	42a0      	cmp	r0, r4
 8019de0:	dd6a      	ble.n	8019eb8 <__gethex+0x35a>
 8019de2:	1b04      	subs	r4, r0, r4
 8019de4:	42a6      	cmp	r6, r4
 8019de6:	dc2e      	bgt.n	8019e46 <__gethex+0x2e8>
 8019de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019dec:	2b02      	cmp	r3, #2
 8019dee:	d022      	beq.n	8019e36 <__gethex+0x2d8>
 8019df0:	2b03      	cmp	r3, #3
 8019df2:	d024      	beq.n	8019e3e <__gethex+0x2e0>
 8019df4:	2b01      	cmp	r3, #1
 8019df6:	d115      	bne.n	8019e24 <__gethex+0x2c6>
 8019df8:	42a6      	cmp	r6, r4
 8019dfa:	d113      	bne.n	8019e24 <__gethex+0x2c6>
 8019dfc:	2e01      	cmp	r6, #1
 8019dfe:	dc0b      	bgt.n	8019e18 <__gethex+0x2ba>
 8019e00:	9a06      	ldr	r2, [sp, #24]
 8019e02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019e06:	6013      	str	r3, [r2, #0]
 8019e08:	2301      	movs	r3, #1
 8019e0a:	612b      	str	r3, [r5, #16]
 8019e0c:	f8c9 3000 	str.w	r3, [r9]
 8019e10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019e12:	2762      	movs	r7, #98	; 0x62
 8019e14:	601d      	str	r5, [r3, #0]
 8019e16:	e72a      	b.n	8019c6e <__gethex+0x110>
 8019e18:	1e71      	subs	r1, r6, #1
 8019e1a:	4628      	mov	r0, r5
 8019e1c:	f000 fd7c 	bl	801a918 <__any_on>
 8019e20:	2800      	cmp	r0, #0
 8019e22:	d1ed      	bne.n	8019e00 <__gethex+0x2a2>
 8019e24:	4629      	mov	r1, r5
 8019e26:	9802      	ldr	r0, [sp, #8]
 8019e28:	f000 f9cc 	bl	801a1c4 <_Bfree>
 8019e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e2e:	2300      	movs	r3, #0
 8019e30:	6013      	str	r3, [r2, #0]
 8019e32:	2750      	movs	r7, #80	; 0x50
 8019e34:	e71b      	b.n	8019c6e <__gethex+0x110>
 8019e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d0e1      	beq.n	8019e00 <__gethex+0x2a2>
 8019e3c:	e7f2      	b.n	8019e24 <__gethex+0x2c6>
 8019e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d1dd      	bne.n	8019e00 <__gethex+0x2a2>
 8019e44:	e7ee      	b.n	8019e24 <__gethex+0x2c6>
 8019e46:	1e67      	subs	r7, r4, #1
 8019e48:	f1ba 0f00 	cmp.w	sl, #0
 8019e4c:	d131      	bne.n	8019eb2 <__gethex+0x354>
 8019e4e:	b127      	cbz	r7, 8019e5a <__gethex+0x2fc>
 8019e50:	4639      	mov	r1, r7
 8019e52:	4628      	mov	r0, r5
 8019e54:	f000 fd60 	bl	801a918 <__any_on>
 8019e58:	4682      	mov	sl, r0
 8019e5a:	117a      	asrs	r2, r7, #5
 8019e5c:	2301      	movs	r3, #1
 8019e5e:	f007 071f 	and.w	r7, r7, #31
 8019e62:	fa03 f707 	lsl.w	r7, r3, r7
 8019e66:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	421f      	tst	r7, r3
 8019e6e:	4628      	mov	r0, r5
 8019e70:	bf18      	it	ne
 8019e72:	f04a 0a02 	orrne.w	sl, sl, #2
 8019e76:	1b36      	subs	r6, r6, r4
 8019e78:	f7ff fe22 	bl	8019ac0 <rshift>
 8019e7c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019e80:	2702      	movs	r7, #2
 8019e82:	f1ba 0f00 	cmp.w	sl, #0
 8019e86:	d048      	beq.n	8019f1a <__gethex+0x3bc>
 8019e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	d015      	beq.n	8019ebc <__gethex+0x35e>
 8019e90:	2b03      	cmp	r3, #3
 8019e92:	d017      	beq.n	8019ec4 <__gethex+0x366>
 8019e94:	2b01      	cmp	r3, #1
 8019e96:	d109      	bne.n	8019eac <__gethex+0x34e>
 8019e98:	f01a 0f02 	tst.w	sl, #2
 8019e9c:	d006      	beq.n	8019eac <__gethex+0x34e>
 8019e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8019ea2:	ea4a 0a03 	orr.w	sl, sl, r3
 8019ea6:	f01a 0f01 	tst.w	sl, #1
 8019eaa:	d10e      	bne.n	8019eca <__gethex+0x36c>
 8019eac:	f047 0710 	orr.w	r7, r7, #16
 8019eb0:	e033      	b.n	8019f1a <__gethex+0x3bc>
 8019eb2:	f04f 0a01 	mov.w	sl, #1
 8019eb6:	e7d0      	b.n	8019e5a <__gethex+0x2fc>
 8019eb8:	2701      	movs	r7, #1
 8019eba:	e7e2      	b.n	8019e82 <__gethex+0x324>
 8019ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ebe:	f1c3 0301 	rsb	r3, r3, #1
 8019ec2:	9315      	str	r3, [sp, #84]	; 0x54
 8019ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d0f0      	beq.n	8019eac <__gethex+0x34e>
 8019eca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8019ece:	f105 0314 	add.w	r3, r5, #20
 8019ed2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8019ed6:	eb03 010a 	add.w	r1, r3, sl
 8019eda:	f04f 0c00 	mov.w	ip, #0
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ee4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019ee8:	d01c      	beq.n	8019f24 <__gethex+0x3c6>
 8019eea:	3201      	adds	r2, #1
 8019eec:	6002      	str	r2, [r0, #0]
 8019eee:	2f02      	cmp	r7, #2
 8019ef0:	f105 0314 	add.w	r3, r5, #20
 8019ef4:	d138      	bne.n	8019f68 <__gethex+0x40a>
 8019ef6:	f8d8 2000 	ldr.w	r2, [r8]
 8019efa:	3a01      	subs	r2, #1
 8019efc:	42b2      	cmp	r2, r6
 8019efe:	d10a      	bne.n	8019f16 <__gethex+0x3b8>
 8019f00:	1171      	asrs	r1, r6, #5
 8019f02:	2201      	movs	r2, #1
 8019f04:	f006 061f 	and.w	r6, r6, #31
 8019f08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f0c:	fa02 f606 	lsl.w	r6, r2, r6
 8019f10:	421e      	tst	r6, r3
 8019f12:	bf18      	it	ne
 8019f14:	4617      	movne	r7, r2
 8019f16:	f047 0720 	orr.w	r7, r7, #32
 8019f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f1c:	601d      	str	r5, [r3, #0]
 8019f1e:	9b06      	ldr	r3, [sp, #24]
 8019f20:	601c      	str	r4, [r3, #0]
 8019f22:	e6a4      	b.n	8019c6e <__gethex+0x110>
 8019f24:	4299      	cmp	r1, r3
 8019f26:	f843 cc04 	str.w	ip, [r3, #-4]
 8019f2a:	d8d8      	bhi.n	8019ede <__gethex+0x380>
 8019f2c:	68ab      	ldr	r3, [r5, #8]
 8019f2e:	4599      	cmp	r9, r3
 8019f30:	db12      	blt.n	8019f58 <__gethex+0x3fa>
 8019f32:	6869      	ldr	r1, [r5, #4]
 8019f34:	9802      	ldr	r0, [sp, #8]
 8019f36:	3101      	adds	r1, #1
 8019f38:	f000 f910 	bl	801a15c <_Balloc>
 8019f3c:	692a      	ldr	r2, [r5, #16]
 8019f3e:	3202      	adds	r2, #2
 8019f40:	f105 010c 	add.w	r1, r5, #12
 8019f44:	4683      	mov	fp, r0
 8019f46:	0092      	lsls	r2, r2, #2
 8019f48:	300c      	adds	r0, #12
 8019f4a:	f7fd f901 	bl	8017150 <memcpy>
 8019f4e:	4629      	mov	r1, r5
 8019f50:	9802      	ldr	r0, [sp, #8]
 8019f52:	f000 f937 	bl	801a1c4 <_Bfree>
 8019f56:	465d      	mov	r5, fp
 8019f58:	692b      	ldr	r3, [r5, #16]
 8019f5a:	1c5a      	adds	r2, r3, #1
 8019f5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8019f60:	612a      	str	r2, [r5, #16]
 8019f62:	2201      	movs	r2, #1
 8019f64:	615a      	str	r2, [r3, #20]
 8019f66:	e7c2      	b.n	8019eee <__gethex+0x390>
 8019f68:	692a      	ldr	r2, [r5, #16]
 8019f6a:	454a      	cmp	r2, r9
 8019f6c:	dd0b      	ble.n	8019f86 <__gethex+0x428>
 8019f6e:	2101      	movs	r1, #1
 8019f70:	4628      	mov	r0, r5
 8019f72:	f7ff fda5 	bl	8019ac0 <rshift>
 8019f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019f7a:	3401      	adds	r4, #1
 8019f7c:	42a3      	cmp	r3, r4
 8019f7e:	f6ff aed9 	blt.w	8019d34 <__gethex+0x1d6>
 8019f82:	2701      	movs	r7, #1
 8019f84:	e7c7      	b.n	8019f16 <__gethex+0x3b8>
 8019f86:	f016 061f 	ands.w	r6, r6, #31
 8019f8a:	d0fa      	beq.n	8019f82 <__gethex+0x424>
 8019f8c:	449a      	add	sl, r3
 8019f8e:	f1c6 0620 	rsb	r6, r6, #32
 8019f92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019f96:	f000 f9a5 	bl	801a2e4 <__hi0bits>
 8019f9a:	42b0      	cmp	r0, r6
 8019f9c:	dbe7      	blt.n	8019f6e <__gethex+0x410>
 8019f9e:	e7f0      	b.n	8019f82 <__gethex+0x424>

08019fa0 <L_shift>:
 8019fa0:	f1c2 0208 	rsb	r2, r2, #8
 8019fa4:	0092      	lsls	r2, r2, #2
 8019fa6:	b570      	push	{r4, r5, r6, lr}
 8019fa8:	f1c2 0620 	rsb	r6, r2, #32
 8019fac:	6843      	ldr	r3, [r0, #4]
 8019fae:	6804      	ldr	r4, [r0, #0]
 8019fb0:	fa03 f506 	lsl.w	r5, r3, r6
 8019fb4:	432c      	orrs	r4, r5
 8019fb6:	40d3      	lsrs	r3, r2
 8019fb8:	6004      	str	r4, [r0, #0]
 8019fba:	f840 3f04 	str.w	r3, [r0, #4]!
 8019fbe:	4288      	cmp	r0, r1
 8019fc0:	d3f4      	bcc.n	8019fac <L_shift+0xc>
 8019fc2:	bd70      	pop	{r4, r5, r6, pc}

08019fc4 <__match>:
 8019fc4:	b530      	push	{r4, r5, lr}
 8019fc6:	6803      	ldr	r3, [r0, #0]
 8019fc8:	3301      	adds	r3, #1
 8019fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fce:	b914      	cbnz	r4, 8019fd6 <__match+0x12>
 8019fd0:	6003      	str	r3, [r0, #0]
 8019fd2:	2001      	movs	r0, #1
 8019fd4:	bd30      	pop	{r4, r5, pc}
 8019fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019fde:	2d19      	cmp	r5, #25
 8019fe0:	bf98      	it	ls
 8019fe2:	3220      	addls	r2, #32
 8019fe4:	42a2      	cmp	r2, r4
 8019fe6:	d0f0      	beq.n	8019fca <__match+0x6>
 8019fe8:	2000      	movs	r0, #0
 8019fea:	e7f3      	b.n	8019fd4 <__match+0x10>

08019fec <__hexnan>:
 8019fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ff0:	680b      	ldr	r3, [r1, #0]
 8019ff2:	6801      	ldr	r1, [r0, #0]
 8019ff4:	115f      	asrs	r7, r3, #5
 8019ff6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8019ffa:	f013 031f 	ands.w	r3, r3, #31
 8019ffe:	b087      	sub	sp, #28
 801a000:	bf18      	it	ne
 801a002:	3704      	addne	r7, #4
 801a004:	2500      	movs	r5, #0
 801a006:	1f3e      	subs	r6, r7, #4
 801a008:	4682      	mov	sl, r0
 801a00a:	4690      	mov	r8, r2
 801a00c:	9301      	str	r3, [sp, #4]
 801a00e:	f847 5c04 	str.w	r5, [r7, #-4]
 801a012:	46b1      	mov	r9, r6
 801a014:	4634      	mov	r4, r6
 801a016:	9502      	str	r5, [sp, #8]
 801a018:	46ab      	mov	fp, r5
 801a01a:	784a      	ldrb	r2, [r1, #1]
 801a01c:	1c4b      	adds	r3, r1, #1
 801a01e:	9303      	str	r3, [sp, #12]
 801a020:	b342      	cbz	r2, 801a074 <__hexnan+0x88>
 801a022:	4610      	mov	r0, r2
 801a024:	9105      	str	r1, [sp, #20]
 801a026:	9204      	str	r2, [sp, #16]
 801a028:	f7ff fd84 	bl	8019b34 <__hexdig_fun>
 801a02c:	2800      	cmp	r0, #0
 801a02e:	d143      	bne.n	801a0b8 <__hexnan+0xcc>
 801a030:	9a04      	ldr	r2, [sp, #16]
 801a032:	9905      	ldr	r1, [sp, #20]
 801a034:	2a20      	cmp	r2, #32
 801a036:	d818      	bhi.n	801a06a <__hexnan+0x7e>
 801a038:	9b02      	ldr	r3, [sp, #8]
 801a03a:	459b      	cmp	fp, r3
 801a03c:	dd13      	ble.n	801a066 <__hexnan+0x7a>
 801a03e:	454c      	cmp	r4, r9
 801a040:	d206      	bcs.n	801a050 <__hexnan+0x64>
 801a042:	2d07      	cmp	r5, #7
 801a044:	dc04      	bgt.n	801a050 <__hexnan+0x64>
 801a046:	462a      	mov	r2, r5
 801a048:	4649      	mov	r1, r9
 801a04a:	4620      	mov	r0, r4
 801a04c:	f7ff ffa8 	bl	8019fa0 <L_shift>
 801a050:	4544      	cmp	r4, r8
 801a052:	d944      	bls.n	801a0de <__hexnan+0xf2>
 801a054:	2300      	movs	r3, #0
 801a056:	f1a4 0904 	sub.w	r9, r4, #4
 801a05a:	f844 3c04 	str.w	r3, [r4, #-4]
 801a05e:	f8cd b008 	str.w	fp, [sp, #8]
 801a062:	464c      	mov	r4, r9
 801a064:	461d      	mov	r5, r3
 801a066:	9903      	ldr	r1, [sp, #12]
 801a068:	e7d7      	b.n	801a01a <__hexnan+0x2e>
 801a06a:	2a29      	cmp	r2, #41	; 0x29
 801a06c:	d14a      	bne.n	801a104 <__hexnan+0x118>
 801a06e:	3102      	adds	r1, #2
 801a070:	f8ca 1000 	str.w	r1, [sl]
 801a074:	f1bb 0f00 	cmp.w	fp, #0
 801a078:	d044      	beq.n	801a104 <__hexnan+0x118>
 801a07a:	454c      	cmp	r4, r9
 801a07c:	d206      	bcs.n	801a08c <__hexnan+0xa0>
 801a07e:	2d07      	cmp	r5, #7
 801a080:	dc04      	bgt.n	801a08c <__hexnan+0xa0>
 801a082:	462a      	mov	r2, r5
 801a084:	4649      	mov	r1, r9
 801a086:	4620      	mov	r0, r4
 801a088:	f7ff ff8a 	bl	8019fa0 <L_shift>
 801a08c:	4544      	cmp	r4, r8
 801a08e:	d928      	bls.n	801a0e2 <__hexnan+0xf6>
 801a090:	4643      	mov	r3, r8
 801a092:	f854 2b04 	ldr.w	r2, [r4], #4
 801a096:	f843 2b04 	str.w	r2, [r3], #4
 801a09a:	42a6      	cmp	r6, r4
 801a09c:	d2f9      	bcs.n	801a092 <__hexnan+0xa6>
 801a09e:	2200      	movs	r2, #0
 801a0a0:	f843 2b04 	str.w	r2, [r3], #4
 801a0a4:	429e      	cmp	r6, r3
 801a0a6:	d2fb      	bcs.n	801a0a0 <__hexnan+0xb4>
 801a0a8:	6833      	ldr	r3, [r6, #0]
 801a0aa:	b91b      	cbnz	r3, 801a0b4 <__hexnan+0xc8>
 801a0ac:	4546      	cmp	r6, r8
 801a0ae:	d127      	bne.n	801a100 <__hexnan+0x114>
 801a0b0:	2301      	movs	r3, #1
 801a0b2:	6033      	str	r3, [r6, #0]
 801a0b4:	2005      	movs	r0, #5
 801a0b6:	e026      	b.n	801a106 <__hexnan+0x11a>
 801a0b8:	3501      	adds	r5, #1
 801a0ba:	2d08      	cmp	r5, #8
 801a0bc:	f10b 0b01 	add.w	fp, fp, #1
 801a0c0:	dd06      	ble.n	801a0d0 <__hexnan+0xe4>
 801a0c2:	4544      	cmp	r4, r8
 801a0c4:	d9cf      	bls.n	801a066 <__hexnan+0x7a>
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	f844 3c04 	str.w	r3, [r4, #-4]
 801a0cc:	2501      	movs	r5, #1
 801a0ce:	3c04      	subs	r4, #4
 801a0d0:	6822      	ldr	r2, [r4, #0]
 801a0d2:	f000 000f 	and.w	r0, r0, #15
 801a0d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a0da:	6020      	str	r0, [r4, #0]
 801a0dc:	e7c3      	b.n	801a066 <__hexnan+0x7a>
 801a0de:	2508      	movs	r5, #8
 801a0e0:	e7c1      	b.n	801a066 <__hexnan+0x7a>
 801a0e2:	9b01      	ldr	r3, [sp, #4]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	d0df      	beq.n	801a0a8 <__hexnan+0xbc>
 801a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a0ec:	f1c3 0320 	rsb	r3, r3, #32
 801a0f0:	fa22 f303 	lsr.w	r3, r2, r3
 801a0f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801a0f8:	401a      	ands	r2, r3
 801a0fa:	f847 2c04 	str.w	r2, [r7, #-4]
 801a0fe:	e7d3      	b.n	801a0a8 <__hexnan+0xbc>
 801a100:	3e04      	subs	r6, #4
 801a102:	e7d1      	b.n	801a0a8 <__hexnan+0xbc>
 801a104:	2004      	movs	r0, #4
 801a106:	b007      	add	sp, #28
 801a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a10c <__locale_ctype_ptr_l>:
 801a10c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801a110:	4770      	bx	lr

0801a112 <__localeconv_l>:
 801a112:	30f0      	adds	r0, #240	; 0xf0
 801a114:	4770      	bx	lr
	...

0801a118 <_localeconv_r>:
 801a118:	4b04      	ldr	r3, [pc, #16]	; (801a12c <_localeconv_r+0x14>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	6a18      	ldr	r0, [r3, #32]
 801a11e:	4b04      	ldr	r3, [pc, #16]	; (801a130 <_localeconv_r+0x18>)
 801a120:	2800      	cmp	r0, #0
 801a122:	bf08      	it	eq
 801a124:	4618      	moveq	r0, r3
 801a126:	30f0      	adds	r0, #240	; 0xf0
 801a128:	4770      	bx	lr
 801a12a:	bf00      	nop
 801a12c:	200001d4 	.word	0x200001d4
 801a130:	20000238 	.word	0x20000238

0801a134 <__ascii_mbtowc>:
 801a134:	b082      	sub	sp, #8
 801a136:	b901      	cbnz	r1, 801a13a <__ascii_mbtowc+0x6>
 801a138:	a901      	add	r1, sp, #4
 801a13a:	b142      	cbz	r2, 801a14e <__ascii_mbtowc+0x1a>
 801a13c:	b14b      	cbz	r3, 801a152 <__ascii_mbtowc+0x1e>
 801a13e:	7813      	ldrb	r3, [r2, #0]
 801a140:	600b      	str	r3, [r1, #0]
 801a142:	7812      	ldrb	r2, [r2, #0]
 801a144:	1c10      	adds	r0, r2, #0
 801a146:	bf18      	it	ne
 801a148:	2001      	movne	r0, #1
 801a14a:	b002      	add	sp, #8
 801a14c:	4770      	bx	lr
 801a14e:	4610      	mov	r0, r2
 801a150:	e7fb      	b.n	801a14a <__ascii_mbtowc+0x16>
 801a152:	f06f 0001 	mvn.w	r0, #1
 801a156:	e7f8      	b.n	801a14a <__ascii_mbtowc+0x16>

0801a158 <__malloc_lock>:
 801a158:	4770      	bx	lr

0801a15a <__malloc_unlock>:
 801a15a:	4770      	bx	lr

0801a15c <_Balloc>:
 801a15c:	b570      	push	{r4, r5, r6, lr}
 801a15e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a160:	4604      	mov	r4, r0
 801a162:	460e      	mov	r6, r1
 801a164:	b93d      	cbnz	r5, 801a176 <_Balloc+0x1a>
 801a166:	2010      	movs	r0, #16
 801a168:	f7fc ffe2 	bl	8017130 <malloc>
 801a16c:	6260      	str	r0, [r4, #36]	; 0x24
 801a16e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a172:	6005      	str	r5, [r0, #0]
 801a174:	60c5      	str	r5, [r0, #12]
 801a176:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a178:	68eb      	ldr	r3, [r5, #12]
 801a17a:	b183      	cbz	r3, 801a19e <_Balloc+0x42>
 801a17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a17e:	68db      	ldr	r3, [r3, #12]
 801a180:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a184:	b9b8      	cbnz	r0, 801a1b6 <_Balloc+0x5a>
 801a186:	2101      	movs	r1, #1
 801a188:	fa01 f506 	lsl.w	r5, r1, r6
 801a18c:	1d6a      	adds	r2, r5, #5
 801a18e:	0092      	lsls	r2, r2, #2
 801a190:	4620      	mov	r0, r4
 801a192:	f000 fbe2 	bl	801a95a <_calloc_r>
 801a196:	b160      	cbz	r0, 801a1b2 <_Balloc+0x56>
 801a198:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801a19c:	e00e      	b.n	801a1bc <_Balloc+0x60>
 801a19e:	2221      	movs	r2, #33	; 0x21
 801a1a0:	2104      	movs	r1, #4
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	f000 fbd9 	bl	801a95a <_calloc_r>
 801a1a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1aa:	60e8      	str	r0, [r5, #12]
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d1e4      	bne.n	801a17c <_Balloc+0x20>
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	bd70      	pop	{r4, r5, r6, pc}
 801a1b6:	6802      	ldr	r2, [r0, #0]
 801a1b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801a1bc:	2300      	movs	r3, #0
 801a1be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a1c2:	e7f7      	b.n	801a1b4 <_Balloc+0x58>

0801a1c4 <_Bfree>:
 801a1c4:	b570      	push	{r4, r5, r6, lr}
 801a1c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	460d      	mov	r5, r1
 801a1cc:	b93c      	cbnz	r4, 801a1de <_Bfree+0x1a>
 801a1ce:	2010      	movs	r0, #16
 801a1d0:	f7fc ffae 	bl	8017130 <malloc>
 801a1d4:	6270      	str	r0, [r6, #36]	; 0x24
 801a1d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a1da:	6004      	str	r4, [r0, #0]
 801a1dc:	60c4      	str	r4, [r0, #12]
 801a1de:	b13d      	cbz	r5, 801a1f0 <_Bfree+0x2c>
 801a1e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a1e2:	686a      	ldr	r2, [r5, #4]
 801a1e4:	68db      	ldr	r3, [r3, #12]
 801a1e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a1ea:	6029      	str	r1, [r5, #0]
 801a1ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801a1f0:	bd70      	pop	{r4, r5, r6, pc}

0801a1f2 <__multadd>:
 801a1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1f6:	690d      	ldr	r5, [r1, #16]
 801a1f8:	461f      	mov	r7, r3
 801a1fa:	4606      	mov	r6, r0
 801a1fc:	460c      	mov	r4, r1
 801a1fe:	f101 0c14 	add.w	ip, r1, #20
 801a202:	2300      	movs	r3, #0
 801a204:	f8dc 0000 	ldr.w	r0, [ip]
 801a208:	b281      	uxth	r1, r0
 801a20a:	fb02 7101 	mla	r1, r2, r1, r7
 801a20e:	0c0f      	lsrs	r7, r1, #16
 801a210:	0c00      	lsrs	r0, r0, #16
 801a212:	fb02 7000 	mla	r0, r2, r0, r7
 801a216:	b289      	uxth	r1, r1
 801a218:	3301      	adds	r3, #1
 801a21a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801a21e:	429d      	cmp	r5, r3
 801a220:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801a224:	f84c 1b04 	str.w	r1, [ip], #4
 801a228:	dcec      	bgt.n	801a204 <__multadd+0x12>
 801a22a:	b1d7      	cbz	r7, 801a262 <__multadd+0x70>
 801a22c:	68a3      	ldr	r3, [r4, #8]
 801a22e:	42ab      	cmp	r3, r5
 801a230:	dc12      	bgt.n	801a258 <__multadd+0x66>
 801a232:	6861      	ldr	r1, [r4, #4]
 801a234:	4630      	mov	r0, r6
 801a236:	3101      	adds	r1, #1
 801a238:	f7ff ff90 	bl	801a15c <_Balloc>
 801a23c:	6922      	ldr	r2, [r4, #16]
 801a23e:	3202      	adds	r2, #2
 801a240:	f104 010c 	add.w	r1, r4, #12
 801a244:	4680      	mov	r8, r0
 801a246:	0092      	lsls	r2, r2, #2
 801a248:	300c      	adds	r0, #12
 801a24a:	f7fc ff81 	bl	8017150 <memcpy>
 801a24e:	4621      	mov	r1, r4
 801a250:	4630      	mov	r0, r6
 801a252:	f7ff ffb7 	bl	801a1c4 <_Bfree>
 801a256:	4644      	mov	r4, r8
 801a258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801a25c:	3501      	adds	r5, #1
 801a25e:	615f      	str	r7, [r3, #20]
 801a260:	6125      	str	r5, [r4, #16]
 801a262:	4620      	mov	r0, r4
 801a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a268 <__s2b>:
 801a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a26c:	460c      	mov	r4, r1
 801a26e:	4615      	mov	r5, r2
 801a270:	461f      	mov	r7, r3
 801a272:	2209      	movs	r2, #9
 801a274:	3308      	adds	r3, #8
 801a276:	4606      	mov	r6, r0
 801a278:	fb93 f3f2 	sdiv	r3, r3, r2
 801a27c:	2100      	movs	r1, #0
 801a27e:	2201      	movs	r2, #1
 801a280:	429a      	cmp	r2, r3
 801a282:	db20      	blt.n	801a2c6 <__s2b+0x5e>
 801a284:	4630      	mov	r0, r6
 801a286:	f7ff ff69 	bl	801a15c <_Balloc>
 801a28a:	9b08      	ldr	r3, [sp, #32]
 801a28c:	6143      	str	r3, [r0, #20]
 801a28e:	2d09      	cmp	r5, #9
 801a290:	f04f 0301 	mov.w	r3, #1
 801a294:	6103      	str	r3, [r0, #16]
 801a296:	dd19      	ble.n	801a2cc <__s2b+0x64>
 801a298:	f104 0809 	add.w	r8, r4, #9
 801a29c:	46c1      	mov	r9, r8
 801a29e:	442c      	add	r4, r5
 801a2a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 801a2a4:	4601      	mov	r1, r0
 801a2a6:	3b30      	subs	r3, #48	; 0x30
 801a2a8:	220a      	movs	r2, #10
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	f7ff ffa1 	bl	801a1f2 <__multadd>
 801a2b0:	45a1      	cmp	r9, r4
 801a2b2:	d1f5      	bne.n	801a2a0 <__s2b+0x38>
 801a2b4:	eb08 0405 	add.w	r4, r8, r5
 801a2b8:	3c08      	subs	r4, #8
 801a2ba:	1b2d      	subs	r5, r5, r4
 801a2bc:	1963      	adds	r3, r4, r5
 801a2be:	42bb      	cmp	r3, r7
 801a2c0:	db07      	blt.n	801a2d2 <__s2b+0x6a>
 801a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2c6:	0052      	lsls	r2, r2, #1
 801a2c8:	3101      	adds	r1, #1
 801a2ca:	e7d9      	b.n	801a280 <__s2b+0x18>
 801a2cc:	340a      	adds	r4, #10
 801a2ce:	2509      	movs	r5, #9
 801a2d0:	e7f3      	b.n	801a2ba <__s2b+0x52>
 801a2d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a2d6:	4601      	mov	r1, r0
 801a2d8:	3b30      	subs	r3, #48	; 0x30
 801a2da:	220a      	movs	r2, #10
 801a2dc:	4630      	mov	r0, r6
 801a2de:	f7ff ff88 	bl	801a1f2 <__multadd>
 801a2e2:	e7eb      	b.n	801a2bc <__s2b+0x54>

0801a2e4 <__hi0bits>:
 801a2e4:	0c02      	lsrs	r2, r0, #16
 801a2e6:	0412      	lsls	r2, r2, #16
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	b9b2      	cbnz	r2, 801a31a <__hi0bits+0x36>
 801a2ec:	0403      	lsls	r3, r0, #16
 801a2ee:	2010      	movs	r0, #16
 801a2f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a2f4:	bf04      	itt	eq
 801a2f6:	021b      	lsleq	r3, r3, #8
 801a2f8:	3008      	addeq	r0, #8
 801a2fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a2fe:	bf04      	itt	eq
 801a300:	011b      	lsleq	r3, r3, #4
 801a302:	3004      	addeq	r0, #4
 801a304:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a308:	bf04      	itt	eq
 801a30a:	009b      	lsleq	r3, r3, #2
 801a30c:	3002      	addeq	r0, #2
 801a30e:	2b00      	cmp	r3, #0
 801a310:	db06      	blt.n	801a320 <__hi0bits+0x3c>
 801a312:	005b      	lsls	r3, r3, #1
 801a314:	d503      	bpl.n	801a31e <__hi0bits+0x3a>
 801a316:	3001      	adds	r0, #1
 801a318:	4770      	bx	lr
 801a31a:	2000      	movs	r0, #0
 801a31c:	e7e8      	b.n	801a2f0 <__hi0bits+0xc>
 801a31e:	2020      	movs	r0, #32
 801a320:	4770      	bx	lr

0801a322 <__lo0bits>:
 801a322:	6803      	ldr	r3, [r0, #0]
 801a324:	f013 0207 	ands.w	r2, r3, #7
 801a328:	4601      	mov	r1, r0
 801a32a:	d00b      	beq.n	801a344 <__lo0bits+0x22>
 801a32c:	07da      	lsls	r2, r3, #31
 801a32e:	d423      	bmi.n	801a378 <__lo0bits+0x56>
 801a330:	0798      	lsls	r0, r3, #30
 801a332:	bf49      	itett	mi
 801a334:	085b      	lsrmi	r3, r3, #1
 801a336:	089b      	lsrpl	r3, r3, #2
 801a338:	2001      	movmi	r0, #1
 801a33a:	600b      	strmi	r3, [r1, #0]
 801a33c:	bf5c      	itt	pl
 801a33e:	600b      	strpl	r3, [r1, #0]
 801a340:	2002      	movpl	r0, #2
 801a342:	4770      	bx	lr
 801a344:	b298      	uxth	r0, r3
 801a346:	b9a8      	cbnz	r0, 801a374 <__lo0bits+0x52>
 801a348:	0c1b      	lsrs	r3, r3, #16
 801a34a:	2010      	movs	r0, #16
 801a34c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a350:	bf04      	itt	eq
 801a352:	0a1b      	lsreq	r3, r3, #8
 801a354:	3008      	addeq	r0, #8
 801a356:	071a      	lsls	r2, r3, #28
 801a358:	bf04      	itt	eq
 801a35a:	091b      	lsreq	r3, r3, #4
 801a35c:	3004      	addeq	r0, #4
 801a35e:	079a      	lsls	r2, r3, #30
 801a360:	bf04      	itt	eq
 801a362:	089b      	lsreq	r3, r3, #2
 801a364:	3002      	addeq	r0, #2
 801a366:	07da      	lsls	r2, r3, #31
 801a368:	d402      	bmi.n	801a370 <__lo0bits+0x4e>
 801a36a:	085b      	lsrs	r3, r3, #1
 801a36c:	d006      	beq.n	801a37c <__lo0bits+0x5a>
 801a36e:	3001      	adds	r0, #1
 801a370:	600b      	str	r3, [r1, #0]
 801a372:	4770      	bx	lr
 801a374:	4610      	mov	r0, r2
 801a376:	e7e9      	b.n	801a34c <__lo0bits+0x2a>
 801a378:	2000      	movs	r0, #0
 801a37a:	4770      	bx	lr
 801a37c:	2020      	movs	r0, #32
 801a37e:	4770      	bx	lr

0801a380 <__i2b>:
 801a380:	b510      	push	{r4, lr}
 801a382:	460c      	mov	r4, r1
 801a384:	2101      	movs	r1, #1
 801a386:	f7ff fee9 	bl	801a15c <_Balloc>
 801a38a:	2201      	movs	r2, #1
 801a38c:	6144      	str	r4, [r0, #20]
 801a38e:	6102      	str	r2, [r0, #16]
 801a390:	bd10      	pop	{r4, pc}

0801a392 <__multiply>:
 801a392:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a396:	4614      	mov	r4, r2
 801a398:	690a      	ldr	r2, [r1, #16]
 801a39a:	6923      	ldr	r3, [r4, #16]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	bfb8      	it	lt
 801a3a0:	460b      	movlt	r3, r1
 801a3a2:	4688      	mov	r8, r1
 801a3a4:	bfbc      	itt	lt
 801a3a6:	46a0      	movlt	r8, r4
 801a3a8:	461c      	movlt	r4, r3
 801a3aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a3ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a3b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a3b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a3ba:	eb07 0609 	add.w	r6, r7, r9
 801a3be:	42b3      	cmp	r3, r6
 801a3c0:	bfb8      	it	lt
 801a3c2:	3101      	addlt	r1, #1
 801a3c4:	f7ff feca 	bl	801a15c <_Balloc>
 801a3c8:	f100 0514 	add.w	r5, r0, #20
 801a3cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801a3d0:	462b      	mov	r3, r5
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	4573      	cmp	r3, lr
 801a3d6:	d316      	bcc.n	801a406 <__multiply+0x74>
 801a3d8:	f104 0214 	add.w	r2, r4, #20
 801a3dc:	f108 0114 	add.w	r1, r8, #20
 801a3e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801a3e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	9b00      	ldr	r3, [sp, #0]
 801a3ec:	9201      	str	r2, [sp, #4]
 801a3ee:	4293      	cmp	r3, r2
 801a3f0:	d80c      	bhi.n	801a40c <__multiply+0x7a>
 801a3f2:	2e00      	cmp	r6, #0
 801a3f4:	dd03      	ble.n	801a3fe <__multiply+0x6c>
 801a3f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d05d      	beq.n	801a4ba <__multiply+0x128>
 801a3fe:	6106      	str	r6, [r0, #16]
 801a400:	b003      	add	sp, #12
 801a402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a406:	f843 2b04 	str.w	r2, [r3], #4
 801a40a:	e7e3      	b.n	801a3d4 <__multiply+0x42>
 801a40c:	f8b2 b000 	ldrh.w	fp, [r2]
 801a410:	f1bb 0f00 	cmp.w	fp, #0
 801a414:	d023      	beq.n	801a45e <__multiply+0xcc>
 801a416:	4689      	mov	r9, r1
 801a418:	46ac      	mov	ip, r5
 801a41a:	f04f 0800 	mov.w	r8, #0
 801a41e:	f859 4b04 	ldr.w	r4, [r9], #4
 801a422:	f8dc a000 	ldr.w	sl, [ip]
 801a426:	b2a3      	uxth	r3, r4
 801a428:	fa1f fa8a 	uxth.w	sl, sl
 801a42c:	fb0b a303 	mla	r3, fp, r3, sl
 801a430:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a434:	f8dc 4000 	ldr.w	r4, [ip]
 801a438:	4443      	add	r3, r8
 801a43a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a43e:	fb0b 840a 	mla	r4, fp, sl, r8
 801a442:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801a446:	46e2      	mov	sl, ip
 801a448:	b29b      	uxth	r3, r3
 801a44a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a44e:	454f      	cmp	r7, r9
 801a450:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801a454:	f84a 3b04 	str.w	r3, [sl], #4
 801a458:	d82b      	bhi.n	801a4b2 <__multiply+0x120>
 801a45a:	f8cc 8004 	str.w	r8, [ip, #4]
 801a45e:	9b01      	ldr	r3, [sp, #4]
 801a460:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801a464:	3204      	adds	r2, #4
 801a466:	f1ba 0f00 	cmp.w	sl, #0
 801a46a:	d020      	beq.n	801a4ae <__multiply+0x11c>
 801a46c:	682b      	ldr	r3, [r5, #0]
 801a46e:	4689      	mov	r9, r1
 801a470:	46a8      	mov	r8, r5
 801a472:	f04f 0b00 	mov.w	fp, #0
 801a476:	f8b9 c000 	ldrh.w	ip, [r9]
 801a47a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801a47e:	fb0a 440c 	mla	r4, sl, ip, r4
 801a482:	445c      	add	r4, fp
 801a484:	46c4      	mov	ip, r8
 801a486:	b29b      	uxth	r3, r3
 801a488:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801a48c:	f84c 3b04 	str.w	r3, [ip], #4
 801a490:	f859 3b04 	ldr.w	r3, [r9], #4
 801a494:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801a498:	0c1b      	lsrs	r3, r3, #16
 801a49a:	fb0a b303 	mla	r3, sl, r3, fp
 801a49e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801a4a2:	454f      	cmp	r7, r9
 801a4a4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801a4a8:	d805      	bhi.n	801a4b6 <__multiply+0x124>
 801a4aa:	f8c8 3004 	str.w	r3, [r8, #4]
 801a4ae:	3504      	adds	r5, #4
 801a4b0:	e79b      	b.n	801a3ea <__multiply+0x58>
 801a4b2:	46d4      	mov	ip, sl
 801a4b4:	e7b3      	b.n	801a41e <__multiply+0x8c>
 801a4b6:	46e0      	mov	r8, ip
 801a4b8:	e7dd      	b.n	801a476 <__multiply+0xe4>
 801a4ba:	3e01      	subs	r6, #1
 801a4bc:	e799      	b.n	801a3f2 <__multiply+0x60>
	...

0801a4c0 <__pow5mult>:
 801a4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4c4:	4615      	mov	r5, r2
 801a4c6:	f012 0203 	ands.w	r2, r2, #3
 801a4ca:	4606      	mov	r6, r0
 801a4cc:	460f      	mov	r7, r1
 801a4ce:	d007      	beq.n	801a4e0 <__pow5mult+0x20>
 801a4d0:	3a01      	subs	r2, #1
 801a4d2:	4c21      	ldr	r4, [pc, #132]	; (801a558 <__pow5mult+0x98>)
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a4da:	f7ff fe8a 	bl	801a1f2 <__multadd>
 801a4de:	4607      	mov	r7, r0
 801a4e0:	10ad      	asrs	r5, r5, #2
 801a4e2:	d035      	beq.n	801a550 <__pow5mult+0x90>
 801a4e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a4e6:	b93c      	cbnz	r4, 801a4f8 <__pow5mult+0x38>
 801a4e8:	2010      	movs	r0, #16
 801a4ea:	f7fc fe21 	bl	8017130 <malloc>
 801a4ee:	6270      	str	r0, [r6, #36]	; 0x24
 801a4f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a4f4:	6004      	str	r4, [r0, #0]
 801a4f6:	60c4      	str	r4, [r0, #12]
 801a4f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a4fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a500:	b94c      	cbnz	r4, 801a516 <__pow5mult+0x56>
 801a502:	f240 2171 	movw	r1, #625	; 0x271
 801a506:	4630      	mov	r0, r6
 801a508:	f7ff ff3a 	bl	801a380 <__i2b>
 801a50c:	2300      	movs	r3, #0
 801a50e:	f8c8 0008 	str.w	r0, [r8, #8]
 801a512:	4604      	mov	r4, r0
 801a514:	6003      	str	r3, [r0, #0]
 801a516:	f04f 0800 	mov.w	r8, #0
 801a51a:	07eb      	lsls	r3, r5, #31
 801a51c:	d50a      	bpl.n	801a534 <__pow5mult+0x74>
 801a51e:	4639      	mov	r1, r7
 801a520:	4622      	mov	r2, r4
 801a522:	4630      	mov	r0, r6
 801a524:	f7ff ff35 	bl	801a392 <__multiply>
 801a528:	4639      	mov	r1, r7
 801a52a:	4681      	mov	r9, r0
 801a52c:	4630      	mov	r0, r6
 801a52e:	f7ff fe49 	bl	801a1c4 <_Bfree>
 801a532:	464f      	mov	r7, r9
 801a534:	106d      	asrs	r5, r5, #1
 801a536:	d00b      	beq.n	801a550 <__pow5mult+0x90>
 801a538:	6820      	ldr	r0, [r4, #0]
 801a53a:	b938      	cbnz	r0, 801a54c <__pow5mult+0x8c>
 801a53c:	4622      	mov	r2, r4
 801a53e:	4621      	mov	r1, r4
 801a540:	4630      	mov	r0, r6
 801a542:	f7ff ff26 	bl	801a392 <__multiply>
 801a546:	6020      	str	r0, [r4, #0]
 801a548:	f8c0 8000 	str.w	r8, [r0]
 801a54c:	4604      	mov	r4, r0
 801a54e:	e7e4      	b.n	801a51a <__pow5mult+0x5a>
 801a550:	4638      	mov	r0, r7
 801a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a556:	bf00      	nop
 801a558:	0801e468 	.word	0x0801e468

0801a55c <__lshift>:
 801a55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a560:	460c      	mov	r4, r1
 801a562:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a566:	6923      	ldr	r3, [r4, #16]
 801a568:	6849      	ldr	r1, [r1, #4]
 801a56a:	eb0a 0903 	add.w	r9, sl, r3
 801a56e:	68a3      	ldr	r3, [r4, #8]
 801a570:	4607      	mov	r7, r0
 801a572:	4616      	mov	r6, r2
 801a574:	f109 0501 	add.w	r5, r9, #1
 801a578:	42ab      	cmp	r3, r5
 801a57a:	db32      	blt.n	801a5e2 <__lshift+0x86>
 801a57c:	4638      	mov	r0, r7
 801a57e:	f7ff fded 	bl	801a15c <_Balloc>
 801a582:	2300      	movs	r3, #0
 801a584:	4680      	mov	r8, r0
 801a586:	f100 0114 	add.w	r1, r0, #20
 801a58a:	461a      	mov	r2, r3
 801a58c:	4553      	cmp	r3, sl
 801a58e:	db2b      	blt.n	801a5e8 <__lshift+0x8c>
 801a590:	6920      	ldr	r0, [r4, #16]
 801a592:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a596:	f104 0314 	add.w	r3, r4, #20
 801a59a:	f016 021f 	ands.w	r2, r6, #31
 801a59e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a5a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a5a6:	d025      	beq.n	801a5f4 <__lshift+0x98>
 801a5a8:	f1c2 0e20 	rsb	lr, r2, #32
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	681e      	ldr	r6, [r3, #0]
 801a5b0:	468a      	mov	sl, r1
 801a5b2:	4096      	lsls	r6, r2
 801a5b4:	4330      	orrs	r0, r6
 801a5b6:	f84a 0b04 	str.w	r0, [sl], #4
 801a5ba:	f853 0b04 	ldr.w	r0, [r3], #4
 801a5be:	459c      	cmp	ip, r3
 801a5c0:	fa20 f00e 	lsr.w	r0, r0, lr
 801a5c4:	d814      	bhi.n	801a5f0 <__lshift+0x94>
 801a5c6:	6048      	str	r0, [r1, #4]
 801a5c8:	b108      	cbz	r0, 801a5ce <__lshift+0x72>
 801a5ca:	f109 0502 	add.w	r5, r9, #2
 801a5ce:	3d01      	subs	r5, #1
 801a5d0:	4638      	mov	r0, r7
 801a5d2:	f8c8 5010 	str.w	r5, [r8, #16]
 801a5d6:	4621      	mov	r1, r4
 801a5d8:	f7ff fdf4 	bl	801a1c4 <_Bfree>
 801a5dc:	4640      	mov	r0, r8
 801a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5e2:	3101      	adds	r1, #1
 801a5e4:	005b      	lsls	r3, r3, #1
 801a5e6:	e7c7      	b.n	801a578 <__lshift+0x1c>
 801a5e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a5ec:	3301      	adds	r3, #1
 801a5ee:	e7cd      	b.n	801a58c <__lshift+0x30>
 801a5f0:	4651      	mov	r1, sl
 801a5f2:	e7dc      	b.n	801a5ae <__lshift+0x52>
 801a5f4:	3904      	subs	r1, #4
 801a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5fa:	f841 2f04 	str.w	r2, [r1, #4]!
 801a5fe:	459c      	cmp	ip, r3
 801a600:	d8f9      	bhi.n	801a5f6 <__lshift+0x9a>
 801a602:	e7e4      	b.n	801a5ce <__lshift+0x72>

0801a604 <__mcmp>:
 801a604:	6903      	ldr	r3, [r0, #16]
 801a606:	690a      	ldr	r2, [r1, #16]
 801a608:	1a9b      	subs	r3, r3, r2
 801a60a:	b530      	push	{r4, r5, lr}
 801a60c:	d10c      	bne.n	801a628 <__mcmp+0x24>
 801a60e:	0092      	lsls	r2, r2, #2
 801a610:	3014      	adds	r0, #20
 801a612:	3114      	adds	r1, #20
 801a614:	1884      	adds	r4, r0, r2
 801a616:	4411      	add	r1, r2
 801a618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801a61c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801a620:	4295      	cmp	r5, r2
 801a622:	d003      	beq.n	801a62c <__mcmp+0x28>
 801a624:	d305      	bcc.n	801a632 <__mcmp+0x2e>
 801a626:	2301      	movs	r3, #1
 801a628:	4618      	mov	r0, r3
 801a62a:	bd30      	pop	{r4, r5, pc}
 801a62c:	42a0      	cmp	r0, r4
 801a62e:	d3f3      	bcc.n	801a618 <__mcmp+0x14>
 801a630:	e7fa      	b.n	801a628 <__mcmp+0x24>
 801a632:	f04f 33ff 	mov.w	r3, #4294967295
 801a636:	e7f7      	b.n	801a628 <__mcmp+0x24>

0801a638 <__mdiff>:
 801a638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a63c:	460d      	mov	r5, r1
 801a63e:	4607      	mov	r7, r0
 801a640:	4611      	mov	r1, r2
 801a642:	4628      	mov	r0, r5
 801a644:	4614      	mov	r4, r2
 801a646:	f7ff ffdd 	bl	801a604 <__mcmp>
 801a64a:	1e06      	subs	r6, r0, #0
 801a64c:	d108      	bne.n	801a660 <__mdiff+0x28>
 801a64e:	4631      	mov	r1, r6
 801a650:	4638      	mov	r0, r7
 801a652:	f7ff fd83 	bl	801a15c <_Balloc>
 801a656:	2301      	movs	r3, #1
 801a658:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801a65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a660:	bfa4      	itt	ge
 801a662:	4623      	movge	r3, r4
 801a664:	462c      	movge	r4, r5
 801a666:	4638      	mov	r0, r7
 801a668:	6861      	ldr	r1, [r4, #4]
 801a66a:	bfa6      	itte	ge
 801a66c:	461d      	movge	r5, r3
 801a66e:	2600      	movge	r6, #0
 801a670:	2601      	movlt	r6, #1
 801a672:	f7ff fd73 	bl	801a15c <_Balloc>
 801a676:	692b      	ldr	r3, [r5, #16]
 801a678:	60c6      	str	r6, [r0, #12]
 801a67a:	6926      	ldr	r6, [r4, #16]
 801a67c:	f105 0914 	add.w	r9, r5, #20
 801a680:	f104 0214 	add.w	r2, r4, #20
 801a684:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801a688:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801a68c:	f100 0514 	add.w	r5, r0, #20
 801a690:	f04f 0e00 	mov.w	lr, #0
 801a694:	f852 ab04 	ldr.w	sl, [r2], #4
 801a698:	f859 4b04 	ldr.w	r4, [r9], #4
 801a69c:	fa1e f18a 	uxtah	r1, lr, sl
 801a6a0:	b2a3      	uxth	r3, r4
 801a6a2:	1ac9      	subs	r1, r1, r3
 801a6a4:	0c23      	lsrs	r3, r4, #16
 801a6a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801a6aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801a6ae:	b289      	uxth	r1, r1
 801a6b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801a6b4:	45c8      	cmp	r8, r9
 801a6b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801a6ba:	4694      	mov	ip, r2
 801a6bc:	f845 3b04 	str.w	r3, [r5], #4
 801a6c0:	d8e8      	bhi.n	801a694 <__mdiff+0x5c>
 801a6c2:	45bc      	cmp	ip, r7
 801a6c4:	d304      	bcc.n	801a6d0 <__mdiff+0x98>
 801a6c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801a6ca:	b183      	cbz	r3, 801a6ee <__mdiff+0xb6>
 801a6cc:	6106      	str	r6, [r0, #16]
 801a6ce:	e7c5      	b.n	801a65c <__mdiff+0x24>
 801a6d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801a6d4:	fa1e f381 	uxtah	r3, lr, r1
 801a6d8:	141a      	asrs	r2, r3, #16
 801a6da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a6e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801a6e8:	f845 3b04 	str.w	r3, [r5], #4
 801a6ec:	e7e9      	b.n	801a6c2 <__mdiff+0x8a>
 801a6ee:	3e01      	subs	r6, #1
 801a6f0:	e7e9      	b.n	801a6c6 <__mdiff+0x8e>
	...

0801a6f4 <__ulp>:
 801a6f4:	4b12      	ldr	r3, [pc, #72]	; (801a740 <__ulp+0x4c>)
 801a6f6:	ee10 2a90 	vmov	r2, s1
 801a6fa:	401a      	ands	r2, r3
 801a6fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801a700:	2b00      	cmp	r3, #0
 801a702:	dd04      	ble.n	801a70e <__ulp+0x1a>
 801a704:	2000      	movs	r0, #0
 801a706:	4619      	mov	r1, r3
 801a708:	ec41 0b10 	vmov	d0, r0, r1
 801a70c:	4770      	bx	lr
 801a70e:	425b      	negs	r3, r3
 801a710:	151b      	asrs	r3, r3, #20
 801a712:	2b13      	cmp	r3, #19
 801a714:	f04f 0000 	mov.w	r0, #0
 801a718:	f04f 0100 	mov.w	r1, #0
 801a71c:	dc04      	bgt.n	801a728 <__ulp+0x34>
 801a71e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a722:	fa42 f103 	asr.w	r1, r2, r3
 801a726:	e7ef      	b.n	801a708 <__ulp+0x14>
 801a728:	3b14      	subs	r3, #20
 801a72a:	2b1e      	cmp	r3, #30
 801a72c:	f04f 0201 	mov.w	r2, #1
 801a730:	bfda      	itte	le
 801a732:	f1c3 031f 	rsble	r3, r3, #31
 801a736:	fa02 f303 	lslle.w	r3, r2, r3
 801a73a:	4613      	movgt	r3, r2
 801a73c:	4618      	mov	r0, r3
 801a73e:	e7e3      	b.n	801a708 <__ulp+0x14>
 801a740:	7ff00000 	.word	0x7ff00000

0801a744 <__b2d>:
 801a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a746:	6905      	ldr	r5, [r0, #16]
 801a748:	f100 0714 	add.w	r7, r0, #20
 801a74c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a750:	1f2e      	subs	r6, r5, #4
 801a752:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a756:	4620      	mov	r0, r4
 801a758:	f7ff fdc4 	bl	801a2e4 <__hi0bits>
 801a75c:	f1c0 0320 	rsb	r3, r0, #32
 801a760:	280a      	cmp	r0, #10
 801a762:	600b      	str	r3, [r1, #0]
 801a764:	f8df c074 	ldr.w	ip, [pc, #116]	; 801a7dc <__b2d+0x98>
 801a768:	dc14      	bgt.n	801a794 <__b2d+0x50>
 801a76a:	f1c0 0e0b 	rsb	lr, r0, #11
 801a76e:	fa24 f10e 	lsr.w	r1, r4, lr
 801a772:	42b7      	cmp	r7, r6
 801a774:	ea41 030c 	orr.w	r3, r1, ip
 801a778:	bf34      	ite	cc
 801a77a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a77e:	2100      	movcs	r1, #0
 801a780:	3015      	adds	r0, #21
 801a782:	fa04 f000 	lsl.w	r0, r4, r0
 801a786:	fa21 f10e 	lsr.w	r1, r1, lr
 801a78a:	ea40 0201 	orr.w	r2, r0, r1
 801a78e:	ec43 2b10 	vmov	d0, r2, r3
 801a792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a794:	42b7      	cmp	r7, r6
 801a796:	bf3a      	itte	cc
 801a798:	f1a5 0608 	subcc.w	r6, r5, #8
 801a79c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a7a0:	2100      	movcs	r1, #0
 801a7a2:	380b      	subs	r0, #11
 801a7a4:	d015      	beq.n	801a7d2 <__b2d+0x8e>
 801a7a6:	4084      	lsls	r4, r0
 801a7a8:	f1c0 0520 	rsb	r5, r0, #32
 801a7ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801a7b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801a7b4:	42be      	cmp	r6, r7
 801a7b6:	fa21 fc05 	lsr.w	ip, r1, r5
 801a7ba:	ea44 030c 	orr.w	r3, r4, ip
 801a7be:	bf8c      	ite	hi
 801a7c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a7c4:	2400      	movls	r4, #0
 801a7c6:	fa01 f000 	lsl.w	r0, r1, r0
 801a7ca:	40ec      	lsrs	r4, r5
 801a7cc:	ea40 0204 	orr.w	r2, r0, r4
 801a7d0:	e7dd      	b.n	801a78e <__b2d+0x4a>
 801a7d2:	ea44 030c 	orr.w	r3, r4, ip
 801a7d6:	460a      	mov	r2, r1
 801a7d8:	e7d9      	b.n	801a78e <__b2d+0x4a>
 801a7da:	bf00      	nop
 801a7dc:	3ff00000 	.word	0x3ff00000

0801a7e0 <__d2b>:
 801a7e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a7e4:	460e      	mov	r6, r1
 801a7e6:	2101      	movs	r1, #1
 801a7e8:	ec59 8b10 	vmov	r8, r9, d0
 801a7ec:	4615      	mov	r5, r2
 801a7ee:	f7ff fcb5 	bl	801a15c <_Balloc>
 801a7f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801a7f6:	4607      	mov	r7, r0
 801a7f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a7fc:	bb34      	cbnz	r4, 801a84c <__d2b+0x6c>
 801a7fe:	9301      	str	r3, [sp, #4]
 801a800:	f1b8 0300 	subs.w	r3, r8, #0
 801a804:	d027      	beq.n	801a856 <__d2b+0x76>
 801a806:	a802      	add	r0, sp, #8
 801a808:	f840 3d08 	str.w	r3, [r0, #-8]!
 801a80c:	f7ff fd89 	bl	801a322 <__lo0bits>
 801a810:	9900      	ldr	r1, [sp, #0]
 801a812:	b1f0      	cbz	r0, 801a852 <__d2b+0x72>
 801a814:	9a01      	ldr	r2, [sp, #4]
 801a816:	f1c0 0320 	rsb	r3, r0, #32
 801a81a:	fa02 f303 	lsl.w	r3, r2, r3
 801a81e:	430b      	orrs	r3, r1
 801a820:	40c2      	lsrs	r2, r0
 801a822:	617b      	str	r3, [r7, #20]
 801a824:	9201      	str	r2, [sp, #4]
 801a826:	9b01      	ldr	r3, [sp, #4]
 801a828:	61bb      	str	r3, [r7, #24]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	bf14      	ite	ne
 801a82e:	2102      	movne	r1, #2
 801a830:	2101      	moveq	r1, #1
 801a832:	6139      	str	r1, [r7, #16]
 801a834:	b1c4      	cbz	r4, 801a868 <__d2b+0x88>
 801a836:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801a83a:	4404      	add	r4, r0
 801a83c:	6034      	str	r4, [r6, #0]
 801a83e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a842:	6028      	str	r0, [r5, #0]
 801a844:	4638      	mov	r0, r7
 801a846:	b003      	add	sp, #12
 801a848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a84c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a850:	e7d5      	b.n	801a7fe <__d2b+0x1e>
 801a852:	6179      	str	r1, [r7, #20]
 801a854:	e7e7      	b.n	801a826 <__d2b+0x46>
 801a856:	a801      	add	r0, sp, #4
 801a858:	f7ff fd63 	bl	801a322 <__lo0bits>
 801a85c:	9b01      	ldr	r3, [sp, #4]
 801a85e:	617b      	str	r3, [r7, #20]
 801a860:	2101      	movs	r1, #1
 801a862:	6139      	str	r1, [r7, #16]
 801a864:	3020      	adds	r0, #32
 801a866:	e7e5      	b.n	801a834 <__d2b+0x54>
 801a868:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801a86c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a870:	6030      	str	r0, [r6, #0]
 801a872:	6918      	ldr	r0, [r3, #16]
 801a874:	f7ff fd36 	bl	801a2e4 <__hi0bits>
 801a878:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801a87c:	e7e1      	b.n	801a842 <__d2b+0x62>

0801a87e <__ratio>:
 801a87e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a882:	4688      	mov	r8, r1
 801a884:	4669      	mov	r1, sp
 801a886:	4681      	mov	r9, r0
 801a888:	f7ff ff5c 	bl	801a744 <__b2d>
 801a88c:	a901      	add	r1, sp, #4
 801a88e:	4640      	mov	r0, r8
 801a890:	ec57 6b10 	vmov	r6, r7, d0
 801a894:	f7ff ff56 	bl	801a744 <__b2d>
 801a898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a89c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a8a0:	eba3 0c02 	sub.w	ip, r3, r2
 801a8a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a8a8:	1a9b      	subs	r3, r3, r2
 801a8aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a8ae:	ec5b ab10 	vmov	sl, fp, d0
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	bfce      	itee	gt
 801a8b6:	463a      	movgt	r2, r7
 801a8b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a8bc:	465a      	movle	r2, fp
 801a8be:	4659      	mov	r1, fp
 801a8c0:	463d      	mov	r5, r7
 801a8c2:	bfd4      	ite	le
 801a8c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a8c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801a8cc:	4630      	mov	r0, r6
 801a8ce:	ee10 2a10 	vmov	r2, s0
 801a8d2:	460b      	mov	r3, r1
 801a8d4:	4629      	mov	r1, r5
 801a8d6:	f7e5 ffc9 	bl	800086c <__aeabi_ddiv>
 801a8da:	ec41 0b10 	vmov	d0, r0, r1
 801a8de:	b003      	add	sp, #12
 801a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a8e4 <__copybits>:
 801a8e4:	3901      	subs	r1, #1
 801a8e6:	b510      	push	{r4, lr}
 801a8e8:	1149      	asrs	r1, r1, #5
 801a8ea:	6914      	ldr	r4, [r2, #16]
 801a8ec:	3101      	adds	r1, #1
 801a8ee:	f102 0314 	add.w	r3, r2, #20
 801a8f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a8f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a8fa:	42a3      	cmp	r3, r4
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	d303      	bcc.n	801a908 <__copybits+0x24>
 801a900:	2300      	movs	r3, #0
 801a902:	428a      	cmp	r2, r1
 801a904:	d305      	bcc.n	801a912 <__copybits+0x2e>
 801a906:	bd10      	pop	{r4, pc}
 801a908:	f853 2b04 	ldr.w	r2, [r3], #4
 801a90c:	f840 2b04 	str.w	r2, [r0], #4
 801a910:	e7f3      	b.n	801a8fa <__copybits+0x16>
 801a912:	f842 3b04 	str.w	r3, [r2], #4
 801a916:	e7f4      	b.n	801a902 <__copybits+0x1e>

0801a918 <__any_on>:
 801a918:	f100 0214 	add.w	r2, r0, #20
 801a91c:	6900      	ldr	r0, [r0, #16]
 801a91e:	114b      	asrs	r3, r1, #5
 801a920:	4298      	cmp	r0, r3
 801a922:	b510      	push	{r4, lr}
 801a924:	db11      	blt.n	801a94a <__any_on+0x32>
 801a926:	dd0a      	ble.n	801a93e <__any_on+0x26>
 801a928:	f011 011f 	ands.w	r1, r1, #31
 801a92c:	d007      	beq.n	801a93e <__any_on+0x26>
 801a92e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a932:	fa24 f001 	lsr.w	r0, r4, r1
 801a936:	fa00 f101 	lsl.w	r1, r0, r1
 801a93a:	428c      	cmp	r4, r1
 801a93c:	d10b      	bne.n	801a956 <__any_on+0x3e>
 801a93e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a942:	4293      	cmp	r3, r2
 801a944:	d803      	bhi.n	801a94e <__any_on+0x36>
 801a946:	2000      	movs	r0, #0
 801a948:	bd10      	pop	{r4, pc}
 801a94a:	4603      	mov	r3, r0
 801a94c:	e7f7      	b.n	801a93e <__any_on+0x26>
 801a94e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a952:	2900      	cmp	r1, #0
 801a954:	d0f5      	beq.n	801a942 <__any_on+0x2a>
 801a956:	2001      	movs	r0, #1
 801a958:	e7f6      	b.n	801a948 <__any_on+0x30>

0801a95a <_calloc_r>:
 801a95a:	b538      	push	{r3, r4, r5, lr}
 801a95c:	fb02 f401 	mul.w	r4, r2, r1
 801a960:	4621      	mov	r1, r4
 801a962:	f7fc fc57 	bl	8017214 <_malloc_r>
 801a966:	4605      	mov	r5, r0
 801a968:	b118      	cbz	r0, 801a972 <_calloc_r+0x18>
 801a96a:	4622      	mov	r2, r4
 801a96c:	2100      	movs	r1, #0
 801a96e:	f7fc fbfa 	bl	8017166 <memset>
 801a972:	4628      	mov	r0, r5
 801a974:	bd38      	pop	{r3, r4, r5, pc}

0801a976 <__ssputs_r>:
 801a976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a97a:	688e      	ldr	r6, [r1, #8]
 801a97c:	429e      	cmp	r6, r3
 801a97e:	4682      	mov	sl, r0
 801a980:	460c      	mov	r4, r1
 801a982:	4690      	mov	r8, r2
 801a984:	4699      	mov	r9, r3
 801a986:	d837      	bhi.n	801a9f8 <__ssputs_r+0x82>
 801a988:	898a      	ldrh	r2, [r1, #12]
 801a98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a98e:	d031      	beq.n	801a9f4 <__ssputs_r+0x7e>
 801a990:	6825      	ldr	r5, [r4, #0]
 801a992:	6909      	ldr	r1, [r1, #16]
 801a994:	1a6f      	subs	r7, r5, r1
 801a996:	6965      	ldr	r5, [r4, #20]
 801a998:	2302      	movs	r3, #2
 801a99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a99e:	fb95 f5f3 	sdiv	r5, r5, r3
 801a9a2:	f109 0301 	add.w	r3, r9, #1
 801a9a6:	443b      	add	r3, r7
 801a9a8:	429d      	cmp	r5, r3
 801a9aa:	bf38      	it	cc
 801a9ac:	461d      	movcc	r5, r3
 801a9ae:	0553      	lsls	r3, r2, #21
 801a9b0:	d530      	bpl.n	801aa14 <__ssputs_r+0x9e>
 801a9b2:	4629      	mov	r1, r5
 801a9b4:	f7fc fc2e 	bl	8017214 <_malloc_r>
 801a9b8:	4606      	mov	r6, r0
 801a9ba:	b950      	cbnz	r0, 801a9d2 <__ssputs_r+0x5c>
 801a9bc:	230c      	movs	r3, #12
 801a9be:	f8ca 3000 	str.w	r3, [sl]
 801a9c2:	89a3      	ldrh	r3, [r4, #12]
 801a9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9d2:	463a      	mov	r2, r7
 801a9d4:	6921      	ldr	r1, [r4, #16]
 801a9d6:	f7fc fbbb 	bl	8017150 <memcpy>
 801a9da:	89a3      	ldrh	r3, [r4, #12]
 801a9dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9e4:	81a3      	strh	r3, [r4, #12]
 801a9e6:	6126      	str	r6, [r4, #16]
 801a9e8:	6165      	str	r5, [r4, #20]
 801a9ea:	443e      	add	r6, r7
 801a9ec:	1bed      	subs	r5, r5, r7
 801a9ee:	6026      	str	r6, [r4, #0]
 801a9f0:	60a5      	str	r5, [r4, #8]
 801a9f2:	464e      	mov	r6, r9
 801a9f4:	454e      	cmp	r6, r9
 801a9f6:	d900      	bls.n	801a9fa <__ssputs_r+0x84>
 801a9f8:	464e      	mov	r6, r9
 801a9fa:	4632      	mov	r2, r6
 801a9fc:	4641      	mov	r1, r8
 801a9fe:	6820      	ldr	r0, [r4, #0]
 801aa00:	f000 f919 	bl	801ac36 <memmove>
 801aa04:	68a3      	ldr	r3, [r4, #8]
 801aa06:	1b9b      	subs	r3, r3, r6
 801aa08:	60a3      	str	r3, [r4, #8]
 801aa0a:	6823      	ldr	r3, [r4, #0]
 801aa0c:	441e      	add	r6, r3
 801aa0e:	6026      	str	r6, [r4, #0]
 801aa10:	2000      	movs	r0, #0
 801aa12:	e7dc      	b.n	801a9ce <__ssputs_r+0x58>
 801aa14:	462a      	mov	r2, r5
 801aa16:	f000 f927 	bl	801ac68 <_realloc_r>
 801aa1a:	4606      	mov	r6, r0
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	d1e2      	bne.n	801a9e6 <__ssputs_r+0x70>
 801aa20:	6921      	ldr	r1, [r4, #16]
 801aa22:	4650      	mov	r0, sl
 801aa24:	f7fc fba8 	bl	8017178 <_free_r>
 801aa28:	e7c8      	b.n	801a9bc <__ssputs_r+0x46>
	...

0801aa2c <_svfiprintf_r>:
 801aa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa30:	461d      	mov	r5, r3
 801aa32:	898b      	ldrh	r3, [r1, #12]
 801aa34:	061f      	lsls	r7, r3, #24
 801aa36:	b09d      	sub	sp, #116	; 0x74
 801aa38:	4680      	mov	r8, r0
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	4616      	mov	r6, r2
 801aa3e:	d50f      	bpl.n	801aa60 <_svfiprintf_r+0x34>
 801aa40:	690b      	ldr	r3, [r1, #16]
 801aa42:	b96b      	cbnz	r3, 801aa60 <_svfiprintf_r+0x34>
 801aa44:	2140      	movs	r1, #64	; 0x40
 801aa46:	f7fc fbe5 	bl	8017214 <_malloc_r>
 801aa4a:	6020      	str	r0, [r4, #0]
 801aa4c:	6120      	str	r0, [r4, #16]
 801aa4e:	b928      	cbnz	r0, 801aa5c <_svfiprintf_r+0x30>
 801aa50:	230c      	movs	r3, #12
 801aa52:	f8c8 3000 	str.w	r3, [r8]
 801aa56:	f04f 30ff 	mov.w	r0, #4294967295
 801aa5a:	e0c8      	b.n	801abee <_svfiprintf_r+0x1c2>
 801aa5c:	2340      	movs	r3, #64	; 0x40
 801aa5e:	6163      	str	r3, [r4, #20]
 801aa60:	2300      	movs	r3, #0
 801aa62:	9309      	str	r3, [sp, #36]	; 0x24
 801aa64:	2320      	movs	r3, #32
 801aa66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aa6a:	2330      	movs	r3, #48	; 0x30
 801aa6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aa70:	9503      	str	r5, [sp, #12]
 801aa72:	f04f 0b01 	mov.w	fp, #1
 801aa76:	4637      	mov	r7, r6
 801aa78:	463d      	mov	r5, r7
 801aa7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801aa7e:	b10b      	cbz	r3, 801aa84 <_svfiprintf_r+0x58>
 801aa80:	2b25      	cmp	r3, #37	; 0x25
 801aa82:	d13e      	bne.n	801ab02 <_svfiprintf_r+0xd6>
 801aa84:	ebb7 0a06 	subs.w	sl, r7, r6
 801aa88:	d00b      	beq.n	801aaa2 <_svfiprintf_r+0x76>
 801aa8a:	4653      	mov	r3, sl
 801aa8c:	4632      	mov	r2, r6
 801aa8e:	4621      	mov	r1, r4
 801aa90:	4640      	mov	r0, r8
 801aa92:	f7ff ff70 	bl	801a976 <__ssputs_r>
 801aa96:	3001      	adds	r0, #1
 801aa98:	f000 80a4 	beq.w	801abe4 <_svfiprintf_r+0x1b8>
 801aa9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa9e:	4453      	add	r3, sl
 801aaa0:	9309      	str	r3, [sp, #36]	; 0x24
 801aaa2:	783b      	ldrb	r3, [r7, #0]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	f000 809d 	beq.w	801abe4 <_svfiprintf_r+0x1b8>
 801aaaa:	2300      	movs	r3, #0
 801aaac:	f04f 32ff 	mov.w	r2, #4294967295
 801aab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aab4:	9304      	str	r3, [sp, #16]
 801aab6:	9307      	str	r3, [sp, #28]
 801aab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aabc:	931a      	str	r3, [sp, #104]	; 0x68
 801aabe:	462f      	mov	r7, r5
 801aac0:	2205      	movs	r2, #5
 801aac2:	f817 1b01 	ldrb.w	r1, [r7], #1
 801aac6:	4850      	ldr	r0, [pc, #320]	; (801ac08 <_svfiprintf_r+0x1dc>)
 801aac8:	f7e5 fb9a 	bl	8000200 <memchr>
 801aacc:	9b04      	ldr	r3, [sp, #16]
 801aace:	b9d0      	cbnz	r0, 801ab06 <_svfiprintf_r+0xda>
 801aad0:	06d9      	lsls	r1, r3, #27
 801aad2:	bf44      	itt	mi
 801aad4:	2220      	movmi	r2, #32
 801aad6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801aada:	071a      	lsls	r2, r3, #28
 801aadc:	bf44      	itt	mi
 801aade:	222b      	movmi	r2, #43	; 0x2b
 801aae0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801aae4:	782a      	ldrb	r2, [r5, #0]
 801aae6:	2a2a      	cmp	r2, #42	; 0x2a
 801aae8:	d015      	beq.n	801ab16 <_svfiprintf_r+0xea>
 801aaea:	9a07      	ldr	r2, [sp, #28]
 801aaec:	462f      	mov	r7, r5
 801aaee:	2000      	movs	r0, #0
 801aaf0:	250a      	movs	r5, #10
 801aaf2:	4639      	mov	r1, r7
 801aaf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aaf8:	3b30      	subs	r3, #48	; 0x30
 801aafa:	2b09      	cmp	r3, #9
 801aafc:	d94d      	bls.n	801ab9a <_svfiprintf_r+0x16e>
 801aafe:	b1b8      	cbz	r0, 801ab30 <_svfiprintf_r+0x104>
 801ab00:	e00f      	b.n	801ab22 <_svfiprintf_r+0xf6>
 801ab02:	462f      	mov	r7, r5
 801ab04:	e7b8      	b.n	801aa78 <_svfiprintf_r+0x4c>
 801ab06:	4a40      	ldr	r2, [pc, #256]	; (801ac08 <_svfiprintf_r+0x1dc>)
 801ab08:	1a80      	subs	r0, r0, r2
 801ab0a:	fa0b f000 	lsl.w	r0, fp, r0
 801ab0e:	4318      	orrs	r0, r3
 801ab10:	9004      	str	r0, [sp, #16]
 801ab12:	463d      	mov	r5, r7
 801ab14:	e7d3      	b.n	801aabe <_svfiprintf_r+0x92>
 801ab16:	9a03      	ldr	r2, [sp, #12]
 801ab18:	1d11      	adds	r1, r2, #4
 801ab1a:	6812      	ldr	r2, [r2, #0]
 801ab1c:	9103      	str	r1, [sp, #12]
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	db01      	blt.n	801ab26 <_svfiprintf_r+0xfa>
 801ab22:	9207      	str	r2, [sp, #28]
 801ab24:	e004      	b.n	801ab30 <_svfiprintf_r+0x104>
 801ab26:	4252      	negs	r2, r2
 801ab28:	f043 0302 	orr.w	r3, r3, #2
 801ab2c:	9207      	str	r2, [sp, #28]
 801ab2e:	9304      	str	r3, [sp, #16]
 801ab30:	783b      	ldrb	r3, [r7, #0]
 801ab32:	2b2e      	cmp	r3, #46	; 0x2e
 801ab34:	d10c      	bne.n	801ab50 <_svfiprintf_r+0x124>
 801ab36:	787b      	ldrb	r3, [r7, #1]
 801ab38:	2b2a      	cmp	r3, #42	; 0x2a
 801ab3a:	d133      	bne.n	801aba4 <_svfiprintf_r+0x178>
 801ab3c:	9b03      	ldr	r3, [sp, #12]
 801ab3e:	1d1a      	adds	r2, r3, #4
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	9203      	str	r2, [sp, #12]
 801ab44:	2b00      	cmp	r3, #0
 801ab46:	bfb8      	it	lt
 801ab48:	f04f 33ff 	movlt.w	r3, #4294967295
 801ab4c:	3702      	adds	r7, #2
 801ab4e:	9305      	str	r3, [sp, #20]
 801ab50:	4d2e      	ldr	r5, [pc, #184]	; (801ac0c <_svfiprintf_r+0x1e0>)
 801ab52:	7839      	ldrb	r1, [r7, #0]
 801ab54:	2203      	movs	r2, #3
 801ab56:	4628      	mov	r0, r5
 801ab58:	f7e5 fb52 	bl	8000200 <memchr>
 801ab5c:	b138      	cbz	r0, 801ab6e <_svfiprintf_r+0x142>
 801ab5e:	2340      	movs	r3, #64	; 0x40
 801ab60:	1b40      	subs	r0, r0, r5
 801ab62:	fa03 f000 	lsl.w	r0, r3, r0
 801ab66:	9b04      	ldr	r3, [sp, #16]
 801ab68:	4303      	orrs	r3, r0
 801ab6a:	3701      	adds	r7, #1
 801ab6c:	9304      	str	r3, [sp, #16]
 801ab6e:	7839      	ldrb	r1, [r7, #0]
 801ab70:	4827      	ldr	r0, [pc, #156]	; (801ac10 <_svfiprintf_r+0x1e4>)
 801ab72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab76:	2206      	movs	r2, #6
 801ab78:	1c7e      	adds	r6, r7, #1
 801ab7a:	f7e5 fb41 	bl	8000200 <memchr>
 801ab7e:	2800      	cmp	r0, #0
 801ab80:	d038      	beq.n	801abf4 <_svfiprintf_r+0x1c8>
 801ab82:	4b24      	ldr	r3, [pc, #144]	; (801ac14 <_svfiprintf_r+0x1e8>)
 801ab84:	bb13      	cbnz	r3, 801abcc <_svfiprintf_r+0x1a0>
 801ab86:	9b03      	ldr	r3, [sp, #12]
 801ab88:	3307      	adds	r3, #7
 801ab8a:	f023 0307 	bic.w	r3, r3, #7
 801ab8e:	3308      	adds	r3, #8
 801ab90:	9303      	str	r3, [sp, #12]
 801ab92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab94:	444b      	add	r3, r9
 801ab96:	9309      	str	r3, [sp, #36]	; 0x24
 801ab98:	e76d      	b.n	801aa76 <_svfiprintf_r+0x4a>
 801ab9a:	fb05 3202 	mla	r2, r5, r2, r3
 801ab9e:	2001      	movs	r0, #1
 801aba0:	460f      	mov	r7, r1
 801aba2:	e7a6      	b.n	801aaf2 <_svfiprintf_r+0xc6>
 801aba4:	2300      	movs	r3, #0
 801aba6:	3701      	adds	r7, #1
 801aba8:	9305      	str	r3, [sp, #20]
 801abaa:	4619      	mov	r1, r3
 801abac:	250a      	movs	r5, #10
 801abae:	4638      	mov	r0, r7
 801abb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801abb4:	3a30      	subs	r2, #48	; 0x30
 801abb6:	2a09      	cmp	r2, #9
 801abb8:	d903      	bls.n	801abc2 <_svfiprintf_r+0x196>
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d0c8      	beq.n	801ab50 <_svfiprintf_r+0x124>
 801abbe:	9105      	str	r1, [sp, #20]
 801abc0:	e7c6      	b.n	801ab50 <_svfiprintf_r+0x124>
 801abc2:	fb05 2101 	mla	r1, r5, r1, r2
 801abc6:	2301      	movs	r3, #1
 801abc8:	4607      	mov	r7, r0
 801abca:	e7f0      	b.n	801abae <_svfiprintf_r+0x182>
 801abcc:	ab03      	add	r3, sp, #12
 801abce:	9300      	str	r3, [sp, #0]
 801abd0:	4622      	mov	r2, r4
 801abd2:	4b11      	ldr	r3, [pc, #68]	; (801ac18 <_svfiprintf_r+0x1ec>)
 801abd4:	a904      	add	r1, sp, #16
 801abd6:	4640      	mov	r0, r8
 801abd8:	f7fc fc0a 	bl	80173f0 <_printf_float>
 801abdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801abe0:	4681      	mov	r9, r0
 801abe2:	d1d6      	bne.n	801ab92 <_svfiprintf_r+0x166>
 801abe4:	89a3      	ldrh	r3, [r4, #12]
 801abe6:	065b      	lsls	r3, r3, #25
 801abe8:	f53f af35 	bmi.w	801aa56 <_svfiprintf_r+0x2a>
 801abec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abee:	b01d      	add	sp, #116	; 0x74
 801abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf4:	ab03      	add	r3, sp, #12
 801abf6:	9300      	str	r3, [sp, #0]
 801abf8:	4622      	mov	r2, r4
 801abfa:	4b07      	ldr	r3, [pc, #28]	; (801ac18 <_svfiprintf_r+0x1ec>)
 801abfc:	a904      	add	r1, sp, #16
 801abfe:	4640      	mov	r0, r8
 801ac00:	f7fc feac 	bl	801795c <_printf_i>
 801ac04:	e7ea      	b.n	801abdc <_svfiprintf_r+0x1b0>
 801ac06:	bf00      	nop
 801ac08:	0801e474 	.word	0x0801e474
 801ac0c:	0801e47a 	.word	0x0801e47a
 801ac10:	0801e47e 	.word	0x0801e47e
 801ac14:	080173f1 	.word	0x080173f1
 801ac18:	0801a977 	.word	0x0801a977

0801ac1c <__ascii_wctomb>:
 801ac1c:	b149      	cbz	r1, 801ac32 <__ascii_wctomb+0x16>
 801ac1e:	2aff      	cmp	r2, #255	; 0xff
 801ac20:	bf85      	ittet	hi
 801ac22:	238a      	movhi	r3, #138	; 0x8a
 801ac24:	6003      	strhi	r3, [r0, #0]
 801ac26:	700a      	strbls	r2, [r1, #0]
 801ac28:	f04f 30ff 	movhi.w	r0, #4294967295
 801ac2c:	bf98      	it	ls
 801ac2e:	2001      	movls	r0, #1
 801ac30:	4770      	bx	lr
 801ac32:	4608      	mov	r0, r1
 801ac34:	4770      	bx	lr

0801ac36 <memmove>:
 801ac36:	4288      	cmp	r0, r1
 801ac38:	b510      	push	{r4, lr}
 801ac3a:	eb01 0302 	add.w	r3, r1, r2
 801ac3e:	d807      	bhi.n	801ac50 <memmove+0x1a>
 801ac40:	1e42      	subs	r2, r0, #1
 801ac42:	4299      	cmp	r1, r3
 801ac44:	d00a      	beq.n	801ac5c <memmove+0x26>
 801ac46:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ac4e:	e7f8      	b.n	801ac42 <memmove+0xc>
 801ac50:	4283      	cmp	r3, r0
 801ac52:	d9f5      	bls.n	801ac40 <memmove+0xa>
 801ac54:	1881      	adds	r1, r0, r2
 801ac56:	1ad2      	subs	r2, r2, r3
 801ac58:	42d3      	cmn	r3, r2
 801ac5a:	d100      	bne.n	801ac5e <memmove+0x28>
 801ac5c:	bd10      	pop	{r4, pc}
 801ac5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ac66:	e7f7      	b.n	801ac58 <memmove+0x22>

0801ac68 <_realloc_r>:
 801ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac6a:	4607      	mov	r7, r0
 801ac6c:	4614      	mov	r4, r2
 801ac6e:	460e      	mov	r6, r1
 801ac70:	b921      	cbnz	r1, 801ac7c <_realloc_r+0x14>
 801ac72:	4611      	mov	r1, r2
 801ac74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ac78:	f7fc bacc 	b.w	8017214 <_malloc_r>
 801ac7c:	b922      	cbnz	r2, 801ac88 <_realloc_r+0x20>
 801ac7e:	f7fc fa7b 	bl	8017178 <_free_r>
 801ac82:	4625      	mov	r5, r4
 801ac84:	4628      	mov	r0, r5
 801ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac88:	f000 f814 	bl	801acb4 <_malloc_usable_size_r>
 801ac8c:	42a0      	cmp	r0, r4
 801ac8e:	d20f      	bcs.n	801acb0 <_realloc_r+0x48>
 801ac90:	4621      	mov	r1, r4
 801ac92:	4638      	mov	r0, r7
 801ac94:	f7fc fabe 	bl	8017214 <_malloc_r>
 801ac98:	4605      	mov	r5, r0
 801ac9a:	2800      	cmp	r0, #0
 801ac9c:	d0f2      	beq.n	801ac84 <_realloc_r+0x1c>
 801ac9e:	4631      	mov	r1, r6
 801aca0:	4622      	mov	r2, r4
 801aca2:	f7fc fa55 	bl	8017150 <memcpy>
 801aca6:	4631      	mov	r1, r6
 801aca8:	4638      	mov	r0, r7
 801acaa:	f7fc fa65 	bl	8017178 <_free_r>
 801acae:	e7e9      	b.n	801ac84 <_realloc_r+0x1c>
 801acb0:	4635      	mov	r5, r6
 801acb2:	e7e7      	b.n	801ac84 <_realloc_r+0x1c>

0801acb4 <_malloc_usable_size_r>:
 801acb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acb8:	1f18      	subs	r0, r3, #4
 801acba:	2b00      	cmp	r3, #0
 801acbc:	bfbc      	itt	lt
 801acbe:	580b      	ldrlt	r3, [r1, r0]
 801acc0:	18c0      	addlt	r0, r0, r3
 801acc2:	4770      	bx	lr
 801acc4:	0000      	movs	r0, r0
	...

0801acc8 <cos>:
 801acc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801acca:	ec51 0b10 	vmov	r0, r1, d0
 801acce:	4a1e      	ldr	r2, [pc, #120]	; (801ad48 <cos+0x80>)
 801acd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801acd4:	4293      	cmp	r3, r2
 801acd6:	dc06      	bgt.n	801ace6 <cos+0x1e>
 801acd8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801ad40 <cos+0x78>
 801acdc:	f001 feb8 	bl	801ca50 <__kernel_cos>
 801ace0:	ec51 0b10 	vmov	r0, r1, d0
 801ace4:	e007      	b.n	801acf6 <cos+0x2e>
 801ace6:	4a19      	ldr	r2, [pc, #100]	; (801ad4c <cos+0x84>)
 801ace8:	4293      	cmp	r3, r2
 801acea:	dd09      	ble.n	801ad00 <cos+0x38>
 801acec:	ee10 2a10 	vmov	r2, s0
 801acf0:	460b      	mov	r3, r1
 801acf2:	f7e5 fad9 	bl	80002a8 <__aeabi_dsub>
 801acf6:	ec41 0b10 	vmov	d0, r0, r1
 801acfa:	b005      	add	sp, #20
 801acfc:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad00:	4668      	mov	r0, sp
 801ad02:	f001 fbfd 	bl	801c500 <__ieee754_rem_pio2>
 801ad06:	f000 0003 	and.w	r0, r0, #3
 801ad0a:	2801      	cmp	r0, #1
 801ad0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ad10:	ed9d 0b00 	vldr	d0, [sp]
 801ad14:	d007      	beq.n	801ad26 <cos+0x5e>
 801ad16:	2802      	cmp	r0, #2
 801ad18:	d00e      	beq.n	801ad38 <cos+0x70>
 801ad1a:	2800      	cmp	r0, #0
 801ad1c:	d0de      	beq.n	801acdc <cos+0x14>
 801ad1e:	2001      	movs	r0, #1
 801ad20:	f002 fa9e 	bl	801d260 <__kernel_sin>
 801ad24:	e7dc      	b.n	801ace0 <cos+0x18>
 801ad26:	f002 fa9b 	bl	801d260 <__kernel_sin>
 801ad2a:	ec53 2b10 	vmov	r2, r3, d0
 801ad2e:	ee10 0a10 	vmov	r0, s0
 801ad32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ad36:	e7de      	b.n	801acf6 <cos+0x2e>
 801ad38:	f001 fe8a 	bl	801ca50 <__kernel_cos>
 801ad3c:	e7f5      	b.n	801ad2a <cos+0x62>
 801ad3e:	bf00      	nop
	...
 801ad48:	3fe921fb 	.word	0x3fe921fb
 801ad4c:	7fefffff 	.word	0x7fefffff

0801ad50 <sin>:
 801ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ad52:	ec51 0b10 	vmov	r0, r1, d0
 801ad56:	4a20      	ldr	r2, [pc, #128]	; (801add8 <sin+0x88>)
 801ad58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ad5c:	4293      	cmp	r3, r2
 801ad5e:	dc07      	bgt.n	801ad70 <sin+0x20>
 801ad60:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801add0 <sin+0x80>
 801ad64:	2000      	movs	r0, #0
 801ad66:	f002 fa7b 	bl	801d260 <__kernel_sin>
 801ad6a:	ec51 0b10 	vmov	r0, r1, d0
 801ad6e:	e007      	b.n	801ad80 <sin+0x30>
 801ad70:	4a1a      	ldr	r2, [pc, #104]	; (801addc <sin+0x8c>)
 801ad72:	4293      	cmp	r3, r2
 801ad74:	dd09      	ble.n	801ad8a <sin+0x3a>
 801ad76:	ee10 2a10 	vmov	r2, s0
 801ad7a:	460b      	mov	r3, r1
 801ad7c:	f7e5 fa94 	bl	80002a8 <__aeabi_dsub>
 801ad80:	ec41 0b10 	vmov	d0, r0, r1
 801ad84:	b005      	add	sp, #20
 801ad86:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad8a:	4668      	mov	r0, sp
 801ad8c:	f001 fbb8 	bl	801c500 <__ieee754_rem_pio2>
 801ad90:	f000 0003 	and.w	r0, r0, #3
 801ad94:	2801      	cmp	r0, #1
 801ad96:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ad9a:	ed9d 0b00 	vldr	d0, [sp]
 801ad9e:	d004      	beq.n	801adaa <sin+0x5a>
 801ada0:	2802      	cmp	r0, #2
 801ada2:	d005      	beq.n	801adb0 <sin+0x60>
 801ada4:	b970      	cbnz	r0, 801adc4 <sin+0x74>
 801ada6:	2001      	movs	r0, #1
 801ada8:	e7dd      	b.n	801ad66 <sin+0x16>
 801adaa:	f001 fe51 	bl	801ca50 <__kernel_cos>
 801adae:	e7dc      	b.n	801ad6a <sin+0x1a>
 801adb0:	2001      	movs	r0, #1
 801adb2:	f002 fa55 	bl	801d260 <__kernel_sin>
 801adb6:	ec53 2b10 	vmov	r2, r3, d0
 801adba:	ee10 0a10 	vmov	r0, s0
 801adbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801adc2:	e7dd      	b.n	801ad80 <sin+0x30>
 801adc4:	f001 fe44 	bl	801ca50 <__kernel_cos>
 801adc8:	e7f5      	b.n	801adb6 <sin+0x66>
 801adca:	bf00      	nop
 801adcc:	f3af 8000 	nop.w
	...
 801add8:	3fe921fb 	.word	0x3fe921fb
 801addc:	7fefffff 	.word	0x7fefffff

0801ade0 <asin>:
 801ade0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ade2:	ed2d 8b02 	vpush	{d8}
 801ade6:	4e26      	ldr	r6, [pc, #152]	; (801ae80 <asin+0xa0>)
 801ade8:	b08b      	sub	sp, #44	; 0x2c
 801adea:	ec55 4b10 	vmov	r4, r5, d0
 801adee:	f000 fa77 	bl	801b2e0 <__ieee754_asin>
 801adf2:	f996 3000 	ldrsb.w	r3, [r6]
 801adf6:	eeb0 8a40 	vmov.f32	s16, s0
 801adfa:	eef0 8a60 	vmov.f32	s17, s1
 801adfe:	3301      	adds	r3, #1
 801ae00:	d036      	beq.n	801ae70 <asin+0x90>
 801ae02:	4622      	mov	r2, r4
 801ae04:	462b      	mov	r3, r5
 801ae06:	4620      	mov	r0, r4
 801ae08:	4629      	mov	r1, r5
 801ae0a:	f7e5 fe9f 	bl	8000b4c <__aeabi_dcmpun>
 801ae0e:	4607      	mov	r7, r0
 801ae10:	bb70      	cbnz	r0, 801ae70 <asin+0x90>
 801ae12:	ec45 4b10 	vmov	d0, r4, r5
 801ae16:	f002 fc7f 	bl	801d718 <fabs>
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	4b19      	ldr	r3, [pc, #100]	; (801ae84 <asin+0xa4>)
 801ae1e:	ec51 0b10 	vmov	r0, r1, d0
 801ae22:	f7e5 fe89 	bl	8000b38 <__aeabi_dcmpgt>
 801ae26:	b318      	cbz	r0, 801ae70 <asin+0x90>
 801ae28:	2301      	movs	r3, #1
 801ae2a:	9300      	str	r3, [sp, #0]
 801ae2c:	4816      	ldr	r0, [pc, #88]	; (801ae88 <asin+0xa8>)
 801ae2e:	4b17      	ldr	r3, [pc, #92]	; (801ae8c <asin+0xac>)
 801ae30:	9301      	str	r3, [sp, #4]
 801ae32:	9708      	str	r7, [sp, #32]
 801ae34:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801ae38:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ae3c:	f002 fd08 	bl	801d850 <nan>
 801ae40:	f996 3000 	ldrsb.w	r3, [r6]
 801ae44:	2b02      	cmp	r3, #2
 801ae46:	ed8d 0b06 	vstr	d0, [sp, #24]
 801ae4a:	d104      	bne.n	801ae56 <asin+0x76>
 801ae4c:	f7fc f946 	bl	80170dc <__errno>
 801ae50:	2321      	movs	r3, #33	; 0x21
 801ae52:	6003      	str	r3, [r0, #0]
 801ae54:	e004      	b.n	801ae60 <asin+0x80>
 801ae56:	4668      	mov	r0, sp
 801ae58:	f002 fcf6 	bl	801d848 <matherr>
 801ae5c:	2800      	cmp	r0, #0
 801ae5e:	d0f5      	beq.n	801ae4c <asin+0x6c>
 801ae60:	9b08      	ldr	r3, [sp, #32]
 801ae62:	b11b      	cbz	r3, 801ae6c <asin+0x8c>
 801ae64:	f7fc f93a 	bl	80170dc <__errno>
 801ae68:	9b08      	ldr	r3, [sp, #32]
 801ae6a:	6003      	str	r3, [r0, #0]
 801ae6c:	ed9d 8b06 	vldr	d8, [sp, #24]
 801ae70:	eeb0 0a48 	vmov.f32	s0, s16
 801ae74:	eef0 0a68 	vmov.f32	s1, s17
 801ae78:	b00b      	add	sp, #44	; 0x2c
 801ae7a:	ecbd 8b02 	vpop	{d8}
 801ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae80:	200003a4 	.word	0x200003a4
 801ae84:	3ff00000 	.word	0x3ff00000
 801ae88:	0801e479 	.word	0x0801e479
 801ae8c:	0801e586 	.word	0x0801e586

0801ae90 <atan2>:
 801ae90:	f000 bc36 	b.w	801b700 <__ieee754_atan2>

0801ae94 <fmod>:
 801ae94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae98:	ed2d 8b02 	vpush	{d8}
 801ae9c:	b08b      	sub	sp, #44	; 0x2c
 801ae9e:	ec55 4b10 	vmov	r4, r5, d0
 801aea2:	ec57 6b11 	vmov	r6, r7, d1
 801aea6:	f000 fd09 	bl	801b8bc <__ieee754_fmod>
 801aeaa:	4b2a      	ldr	r3, [pc, #168]	; (801af54 <fmod+0xc0>)
 801aeac:	eeb0 8a40 	vmov.f32	s16, s0
 801aeb0:	eef0 8a60 	vmov.f32	s17, s1
 801aeb4:	f993 8000 	ldrsb.w	r8, [r3]
 801aeb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 801aebc:	d030      	beq.n	801af20 <fmod+0x8c>
 801aebe:	4632      	mov	r2, r6
 801aec0:	463b      	mov	r3, r7
 801aec2:	4630      	mov	r0, r6
 801aec4:	4639      	mov	r1, r7
 801aec6:	f7e5 fe41 	bl	8000b4c <__aeabi_dcmpun>
 801aeca:	bb48      	cbnz	r0, 801af20 <fmod+0x8c>
 801aecc:	4622      	mov	r2, r4
 801aece:	462b      	mov	r3, r5
 801aed0:	4620      	mov	r0, r4
 801aed2:	4629      	mov	r1, r5
 801aed4:	f7e5 fe3a 	bl	8000b4c <__aeabi_dcmpun>
 801aed8:	4681      	mov	r9, r0
 801aeda:	bb08      	cbnz	r0, 801af20 <fmod+0x8c>
 801aedc:	2200      	movs	r2, #0
 801aede:	2300      	movs	r3, #0
 801aee0:	4630      	mov	r0, r6
 801aee2:	4639      	mov	r1, r7
 801aee4:	f7e5 fe00 	bl	8000ae8 <__aeabi_dcmpeq>
 801aee8:	b1d0      	cbz	r0, 801af20 <fmod+0x8c>
 801aeea:	2301      	movs	r3, #1
 801aeec:	9300      	str	r3, [sp, #0]
 801aeee:	4b1a      	ldr	r3, [pc, #104]	; (801af58 <fmod+0xc4>)
 801aef0:	9301      	str	r3, [sp, #4]
 801aef2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801aef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801aefa:	f8cd 9020 	str.w	r9, [sp, #32]
 801aefe:	f1b8 0f00 	cmp.w	r8, #0
 801af02:	d116      	bne.n	801af32 <fmod+0x9e>
 801af04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af08:	4668      	mov	r0, sp
 801af0a:	f002 fc9d 	bl	801d848 <matherr>
 801af0e:	b1d8      	cbz	r0, 801af48 <fmod+0xb4>
 801af10:	9b08      	ldr	r3, [sp, #32]
 801af12:	b11b      	cbz	r3, 801af1c <fmod+0x88>
 801af14:	f7fc f8e2 	bl	80170dc <__errno>
 801af18:	9b08      	ldr	r3, [sp, #32]
 801af1a:	6003      	str	r3, [r0, #0]
 801af1c:	ed9d 8b06 	vldr	d8, [sp, #24]
 801af20:	eeb0 0a48 	vmov.f32	s0, s16
 801af24:	eef0 0a68 	vmov.f32	s1, s17
 801af28:	b00b      	add	sp, #44	; 0x2c
 801af2a:	ecbd 8b02 	vpop	{d8}
 801af2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af32:	2200      	movs	r2, #0
 801af34:	2300      	movs	r3, #0
 801af36:	4610      	mov	r0, r2
 801af38:	4619      	mov	r1, r3
 801af3a:	f7e5 fc97 	bl	800086c <__aeabi_ddiv>
 801af3e:	f1b8 0f02 	cmp.w	r8, #2
 801af42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801af46:	d1df      	bne.n	801af08 <fmod+0x74>
 801af48:	f7fc f8c8 	bl	80170dc <__errno>
 801af4c:	2321      	movs	r3, #33	; 0x21
 801af4e:	6003      	str	r3, [r0, #0]
 801af50:	e7de      	b.n	801af10 <fmod+0x7c>
 801af52:	bf00      	nop
 801af54:	200003a4 	.word	0x200003a4
 801af58:	0801e58b 	.word	0x0801e58b

0801af5c <pow>:
 801af5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af60:	ed2d 8b04 	vpush	{d8-d9}
 801af64:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b238 <pow+0x2dc>
 801af68:	b08d      	sub	sp, #52	; 0x34
 801af6a:	ec57 6b10 	vmov	r6, r7, d0
 801af6e:	ec55 4b11 	vmov	r4, r5, d1
 801af72:	f000 fdb5 	bl	801bae0 <__ieee754_pow>
 801af76:	f999 3000 	ldrsb.w	r3, [r9]
 801af7a:	9300      	str	r3, [sp, #0]
 801af7c:	3301      	adds	r3, #1
 801af7e:	eeb0 8a40 	vmov.f32	s16, s0
 801af82:	eef0 8a60 	vmov.f32	s17, s1
 801af86:	46c8      	mov	r8, r9
 801af88:	d05f      	beq.n	801b04a <pow+0xee>
 801af8a:	4622      	mov	r2, r4
 801af8c:	462b      	mov	r3, r5
 801af8e:	4620      	mov	r0, r4
 801af90:	4629      	mov	r1, r5
 801af92:	f7e5 fddb 	bl	8000b4c <__aeabi_dcmpun>
 801af96:	4683      	mov	fp, r0
 801af98:	2800      	cmp	r0, #0
 801af9a:	d156      	bne.n	801b04a <pow+0xee>
 801af9c:	4632      	mov	r2, r6
 801af9e:	463b      	mov	r3, r7
 801afa0:	4630      	mov	r0, r6
 801afa2:	4639      	mov	r1, r7
 801afa4:	f7e5 fdd2 	bl	8000b4c <__aeabi_dcmpun>
 801afa8:	9001      	str	r0, [sp, #4]
 801afaa:	b1e8      	cbz	r0, 801afe8 <pow+0x8c>
 801afac:	2200      	movs	r2, #0
 801afae:	2300      	movs	r3, #0
 801afb0:	4620      	mov	r0, r4
 801afb2:	4629      	mov	r1, r5
 801afb4:	f7e5 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 801afb8:	2800      	cmp	r0, #0
 801afba:	d046      	beq.n	801b04a <pow+0xee>
 801afbc:	2301      	movs	r3, #1
 801afbe:	9302      	str	r3, [sp, #8]
 801afc0:	4b96      	ldr	r3, [pc, #600]	; (801b21c <pow+0x2c0>)
 801afc2:	9303      	str	r3, [sp, #12]
 801afc4:	4b96      	ldr	r3, [pc, #600]	; (801b220 <pow+0x2c4>)
 801afc6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801afca:	2200      	movs	r2, #0
 801afcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801afd0:	9b00      	ldr	r3, [sp, #0]
 801afd2:	2b02      	cmp	r3, #2
 801afd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801afd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801afdc:	d033      	beq.n	801b046 <pow+0xea>
 801afde:	a802      	add	r0, sp, #8
 801afe0:	f002 fc32 	bl	801d848 <matherr>
 801afe4:	bb48      	cbnz	r0, 801b03a <pow+0xde>
 801afe6:	e05d      	b.n	801b0a4 <pow+0x148>
 801afe8:	f04f 0a00 	mov.w	sl, #0
 801afec:	f04f 0b00 	mov.w	fp, #0
 801aff0:	4652      	mov	r2, sl
 801aff2:	465b      	mov	r3, fp
 801aff4:	4630      	mov	r0, r6
 801aff6:	4639      	mov	r1, r7
 801aff8:	f7e5 fd76 	bl	8000ae8 <__aeabi_dcmpeq>
 801affc:	ec4b ab19 	vmov	d9, sl, fp
 801b000:	2800      	cmp	r0, #0
 801b002:	d054      	beq.n	801b0ae <pow+0x152>
 801b004:	4652      	mov	r2, sl
 801b006:	465b      	mov	r3, fp
 801b008:	4620      	mov	r0, r4
 801b00a:	4629      	mov	r1, r5
 801b00c:	f7e5 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 801b010:	4680      	mov	r8, r0
 801b012:	b318      	cbz	r0, 801b05c <pow+0x100>
 801b014:	2301      	movs	r3, #1
 801b016:	9302      	str	r3, [sp, #8]
 801b018:	4b80      	ldr	r3, [pc, #512]	; (801b21c <pow+0x2c0>)
 801b01a:	9303      	str	r3, [sp, #12]
 801b01c:	9b01      	ldr	r3, [sp, #4]
 801b01e:	930a      	str	r3, [sp, #40]	; 0x28
 801b020:	9b00      	ldr	r3, [sp, #0]
 801b022:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b026:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b02a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d0d5      	beq.n	801afde <pow+0x82>
 801b032:	4b7b      	ldr	r3, [pc, #492]	; (801b220 <pow+0x2c4>)
 801b034:	2200      	movs	r2, #0
 801b036:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b03c:	b11b      	cbz	r3, 801b046 <pow+0xea>
 801b03e:	f7fc f84d 	bl	80170dc <__errno>
 801b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b044:	6003      	str	r3, [r0, #0]
 801b046:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b04a:	eeb0 0a48 	vmov.f32	s0, s16
 801b04e:	eef0 0a68 	vmov.f32	s1, s17
 801b052:	b00d      	add	sp, #52	; 0x34
 801b054:	ecbd 8b04 	vpop	{d8-d9}
 801b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b05c:	ec45 4b10 	vmov	d0, r4, r5
 801b060:	f002 fb63 	bl	801d72a <finite>
 801b064:	2800      	cmp	r0, #0
 801b066:	d0f0      	beq.n	801b04a <pow+0xee>
 801b068:	4652      	mov	r2, sl
 801b06a:	465b      	mov	r3, fp
 801b06c:	4620      	mov	r0, r4
 801b06e:	4629      	mov	r1, r5
 801b070:	f7e5 fd44 	bl	8000afc <__aeabi_dcmplt>
 801b074:	2800      	cmp	r0, #0
 801b076:	d0e8      	beq.n	801b04a <pow+0xee>
 801b078:	2301      	movs	r3, #1
 801b07a:	9302      	str	r3, [sp, #8]
 801b07c:	4b67      	ldr	r3, [pc, #412]	; (801b21c <pow+0x2c0>)
 801b07e:	9303      	str	r3, [sp, #12]
 801b080:	f999 3000 	ldrsb.w	r3, [r9]
 801b084:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b088:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b08c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b090:	b913      	cbnz	r3, 801b098 <pow+0x13c>
 801b092:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b096:	e7a2      	b.n	801afde <pow+0x82>
 801b098:	4962      	ldr	r1, [pc, #392]	; (801b224 <pow+0x2c8>)
 801b09a:	2000      	movs	r0, #0
 801b09c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b0a0:	2b02      	cmp	r3, #2
 801b0a2:	d19c      	bne.n	801afde <pow+0x82>
 801b0a4:	f7fc f81a 	bl	80170dc <__errno>
 801b0a8:	2321      	movs	r3, #33	; 0x21
 801b0aa:	6003      	str	r3, [r0, #0]
 801b0ac:	e7c5      	b.n	801b03a <pow+0xde>
 801b0ae:	eeb0 0a48 	vmov.f32	s0, s16
 801b0b2:	eef0 0a68 	vmov.f32	s1, s17
 801b0b6:	f002 fb38 	bl	801d72a <finite>
 801b0ba:	9000      	str	r0, [sp, #0]
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	f040 8081 	bne.w	801b1c4 <pow+0x268>
 801b0c2:	ec47 6b10 	vmov	d0, r6, r7
 801b0c6:	f002 fb30 	bl	801d72a <finite>
 801b0ca:	2800      	cmp	r0, #0
 801b0cc:	d07a      	beq.n	801b1c4 <pow+0x268>
 801b0ce:	ec45 4b10 	vmov	d0, r4, r5
 801b0d2:	f002 fb2a 	bl	801d72a <finite>
 801b0d6:	2800      	cmp	r0, #0
 801b0d8:	d074      	beq.n	801b1c4 <pow+0x268>
 801b0da:	ec53 2b18 	vmov	r2, r3, d8
 801b0de:	ee18 0a10 	vmov	r0, s16
 801b0e2:	4619      	mov	r1, r3
 801b0e4:	f7e5 fd32 	bl	8000b4c <__aeabi_dcmpun>
 801b0e8:	f999 9000 	ldrsb.w	r9, [r9]
 801b0ec:	4b4b      	ldr	r3, [pc, #300]	; (801b21c <pow+0x2c0>)
 801b0ee:	b1b0      	cbz	r0, 801b11e <pow+0x1c2>
 801b0f0:	2201      	movs	r2, #1
 801b0f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b0f6:	9b00      	ldr	r3, [sp, #0]
 801b0f8:	930a      	str	r3, [sp, #40]	; 0x28
 801b0fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b0fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b102:	f1b9 0f00 	cmp.w	r9, #0
 801b106:	d0c4      	beq.n	801b092 <pow+0x136>
 801b108:	4652      	mov	r2, sl
 801b10a:	465b      	mov	r3, fp
 801b10c:	4650      	mov	r0, sl
 801b10e:	4659      	mov	r1, fp
 801b110:	f7e5 fbac 	bl	800086c <__aeabi_ddiv>
 801b114:	f1b9 0f02 	cmp.w	r9, #2
 801b118:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b11c:	e7c1      	b.n	801b0a2 <pow+0x146>
 801b11e:	2203      	movs	r2, #3
 801b120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b124:	900a      	str	r0, [sp, #40]	; 0x28
 801b126:	4629      	mov	r1, r5
 801b128:	4620      	mov	r0, r4
 801b12a:	2200      	movs	r2, #0
 801b12c:	4b3e      	ldr	r3, [pc, #248]	; (801b228 <pow+0x2cc>)
 801b12e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b132:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b136:	f7e5 fa6f 	bl	8000618 <__aeabi_dmul>
 801b13a:	4604      	mov	r4, r0
 801b13c:	460d      	mov	r5, r1
 801b13e:	f1b9 0f00 	cmp.w	r9, #0
 801b142:	d124      	bne.n	801b18e <pow+0x232>
 801b144:	4b39      	ldr	r3, [pc, #228]	; (801b22c <pow+0x2d0>)
 801b146:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b14a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b14e:	4630      	mov	r0, r6
 801b150:	4652      	mov	r2, sl
 801b152:	465b      	mov	r3, fp
 801b154:	4639      	mov	r1, r7
 801b156:	f7e5 fcd1 	bl	8000afc <__aeabi_dcmplt>
 801b15a:	2800      	cmp	r0, #0
 801b15c:	d056      	beq.n	801b20c <pow+0x2b0>
 801b15e:	ec45 4b10 	vmov	d0, r4, r5
 801b162:	f002 fb7d 	bl	801d860 <rint>
 801b166:	4622      	mov	r2, r4
 801b168:	462b      	mov	r3, r5
 801b16a:	ec51 0b10 	vmov	r0, r1, d0
 801b16e:	f7e5 fcbb 	bl	8000ae8 <__aeabi_dcmpeq>
 801b172:	b920      	cbnz	r0, 801b17e <pow+0x222>
 801b174:	4b2e      	ldr	r3, [pc, #184]	; (801b230 <pow+0x2d4>)
 801b176:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b17a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b17e:	f998 3000 	ldrsb.w	r3, [r8]
 801b182:	2b02      	cmp	r3, #2
 801b184:	d142      	bne.n	801b20c <pow+0x2b0>
 801b186:	f7fb ffa9 	bl	80170dc <__errno>
 801b18a:	2322      	movs	r3, #34	; 0x22
 801b18c:	e78d      	b.n	801b0aa <pow+0x14e>
 801b18e:	4b29      	ldr	r3, [pc, #164]	; (801b234 <pow+0x2d8>)
 801b190:	2200      	movs	r2, #0
 801b192:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b196:	4630      	mov	r0, r6
 801b198:	4652      	mov	r2, sl
 801b19a:	465b      	mov	r3, fp
 801b19c:	4639      	mov	r1, r7
 801b19e:	f7e5 fcad 	bl	8000afc <__aeabi_dcmplt>
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	d0eb      	beq.n	801b17e <pow+0x222>
 801b1a6:	ec45 4b10 	vmov	d0, r4, r5
 801b1aa:	f002 fb59 	bl	801d860 <rint>
 801b1ae:	4622      	mov	r2, r4
 801b1b0:	462b      	mov	r3, r5
 801b1b2:	ec51 0b10 	vmov	r0, r1, d0
 801b1b6:	f7e5 fc97 	bl	8000ae8 <__aeabi_dcmpeq>
 801b1ba:	2800      	cmp	r0, #0
 801b1bc:	d1df      	bne.n	801b17e <pow+0x222>
 801b1be:	2200      	movs	r2, #0
 801b1c0:	4b18      	ldr	r3, [pc, #96]	; (801b224 <pow+0x2c8>)
 801b1c2:	e7da      	b.n	801b17a <pow+0x21e>
 801b1c4:	2200      	movs	r2, #0
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	ec51 0b18 	vmov	r0, r1, d8
 801b1cc:	f7e5 fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 801b1d0:	2800      	cmp	r0, #0
 801b1d2:	f43f af3a 	beq.w	801b04a <pow+0xee>
 801b1d6:	ec47 6b10 	vmov	d0, r6, r7
 801b1da:	f002 faa6 	bl	801d72a <finite>
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	f43f af33 	beq.w	801b04a <pow+0xee>
 801b1e4:	ec45 4b10 	vmov	d0, r4, r5
 801b1e8:	f002 fa9f 	bl	801d72a <finite>
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	f43f af2c 	beq.w	801b04a <pow+0xee>
 801b1f2:	2304      	movs	r3, #4
 801b1f4:	9302      	str	r3, [sp, #8]
 801b1f6:	4b09      	ldr	r3, [pc, #36]	; (801b21c <pow+0x2c0>)
 801b1f8:	9303      	str	r3, [sp, #12]
 801b1fa:	2300      	movs	r3, #0
 801b1fc:	930a      	str	r3, [sp, #40]	; 0x28
 801b1fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b202:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b206:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b20a:	e7b8      	b.n	801b17e <pow+0x222>
 801b20c:	a802      	add	r0, sp, #8
 801b20e:	f002 fb1b 	bl	801d848 <matherr>
 801b212:	2800      	cmp	r0, #0
 801b214:	f47f af11 	bne.w	801b03a <pow+0xde>
 801b218:	e7b5      	b.n	801b186 <pow+0x22a>
 801b21a:	bf00      	nop
 801b21c:	0801e590 	.word	0x0801e590
 801b220:	3ff00000 	.word	0x3ff00000
 801b224:	fff00000 	.word	0xfff00000
 801b228:	3fe00000 	.word	0x3fe00000
 801b22c:	47efffff 	.word	0x47efffff
 801b230:	c7efffff 	.word	0xc7efffff
 801b234:	7ff00000 	.word	0x7ff00000
 801b238:	200003a4 	.word	0x200003a4

0801b23c <sqrtf>:
 801b23c:	b510      	push	{r4, lr}
 801b23e:	ed2d 8b02 	vpush	{d8}
 801b242:	b08a      	sub	sp, #40	; 0x28
 801b244:	eeb0 8a40 	vmov.f32	s16, s0
 801b248:	f001 fbfc 	bl	801ca44 <__ieee754_sqrtf>
 801b24c:	4b21      	ldr	r3, [pc, #132]	; (801b2d4 <sqrtf+0x98>)
 801b24e:	f993 4000 	ldrsb.w	r4, [r3]
 801b252:	1c63      	adds	r3, r4, #1
 801b254:	d02c      	beq.n	801b2b0 <sqrtf+0x74>
 801b256:	eeb4 8a48 	vcmp.f32	s16, s16
 801b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b25e:	d627      	bvs.n	801b2b0 <sqrtf+0x74>
 801b260:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b268:	d522      	bpl.n	801b2b0 <sqrtf+0x74>
 801b26a:	2301      	movs	r3, #1
 801b26c:	9300      	str	r3, [sp, #0]
 801b26e:	4b1a      	ldr	r3, [pc, #104]	; (801b2d8 <sqrtf+0x9c>)
 801b270:	9301      	str	r3, [sp, #4]
 801b272:	ee18 0a10 	vmov	r0, s16
 801b276:	2300      	movs	r3, #0
 801b278:	9308      	str	r3, [sp, #32]
 801b27a:	f7e5 f975 	bl	8000568 <__aeabi_f2d>
 801b27e:	2200      	movs	r2, #0
 801b280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b288:	2300      	movs	r3, #0
 801b28a:	b9ac      	cbnz	r4, 801b2b8 <sqrtf+0x7c>
 801b28c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b290:	4668      	mov	r0, sp
 801b292:	f002 fad9 	bl	801d848 <matherr>
 801b296:	b1b8      	cbz	r0, 801b2c8 <sqrtf+0x8c>
 801b298:	9b08      	ldr	r3, [sp, #32]
 801b29a:	b11b      	cbz	r3, 801b2a4 <sqrtf+0x68>
 801b29c:	f7fb ff1e 	bl	80170dc <__errno>
 801b2a0:	9b08      	ldr	r3, [sp, #32]
 801b2a2:	6003      	str	r3, [r0, #0]
 801b2a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b2a8:	f7e5 fcae 	bl	8000c08 <__aeabi_d2f>
 801b2ac:	ee00 0a10 	vmov	s0, r0
 801b2b0:	b00a      	add	sp, #40	; 0x28
 801b2b2:	ecbd 8b02 	vpop	{d8}
 801b2b6:	bd10      	pop	{r4, pc}
 801b2b8:	4610      	mov	r0, r2
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	f7e5 fad6 	bl	800086c <__aeabi_ddiv>
 801b2c0:	2c02      	cmp	r4, #2
 801b2c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b2c6:	d1e3      	bne.n	801b290 <sqrtf+0x54>
 801b2c8:	f7fb ff08 	bl	80170dc <__errno>
 801b2cc:	2321      	movs	r3, #33	; 0x21
 801b2ce:	6003      	str	r3, [r0, #0]
 801b2d0:	e7e2      	b.n	801b298 <sqrtf+0x5c>
 801b2d2:	bf00      	nop
 801b2d4:	200003a4 	.word	0x200003a4
 801b2d8:	0801e594 	.word	0x0801e594
 801b2dc:	00000000 	.word	0x00000000

0801b2e0 <__ieee754_asin>:
 801b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e4:	ec55 4b10 	vmov	r4, r5, d0
 801b2e8:	4bcb      	ldr	r3, [pc, #812]	; (801b618 <__ieee754_asin+0x338>)
 801b2ea:	b087      	sub	sp, #28
 801b2ec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801b2f0:	429f      	cmp	r7, r3
 801b2f2:	9501      	str	r5, [sp, #4]
 801b2f4:	dd31      	ble.n	801b35a <__ieee754_asin+0x7a>
 801b2f6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801b2fa:	ee10 3a10 	vmov	r3, s0
 801b2fe:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801b302:	433b      	orrs	r3, r7
 801b304:	d117      	bne.n	801b336 <__ieee754_asin+0x56>
 801b306:	a3aa      	add	r3, pc, #680	; (adr r3, 801b5b0 <__ieee754_asin+0x2d0>)
 801b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b30c:	ee10 0a10 	vmov	r0, s0
 801b310:	4629      	mov	r1, r5
 801b312:	f7e5 f981 	bl	8000618 <__aeabi_dmul>
 801b316:	a3a8      	add	r3, pc, #672	; (adr r3, 801b5b8 <__ieee754_asin+0x2d8>)
 801b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b31c:	4606      	mov	r6, r0
 801b31e:	460f      	mov	r7, r1
 801b320:	4620      	mov	r0, r4
 801b322:	4629      	mov	r1, r5
 801b324:	f7e5 f978 	bl	8000618 <__aeabi_dmul>
 801b328:	4602      	mov	r2, r0
 801b32a:	460b      	mov	r3, r1
 801b32c:	4630      	mov	r0, r6
 801b32e:	4639      	mov	r1, r7
 801b330:	f7e4 ffbc 	bl	80002ac <__adddf3>
 801b334:	e00a      	b.n	801b34c <__ieee754_asin+0x6c>
 801b336:	ee10 2a10 	vmov	r2, s0
 801b33a:	462b      	mov	r3, r5
 801b33c:	4620      	mov	r0, r4
 801b33e:	4629      	mov	r1, r5
 801b340:	f7e4 ffb2 	bl	80002a8 <__aeabi_dsub>
 801b344:	4602      	mov	r2, r0
 801b346:	460b      	mov	r3, r1
 801b348:	f7e5 fa90 	bl	800086c <__aeabi_ddiv>
 801b34c:	4604      	mov	r4, r0
 801b34e:	460d      	mov	r5, r1
 801b350:	ec45 4b10 	vmov	d0, r4, r5
 801b354:	b007      	add	sp, #28
 801b356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b35a:	4bb0      	ldr	r3, [pc, #704]	; (801b61c <__ieee754_asin+0x33c>)
 801b35c:	429f      	cmp	r7, r3
 801b35e:	dc11      	bgt.n	801b384 <__ieee754_asin+0xa4>
 801b360:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801b364:	f280 80ae 	bge.w	801b4c4 <__ieee754_asin+0x1e4>
 801b368:	a395      	add	r3, pc, #596	; (adr r3, 801b5c0 <__ieee754_asin+0x2e0>)
 801b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36e:	ee10 0a10 	vmov	r0, s0
 801b372:	4629      	mov	r1, r5
 801b374:	f7e4 ff9a 	bl	80002ac <__adddf3>
 801b378:	2200      	movs	r2, #0
 801b37a:	4ba9      	ldr	r3, [pc, #676]	; (801b620 <__ieee754_asin+0x340>)
 801b37c:	f7e5 fbdc 	bl	8000b38 <__aeabi_dcmpgt>
 801b380:	2800      	cmp	r0, #0
 801b382:	d1e5      	bne.n	801b350 <__ieee754_asin+0x70>
 801b384:	ec45 4b10 	vmov	d0, r4, r5
 801b388:	f002 f9c6 	bl	801d718 <fabs>
 801b38c:	2000      	movs	r0, #0
 801b38e:	ec53 2b10 	vmov	r2, r3, d0
 801b392:	49a3      	ldr	r1, [pc, #652]	; (801b620 <__ieee754_asin+0x340>)
 801b394:	f7e4 ff88 	bl	80002a8 <__aeabi_dsub>
 801b398:	2200      	movs	r2, #0
 801b39a:	4ba2      	ldr	r3, [pc, #648]	; (801b624 <__ieee754_asin+0x344>)
 801b39c:	f7e5 f93c 	bl	8000618 <__aeabi_dmul>
 801b3a0:	a389      	add	r3, pc, #548	; (adr r3, 801b5c8 <__ieee754_asin+0x2e8>)
 801b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3a6:	4604      	mov	r4, r0
 801b3a8:	460d      	mov	r5, r1
 801b3aa:	f7e5 f935 	bl	8000618 <__aeabi_dmul>
 801b3ae:	a388      	add	r3, pc, #544	; (adr r3, 801b5d0 <__ieee754_asin+0x2f0>)
 801b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b4:	f7e4 ff7a 	bl	80002ac <__adddf3>
 801b3b8:	4622      	mov	r2, r4
 801b3ba:	462b      	mov	r3, r5
 801b3bc:	f7e5 f92c 	bl	8000618 <__aeabi_dmul>
 801b3c0:	a385      	add	r3, pc, #532	; (adr r3, 801b5d8 <__ieee754_asin+0x2f8>)
 801b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c6:	f7e4 ff6f 	bl	80002a8 <__aeabi_dsub>
 801b3ca:	4622      	mov	r2, r4
 801b3cc:	462b      	mov	r3, r5
 801b3ce:	f7e5 f923 	bl	8000618 <__aeabi_dmul>
 801b3d2:	a383      	add	r3, pc, #524	; (adr r3, 801b5e0 <__ieee754_asin+0x300>)
 801b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d8:	f7e4 ff68 	bl	80002ac <__adddf3>
 801b3dc:	4622      	mov	r2, r4
 801b3de:	462b      	mov	r3, r5
 801b3e0:	f7e5 f91a 	bl	8000618 <__aeabi_dmul>
 801b3e4:	a380      	add	r3, pc, #512	; (adr r3, 801b5e8 <__ieee754_asin+0x308>)
 801b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3ea:	f7e4 ff5d 	bl	80002a8 <__aeabi_dsub>
 801b3ee:	4622      	mov	r2, r4
 801b3f0:	462b      	mov	r3, r5
 801b3f2:	f7e5 f911 	bl	8000618 <__aeabi_dmul>
 801b3f6:	a37e      	add	r3, pc, #504	; (adr r3, 801b5f0 <__ieee754_asin+0x310>)
 801b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3fc:	f7e4 ff56 	bl	80002ac <__adddf3>
 801b400:	4622      	mov	r2, r4
 801b402:	462b      	mov	r3, r5
 801b404:	f7e5 f908 	bl	8000618 <__aeabi_dmul>
 801b408:	a37b      	add	r3, pc, #492	; (adr r3, 801b5f8 <__ieee754_asin+0x318>)
 801b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b40e:	4680      	mov	r8, r0
 801b410:	4689      	mov	r9, r1
 801b412:	4620      	mov	r0, r4
 801b414:	4629      	mov	r1, r5
 801b416:	f7e5 f8ff 	bl	8000618 <__aeabi_dmul>
 801b41a:	a379      	add	r3, pc, #484	; (adr r3, 801b600 <__ieee754_asin+0x320>)
 801b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b420:	f7e4 ff42 	bl	80002a8 <__aeabi_dsub>
 801b424:	4622      	mov	r2, r4
 801b426:	462b      	mov	r3, r5
 801b428:	f7e5 f8f6 	bl	8000618 <__aeabi_dmul>
 801b42c:	a376      	add	r3, pc, #472	; (adr r3, 801b608 <__ieee754_asin+0x328>)
 801b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b432:	f7e4 ff3b 	bl	80002ac <__adddf3>
 801b436:	4622      	mov	r2, r4
 801b438:	462b      	mov	r3, r5
 801b43a:	f7e5 f8ed 	bl	8000618 <__aeabi_dmul>
 801b43e:	a374      	add	r3, pc, #464	; (adr r3, 801b610 <__ieee754_asin+0x330>)
 801b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b444:	f7e4 ff30 	bl	80002a8 <__aeabi_dsub>
 801b448:	4622      	mov	r2, r4
 801b44a:	462b      	mov	r3, r5
 801b44c:	f7e5 f8e4 	bl	8000618 <__aeabi_dmul>
 801b450:	4b73      	ldr	r3, [pc, #460]	; (801b620 <__ieee754_asin+0x340>)
 801b452:	2200      	movs	r2, #0
 801b454:	f7e4 ff2a 	bl	80002ac <__adddf3>
 801b458:	ec45 4b10 	vmov	d0, r4, r5
 801b45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b460:	f001 fa40 	bl	801c8e4 <__ieee754_sqrt>
 801b464:	4b70      	ldr	r3, [pc, #448]	; (801b628 <__ieee754_asin+0x348>)
 801b466:	429f      	cmp	r7, r3
 801b468:	ec5b ab10 	vmov	sl, fp, d0
 801b46c:	f340 80de 	ble.w	801b62c <__ieee754_asin+0x34c>
 801b470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b474:	4640      	mov	r0, r8
 801b476:	4649      	mov	r1, r9
 801b478:	f7e5 f9f8 	bl	800086c <__aeabi_ddiv>
 801b47c:	4652      	mov	r2, sl
 801b47e:	465b      	mov	r3, fp
 801b480:	f7e5 f8ca 	bl	8000618 <__aeabi_dmul>
 801b484:	4652      	mov	r2, sl
 801b486:	465b      	mov	r3, fp
 801b488:	f7e4 ff10 	bl	80002ac <__adddf3>
 801b48c:	4602      	mov	r2, r0
 801b48e:	460b      	mov	r3, r1
 801b490:	f7e4 ff0c 	bl	80002ac <__adddf3>
 801b494:	a348      	add	r3, pc, #288	; (adr r3, 801b5b8 <__ieee754_asin+0x2d8>)
 801b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b49a:	f7e4 ff05 	bl	80002a8 <__aeabi_dsub>
 801b49e:	4602      	mov	r2, r0
 801b4a0:	460b      	mov	r3, r1
 801b4a2:	a143      	add	r1, pc, #268	; (adr r1, 801b5b0 <__ieee754_asin+0x2d0>)
 801b4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b4a8:	f7e4 fefe 	bl	80002a8 <__aeabi_dsub>
 801b4ac:	9b01      	ldr	r3, [sp, #4]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	bfdc      	itt	le
 801b4b2:	4602      	movle	r2, r0
 801b4b4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801b4b8:	4604      	mov	r4, r0
 801b4ba:	460d      	mov	r5, r1
 801b4bc:	bfdc      	itt	le
 801b4be:	4614      	movle	r4, r2
 801b4c0:	461d      	movle	r5, r3
 801b4c2:	e745      	b.n	801b350 <__ieee754_asin+0x70>
 801b4c4:	ee10 2a10 	vmov	r2, s0
 801b4c8:	ee10 0a10 	vmov	r0, s0
 801b4cc:	462b      	mov	r3, r5
 801b4ce:	4629      	mov	r1, r5
 801b4d0:	f7e5 f8a2 	bl	8000618 <__aeabi_dmul>
 801b4d4:	a33c      	add	r3, pc, #240	; (adr r3, 801b5c8 <__ieee754_asin+0x2e8>)
 801b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4da:	4606      	mov	r6, r0
 801b4dc:	460f      	mov	r7, r1
 801b4de:	f7e5 f89b 	bl	8000618 <__aeabi_dmul>
 801b4e2:	a33b      	add	r3, pc, #236	; (adr r3, 801b5d0 <__ieee754_asin+0x2f0>)
 801b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4e8:	f7e4 fee0 	bl	80002ac <__adddf3>
 801b4ec:	4632      	mov	r2, r6
 801b4ee:	463b      	mov	r3, r7
 801b4f0:	f7e5 f892 	bl	8000618 <__aeabi_dmul>
 801b4f4:	a338      	add	r3, pc, #224	; (adr r3, 801b5d8 <__ieee754_asin+0x2f8>)
 801b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4fa:	f7e4 fed5 	bl	80002a8 <__aeabi_dsub>
 801b4fe:	4632      	mov	r2, r6
 801b500:	463b      	mov	r3, r7
 801b502:	f7e5 f889 	bl	8000618 <__aeabi_dmul>
 801b506:	a336      	add	r3, pc, #216	; (adr r3, 801b5e0 <__ieee754_asin+0x300>)
 801b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b50c:	f7e4 fece 	bl	80002ac <__adddf3>
 801b510:	4632      	mov	r2, r6
 801b512:	463b      	mov	r3, r7
 801b514:	f7e5 f880 	bl	8000618 <__aeabi_dmul>
 801b518:	a333      	add	r3, pc, #204	; (adr r3, 801b5e8 <__ieee754_asin+0x308>)
 801b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b51e:	f7e4 fec3 	bl	80002a8 <__aeabi_dsub>
 801b522:	4632      	mov	r2, r6
 801b524:	463b      	mov	r3, r7
 801b526:	f7e5 f877 	bl	8000618 <__aeabi_dmul>
 801b52a:	a331      	add	r3, pc, #196	; (adr r3, 801b5f0 <__ieee754_asin+0x310>)
 801b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b530:	f7e4 febc 	bl	80002ac <__adddf3>
 801b534:	4632      	mov	r2, r6
 801b536:	463b      	mov	r3, r7
 801b538:	f7e5 f86e 	bl	8000618 <__aeabi_dmul>
 801b53c:	a32e      	add	r3, pc, #184	; (adr r3, 801b5f8 <__ieee754_asin+0x318>)
 801b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b542:	4680      	mov	r8, r0
 801b544:	4689      	mov	r9, r1
 801b546:	4630      	mov	r0, r6
 801b548:	4639      	mov	r1, r7
 801b54a:	f7e5 f865 	bl	8000618 <__aeabi_dmul>
 801b54e:	a32c      	add	r3, pc, #176	; (adr r3, 801b600 <__ieee754_asin+0x320>)
 801b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b554:	f7e4 fea8 	bl	80002a8 <__aeabi_dsub>
 801b558:	4632      	mov	r2, r6
 801b55a:	463b      	mov	r3, r7
 801b55c:	f7e5 f85c 	bl	8000618 <__aeabi_dmul>
 801b560:	a329      	add	r3, pc, #164	; (adr r3, 801b608 <__ieee754_asin+0x328>)
 801b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b566:	f7e4 fea1 	bl	80002ac <__adddf3>
 801b56a:	4632      	mov	r2, r6
 801b56c:	463b      	mov	r3, r7
 801b56e:	f7e5 f853 	bl	8000618 <__aeabi_dmul>
 801b572:	a327      	add	r3, pc, #156	; (adr r3, 801b610 <__ieee754_asin+0x330>)
 801b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b578:	f7e4 fe96 	bl	80002a8 <__aeabi_dsub>
 801b57c:	4632      	mov	r2, r6
 801b57e:	463b      	mov	r3, r7
 801b580:	f7e5 f84a 	bl	8000618 <__aeabi_dmul>
 801b584:	2200      	movs	r2, #0
 801b586:	4b26      	ldr	r3, [pc, #152]	; (801b620 <__ieee754_asin+0x340>)
 801b588:	f7e4 fe90 	bl	80002ac <__adddf3>
 801b58c:	4602      	mov	r2, r0
 801b58e:	460b      	mov	r3, r1
 801b590:	4640      	mov	r0, r8
 801b592:	4649      	mov	r1, r9
 801b594:	f7e5 f96a 	bl	800086c <__aeabi_ddiv>
 801b598:	4622      	mov	r2, r4
 801b59a:	462b      	mov	r3, r5
 801b59c:	f7e5 f83c 	bl	8000618 <__aeabi_dmul>
 801b5a0:	4602      	mov	r2, r0
 801b5a2:	460b      	mov	r3, r1
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	4629      	mov	r1, r5
 801b5a8:	e6c2      	b.n	801b330 <__ieee754_asin+0x50>
 801b5aa:	bf00      	nop
 801b5ac:	f3af 8000 	nop.w
 801b5b0:	54442d18 	.word	0x54442d18
 801b5b4:	3ff921fb 	.word	0x3ff921fb
 801b5b8:	33145c07 	.word	0x33145c07
 801b5bc:	3c91a626 	.word	0x3c91a626
 801b5c0:	8800759c 	.word	0x8800759c
 801b5c4:	7e37e43c 	.word	0x7e37e43c
 801b5c8:	0dfdf709 	.word	0x0dfdf709
 801b5cc:	3f023de1 	.word	0x3f023de1
 801b5d0:	7501b288 	.word	0x7501b288
 801b5d4:	3f49efe0 	.word	0x3f49efe0
 801b5d8:	b5688f3b 	.word	0xb5688f3b
 801b5dc:	3fa48228 	.word	0x3fa48228
 801b5e0:	0e884455 	.word	0x0e884455
 801b5e4:	3fc9c155 	.word	0x3fc9c155
 801b5e8:	03eb6f7d 	.word	0x03eb6f7d
 801b5ec:	3fd4d612 	.word	0x3fd4d612
 801b5f0:	55555555 	.word	0x55555555
 801b5f4:	3fc55555 	.word	0x3fc55555
 801b5f8:	b12e9282 	.word	0xb12e9282
 801b5fc:	3fb3b8c5 	.word	0x3fb3b8c5
 801b600:	1b8d0159 	.word	0x1b8d0159
 801b604:	3fe6066c 	.word	0x3fe6066c
 801b608:	9c598ac8 	.word	0x9c598ac8
 801b60c:	40002ae5 	.word	0x40002ae5
 801b610:	1c8a2d4b 	.word	0x1c8a2d4b
 801b614:	40033a27 	.word	0x40033a27
 801b618:	3fefffff 	.word	0x3fefffff
 801b61c:	3fdfffff 	.word	0x3fdfffff
 801b620:	3ff00000 	.word	0x3ff00000
 801b624:	3fe00000 	.word	0x3fe00000
 801b628:	3fef3332 	.word	0x3fef3332
 801b62c:	ee10 2a10 	vmov	r2, s0
 801b630:	ee10 0a10 	vmov	r0, s0
 801b634:	465b      	mov	r3, fp
 801b636:	4659      	mov	r1, fp
 801b638:	f7e4 fe38 	bl	80002ac <__adddf3>
 801b63c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b644:	4640      	mov	r0, r8
 801b646:	4649      	mov	r1, r9
 801b648:	f7e5 f910 	bl	800086c <__aeabi_ddiv>
 801b64c:	4602      	mov	r2, r0
 801b64e:	460b      	mov	r3, r1
 801b650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b654:	f7e4 ffe0 	bl	8000618 <__aeabi_dmul>
 801b658:	2600      	movs	r6, #0
 801b65a:	4680      	mov	r8, r0
 801b65c:	4689      	mov	r9, r1
 801b65e:	4632      	mov	r2, r6
 801b660:	465b      	mov	r3, fp
 801b662:	4630      	mov	r0, r6
 801b664:	4659      	mov	r1, fp
 801b666:	f7e4 ffd7 	bl	8000618 <__aeabi_dmul>
 801b66a:	4602      	mov	r2, r0
 801b66c:	460b      	mov	r3, r1
 801b66e:	4620      	mov	r0, r4
 801b670:	4629      	mov	r1, r5
 801b672:	f7e4 fe19 	bl	80002a8 <__aeabi_dsub>
 801b676:	4632      	mov	r2, r6
 801b678:	4604      	mov	r4, r0
 801b67a:	460d      	mov	r5, r1
 801b67c:	465b      	mov	r3, fp
 801b67e:	4650      	mov	r0, sl
 801b680:	4659      	mov	r1, fp
 801b682:	f7e4 fe13 	bl	80002ac <__adddf3>
 801b686:	4602      	mov	r2, r0
 801b688:	460b      	mov	r3, r1
 801b68a:	4620      	mov	r0, r4
 801b68c:	4629      	mov	r1, r5
 801b68e:	f7e5 f8ed 	bl	800086c <__aeabi_ddiv>
 801b692:	4602      	mov	r2, r0
 801b694:	460b      	mov	r3, r1
 801b696:	f7e4 fe09 	bl	80002ac <__adddf3>
 801b69a:	4602      	mov	r2, r0
 801b69c:	460b      	mov	r3, r1
 801b69e:	a114      	add	r1, pc, #80	; (adr r1, 801b6f0 <__ieee754_asin+0x410>)
 801b6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6a4:	f7e4 fe00 	bl	80002a8 <__aeabi_dsub>
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	460b      	mov	r3, r1
 801b6ac:	4640      	mov	r0, r8
 801b6ae:	4649      	mov	r1, r9
 801b6b0:	f7e4 fdfa 	bl	80002a8 <__aeabi_dsub>
 801b6b4:	465f      	mov	r7, fp
 801b6b6:	4604      	mov	r4, r0
 801b6b8:	460d      	mov	r5, r1
 801b6ba:	4632      	mov	r2, r6
 801b6bc:	465b      	mov	r3, fp
 801b6be:	4630      	mov	r0, r6
 801b6c0:	4639      	mov	r1, r7
 801b6c2:	f7e4 fdf3 	bl	80002ac <__adddf3>
 801b6c6:	4602      	mov	r2, r0
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	a10b      	add	r1, pc, #44	; (adr r1, 801b6f8 <__ieee754_asin+0x418>)
 801b6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6d0:	f7e4 fdea 	bl	80002a8 <__aeabi_dsub>
 801b6d4:	4602      	mov	r2, r0
 801b6d6:	460b      	mov	r3, r1
 801b6d8:	4620      	mov	r0, r4
 801b6da:	4629      	mov	r1, r5
 801b6dc:	f7e4 fde4 	bl	80002a8 <__aeabi_dsub>
 801b6e0:	4602      	mov	r2, r0
 801b6e2:	460b      	mov	r3, r1
 801b6e4:	a104      	add	r1, pc, #16	; (adr r1, 801b6f8 <__ieee754_asin+0x418>)
 801b6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b6ea:	e6dd      	b.n	801b4a8 <__ieee754_asin+0x1c8>
 801b6ec:	f3af 8000 	nop.w
 801b6f0:	33145c07 	.word	0x33145c07
 801b6f4:	3c91a626 	.word	0x3c91a626
 801b6f8:	54442d18 	.word	0x54442d18
 801b6fc:	3fe921fb 	.word	0x3fe921fb

0801b700 <__ieee754_atan2>:
 801b700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b704:	ec57 6b11 	vmov	r6, r7, d1
 801b708:	4273      	negs	r3, r6
 801b70a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801b70e:	4333      	orrs	r3, r6
 801b710:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 801b8b8 <__ieee754_atan2+0x1b8>
 801b714:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b718:	4573      	cmp	r3, lr
 801b71a:	ec51 0b10 	vmov	r0, r1, d0
 801b71e:	ee11 8a10 	vmov	r8, s2
 801b722:	d80a      	bhi.n	801b73a <__ieee754_atan2+0x3a>
 801b724:	4244      	negs	r4, r0
 801b726:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b72a:	4304      	orrs	r4, r0
 801b72c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b730:	4574      	cmp	r4, lr
 801b732:	468c      	mov	ip, r1
 801b734:	ee10 9a10 	vmov	r9, s0
 801b738:	d907      	bls.n	801b74a <__ieee754_atan2+0x4a>
 801b73a:	4632      	mov	r2, r6
 801b73c:	463b      	mov	r3, r7
 801b73e:	f7e4 fdb5 	bl	80002ac <__adddf3>
 801b742:	ec41 0b10 	vmov	d0, r0, r1
 801b746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b74a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801b74e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b752:	4334      	orrs	r4, r6
 801b754:	d103      	bne.n	801b75e <__ieee754_atan2+0x5e>
 801b756:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b75a:	f001 be3d 	b.w	801d3d8 <atan>
 801b75e:	17bc      	asrs	r4, r7, #30
 801b760:	f004 0402 	and.w	r4, r4, #2
 801b764:	ea53 0909 	orrs.w	r9, r3, r9
 801b768:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b76c:	d107      	bne.n	801b77e <__ieee754_atan2+0x7e>
 801b76e:	2c02      	cmp	r4, #2
 801b770:	d073      	beq.n	801b85a <__ieee754_atan2+0x15a>
 801b772:	2c03      	cmp	r4, #3
 801b774:	d1e5      	bne.n	801b742 <__ieee754_atan2+0x42>
 801b776:	a13e      	add	r1, pc, #248	; (adr r1, 801b870 <__ieee754_atan2+0x170>)
 801b778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b77c:	e7e1      	b.n	801b742 <__ieee754_atan2+0x42>
 801b77e:	ea52 0808 	orrs.w	r8, r2, r8
 801b782:	d106      	bne.n	801b792 <__ieee754_atan2+0x92>
 801b784:	f1bc 0f00 	cmp.w	ip, #0
 801b788:	da6b      	bge.n	801b862 <__ieee754_atan2+0x162>
 801b78a:	a13b      	add	r1, pc, #236	; (adr r1, 801b878 <__ieee754_atan2+0x178>)
 801b78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b790:	e7d7      	b.n	801b742 <__ieee754_atan2+0x42>
 801b792:	4572      	cmp	r2, lr
 801b794:	d120      	bne.n	801b7d8 <__ieee754_atan2+0xd8>
 801b796:	4293      	cmp	r3, r2
 801b798:	d111      	bne.n	801b7be <__ieee754_atan2+0xbe>
 801b79a:	2c02      	cmp	r4, #2
 801b79c:	d007      	beq.n	801b7ae <__ieee754_atan2+0xae>
 801b79e:	2c03      	cmp	r4, #3
 801b7a0:	d009      	beq.n	801b7b6 <__ieee754_atan2+0xb6>
 801b7a2:	2c01      	cmp	r4, #1
 801b7a4:	d155      	bne.n	801b852 <__ieee754_atan2+0x152>
 801b7a6:	a136      	add	r1, pc, #216	; (adr r1, 801b880 <__ieee754_atan2+0x180>)
 801b7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7ac:	e7c9      	b.n	801b742 <__ieee754_atan2+0x42>
 801b7ae:	a136      	add	r1, pc, #216	; (adr r1, 801b888 <__ieee754_atan2+0x188>)
 801b7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7b4:	e7c5      	b.n	801b742 <__ieee754_atan2+0x42>
 801b7b6:	a136      	add	r1, pc, #216	; (adr r1, 801b890 <__ieee754_atan2+0x190>)
 801b7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b7bc:	e7c1      	b.n	801b742 <__ieee754_atan2+0x42>
 801b7be:	2c02      	cmp	r4, #2
 801b7c0:	d04b      	beq.n	801b85a <__ieee754_atan2+0x15a>
 801b7c2:	2c03      	cmp	r4, #3
 801b7c4:	d0d7      	beq.n	801b776 <__ieee754_atan2+0x76>
 801b7c6:	2c01      	cmp	r4, #1
 801b7c8:	f04f 0000 	mov.w	r0, #0
 801b7cc:	d102      	bne.n	801b7d4 <__ieee754_atan2+0xd4>
 801b7ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b7d2:	e7b6      	b.n	801b742 <__ieee754_atan2+0x42>
 801b7d4:	2100      	movs	r1, #0
 801b7d6:	e7b4      	b.n	801b742 <__ieee754_atan2+0x42>
 801b7d8:	4573      	cmp	r3, lr
 801b7da:	d0d3      	beq.n	801b784 <__ieee754_atan2+0x84>
 801b7dc:	1a9b      	subs	r3, r3, r2
 801b7de:	151b      	asrs	r3, r3, #20
 801b7e0:	2b3c      	cmp	r3, #60	; 0x3c
 801b7e2:	dc1e      	bgt.n	801b822 <__ieee754_atan2+0x122>
 801b7e4:	2f00      	cmp	r7, #0
 801b7e6:	da01      	bge.n	801b7ec <__ieee754_atan2+0xec>
 801b7e8:	333c      	adds	r3, #60	; 0x3c
 801b7ea:	db1e      	blt.n	801b82a <__ieee754_atan2+0x12a>
 801b7ec:	4632      	mov	r2, r6
 801b7ee:	463b      	mov	r3, r7
 801b7f0:	f7e5 f83c 	bl	800086c <__aeabi_ddiv>
 801b7f4:	ec41 0b10 	vmov	d0, r0, r1
 801b7f8:	f001 ff8e 	bl	801d718 <fabs>
 801b7fc:	f001 fdec 	bl	801d3d8 <atan>
 801b800:	ec51 0b10 	vmov	r0, r1, d0
 801b804:	2c01      	cmp	r4, #1
 801b806:	d013      	beq.n	801b830 <__ieee754_atan2+0x130>
 801b808:	2c02      	cmp	r4, #2
 801b80a:	d015      	beq.n	801b838 <__ieee754_atan2+0x138>
 801b80c:	2c00      	cmp	r4, #0
 801b80e:	d098      	beq.n	801b742 <__ieee754_atan2+0x42>
 801b810:	a321      	add	r3, pc, #132	; (adr r3, 801b898 <__ieee754_atan2+0x198>)
 801b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b816:	f7e4 fd47 	bl	80002a8 <__aeabi_dsub>
 801b81a:	a321      	add	r3, pc, #132	; (adr r3, 801b8a0 <__ieee754_atan2+0x1a0>)
 801b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b820:	e014      	b.n	801b84c <__ieee754_atan2+0x14c>
 801b822:	a121      	add	r1, pc, #132	; (adr r1, 801b8a8 <__ieee754_atan2+0x1a8>)
 801b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b828:	e7ec      	b.n	801b804 <__ieee754_atan2+0x104>
 801b82a:	2000      	movs	r0, #0
 801b82c:	2100      	movs	r1, #0
 801b82e:	e7e9      	b.n	801b804 <__ieee754_atan2+0x104>
 801b830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b834:	4619      	mov	r1, r3
 801b836:	e784      	b.n	801b742 <__ieee754_atan2+0x42>
 801b838:	a317      	add	r3, pc, #92	; (adr r3, 801b898 <__ieee754_atan2+0x198>)
 801b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83e:	f7e4 fd33 	bl	80002a8 <__aeabi_dsub>
 801b842:	4602      	mov	r2, r0
 801b844:	460b      	mov	r3, r1
 801b846:	a116      	add	r1, pc, #88	; (adr r1, 801b8a0 <__ieee754_atan2+0x1a0>)
 801b848:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b84c:	f7e4 fd2c 	bl	80002a8 <__aeabi_dsub>
 801b850:	e777      	b.n	801b742 <__ieee754_atan2+0x42>
 801b852:	a117      	add	r1, pc, #92	; (adr r1, 801b8b0 <__ieee754_atan2+0x1b0>)
 801b854:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b858:	e773      	b.n	801b742 <__ieee754_atan2+0x42>
 801b85a:	a111      	add	r1, pc, #68	; (adr r1, 801b8a0 <__ieee754_atan2+0x1a0>)
 801b85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b860:	e76f      	b.n	801b742 <__ieee754_atan2+0x42>
 801b862:	a111      	add	r1, pc, #68	; (adr r1, 801b8a8 <__ieee754_atan2+0x1a8>)
 801b864:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b868:	e76b      	b.n	801b742 <__ieee754_atan2+0x42>
 801b86a:	bf00      	nop
 801b86c:	f3af 8000 	nop.w
 801b870:	54442d18 	.word	0x54442d18
 801b874:	c00921fb 	.word	0xc00921fb
 801b878:	54442d18 	.word	0x54442d18
 801b87c:	bff921fb 	.word	0xbff921fb
 801b880:	54442d18 	.word	0x54442d18
 801b884:	bfe921fb 	.word	0xbfe921fb
 801b888:	7f3321d2 	.word	0x7f3321d2
 801b88c:	4002d97c 	.word	0x4002d97c
 801b890:	7f3321d2 	.word	0x7f3321d2
 801b894:	c002d97c 	.word	0xc002d97c
 801b898:	33145c07 	.word	0x33145c07
 801b89c:	3ca1a626 	.word	0x3ca1a626
 801b8a0:	54442d18 	.word	0x54442d18
 801b8a4:	400921fb 	.word	0x400921fb
 801b8a8:	54442d18 	.word	0x54442d18
 801b8ac:	3ff921fb 	.word	0x3ff921fb
 801b8b0:	54442d18 	.word	0x54442d18
 801b8b4:	3fe921fb 	.word	0x3fe921fb
 801b8b8:	7ff00000 	.word	0x7ff00000

0801b8bc <__ieee754_fmod>:
 801b8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8c0:	ec53 2b11 	vmov	r2, r3, d1
 801b8c4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 801b8c8:	ea5e 0402 	orrs.w	r4, lr, r2
 801b8cc:	ec51 0b10 	vmov	r0, r1, d0
 801b8d0:	461e      	mov	r6, r3
 801b8d2:	ee11 5a10 	vmov	r5, s2
 801b8d6:	4694      	mov	ip, r2
 801b8d8:	d00c      	beq.n	801b8f4 <__ieee754_fmod+0x38>
 801b8da:	4c7a      	ldr	r4, [pc, #488]	; (801bac4 <__ieee754_fmod+0x208>)
 801b8dc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b8e0:	45a0      	cmp	r8, r4
 801b8e2:	4689      	mov	r9, r1
 801b8e4:	dc06      	bgt.n	801b8f4 <__ieee754_fmod+0x38>
 801b8e6:	4254      	negs	r4, r2
 801b8e8:	4314      	orrs	r4, r2
 801b8ea:	4f77      	ldr	r7, [pc, #476]	; (801bac8 <__ieee754_fmod+0x20c>)
 801b8ec:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801b8f0:	42bc      	cmp	r4, r7
 801b8f2:	d909      	bls.n	801b908 <__ieee754_fmod+0x4c>
 801b8f4:	f7e4 fe90 	bl	8000618 <__aeabi_dmul>
 801b8f8:	4602      	mov	r2, r0
 801b8fa:	460b      	mov	r3, r1
 801b8fc:	f7e4 ffb6 	bl	800086c <__aeabi_ddiv>
 801b900:	ec41 0b10 	vmov	d0, r0, r1
 801b904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b908:	45f0      	cmp	r8, lr
 801b90a:	ee10 2a10 	vmov	r2, s0
 801b90e:	4607      	mov	r7, r0
 801b910:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 801b914:	dc0a      	bgt.n	801b92c <__ieee754_fmod+0x70>
 801b916:	dbf3      	blt.n	801b900 <__ieee754_fmod+0x44>
 801b918:	42a8      	cmp	r0, r5
 801b91a:	d3f1      	bcc.n	801b900 <__ieee754_fmod+0x44>
 801b91c:	d106      	bne.n	801b92c <__ieee754_fmod+0x70>
 801b91e:	496b      	ldr	r1, [pc, #428]	; (801bacc <__ieee754_fmod+0x210>)
 801b920:	0fe4      	lsrs	r4, r4, #31
 801b922:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801b926:	e9d4 0100 	ldrd	r0, r1, [r4]
 801b92a:	e7e9      	b.n	801b900 <__ieee754_fmod+0x44>
 801b92c:	4b68      	ldr	r3, [pc, #416]	; (801bad0 <__ieee754_fmod+0x214>)
 801b92e:	4598      	cmp	r8, r3
 801b930:	dc49      	bgt.n	801b9c6 <__ieee754_fmod+0x10a>
 801b932:	f1b8 0f00 	cmp.w	r8, #0
 801b936:	d13d      	bne.n	801b9b4 <__ieee754_fmod+0xf8>
 801b938:	4866      	ldr	r0, [pc, #408]	; (801bad4 <__ieee754_fmod+0x218>)
 801b93a:	4611      	mov	r1, r2
 801b93c:	2900      	cmp	r1, #0
 801b93e:	dc36      	bgt.n	801b9ae <__ieee754_fmod+0xf2>
 801b940:	459e      	cmp	lr, r3
 801b942:	dc51      	bgt.n	801b9e8 <__ieee754_fmod+0x12c>
 801b944:	f1be 0f00 	cmp.w	lr, #0
 801b948:	d145      	bne.n	801b9d6 <__ieee754_fmod+0x11a>
 801b94a:	4b62      	ldr	r3, [pc, #392]	; (801bad4 <__ieee754_fmod+0x218>)
 801b94c:	4629      	mov	r1, r5
 801b94e:	2900      	cmp	r1, #0
 801b950:	dc3e      	bgt.n	801b9d0 <__ieee754_fmod+0x114>
 801b952:	4961      	ldr	r1, [pc, #388]	; (801bad8 <__ieee754_fmod+0x21c>)
 801b954:	4288      	cmp	r0, r1
 801b956:	db4c      	blt.n	801b9f2 <__ieee754_fmod+0x136>
 801b958:	f3c9 0113 	ubfx	r1, r9, #0, #20
 801b95c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801b960:	4a5d      	ldr	r2, [pc, #372]	; (801bad8 <__ieee754_fmod+0x21c>)
 801b962:	4293      	cmp	r3, r2
 801b964:	db59      	blt.n	801ba1a <__ieee754_fmod+0x15e>
 801b966:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b96a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b96e:	1ac0      	subs	r0, r0, r3
 801b970:	1b8a      	subs	r2, r1, r6
 801b972:	eba7 050c 	sub.w	r5, r7, ip
 801b976:	2800      	cmp	r0, #0
 801b978:	d166      	bne.n	801ba48 <__ieee754_fmod+0x18c>
 801b97a:	4567      	cmp	r7, ip
 801b97c:	bf38      	it	cc
 801b97e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801b982:	2a00      	cmp	r2, #0
 801b984:	bfbc      	itt	lt
 801b986:	463d      	movlt	r5, r7
 801b988:	460a      	movlt	r2, r1
 801b98a:	ea52 0105 	orrs.w	r1, r2, r5
 801b98e:	d0c6      	beq.n	801b91e <__ieee754_fmod+0x62>
 801b990:	494f      	ldr	r1, [pc, #316]	; (801bad0 <__ieee754_fmod+0x214>)
 801b992:	428a      	cmp	r2, r1
 801b994:	dd6d      	ble.n	801ba72 <__ieee754_fmod+0x1b6>
 801b996:	4950      	ldr	r1, [pc, #320]	; (801bad8 <__ieee754_fmod+0x21c>)
 801b998:	428b      	cmp	r3, r1
 801b99a:	db70      	blt.n	801ba7e <__ieee754_fmod+0x1c2>
 801b99c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 801b9a0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 801b9a4:	4314      	orrs	r4, r2
 801b9a6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 801b9aa:	4628      	mov	r0, r5
 801b9ac:	e7a8      	b.n	801b900 <__ieee754_fmod+0x44>
 801b9ae:	3801      	subs	r0, #1
 801b9b0:	0049      	lsls	r1, r1, #1
 801b9b2:	e7c3      	b.n	801b93c <__ieee754_fmod+0x80>
 801b9b4:	4848      	ldr	r0, [pc, #288]	; (801bad8 <__ieee754_fmod+0x21c>)
 801b9b6:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 801b9ba:	0049      	lsls	r1, r1, #1
 801b9bc:	2900      	cmp	r1, #0
 801b9be:	f100 30ff 	add.w	r0, r0, #4294967295
 801b9c2:	dcfa      	bgt.n	801b9ba <__ieee754_fmod+0xfe>
 801b9c4:	e7bc      	b.n	801b940 <__ieee754_fmod+0x84>
 801b9c6:	ea4f 5028 	mov.w	r0, r8, asr #20
 801b9ca:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b9ce:	e7b7      	b.n	801b940 <__ieee754_fmod+0x84>
 801b9d0:	3b01      	subs	r3, #1
 801b9d2:	0049      	lsls	r1, r1, #1
 801b9d4:	e7bb      	b.n	801b94e <__ieee754_fmod+0x92>
 801b9d6:	4b40      	ldr	r3, [pc, #256]	; (801bad8 <__ieee754_fmod+0x21c>)
 801b9d8:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 801b9dc:	0049      	lsls	r1, r1, #1
 801b9de:	2900      	cmp	r1, #0
 801b9e0:	f103 33ff 	add.w	r3, r3, #4294967295
 801b9e4:	dcfa      	bgt.n	801b9dc <__ieee754_fmod+0x120>
 801b9e6:	e7b4      	b.n	801b952 <__ieee754_fmod+0x96>
 801b9e8:	ea4f 532e 	mov.w	r3, lr, asr #20
 801b9ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b9f0:	e7af      	b.n	801b952 <__ieee754_fmod+0x96>
 801b9f2:	1a0f      	subs	r7, r1, r0
 801b9f4:	2f1f      	cmp	r7, #31
 801b9f6:	dc0a      	bgt.n	801ba0e <__ieee754_fmod+0x152>
 801b9f8:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801b9fc:	fa08 f807 	lsl.w	r8, r8, r7
 801ba00:	fa22 f101 	lsr.w	r1, r2, r1
 801ba04:	ea41 0108 	orr.w	r1, r1, r8
 801ba08:	fa02 f707 	lsl.w	r7, r2, r7
 801ba0c:	e7a8      	b.n	801b960 <__ieee754_fmod+0xa4>
 801ba0e:	4933      	ldr	r1, [pc, #204]	; (801badc <__ieee754_fmod+0x220>)
 801ba10:	1a09      	subs	r1, r1, r0
 801ba12:	fa02 f101 	lsl.w	r1, r2, r1
 801ba16:	2700      	movs	r7, #0
 801ba18:	e7a2      	b.n	801b960 <__ieee754_fmod+0xa4>
 801ba1a:	eba2 0c03 	sub.w	ip, r2, r3
 801ba1e:	f1bc 0f1f 	cmp.w	ip, #31
 801ba22:	dc0a      	bgt.n	801ba3a <__ieee754_fmod+0x17e>
 801ba24:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801ba28:	fa0e fe0c 	lsl.w	lr, lr, ip
 801ba2c:	fa25 f606 	lsr.w	r6, r5, r6
 801ba30:	ea46 060e 	orr.w	r6, r6, lr
 801ba34:	fa05 fc0c 	lsl.w	ip, r5, ip
 801ba38:	e799      	b.n	801b96e <__ieee754_fmod+0xb2>
 801ba3a:	4e28      	ldr	r6, [pc, #160]	; (801badc <__ieee754_fmod+0x220>)
 801ba3c:	1af6      	subs	r6, r6, r3
 801ba3e:	fa05 f606 	lsl.w	r6, r5, r6
 801ba42:	f04f 0c00 	mov.w	ip, #0
 801ba46:	e792      	b.n	801b96e <__ieee754_fmod+0xb2>
 801ba48:	4567      	cmp	r7, ip
 801ba4a:	bf38      	it	cc
 801ba4c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801ba50:	2a00      	cmp	r2, #0
 801ba52:	da05      	bge.n	801ba60 <__ieee754_fmod+0x1a4>
 801ba54:	0ffa      	lsrs	r2, r7, #31
 801ba56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801ba5a:	007f      	lsls	r7, r7, #1
 801ba5c:	3801      	subs	r0, #1
 801ba5e:	e787      	b.n	801b970 <__ieee754_fmod+0xb4>
 801ba60:	ea52 0105 	orrs.w	r1, r2, r5
 801ba64:	f43f af5b 	beq.w	801b91e <__ieee754_fmod+0x62>
 801ba68:	0fe9      	lsrs	r1, r5, #31
 801ba6a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801ba6e:	006f      	lsls	r7, r5, #1
 801ba70:	e7f4      	b.n	801ba5c <__ieee754_fmod+0x1a0>
 801ba72:	0fe8      	lsrs	r0, r5, #31
 801ba74:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801ba78:	006d      	lsls	r5, r5, #1
 801ba7a:	3b01      	subs	r3, #1
 801ba7c:	e789      	b.n	801b992 <__ieee754_fmod+0xd6>
 801ba7e:	1ac9      	subs	r1, r1, r3
 801ba80:	2914      	cmp	r1, #20
 801ba82:	dc0a      	bgt.n	801ba9a <__ieee754_fmod+0x1de>
 801ba84:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801ba88:	fa02 f303 	lsl.w	r3, r2, r3
 801ba8c:	40cd      	lsrs	r5, r1
 801ba8e:	432b      	orrs	r3, r5
 801ba90:	410a      	asrs	r2, r1
 801ba92:	ea42 0104 	orr.w	r1, r2, r4
 801ba96:	4618      	mov	r0, r3
 801ba98:	e732      	b.n	801b900 <__ieee754_fmod+0x44>
 801ba9a:	291f      	cmp	r1, #31
 801ba9c:	dc07      	bgt.n	801baae <__ieee754_fmod+0x1f2>
 801ba9e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801baa2:	40cd      	lsrs	r5, r1
 801baa4:	fa02 f303 	lsl.w	r3, r2, r3
 801baa8:	432b      	orrs	r3, r5
 801baaa:	4622      	mov	r2, r4
 801baac:	e7f1      	b.n	801ba92 <__ieee754_fmod+0x1d6>
 801baae:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801bab2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801bab6:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801baba:	33e2      	adds	r3, #226	; 0xe2
 801babc:	fa42 f303 	asr.w	r3, r2, r3
 801bac0:	e7f3      	b.n	801baaa <__ieee754_fmod+0x1ee>
 801bac2:	bf00      	nop
 801bac4:	7fefffff 	.word	0x7fefffff
 801bac8:	7ff00000 	.word	0x7ff00000
 801bacc:	0801e5a0 	.word	0x0801e5a0
 801bad0:	000fffff 	.word	0x000fffff
 801bad4:	fffffbed 	.word	0xfffffbed
 801bad8:	fffffc02 	.word	0xfffffc02
 801badc:	fffffbe2 	.word	0xfffffbe2

0801bae0 <__ieee754_pow>:
 801bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae4:	b091      	sub	sp, #68	; 0x44
 801bae6:	ed8d 1b00 	vstr	d1, [sp]
 801baea:	e9dd 2900 	ldrd	r2, r9, [sp]
 801baee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801baf2:	ea58 0302 	orrs.w	r3, r8, r2
 801baf6:	ec57 6b10 	vmov	r6, r7, d0
 801bafa:	f000 84be 	beq.w	801c47a <__ieee754_pow+0x99a>
 801bafe:	4b7a      	ldr	r3, [pc, #488]	; (801bce8 <__ieee754_pow+0x208>)
 801bb00:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801bb04:	429c      	cmp	r4, r3
 801bb06:	463d      	mov	r5, r7
 801bb08:	ee10 aa10 	vmov	sl, s0
 801bb0c:	dc09      	bgt.n	801bb22 <__ieee754_pow+0x42>
 801bb0e:	d103      	bne.n	801bb18 <__ieee754_pow+0x38>
 801bb10:	b93e      	cbnz	r6, 801bb22 <__ieee754_pow+0x42>
 801bb12:	45a0      	cmp	r8, r4
 801bb14:	dc0d      	bgt.n	801bb32 <__ieee754_pow+0x52>
 801bb16:	e001      	b.n	801bb1c <__ieee754_pow+0x3c>
 801bb18:	4598      	cmp	r8, r3
 801bb1a:	dc02      	bgt.n	801bb22 <__ieee754_pow+0x42>
 801bb1c:	4598      	cmp	r8, r3
 801bb1e:	d10e      	bne.n	801bb3e <__ieee754_pow+0x5e>
 801bb20:	b16a      	cbz	r2, 801bb3e <__ieee754_pow+0x5e>
 801bb22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bb26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bb2a:	ea54 030a 	orrs.w	r3, r4, sl
 801bb2e:	f000 84a4 	beq.w	801c47a <__ieee754_pow+0x99a>
 801bb32:	486e      	ldr	r0, [pc, #440]	; (801bcec <__ieee754_pow+0x20c>)
 801bb34:	b011      	add	sp, #68	; 0x44
 801bb36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb3a:	f001 be89 	b.w	801d850 <nan>
 801bb3e:	2d00      	cmp	r5, #0
 801bb40:	da53      	bge.n	801bbea <__ieee754_pow+0x10a>
 801bb42:	4b6b      	ldr	r3, [pc, #428]	; (801bcf0 <__ieee754_pow+0x210>)
 801bb44:	4598      	cmp	r8, r3
 801bb46:	dc4d      	bgt.n	801bbe4 <__ieee754_pow+0x104>
 801bb48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801bb4c:	4598      	cmp	r8, r3
 801bb4e:	dd4c      	ble.n	801bbea <__ieee754_pow+0x10a>
 801bb50:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bb54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bb58:	2b14      	cmp	r3, #20
 801bb5a:	dd26      	ble.n	801bbaa <__ieee754_pow+0xca>
 801bb5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801bb60:	fa22 f103 	lsr.w	r1, r2, r3
 801bb64:	fa01 f303 	lsl.w	r3, r1, r3
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d13e      	bne.n	801bbea <__ieee754_pow+0x10a>
 801bb6c:	f001 0101 	and.w	r1, r1, #1
 801bb70:	f1c1 0b02 	rsb	fp, r1, #2
 801bb74:	2a00      	cmp	r2, #0
 801bb76:	d15b      	bne.n	801bc30 <__ieee754_pow+0x150>
 801bb78:	4b5b      	ldr	r3, [pc, #364]	; (801bce8 <__ieee754_pow+0x208>)
 801bb7a:	4598      	cmp	r8, r3
 801bb7c:	d124      	bne.n	801bbc8 <__ieee754_pow+0xe8>
 801bb7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801bb82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bb86:	ea53 030a 	orrs.w	r3, r3, sl
 801bb8a:	f000 8476 	beq.w	801c47a <__ieee754_pow+0x99a>
 801bb8e:	4b59      	ldr	r3, [pc, #356]	; (801bcf4 <__ieee754_pow+0x214>)
 801bb90:	429c      	cmp	r4, r3
 801bb92:	dd2d      	ble.n	801bbf0 <__ieee754_pow+0x110>
 801bb94:	f1b9 0f00 	cmp.w	r9, #0
 801bb98:	f280 8473 	bge.w	801c482 <__ieee754_pow+0x9a2>
 801bb9c:	2000      	movs	r0, #0
 801bb9e:	2100      	movs	r1, #0
 801bba0:	ec41 0b10 	vmov	d0, r0, r1
 801bba4:	b011      	add	sp, #68	; 0x44
 801bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbaa:	2a00      	cmp	r2, #0
 801bbac:	d13e      	bne.n	801bc2c <__ieee754_pow+0x14c>
 801bbae:	f1c3 0314 	rsb	r3, r3, #20
 801bbb2:	fa48 f103 	asr.w	r1, r8, r3
 801bbb6:	fa01 f303 	lsl.w	r3, r1, r3
 801bbba:	4543      	cmp	r3, r8
 801bbbc:	f040 8469 	bne.w	801c492 <__ieee754_pow+0x9b2>
 801bbc0:	f001 0101 	and.w	r1, r1, #1
 801bbc4:	f1c1 0b02 	rsb	fp, r1, #2
 801bbc8:	4b4b      	ldr	r3, [pc, #300]	; (801bcf8 <__ieee754_pow+0x218>)
 801bbca:	4598      	cmp	r8, r3
 801bbcc:	d118      	bne.n	801bc00 <__ieee754_pow+0x120>
 801bbce:	f1b9 0f00 	cmp.w	r9, #0
 801bbd2:	f280 845a 	bge.w	801c48a <__ieee754_pow+0x9aa>
 801bbd6:	4948      	ldr	r1, [pc, #288]	; (801bcf8 <__ieee754_pow+0x218>)
 801bbd8:	4632      	mov	r2, r6
 801bbda:	463b      	mov	r3, r7
 801bbdc:	2000      	movs	r0, #0
 801bbde:	f7e4 fe45 	bl	800086c <__aeabi_ddiv>
 801bbe2:	e7dd      	b.n	801bba0 <__ieee754_pow+0xc0>
 801bbe4:	f04f 0b02 	mov.w	fp, #2
 801bbe8:	e7c4      	b.n	801bb74 <__ieee754_pow+0x94>
 801bbea:	f04f 0b00 	mov.w	fp, #0
 801bbee:	e7c1      	b.n	801bb74 <__ieee754_pow+0x94>
 801bbf0:	f1b9 0f00 	cmp.w	r9, #0
 801bbf4:	dad2      	bge.n	801bb9c <__ieee754_pow+0xbc>
 801bbf6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bbfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801bbfe:	e7cf      	b.n	801bba0 <__ieee754_pow+0xc0>
 801bc00:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801bc04:	d106      	bne.n	801bc14 <__ieee754_pow+0x134>
 801bc06:	4632      	mov	r2, r6
 801bc08:	463b      	mov	r3, r7
 801bc0a:	4610      	mov	r0, r2
 801bc0c:	4619      	mov	r1, r3
 801bc0e:	f7e4 fd03 	bl	8000618 <__aeabi_dmul>
 801bc12:	e7c5      	b.n	801bba0 <__ieee754_pow+0xc0>
 801bc14:	4b39      	ldr	r3, [pc, #228]	; (801bcfc <__ieee754_pow+0x21c>)
 801bc16:	4599      	cmp	r9, r3
 801bc18:	d10a      	bne.n	801bc30 <__ieee754_pow+0x150>
 801bc1a:	2d00      	cmp	r5, #0
 801bc1c:	db08      	blt.n	801bc30 <__ieee754_pow+0x150>
 801bc1e:	ec47 6b10 	vmov	d0, r6, r7
 801bc22:	b011      	add	sp, #68	; 0x44
 801bc24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc28:	f000 be5c 	b.w	801c8e4 <__ieee754_sqrt>
 801bc2c:	f04f 0b00 	mov.w	fp, #0
 801bc30:	ec47 6b10 	vmov	d0, r6, r7
 801bc34:	f001 fd70 	bl	801d718 <fabs>
 801bc38:	ec51 0b10 	vmov	r0, r1, d0
 801bc3c:	f1ba 0f00 	cmp.w	sl, #0
 801bc40:	d127      	bne.n	801bc92 <__ieee754_pow+0x1b2>
 801bc42:	b124      	cbz	r4, 801bc4e <__ieee754_pow+0x16e>
 801bc44:	4b2c      	ldr	r3, [pc, #176]	; (801bcf8 <__ieee754_pow+0x218>)
 801bc46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801bc4a:	429a      	cmp	r2, r3
 801bc4c:	d121      	bne.n	801bc92 <__ieee754_pow+0x1b2>
 801bc4e:	f1b9 0f00 	cmp.w	r9, #0
 801bc52:	da05      	bge.n	801bc60 <__ieee754_pow+0x180>
 801bc54:	4602      	mov	r2, r0
 801bc56:	460b      	mov	r3, r1
 801bc58:	2000      	movs	r0, #0
 801bc5a:	4927      	ldr	r1, [pc, #156]	; (801bcf8 <__ieee754_pow+0x218>)
 801bc5c:	f7e4 fe06 	bl	800086c <__aeabi_ddiv>
 801bc60:	2d00      	cmp	r5, #0
 801bc62:	da9d      	bge.n	801bba0 <__ieee754_pow+0xc0>
 801bc64:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bc68:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bc6c:	ea54 030b 	orrs.w	r3, r4, fp
 801bc70:	d108      	bne.n	801bc84 <__ieee754_pow+0x1a4>
 801bc72:	4602      	mov	r2, r0
 801bc74:	460b      	mov	r3, r1
 801bc76:	4610      	mov	r0, r2
 801bc78:	4619      	mov	r1, r3
 801bc7a:	f7e4 fb15 	bl	80002a8 <__aeabi_dsub>
 801bc7e:	4602      	mov	r2, r0
 801bc80:	460b      	mov	r3, r1
 801bc82:	e7ac      	b.n	801bbde <__ieee754_pow+0xfe>
 801bc84:	f1bb 0f01 	cmp.w	fp, #1
 801bc88:	d18a      	bne.n	801bba0 <__ieee754_pow+0xc0>
 801bc8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc8e:	4619      	mov	r1, r3
 801bc90:	e786      	b.n	801bba0 <__ieee754_pow+0xc0>
 801bc92:	0fed      	lsrs	r5, r5, #31
 801bc94:	1e6b      	subs	r3, r5, #1
 801bc96:	930d      	str	r3, [sp, #52]	; 0x34
 801bc98:	ea5b 0303 	orrs.w	r3, fp, r3
 801bc9c:	d102      	bne.n	801bca4 <__ieee754_pow+0x1c4>
 801bc9e:	4632      	mov	r2, r6
 801bca0:	463b      	mov	r3, r7
 801bca2:	e7e8      	b.n	801bc76 <__ieee754_pow+0x196>
 801bca4:	4b16      	ldr	r3, [pc, #88]	; (801bd00 <__ieee754_pow+0x220>)
 801bca6:	4598      	cmp	r8, r3
 801bca8:	f340 80fe 	ble.w	801bea8 <__ieee754_pow+0x3c8>
 801bcac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801bcb0:	4598      	cmp	r8, r3
 801bcb2:	dd0a      	ble.n	801bcca <__ieee754_pow+0x1ea>
 801bcb4:	4b0f      	ldr	r3, [pc, #60]	; (801bcf4 <__ieee754_pow+0x214>)
 801bcb6:	429c      	cmp	r4, r3
 801bcb8:	dc0d      	bgt.n	801bcd6 <__ieee754_pow+0x1f6>
 801bcba:	f1b9 0f00 	cmp.w	r9, #0
 801bcbe:	f6bf af6d 	bge.w	801bb9c <__ieee754_pow+0xbc>
 801bcc2:	a307      	add	r3, pc, #28	; (adr r3, 801bce0 <__ieee754_pow+0x200>)
 801bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc8:	e79f      	b.n	801bc0a <__ieee754_pow+0x12a>
 801bcca:	4b0e      	ldr	r3, [pc, #56]	; (801bd04 <__ieee754_pow+0x224>)
 801bccc:	429c      	cmp	r4, r3
 801bcce:	ddf4      	ble.n	801bcba <__ieee754_pow+0x1da>
 801bcd0:	4b09      	ldr	r3, [pc, #36]	; (801bcf8 <__ieee754_pow+0x218>)
 801bcd2:	429c      	cmp	r4, r3
 801bcd4:	dd18      	ble.n	801bd08 <__ieee754_pow+0x228>
 801bcd6:	f1b9 0f00 	cmp.w	r9, #0
 801bcda:	dcf2      	bgt.n	801bcc2 <__ieee754_pow+0x1e2>
 801bcdc:	e75e      	b.n	801bb9c <__ieee754_pow+0xbc>
 801bcde:	bf00      	nop
 801bce0:	8800759c 	.word	0x8800759c
 801bce4:	7e37e43c 	.word	0x7e37e43c
 801bce8:	7ff00000 	.word	0x7ff00000
 801bcec:	0801e479 	.word	0x0801e479
 801bcf0:	433fffff 	.word	0x433fffff
 801bcf4:	3fefffff 	.word	0x3fefffff
 801bcf8:	3ff00000 	.word	0x3ff00000
 801bcfc:	3fe00000 	.word	0x3fe00000
 801bd00:	41e00000 	.word	0x41e00000
 801bd04:	3feffffe 	.word	0x3feffffe
 801bd08:	2200      	movs	r2, #0
 801bd0a:	4b63      	ldr	r3, [pc, #396]	; (801be98 <__ieee754_pow+0x3b8>)
 801bd0c:	f7e4 facc 	bl	80002a8 <__aeabi_dsub>
 801bd10:	a355      	add	r3, pc, #340	; (adr r3, 801be68 <__ieee754_pow+0x388>)
 801bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd16:	4604      	mov	r4, r0
 801bd18:	460d      	mov	r5, r1
 801bd1a:	f7e4 fc7d 	bl	8000618 <__aeabi_dmul>
 801bd1e:	a354      	add	r3, pc, #336	; (adr r3, 801be70 <__ieee754_pow+0x390>)
 801bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd24:	4606      	mov	r6, r0
 801bd26:	460f      	mov	r7, r1
 801bd28:	4620      	mov	r0, r4
 801bd2a:	4629      	mov	r1, r5
 801bd2c:	f7e4 fc74 	bl	8000618 <__aeabi_dmul>
 801bd30:	2200      	movs	r2, #0
 801bd32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd36:	4b59      	ldr	r3, [pc, #356]	; (801be9c <__ieee754_pow+0x3bc>)
 801bd38:	4620      	mov	r0, r4
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	f7e4 fc6c 	bl	8000618 <__aeabi_dmul>
 801bd40:	4602      	mov	r2, r0
 801bd42:	460b      	mov	r3, r1
 801bd44:	a14c      	add	r1, pc, #304	; (adr r1, 801be78 <__ieee754_pow+0x398>)
 801bd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd4a:	f7e4 faad 	bl	80002a8 <__aeabi_dsub>
 801bd4e:	4622      	mov	r2, r4
 801bd50:	462b      	mov	r3, r5
 801bd52:	f7e4 fc61 	bl	8000618 <__aeabi_dmul>
 801bd56:	4602      	mov	r2, r0
 801bd58:	460b      	mov	r3, r1
 801bd5a:	2000      	movs	r0, #0
 801bd5c:	4950      	ldr	r1, [pc, #320]	; (801bea0 <__ieee754_pow+0x3c0>)
 801bd5e:	f7e4 faa3 	bl	80002a8 <__aeabi_dsub>
 801bd62:	4622      	mov	r2, r4
 801bd64:	462b      	mov	r3, r5
 801bd66:	4680      	mov	r8, r0
 801bd68:	4689      	mov	r9, r1
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	4629      	mov	r1, r5
 801bd6e:	f7e4 fc53 	bl	8000618 <__aeabi_dmul>
 801bd72:	4602      	mov	r2, r0
 801bd74:	460b      	mov	r3, r1
 801bd76:	4640      	mov	r0, r8
 801bd78:	4649      	mov	r1, r9
 801bd7a:	f7e4 fc4d 	bl	8000618 <__aeabi_dmul>
 801bd7e:	a340      	add	r3, pc, #256	; (adr r3, 801be80 <__ieee754_pow+0x3a0>)
 801bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd84:	f7e4 fc48 	bl	8000618 <__aeabi_dmul>
 801bd88:	4602      	mov	r2, r0
 801bd8a:	460b      	mov	r3, r1
 801bd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd90:	f7e4 fa8a 	bl	80002a8 <__aeabi_dsub>
 801bd94:	4602      	mov	r2, r0
 801bd96:	460b      	mov	r3, r1
 801bd98:	4604      	mov	r4, r0
 801bd9a:	460d      	mov	r5, r1
 801bd9c:	4630      	mov	r0, r6
 801bd9e:	4639      	mov	r1, r7
 801bda0:	f7e4 fa84 	bl	80002ac <__adddf3>
 801bda4:	2000      	movs	r0, #0
 801bda6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bdaa:	4632      	mov	r2, r6
 801bdac:	463b      	mov	r3, r7
 801bdae:	f7e4 fa7b 	bl	80002a8 <__aeabi_dsub>
 801bdb2:	4602      	mov	r2, r0
 801bdb4:	460b      	mov	r3, r1
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	4629      	mov	r1, r5
 801bdba:	f7e4 fa75 	bl	80002a8 <__aeabi_dsub>
 801bdbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bdc0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bdc4:	4313      	orrs	r3, r2
 801bdc6:	4606      	mov	r6, r0
 801bdc8:	460f      	mov	r7, r1
 801bdca:	f040 81eb 	bne.w	801c1a4 <__ieee754_pow+0x6c4>
 801bdce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801be88 <__ieee754_pow+0x3a8>
 801bdd2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bdd6:	2400      	movs	r4, #0
 801bdd8:	4622      	mov	r2, r4
 801bdda:	462b      	mov	r3, r5
 801bddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bde0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bde4:	f7e4 fa60 	bl	80002a8 <__aeabi_dsub>
 801bde8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bdec:	f7e4 fc14 	bl	8000618 <__aeabi_dmul>
 801bdf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bdf4:	4680      	mov	r8, r0
 801bdf6:	4689      	mov	r9, r1
 801bdf8:	4630      	mov	r0, r6
 801bdfa:	4639      	mov	r1, r7
 801bdfc:	f7e4 fc0c 	bl	8000618 <__aeabi_dmul>
 801be00:	4602      	mov	r2, r0
 801be02:	460b      	mov	r3, r1
 801be04:	4640      	mov	r0, r8
 801be06:	4649      	mov	r1, r9
 801be08:	f7e4 fa50 	bl	80002ac <__adddf3>
 801be0c:	4622      	mov	r2, r4
 801be0e:	462b      	mov	r3, r5
 801be10:	4680      	mov	r8, r0
 801be12:	4689      	mov	r9, r1
 801be14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be18:	f7e4 fbfe 	bl	8000618 <__aeabi_dmul>
 801be1c:	460b      	mov	r3, r1
 801be1e:	4604      	mov	r4, r0
 801be20:	460d      	mov	r5, r1
 801be22:	4602      	mov	r2, r0
 801be24:	4649      	mov	r1, r9
 801be26:	4640      	mov	r0, r8
 801be28:	e9cd 4500 	strd	r4, r5, [sp]
 801be2c:	f7e4 fa3e 	bl	80002ac <__adddf3>
 801be30:	4b1c      	ldr	r3, [pc, #112]	; (801bea4 <__ieee754_pow+0x3c4>)
 801be32:	4299      	cmp	r1, r3
 801be34:	4606      	mov	r6, r0
 801be36:	460f      	mov	r7, r1
 801be38:	468b      	mov	fp, r1
 801be3a:	f340 82f7 	ble.w	801c42c <__ieee754_pow+0x94c>
 801be3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801be42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801be46:	4303      	orrs	r3, r0
 801be48:	f000 81ea 	beq.w	801c220 <__ieee754_pow+0x740>
 801be4c:	a310      	add	r3, pc, #64	; (adr r3, 801be90 <__ieee754_pow+0x3b0>)
 801be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be56:	f7e4 fbdf 	bl	8000618 <__aeabi_dmul>
 801be5a:	a30d      	add	r3, pc, #52	; (adr r3, 801be90 <__ieee754_pow+0x3b0>)
 801be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be60:	e6d5      	b.n	801bc0e <__ieee754_pow+0x12e>
 801be62:	bf00      	nop
 801be64:	f3af 8000 	nop.w
 801be68:	60000000 	.word	0x60000000
 801be6c:	3ff71547 	.word	0x3ff71547
 801be70:	f85ddf44 	.word	0xf85ddf44
 801be74:	3e54ae0b 	.word	0x3e54ae0b
 801be78:	55555555 	.word	0x55555555
 801be7c:	3fd55555 	.word	0x3fd55555
 801be80:	652b82fe 	.word	0x652b82fe
 801be84:	3ff71547 	.word	0x3ff71547
 801be88:	00000000 	.word	0x00000000
 801be8c:	bff00000 	.word	0xbff00000
 801be90:	8800759c 	.word	0x8800759c
 801be94:	7e37e43c 	.word	0x7e37e43c
 801be98:	3ff00000 	.word	0x3ff00000
 801be9c:	3fd00000 	.word	0x3fd00000
 801bea0:	3fe00000 	.word	0x3fe00000
 801bea4:	408fffff 	.word	0x408fffff
 801bea8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801beac:	f04f 0200 	mov.w	r2, #0
 801beb0:	da05      	bge.n	801bebe <__ieee754_pow+0x3de>
 801beb2:	4bd3      	ldr	r3, [pc, #844]	; (801c200 <__ieee754_pow+0x720>)
 801beb4:	f7e4 fbb0 	bl	8000618 <__aeabi_dmul>
 801beb8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801bebc:	460c      	mov	r4, r1
 801bebe:	1523      	asrs	r3, r4, #20
 801bec0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bec4:	4413      	add	r3, r2
 801bec6:	9309      	str	r3, [sp, #36]	; 0x24
 801bec8:	4bce      	ldr	r3, [pc, #824]	; (801c204 <__ieee754_pow+0x724>)
 801beca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801bece:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bed2:	429c      	cmp	r4, r3
 801bed4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bed8:	dd08      	ble.n	801beec <__ieee754_pow+0x40c>
 801beda:	4bcb      	ldr	r3, [pc, #812]	; (801c208 <__ieee754_pow+0x728>)
 801bedc:	429c      	cmp	r4, r3
 801bede:	f340 815e 	ble.w	801c19e <__ieee754_pow+0x6be>
 801bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bee4:	3301      	adds	r3, #1
 801bee6:	9309      	str	r3, [sp, #36]	; 0x24
 801bee8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801beec:	f04f 0a00 	mov.w	sl, #0
 801bef0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bef4:	930c      	str	r3, [sp, #48]	; 0x30
 801bef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bef8:	4bc4      	ldr	r3, [pc, #784]	; (801c20c <__ieee754_pow+0x72c>)
 801befa:	4413      	add	r3, r2
 801befc:	ed93 7b00 	vldr	d7, [r3]
 801bf00:	4629      	mov	r1, r5
 801bf02:	ec53 2b17 	vmov	r2, r3, d7
 801bf06:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bf0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bf0e:	f7e4 f9cb 	bl	80002a8 <__aeabi_dsub>
 801bf12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bf16:	4606      	mov	r6, r0
 801bf18:	460f      	mov	r7, r1
 801bf1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf1e:	f7e4 f9c5 	bl	80002ac <__adddf3>
 801bf22:	4602      	mov	r2, r0
 801bf24:	460b      	mov	r3, r1
 801bf26:	2000      	movs	r0, #0
 801bf28:	49b9      	ldr	r1, [pc, #740]	; (801c210 <__ieee754_pow+0x730>)
 801bf2a:	f7e4 fc9f 	bl	800086c <__aeabi_ddiv>
 801bf2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bf32:	4602      	mov	r2, r0
 801bf34:	460b      	mov	r3, r1
 801bf36:	4630      	mov	r0, r6
 801bf38:	4639      	mov	r1, r7
 801bf3a:	f7e4 fb6d 	bl	8000618 <__aeabi_dmul>
 801bf3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bf46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	9302      	str	r3, [sp, #8]
 801bf4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bf52:	106d      	asrs	r5, r5, #1
 801bf54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bf58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bf62:	4640      	mov	r0, r8
 801bf64:	4649      	mov	r1, r9
 801bf66:	4614      	mov	r4, r2
 801bf68:	461d      	mov	r5, r3
 801bf6a:	f7e4 fb55 	bl	8000618 <__aeabi_dmul>
 801bf6e:	4602      	mov	r2, r0
 801bf70:	460b      	mov	r3, r1
 801bf72:	4630      	mov	r0, r6
 801bf74:	4639      	mov	r1, r7
 801bf76:	f7e4 f997 	bl	80002a8 <__aeabi_dsub>
 801bf7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bf7e:	4606      	mov	r6, r0
 801bf80:	460f      	mov	r7, r1
 801bf82:	4620      	mov	r0, r4
 801bf84:	4629      	mov	r1, r5
 801bf86:	f7e4 f98f 	bl	80002a8 <__aeabi_dsub>
 801bf8a:	4602      	mov	r2, r0
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bf92:	f7e4 f989 	bl	80002a8 <__aeabi_dsub>
 801bf96:	4642      	mov	r2, r8
 801bf98:	464b      	mov	r3, r9
 801bf9a:	f7e4 fb3d 	bl	8000618 <__aeabi_dmul>
 801bf9e:	4602      	mov	r2, r0
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	4630      	mov	r0, r6
 801bfa4:	4639      	mov	r1, r7
 801bfa6:	f7e4 f97f 	bl	80002a8 <__aeabi_dsub>
 801bfaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bfae:	f7e4 fb33 	bl	8000618 <__aeabi_dmul>
 801bfb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bfb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bfba:	4610      	mov	r0, r2
 801bfbc:	4619      	mov	r1, r3
 801bfbe:	f7e4 fb2b 	bl	8000618 <__aeabi_dmul>
 801bfc2:	a37b      	add	r3, pc, #492	; (adr r3, 801c1b0 <__ieee754_pow+0x6d0>)
 801bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc8:	4604      	mov	r4, r0
 801bfca:	460d      	mov	r5, r1
 801bfcc:	f7e4 fb24 	bl	8000618 <__aeabi_dmul>
 801bfd0:	a379      	add	r3, pc, #484	; (adr r3, 801c1b8 <__ieee754_pow+0x6d8>)
 801bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfd6:	f7e4 f969 	bl	80002ac <__adddf3>
 801bfda:	4622      	mov	r2, r4
 801bfdc:	462b      	mov	r3, r5
 801bfde:	f7e4 fb1b 	bl	8000618 <__aeabi_dmul>
 801bfe2:	a377      	add	r3, pc, #476	; (adr r3, 801c1c0 <__ieee754_pow+0x6e0>)
 801bfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfe8:	f7e4 f960 	bl	80002ac <__adddf3>
 801bfec:	4622      	mov	r2, r4
 801bfee:	462b      	mov	r3, r5
 801bff0:	f7e4 fb12 	bl	8000618 <__aeabi_dmul>
 801bff4:	a374      	add	r3, pc, #464	; (adr r3, 801c1c8 <__ieee754_pow+0x6e8>)
 801bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bffa:	f7e4 f957 	bl	80002ac <__adddf3>
 801bffe:	4622      	mov	r2, r4
 801c000:	462b      	mov	r3, r5
 801c002:	f7e4 fb09 	bl	8000618 <__aeabi_dmul>
 801c006:	a372      	add	r3, pc, #456	; (adr r3, 801c1d0 <__ieee754_pow+0x6f0>)
 801c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c00c:	f7e4 f94e 	bl	80002ac <__adddf3>
 801c010:	4622      	mov	r2, r4
 801c012:	462b      	mov	r3, r5
 801c014:	f7e4 fb00 	bl	8000618 <__aeabi_dmul>
 801c018:	a36f      	add	r3, pc, #444	; (adr r3, 801c1d8 <__ieee754_pow+0x6f8>)
 801c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c01e:	f7e4 f945 	bl	80002ac <__adddf3>
 801c022:	4622      	mov	r2, r4
 801c024:	4606      	mov	r6, r0
 801c026:	460f      	mov	r7, r1
 801c028:	462b      	mov	r3, r5
 801c02a:	4620      	mov	r0, r4
 801c02c:	4629      	mov	r1, r5
 801c02e:	f7e4 faf3 	bl	8000618 <__aeabi_dmul>
 801c032:	4602      	mov	r2, r0
 801c034:	460b      	mov	r3, r1
 801c036:	4630      	mov	r0, r6
 801c038:	4639      	mov	r1, r7
 801c03a:	f7e4 faed 	bl	8000618 <__aeabi_dmul>
 801c03e:	4642      	mov	r2, r8
 801c040:	4604      	mov	r4, r0
 801c042:	460d      	mov	r5, r1
 801c044:	464b      	mov	r3, r9
 801c046:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c04a:	f7e4 f92f 	bl	80002ac <__adddf3>
 801c04e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c052:	f7e4 fae1 	bl	8000618 <__aeabi_dmul>
 801c056:	4622      	mov	r2, r4
 801c058:	462b      	mov	r3, r5
 801c05a:	f7e4 f927 	bl	80002ac <__adddf3>
 801c05e:	4642      	mov	r2, r8
 801c060:	4606      	mov	r6, r0
 801c062:	460f      	mov	r7, r1
 801c064:	464b      	mov	r3, r9
 801c066:	4640      	mov	r0, r8
 801c068:	4649      	mov	r1, r9
 801c06a:	f7e4 fad5 	bl	8000618 <__aeabi_dmul>
 801c06e:	2200      	movs	r2, #0
 801c070:	4b68      	ldr	r3, [pc, #416]	; (801c214 <__ieee754_pow+0x734>)
 801c072:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c076:	f7e4 f919 	bl	80002ac <__adddf3>
 801c07a:	4632      	mov	r2, r6
 801c07c:	463b      	mov	r3, r7
 801c07e:	f7e4 f915 	bl	80002ac <__adddf3>
 801c082:	9802      	ldr	r0, [sp, #8]
 801c084:	460d      	mov	r5, r1
 801c086:	4604      	mov	r4, r0
 801c088:	4602      	mov	r2, r0
 801c08a:	460b      	mov	r3, r1
 801c08c:	4640      	mov	r0, r8
 801c08e:	4649      	mov	r1, r9
 801c090:	f7e4 fac2 	bl	8000618 <__aeabi_dmul>
 801c094:	2200      	movs	r2, #0
 801c096:	4680      	mov	r8, r0
 801c098:	4689      	mov	r9, r1
 801c09a:	4b5e      	ldr	r3, [pc, #376]	; (801c214 <__ieee754_pow+0x734>)
 801c09c:	4620      	mov	r0, r4
 801c09e:	4629      	mov	r1, r5
 801c0a0:	f7e4 f902 	bl	80002a8 <__aeabi_dsub>
 801c0a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c0a8:	f7e4 f8fe 	bl	80002a8 <__aeabi_dsub>
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	460b      	mov	r3, r1
 801c0b0:	4630      	mov	r0, r6
 801c0b2:	4639      	mov	r1, r7
 801c0b4:	f7e4 f8f8 	bl	80002a8 <__aeabi_dsub>
 801c0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c0bc:	f7e4 faac 	bl	8000618 <__aeabi_dmul>
 801c0c0:	4622      	mov	r2, r4
 801c0c2:	4606      	mov	r6, r0
 801c0c4:	460f      	mov	r7, r1
 801c0c6:	462b      	mov	r3, r5
 801c0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c0cc:	f7e4 faa4 	bl	8000618 <__aeabi_dmul>
 801c0d0:	4602      	mov	r2, r0
 801c0d2:	460b      	mov	r3, r1
 801c0d4:	4630      	mov	r0, r6
 801c0d6:	4639      	mov	r1, r7
 801c0d8:	f7e4 f8e8 	bl	80002ac <__adddf3>
 801c0dc:	4606      	mov	r6, r0
 801c0de:	460f      	mov	r7, r1
 801c0e0:	4602      	mov	r2, r0
 801c0e2:	460b      	mov	r3, r1
 801c0e4:	4640      	mov	r0, r8
 801c0e6:	4649      	mov	r1, r9
 801c0e8:	f7e4 f8e0 	bl	80002ac <__adddf3>
 801c0ec:	9802      	ldr	r0, [sp, #8]
 801c0ee:	a33c      	add	r3, pc, #240	; (adr r3, 801c1e0 <__ieee754_pow+0x700>)
 801c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f4:	4604      	mov	r4, r0
 801c0f6:	460d      	mov	r5, r1
 801c0f8:	f7e4 fa8e 	bl	8000618 <__aeabi_dmul>
 801c0fc:	4642      	mov	r2, r8
 801c0fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c102:	464b      	mov	r3, r9
 801c104:	4620      	mov	r0, r4
 801c106:	4629      	mov	r1, r5
 801c108:	f7e4 f8ce 	bl	80002a8 <__aeabi_dsub>
 801c10c:	4602      	mov	r2, r0
 801c10e:	460b      	mov	r3, r1
 801c110:	4630      	mov	r0, r6
 801c112:	4639      	mov	r1, r7
 801c114:	f7e4 f8c8 	bl	80002a8 <__aeabi_dsub>
 801c118:	a333      	add	r3, pc, #204	; (adr r3, 801c1e8 <__ieee754_pow+0x708>)
 801c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c11e:	f7e4 fa7b 	bl	8000618 <__aeabi_dmul>
 801c122:	a333      	add	r3, pc, #204	; (adr r3, 801c1f0 <__ieee754_pow+0x710>)
 801c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c128:	4606      	mov	r6, r0
 801c12a:	460f      	mov	r7, r1
 801c12c:	4620      	mov	r0, r4
 801c12e:	4629      	mov	r1, r5
 801c130:	f7e4 fa72 	bl	8000618 <__aeabi_dmul>
 801c134:	4602      	mov	r2, r0
 801c136:	460b      	mov	r3, r1
 801c138:	4630      	mov	r0, r6
 801c13a:	4639      	mov	r1, r7
 801c13c:	f7e4 f8b6 	bl	80002ac <__adddf3>
 801c140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c142:	4b35      	ldr	r3, [pc, #212]	; (801c218 <__ieee754_pow+0x738>)
 801c144:	4413      	add	r3, r2
 801c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c14a:	f7e4 f8af 	bl	80002ac <__adddf3>
 801c14e:	4604      	mov	r4, r0
 801c150:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c152:	460d      	mov	r5, r1
 801c154:	f7e4 f9f6 	bl	8000544 <__aeabi_i2d>
 801c158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c15a:	4b30      	ldr	r3, [pc, #192]	; (801c21c <__ieee754_pow+0x73c>)
 801c15c:	4413      	add	r3, r2
 801c15e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c162:	4606      	mov	r6, r0
 801c164:	460f      	mov	r7, r1
 801c166:	4622      	mov	r2, r4
 801c168:	462b      	mov	r3, r5
 801c16a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c16e:	f7e4 f89d 	bl	80002ac <__adddf3>
 801c172:	4642      	mov	r2, r8
 801c174:	464b      	mov	r3, r9
 801c176:	f7e4 f899 	bl	80002ac <__adddf3>
 801c17a:	4632      	mov	r2, r6
 801c17c:	463b      	mov	r3, r7
 801c17e:	f7e4 f895 	bl	80002ac <__adddf3>
 801c182:	9802      	ldr	r0, [sp, #8]
 801c184:	4632      	mov	r2, r6
 801c186:	463b      	mov	r3, r7
 801c188:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c18c:	f7e4 f88c 	bl	80002a8 <__aeabi_dsub>
 801c190:	4642      	mov	r2, r8
 801c192:	464b      	mov	r3, r9
 801c194:	f7e4 f888 	bl	80002a8 <__aeabi_dsub>
 801c198:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c19c:	e607      	b.n	801bdae <__ieee754_pow+0x2ce>
 801c19e:	f04f 0a01 	mov.w	sl, #1
 801c1a2:	e6a5      	b.n	801bef0 <__ieee754_pow+0x410>
 801c1a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801c1f8 <__ieee754_pow+0x718>
 801c1a8:	e613      	b.n	801bdd2 <__ieee754_pow+0x2f2>
 801c1aa:	bf00      	nop
 801c1ac:	f3af 8000 	nop.w
 801c1b0:	4a454eef 	.word	0x4a454eef
 801c1b4:	3fca7e28 	.word	0x3fca7e28
 801c1b8:	93c9db65 	.word	0x93c9db65
 801c1bc:	3fcd864a 	.word	0x3fcd864a
 801c1c0:	a91d4101 	.word	0xa91d4101
 801c1c4:	3fd17460 	.word	0x3fd17460
 801c1c8:	518f264d 	.word	0x518f264d
 801c1cc:	3fd55555 	.word	0x3fd55555
 801c1d0:	db6fabff 	.word	0xdb6fabff
 801c1d4:	3fdb6db6 	.word	0x3fdb6db6
 801c1d8:	33333303 	.word	0x33333303
 801c1dc:	3fe33333 	.word	0x3fe33333
 801c1e0:	e0000000 	.word	0xe0000000
 801c1e4:	3feec709 	.word	0x3feec709
 801c1e8:	dc3a03fd 	.word	0xdc3a03fd
 801c1ec:	3feec709 	.word	0x3feec709
 801c1f0:	145b01f5 	.word	0x145b01f5
 801c1f4:	be3e2fe0 	.word	0xbe3e2fe0
 801c1f8:	00000000 	.word	0x00000000
 801c1fc:	3ff00000 	.word	0x3ff00000
 801c200:	43400000 	.word	0x43400000
 801c204:	0003988e 	.word	0x0003988e
 801c208:	000bb679 	.word	0x000bb679
 801c20c:	0801e5b0 	.word	0x0801e5b0
 801c210:	3ff00000 	.word	0x3ff00000
 801c214:	40080000 	.word	0x40080000
 801c218:	0801e5d0 	.word	0x0801e5d0
 801c21c:	0801e5c0 	.word	0x0801e5c0
 801c220:	a3b4      	add	r3, pc, #720	; (adr r3, 801c4f4 <__ieee754_pow+0xa14>)
 801c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c226:	4640      	mov	r0, r8
 801c228:	4649      	mov	r1, r9
 801c22a:	f7e4 f83f 	bl	80002ac <__adddf3>
 801c22e:	4622      	mov	r2, r4
 801c230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c234:	462b      	mov	r3, r5
 801c236:	4630      	mov	r0, r6
 801c238:	4639      	mov	r1, r7
 801c23a:	f7e4 f835 	bl	80002a8 <__aeabi_dsub>
 801c23e:	4602      	mov	r2, r0
 801c240:	460b      	mov	r3, r1
 801c242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c246:	f7e4 fc77 	bl	8000b38 <__aeabi_dcmpgt>
 801c24a:	2800      	cmp	r0, #0
 801c24c:	f47f adfe 	bne.w	801be4c <__ieee754_pow+0x36c>
 801c250:	4aa3      	ldr	r2, [pc, #652]	; (801c4e0 <__ieee754_pow+0xa00>)
 801c252:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c256:	4293      	cmp	r3, r2
 801c258:	f340 810a 	ble.w	801c470 <__ieee754_pow+0x990>
 801c25c:	151b      	asrs	r3, r3, #20
 801c25e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c262:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c266:	fa4a f303 	asr.w	r3, sl, r3
 801c26a:	445b      	add	r3, fp
 801c26c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c270:	4e9c      	ldr	r6, [pc, #624]	; (801c4e4 <__ieee754_pow+0xa04>)
 801c272:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c276:	4116      	asrs	r6, r2
 801c278:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c27c:	2000      	movs	r0, #0
 801c27e:	ea23 0106 	bic.w	r1, r3, r6
 801c282:	f1c2 0214 	rsb	r2, r2, #20
 801c286:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c28a:	fa4a fa02 	asr.w	sl, sl, r2
 801c28e:	f1bb 0f00 	cmp.w	fp, #0
 801c292:	4602      	mov	r2, r0
 801c294:	460b      	mov	r3, r1
 801c296:	4620      	mov	r0, r4
 801c298:	4629      	mov	r1, r5
 801c29a:	bfb8      	it	lt
 801c29c:	f1ca 0a00 	rsblt	sl, sl, #0
 801c2a0:	f7e4 f802 	bl	80002a8 <__aeabi_dsub>
 801c2a4:	e9cd 0100 	strd	r0, r1, [sp]
 801c2a8:	4642      	mov	r2, r8
 801c2aa:	464b      	mov	r3, r9
 801c2ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c2b0:	f7e3 fffc 	bl	80002ac <__adddf3>
 801c2b4:	2000      	movs	r0, #0
 801c2b6:	a378      	add	r3, pc, #480	; (adr r3, 801c498 <__ieee754_pow+0x9b8>)
 801c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2bc:	4604      	mov	r4, r0
 801c2be:	460d      	mov	r5, r1
 801c2c0:	f7e4 f9aa 	bl	8000618 <__aeabi_dmul>
 801c2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c2c8:	4606      	mov	r6, r0
 801c2ca:	460f      	mov	r7, r1
 801c2cc:	4620      	mov	r0, r4
 801c2ce:	4629      	mov	r1, r5
 801c2d0:	f7e3 ffea 	bl	80002a8 <__aeabi_dsub>
 801c2d4:	4602      	mov	r2, r0
 801c2d6:	460b      	mov	r3, r1
 801c2d8:	4640      	mov	r0, r8
 801c2da:	4649      	mov	r1, r9
 801c2dc:	f7e3 ffe4 	bl	80002a8 <__aeabi_dsub>
 801c2e0:	a36f      	add	r3, pc, #444	; (adr r3, 801c4a0 <__ieee754_pow+0x9c0>)
 801c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2e6:	f7e4 f997 	bl	8000618 <__aeabi_dmul>
 801c2ea:	a36f      	add	r3, pc, #444	; (adr r3, 801c4a8 <__ieee754_pow+0x9c8>)
 801c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f0:	4680      	mov	r8, r0
 801c2f2:	4689      	mov	r9, r1
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	4629      	mov	r1, r5
 801c2f8:	f7e4 f98e 	bl	8000618 <__aeabi_dmul>
 801c2fc:	4602      	mov	r2, r0
 801c2fe:	460b      	mov	r3, r1
 801c300:	4640      	mov	r0, r8
 801c302:	4649      	mov	r1, r9
 801c304:	f7e3 ffd2 	bl	80002ac <__adddf3>
 801c308:	4604      	mov	r4, r0
 801c30a:	460d      	mov	r5, r1
 801c30c:	4602      	mov	r2, r0
 801c30e:	460b      	mov	r3, r1
 801c310:	4630      	mov	r0, r6
 801c312:	4639      	mov	r1, r7
 801c314:	f7e3 ffca 	bl	80002ac <__adddf3>
 801c318:	4632      	mov	r2, r6
 801c31a:	463b      	mov	r3, r7
 801c31c:	4680      	mov	r8, r0
 801c31e:	4689      	mov	r9, r1
 801c320:	f7e3 ffc2 	bl	80002a8 <__aeabi_dsub>
 801c324:	4602      	mov	r2, r0
 801c326:	460b      	mov	r3, r1
 801c328:	4620      	mov	r0, r4
 801c32a:	4629      	mov	r1, r5
 801c32c:	f7e3 ffbc 	bl	80002a8 <__aeabi_dsub>
 801c330:	4642      	mov	r2, r8
 801c332:	4606      	mov	r6, r0
 801c334:	460f      	mov	r7, r1
 801c336:	464b      	mov	r3, r9
 801c338:	4640      	mov	r0, r8
 801c33a:	4649      	mov	r1, r9
 801c33c:	f7e4 f96c 	bl	8000618 <__aeabi_dmul>
 801c340:	a35b      	add	r3, pc, #364	; (adr r3, 801c4b0 <__ieee754_pow+0x9d0>)
 801c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c346:	4604      	mov	r4, r0
 801c348:	460d      	mov	r5, r1
 801c34a:	f7e4 f965 	bl	8000618 <__aeabi_dmul>
 801c34e:	a35a      	add	r3, pc, #360	; (adr r3, 801c4b8 <__ieee754_pow+0x9d8>)
 801c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c354:	f7e3 ffa8 	bl	80002a8 <__aeabi_dsub>
 801c358:	4622      	mov	r2, r4
 801c35a:	462b      	mov	r3, r5
 801c35c:	f7e4 f95c 	bl	8000618 <__aeabi_dmul>
 801c360:	a357      	add	r3, pc, #348	; (adr r3, 801c4c0 <__ieee754_pow+0x9e0>)
 801c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c366:	f7e3 ffa1 	bl	80002ac <__adddf3>
 801c36a:	4622      	mov	r2, r4
 801c36c:	462b      	mov	r3, r5
 801c36e:	f7e4 f953 	bl	8000618 <__aeabi_dmul>
 801c372:	a355      	add	r3, pc, #340	; (adr r3, 801c4c8 <__ieee754_pow+0x9e8>)
 801c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c378:	f7e3 ff96 	bl	80002a8 <__aeabi_dsub>
 801c37c:	4622      	mov	r2, r4
 801c37e:	462b      	mov	r3, r5
 801c380:	f7e4 f94a 	bl	8000618 <__aeabi_dmul>
 801c384:	a352      	add	r3, pc, #328	; (adr r3, 801c4d0 <__ieee754_pow+0x9f0>)
 801c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c38a:	f7e3 ff8f 	bl	80002ac <__adddf3>
 801c38e:	4622      	mov	r2, r4
 801c390:	462b      	mov	r3, r5
 801c392:	f7e4 f941 	bl	8000618 <__aeabi_dmul>
 801c396:	4602      	mov	r2, r0
 801c398:	460b      	mov	r3, r1
 801c39a:	4640      	mov	r0, r8
 801c39c:	4649      	mov	r1, r9
 801c39e:	f7e3 ff83 	bl	80002a8 <__aeabi_dsub>
 801c3a2:	4604      	mov	r4, r0
 801c3a4:	460d      	mov	r5, r1
 801c3a6:	4602      	mov	r2, r0
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	4640      	mov	r0, r8
 801c3ac:	4649      	mov	r1, r9
 801c3ae:	f7e4 f933 	bl	8000618 <__aeabi_dmul>
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	e9cd 0100 	strd	r0, r1, [sp]
 801c3b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c3bc:	4620      	mov	r0, r4
 801c3be:	4629      	mov	r1, r5
 801c3c0:	f7e3 ff72 	bl	80002a8 <__aeabi_dsub>
 801c3c4:	4602      	mov	r2, r0
 801c3c6:	460b      	mov	r3, r1
 801c3c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c3cc:	f7e4 fa4e 	bl	800086c <__aeabi_ddiv>
 801c3d0:	4632      	mov	r2, r6
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	460d      	mov	r5, r1
 801c3d6:	463b      	mov	r3, r7
 801c3d8:	4640      	mov	r0, r8
 801c3da:	4649      	mov	r1, r9
 801c3dc:	f7e4 f91c 	bl	8000618 <__aeabi_dmul>
 801c3e0:	4632      	mov	r2, r6
 801c3e2:	463b      	mov	r3, r7
 801c3e4:	f7e3 ff62 	bl	80002ac <__adddf3>
 801c3e8:	4602      	mov	r2, r0
 801c3ea:	460b      	mov	r3, r1
 801c3ec:	4620      	mov	r0, r4
 801c3ee:	4629      	mov	r1, r5
 801c3f0:	f7e3 ff5a 	bl	80002a8 <__aeabi_dsub>
 801c3f4:	4642      	mov	r2, r8
 801c3f6:	464b      	mov	r3, r9
 801c3f8:	f7e3 ff56 	bl	80002a8 <__aeabi_dsub>
 801c3fc:	4602      	mov	r2, r0
 801c3fe:	460b      	mov	r3, r1
 801c400:	2000      	movs	r0, #0
 801c402:	4939      	ldr	r1, [pc, #228]	; (801c4e8 <__ieee754_pow+0xa08>)
 801c404:	f7e3 ff50 	bl	80002a8 <__aeabi_dsub>
 801c408:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c40c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c410:	4602      	mov	r2, r0
 801c412:	460b      	mov	r3, r1
 801c414:	da2f      	bge.n	801c476 <__ieee754_pow+0x996>
 801c416:	4650      	mov	r0, sl
 801c418:	ec43 2b10 	vmov	d0, r2, r3
 801c41c:	f001 faa4 	bl	801d968 <scalbn>
 801c420:	ec51 0b10 	vmov	r0, r1, d0
 801c424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c428:	f7ff bbf1 	b.w	801bc0e <__ieee754_pow+0x12e>
 801c42c:	4b2f      	ldr	r3, [pc, #188]	; (801c4ec <__ieee754_pow+0xa0c>)
 801c42e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c432:	429e      	cmp	r6, r3
 801c434:	f77f af0c 	ble.w	801c250 <__ieee754_pow+0x770>
 801c438:	4b2d      	ldr	r3, [pc, #180]	; (801c4f0 <__ieee754_pow+0xa10>)
 801c43a:	440b      	add	r3, r1
 801c43c:	4303      	orrs	r3, r0
 801c43e:	d00b      	beq.n	801c458 <__ieee754_pow+0x978>
 801c440:	a325      	add	r3, pc, #148	; (adr r3, 801c4d8 <__ieee754_pow+0x9f8>)
 801c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c44a:	f7e4 f8e5 	bl	8000618 <__aeabi_dmul>
 801c44e:	a322      	add	r3, pc, #136	; (adr r3, 801c4d8 <__ieee754_pow+0x9f8>)
 801c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c454:	f7ff bbdb 	b.w	801bc0e <__ieee754_pow+0x12e>
 801c458:	4622      	mov	r2, r4
 801c45a:	462b      	mov	r3, r5
 801c45c:	f7e3 ff24 	bl	80002a8 <__aeabi_dsub>
 801c460:	4642      	mov	r2, r8
 801c462:	464b      	mov	r3, r9
 801c464:	f7e4 fb5e 	bl	8000b24 <__aeabi_dcmpge>
 801c468:	2800      	cmp	r0, #0
 801c46a:	f43f aef1 	beq.w	801c250 <__ieee754_pow+0x770>
 801c46e:	e7e7      	b.n	801c440 <__ieee754_pow+0x960>
 801c470:	f04f 0a00 	mov.w	sl, #0
 801c474:	e718      	b.n	801c2a8 <__ieee754_pow+0x7c8>
 801c476:	4621      	mov	r1, r4
 801c478:	e7d4      	b.n	801c424 <__ieee754_pow+0x944>
 801c47a:	2000      	movs	r0, #0
 801c47c:	491a      	ldr	r1, [pc, #104]	; (801c4e8 <__ieee754_pow+0xa08>)
 801c47e:	f7ff bb8f 	b.w	801bba0 <__ieee754_pow+0xc0>
 801c482:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c486:	f7ff bb8b 	b.w	801bba0 <__ieee754_pow+0xc0>
 801c48a:	4630      	mov	r0, r6
 801c48c:	4639      	mov	r1, r7
 801c48e:	f7ff bb87 	b.w	801bba0 <__ieee754_pow+0xc0>
 801c492:	4693      	mov	fp, r2
 801c494:	f7ff bb98 	b.w	801bbc8 <__ieee754_pow+0xe8>
 801c498:	00000000 	.word	0x00000000
 801c49c:	3fe62e43 	.word	0x3fe62e43
 801c4a0:	fefa39ef 	.word	0xfefa39ef
 801c4a4:	3fe62e42 	.word	0x3fe62e42
 801c4a8:	0ca86c39 	.word	0x0ca86c39
 801c4ac:	be205c61 	.word	0xbe205c61
 801c4b0:	72bea4d0 	.word	0x72bea4d0
 801c4b4:	3e663769 	.word	0x3e663769
 801c4b8:	c5d26bf1 	.word	0xc5d26bf1
 801c4bc:	3ebbbd41 	.word	0x3ebbbd41
 801c4c0:	af25de2c 	.word	0xaf25de2c
 801c4c4:	3f11566a 	.word	0x3f11566a
 801c4c8:	16bebd93 	.word	0x16bebd93
 801c4cc:	3f66c16c 	.word	0x3f66c16c
 801c4d0:	5555553e 	.word	0x5555553e
 801c4d4:	3fc55555 	.word	0x3fc55555
 801c4d8:	c2f8f359 	.word	0xc2f8f359
 801c4dc:	01a56e1f 	.word	0x01a56e1f
 801c4e0:	3fe00000 	.word	0x3fe00000
 801c4e4:	000fffff 	.word	0x000fffff
 801c4e8:	3ff00000 	.word	0x3ff00000
 801c4ec:	4090cbff 	.word	0x4090cbff
 801c4f0:	3f6f3400 	.word	0x3f6f3400
 801c4f4:	652b82fe 	.word	0x652b82fe
 801c4f8:	3c971547 	.word	0x3c971547
 801c4fc:	00000000 	.word	0x00000000

0801c500 <__ieee754_rem_pio2>:
 801c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c504:	ec57 6b10 	vmov	r6, r7, d0
 801c508:	4bc3      	ldr	r3, [pc, #780]	; (801c818 <__ieee754_rem_pio2+0x318>)
 801c50a:	b08d      	sub	sp, #52	; 0x34
 801c50c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801c510:	4598      	cmp	r8, r3
 801c512:	4604      	mov	r4, r0
 801c514:	9704      	str	r7, [sp, #16]
 801c516:	dc07      	bgt.n	801c528 <__ieee754_rem_pio2+0x28>
 801c518:	2200      	movs	r2, #0
 801c51a:	2300      	movs	r3, #0
 801c51c:	ed84 0b00 	vstr	d0, [r4]
 801c520:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801c524:	2500      	movs	r5, #0
 801c526:	e027      	b.n	801c578 <__ieee754_rem_pio2+0x78>
 801c528:	4bbc      	ldr	r3, [pc, #752]	; (801c81c <__ieee754_rem_pio2+0x31c>)
 801c52a:	4598      	cmp	r8, r3
 801c52c:	dc75      	bgt.n	801c61a <__ieee754_rem_pio2+0x11a>
 801c52e:	9b04      	ldr	r3, [sp, #16]
 801c530:	4dbb      	ldr	r5, [pc, #748]	; (801c820 <__ieee754_rem_pio2+0x320>)
 801c532:	2b00      	cmp	r3, #0
 801c534:	ee10 0a10 	vmov	r0, s0
 801c538:	a3a9      	add	r3, pc, #676	; (adr r3, 801c7e0 <__ieee754_rem_pio2+0x2e0>)
 801c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c53e:	4639      	mov	r1, r7
 801c540:	dd36      	ble.n	801c5b0 <__ieee754_rem_pio2+0xb0>
 801c542:	f7e3 feb1 	bl	80002a8 <__aeabi_dsub>
 801c546:	45a8      	cmp	r8, r5
 801c548:	4606      	mov	r6, r0
 801c54a:	460f      	mov	r7, r1
 801c54c:	d018      	beq.n	801c580 <__ieee754_rem_pio2+0x80>
 801c54e:	a3a6      	add	r3, pc, #664	; (adr r3, 801c7e8 <__ieee754_rem_pio2+0x2e8>)
 801c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c554:	f7e3 fea8 	bl	80002a8 <__aeabi_dsub>
 801c558:	4602      	mov	r2, r0
 801c55a:	460b      	mov	r3, r1
 801c55c:	e9c4 2300 	strd	r2, r3, [r4]
 801c560:	4630      	mov	r0, r6
 801c562:	4639      	mov	r1, r7
 801c564:	f7e3 fea0 	bl	80002a8 <__aeabi_dsub>
 801c568:	a39f      	add	r3, pc, #636	; (adr r3, 801c7e8 <__ieee754_rem_pio2+0x2e8>)
 801c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c56e:	f7e3 fe9b 	bl	80002a8 <__aeabi_dsub>
 801c572:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c576:	2501      	movs	r5, #1
 801c578:	4628      	mov	r0, r5
 801c57a:	b00d      	add	sp, #52	; 0x34
 801c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c580:	a39b      	add	r3, pc, #620	; (adr r3, 801c7f0 <__ieee754_rem_pio2+0x2f0>)
 801c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c586:	f7e3 fe8f 	bl	80002a8 <__aeabi_dsub>
 801c58a:	a39b      	add	r3, pc, #620	; (adr r3, 801c7f8 <__ieee754_rem_pio2+0x2f8>)
 801c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c590:	4606      	mov	r6, r0
 801c592:	460f      	mov	r7, r1
 801c594:	f7e3 fe88 	bl	80002a8 <__aeabi_dsub>
 801c598:	4602      	mov	r2, r0
 801c59a:	460b      	mov	r3, r1
 801c59c:	e9c4 2300 	strd	r2, r3, [r4]
 801c5a0:	4630      	mov	r0, r6
 801c5a2:	4639      	mov	r1, r7
 801c5a4:	f7e3 fe80 	bl	80002a8 <__aeabi_dsub>
 801c5a8:	a393      	add	r3, pc, #588	; (adr r3, 801c7f8 <__ieee754_rem_pio2+0x2f8>)
 801c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5ae:	e7de      	b.n	801c56e <__ieee754_rem_pio2+0x6e>
 801c5b0:	f7e3 fe7c 	bl	80002ac <__adddf3>
 801c5b4:	45a8      	cmp	r8, r5
 801c5b6:	4606      	mov	r6, r0
 801c5b8:	460f      	mov	r7, r1
 801c5ba:	d016      	beq.n	801c5ea <__ieee754_rem_pio2+0xea>
 801c5bc:	a38a      	add	r3, pc, #552	; (adr r3, 801c7e8 <__ieee754_rem_pio2+0x2e8>)
 801c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5c2:	f7e3 fe73 	bl	80002ac <__adddf3>
 801c5c6:	4602      	mov	r2, r0
 801c5c8:	460b      	mov	r3, r1
 801c5ca:	e9c4 2300 	strd	r2, r3, [r4]
 801c5ce:	4630      	mov	r0, r6
 801c5d0:	4639      	mov	r1, r7
 801c5d2:	f7e3 fe69 	bl	80002a8 <__aeabi_dsub>
 801c5d6:	a384      	add	r3, pc, #528	; (adr r3, 801c7e8 <__ieee754_rem_pio2+0x2e8>)
 801c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5dc:	f7e3 fe66 	bl	80002ac <__adddf3>
 801c5e0:	f04f 35ff 	mov.w	r5, #4294967295
 801c5e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c5e8:	e7c6      	b.n	801c578 <__ieee754_rem_pio2+0x78>
 801c5ea:	a381      	add	r3, pc, #516	; (adr r3, 801c7f0 <__ieee754_rem_pio2+0x2f0>)
 801c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5f0:	f7e3 fe5c 	bl	80002ac <__adddf3>
 801c5f4:	a380      	add	r3, pc, #512	; (adr r3, 801c7f8 <__ieee754_rem_pio2+0x2f8>)
 801c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5fa:	4606      	mov	r6, r0
 801c5fc:	460f      	mov	r7, r1
 801c5fe:	f7e3 fe55 	bl	80002ac <__adddf3>
 801c602:	4602      	mov	r2, r0
 801c604:	460b      	mov	r3, r1
 801c606:	e9c4 2300 	strd	r2, r3, [r4]
 801c60a:	4630      	mov	r0, r6
 801c60c:	4639      	mov	r1, r7
 801c60e:	f7e3 fe4b 	bl	80002a8 <__aeabi_dsub>
 801c612:	a379      	add	r3, pc, #484	; (adr r3, 801c7f8 <__ieee754_rem_pio2+0x2f8>)
 801c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c618:	e7e0      	b.n	801c5dc <__ieee754_rem_pio2+0xdc>
 801c61a:	4b82      	ldr	r3, [pc, #520]	; (801c824 <__ieee754_rem_pio2+0x324>)
 801c61c:	4598      	cmp	r8, r3
 801c61e:	f300 80d0 	bgt.w	801c7c2 <__ieee754_rem_pio2+0x2c2>
 801c622:	f001 f879 	bl	801d718 <fabs>
 801c626:	ec57 6b10 	vmov	r6, r7, d0
 801c62a:	ee10 0a10 	vmov	r0, s0
 801c62e:	a374      	add	r3, pc, #464	; (adr r3, 801c800 <__ieee754_rem_pio2+0x300>)
 801c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c634:	4639      	mov	r1, r7
 801c636:	f7e3 ffef 	bl	8000618 <__aeabi_dmul>
 801c63a:	2200      	movs	r2, #0
 801c63c:	4b7a      	ldr	r3, [pc, #488]	; (801c828 <__ieee754_rem_pio2+0x328>)
 801c63e:	f7e3 fe35 	bl	80002ac <__adddf3>
 801c642:	f7e4 fa99 	bl	8000b78 <__aeabi_d2iz>
 801c646:	4605      	mov	r5, r0
 801c648:	f7e3 ff7c 	bl	8000544 <__aeabi_i2d>
 801c64c:	a364      	add	r3, pc, #400	; (adr r3, 801c7e0 <__ieee754_rem_pio2+0x2e0>)
 801c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c656:	f7e3 ffdf 	bl	8000618 <__aeabi_dmul>
 801c65a:	4602      	mov	r2, r0
 801c65c:	460b      	mov	r3, r1
 801c65e:	4630      	mov	r0, r6
 801c660:	4639      	mov	r1, r7
 801c662:	f7e3 fe21 	bl	80002a8 <__aeabi_dsub>
 801c666:	a360      	add	r3, pc, #384	; (adr r3, 801c7e8 <__ieee754_rem_pio2+0x2e8>)
 801c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c66c:	4682      	mov	sl, r0
 801c66e:	468b      	mov	fp, r1
 801c670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c674:	f7e3 ffd0 	bl	8000618 <__aeabi_dmul>
 801c678:	2d1f      	cmp	r5, #31
 801c67a:	4606      	mov	r6, r0
 801c67c:	460f      	mov	r7, r1
 801c67e:	dc0c      	bgt.n	801c69a <__ieee754_rem_pio2+0x19a>
 801c680:	1e6a      	subs	r2, r5, #1
 801c682:	4b6a      	ldr	r3, [pc, #424]	; (801c82c <__ieee754_rem_pio2+0x32c>)
 801c684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c688:	4543      	cmp	r3, r8
 801c68a:	d006      	beq.n	801c69a <__ieee754_rem_pio2+0x19a>
 801c68c:	4632      	mov	r2, r6
 801c68e:	463b      	mov	r3, r7
 801c690:	4650      	mov	r0, sl
 801c692:	4659      	mov	r1, fp
 801c694:	f7e3 fe08 	bl	80002a8 <__aeabi_dsub>
 801c698:	e00e      	b.n	801c6b8 <__ieee754_rem_pio2+0x1b8>
 801c69a:	4632      	mov	r2, r6
 801c69c:	463b      	mov	r3, r7
 801c69e:	4650      	mov	r0, sl
 801c6a0:	4659      	mov	r1, fp
 801c6a2:	f7e3 fe01 	bl	80002a8 <__aeabi_dsub>
 801c6a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801c6aa:	9305      	str	r3, [sp, #20]
 801c6ac:	9a05      	ldr	r2, [sp, #20]
 801c6ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c6b2:	1ad3      	subs	r3, r2, r3
 801c6b4:	2b10      	cmp	r3, #16
 801c6b6:	dc02      	bgt.n	801c6be <__ieee754_rem_pio2+0x1be>
 801c6b8:	e9c4 0100 	strd	r0, r1, [r4]
 801c6bc:	e039      	b.n	801c732 <__ieee754_rem_pio2+0x232>
 801c6be:	a34c      	add	r3, pc, #304	; (adr r3, 801c7f0 <__ieee754_rem_pio2+0x2f0>)
 801c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c6c8:	f7e3 ffa6 	bl	8000618 <__aeabi_dmul>
 801c6cc:	4606      	mov	r6, r0
 801c6ce:	460f      	mov	r7, r1
 801c6d0:	4602      	mov	r2, r0
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	4650      	mov	r0, sl
 801c6d6:	4659      	mov	r1, fp
 801c6d8:	f7e3 fde6 	bl	80002a8 <__aeabi_dsub>
 801c6dc:	4602      	mov	r2, r0
 801c6de:	460b      	mov	r3, r1
 801c6e0:	4680      	mov	r8, r0
 801c6e2:	4689      	mov	r9, r1
 801c6e4:	4650      	mov	r0, sl
 801c6e6:	4659      	mov	r1, fp
 801c6e8:	f7e3 fdde 	bl	80002a8 <__aeabi_dsub>
 801c6ec:	4632      	mov	r2, r6
 801c6ee:	463b      	mov	r3, r7
 801c6f0:	f7e3 fdda 	bl	80002a8 <__aeabi_dsub>
 801c6f4:	a340      	add	r3, pc, #256	; (adr r3, 801c7f8 <__ieee754_rem_pio2+0x2f8>)
 801c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	460f      	mov	r7, r1
 801c6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c702:	f7e3 ff89 	bl	8000618 <__aeabi_dmul>
 801c706:	4632      	mov	r2, r6
 801c708:	463b      	mov	r3, r7
 801c70a:	f7e3 fdcd 	bl	80002a8 <__aeabi_dsub>
 801c70e:	4602      	mov	r2, r0
 801c710:	460b      	mov	r3, r1
 801c712:	4606      	mov	r6, r0
 801c714:	460f      	mov	r7, r1
 801c716:	4640      	mov	r0, r8
 801c718:	4649      	mov	r1, r9
 801c71a:	f7e3 fdc5 	bl	80002a8 <__aeabi_dsub>
 801c71e:	9a05      	ldr	r2, [sp, #20]
 801c720:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	2b31      	cmp	r3, #49	; 0x31
 801c728:	dc20      	bgt.n	801c76c <__ieee754_rem_pio2+0x26c>
 801c72a:	e9c4 0100 	strd	r0, r1, [r4]
 801c72e:	46c2      	mov	sl, r8
 801c730:	46cb      	mov	fp, r9
 801c732:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c736:	4650      	mov	r0, sl
 801c738:	4642      	mov	r2, r8
 801c73a:	464b      	mov	r3, r9
 801c73c:	4659      	mov	r1, fp
 801c73e:	f7e3 fdb3 	bl	80002a8 <__aeabi_dsub>
 801c742:	463b      	mov	r3, r7
 801c744:	4632      	mov	r2, r6
 801c746:	f7e3 fdaf 	bl	80002a8 <__aeabi_dsub>
 801c74a:	9b04      	ldr	r3, [sp, #16]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c752:	f6bf af11 	bge.w	801c578 <__ieee754_rem_pio2+0x78>
 801c756:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c75a:	6063      	str	r3, [r4, #4]
 801c75c:	f8c4 8000 	str.w	r8, [r4]
 801c760:	60a0      	str	r0, [r4, #8]
 801c762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c766:	60e3      	str	r3, [r4, #12]
 801c768:	426d      	negs	r5, r5
 801c76a:	e705      	b.n	801c578 <__ieee754_rem_pio2+0x78>
 801c76c:	a326      	add	r3, pc, #152	; (adr r3, 801c808 <__ieee754_rem_pio2+0x308>)
 801c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c776:	f7e3 ff4f 	bl	8000618 <__aeabi_dmul>
 801c77a:	4606      	mov	r6, r0
 801c77c:	460f      	mov	r7, r1
 801c77e:	4602      	mov	r2, r0
 801c780:	460b      	mov	r3, r1
 801c782:	4640      	mov	r0, r8
 801c784:	4649      	mov	r1, r9
 801c786:	f7e3 fd8f 	bl	80002a8 <__aeabi_dsub>
 801c78a:	4602      	mov	r2, r0
 801c78c:	460b      	mov	r3, r1
 801c78e:	4682      	mov	sl, r0
 801c790:	468b      	mov	fp, r1
 801c792:	4640      	mov	r0, r8
 801c794:	4649      	mov	r1, r9
 801c796:	f7e3 fd87 	bl	80002a8 <__aeabi_dsub>
 801c79a:	4632      	mov	r2, r6
 801c79c:	463b      	mov	r3, r7
 801c79e:	f7e3 fd83 	bl	80002a8 <__aeabi_dsub>
 801c7a2:	a31b      	add	r3, pc, #108	; (adr r3, 801c810 <__ieee754_rem_pio2+0x310>)
 801c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a8:	4606      	mov	r6, r0
 801c7aa:	460f      	mov	r7, r1
 801c7ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c7b0:	f7e3 ff32 	bl	8000618 <__aeabi_dmul>
 801c7b4:	4632      	mov	r2, r6
 801c7b6:	463b      	mov	r3, r7
 801c7b8:	f7e3 fd76 	bl	80002a8 <__aeabi_dsub>
 801c7bc:	4606      	mov	r6, r0
 801c7be:	460f      	mov	r7, r1
 801c7c0:	e764      	b.n	801c68c <__ieee754_rem_pio2+0x18c>
 801c7c2:	4b1b      	ldr	r3, [pc, #108]	; (801c830 <__ieee754_rem_pio2+0x330>)
 801c7c4:	4598      	cmp	r8, r3
 801c7c6:	dd35      	ble.n	801c834 <__ieee754_rem_pio2+0x334>
 801c7c8:	ee10 2a10 	vmov	r2, s0
 801c7cc:	463b      	mov	r3, r7
 801c7ce:	4630      	mov	r0, r6
 801c7d0:	4639      	mov	r1, r7
 801c7d2:	f7e3 fd69 	bl	80002a8 <__aeabi_dsub>
 801c7d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c7da:	e9c4 0100 	strd	r0, r1, [r4]
 801c7de:	e6a1      	b.n	801c524 <__ieee754_rem_pio2+0x24>
 801c7e0:	54400000 	.word	0x54400000
 801c7e4:	3ff921fb 	.word	0x3ff921fb
 801c7e8:	1a626331 	.word	0x1a626331
 801c7ec:	3dd0b461 	.word	0x3dd0b461
 801c7f0:	1a600000 	.word	0x1a600000
 801c7f4:	3dd0b461 	.word	0x3dd0b461
 801c7f8:	2e037073 	.word	0x2e037073
 801c7fc:	3ba3198a 	.word	0x3ba3198a
 801c800:	6dc9c883 	.word	0x6dc9c883
 801c804:	3fe45f30 	.word	0x3fe45f30
 801c808:	2e000000 	.word	0x2e000000
 801c80c:	3ba3198a 	.word	0x3ba3198a
 801c810:	252049c1 	.word	0x252049c1
 801c814:	397b839a 	.word	0x397b839a
 801c818:	3fe921fb 	.word	0x3fe921fb
 801c81c:	4002d97b 	.word	0x4002d97b
 801c820:	3ff921fb 	.word	0x3ff921fb
 801c824:	413921fb 	.word	0x413921fb
 801c828:	3fe00000 	.word	0x3fe00000
 801c82c:	0801e5e0 	.word	0x0801e5e0
 801c830:	7fefffff 	.word	0x7fefffff
 801c834:	ea4f 5528 	mov.w	r5, r8, asr #20
 801c838:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801c83c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801c840:	4630      	mov	r0, r6
 801c842:	460f      	mov	r7, r1
 801c844:	f7e4 f998 	bl	8000b78 <__aeabi_d2iz>
 801c848:	f7e3 fe7c 	bl	8000544 <__aeabi_i2d>
 801c84c:	4602      	mov	r2, r0
 801c84e:	460b      	mov	r3, r1
 801c850:	4630      	mov	r0, r6
 801c852:	4639      	mov	r1, r7
 801c854:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c858:	f7e3 fd26 	bl	80002a8 <__aeabi_dsub>
 801c85c:	2200      	movs	r2, #0
 801c85e:	4b1f      	ldr	r3, [pc, #124]	; (801c8dc <__ieee754_rem_pio2+0x3dc>)
 801c860:	f7e3 feda 	bl	8000618 <__aeabi_dmul>
 801c864:	460f      	mov	r7, r1
 801c866:	4606      	mov	r6, r0
 801c868:	f7e4 f986 	bl	8000b78 <__aeabi_d2iz>
 801c86c:	f7e3 fe6a 	bl	8000544 <__aeabi_i2d>
 801c870:	4602      	mov	r2, r0
 801c872:	460b      	mov	r3, r1
 801c874:	4630      	mov	r0, r6
 801c876:	4639      	mov	r1, r7
 801c878:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c87c:	f7e3 fd14 	bl	80002a8 <__aeabi_dsub>
 801c880:	2200      	movs	r2, #0
 801c882:	4b16      	ldr	r3, [pc, #88]	; (801c8dc <__ieee754_rem_pio2+0x3dc>)
 801c884:	f7e3 fec8 	bl	8000618 <__aeabi_dmul>
 801c888:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801c88c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801c890:	f04f 0803 	mov.w	r8, #3
 801c894:	2600      	movs	r6, #0
 801c896:	2700      	movs	r7, #0
 801c898:	4632      	mov	r2, r6
 801c89a:	463b      	mov	r3, r7
 801c89c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801c8a0:	f108 3aff 	add.w	sl, r8, #4294967295
 801c8a4:	f7e4 f920 	bl	8000ae8 <__aeabi_dcmpeq>
 801c8a8:	b9b0      	cbnz	r0, 801c8d8 <__ieee754_rem_pio2+0x3d8>
 801c8aa:	4b0d      	ldr	r3, [pc, #52]	; (801c8e0 <__ieee754_rem_pio2+0x3e0>)
 801c8ac:	9301      	str	r3, [sp, #4]
 801c8ae:	2302      	movs	r3, #2
 801c8b0:	9300      	str	r3, [sp, #0]
 801c8b2:	462a      	mov	r2, r5
 801c8b4:	4643      	mov	r3, r8
 801c8b6:	4621      	mov	r1, r4
 801c8b8:	a806      	add	r0, sp, #24
 801c8ba:	f000 f991 	bl	801cbe0 <__kernel_rem_pio2>
 801c8be:	9b04      	ldr	r3, [sp, #16]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	4605      	mov	r5, r0
 801c8c4:	f6bf ae58 	bge.w	801c578 <__ieee754_rem_pio2+0x78>
 801c8c8:	6863      	ldr	r3, [r4, #4]
 801c8ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c8ce:	6063      	str	r3, [r4, #4]
 801c8d0:	68e3      	ldr	r3, [r4, #12]
 801c8d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c8d6:	e746      	b.n	801c766 <__ieee754_rem_pio2+0x266>
 801c8d8:	46d0      	mov	r8, sl
 801c8da:	e7dd      	b.n	801c898 <__ieee754_rem_pio2+0x398>
 801c8dc:	41700000 	.word	0x41700000
 801c8e0:	0801e660 	.word	0x0801e660

0801c8e4 <__ieee754_sqrt>:
 801c8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8e8:	4955      	ldr	r1, [pc, #340]	; (801ca40 <__ieee754_sqrt+0x15c>)
 801c8ea:	ec55 4b10 	vmov	r4, r5, d0
 801c8ee:	43a9      	bics	r1, r5
 801c8f0:	462b      	mov	r3, r5
 801c8f2:	462a      	mov	r2, r5
 801c8f4:	d112      	bne.n	801c91c <__ieee754_sqrt+0x38>
 801c8f6:	ee10 2a10 	vmov	r2, s0
 801c8fa:	ee10 0a10 	vmov	r0, s0
 801c8fe:	4629      	mov	r1, r5
 801c900:	f7e3 fe8a 	bl	8000618 <__aeabi_dmul>
 801c904:	4602      	mov	r2, r0
 801c906:	460b      	mov	r3, r1
 801c908:	4620      	mov	r0, r4
 801c90a:	4629      	mov	r1, r5
 801c90c:	f7e3 fcce 	bl	80002ac <__adddf3>
 801c910:	4604      	mov	r4, r0
 801c912:	460d      	mov	r5, r1
 801c914:	ec45 4b10 	vmov	d0, r4, r5
 801c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c91c:	2d00      	cmp	r5, #0
 801c91e:	ee10 0a10 	vmov	r0, s0
 801c922:	4621      	mov	r1, r4
 801c924:	dc0f      	bgt.n	801c946 <__ieee754_sqrt+0x62>
 801c926:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c92a:	4330      	orrs	r0, r6
 801c92c:	d0f2      	beq.n	801c914 <__ieee754_sqrt+0x30>
 801c92e:	b155      	cbz	r5, 801c946 <__ieee754_sqrt+0x62>
 801c930:	ee10 2a10 	vmov	r2, s0
 801c934:	4620      	mov	r0, r4
 801c936:	4629      	mov	r1, r5
 801c938:	f7e3 fcb6 	bl	80002a8 <__aeabi_dsub>
 801c93c:	4602      	mov	r2, r0
 801c93e:	460b      	mov	r3, r1
 801c940:	f7e3 ff94 	bl	800086c <__aeabi_ddiv>
 801c944:	e7e4      	b.n	801c910 <__ieee754_sqrt+0x2c>
 801c946:	151b      	asrs	r3, r3, #20
 801c948:	d073      	beq.n	801ca32 <__ieee754_sqrt+0x14e>
 801c94a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c94e:	07dd      	lsls	r5, r3, #31
 801c950:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c954:	bf48      	it	mi
 801c956:	0fc8      	lsrmi	r0, r1, #31
 801c958:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c95c:	bf44      	itt	mi
 801c95e:	0049      	lslmi	r1, r1, #1
 801c960:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c964:	2500      	movs	r5, #0
 801c966:	1058      	asrs	r0, r3, #1
 801c968:	0fcb      	lsrs	r3, r1, #31
 801c96a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c96e:	0049      	lsls	r1, r1, #1
 801c970:	2316      	movs	r3, #22
 801c972:	462c      	mov	r4, r5
 801c974:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c978:	19a7      	adds	r7, r4, r6
 801c97a:	4297      	cmp	r7, r2
 801c97c:	bfde      	ittt	le
 801c97e:	19bc      	addle	r4, r7, r6
 801c980:	1bd2      	suble	r2, r2, r7
 801c982:	19ad      	addle	r5, r5, r6
 801c984:	0fcf      	lsrs	r7, r1, #31
 801c986:	3b01      	subs	r3, #1
 801c988:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c98c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c990:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c994:	d1f0      	bne.n	801c978 <__ieee754_sqrt+0x94>
 801c996:	f04f 0c20 	mov.w	ip, #32
 801c99a:	469e      	mov	lr, r3
 801c99c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c9a0:	42a2      	cmp	r2, r4
 801c9a2:	eb06 070e 	add.w	r7, r6, lr
 801c9a6:	dc02      	bgt.n	801c9ae <__ieee754_sqrt+0xca>
 801c9a8:	d112      	bne.n	801c9d0 <__ieee754_sqrt+0xec>
 801c9aa:	428f      	cmp	r7, r1
 801c9ac:	d810      	bhi.n	801c9d0 <__ieee754_sqrt+0xec>
 801c9ae:	2f00      	cmp	r7, #0
 801c9b0:	eb07 0e06 	add.w	lr, r7, r6
 801c9b4:	da42      	bge.n	801ca3c <__ieee754_sqrt+0x158>
 801c9b6:	f1be 0f00 	cmp.w	lr, #0
 801c9ba:	db3f      	blt.n	801ca3c <__ieee754_sqrt+0x158>
 801c9bc:	f104 0801 	add.w	r8, r4, #1
 801c9c0:	1b12      	subs	r2, r2, r4
 801c9c2:	428f      	cmp	r7, r1
 801c9c4:	bf88      	it	hi
 801c9c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c9ca:	1bc9      	subs	r1, r1, r7
 801c9cc:	4433      	add	r3, r6
 801c9ce:	4644      	mov	r4, r8
 801c9d0:	0052      	lsls	r2, r2, #1
 801c9d2:	f1bc 0c01 	subs.w	ip, ip, #1
 801c9d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c9da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c9de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c9e2:	d1dd      	bne.n	801c9a0 <__ieee754_sqrt+0xbc>
 801c9e4:	430a      	orrs	r2, r1
 801c9e6:	d006      	beq.n	801c9f6 <__ieee754_sqrt+0x112>
 801c9e8:	1c5c      	adds	r4, r3, #1
 801c9ea:	bf13      	iteet	ne
 801c9ec:	3301      	addne	r3, #1
 801c9ee:	3501      	addeq	r5, #1
 801c9f0:	4663      	moveq	r3, ip
 801c9f2:	f023 0301 	bicne.w	r3, r3, #1
 801c9f6:	106a      	asrs	r2, r5, #1
 801c9f8:	085b      	lsrs	r3, r3, #1
 801c9fa:	07e9      	lsls	r1, r5, #31
 801c9fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ca00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ca04:	bf48      	it	mi
 801ca06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ca0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801ca0e:	461c      	mov	r4, r3
 801ca10:	e780      	b.n	801c914 <__ieee754_sqrt+0x30>
 801ca12:	0aca      	lsrs	r2, r1, #11
 801ca14:	3815      	subs	r0, #21
 801ca16:	0549      	lsls	r1, r1, #21
 801ca18:	2a00      	cmp	r2, #0
 801ca1a:	d0fa      	beq.n	801ca12 <__ieee754_sqrt+0x12e>
 801ca1c:	02d6      	lsls	r6, r2, #11
 801ca1e:	d50a      	bpl.n	801ca36 <__ieee754_sqrt+0x152>
 801ca20:	f1c3 0420 	rsb	r4, r3, #32
 801ca24:	fa21 f404 	lsr.w	r4, r1, r4
 801ca28:	1e5d      	subs	r5, r3, #1
 801ca2a:	4099      	lsls	r1, r3
 801ca2c:	4322      	orrs	r2, r4
 801ca2e:	1b43      	subs	r3, r0, r5
 801ca30:	e78b      	b.n	801c94a <__ieee754_sqrt+0x66>
 801ca32:	4618      	mov	r0, r3
 801ca34:	e7f0      	b.n	801ca18 <__ieee754_sqrt+0x134>
 801ca36:	0052      	lsls	r2, r2, #1
 801ca38:	3301      	adds	r3, #1
 801ca3a:	e7ef      	b.n	801ca1c <__ieee754_sqrt+0x138>
 801ca3c:	46a0      	mov	r8, r4
 801ca3e:	e7bf      	b.n	801c9c0 <__ieee754_sqrt+0xdc>
 801ca40:	7ff00000 	.word	0x7ff00000

0801ca44 <__ieee754_sqrtf>:
 801ca44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ca48:	4770      	bx	lr
 801ca4a:	0000      	movs	r0, r0
 801ca4c:	0000      	movs	r0, r0
	...

0801ca50 <__kernel_cos>:
 801ca50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca54:	ec59 8b10 	vmov	r8, r9, d0
 801ca58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801ca5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801ca60:	ed2d 8b02 	vpush	{d8}
 801ca64:	eeb0 8a41 	vmov.f32	s16, s2
 801ca68:	eef0 8a61 	vmov.f32	s17, s3
 801ca6c:	da07      	bge.n	801ca7e <__kernel_cos+0x2e>
 801ca6e:	ee10 0a10 	vmov	r0, s0
 801ca72:	4649      	mov	r1, r9
 801ca74:	f7e4 f880 	bl	8000b78 <__aeabi_d2iz>
 801ca78:	2800      	cmp	r0, #0
 801ca7a:	f000 8089 	beq.w	801cb90 <__kernel_cos+0x140>
 801ca7e:	4642      	mov	r2, r8
 801ca80:	464b      	mov	r3, r9
 801ca82:	4640      	mov	r0, r8
 801ca84:	4649      	mov	r1, r9
 801ca86:	f7e3 fdc7 	bl	8000618 <__aeabi_dmul>
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	4b4e      	ldr	r3, [pc, #312]	; (801cbc8 <__kernel_cos+0x178>)
 801ca8e:	4604      	mov	r4, r0
 801ca90:	460d      	mov	r5, r1
 801ca92:	f7e3 fdc1 	bl	8000618 <__aeabi_dmul>
 801ca96:	a340      	add	r3, pc, #256	; (adr r3, 801cb98 <__kernel_cos+0x148>)
 801ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9c:	4682      	mov	sl, r0
 801ca9e:	468b      	mov	fp, r1
 801caa0:	4620      	mov	r0, r4
 801caa2:	4629      	mov	r1, r5
 801caa4:	f7e3 fdb8 	bl	8000618 <__aeabi_dmul>
 801caa8:	a33d      	add	r3, pc, #244	; (adr r3, 801cba0 <__kernel_cos+0x150>)
 801caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caae:	f7e3 fbfd 	bl	80002ac <__adddf3>
 801cab2:	4622      	mov	r2, r4
 801cab4:	462b      	mov	r3, r5
 801cab6:	f7e3 fdaf 	bl	8000618 <__aeabi_dmul>
 801caba:	a33b      	add	r3, pc, #236	; (adr r3, 801cba8 <__kernel_cos+0x158>)
 801cabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac0:	f7e3 fbf2 	bl	80002a8 <__aeabi_dsub>
 801cac4:	4622      	mov	r2, r4
 801cac6:	462b      	mov	r3, r5
 801cac8:	f7e3 fda6 	bl	8000618 <__aeabi_dmul>
 801cacc:	a338      	add	r3, pc, #224	; (adr r3, 801cbb0 <__kernel_cos+0x160>)
 801cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad2:	f7e3 fbeb 	bl	80002ac <__adddf3>
 801cad6:	4622      	mov	r2, r4
 801cad8:	462b      	mov	r3, r5
 801cada:	f7e3 fd9d 	bl	8000618 <__aeabi_dmul>
 801cade:	a336      	add	r3, pc, #216	; (adr r3, 801cbb8 <__kernel_cos+0x168>)
 801cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae4:	f7e3 fbe0 	bl	80002a8 <__aeabi_dsub>
 801cae8:	4622      	mov	r2, r4
 801caea:	462b      	mov	r3, r5
 801caec:	f7e3 fd94 	bl	8000618 <__aeabi_dmul>
 801caf0:	a333      	add	r3, pc, #204	; (adr r3, 801cbc0 <__kernel_cos+0x170>)
 801caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf6:	f7e3 fbd9 	bl	80002ac <__adddf3>
 801cafa:	4622      	mov	r2, r4
 801cafc:	462b      	mov	r3, r5
 801cafe:	f7e3 fd8b 	bl	8000618 <__aeabi_dmul>
 801cb02:	4622      	mov	r2, r4
 801cb04:	462b      	mov	r3, r5
 801cb06:	f7e3 fd87 	bl	8000618 <__aeabi_dmul>
 801cb0a:	ec53 2b18 	vmov	r2, r3, d8
 801cb0e:	4604      	mov	r4, r0
 801cb10:	460d      	mov	r5, r1
 801cb12:	4640      	mov	r0, r8
 801cb14:	4649      	mov	r1, r9
 801cb16:	f7e3 fd7f 	bl	8000618 <__aeabi_dmul>
 801cb1a:	460b      	mov	r3, r1
 801cb1c:	4602      	mov	r2, r0
 801cb1e:	4629      	mov	r1, r5
 801cb20:	4620      	mov	r0, r4
 801cb22:	f7e3 fbc1 	bl	80002a8 <__aeabi_dsub>
 801cb26:	4b29      	ldr	r3, [pc, #164]	; (801cbcc <__kernel_cos+0x17c>)
 801cb28:	429e      	cmp	r6, r3
 801cb2a:	4680      	mov	r8, r0
 801cb2c:	4689      	mov	r9, r1
 801cb2e:	dc11      	bgt.n	801cb54 <__kernel_cos+0x104>
 801cb30:	4602      	mov	r2, r0
 801cb32:	460b      	mov	r3, r1
 801cb34:	4650      	mov	r0, sl
 801cb36:	4659      	mov	r1, fp
 801cb38:	f7e3 fbb6 	bl	80002a8 <__aeabi_dsub>
 801cb3c:	460b      	mov	r3, r1
 801cb3e:	4924      	ldr	r1, [pc, #144]	; (801cbd0 <__kernel_cos+0x180>)
 801cb40:	4602      	mov	r2, r0
 801cb42:	2000      	movs	r0, #0
 801cb44:	f7e3 fbb0 	bl	80002a8 <__aeabi_dsub>
 801cb48:	ecbd 8b02 	vpop	{d8}
 801cb4c:	ec41 0b10 	vmov	d0, r0, r1
 801cb50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb54:	4b1f      	ldr	r3, [pc, #124]	; (801cbd4 <__kernel_cos+0x184>)
 801cb56:	491e      	ldr	r1, [pc, #120]	; (801cbd0 <__kernel_cos+0x180>)
 801cb58:	429e      	cmp	r6, r3
 801cb5a:	bfcc      	ite	gt
 801cb5c:	4d1e      	ldrgt	r5, [pc, #120]	; (801cbd8 <__kernel_cos+0x188>)
 801cb5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801cb62:	2400      	movs	r4, #0
 801cb64:	4622      	mov	r2, r4
 801cb66:	462b      	mov	r3, r5
 801cb68:	2000      	movs	r0, #0
 801cb6a:	f7e3 fb9d 	bl	80002a8 <__aeabi_dsub>
 801cb6e:	4622      	mov	r2, r4
 801cb70:	4606      	mov	r6, r0
 801cb72:	460f      	mov	r7, r1
 801cb74:	462b      	mov	r3, r5
 801cb76:	4650      	mov	r0, sl
 801cb78:	4659      	mov	r1, fp
 801cb7a:	f7e3 fb95 	bl	80002a8 <__aeabi_dsub>
 801cb7e:	4642      	mov	r2, r8
 801cb80:	464b      	mov	r3, r9
 801cb82:	f7e3 fb91 	bl	80002a8 <__aeabi_dsub>
 801cb86:	4602      	mov	r2, r0
 801cb88:	460b      	mov	r3, r1
 801cb8a:	4630      	mov	r0, r6
 801cb8c:	4639      	mov	r1, r7
 801cb8e:	e7d9      	b.n	801cb44 <__kernel_cos+0xf4>
 801cb90:	2000      	movs	r0, #0
 801cb92:	490f      	ldr	r1, [pc, #60]	; (801cbd0 <__kernel_cos+0x180>)
 801cb94:	e7d8      	b.n	801cb48 <__kernel_cos+0xf8>
 801cb96:	bf00      	nop
 801cb98:	be8838d4 	.word	0xbe8838d4
 801cb9c:	bda8fae9 	.word	0xbda8fae9
 801cba0:	bdb4b1c4 	.word	0xbdb4b1c4
 801cba4:	3e21ee9e 	.word	0x3e21ee9e
 801cba8:	809c52ad 	.word	0x809c52ad
 801cbac:	3e927e4f 	.word	0x3e927e4f
 801cbb0:	19cb1590 	.word	0x19cb1590
 801cbb4:	3efa01a0 	.word	0x3efa01a0
 801cbb8:	16c15177 	.word	0x16c15177
 801cbbc:	3f56c16c 	.word	0x3f56c16c
 801cbc0:	5555554c 	.word	0x5555554c
 801cbc4:	3fa55555 	.word	0x3fa55555
 801cbc8:	3fe00000 	.word	0x3fe00000
 801cbcc:	3fd33332 	.word	0x3fd33332
 801cbd0:	3ff00000 	.word	0x3ff00000
 801cbd4:	3fe90000 	.word	0x3fe90000
 801cbd8:	3fd20000 	.word	0x3fd20000
 801cbdc:	00000000 	.word	0x00000000

0801cbe0 <__kernel_rem_pio2>:
 801cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbe4:	ed2d 8b02 	vpush	{d8}
 801cbe8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801cbec:	1ed4      	subs	r4, r2, #3
 801cbee:	9308      	str	r3, [sp, #32]
 801cbf0:	9101      	str	r1, [sp, #4]
 801cbf2:	4bc5      	ldr	r3, [pc, #788]	; (801cf08 <__kernel_rem_pio2+0x328>)
 801cbf4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801cbf6:	9009      	str	r0, [sp, #36]	; 0x24
 801cbf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbfc:	9304      	str	r3, [sp, #16]
 801cbfe:	9b08      	ldr	r3, [sp, #32]
 801cc00:	3b01      	subs	r3, #1
 801cc02:	9307      	str	r3, [sp, #28]
 801cc04:	2318      	movs	r3, #24
 801cc06:	fb94 f4f3 	sdiv	r4, r4, r3
 801cc0a:	f06f 0317 	mvn.w	r3, #23
 801cc0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801cc12:	fb04 3303 	mla	r3, r4, r3, r3
 801cc16:	eb03 0a02 	add.w	sl, r3, r2
 801cc1a:	9b04      	ldr	r3, [sp, #16]
 801cc1c:	9a07      	ldr	r2, [sp, #28]
 801cc1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801cef8 <__kernel_rem_pio2+0x318>
 801cc22:	eb03 0802 	add.w	r8, r3, r2
 801cc26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801cc28:	1aa7      	subs	r7, r4, r2
 801cc2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801cc2e:	ae22      	add	r6, sp, #136	; 0x88
 801cc30:	2500      	movs	r5, #0
 801cc32:	4545      	cmp	r5, r8
 801cc34:	dd13      	ble.n	801cc5e <__kernel_rem_pio2+0x7e>
 801cc36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801cef8 <__kernel_rem_pio2+0x318>
 801cc3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801cc3e:	2600      	movs	r6, #0
 801cc40:	9b04      	ldr	r3, [sp, #16]
 801cc42:	429e      	cmp	r6, r3
 801cc44:	dc32      	bgt.n	801ccac <__kernel_rem_pio2+0xcc>
 801cc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc48:	9302      	str	r3, [sp, #8]
 801cc4a:	9b08      	ldr	r3, [sp, #32]
 801cc4c:	199d      	adds	r5, r3, r6
 801cc4e:	ab22      	add	r3, sp, #136	; 0x88
 801cc50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801cc54:	9306      	str	r3, [sp, #24]
 801cc56:	ec59 8b18 	vmov	r8, r9, d8
 801cc5a:	2700      	movs	r7, #0
 801cc5c:	e01f      	b.n	801cc9e <__kernel_rem_pio2+0xbe>
 801cc5e:	42ef      	cmn	r7, r5
 801cc60:	d407      	bmi.n	801cc72 <__kernel_rem_pio2+0x92>
 801cc62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801cc66:	f7e3 fc6d 	bl	8000544 <__aeabi_i2d>
 801cc6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801cc6e:	3501      	adds	r5, #1
 801cc70:	e7df      	b.n	801cc32 <__kernel_rem_pio2+0x52>
 801cc72:	ec51 0b18 	vmov	r0, r1, d8
 801cc76:	e7f8      	b.n	801cc6a <__kernel_rem_pio2+0x8a>
 801cc78:	9906      	ldr	r1, [sp, #24]
 801cc7a:	9d02      	ldr	r5, [sp, #8]
 801cc7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801cc80:	9106      	str	r1, [sp, #24]
 801cc82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801cc86:	9502      	str	r5, [sp, #8]
 801cc88:	f7e3 fcc6 	bl	8000618 <__aeabi_dmul>
 801cc8c:	4602      	mov	r2, r0
 801cc8e:	460b      	mov	r3, r1
 801cc90:	4640      	mov	r0, r8
 801cc92:	4649      	mov	r1, r9
 801cc94:	f7e3 fb0a 	bl	80002ac <__adddf3>
 801cc98:	3701      	adds	r7, #1
 801cc9a:	4680      	mov	r8, r0
 801cc9c:	4689      	mov	r9, r1
 801cc9e:	9b07      	ldr	r3, [sp, #28]
 801cca0:	429f      	cmp	r7, r3
 801cca2:	dde9      	ble.n	801cc78 <__kernel_rem_pio2+0x98>
 801cca4:	e8eb 8902 	strd	r8, r9, [fp], #8
 801cca8:	3601      	adds	r6, #1
 801ccaa:	e7c9      	b.n	801cc40 <__kernel_rem_pio2+0x60>
 801ccac:	9b04      	ldr	r3, [sp, #16]
 801ccae:	aa0e      	add	r2, sp, #56	; 0x38
 801ccb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ccb4:	930c      	str	r3, [sp, #48]	; 0x30
 801ccb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801ccb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ccbc:	9c04      	ldr	r4, [sp, #16]
 801ccbe:	930b      	str	r3, [sp, #44]	; 0x2c
 801ccc0:	ab9a      	add	r3, sp, #616	; 0x268
 801ccc2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801ccc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ccca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ccce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801ccd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801ccd6:	ab9a      	add	r3, sp, #616	; 0x268
 801ccd8:	445b      	add	r3, fp
 801ccda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801ccde:	2500      	movs	r5, #0
 801cce0:	1b63      	subs	r3, r4, r5
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	dc78      	bgt.n	801cdd8 <__kernel_rem_pio2+0x1f8>
 801cce6:	4650      	mov	r0, sl
 801cce8:	ec49 8b10 	vmov	d0, r8, r9
 801ccec:	f000 fe3c 	bl	801d968 <scalbn>
 801ccf0:	ec57 6b10 	vmov	r6, r7, d0
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ccfa:	ee10 0a10 	vmov	r0, s0
 801ccfe:	4639      	mov	r1, r7
 801cd00:	f7e3 fc8a 	bl	8000618 <__aeabi_dmul>
 801cd04:	ec41 0b10 	vmov	d0, r0, r1
 801cd08:	f000 fd1a 	bl	801d740 <floor>
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	ec51 0b10 	vmov	r0, r1, d0
 801cd12:	4b7e      	ldr	r3, [pc, #504]	; (801cf0c <__kernel_rem_pio2+0x32c>)
 801cd14:	f7e3 fc80 	bl	8000618 <__aeabi_dmul>
 801cd18:	4602      	mov	r2, r0
 801cd1a:	460b      	mov	r3, r1
 801cd1c:	4630      	mov	r0, r6
 801cd1e:	4639      	mov	r1, r7
 801cd20:	f7e3 fac2 	bl	80002a8 <__aeabi_dsub>
 801cd24:	460f      	mov	r7, r1
 801cd26:	4606      	mov	r6, r0
 801cd28:	f7e3 ff26 	bl	8000b78 <__aeabi_d2iz>
 801cd2c:	9006      	str	r0, [sp, #24]
 801cd2e:	f7e3 fc09 	bl	8000544 <__aeabi_i2d>
 801cd32:	4602      	mov	r2, r0
 801cd34:	460b      	mov	r3, r1
 801cd36:	4630      	mov	r0, r6
 801cd38:	4639      	mov	r1, r7
 801cd3a:	f7e3 fab5 	bl	80002a8 <__aeabi_dsub>
 801cd3e:	f1ba 0f00 	cmp.w	sl, #0
 801cd42:	4606      	mov	r6, r0
 801cd44:	460f      	mov	r7, r1
 801cd46:	dd6c      	ble.n	801ce22 <__kernel_rem_pio2+0x242>
 801cd48:	1e62      	subs	r2, r4, #1
 801cd4a:	ab0e      	add	r3, sp, #56	; 0x38
 801cd4c:	f1ca 0118 	rsb	r1, sl, #24
 801cd50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cd54:	9d06      	ldr	r5, [sp, #24]
 801cd56:	fa40 f301 	asr.w	r3, r0, r1
 801cd5a:	441d      	add	r5, r3
 801cd5c:	408b      	lsls	r3, r1
 801cd5e:	1ac0      	subs	r0, r0, r3
 801cd60:	ab0e      	add	r3, sp, #56	; 0x38
 801cd62:	9506      	str	r5, [sp, #24]
 801cd64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801cd68:	f1ca 0317 	rsb	r3, sl, #23
 801cd6c:	fa40 f303 	asr.w	r3, r0, r3
 801cd70:	9302      	str	r3, [sp, #8]
 801cd72:	9b02      	ldr	r3, [sp, #8]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	dd62      	ble.n	801ce3e <__kernel_rem_pio2+0x25e>
 801cd78:	9b06      	ldr	r3, [sp, #24]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	3301      	adds	r3, #1
 801cd7e:	9306      	str	r3, [sp, #24]
 801cd80:	4615      	mov	r5, r2
 801cd82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801cd86:	4294      	cmp	r4, r2
 801cd88:	f300 8095 	bgt.w	801ceb6 <__kernel_rem_pio2+0x2d6>
 801cd8c:	f1ba 0f00 	cmp.w	sl, #0
 801cd90:	dd07      	ble.n	801cda2 <__kernel_rem_pio2+0x1c2>
 801cd92:	f1ba 0f01 	cmp.w	sl, #1
 801cd96:	f000 80a2 	beq.w	801cede <__kernel_rem_pio2+0x2fe>
 801cd9a:	f1ba 0f02 	cmp.w	sl, #2
 801cd9e:	f000 80c1 	beq.w	801cf24 <__kernel_rem_pio2+0x344>
 801cda2:	9b02      	ldr	r3, [sp, #8]
 801cda4:	2b02      	cmp	r3, #2
 801cda6:	d14a      	bne.n	801ce3e <__kernel_rem_pio2+0x25e>
 801cda8:	4632      	mov	r2, r6
 801cdaa:	463b      	mov	r3, r7
 801cdac:	2000      	movs	r0, #0
 801cdae:	4958      	ldr	r1, [pc, #352]	; (801cf10 <__kernel_rem_pio2+0x330>)
 801cdb0:	f7e3 fa7a 	bl	80002a8 <__aeabi_dsub>
 801cdb4:	4606      	mov	r6, r0
 801cdb6:	460f      	mov	r7, r1
 801cdb8:	2d00      	cmp	r5, #0
 801cdba:	d040      	beq.n	801ce3e <__kernel_rem_pio2+0x25e>
 801cdbc:	4650      	mov	r0, sl
 801cdbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801cf00 <__kernel_rem_pio2+0x320>
 801cdc2:	f000 fdd1 	bl	801d968 <scalbn>
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	4639      	mov	r1, r7
 801cdca:	ec53 2b10 	vmov	r2, r3, d0
 801cdce:	f7e3 fa6b 	bl	80002a8 <__aeabi_dsub>
 801cdd2:	4606      	mov	r6, r0
 801cdd4:	460f      	mov	r7, r1
 801cdd6:	e032      	b.n	801ce3e <__kernel_rem_pio2+0x25e>
 801cdd8:	2200      	movs	r2, #0
 801cdda:	4b4e      	ldr	r3, [pc, #312]	; (801cf14 <__kernel_rem_pio2+0x334>)
 801cddc:	4640      	mov	r0, r8
 801cdde:	4649      	mov	r1, r9
 801cde0:	f7e3 fc1a 	bl	8000618 <__aeabi_dmul>
 801cde4:	f7e3 fec8 	bl	8000b78 <__aeabi_d2iz>
 801cde8:	f7e3 fbac 	bl	8000544 <__aeabi_i2d>
 801cdec:	2200      	movs	r2, #0
 801cdee:	4b4a      	ldr	r3, [pc, #296]	; (801cf18 <__kernel_rem_pio2+0x338>)
 801cdf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cdf4:	f7e3 fc10 	bl	8000618 <__aeabi_dmul>
 801cdf8:	4602      	mov	r2, r0
 801cdfa:	460b      	mov	r3, r1
 801cdfc:	4640      	mov	r0, r8
 801cdfe:	4649      	mov	r1, r9
 801ce00:	f7e3 fa52 	bl	80002a8 <__aeabi_dsub>
 801ce04:	f7e3 feb8 	bl	8000b78 <__aeabi_d2iz>
 801ce08:	ab0e      	add	r3, sp, #56	; 0x38
 801ce0a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801ce0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801ce12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ce16:	f7e3 fa49 	bl	80002ac <__adddf3>
 801ce1a:	3501      	adds	r5, #1
 801ce1c:	4680      	mov	r8, r0
 801ce1e:	4689      	mov	r9, r1
 801ce20:	e75e      	b.n	801cce0 <__kernel_rem_pio2+0x100>
 801ce22:	d105      	bne.n	801ce30 <__kernel_rem_pio2+0x250>
 801ce24:	1e63      	subs	r3, r4, #1
 801ce26:	aa0e      	add	r2, sp, #56	; 0x38
 801ce28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ce2c:	15c3      	asrs	r3, r0, #23
 801ce2e:	e79f      	b.n	801cd70 <__kernel_rem_pio2+0x190>
 801ce30:	2200      	movs	r2, #0
 801ce32:	4b3a      	ldr	r3, [pc, #232]	; (801cf1c <__kernel_rem_pio2+0x33c>)
 801ce34:	f7e3 fe76 	bl	8000b24 <__aeabi_dcmpge>
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	d139      	bne.n	801ceb0 <__kernel_rem_pio2+0x2d0>
 801ce3c:	9002      	str	r0, [sp, #8]
 801ce3e:	2200      	movs	r2, #0
 801ce40:	2300      	movs	r3, #0
 801ce42:	4630      	mov	r0, r6
 801ce44:	4639      	mov	r1, r7
 801ce46:	f7e3 fe4f 	bl	8000ae8 <__aeabi_dcmpeq>
 801ce4a:	2800      	cmp	r0, #0
 801ce4c:	f000 80c7 	beq.w	801cfde <__kernel_rem_pio2+0x3fe>
 801ce50:	1e65      	subs	r5, r4, #1
 801ce52:	462b      	mov	r3, r5
 801ce54:	2200      	movs	r2, #0
 801ce56:	9904      	ldr	r1, [sp, #16]
 801ce58:	428b      	cmp	r3, r1
 801ce5a:	da6a      	bge.n	801cf32 <__kernel_rem_pio2+0x352>
 801ce5c:	2a00      	cmp	r2, #0
 801ce5e:	f000 8088 	beq.w	801cf72 <__kernel_rem_pio2+0x392>
 801ce62:	ab0e      	add	r3, sp, #56	; 0x38
 801ce64:	f1aa 0a18 	sub.w	sl, sl, #24
 801ce68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	f000 80b4 	beq.w	801cfda <__kernel_rem_pio2+0x3fa>
 801ce72:	4650      	mov	r0, sl
 801ce74:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801cf00 <__kernel_rem_pio2+0x320>
 801ce78:	f000 fd76 	bl	801d968 <scalbn>
 801ce7c:	00ec      	lsls	r4, r5, #3
 801ce7e:	ab72      	add	r3, sp, #456	; 0x1c8
 801ce80:	191e      	adds	r6, r3, r4
 801ce82:	ec59 8b10 	vmov	r8, r9, d0
 801ce86:	f106 0a08 	add.w	sl, r6, #8
 801ce8a:	462f      	mov	r7, r5
 801ce8c:	2f00      	cmp	r7, #0
 801ce8e:	f280 80df 	bge.w	801d050 <__kernel_rem_pio2+0x470>
 801ce92:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801cef8 <__kernel_rem_pio2+0x318>
 801ce96:	f04f 0a00 	mov.w	sl, #0
 801ce9a:	eba5 030a 	sub.w	r3, r5, sl
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	f2c0 810a 	blt.w	801d0b8 <__kernel_rem_pio2+0x4d8>
 801cea4:	f8df b078 	ldr.w	fp, [pc, #120]	; 801cf20 <__kernel_rem_pio2+0x340>
 801cea8:	ec59 8b18 	vmov	r8, r9, d8
 801ceac:	2700      	movs	r7, #0
 801ceae:	e0f5      	b.n	801d09c <__kernel_rem_pio2+0x4bc>
 801ceb0:	2302      	movs	r3, #2
 801ceb2:	9302      	str	r3, [sp, #8]
 801ceb4:	e760      	b.n	801cd78 <__kernel_rem_pio2+0x198>
 801ceb6:	ab0e      	add	r3, sp, #56	; 0x38
 801ceb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cebc:	b94d      	cbnz	r5, 801ced2 <__kernel_rem_pio2+0x2f2>
 801cebe:	b12b      	cbz	r3, 801cecc <__kernel_rem_pio2+0x2ec>
 801cec0:	a80e      	add	r0, sp, #56	; 0x38
 801cec2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801cec6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ceca:	2301      	movs	r3, #1
 801cecc:	3201      	adds	r2, #1
 801cece:	461d      	mov	r5, r3
 801ced0:	e759      	b.n	801cd86 <__kernel_rem_pio2+0x1a6>
 801ced2:	a80e      	add	r0, sp, #56	; 0x38
 801ced4:	1acb      	subs	r3, r1, r3
 801ced6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ceda:	462b      	mov	r3, r5
 801cedc:	e7f6      	b.n	801cecc <__kernel_rem_pio2+0x2ec>
 801cede:	1e62      	subs	r2, r4, #1
 801cee0:	ab0e      	add	r3, sp, #56	; 0x38
 801cee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cee6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ceea:	a90e      	add	r1, sp, #56	; 0x38
 801ceec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cef0:	e757      	b.n	801cda2 <__kernel_rem_pio2+0x1c2>
 801cef2:	bf00      	nop
 801cef4:	f3af 8000 	nop.w
	...
 801cf04:	3ff00000 	.word	0x3ff00000
 801cf08:	0801e7a8 	.word	0x0801e7a8
 801cf0c:	40200000 	.word	0x40200000
 801cf10:	3ff00000 	.word	0x3ff00000
 801cf14:	3e700000 	.word	0x3e700000
 801cf18:	41700000 	.word	0x41700000
 801cf1c:	3fe00000 	.word	0x3fe00000
 801cf20:	0801e768 	.word	0x0801e768
 801cf24:	1e62      	subs	r2, r4, #1
 801cf26:	ab0e      	add	r3, sp, #56	; 0x38
 801cf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cf2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cf30:	e7db      	b.n	801ceea <__kernel_rem_pio2+0x30a>
 801cf32:	a90e      	add	r1, sp, #56	; 0x38
 801cf34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cf38:	3b01      	subs	r3, #1
 801cf3a:	430a      	orrs	r2, r1
 801cf3c:	e78b      	b.n	801ce56 <__kernel_rem_pio2+0x276>
 801cf3e:	3301      	adds	r3, #1
 801cf40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801cf44:	2900      	cmp	r1, #0
 801cf46:	d0fa      	beq.n	801cf3e <__kernel_rem_pio2+0x35e>
 801cf48:	9a08      	ldr	r2, [sp, #32]
 801cf4a:	4422      	add	r2, r4
 801cf4c:	00d2      	lsls	r2, r2, #3
 801cf4e:	a922      	add	r1, sp, #136	; 0x88
 801cf50:	18e3      	adds	r3, r4, r3
 801cf52:	9206      	str	r2, [sp, #24]
 801cf54:	440a      	add	r2, r1
 801cf56:	9302      	str	r3, [sp, #8]
 801cf58:	f10b 0108 	add.w	r1, fp, #8
 801cf5c:	f102 0308 	add.w	r3, r2, #8
 801cf60:	1c66      	adds	r6, r4, #1
 801cf62:	910a      	str	r1, [sp, #40]	; 0x28
 801cf64:	2500      	movs	r5, #0
 801cf66:	930d      	str	r3, [sp, #52]	; 0x34
 801cf68:	9b02      	ldr	r3, [sp, #8]
 801cf6a:	42b3      	cmp	r3, r6
 801cf6c:	da04      	bge.n	801cf78 <__kernel_rem_pio2+0x398>
 801cf6e:	461c      	mov	r4, r3
 801cf70:	e6a6      	b.n	801ccc0 <__kernel_rem_pio2+0xe0>
 801cf72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf74:	2301      	movs	r3, #1
 801cf76:	e7e3      	b.n	801cf40 <__kernel_rem_pio2+0x360>
 801cf78:	9b06      	ldr	r3, [sp, #24]
 801cf7a:	18ef      	adds	r7, r5, r3
 801cf7c:	ab22      	add	r3, sp, #136	; 0x88
 801cf7e:	441f      	add	r7, r3
 801cf80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801cf86:	f7e3 fadd 	bl	8000544 <__aeabi_i2d>
 801cf8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf8c:	461c      	mov	r4, r3
 801cf8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cf90:	e9c7 0100 	strd	r0, r1, [r7]
 801cf94:	eb03 0b05 	add.w	fp, r3, r5
 801cf98:	2700      	movs	r7, #0
 801cf9a:	f04f 0800 	mov.w	r8, #0
 801cf9e:	f04f 0900 	mov.w	r9, #0
 801cfa2:	9b07      	ldr	r3, [sp, #28]
 801cfa4:	429f      	cmp	r7, r3
 801cfa6:	dd08      	ble.n	801cfba <__kernel_rem_pio2+0x3da>
 801cfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfaa:	aa72      	add	r2, sp, #456	; 0x1c8
 801cfac:	18eb      	adds	r3, r5, r3
 801cfae:	4413      	add	r3, r2
 801cfb0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801cfb4:	3601      	adds	r6, #1
 801cfb6:	3508      	adds	r5, #8
 801cfb8:	e7d6      	b.n	801cf68 <__kernel_rem_pio2+0x388>
 801cfba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801cfbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801cfc2:	f7e3 fb29 	bl	8000618 <__aeabi_dmul>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	460b      	mov	r3, r1
 801cfca:	4640      	mov	r0, r8
 801cfcc:	4649      	mov	r1, r9
 801cfce:	f7e3 f96d 	bl	80002ac <__adddf3>
 801cfd2:	3701      	adds	r7, #1
 801cfd4:	4680      	mov	r8, r0
 801cfd6:	4689      	mov	r9, r1
 801cfd8:	e7e3      	b.n	801cfa2 <__kernel_rem_pio2+0x3c2>
 801cfda:	3d01      	subs	r5, #1
 801cfdc:	e741      	b.n	801ce62 <__kernel_rem_pio2+0x282>
 801cfde:	f1ca 0000 	rsb	r0, sl, #0
 801cfe2:	ec47 6b10 	vmov	d0, r6, r7
 801cfe6:	f000 fcbf 	bl	801d968 <scalbn>
 801cfea:	ec57 6b10 	vmov	r6, r7, d0
 801cfee:	2200      	movs	r2, #0
 801cff0:	4b99      	ldr	r3, [pc, #612]	; (801d258 <__kernel_rem_pio2+0x678>)
 801cff2:	ee10 0a10 	vmov	r0, s0
 801cff6:	4639      	mov	r1, r7
 801cff8:	f7e3 fd94 	bl	8000b24 <__aeabi_dcmpge>
 801cffc:	b1f8      	cbz	r0, 801d03e <__kernel_rem_pio2+0x45e>
 801cffe:	2200      	movs	r2, #0
 801d000:	4b96      	ldr	r3, [pc, #600]	; (801d25c <__kernel_rem_pio2+0x67c>)
 801d002:	4630      	mov	r0, r6
 801d004:	4639      	mov	r1, r7
 801d006:	f7e3 fb07 	bl	8000618 <__aeabi_dmul>
 801d00a:	f7e3 fdb5 	bl	8000b78 <__aeabi_d2iz>
 801d00e:	4680      	mov	r8, r0
 801d010:	f7e3 fa98 	bl	8000544 <__aeabi_i2d>
 801d014:	2200      	movs	r2, #0
 801d016:	4b90      	ldr	r3, [pc, #576]	; (801d258 <__kernel_rem_pio2+0x678>)
 801d018:	f7e3 fafe 	bl	8000618 <__aeabi_dmul>
 801d01c:	460b      	mov	r3, r1
 801d01e:	4602      	mov	r2, r0
 801d020:	4639      	mov	r1, r7
 801d022:	4630      	mov	r0, r6
 801d024:	f7e3 f940 	bl	80002a8 <__aeabi_dsub>
 801d028:	f7e3 fda6 	bl	8000b78 <__aeabi_d2iz>
 801d02c:	1c65      	adds	r5, r4, #1
 801d02e:	ab0e      	add	r3, sp, #56	; 0x38
 801d030:	f10a 0a18 	add.w	sl, sl, #24
 801d034:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d038:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801d03c:	e719      	b.n	801ce72 <__kernel_rem_pio2+0x292>
 801d03e:	4630      	mov	r0, r6
 801d040:	4639      	mov	r1, r7
 801d042:	f7e3 fd99 	bl	8000b78 <__aeabi_d2iz>
 801d046:	ab0e      	add	r3, sp, #56	; 0x38
 801d048:	4625      	mov	r5, r4
 801d04a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d04e:	e710      	b.n	801ce72 <__kernel_rem_pio2+0x292>
 801d050:	ab0e      	add	r3, sp, #56	; 0x38
 801d052:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801d056:	f7e3 fa75 	bl	8000544 <__aeabi_i2d>
 801d05a:	4642      	mov	r2, r8
 801d05c:	464b      	mov	r3, r9
 801d05e:	f7e3 fadb 	bl	8000618 <__aeabi_dmul>
 801d062:	2200      	movs	r2, #0
 801d064:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801d068:	4b7c      	ldr	r3, [pc, #496]	; (801d25c <__kernel_rem_pio2+0x67c>)
 801d06a:	4640      	mov	r0, r8
 801d06c:	4649      	mov	r1, r9
 801d06e:	f7e3 fad3 	bl	8000618 <__aeabi_dmul>
 801d072:	3f01      	subs	r7, #1
 801d074:	4680      	mov	r8, r0
 801d076:	4689      	mov	r9, r1
 801d078:	e708      	b.n	801ce8c <__kernel_rem_pio2+0x2ac>
 801d07a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801d07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d082:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801d086:	f7e3 fac7 	bl	8000618 <__aeabi_dmul>
 801d08a:	4602      	mov	r2, r0
 801d08c:	460b      	mov	r3, r1
 801d08e:	4640      	mov	r0, r8
 801d090:	4649      	mov	r1, r9
 801d092:	f7e3 f90b 	bl	80002ac <__adddf3>
 801d096:	3701      	adds	r7, #1
 801d098:	4680      	mov	r8, r0
 801d09a:	4689      	mov	r9, r1
 801d09c:	9b04      	ldr	r3, [sp, #16]
 801d09e:	429f      	cmp	r7, r3
 801d0a0:	dc01      	bgt.n	801d0a6 <__kernel_rem_pio2+0x4c6>
 801d0a2:	45ba      	cmp	sl, r7
 801d0a4:	dae9      	bge.n	801d07a <__kernel_rem_pio2+0x49a>
 801d0a6:	ab4a      	add	r3, sp, #296	; 0x128
 801d0a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d0ac:	e9c3 8900 	strd	r8, r9, [r3]
 801d0b0:	f10a 0a01 	add.w	sl, sl, #1
 801d0b4:	3e08      	subs	r6, #8
 801d0b6:	e6f0      	b.n	801ce9a <__kernel_rem_pio2+0x2ba>
 801d0b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801d0ba:	2b03      	cmp	r3, #3
 801d0bc:	d85b      	bhi.n	801d176 <__kernel_rem_pio2+0x596>
 801d0be:	e8df f003 	tbb	[pc, r3]
 801d0c2:	264a      	.short	0x264a
 801d0c4:	0226      	.short	0x0226
 801d0c6:	ab9a      	add	r3, sp, #616	; 0x268
 801d0c8:	441c      	add	r4, r3
 801d0ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801d0ce:	46a2      	mov	sl, r4
 801d0d0:	46ab      	mov	fp, r5
 801d0d2:	f1bb 0f00 	cmp.w	fp, #0
 801d0d6:	dc6c      	bgt.n	801d1b2 <__kernel_rem_pio2+0x5d2>
 801d0d8:	46a2      	mov	sl, r4
 801d0da:	46ab      	mov	fp, r5
 801d0dc:	f1bb 0f01 	cmp.w	fp, #1
 801d0e0:	f300 8086 	bgt.w	801d1f0 <__kernel_rem_pio2+0x610>
 801d0e4:	2000      	movs	r0, #0
 801d0e6:	2100      	movs	r1, #0
 801d0e8:	2d01      	cmp	r5, #1
 801d0ea:	f300 80a0 	bgt.w	801d22e <__kernel_rem_pio2+0x64e>
 801d0ee:	9b02      	ldr	r3, [sp, #8]
 801d0f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801d0f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	f040 809e 	bne.w	801d23a <__kernel_rem_pio2+0x65a>
 801d0fe:	9b01      	ldr	r3, [sp, #4]
 801d100:	e9c3 7800 	strd	r7, r8, [r3]
 801d104:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801d108:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801d10c:	e033      	b.n	801d176 <__kernel_rem_pio2+0x596>
 801d10e:	3408      	adds	r4, #8
 801d110:	ab4a      	add	r3, sp, #296	; 0x128
 801d112:	441c      	add	r4, r3
 801d114:	462e      	mov	r6, r5
 801d116:	2000      	movs	r0, #0
 801d118:	2100      	movs	r1, #0
 801d11a:	2e00      	cmp	r6, #0
 801d11c:	da3a      	bge.n	801d194 <__kernel_rem_pio2+0x5b4>
 801d11e:	9b02      	ldr	r3, [sp, #8]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d03d      	beq.n	801d1a0 <__kernel_rem_pio2+0x5c0>
 801d124:	4602      	mov	r2, r0
 801d126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d12a:	9c01      	ldr	r4, [sp, #4]
 801d12c:	e9c4 2300 	strd	r2, r3, [r4]
 801d130:	4602      	mov	r2, r0
 801d132:	460b      	mov	r3, r1
 801d134:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801d138:	f7e3 f8b6 	bl	80002a8 <__aeabi_dsub>
 801d13c:	ae4c      	add	r6, sp, #304	; 0x130
 801d13e:	2401      	movs	r4, #1
 801d140:	42a5      	cmp	r5, r4
 801d142:	da30      	bge.n	801d1a6 <__kernel_rem_pio2+0x5c6>
 801d144:	9b02      	ldr	r3, [sp, #8]
 801d146:	b113      	cbz	r3, 801d14e <__kernel_rem_pio2+0x56e>
 801d148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d14c:	4619      	mov	r1, r3
 801d14e:	9b01      	ldr	r3, [sp, #4]
 801d150:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801d154:	e00f      	b.n	801d176 <__kernel_rem_pio2+0x596>
 801d156:	ab9a      	add	r3, sp, #616	; 0x268
 801d158:	441c      	add	r4, r3
 801d15a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801d15e:	2000      	movs	r0, #0
 801d160:	2100      	movs	r1, #0
 801d162:	2d00      	cmp	r5, #0
 801d164:	da10      	bge.n	801d188 <__kernel_rem_pio2+0x5a8>
 801d166:	9b02      	ldr	r3, [sp, #8]
 801d168:	b113      	cbz	r3, 801d170 <__kernel_rem_pio2+0x590>
 801d16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d16e:	4619      	mov	r1, r3
 801d170:	9b01      	ldr	r3, [sp, #4]
 801d172:	e9c3 0100 	strd	r0, r1, [r3]
 801d176:	9b06      	ldr	r3, [sp, #24]
 801d178:	f003 0007 	and.w	r0, r3, #7
 801d17c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801d180:	ecbd 8b02 	vpop	{d8}
 801d184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d188:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d18c:	f7e3 f88e 	bl	80002ac <__adddf3>
 801d190:	3d01      	subs	r5, #1
 801d192:	e7e6      	b.n	801d162 <__kernel_rem_pio2+0x582>
 801d194:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d198:	f7e3 f888 	bl	80002ac <__adddf3>
 801d19c:	3e01      	subs	r6, #1
 801d19e:	e7bc      	b.n	801d11a <__kernel_rem_pio2+0x53a>
 801d1a0:	4602      	mov	r2, r0
 801d1a2:	460b      	mov	r3, r1
 801d1a4:	e7c1      	b.n	801d12a <__kernel_rem_pio2+0x54a>
 801d1a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801d1aa:	f7e3 f87f 	bl	80002ac <__adddf3>
 801d1ae:	3401      	adds	r4, #1
 801d1b0:	e7c6      	b.n	801d140 <__kernel_rem_pio2+0x560>
 801d1b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801d1b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d1ba:	4640      	mov	r0, r8
 801d1bc:	ec53 2b17 	vmov	r2, r3, d7
 801d1c0:	4649      	mov	r1, r9
 801d1c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d1c6:	f7e3 f871 	bl	80002ac <__adddf3>
 801d1ca:	4602      	mov	r2, r0
 801d1cc:	460b      	mov	r3, r1
 801d1ce:	4606      	mov	r6, r0
 801d1d0:	460f      	mov	r7, r1
 801d1d2:	4640      	mov	r0, r8
 801d1d4:	4649      	mov	r1, r9
 801d1d6:	f7e3 f867 	bl	80002a8 <__aeabi_dsub>
 801d1da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d1de:	f7e3 f865 	bl	80002ac <__adddf3>
 801d1e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d1e6:	e9ca 0100 	strd	r0, r1, [sl]
 801d1ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801d1ee:	e770      	b.n	801d0d2 <__kernel_rem_pio2+0x4f2>
 801d1f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801d1f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 801d1f8:	4630      	mov	r0, r6
 801d1fa:	ec53 2b17 	vmov	r2, r3, d7
 801d1fe:	4639      	mov	r1, r7
 801d200:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d204:	f7e3 f852 	bl	80002ac <__adddf3>
 801d208:	4602      	mov	r2, r0
 801d20a:	460b      	mov	r3, r1
 801d20c:	4680      	mov	r8, r0
 801d20e:	4689      	mov	r9, r1
 801d210:	4630      	mov	r0, r6
 801d212:	4639      	mov	r1, r7
 801d214:	f7e3 f848 	bl	80002a8 <__aeabi_dsub>
 801d218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d21c:	f7e3 f846 	bl	80002ac <__adddf3>
 801d220:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d224:	e9ca 0100 	strd	r0, r1, [sl]
 801d228:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801d22c:	e756      	b.n	801d0dc <__kernel_rem_pio2+0x4fc>
 801d22e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d232:	f7e3 f83b 	bl	80002ac <__adddf3>
 801d236:	3d01      	subs	r5, #1
 801d238:	e756      	b.n	801d0e8 <__kernel_rem_pio2+0x508>
 801d23a:	9b01      	ldr	r3, [sp, #4]
 801d23c:	9a01      	ldr	r2, [sp, #4]
 801d23e:	601f      	str	r7, [r3, #0]
 801d240:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801d244:	605c      	str	r4, [r3, #4]
 801d246:	609d      	str	r5, [r3, #8]
 801d248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d24c:	60d3      	str	r3, [r2, #12]
 801d24e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d252:	6110      	str	r0, [r2, #16]
 801d254:	6153      	str	r3, [r2, #20]
 801d256:	e78e      	b.n	801d176 <__kernel_rem_pio2+0x596>
 801d258:	41700000 	.word	0x41700000
 801d25c:	3e700000 	.word	0x3e700000

0801d260 <__kernel_sin>:
 801d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d264:	ec55 4b10 	vmov	r4, r5, d0
 801d268:	b085      	sub	sp, #20
 801d26a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d26e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801d272:	ed8d 1b00 	vstr	d1, [sp]
 801d276:	9002      	str	r0, [sp, #8]
 801d278:	da06      	bge.n	801d288 <__kernel_sin+0x28>
 801d27a:	ee10 0a10 	vmov	r0, s0
 801d27e:	4629      	mov	r1, r5
 801d280:	f7e3 fc7a 	bl	8000b78 <__aeabi_d2iz>
 801d284:	2800      	cmp	r0, #0
 801d286:	d051      	beq.n	801d32c <__kernel_sin+0xcc>
 801d288:	4622      	mov	r2, r4
 801d28a:	462b      	mov	r3, r5
 801d28c:	4620      	mov	r0, r4
 801d28e:	4629      	mov	r1, r5
 801d290:	f7e3 f9c2 	bl	8000618 <__aeabi_dmul>
 801d294:	4682      	mov	sl, r0
 801d296:	468b      	mov	fp, r1
 801d298:	4602      	mov	r2, r0
 801d29a:	460b      	mov	r3, r1
 801d29c:	4620      	mov	r0, r4
 801d29e:	4629      	mov	r1, r5
 801d2a0:	f7e3 f9ba 	bl	8000618 <__aeabi_dmul>
 801d2a4:	a341      	add	r3, pc, #260	; (adr r3, 801d3ac <__kernel_sin+0x14c>)
 801d2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2aa:	4680      	mov	r8, r0
 801d2ac:	4689      	mov	r9, r1
 801d2ae:	4650      	mov	r0, sl
 801d2b0:	4659      	mov	r1, fp
 801d2b2:	f7e3 f9b1 	bl	8000618 <__aeabi_dmul>
 801d2b6:	a33f      	add	r3, pc, #252	; (adr r3, 801d3b4 <__kernel_sin+0x154>)
 801d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2bc:	f7e2 fff4 	bl	80002a8 <__aeabi_dsub>
 801d2c0:	4652      	mov	r2, sl
 801d2c2:	465b      	mov	r3, fp
 801d2c4:	f7e3 f9a8 	bl	8000618 <__aeabi_dmul>
 801d2c8:	a33c      	add	r3, pc, #240	; (adr r3, 801d3bc <__kernel_sin+0x15c>)
 801d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ce:	f7e2 ffed 	bl	80002ac <__adddf3>
 801d2d2:	4652      	mov	r2, sl
 801d2d4:	465b      	mov	r3, fp
 801d2d6:	f7e3 f99f 	bl	8000618 <__aeabi_dmul>
 801d2da:	a33a      	add	r3, pc, #232	; (adr r3, 801d3c4 <__kernel_sin+0x164>)
 801d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e0:	f7e2 ffe2 	bl	80002a8 <__aeabi_dsub>
 801d2e4:	4652      	mov	r2, sl
 801d2e6:	465b      	mov	r3, fp
 801d2e8:	f7e3 f996 	bl	8000618 <__aeabi_dmul>
 801d2ec:	a337      	add	r3, pc, #220	; (adr r3, 801d3cc <__kernel_sin+0x16c>)
 801d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2f2:	f7e2 ffdb 	bl	80002ac <__adddf3>
 801d2f6:	9b02      	ldr	r3, [sp, #8]
 801d2f8:	4606      	mov	r6, r0
 801d2fa:	460f      	mov	r7, r1
 801d2fc:	b9db      	cbnz	r3, 801d336 <__kernel_sin+0xd6>
 801d2fe:	4602      	mov	r2, r0
 801d300:	460b      	mov	r3, r1
 801d302:	4650      	mov	r0, sl
 801d304:	4659      	mov	r1, fp
 801d306:	f7e3 f987 	bl	8000618 <__aeabi_dmul>
 801d30a:	a325      	add	r3, pc, #148	; (adr r3, 801d3a0 <__kernel_sin+0x140>)
 801d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d310:	f7e2 ffca 	bl	80002a8 <__aeabi_dsub>
 801d314:	4642      	mov	r2, r8
 801d316:	464b      	mov	r3, r9
 801d318:	f7e3 f97e 	bl	8000618 <__aeabi_dmul>
 801d31c:	4602      	mov	r2, r0
 801d31e:	460b      	mov	r3, r1
 801d320:	4620      	mov	r0, r4
 801d322:	4629      	mov	r1, r5
 801d324:	f7e2 ffc2 	bl	80002ac <__adddf3>
 801d328:	4604      	mov	r4, r0
 801d32a:	460d      	mov	r5, r1
 801d32c:	ec45 4b10 	vmov	d0, r4, r5
 801d330:	b005      	add	sp, #20
 801d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d336:	2200      	movs	r2, #0
 801d338:	4b1b      	ldr	r3, [pc, #108]	; (801d3a8 <__kernel_sin+0x148>)
 801d33a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d33e:	f7e3 f96b 	bl	8000618 <__aeabi_dmul>
 801d342:	4632      	mov	r2, r6
 801d344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d348:	463b      	mov	r3, r7
 801d34a:	4640      	mov	r0, r8
 801d34c:	4649      	mov	r1, r9
 801d34e:	f7e3 f963 	bl	8000618 <__aeabi_dmul>
 801d352:	4602      	mov	r2, r0
 801d354:	460b      	mov	r3, r1
 801d356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d35a:	f7e2 ffa5 	bl	80002a8 <__aeabi_dsub>
 801d35e:	4652      	mov	r2, sl
 801d360:	465b      	mov	r3, fp
 801d362:	f7e3 f959 	bl	8000618 <__aeabi_dmul>
 801d366:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d36a:	f7e2 ff9d 	bl	80002a8 <__aeabi_dsub>
 801d36e:	a30c      	add	r3, pc, #48	; (adr r3, 801d3a0 <__kernel_sin+0x140>)
 801d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d374:	4606      	mov	r6, r0
 801d376:	460f      	mov	r7, r1
 801d378:	4640      	mov	r0, r8
 801d37a:	4649      	mov	r1, r9
 801d37c:	f7e3 f94c 	bl	8000618 <__aeabi_dmul>
 801d380:	4602      	mov	r2, r0
 801d382:	460b      	mov	r3, r1
 801d384:	4630      	mov	r0, r6
 801d386:	4639      	mov	r1, r7
 801d388:	f7e2 ff90 	bl	80002ac <__adddf3>
 801d38c:	4602      	mov	r2, r0
 801d38e:	460b      	mov	r3, r1
 801d390:	4620      	mov	r0, r4
 801d392:	4629      	mov	r1, r5
 801d394:	f7e2 ff88 	bl	80002a8 <__aeabi_dsub>
 801d398:	e7c6      	b.n	801d328 <__kernel_sin+0xc8>
 801d39a:	bf00      	nop
 801d39c:	f3af 8000 	nop.w
 801d3a0:	55555549 	.word	0x55555549
 801d3a4:	3fc55555 	.word	0x3fc55555
 801d3a8:	3fe00000 	.word	0x3fe00000
 801d3ac:	5acfd57c 	.word	0x5acfd57c
 801d3b0:	3de5d93a 	.word	0x3de5d93a
 801d3b4:	8a2b9ceb 	.word	0x8a2b9ceb
 801d3b8:	3e5ae5e6 	.word	0x3e5ae5e6
 801d3bc:	57b1fe7d 	.word	0x57b1fe7d
 801d3c0:	3ec71de3 	.word	0x3ec71de3
 801d3c4:	19c161d5 	.word	0x19c161d5
 801d3c8:	3f2a01a0 	.word	0x3f2a01a0
 801d3cc:	1110f8a6 	.word	0x1110f8a6
 801d3d0:	3f811111 	.word	0x3f811111
 801d3d4:	00000000 	.word	0x00000000

0801d3d8 <atan>:
 801d3d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3dc:	ec55 4b10 	vmov	r4, r5, d0
 801d3e0:	4bc3      	ldr	r3, [pc, #780]	; (801d6f0 <atan+0x318>)
 801d3e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d3e6:	429e      	cmp	r6, r3
 801d3e8:	46ab      	mov	fp, r5
 801d3ea:	dd18      	ble.n	801d41e <atan+0x46>
 801d3ec:	4bc1      	ldr	r3, [pc, #772]	; (801d6f4 <atan+0x31c>)
 801d3ee:	429e      	cmp	r6, r3
 801d3f0:	dc01      	bgt.n	801d3f6 <atan+0x1e>
 801d3f2:	d109      	bne.n	801d408 <atan+0x30>
 801d3f4:	b144      	cbz	r4, 801d408 <atan+0x30>
 801d3f6:	4622      	mov	r2, r4
 801d3f8:	462b      	mov	r3, r5
 801d3fa:	4620      	mov	r0, r4
 801d3fc:	4629      	mov	r1, r5
 801d3fe:	f7e2 ff55 	bl	80002ac <__adddf3>
 801d402:	4604      	mov	r4, r0
 801d404:	460d      	mov	r5, r1
 801d406:	e006      	b.n	801d416 <atan+0x3e>
 801d408:	f1bb 0f00 	cmp.w	fp, #0
 801d40c:	f340 8131 	ble.w	801d672 <atan+0x29a>
 801d410:	a59b      	add	r5, pc, #620	; (adr r5, 801d680 <atan+0x2a8>)
 801d412:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d416:	ec45 4b10 	vmov	d0, r4, r5
 801d41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d41e:	4bb6      	ldr	r3, [pc, #728]	; (801d6f8 <atan+0x320>)
 801d420:	429e      	cmp	r6, r3
 801d422:	dc14      	bgt.n	801d44e <atan+0x76>
 801d424:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d428:	429e      	cmp	r6, r3
 801d42a:	dc0d      	bgt.n	801d448 <atan+0x70>
 801d42c:	a396      	add	r3, pc, #600	; (adr r3, 801d688 <atan+0x2b0>)
 801d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d432:	ee10 0a10 	vmov	r0, s0
 801d436:	4629      	mov	r1, r5
 801d438:	f7e2 ff38 	bl	80002ac <__adddf3>
 801d43c:	2200      	movs	r2, #0
 801d43e:	4baf      	ldr	r3, [pc, #700]	; (801d6fc <atan+0x324>)
 801d440:	f7e3 fb7a 	bl	8000b38 <__aeabi_dcmpgt>
 801d444:	2800      	cmp	r0, #0
 801d446:	d1e6      	bne.n	801d416 <atan+0x3e>
 801d448:	f04f 3aff 	mov.w	sl, #4294967295
 801d44c:	e02b      	b.n	801d4a6 <atan+0xce>
 801d44e:	f000 f963 	bl	801d718 <fabs>
 801d452:	4bab      	ldr	r3, [pc, #684]	; (801d700 <atan+0x328>)
 801d454:	429e      	cmp	r6, r3
 801d456:	ec55 4b10 	vmov	r4, r5, d0
 801d45a:	f300 80bf 	bgt.w	801d5dc <atan+0x204>
 801d45e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d462:	429e      	cmp	r6, r3
 801d464:	f300 80a0 	bgt.w	801d5a8 <atan+0x1d0>
 801d468:	ee10 2a10 	vmov	r2, s0
 801d46c:	ee10 0a10 	vmov	r0, s0
 801d470:	462b      	mov	r3, r5
 801d472:	4629      	mov	r1, r5
 801d474:	f7e2 ff1a 	bl	80002ac <__adddf3>
 801d478:	2200      	movs	r2, #0
 801d47a:	4ba0      	ldr	r3, [pc, #640]	; (801d6fc <atan+0x324>)
 801d47c:	f7e2 ff14 	bl	80002a8 <__aeabi_dsub>
 801d480:	2200      	movs	r2, #0
 801d482:	4606      	mov	r6, r0
 801d484:	460f      	mov	r7, r1
 801d486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d48a:	4620      	mov	r0, r4
 801d48c:	4629      	mov	r1, r5
 801d48e:	f7e2 ff0d 	bl	80002ac <__adddf3>
 801d492:	4602      	mov	r2, r0
 801d494:	460b      	mov	r3, r1
 801d496:	4630      	mov	r0, r6
 801d498:	4639      	mov	r1, r7
 801d49a:	f7e3 f9e7 	bl	800086c <__aeabi_ddiv>
 801d49e:	f04f 0a00 	mov.w	sl, #0
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	460d      	mov	r5, r1
 801d4a6:	4622      	mov	r2, r4
 801d4a8:	462b      	mov	r3, r5
 801d4aa:	4620      	mov	r0, r4
 801d4ac:	4629      	mov	r1, r5
 801d4ae:	f7e3 f8b3 	bl	8000618 <__aeabi_dmul>
 801d4b2:	4602      	mov	r2, r0
 801d4b4:	460b      	mov	r3, r1
 801d4b6:	4680      	mov	r8, r0
 801d4b8:	4689      	mov	r9, r1
 801d4ba:	f7e3 f8ad 	bl	8000618 <__aeabi_dmul>
 801d4be:	a374      	add	r3, pc, #464	; (adr r3, 801d690 <atan+0x2b8>)
 801d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4c4:	4606      	mov	r6, r0
 801d4c6:	460f      	mov	r7, r1
 801d4c8:	f7e3 f8a6 	bl	8000618 <__aeabi_dmul>
 801d4cc:	a372      	add	r3, pc, #456	; (adr r3, 801d698 <atan+0x2c0>)
 801d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d2:	f7e2 feeb 	bl	80002ac <__adddf3>
 801d4d6:	4632      	mov	r2, r6
 801d4d8:	463b      	mov	r3, r7
 801d4da:	f7e3 f89d 	bl	8000618 <__aeabi_dmul>
 801d4de:	a370      	add	r3, pc, #448	; (adr r3, 801d6a0 <atan+0x2c8>)
 801d4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4e4:	f7e2 fee2 	bl	80002ac <__adddf3>
 801d4e8:	4632      	mov	r2, r6
 801d4ea:	463b      	mov	r3, r7
 801d4ec:	f7e3 f894 	bl	8000618 <__aeabi_dmul>
 801d4f0:	a36d      	add	r3, pc, #436	; (adr r3, 801d6a8 <atan+0x2d0>)
 801d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f6:	f7e2 fed9 	bl	80002ac <__adddf3>
 801d4fa:	4632      	mov	r2, r6
 801d4fc:	463b      	mov	r3, r7
 801d4fe:	f7e3 f88b 	bl	8000618 <__aeabi_dmul>
 801d502:	a36b      	add	r3, pc, #428	; (adr r3, 801d6b0 <atan+0x2d8>)
 801d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d508:	f7e2 fed0 	bl	80002ac <__adddf3>
 801d50c:	4632      	mov	r2, r6
 801d50e:	463b      	mov	r3, r7
 801d510:	f7e3 f882 	bl	8000618 <__aeabi_dmul>
 801d514:	a368      	add	r3, pc, #416	; (adr r3, 801d6b8 <atan+0x2e0>)
 801d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d51a:	f7e2 fec7 	bl	80002ac <__adddf3>
 801d51e:	4642      	mov	r2, r8
 801d520:	464b      	mov	r3, r9
 801d522:	f7e3 f879 	bl	8000618 <__aeabi_dmul>
 801d526:	a366      	add	r3, pc, #408	; (adr r3, 801d6c0 <atan+0x2e8>)
 801d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d52c:	4680      	mov	r8, r0
 801d52e:	4689      	mov	r9, r1
 801d530:	4630      	mov	r0, r6
 801d532:	4639      	mov	r1, r7
 801d534:	f7e3 f870 	bl	8000618 <__aeabi_dmul>
 801d538:	a363      	add	r3, pc, #396	; (adr r3, 801d6c8 <atan+0x2f0>)
 801d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d53e:	f7e2 feb3 	bl	80002a8 <__aeabi_dsub>
 801d542:	4632      	mov	r2, r6
 801d544:	463b      	mov	r3, r7
 801d546:	f7e3 f867 	bl	8000618 <__aeabi_dmul>
 801d54a:	a361      	add	r3, pc, #388	; (adr r3, 801d6d0 <atan+0x2f8>)
 801d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d550:	f7e2 feaa 	bl	80002a8 <__aeabi_dsub>
 801d554:	4632      	mov	r2, r6
 801d556:	463b      	mov	r3, r7
 801d558:	f7e3 f85e 	bl	8000618 <__aeabi_dmul>
 801d55c:	a35e      	add	r3, pc, #376	; (adr r3, 801d6d8 <atan+0x300>)
 801d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d562:	f7e2 fea1 	bl	80002a8 <__aeabi_dsub>
 801d566:	4632      	mov	r2, r6
 801d568:	463b      	mov	r3, r7
 801d56a:	f7e3 f855 	bl	8000618 <__aeabi_dmul>
 801d56e:	a35c      	add	r3, pc, #368	; (adr r3, 801d6e0 <atan+0x308>)
 801d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d574:	f7e2 fe98 	bl	80002a8 <__aeabi_dsub>
 801d578:	4632      	mov	r2, r6
 801d57a:	463b      	mov	r3, r7
 801d57c:	f7e3 f84c 	bl	8000618 <__aeabi_dmul>
 801d580:	4602      	mov	r2, r0
 801d582:	460b      	mov	r3, r1
 801d584:	4640      	mov	r0, r8
 801d586:	4649      	mov	r1, r9
 801d588:	f7e2 fe90 	bl	80002ac <__adddf3>
 801d58c:	4622      	mov	r2, r4
 801d58e:	462b      	mov	r3, r5
 801d590:	f7e3 f842 	bl	8000618 <__aeabi_dmul>
 801d594:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d598:	4602      	mov	r2, r0
 801d59a:	460b      	mov	r3, r1
 801d59c:	d14b      	bne.n	801d636 <atan+0x25e>
 801d59e:	4620      	mov	r0, r4
 801d5a0:	4629      	mov	r1, r5
 801d5a2:	f7e2 fe81 	bl	80002a8 <__aeabi_dsub>
 801d5a6:	e72c      	b.n	801d402 <atan+0x2a>
 801d5a8:	ee10 0a10 	vmov	r0, s0
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	4b53      	ldr	r3, [pc, #332]	; (801d6fc <atan+0x324>)
 801d5b0:	4629      	mov	r1, r5
 801d5b2:	f7e2 fe79 	bl	80002a8 <__aeabi_dsub>
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	4606      	mov	r6, r0
 801d5ba:	460f      	mov	r7, r1
 801d5bc:	4b4f      	ldr	r3, [pc, #316]	; (801d6fc <atan+0x324>)
 801d5be:	4620      	mov	r0, r4
 801d5c0:	4629      	mov	r1, r5
 801d5c2:	f7e2 fe73 	bl	80002ac <__adddf3>
 801d5c6:	4602      	mov	r2, r0
 801d5c8:	460b      	mov	r3, r1
 801d5ca:	4630      	mov	r0, r6
 801d5cc:	4639      	mov	r1, r7
 801d5ce:	f7e3 f94d 	bl	800086c <__aeabi_ddiv>
 801d5d2:	f04f 0a01 	mov.w	sl, #1
 801d5d6:	4604      	mov	r4, r0
 801d5d8:	460d      	mov	r5, r1
 801d5da:	e764      	b.n	801d4a6 <atan+0xce>
 801d5dc:	4b49      	ldr	r3, [pc, #292]	; (801d704 <atan+0x32c>)
 801d5de:	429e      	cmp	r6, r3
 801d5e0:	dc1d      	bgt.n	801d61e <atan+0x246>
 801d5e2:	ee10 0a10 	vmov	r0, s0
 801d5e6:	2200      	movs	r2, #0
 801d5e8:	4b47      	ldr	r3, [pc, #284]	; (801d708 <atan+0x330>)
 801d5ea:	4629      	mov	r1, r5
 801d5ec:	f7e2 fe5c 	bl	80002a8 <__aeabi_dsub>
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	4606      	mov	r6, r0
 801d5f4:	460f      	mov	r7, r1
 801d5f6:	4b44      	ldr	r3, [pc, #272]	; (801d708 <atan+0x330>)
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	4629      	mov	r1, r5
 801d5fc:	f7e3 f80c 	bl	8000618 <__aeabi_dmul>
 801d600:	2200      	movs	r2, #0
 801d602:	4b3e      	ldr	r3, [pc, #248]	; (801d6fc <atan+0x324>)
 801d604:	f7e2 fe52 	bl	80002ac <__adddf3>
 801d608:	4602      	mov	r2, r0
 801d60a:	460b      	mov	r3, r1
 801d60c:	4630      	mov	r0, r6
 801d60e:	4639      	mov	r1, r7
 801d610:	f7e3 f92c 	bl	800086c <__aeabi_ddiv>
 801d614:	f04f 0a02 	mov.w	sl, #2
 801d618:	4604      	mov	r4, r0
 801d61a:	460d      	mov	r5, r1
 801d61c:	e743      	b.n	801d4a6 <atan+0xce>
 801d61e:	462b      	mov	r3, r5
 801d620:	ee10 2a10 	vmov	r2, s0
 801d624:	2000      	movs	r0, #0
 801d626:	4939      	ldr	r1, [pc, #228]	; (801d70c <atan+0x334>)
 801d628:	f7e3 f920 	bl	800086c <__aeabi_ddiv>
 801d62c:	f04f 0a03 	mov.w	sl, #3
 801d630:	4604      	mov	r4, r0
 801d632:	460d      	mov	r5, r1
 801d634:	e737      	b.n	801d4a6 <atan+0xce>
 801d636:	4b36      	ldr	r3, [pc, #216]	; (801d710 <atan+0x338>)
 801d638:	4e36      	ldr	r6, [pc, #216]	; (801d714 <atan+0x33c>)
 801d63a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801d63e:	4456      	add	r6, sl
 801d640:	449a      	add	sl, r3
 801d642:	e9da 2300 	ldrd	r2, r3, [sl]
 801d646:	f7e2 fe2f 	bl	80002a8 <__aeabi_dsub>
 801d64a:	4622      	mov	r2, r4
 801d64c:	462b      	mov	r3, r5
 801d64e:	f7e2 fe2b 	bl	80002a8 <__aeabi_dsub>
 801d652:	4602      	mov	r2, r0
 801d654:	460b      	mov	r3, r1
 801d656:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d65a:	f7e2 fe25 	bl	80002a8 <__aeabi_dsub>
 801d65e:	f1bb 0f00 	cmp.w	fp, #0
 801d662:	4604      	mov	r4, r0
 801d664:	460d      	mov	r5, r1
 801d666:	f6bf aed6 	bge.w	801d416 <atan+0x3e>
 801d66a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d66e:	461d      	mov	r5, r3
 801d670:	e6d1      	b.n	801d416 <atan+0x3e>
 801d672:	a51d      	add	r5, pc, #116	; (adr r5, 801d6e8 <atan+0x310>)
 801d674:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d678:	e6cd      	b.n	801d416 <atan+0x3e>
 801d67a:	bf00      	nop
 801d67c:	f3af 8000 	nop.w
 801d680:	54442d18 	.word	0x54442d18
 801d684:	3ff921fb 	.word	0x3ff921fb
 801d688:	8800759c 	.word	0x8800759c
 801d68c:	7e37e43c 	.word	0x7e37e43c
 801d690:	e322da11 	.word	0xe322da11
 801d694:	3f90ad3a 	.word	0x3f90ad3a
 801d698:	24760deb 	.word	0x24760deb
 801d69c:	3fa97b4b 	.word	0x3fa97b4b
 801d6a0:	a0d03d51 	.word	0xa0d03d51
 801d6a4:	3fb10d66 	.word	0x3fb10d66
 801d6a8:	c54c206e 	.word	0xc54c206e
 801d6ac:	3fb745cd 	.word	0x3fb745cd
 801d6b0:	920083ff 	.word	0x920083ff
 801d6b4:	3fc24924 	.word	0x3fc24924
 801d6b8:	5555550d 	.word	0x5555550d
 801d6bc:	3fd55555 	.word	0x3fd55555
 801d6c0:	2c6a6c2f 	.word	0x2c6a6c2f
 801d6c4:	bfa2b444 	.word	0xbfa2b444
 801d6c8:	52defd9a 	.word	0x52defd9a
 801d6cc:	3fadde2d 	.word	0x3fadde2d
 801d6d0:	af749a6d 	.word	0xaf749a6d
 801d6d4:	3fb3b0f2 	.word	0x3fb3b0f2
 801d6d8:	fe231671 	.word	0xfe231671
 801d6dc:	3fbc71c6 	.word	0x3fbc71c6
 801d6e0:	9998ebc4 	.word	0x9998ebc4
 801d6e4:	3fc99999 	.word	0x3fc99999
 801d6e8:	54442d18 	.word	0x54442d18
 801d6ec:	bff921fb 	.word	0xbff921fb
 801d6f0:	440fffff 	.word	0x440fffff
 801d6f4:	7ff00000 	.word	0x7ff00000
 801d6f8:	3fdbffff 	.word	0x3fdbffff
 801d6fc:	3ff00000 	.word	0x3ff00000
 801d700:	3ff2ffff 	.word	0x3ff2ffff
 801d704:	40037fff 	.word	0x40037fff
 801d708:	3ff80000 	.word	0x3ff80000
 801d70c:	bff00000 	.word	0xbff00000
 801d710:	0801e7d8 	.word	0x0801e7d8
 801d714:	0801e7b8 	.word	0x0801e7b8

0801d718 <fabs>:
 801d718:	ec51 0b10 	vmov	r0, r1, d0
 801d71c:	ee10 2a10 	vmov	r2, s0
 801d720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d724:	ec43 2b10 	vmov	d0, r2, r3
 801d728:	4770      	bx	lr

0801d72a <finite>:
 801d72a:	ee10 3a90 	vmov	r3, s1
 801d72e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801d732:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d736:	0fc0      	lsrs	r0, r0, #31
 801d738:	4770      	bx	lr
 801d73a:	0000      	movs	r0, r0
 801d73c:	0000      	movs	r0, r0
	...

0801d740 <floor>:
 801d740:	ec51 0b10 	vmov	r0, r1, d0
 801d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d748:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801d74c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801d750:	2e13      	cmp	r6, #19
 801d752:	460c      	mov	r4, r1
 801d754:	ee10 5a10 	vmov	r5, s0
 801d758:	4680      	mov	r8, r0
 801d75a:	dc34      	bgt.n	801d7c6 <floor+0x86>
 801d75c:	2e00      	cmp	r6, #0
 801d75e:	da16      	bge.n	801d78e <floor+0x4e>
 801d760:	a335      	add	r3, pc, #212	; (adr r3, 801d838 <floor+0xf8>)
 801d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d766:	f7e2 fda1 	bl	80002ac <__adddf3>
 801d76a:	2200      	movs	r2, #0
 801d76c:	2300      	movs	r3, #0
 801d76e:	f7e3 f9e3 	bl	8000b38 <__aeabi_dcmpgt>
 801d772:	b148      	cbz	r0, 801d788 <floor+0x48>
 801d774:	2c00      	cmp	r4, #0
 801d776:	da59      	bge.n	801d82c <floor+0xec>
 801d778:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d77c:	4a30      	ldr	r2, [pc, #192]	; (801d840 <floor+0x100>)
 801d77e:	432b      	orrs	r3, r5
 801d780:	2500      	movs	r5, #0
 801d782:	42ab      	cmp	r3, r5
 801d784:	bf18      	it	ne
 801d786:	4614      	movne	r4, r2
 801d788:	4621      	mov	r1, r4
 801d78a:	4628      	mov	r0, r5
 801d78c:	e025      	b.n	801d7da <floor+0x9a>
 801d78e:	4f2d      	ldr	r7, [pc, #180]	; (801d844 <floor+0x104>)
 801d790:	4137      	asrs	r7, r6
 801d792:	ea01 0307 	and.w	r3, r1, r7
 801d796:	4303      	orrs	r3, r0
 801d798:	d01f      	beq.n	801d7da <floor+0x9a>
 801d79a:	a327      	add	r3, pc, #156	; (adr r3, 801d838 <floor+0xf8>)
 801d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a0:	f7e2 fd84 	bl	80002ac <__adddf3>
 801d7a4:	2200      	movs	r2, #0
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	f7e3 f9c6 	bl	8000b38 <__aeabi_dcmpgt>
 801d7ac:	2800      	cmp	r0, #0
 801d7ae:	d0eb      	beq.n	801d788 <floor+0x48>
 801d7b0:	2c00      	cmp	r4, #0
 801d7b2:	bfbe      	ittt	lt
 801d7b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d7b8:	fa43 f606 	asrlt.w	r6, r3, r6
 801d7bc:	19a4      	addlt	r4, r4, r6
 801d7be:	ea24 0407 	bic.w	r4, r4, r7
 801d7c2:	2500      	movs	r5, #0
 801d7c4:	e7e0      	b.n	801d788 <floor+0x48>
 801d7c6:	2e33      	cmp	r6, #51	; 0x33
 801d7c8:	dd0b      	ble.n	801d7e2 <floor+0xa2>
 801d7ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d7ce:	d104      	bne.n	801d7da <floor+0x9a>
 801d7d0:	ee10 2a10 	vmov	r2, s0
 801d7d4:	460b      	mov	r3, r1
 801d7d6:	f7e2 fd69 	bl	80002ac <__adddf3>
 801d7da:	ec41 0b10 	vmov	d0, r0, r1
 801d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801d7e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d7ea:	fa23 f707 	lsr.w	r7, r3, r7
 801d7ee:	4207      	tst	r7, r0
 801d7f0:	d0f3      	beq.n	801d7da <floor+0x9a>
 801d7f2:	a311      	add	r3, pc, #68	; (adr r3, 801d838 <floor+0xf8>)
 801d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f8:	f7e2 fd58 	bl	80002ac <__adddf3>
 801d7fc:	2200      	movs	r2, #0
 801d7fe:	2300      	movs	r3, #0
 801d800:	f7e3 f99a 	bl	8000b38 <__aeabi_dcmpgt>
 801d804:	2800      	cmp	r0, #0
 801d806:	d0bf      	beq.n	801d788 <floor+0x48>
 801d808:	2c00      	cmp	r4, #0
 801d80a:	da02      	bge.n	801d812 <floor+0xd2>
 801d80c:	2e14      	cmp	r6, #20
 801d80e:	d103      	bne.n	801d818 <floor+0xd8>
 801d810:	3401      	adds	r4, #1
 801d812:	ea25 0507 	bic.w	r5, r5, r7
 801d816:	e7b7      	b.n	801d788 <floor+0x48>
 801d818:	2301      	movs	r3, #1
 801d81a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d81e:	fa03 f606 	lsl.w	r6, r3, r6
 801d822:	4435      	add	r5, r6
 801d824:	4545      	cmp	r5, r8
 801d826:	bf38      	it	cc
 801d828:	18e4      	addcc	r4, r4, r3
 801d82a:	e7f2      	b.n	801d812 <floor+0xd2>
 801d82c:	2500      	movs	r5, #0
 801d82e:	462c      	mov	r4, r5
 801d830:	e7aa      	b.n	801d788 <floor+0x48>
 801d832:	bf00      	nop
 801d834:	f3af 8000 	nop.w
 801d838:	8800759c 	.word	0x8800759c
 801d83c:	7e37e43c 	.word	0x7e37e43c
 801d840:	bff00000 	.word	0xbff00000
 801d844:	000fffff 	.word	0x000fffff

0801d848 <matherr>:
 801d848:	2000      	movs	r0, #0
 801d84a:	4770      	bx	lr
 801d84c:	0000      	movs	r0, r0
	...

0801d850 <nan>:
 801d850:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d858 <nan+0x8>
 801d854:	4770      	bx	lr
 801d856:	bf00      	nop
 801d858:	00000000 	.word	0x00000000
 801d85c:	7ff80000 	.word	0x7ff80000

0801d860 <rint>:
 801d860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d862:	ec51 0b10 	vmov	r0, r1, d0
 801d866:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d86a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801d86e:	2e13      	cmp	r6, #19
 801d870:	460b      	mov	r3, r1
 801d872:	ee10 4a10 	vmov	r4, s0
 801d876:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801d87a:	dc56      	bgt.n	801d92a <rint+0xca>
 801d87c:	2e00      	cmp	r6, #0
 801d87e:	da2b      	bge.n	801d8d8 <rint+0x78>
 801d880:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801d884:	4302      	orrs	r2, r0
 801d886:	d023      	beq.n	801d8d0 <rint+0x70>
 801d888:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801d88c:	4302      	orrs	r2, r0
 801d88e:	4254      	negs	r4, r2
 801d890:	4314      	orrs	r4, r2
 801d892:	0c4b      	lsrs	r3, r1, #17
 801d894:	0b24      	lsrs	r4, r4, #12
 801d896:	045b      	lsls	r3, r3, #17
 801d898:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801d89c:	ea44 0103 	orr.w	r1, r4, r3
 801d8a0:	460b      	mov	r3, r1
 801d8a2:	492f      	ldr	r1, [pc, #188]	; (801d960 <rint+0x100>)
 801d8a4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801d8a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 801d8ac:	4602      	mov	r2, r0
 801d8ae:	4639      	mov	r1, r7
 801d8b0:	4630      	mov	r0, r6
 801d8b2:	f7e2 fcfb 	bl	80002ac <__adddf3>
 801d8b6:	e9cd 0100 	strd	r0, r1, [sp]
 801d8ba:	463b      	mov	r3, r7
 801d8bc:	4632      	mov	r2, r6
 801d8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d8c2:	f7e2 fcf1 	bl	80002a8 <__aeabi_dsub>
 801d8c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d8ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801d8ce:	4639      	mov	r1, r7
 801d8d0:	ec41 0b10 	vmov	d0, r0, r1
 801d8d4:	b003      	add	sp, #12
 801d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8d8:	4a22      	ldr	r2, [pc, #136]	; (801d964 <rint+0x104>)
 801d8da:	4132      	asrs	r2, r6
 801d8dc:	ea01 0702 	and.w	r7, r1, r2
 801d8e0:	4307      	orrs	r7, r0
 801d8e2:	d0f5      	beq.n	801d8d0 <rint+0x70>
 801d8e4:	0852      	lsrs	r2, r2, #1
 801d8e6:	4011      	ands	r1, r2
 801d8e8:	430c      	orrs	r4, r1
 801d8ea:	d00b      	beq.n	801d904 <rint+0xa4>
 801d8ec:	ea23 0202 	bic.w	r2, r3, r2
 801d8f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d8f4:	2e13      	cmp	r6, #19
 801d8f6:	fa43 f306 	asr.w	r3, r3, r6
 801d8fa:	bf0c      	ite	eq
 801d8fc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801d900:	2400      	movne	r4, #0
 801d902:	4313      	orrs	r3, r2
 801d904:	4916      	ldr	r1, [pc, #88]	; (801d960 <rint+0x100>)
 801d906:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801d90a:	4622      	mov	r2, r4
 801d90c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d910:	4620      	mov	r0, r4
 801d912:	4629      	mov	r1, r5
 801d914:	f7e2 fcca 	bl	80002ac <__adddf3>
 801d918:	e9cd 0100 	strd	r0, r1, [sp]
 801d91c:	4622      	mov	r2, r4
 801d91e:	462b      	mov	r3, r5
 801d920:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d924:	f7e2 fcc0 	bl	80002a8 <__aeabi_dsub>
 801d928:	e7d2      	b.n	801d8d0 <rint+0x70>
 801d92a:	2e33      	cmp	r6, #51	; 0x33
 801d92c:	dd07      	ble.n	801d93e <rint+0xde>
 801d92e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d932:	d1cd      	bne.n	801d8d0 <rint+0x70>
 801d934:	ee10 2a10 	vmov	r2, s0
 801d938:	f7e2 fcb8 	bl	80002ac <__adddf3>
 801d93c:	e7c8      	b.n	801d8d0 <rint+0x70>
 801d93e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801d942:	f04f 32ff 	mov.w	r2, #4294967295
 801d946:	40f2      	lsrs	r2, r6
 801d948:	4210      	tst	r0, r2
 801d94a:	d0c1      	beq.n	801d8d0 <rint+0x70>
 801d94c:	0852      	lsrs	r2, r2, #1
 801d94e:	4210      	tst	r0, r2
 801d950:	bf1f      	itttt	ne
 801d952:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801d956:	ea20 0202 	bicne.w	r2, r0, r2
 801d95a:	4134      	asrne	r4, r6
 801d95c:	4314      	orrne	r4, r2
 801d95e:	e7d1      	b.n	801d904 <rint+0xa4>
 801d960:	0801e7f8 	.word	0x0801e7f8
 801d964:	000fffff 	.word	0x000fffff

0801d968 <scalbn>:
 801d968:	b570      	push	{r4, r5, r6, lr}
 801d96a:	ec55 4b10 	vmov	r4, r5, d0
 801d96e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d972:	4606      	mov	r6, r0
 801d974:	462b      	mov	r3, r5
 801d976:	b9aa      	cbnz	r2, 801d9a4 <scalbn+0x3c>
 801d978:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d97c:	4323      	orrs	r3, r4
 801d97e:	d03b      	beq.n	801d9f8 <scalbn+0x90>
 801d980:	4b31      	ldr	r3, [pc, #196]	; (801da48 <scalbn+0xe0>)
 801d982:	4629      	mov	r1, r5
 801d984:	2200      	movs	r2, #0
 801d986:	ee10 0a10 	vmov	r0, s0
 801d98a:	f7e2 fe45 	bl	8000618 <__aeabi_dmul>
 801d98e:	4b2f      	ldr	r3, [pc, #188]	; (801da4c <scalbn+0xe4>)
 801d990:	429e      	cmp	r6, r3
 801d992:	4604      	mov	r4, r0
 801d994:	460d      	mov	r5, r1
 801d996:	da12      	bge.n	801d9be <scalbn+0x56>
 801d998:	a327      	add	r3, pc, #156	; (adr r3, 801da38 <scalbn+0xd0>)
 801d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d99e:	f7e2 fe3b 	bl	8000618 <__aeabi_dmul>
 801d9a2:	e009      	b.n	801d9b8 <scalbn+0x50>
 801d9a4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d9a8:	428a      	cmp	r2, r1
 801d9aa:	d10c      	bne.n	801d9c6 <scalbn+0x5e>
 801d9ac:	ee10 2a10 	vmov	r2, s0
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	4629      	mov	r1, r5
 801d9b4:	f7e2 fc7a 	bl	80002ac <__adddf3>
 801d9b8:	4604      	mov	r4, r0
 801d9ba:	460d      	mov	r5, r1
 801d9bc:	e01c      	b.n	801d9f8 <scalbn+0x90>
 801d9be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d9c2:	460b      	mov	r3, r1
 801d9c4:	3a36      	subs	r2, #54	; 0x36
 801d9c6:	4432      	add	r2, r6
 801d9c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d9cc:	428a      	cmp	r2, r1
 801d9ce:	dd0b      	ble.n	801d9e8 <scalbn+0x80>
 801d9d0:	ec45 4b11 	vmov	d1, r4, r5
 801d9d4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801da40 <scalbn+0xd8>
 801d9d8:	f000 f83c 	bl	801da54 <copysign>
 801d9dc:	a318      	add	r3, pc, #96	; (adr r3, 801da40 <scalbn+0xd8>)
 801d9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9e2:	ec51 0b10 	vmov	r0, r1, d0
 801d9e6:	e7da      	b.n	801d99e <scalbn+0x36>
 801d9e8:	2a00      	cmp	r2, #0
 801d9ea:	dd08      	ble.n	801d9fe <scalbn+0x96>
 801d9ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d9f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d9f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d9f8:	ec45 4b10 	vmov	d0, r4, r5
 801d9fc:	bd70      	pop	{r4, r5, r6, pc}
 801d9fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801da02:	da0d      	bge.n	801da20 <scalbn+0xb8>
 801da04:	f24c 3350 	movw	r3, #50000	; 0xc350
 801da08:	429e      	cmp	r6, r3
 801da0a:	ec45 4b11 	vmov	d1, r4, r5
 801da0e:	dce1      	bgt.n	801d9d4 <scalbn+0x6c>
 801da10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801da38 <scalbn+0xd0>
 801da14:	f000 f81e 	bl	801da54 <copysign>
 801da18:	a307      	add	r3, pc, #28	; (adr r3, 801da38 <scalbn+0xd0>)
 801da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1e:	e7e0      	b.n	801d9e2 <scalbn+0x7a>
 801da20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801da24:	3236      	adds	r2, #54	; 0x36
 801da26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801da2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801da2e:	4620      	mov	r0, r4
 801da30:	4629      	mov	r1, r5
 801da32:	2200      	movs	r2, #0
 801da34:	4b06      	ldr	r3, [pc, #24]	; (801da50 <scalbn+0xe8>)
 801da36:	e7b2      	b.n	801d99e <scalbn+0x36>
 801da38:	c2f8f359 	.word	0xc2f8f359
 801da3c:	01a56e1f 	.word	0x01a56e1f
 801da40:	8800759c 	.word	0x8800759c
 801da44:	7e37e43c 	.word	0x7e37e43c
 801da48:	43500000 	.word	0x43500000
 801da4c:	ffff3cb0 	.word	0xffff3cb0
 801da50:	3c900000 	.word	0x3c900000

0801da54 <copysign>:
 801da54:	ec51 0b10 	vmov	r0, r1, d0
 801da58:	ee11 0a90 	vmov	r0, s3
 801da5c:	ee10 2a10 	vmov	r2, s0
 801da60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801da64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801da68:	ea41 0300 	orr.w	r3, r1, r0
 801da6c:	ec43 2b10 	vmov	d0, r2, r3
 801da70:	4770      	bx	lr
	...

0801da74 <_init>:
 801da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da76:	bf00      	nop
 801da78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da7a:	bc08      	pop	{r3}
 801da7c:	469e      	mov	lr, r3
 801da7e:	4770      	bx	lr

0801da80 <_fini>:
 801da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da82:	bf00      	nop
 801da84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da86:	bc08      	pop	{r3}
 801da88:	469e      	mov	lr, r3
 801da8a:	4770      	bx	lr
