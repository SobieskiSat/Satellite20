
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800fdb8  0800fdb8  0001fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100f8  080100f8  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  080100f8  080100f8  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010100  08010100  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010100  08010100  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010104  08010104  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08010108  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004084  20000350  08010454  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200043d4  08010454  000343d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e42  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000500c  00000000  00000000  000571be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e00  00000000  00000000  0005c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bc8  00000000  00000000  0005dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e06  00000000  00000000  0005fb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c79b  00000000  00000000  0008699e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3e9c  00000000  00000000  000a3139  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176fd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b48  00000000  00000000  00177050  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0017fb98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd9c 	.word	0x0800fd9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800fd9c 	.word	0x0800fd9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f94d 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f00a f87a 	bl	800b0b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f965 	bl	80012ba <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f92d 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000118 	.word	0x20000118
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20000a48 	.word	0x20000a48

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000a48 	.word	0x20000a48

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff feb8 	bl	8001054 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e099      	b.n	8001424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001310:	e00f      	b.n	8001332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001312:	f7ff fe9f 	bl	8001054 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b05      	cmp	r3, #5
 800131e:	d908      	bls.n	8001332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2220      	movs	r2, #32
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e078      	b.n	8001424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e8      	bne.n	8001312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_DMA_Init+0x158>)
 800134c:	4013      	ands	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2b04      	cmp	r3, #4
 800138a:	d107      	bne.n	800139c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4313      	orrs	r3, r2
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f023 0307 	bic.w	r3, r3, #7
 80013b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d117      	bne.n	80013f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00e      	beq.n	80013f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa99 	bl	8001910 <DMA_CheckFifoParam>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013f2:	2301      	movs	r3, #1
 80013f4:	e016      	b.n	8001424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fa50 	bl	80018a4 <DMA_CalcBaseAndBitshift>
 8001404:	4603      	mov	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	223f      	movs	r2, #63	; 0x3f
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	f010803f 	.word	0xf010803f

08001430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_DMA_Start_IT+0x26>
 8001452:	2302      	movs	r3, #2
 8001454:	e048      	b.n	80014e8 <HAL_DMA_Start_IT+0xb8>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d137      	bne.n	80014da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2202      	movs	r2, #2
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9e2 	bl	8001848 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0216 	orr.w	r2, r2, #22
 800149e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0208 	orr.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e005      	b.n	80014e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d004      	beq.n	800150e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00c      	b.n	8001528 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001540:	4b92      	ldr	r3, [pc, #584]	; (800178c <HAL_DMA_IRQHandler+0x258>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a92      	ldr	r2, [pc, #584]	; (8001790 <HAL_DMA_IRQHandler+0x25c>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0a9b      	lsrs	r3, r3, #10
 800154c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	2208      	movs	r2, #8
 8001560:	409a      	lsls	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	2208      	movs	r2, #8
 800158e:	409a      	lsls	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d012      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c2:	2201      	movs	r2, #1
 80015c4:	409a      	lsls	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	f043 0202 	orr.w	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2204      	movs	r2, #4
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d012      	beq.n	800160c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00b      	beq.n	800160c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	2204      	movs	r2, #4
 80015fa:	409a      	lsls	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f043 0204 	orr.w	r2, r3, #4
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	2210      	movs	r2, #16
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d043      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03c      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	2210      	movs	r2, #16
 8001630:	409a      	lsls	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d018      	beq.n	8001676 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d108      	bne.n	8001664 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d024      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	4798      	blx	r3
 8001662:	e01f      	b.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01b      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	4798      	blx	r3
 8001674:	e016      	b.n	80016a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0208 	bic.w	r2, r2, #8
 8001692:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2220      	movs	r2, #32
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 808e 	beq.w	80017d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8086 	beq.w	80017d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2220      	movs	r2, #32
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d136      	bne.n	800174c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0216 	bic.w	r2, r2, #22
 80016ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <HAL_DMA_IRQHandler+0x1da>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	223f      	movs	r2, #63	; 0x3f
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173e:	2b00      	cmp	r3, #0
 8001740:	d07d      	beq.n	800183e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
        }
        return;
 800174a:	e078      	b.n	800183e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01c      	beq.n	8001794 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	2b00      	cmp	r3, #0
 800176e:	d030      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
 8001778:	e02b      	b.n	80017d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d027      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
 800178a:	e022      	b.n	80017d2 <HAL_DMA_IRQHandler+0x29e>
 800178c:	20000118 	.word	0x20000118
 8001790:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10f      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0210 	bic.w	r2, r2, #16
 80017b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d032      	beq.n	8001840 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d022      	beq.n	800182c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	429a      	cmp	r2, r3
 8001808:	d307      	bcc.n	800181a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f2      	bne.n	80017fe <HAL_DMA_IRQHandler+0x2ca>
 8001818:	e000      	b.n	800181c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800181a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e000      	b.n	8001840 <HAL_DMA_IRQHandler+0x30c>
        return;
 800183e:	bf00      	nop
    }
  }
}
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop

08001848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001864:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b40      	cmp	r3, #64	; 0x40
 8001874:	d108      	bne.n	8001888 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001886:	e007      	b.n	8001898 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3b10      	subs	r3, #16
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <DMA_CalcBaseAndBitshift+0x64>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <DMA_CalcBaseAndBitshift+0x68>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d909      	bls.n	80018e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018da:	f023 0303 	bic.w	r3, r3, #3
 80018de:	1d1a      	adds	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58
 80018e4:	e007      	b.n	80018f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	aaaaaaab 	.word	0xaaaaaaab
 800190c:	0800fe0c 	.word	0x0800fe0c

08001910 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d855      	bhi.n	80019dc <DMA_CheckFifoParam+0xcc>
 8001930:	a201      	add	r2, pc, #4	; (adr r2, 8001938 <DMA_CheckFifoParam+0x28>)
 8001932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001936:	bf00      	nop
 8001938:	08001949 	.word	0x08001949
 800193c:	0800195b 	.word	0x0800195b
 8001940:	08001949 	.word	0x08001949
 8001944:	080019dd 	.word	0x080019dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d045      	beq.n	80019e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001958:	e042      	b.n	80019e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001962:	d13f      	bne.n	80019e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001968:	e03c      	b.n	80019e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001972:	d121      	bne.n	80019b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d836      	bhi.n	80019e8 <DMA_CheckFifoParam+0xd8>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <DMA_CheckFifoParam+0x70>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	08001991 	.word	0x08001991
 8001984:	08001997 	.word	0x08001997
 8001988:	08001991 	.word	0x08001991
 800198c:	080019a9 	.word	0x080019a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      break;
 8001994:	e02f      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a6:	e021      	b.n	80019ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019b0:	d11e      	bne.n	80019f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019b6:	e01b      	b.n	80019f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d902      	bls.n	80019c4 <DMA_CheckFifoParam+0xb4>
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d003      	beq.n	80019ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019c2:	e018      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      break;
 80019c8:	e015      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
      break;
 80019da:	e00b      	b.n	80019f4 <DMA_CheckFifoParam+0xe4>
      break;
 80019dc:	bf00      	nop
 80019de:	e00a      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019e0:	bf00      	nop
 80019e2:	e008      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019e4:	bf00      	nop
 80019e6:	e006      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019e8:	bf00      	nop
 80019ea:	e004      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019ec:	bf00      	nop
 80019ee:	e002      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <DMA_CheckFifoParam+0xe6>
      break;
 80019f4:	bf00      	nop
    }
  } 
  
  return status; 
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e16b      	b.n	8001cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 815a 	bne.w	8001cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x4a>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b12      	cmp	r3, #18
 8001a4c:	d123      	bne.n	8001a96 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0203 	and.w	r2, r3, #3
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <HAL_GPIO_Init+0xe6>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80b4 	beq.w	8001cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <HAL_GPIO_Init+0x308>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	4a5e      	ldr	r2, [pc, #376]	; (8001d0c <HAL_GPIO_Init+0x308>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9a:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <HAL_GPIO_Init+0x308>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x310>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d02b      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x314>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d025      	beq.n	8001c26 <HAL_GPIO_Init+0x222>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x318>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01f      	beq.n	8001c22 <HAL_GPIO_Init+0x21e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_GPIO_Init+0x31c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d019      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4d      	ldr	r2, [pc, #308]	; (8001d24 <HAL_GPIO_Init+0x320>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x216>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <HAL_GPIO_Init+0x324>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x212>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_GPIO_Init+0x328>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x20e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4a      	ldr	r2, [pc, #296]	; (8001d30 <HAL_GPIO_Init+0x32c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x20a>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x228>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4934      	ldr	r1, [pc, #208]	; (8001d10 <HAL_GPIO_Init+0x30c>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6e:	4a31      	ldr	r2, [pc, #196]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_GPIO_Init+0x330>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae90 	bls.w	8001a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	3724      	adds	r7, #36	; 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d84:	e003      	b.n	8001d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d86:	887b      	ldrh	r3, [r7, #2]
 8001d88:	041a      	lsls	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	401a      	ands	r2, r3
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d104      	bne.n	8001dbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	619a      	str	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e10f      	b.n	8002002 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f009 f984 	bl	800b104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e14:	f001 fe70 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8001e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a7b      	ldr	r2, [pc, #492]	; (800200c <HAL_I2C_Init+0x23c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d807      	bhi.n	8001e34 <HAL_I2C_Init+0x64>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_I2C_Init+0x240>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e006      	b.n	8001e42 <HAL_I2C_Init+0x72>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a77      	ldr	r2, [pc, #476]	; (8002014 <HAL_I2C_Init+0x244>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0db      	b.n	8002002 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a72      	ldr	r2, [pc, #456]	; (8002018 <HAL_I2C_Init+0x248>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a64      	ldr	r2, [pc, #400]	; (800200c <HAL_I2C_Init+0x23c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <HAL_I2C_Init+0xb4>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	e009      	b.n	8001e98 <HAL_I2C_Init+0xc8>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_I2C_Init+0x24c>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	3301      	adds	r3, #1
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4956      	ldr	r1, [pc, #344]	; (800200c <HAL_I2C_Init+0x23c>)
 8001eb4:	428b      	cmp	r3, r1
 8001eb6:	d80d      	bhi.n	8001ed4 <HAL_I2C_Init+0x104>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e59      	subs	r1, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	bf38      	it	cc
 8001ed0:	2304      	movcc	r3, #4
 8001ed2:	e04f      	b.n	8001f74 <HAL_I2C_Init+0x1a4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_I2C_Init+0x130>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	e012      	b.n	8001f26 <HAL_I2C_Init+0x156>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Init+0x15e>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e022      	b.n	8001f74 <HAL_I2C_Init+0x1a4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10e      	bne.n	8001f54 <HAL_I2C_Init+0x184>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1e58      	subs	r0, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Init+0x1a4>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6809      	ldr	r1, [r1, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6911      	ldr	r1, [r2, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	000186a0 	.word	0x000186a0
 8002010:	001e847f 	.word	0x001e847f
 8002014:	003d08ff 	.word	0x003d08ff
 8002018:	431bde83 	.word	0x431bde83
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b08f      	sub	sp, #60	; 0x3c
 8002024:	af0a      	add	r7, sp, #40	; 0x28
 8002026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e10f      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f009 fcdb 	bl	800ba08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f005 faa2 	bl	80075ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	687e      	ldr	r6, [r7, #4]
 800207e:	466d      	mov	r5, sp
 8002080:	f106 0410 	add.w	r4, r6, #16
 8002084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002090:	e885 0003 	stmia.w	r5, {r0, r1}
 8002094:	1d33      	adds	r3, r6, #4
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f005 f979 	bl	8007390 <USB_CoreInit>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0d0      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 fa90 	bl	80075dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e04a      	b.n	8002158 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	333d      	adds	r3, #61	; 0x3d
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	333c      	adds	r3, #60	; 0x3c
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	b298      	uxth	r0, r3
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3342      	adds	r3, #66	; 0x42
 80020fe:	4602      	mov	r2, r0
 8002100:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	333f      	adds	r3, #63	; 0x3f
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3344      	adds	r3, #68	; 0x44
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3348      	adds	r3, #72	; 0x48
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	3350      	adds	r3, #80	; 0x50
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	3301      	adds	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3af      	bcc.n	80020c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e044      	b.n	80021f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3301      	adds	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d3b5      	bcc.n	8002168 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	687e      	ldr	r6, [r7, #4]
 8002204:	466d      	mov	r5, sp
 8002206:	f106 0410 	add.w	r4, r6, #16
 800220a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002216:	e885 0003 	stmia.w	r5, {r0, r1}
 800221a:	1d33      	adds	r3, r6, #4
 800221c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221e:	6838      	ldr	r0, [r7, #0]
 8002220:	f005 fa06 	bl	8007630 <USB_DevInit>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00d      	b.n	8002252 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f006 f9fb 	bl	8008646 <USB_DevDisconnect>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_PCD_Start+0x1c>
 8002272:	2302      	movs	r3, #2
 8002274:	e020      	b.n	80022b8 <HAL_PCD_Start+0x5e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	2b01      	cmp	r3, #1
 8002284:	d109      	bne.n	800229a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 f9b9 	bl	8008616 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 f975 	bl	8007598 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b08d      	sub	sp, #52	; 0x34
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f006 fa60 	bl	800879c <USB_GetMode>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 838e 	bne.w	8002a00 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f006 f9c4 	bl	8008676 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8384 	beq.w	80029fe <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f006 f9bb 	bl	8008676 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f002 0202 	and.w	r2, r2, #2
 8002318:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f006 f9a9 	bl	8008676 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800232e:	d17b      	bne.n	8002428 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f006 f9af 	bl	800869c <USB_ReadDevAllOutEpInterrupt>
 800233e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002340:	e06f      	b.n	8002422 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d064      	beq.n	8002416 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f006 f9d4 	bl	8008704 <USB_ReadDevOutEPInterrupt>
 800235c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00c      	beq.n	8002382 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	2301      	movs	r3, #1
 8002378:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800237a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fe0d 	bl	8002f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 ff0c 	bl	80031ac <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	2308      	movs	r3, #8
 80023a4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023bc:	461a      	mov	r2, r3
 80023be:	2310      	movs	r3, #16
 80023c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023de:	461a      	mov	r2, r3
 80023e0:	2101      	movs	r1, #1
 80023e2:	f006 fa1f 	bl	8008824 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	461a      	mov	r2, r3
 80023f4:	2320      	movs	r3, #32
 80023f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	461a      	mov	r2, r3
 8002410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002414:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3301      	adds	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	d18c      	bne.n	8002342 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f006 f922 	bl	8008676 <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002438:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800243c:	f040 80c4 	bne.w	80025c8 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f006 f943 	bl	80086d0 <USB_ReadDevAllInEpInterrupt>
 800244a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002450:	e0b6      	b.n	80025c0 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80ab 	beq.w	80025b4 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f006 f969 	bl	8008740 <USB_ReadDevInEPInterrupt>
 800246e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d05b      	beq.n	8002532 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	2201      	movs	r2, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	43db      	mvns	r3, r3
 8002494:	69f9      	ldr	r1, [r7, #28]
 8002496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800249a:	4013      	ands	r3, r2
 800249c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024aa:	461a      	mov	r2, r3
 80024ac:	2301      	movs	r3, #1
 80024ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d11b      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3348      	adds	r3, #72	; 0x48
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4403      	add	r3, r0
 80024d8:	3344      	adds	r3, #68	; 0x44
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4419      	add	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4403      	add	r3, r0
 80024ec:	3348      	adds	r3, #72	; 0x48
 80024ee:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f009 fb07 	bl	800bb0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d116      	bne.n	8002532 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d113      	bne.n	8002532 <HAL_PCD_IRQHandler+0x272>
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3350      	adds	r3, #80	; 0x50
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800252a:	461a      	mov	r2, r3
 800252c:	2101      	movs	r1, #1
 800252e:	f006 f979 	bl	8008824 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002548:	461a      	mov	r2, r3
 800254a:	2308      	movs	r3, #8
 800254c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002564:	461a      	mov	r2, r3
 8002566:	2310      	movs	r3, #16
 8002568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002580:	461a      	mov	r2, r3
 8002582:	2340      	movs	r3, #64	; 0x40
 8002584:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	015a      	lsls	r2, r3, #5
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259c:	461a      	mov	r2, r3
 800259e:	2302      	movs	r3, #2
 80025a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fc67 	bl	8002e82 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f af45 	bne.w	8002452 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f006 f852 	bl	8008676 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025dc:	d122      	bne.n	8002624 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002604:	2100      	movs	r1, #0
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fe88 	bl	800331c <HAL_PCDEx_LPM_Callback>
 800260c:	e002      	b.n	8002614 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f009 faf2 	bl	800bbf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f006 f824 	bl	8008676 <USB_ReadInterrupts>
 800262e:	4603      	mov	r3, r0
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002638:	d112      	bne.n	8002660 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f009 faae 	bl	800bbac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800265e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f006 f806 	bl	8008676 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	f040 80a7 	bne.w	80027c6 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2110      	movs	r1, #16
 8002692:	4618      	mov	r0, r3
 8002694:	f005 f93e 	bl	8007914 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269c:	e036      	b.n	800270c <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026aa:	461a      	mov	r2, r3
 80026ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026de:	461a      	mov	r2, r3
 80026e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f6:	0151      	lsls	r1, r2, #5
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	440a      	add	r2, r1
 80026fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002704:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	3301      	adds	r3, #1
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002712:	429a      	cmp	r2, r3
 8002714:	d3c3      	bcc.n	800269e <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002724:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002728:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f043 030b 	orr.w	r3, r3, #11
 8002746:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f043 030b 	orr.w	r3, r3, #11
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	e015      	b.n	800278c <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800276e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002772:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002776:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002786:	f043 030b 	orr.w	r3, r3, #11
 800278a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800279e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b0:	461a      	mov	r2, r3
 80027b2:	f006 f837 	bl	8008824 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 ff53 	bl	8008676 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027da:	d124      	bne.n	8002826 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 ffe9 	bl	80087b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 f8f3 	bl	80079d6 <USB_GetDevSpeed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681c      	ldr	r4, [r3, #0]
 80027fc:	f001 f970 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8002800:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4620      	mov	r0, r4
 800280c:	f004 fe22 	bl	8007454 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f009 f9a2 	bl	800bb5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f005 ff23 	bl	8008676 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b10      	cmp	r3, #16
 8002838:	d161      	bne.n	80028fe <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0210 	bic.w	r2, r2, #16
 8002848:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 020f 	and.w	r2, r3, #15
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	3304      	adds	r3, #4
 8002868:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	0c5b      	lsrs	r3, r3, #17
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	2b02      	cmp	r3, #2
 8002874:	d124      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d035      	beq.n	80028ee <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800288c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002890:	b29b      	uxth	r3, r3
 8002892:	461a      	mov	r2, r3
 8002894:	6a38      	ldr	r0, [r7, #32]
 8002896:	f005 fd9b 	bl	80083d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a6:	441a      	add	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b8:	441a      	add	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	619a      	str	r2, [r3, #24]
 80028be:	e016      	b.n	80028ee <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	0c5b      	lsrs	r3, r3, #17
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d110      	bne.n	80028ee <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d2:	2208      	movs	r2, #8
 80028d4:	4619      	mov	r1, r3
 80028d6:	6a38      	ldr	r0, [r7, #32]
 80028d8:	f005 fd7a 	bl	80083d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e8:	441a      	add	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0210 	orr.w	r2, r2, #16
 80028fc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f005 feb7 	bl	8008676 <USB_ReadInterrupts>
 8002908:	4603      	mov	r3, r0
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b08      	cmp	r3, #8
 8002910:	d10a      	bne.n	8002928 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f009 f913 	bl	800bb3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f002 0208 	and.w	r2, r2, #8
 8002926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fea2 	bl	8008676 <USB_ReadInterrupts>
 8002932:	4603      	mov	r3, r0
 8002934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d10f      	bne.n	800295e <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	b2db      	uxtb	r3, r3
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f009 f975 	bl	800bc38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f005 fe87 	bl	8008676 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002972:	d10f      	bne.n	8002994 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f009 f948 	bl	800bc14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f005 fe6c 	bl	8008676 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a8:	d10a      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f009 f956 	bl	800bc5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 fe56 	bl	8008676 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d115      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f009 f946 	bl	800bc78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	e000      	b.n	8002a00 <HAL_PCD_IRQHandler+0x740>
      return;
 80029fe:	bf00      	nop
    }
  }
}
 8002a00:	3734      	adds	r7, #52	; 0x34
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}

08002a06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_PCD_SetAddress+0x1a>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e013      	b.n	8002a48 <HAL_PCD_SetAddress+0x42>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fdc6 	bl	80085ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	70fb      	strb	r3, [r7, #3]
 8002a62:	460b      	mov	r3, r1
 8002a64:	803b      	strh	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	da0f      	bge.n	8002a96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	3338      	adds	r3, #56	; 0x38
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e00f      	b.n	8002ab6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ac2:	883a      	ldrh	r2, [r7, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	78ba      	ldrb	r2, [r7, #2]
 8002acc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	785b      	ldrb	r3, [r3, #1]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ae0:	78bb      	ldrb	r3, [r7, #2]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d102      	bne.n	8002aec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_EP_Open+0xaa>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e00e      	b.n	8002b18 <HAL_PCD_EP_Open+0xc8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 ff89 	bl	8007a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b16:	7afb      	ldrb	r3, [r7, #11]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0f      	bge.n	8002b54 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 020f 	and.w	r2, r3, #15
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3338      	adds	r3, #56	; 0x38
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
 8002b52:	e00f      	b.n	8002b74 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Close+0x6e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Close+0x8c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 ffc7 	bl	8007b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	f005 fa4a 	bl	80080c0 <USB_EP0StartXfer>
 8002c2c:	e008      	b.n	8002c40 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6979      	ldr	r1, [r7, #20]
 8002c3c:	f004 fffc 	bl	8007c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	f003 020f 	and.w	r2, r3, #15
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c6c:	681b      	ldr	r3, [r3, #0]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	460b      	mov	r3, r1
 8002c88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3338      	adds	r3, #56	; 0x38
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	7afb      	ldrb	r3, [r7, #11]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	f005 f9e8 	bl	80080c0 <USB_EP0StartXfer>
 8002cf0:	e008      	b.n	8002d04 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6979      	ldr	r1, [r7, #20]
 8002d00:	f004 ff9a 	bl	8007c38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 020f 	and.w	r2, r3, #15
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d901      	bls.n	8002d2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e050      	b.n	8002dce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da0f      	bge.n	8002d54 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3338      	adds	r3, #56	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	3304      	adds	r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
 8002d52:	e00d      	b.n	8002d70 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_EP_SetStall+0x82>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e01e      	b.n	8002dce <HAL_PCD_EP_SetStall+0xc0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 fb3f 	bl	8008422 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	b2d9      	uxtb	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f005 fd30 	bl	8008824 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d901      	bls.n	8002df4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e042      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da0f      	bge.n	8002e1c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	3338      	adds	r3, #56	; 0x38
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	705a      	strb	r2, [r3, #1]
 8002e1a:	e00f      	b.n	8002e3c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_EP_ClrStall+0x86>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e00e      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0xa4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68f9      	ldr	r1, [r7, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f005 fb47 	bl	80084fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08a      	sub	sp, #40	; 0x28
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d901      	bls.n	8002eba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06c      	b.n	8002f94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d902      	bls.n	8002ed6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3303      	adds	r3, #3
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ede:	e02b      	b.n	8002f38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d902      	bls.n	8002efc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3303      	adds	r3, #3
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4603      	mov	r3, r0
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f005 fa23 	bl	8008366 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	441a      	add	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	441a      	add	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d809      	bhi.n	8002f62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d203      	bcs.n	8002f62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1be      	bne.n	8002ee0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d811      	bhi.n	8002f92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	2201      	movs	r2, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f8e:	4013      	ands	r3, r2
 8002f90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	333c      	adds	r3, #60	; 0x3c
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80b3 	bne.w	800313a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a70      	ldr	r2, [pc, #448]	; (80031a4 <PCD_EP_OutXfrComplete_int+0x208>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d90e      	bls.n	8003004 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f008 fd53 	bl	800bab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003014:	461a      	mov	r2, r3
 8003016:	2101      	movs	r1, #1
 8003018:	f005 fc04 	bl	8008824 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	2308      	movs	r3, #8
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e0b3      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2320      	movs	r3, #32
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	e0a4      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 809f 	bne.w	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <PCD_EP_OutXfrComplete_int+0x208>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d90f      	bls.n	8003082 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307e:	6093      	str	r3, [r2, #8]
 8003080:	e08a      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003094:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	440b      	add	r3, r1
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030a8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030bc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4403      	add	r3, r0
 80030e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4419      	add	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4403      	add	r3, r0
 80030f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030fa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f008 fce6 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d144      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d138      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003130:	461a      	mov	r2, r3
 8003132:	2101      	movs	r1, #1
 8003134:	f005 fb76 	bl	8008824 <USB_EP0_OutStart>
 8003138:	e02e      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d124      	bne.n	800318c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	461a      	mov	r2, r3
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	6093      	str	r3, [r2, #8]
 8003160:	e01a      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	461a      	mov	r2, r3
 800317a:	2320      	movs	r3, #32
 800317c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4619      	mov	r1, r3
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f008 fca5 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
 800318a:	e005      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f008 fc9e 	bl	800bad4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	4f54300a 	.word	0x4f54300a
 80031a8:	4f54310a 	.word	0x4f54310a

080031ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	333c      	adds	r3, #60	; 0x3c
 80031c4:	3304      	adds	r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d113      	bne.n	800320a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <PCD_EP_OutSetupPacket_int+0xb8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d922      	bls.n	8003230 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01d      	beq.n	8003230 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	6093      	str	r3, [r2, #8]
 8003208:	e012      	b.n	8003230 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <PCD_EP_OutSetupPacket_int+0xbc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10e      	bne.n	8003230 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f008 fc3d 	bl	800bab0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <PCD_EP_OutSetupPacket_int+0xb8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d90c      	bls.n	8003258 <PCD_EP_OutSetupPacket_int+0xac>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d108      	bne.n	8003258 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003250:	461a      	mov	r2, r3
 8003252:	2101      	movs	r1, #1
 8003254:	f005 fae6 	bl	8008824 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	4f54300a 	.word	0x4f54300a
 8003268:	4f54310a 	.word	0x4f54310a

0800326c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
 8003278:	4613      	mov	r3, r2
 800327a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800328a:	883b      	ldrh	r3, [r7, #0]
 800328c:	0419      	lsls	r1, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	430a      	orrs	r2, r1
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
 8003298:	e028      	b.n	80032ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e00d      	b.n	80032ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3340      	adds	r3, #64	; 0x40
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	3301      	adds	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3ec      	bcc.n	80032ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032d4:	883b      	ldrh	r3, [r7, #0]
 80032d6:	0418      	lsls	r0, r3, #16
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6819      	ldr	r1, [r3, #0]
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	3b01      	subs	r3, #1
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4302      	orrs	r2, r0
 80032e4:	3340      	adds	r3, #64	; 0x40
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e22d      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d075      	beq.n	800343e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003352:	4ba3      	ldr	r3, [pc, #652]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	2b08      	cmp	r3, #8
 8003368:	d112      	bne.n	8003390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05b      	beq.n	800343c <HAL_RCC_OscConfig+0x108>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d157      	bne.n	800343c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e208      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x74>
 800339a:	4b91      	ldr	r3, [pc, #580]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b8b      	ldr	r3, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a8a      	ldr	r2, [pc, #552]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a87      	ldr	r2, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033cc:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a83      	ldr	r2, [pc, #524]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe32 	bl	8001054 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe2e 	bl	8001054 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1cd      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xc0>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fe1e 	bl	8001054 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fe1a 	bl	8001054 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1b9      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0xe8>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d063      	beq.n	8003512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11c      	bne.n	800349c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x152>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e18d      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4952      	ldr	r1, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	e03a      	b.n	8003512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCC_OscConfig+0x2b0>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fdd3 	bl	8001054 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fd fdcf 	bl	8001054 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e16e      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4940      	ldr	r1, [pc, #256]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0x2b0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd fdb2 	bl	8001054 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fd fdae 	bl	8001054 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e14d      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d030      	beq.n	8003580 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_OscConfig+0x2b4>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fd92 	bl	8001054 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd fd8e 	bl	8001054 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e12d      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x200>
 8003552:	e015      	b.n	8003580 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x2b4>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7fd fd7b 	bl	8001054 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003562:	f7fd fd77 	bl	8001054 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e116      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a0 	beq.w	80036ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d121      	bne.n	800360e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fd fd3d 	bl	8001054 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e011      	b.n	8003602 <HAL_RCC_OscConfig+0x2ce>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	42470e80 	.word	0x42470e80
 80035ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fd30 	bl	8001054 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0cf      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b6a      	ldr	r3, [pc, #424]	; (80037ac <HAL_RCC_OscConfig+0x478>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x2f0>
 8003616:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x32a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x312>
 800362c:	4b60      	ldr	r3, [pc, #384]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a5f      	ldr	r2, [pc, #380]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	e00b      	b.n	800365e <HAL_RCC_OscConfig+0x32a>
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a59      	ldr	r2, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a56      	ldr	r2, [pc, #344]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fd fcf5 	bl	8001054 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fd fcf1 	bl	8001054 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e08e      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCC_OscConfig+0x33a>
 8003690:	e014      	b.n	80036bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fd fcdf 	bl	8001054 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fd fcdb 	bl	8001054 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e078      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d064      	beq.n	80037a0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d05c      	beq.n	800379c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d141      	bne.n	800376e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b32      	ldr	r3, [pc, #200]	; (80037b4 <HAL_RCC_OscConfig+0x480>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fd fcb0 	bl	8001054 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd fcac 	bl	8001054 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04b      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	019b      	lsls	r3, r3, #6
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	491d      	ldr	r1, [pc, #116]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_RCC_OscConfig+0x480>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fc85 	bl	8001054 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fc81 	bl	8001054 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e020      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x41a>
 800376c:	e018      	b.n	80037a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b11      	ldr	r3, [pc, #68]	; (80037b4 <HAL_RCC_OscConfig+0x480>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fc6e 	bl	8001054 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fc6a 	bl	8001054 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e009      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_RCC_OscConfig+0x47c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x448>
 800379a:	e001      	b.n	80037a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40007000 	.word	0x40007000
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470060 	.word	0x42470060

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0ca      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037cc:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d90c      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b64      	ldr	r3, [pc, #400]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b62      	ldr	r3, [pc, #392]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0b6      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800380c:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003824:	4b52      	ldr	r3, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a51      	ldr	r2, [pc, #324]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800382e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	494c      	ldr	r1, [pc, #304]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d044      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b46      	ldr	r3, [pc, #280]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d119      	bne.n	8003896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e07d      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d003      	beq.n	8003876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003872:	2b03      	cmp	r3, #3
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003876:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e06d      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e065      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 0203 	bic.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4933      	ldr	r1, [pc, #204]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a8:	f7fd fbd4 	bl	8001054 <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b0:	f7fd fbd0 	bl	8001054 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e04d      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 020c 	and.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d1eb      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d20c      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_RCC_ClockConfig+0x1b4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e030      	b.n	8003962 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4915      	ldr	r1, [pc, #84]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	4313      	orrs	r3, r2
 800391c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	490d      	ldr	r1, [pc, #52]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800393e:	f000 f81d 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003942:	4601      	mov	r1, r0
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	4a09      	ldr	r2, [pc, #36]	; (8003974 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	fa21 f303 	lsr.w	r3, r1, r3
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800395a:	2000      	movs	r0, #0
 800395c:	f7fd fb36 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023c00 	.word	0x40023c00
 8003970:	40023800 	.word	0x40023800
 8003974:	0800fe28 	.word	0x0800fe28
 8003978:	20000118 	.word	0x20000118

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	2300      	movs	r3, #0
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003992:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d007      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x32>
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d008      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x38>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 808d 	bne.w	8003ac2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80039aa:	60bb      	str	r3, [r7, #8]
       break;
 80039ac:	e08c      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <HAL_RCC_GetSysClockFreq+0x160>)
 80039b0:	60bb      	str	r3, [r7, #8]
      break;
 80039b2:	e089      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b4:	4b47      	ldr	r3, [pc, #284]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039be:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d023      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ca:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	ea03 0501 	and.w	r5, r3, r1
 80039e0:	ea04 0602 	and.w	r6, r4, r2
 80039e4:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <HAL_RCC_GetSysClockFreq+0x160>)
 80039e6:	fb02 f106 	mul.w	r1, r2, r6
 80039ea:	2200      	movs	r2, #0
 80039ec:	fb02 f205 	mul.w	r2, r2, r5
 80039f0:	440a      	add	r2, r1
 80039f2:	493a      	ldr	r1, [pc, #232]	; (8003adc <HAL_RCC_GetSysClockFreq+0x160>)
 80039f4:	fba5 0101 	umull	r0, r1, r5, r1
 80039f8:	1853      	adds	r3, r2, r1
 80039fa:	4619      	mov	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	461a      	mov	r2, r3
 8003a04:	4623      	mov	r3, r4
 8003a06:	f7fd f93f 	bl	8000c88 <__aeabi_uldivmod>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e049      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	ea03 0501 	and.w	r5, r3, r1
 8003a28:	ea04 0602 	and.w	r6, r4, r2
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	4632      	mov	r2, r6
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	f04f 0400 	mov.w	r4, #0
 8003a38:	0154      	lsls	r4, r2, #5
 8003a3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a3e:	014b      	lsls	r3, r1, #5
 8003a40:	4619      	mov	r1, r3
 8003a42:	4622      	mov	r2, r4
 8003a44:	1b49      	subs	r1, r1, r5
 8003a46:	eb62 0206 	sbc.w	r2, r2, r6
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	0194      	lsls	r4, r2, #6
 8003a54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a58:	018b      	lsls	r3, r1, #6
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	00e2      	lsls	r2, r4, #3
 8003a6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a6e:	00d9      	lsls	r1, r3, #3
 8003a70:	460b      	mov	r3, r1
 8003a72:	4614      	mov	r4, r2
 8003a74:	195b      	adds	r3, r3, r5
 8003a76:	eb44 0406 	adc.w	r4, r4, r6
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	02a2      	lsls	r2, r4, #10
 8003a84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a88:	0299      	lsls	r1, r3, #10
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	4621      	mov	r1, r4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7fd f8f4 	bl	8000c88 <__aeabi_uldivmod>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	60bb      	str	r3, [r7, #8]
      break;
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac2:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ac4:	60bb      	str	r3, [r7, #8]
      break;
 8003ac6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	00f42400 	.word	0x00f42400
 8003adc:	00b71b00 	.word	0x00b71b00

08003ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000118 	.word	0x20000118

08003af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003afc:	f7ff fff0 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0a9b      	lsrs	r3, r3, #10
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0800fe38 	.word	0x0800fe38

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b24:	f7ff ffdc 	bl	8003ae0 <HAL_RCC_GetHCLKFreq>
 8003b28:	4601      	mov	r1, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0b5b      	lsrs	r3, r3, #13
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40023800 	.word	0x40023800
 8003b44:	0800fe38 	.word	0x0800fe38

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d035      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fa6d 	bl	8001054 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b7e:	f7fd fa69 	bl	8001054 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0b0      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b90:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	019a      	lsls	r2, r3, #6
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	071b      	lsls	r3, r3, #28
 8003ba8:	4955      	ldr	r1, [pc, #340]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd fa4d 	bl	8001054 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bbe:	f7fd fa49 	bl	8001054 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e090      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd0:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8083 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a43      	ldr	r2, [pc, #268]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3e      	ldr	r2, [pc, #248]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fa1f 	bl	8001054 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fd fa1b 	bl	8001054 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e062      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c56:	4b2a      	ldr	r3, [pc, #168]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	4b29      	ldr	r3, [pc, #164]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d114      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd f9e9 	bl	8001054 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd f9e5 	bl	8001054 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e02a      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cca:	490d      	ldr	r1, [pc, #52]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
 8003cd0:	e005      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	4905      	ldr	r1, [pc, #20]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	42470068 	.word	0x42470068
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42470e40 	.word	0x42470e40

08003d0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e083      	b.n	8003e26 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7f5b      	ldrb	r3, [r3, #29]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f007 fa30 	bl	800b194 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	22ca      	movs	r2, #202	; 0xca
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2253      	movs	r2, #83	; 0x53
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f897 	bl	8003e7e <RTC_EnterInitMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2204      	movs	r2, #4
 8003d62:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e05e      	b.n	8003e26 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	041a      	lsls	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10e      	bne.n	8003df4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f829 	bl	8003e2e <HAL_RTC_WaitForSynchro>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	22ff      	movs	r2, #255	; 0xff
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2204      	movs	r2, #4
 8003dee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e018      	b.n	8003e26 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd f903 	bl	8001054 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e50:	e009      	b.n	8003e66 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e52:	f7fd f8ff 	bl	8001054 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e60:	d901      	bls.n	8003e66 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e007      	b.n	8003e76 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d119      	bne.n	8003ecc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ea2:	f7fd f8d7 	bl	8001054 <HAL_GetTick>
 8003ea6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ea8:	e009      	b.n	8003ebe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003eaa:	f7fd f8d3 	bl	8001054 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb8:	d901      	bls.n	8003ebe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e007      	b.n	8003ece <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ee      	beq.n	8003eaa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e01d      	b.n	8003f24 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f007 f960 	bl	800b1c0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2203      	movs	r2, #3
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f80f 	bl	8003f2c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f2c:	b5b0      	push	{r4, r5, r7, lr}
 8003f2e:	b08e      	sub	sp, #56	; 0x38
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003f4c:	2376      	movs	r3, #118	; 0x76
 8003f4e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681d      	ldr	r5, [r3, #0]
 8003f54:	466c      	mov	r4, sp
 8003f56:	f107 0318 	add.w	r3, r7, #24
 8003f5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f62:	f107 030c 	add.w	r3, r7, #12
 8003f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f002 fcb1 	bl	80068d0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <HAL_SD_InitCard+0xb4>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fcf2 	bl	8006962 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_SD_InitCard+0xb4>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8003f84:	2002      	movs	r0, #2
 8003f86:	f7fd f871 	bl	800106c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fffe 	bl	8004f8c <SD_PowerON>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e013      	b.n	8003fd8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 ff22 	bl	8004dfa <SD_InitCard>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bdb0      	pop	{r4, r5, r7, pc}
 8003fe0:	422580a0 	.word	0x422580a0

08003fe4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	; 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0ad      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 80a6 	bne.w	8004166 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	441a      	add	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	429a      	cmp	r2, r3
 800402c:	d907      	bls.n	800403e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e094      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2203      	movs	r2, #3
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	4a42      	ldr	r2, [pc, #264]	; (8004170 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	4a41      	ldr	r2, [pc, #260]	; (8004174 <HAL_SD_ReadBlocks_DMA+0x190>)
 8004070:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	2200      	movs	r2, #0
 8004078:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3380      	adds	r3, #128	; 0x80
 8004084:	4619      	mov	r1, r3
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	025b      	lsls	r3, r3, #9
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	f7fd f9cf 	bl	8001430 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_SD_ReadBlocks_DMA+0x194>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	2b01      	cmp	r3, #1
 800409e:	d002      	beq.n	80040a6 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	025b      	lsls	r3, r3, #9
 80040a4:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
 80040aa:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040b2:	2390      	movs	r3, #144	; 0x90
 80040b4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80040b6:	2302      	movs	r3, #2
 80040b8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80040be:	2301      	movs	r3, #1
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f107 0214 	add.w	r2, r7, #20
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 fcb0 	bl	8006a32 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 fcd5 	bl	8006a8a <SDMMC_CmdBlockLength>
 80040e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e02e      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d90a      	bls.n	8004126 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2282      	movs	r2, #130	; 0x82
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	f002 fcfc 	bl	8006b1a <SDMMC_CmdReadMultiBlock>
 8004122:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004124:	e009      	b.n	800413a <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2281      	movs	r2, #129	; 0x81
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	f002 fccd 	bl	8006ad2 <SDMMC_CmdReadSingleBlock>
 8004138:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e002      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3730      	adds	r7, #48	; 0x30
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	08004c0b 	.word	0x08004c0b
 8004174:	08004c79 	.word	0x08004c79
 8004178:	4225858c 	.word	0x4225858c

0800417c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800418a:	2300      	movs	r3, #0
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0ad      	b.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	f040 80a6 	bne.w	80042fe <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	441a      	add	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d907      	bls.n	80041d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e094      	b.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2203      	movs	r2, #3
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a42      	ldr	r2, [pc, #264]	; (8004308 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a41      	ldr	r2, [pc, #260]	; (800430c <HAL_SD_WriteBlocks_DMA+0x190>)
 8004208:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2200      	movs	r2, #0
 8004210:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	2b01      	cmp	r3, #1
 8004218:	d002      	beq.n	8004220 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fc2e 	bl	8006a8a <SDMMC_CmdBlockLength>
 800422e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	431a      	orrs	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e053      	b.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d90a      	bls.n	8004274 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	22a0      	movs	r2, #160	; 0xa0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f002 fc9d 	bl	8006baa <SDMMC_CmdWriteMultiBlock>
 8004270:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004272:	e009      	b.n	8004288 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2290      	movs	r2, #144	; 0x90
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4618      	mov	r0, r3
 8004282:	f002 fc6e 	bl	8006b62 <SDMMC_CmdWriteSingleBlock>
 8004286:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d010      	beq.n	80042b0 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e027      	b.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_SD_WriteBlocks_DMA+0x194>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3380      	adds	r3, #128	; 0x80
 80042c2:	461a      	mov	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	f7fd f8b1 	bl	8001430 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	025b      	lsls	r3, r3, #9
 80042d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80042da:	2390      	movs	r3, #144	; 0x90
 80042dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f107 0214 	add.w	r2, r7, #20
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 fb9c 	bl	8006a32 <SDIO_ConfigData>
    
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3730      	adds	r7, #48	; 0x30
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	08004be1 	.word	0x08004be1
 800430c:	08004c79 	.word	0x08004c79
 8004310:	4225858c 	.word	0x4225858c

08004314 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 808d 	beq.w	800444a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004338:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004348:	f023 0302 	bic.w	r3, r3, #2
 800434c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03a      	beq.n	80043d0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <HAL_SD_IRQHandler+0x5e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f002 fc3c 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 800437c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f925 	bl	80045e0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_SD_IRQHandler+0xac>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f005 fed9 	bl	800a178 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80043c6:	e103      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f005 fecb 	bl	800a164 <HAL_SD_TxCpltCallback>
}
 80043ce:	e0ff      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80f9 	beq.w	80045d0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d011      	beq.n	800440e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f002 fc00 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 80043f4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8e9 	bl	80045e0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 80da 	bne.w	80045d0 <HAL_SD_IRQHandler+0x2bc>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 80d3 	bne.w	80045d0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0208 	bic.w	r2, r2, #8
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f005 fe8e 	bl	800a164 <HAL_SD_TxCpltCallback>
}
 8004448:	e0c2      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 ffef 	bl	8005446 <SD_Write_IT>
}
 8004468:	e0b2      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 ffb7 	bl	80053f6 <SD_Read_IT>
}
 8004488:	e0a2      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004490:	f240 233a 	movw	r3, #570	; 0x23a
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 809a 	beq.w	80045d0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f043 0208 	orr.w	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f043 0208 	orr.w	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004536:	f023 0302 	bic.w	r3, r3, #2
 800453a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d036      	beq.n	80045b6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d011      	beq.n	8004574 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <HAL_SD_IRQHandler+0x2c4>)
 8004556:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4618      	mov	r0, r3
 800455e:	f7fc ffc7 	bl	80014f0 <HAL_DMA_Abort_IT>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d033      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fbc8 	bl	8004d02 <SD_DMATxAbort>
}
 8004572:	e02d      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_SD_IRQHandler+0x2c8>)
 8004582:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc ffb1 	bl	80014f0 <HAL_DMA_Abort_IT>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01d      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fbf0 	bl	8004d7e <SD_DMARxAbort>
}
 800459e:	e017      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f005 fdce 	bl	800a150 <HAL_SD_AbortCallback>
}
 80045b4:	e00c      	b.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f808 	bl	80045e0 <HAL_SD_ErrorCallback>
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	08004d03 	.word	0x08004d03
 80045dc:	08004d7f 	.word	0x08004d7f

080045e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004606:	0e1b      	lsrs	r3, r3, #24
 8004608:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	b2da      	uxtb	r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	b2db      	uxtb	r3, r3
 8004640:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b2db      	uxtb	r3, r3
 8004652:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004660:	b2db      	uxtb	r3, r3
 8004662:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004670:	0e1b      	lsrs	r3, r3, #24
 8004672:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	b29b      	uxth	r3, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	b29a      	uxth	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	b2db      	uxtb	r3, r3
 8004688:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	88db      	ldrh	r3, [r3, #6]
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	b29b      	uxth	r3, r3
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	b29b      	uxth	r3, r3
 800469c:	4313      	orrs	r3, r2
 800469e:	b29a      	uxth	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 8087 	bne.w	800481a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	029b      	lsls	r3, r3, #10
 8004710:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471c:	b2db      	uxtb	r3, r3
 800471e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	431a      	orrs	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004732:	0e1b      	lsrs	r3, r3, #24
 8004734:	b2db      	uxtb	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	431a      	orrs	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b2da      	uxtb	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	b2da      	uxtb	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	b2db      	uxtb	r3, r3
 8004770:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	b2da      	uxtb	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	b2da      	uxtb	r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0306 	and.w	r3, r3, #6
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	7e1b      	ldrb	r3, [r3, #24]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	09db      	lsrs	r3, r3, #7
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	7e1b      	ldrb	r3, [r3, #24]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	3302      	adds	r3, #2
 80047da:	2201      	movs	r2, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80047e4:	fb02 f203 	mul.w	r2, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	7a1b      	ldrb	r3, [r3, #8]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	2301      	movs	r3, #1
 80047f6:	fa03 f202 	lsl.w	r2, r3, r2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004806:	0a52      	lsrs	r2, r2, #9
 8004808:	fb02 f203 	mul.w	r2, r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
 8004818:	e04d      	b.n	80048b6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	2b01      	cmp	r3, #1
 8004820:	d138      	bne.n	8004894 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004826:	b2db      	uxtb	r3, r3
 8004828:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483a:	0e1b      	lsrs	r3, r3, #24
 800483c:	b2db      	uxtb	r3, r3
 800483e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	431a      	orrs	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	b2db      	uxtb	r3, r3
 8004856:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	431a      	orrs	r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	b2db      	uxtb	r3, r3
 800486c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	3301      	adds	r3, #1
 8004874:	029a      	lsls	r2, r3, #10
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004888:	659a      	str	r2, [r3, #88]	; 0x58
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	661a      	str	r2, [r3, #96]	; 0x60
 8004892:	e010      	b.n	80048b6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0c1      	b.n	8004a3a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	7e9b      	ldrb	r3, [r3, #26]
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004902:	b2da      	uxtb	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	0e1b      	lsrs	r3, r3, #24
 800490e:	b2db      	uxtb	r3, r3
 8004910:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	09db      	lsrs	r3, r3, #7
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	b2da      	uxtb	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	b2da      	uxtb	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	b2db      	uxtb	r3, r3
 800495c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	7fdb      	ldrb	r3, [r3, #31]
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	b2db      	uxtb	r3, r3
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	4313      	orrs	r3, r2
 8004972:	b2da      	uxtb	r2, r3
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	09db      	lsrs	r3, r3, #7
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	099b      	lsrs	r3, r3, #6
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004a9e:	b5b0      	push	{r4, r5, r7, lr}
 8004aa0:	b08e      	sub	sp, #56	; 0x38
 8004aa2:	af04      	add	r7, sp, #16
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d02e      	beq.n	8004b1a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	639a      	str	r2, [r3, #56]	; 0x38
 8004ad0:	e029      	b.n	8004b26 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad8:	d10a      	bne.n	8004af0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fb28 	bl	8005130 <SD_WideBus_Enable>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
 8004aee:	e01a      	b.n	8004b26 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb67 	bl	80051ca <SD_WideBus_Disable>
 8004afc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0a:	e00c      	b.n	8004b26 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
 8004b18:	e005      	b.n	8004b26 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e024      	b.n	8004b8e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681d      	ldr	r5, [r3, #0]
 8004b6a:	466c      	mov	r4, sp
 8004b6c:	f107 0318 	add.w	r3, r7, #24
 8004b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7e:	4628      	mov	r0, r5
 8004b80:	f001 fea6 	bl	80068d0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bdb0      	pop	{r4, r5, r7, pc}

08004b96 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa93 	bl	80050dc <SD_SendStatus>
 8004bb6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0a5b      	lsrs	r3, r3, #9
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	2b82      	cmp	r3, #130	; 0x82
 8004c22:	d111      	bne.n	8004c48 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 ffe3 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 8004c2e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fccc 	bl	80045e0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0208 	bic.w	r2, r2, #8
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f005 fa84 	bl	800a178 <HAL_SD_RxCpltCallback>
#endif
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d004      	beq.n	8004c9a <SD_DMAError+0x22>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d12c      	bne.n	8004cf4 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff68 	bl	8004b96 <HAL_SD_GetCardState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d002      	beq.n	8004cd6 <SD_DMAError+0x5e>
 8004cd0:	7afb      	ldrb	r3, [r7, #11]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d10a      	bne.n	8004cec <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 ff8a 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fc73 	bl	80045e0 <HAL_SD_ErrorCallback>
#endif
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d127      	bne.n	8004d76 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff35 	bl	8004b96 <HAL_SD_GetCardState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d002      	beq.n	8004d4a <SD_DMATxAbort+0x48>
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	2b05      	cmp	r3, #5
 8004d48:	d115      	bne.n	8004d76 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 ff50 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f005 f9f1 	bl	800a150 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004d6e:	e002      	b.n	8004d76 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fc35 	bl	80045e0 <HAL_SD_ErrorCallback>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d127      	bne.n	8004df2 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fef7 	bl	8004b96 <HAL_SD_GetCardState>
 8004da8:	4603      	mov	r3, r0
 8004daa:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004dba:	7afb      	ldrb	r3, [r7, #11]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d002      	beq.n	8004dc6 <SD_DMARxAbort+0x48>
 8004dc0:	7afb      	ldrb	r3, [r7, #11]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d115      	bne.n	8004df2 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 ff12 	bl	8006bf4 <SDMMC_CmdStopTransfer>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f005 f9b3 	bl	800a150 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004dea:	e002      	b.n	8004df2 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fbf7 	bl	80045e0 <HAL_SD_ErrorCallback>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004dfa:	b5b0      	push	{r4, r5, r7, lr}
 8004dfc:	b094      	sub	sp, #80	; 0x50
 8004dfe:	af04      	add	r7, sp, #16
 8004e00:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8004e06:	2301      	movs	r3, #1
 8004e08:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f001 fdb5 	bl	800697e <SDIO_GetPowerState>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e1e:	e0b1      	b.n	8004f84 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d02f      	beq.n	8004e88 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fffb 	bl	8006e28 <SDMMC_CmdSendCID>
 8004e32:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <SD_InitCard+0x44>
    {
      return errorstate;
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	e0a2      	b.n	8004f84 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fddf 	bl	8006a08 <SDIO_GetResponse>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2104      	movs	r1, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fdd6 	bl	8006a08 <SDIO_GetResponse>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2108      	movs	r1, #8
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 fdcd 	bl	8006a08 <SDIO_GetResponse>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	210c      	movs	r1, #12
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 fdc4 	bl	8006a08 <SDIO_GetResponse>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d00d      	beq.n	8004eac <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f107 020e 	add.w	r2, r7, #14
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f002 f805 	bl	8006eaa <SDMMC_CmdSetRelAdd>
 8004ea0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <SD_InitCard+0xb2>
    {
      return errorstate;
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	e06b      	b.n	8004f84 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d036      	beq.n	8004f22 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f001 ffcd 	bl	8006e68 <SDMMC_CmdSendCSD>
 8004ece:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <SD_InitCard+0xe0>
    {
      return errorstate;
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed8:	e054      	b.n	8004f84 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f001 fd91 	bl	8006a08 <SDIO_GetResponse>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 fd88 	bl	8006a08 <SDIO_GetResponse>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2108      	movs	r1, #8
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 fd7f 	bl	8006a08 <SDIO_GetResponse>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	210c      	movs	r1, #12
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 fd76 	bl	8006a08 <SDIO_GetResponse>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2104      	movs	r1, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fd6d 	bl	8006a08 <SDIO_GetResponse>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	0d1a      	lsrs	r2, r3, #20
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004f36:	f107 0310 	add.w	r3, r7, #16
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fb59 	bl	80045f4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	461a      	mov	r2, r3
 8004f52:	4623      	mov	r3, r4
 8004f54:	4608      	mov	r0, r1
 8004f56:	f001 fe71 	bl	8006c3c <SDMMC_CmdSelDesel>
 8004f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <SD_InitCard+0x16c>
  {
    return errorstate;
 8004f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f64:	e00e      	b.n	8004f84 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	466c      	mov	r4, sp
 8004f6e:	f103 0210 	add.w	r2, r3, #16
 8004f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f78:	3304      	adds	r3, #4
 8004f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f001 fca7 	bl	80068d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3740      	adds	r7, #64	; 0x40
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bdb0      	pop	{r4, r5, r7, pc}

08004f8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 fe6c 	bl	8006c86 <SDMMC_CmdGoIdleState>
 8004fae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <SD_PowerON+0x2e>
  {
    return errorstate;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e08c      	b.n	80050d4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 fe81 	bl	8006cc6 <SDMMC_CmdOperCond>
 8004fc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d03d      	beq.n	8005048 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8004fd2:	e032      	b.n	800503a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	60ba      	str	r2, [r7, #8]
 8004fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d102      	bne.n	8004fe8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe6:	e075      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 fe8a 	bl	8006d08 <SDMMC_CmdAppCommand>
 8004ff4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005000:	e068      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fea1 	bl	8006d50 <SDMMC_CmdAppOperCommand>
 800500e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800501a:	e05b      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fcf0 	bl	8006a08 <SDIO_GetResponse>
 8005028:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	0fdb      	lsrs	r3, r3, #31
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <SD_PowerON+0xaa>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <SD_PowerON+0xac>
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0c9      	beq.n	8004fd4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
 8005046:	e044      	b.n	80050d2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800504e:	e031      	b.n	80050b4 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	60ba      	str	r2, [r7, #8]
 8005056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800505a:	4293      	cmp	r3, r2
 800505c:	d102      	bne.n	8005064 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800505e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005062:	e037      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f001 fe4c 	bl	8006d08 <SDMMC_CmdAppCommand>
 8005070:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <SD_PowerON+0xf0>
      {
        return errorstate;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	e02b      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005084:	4618      	mov	r0, r3
 8005086:	f001 fe63 	bl	8006d50 <SDMMC_CmdAppOperCommand>
 800508a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <SD_PowerON+0x10a>
      {
        return errorstate;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	e01e      	b.n	80050d4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 fcb3 	bl	8006a08 <SDIO_GetResponse>
 80050a2:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0fdb      	lsrs	r3, r3, #31
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <SD_PowerON+0x124>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <SD_PowerON+0x126>
 80050b0:	2300      	movs	r3, #0
 80050b2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ca      	beq.n	8005050 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	645a      	str	r2, [r3, #68]	; 0x44
 80050ca:	e002      	b.n	80050d2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80050f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f4:	e018      	b.n	8005128 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	041b      	lsls	r3, r3, #16
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f001 fef4 	bl	8006ef0 <SDMMC_CmdSendStatus>
 8005108:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e009      	b.n	8005128 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fc74 	bl	8006a08 <SDIO_GetResponse>
 8005120:	4602      	mov	r2, r0
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fc5c 	bl	8006a08 <SDIO_GetResponse>
 8005150:	4603      	mov	r3, r0
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800515a:	d102      	bne.n	8005162 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800515c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005160:	e02f      	b.n	80051c2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005162:	f107 030c 	add.w	r3, r7, #12
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f87b 	bl	8005264 <SD_FindSCR>
 800516e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	e023      	b.n	80051c2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f001 fdb9 	bl	8006d08 <SDMMC_CmdAppCommand>
 8005196:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	e00f      	b.n	80051c2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2102      	movs	r1, #2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fdf6 	bl	8006d9a <SDMMC_CmdBusWidth>
 80051ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	e003      	b.n	80051c2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e001      	b.n	80051c2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fc0f 	bl	8006a08 <SDIO_GetResponse>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f4:	d102      	bne.n	80051fc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80051f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051fa:	e02f      	b.n	800525c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f82e 	bl	8005264 <SD_FindSCR>
 8005208:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	e023      	b.n	800525c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01c      	beq.n	8005258 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f001 fd6c 	bl	8006d08 <SDMMC_CmdAppCommand>
 8005230:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	e00f      	b.n	800525c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fda9 	bl	8006d9a <SDMMC_CmdBusWidth>
 8005248:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	e003      	b.n	800525c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005254:	2300      	movs	r3, #0
 8005256:	e001      	b.n	800525c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005258:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b08f      	sub	sp, #60	; 0x3c
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800526e:	2300      	movs	r3, #0
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005272:	f7fb feef 	bl	8001054 <HAL_GetTick>
 8005276:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2108      	movs	r1, #8
 800528a:	4618      	mov	r0, r3
 800528c:	f001 fbfd 	bl	8006a8a <SDMMC_CmdBlockLength>
 8005290:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	e0a8      	b.n	80053ee <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	041b      	lsls	r3, r3, #16
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f001 fd2d 	bl	8006d08 <SDMMC_CmdAppCommand>
 80052ae:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	e099      	b.n	80053ee <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80052c0:	2308      	movs	r3, #8
 80052c2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80052c4:	2330      	movs	r3, #48	; 0x30
 80052c6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052c8:	2302      	movs	r3, #2
 80052ca:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f107 0214 	add.w	r2, r7, #20
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fba7 	bl	8006a32 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fd7a 	bl	8006de2 <SDMMC_CmdSendSCR>
 80052ee:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d022      	beq.n	800533c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80052f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f8:	e079      	b.n	80053ee <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00e      	beq.n	8005326 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	f107 020c 	add.w	r2, r7, #12
 8005314:	18d4      	adds	r4, r2, r3
 8005316:	4608      	mov	r0, r1
 8005318:	f001 fb05 	bl	8006926 <SDIO_ReadFIFO>
 800531c:	4603      	mov	r3, r0
 800531e:	6023      	str	r3, [r4, #0]
      index++;
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005322:	3301      	adds	r3, #1
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005326:	f7fb fe95 	bl	8001054 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d102      	bne.n	800533c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800533a:	e058      	b.n	80053ee <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005342:	f240 432a 	movw	r3, #1066	; 0x42a
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0d6      	beq.n	80052fa <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2208      	movs	r2, #8
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005362:	2308      	movs	r3, #8
 8005364:	e043      	b.n	80053ee <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2202      	movs	r2, #2
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800537c:	2302      	movs	r3, #2
 800537e:	e036      	b.n	80053ee <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2220      	movs	r2, #32
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8005396:	2320      	movs	r3, #32
 8005398:	e029      	b.n	80053ee <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	061a      	lsls	r2, r3, #24
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053b0:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80053ba:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80053c6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80053c8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	061a      	lsls	r2, r3, #24
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053d6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80053e0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	0e1b      	lsrs	r3, r3, #24
 80053e6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	373c      	adds	r7, #60	; 0x3c
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}

080053f6 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80053f6:	b590      	push	{r4, r7, lr}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e00d      	b.n	800542a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6819      	ldr	r1, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	18d4      	adds	r4, r2, r3
 800541a:	4608      	mov	r0, r1
 800541c:	f001 fa83 	bl	8006926 <SDIO_ReadFIFO>
 8005420:	4603      	mov	r3, r0
 8005422:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b07      	cmp	r3, #7
 800542e:	d9ee      	bls.n	800540e <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	f103 0220 	add.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bd90      	pop	{r4, r7, pc}

08005446 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e00b      	b.n	8005476 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4413      	add	r3, r2
 800546a:	4619      	mov	r1, r3
 800546c:	f001 fa68 	bl	8006940 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b07      	cmp	r3, #7
 800547a:	d9f0      	bls.n	800545e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f103 0220 	add.w	r2, r3, #32
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e056      	b.n	8005552 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f005 ff7e 	bl	800b3c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	ea42 0103 	orr.w	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0104 	and.w	r1, r3, #4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e01d      	b.n	80055a8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f005 ff65 	bl	800b450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f9e1 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e01d      	b.n	8005646 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f815 	bl	800564e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 f992 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800567a:	2302      	movs	r3, #2
 800567c:	e0b4      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	f200 809f 	bhi.w	80057d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080057d5 	.word	0x080057d5
 80056a4:	080057d5 	.word	0x080057d5
 80056a8:	080057d5 	.word	0x080057d5
 80056ac:	08005711 	.word	0x08005711
 80056b0:	080057d5 	.word	0x080057d5
 80056b4:	080057d5 	.word	0x080057d5
 80056b8:	080057d5 	.word	0x080057d5
 80056bc:	08005753 	.word	0x08005753
 80056c0:	080057d5 	.word	0x080057d5
 80056c4:	080057d5 	.word	0x080057d5
 80056c8:	080057d5 	.word	0x080057d5
 80056cc:	08005793 	.word	0x08005793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f9e2 	bl	8005aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6999      	ldr	r1, [r3, #24]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	619a      	str	r2, [r3, #24]
      break;
 800570e:	e062      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa32 	bl	8005b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      break;
 8005750:	e041      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fa87 	bl	8005c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0208 	orr.w	r2, r2, #8
 800576c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0204 	bic.w	r2, r2, #4
 800577c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	61da      	str	r2, [r3, #28]
      break;
 8005790:	e021      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fadb 	bl	8005d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	61da      	str	r2, [r3, #28]
      break;
 80057d2:	e000      	b.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80057d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIM_ConfigClockSource+0x18>
 8005804:	2302      	movs	r3, #2
 8005806:	e0a6      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x166>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d067      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0x120>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d80b      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0x6c>
 8005844:	2b10      	cmp	r3, #16
 8005846:	d073      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x140>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d802      	bhi.n	8005852 <HAL_TIM_ConfigClockSource+0x62>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d06f      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005850:	e078      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005852:	2b20      	cmp	r3, #32
 8005854:	d06c      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x140>
 8005856:	2b30      	cmp	r3, #48	; 0x30
 8005858:	d06a      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800585a:	e073      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800585c:	2b70      	cmp	r3, #112	; 0x70
 800585e:	d00d      	beq.n	800587c <HAL_TIM_ConfigClockSource+0x8c>
 8005860:	2b70      	cmp	r3, #112	; 0x70
 8005862:	d804      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0x7e>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d033      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0xe0>
 8005868:	2b60      	cmp	r3, #96	; 0x60
 800586a:	d041      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800586c:	e06a      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	d066      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x152>
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d017      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800587a:	e063      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 fb32 	bl	8005ef4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800589e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
      break;
 80058a8:	e04c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6899      	ldr	r1, [r3, #8]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f000 fb1b 	bl	8005ef4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058cc:	609a      	str	r2, [r3, #8]
      break;
 80058ce:	e039      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	461a      	mov	r2, r3
 80058de:	f000 fa8f 	bl	8005e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2150      	movs	r1, #80	; 0x50
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fae8 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 80058ee:	e029      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	461a      	mov	r2, r3
 80058fe:	f000 faae 	bl	8005e5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2160      	movs	r1, #96	; 0x60
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fad8 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 800590e:	e019      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	461a      	mov	r2, r3
 800591e:	f000 fa6f 	bl	8005e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fac8 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 800592e:	e009      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fabf 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005940:	e000      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a40      	ldr	r2, [pc, #256]	; (8005a74 <TIM_Base_SetConfig+0x114>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d00f      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3d      	ldr	r2, [pc, #244]	; (8005a78 <TIM_Base_SetConfig+0x118>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <TIM_Base_SetConfig+0x11c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3b      	ldr	r2, [pc, #236]	; (8005a80 <TIM_Base_SetConfig+0x120>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3a      	ldr	r2, [pc, #232]	; (8005a84 <TIM_Base_SetConfig+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d108      	bne.n	80059b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2f      	ldr	r2, [pc, #188]	; (8005a74 <TIM_Base_SetConfig+0x114>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d02b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c0:	d027      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <TIM_Base_SetConfig+0x118>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d023      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <TIM_Base_SetConfig+0x11c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01f      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a2a      	ldr	r2, [pc, #168]	; (8005a80 <TIM_Base_SetConfig+0x120>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <TIM_Base_SetConfig+0x124>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d017      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <TIM_Base_SetConfig+0x128>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <TIM_Base_SetConfig+0x12c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <TIM_Base_SetConfig+0x130>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <TIM_Base_SetConfig+0x134>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <TIM_Base_SetConfig+0x138>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a23      	ldr	r2, [pc, #140]	; (8005a9c <TIM_Base_SetConfig+0x13c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <TIM_Base_SetConfig+0x114>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_Base_SetConfig+0xf8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <TIM_Base_SetConfig+0x124>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d103      	bne.n	8005a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	615a      	str	r2, [r3, #20]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40010400 	.word	0x40010400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800
 8005a94:	40001800 	.word	0x40001800
 8005a98:	40001c00 	.word	0x40001c00
 8005a9c:	40002000 	.word	0x40002000

08005aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0302 	bic.w	r3, r3, #2
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <TIM_OC1_SetConfig+0xd8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC1_SetConfig+0x64>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <TIM_OC1_SetConfig+0xdc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10c      	bne.n	8005b1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0308 	bic.w	r3, r3, #8
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <TIM_OC1_SetConfig+0xd8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_OC1_SetConfig+0x8e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <TIM_OC1_SetConfig+0xdc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d111      	bne.n	8005b52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0210 	bic.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a22      	ldr	r2, [pc, #136]	; (8005c64 <TIM_OC2_SetConfig+0xe4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC2_SetConfig+0x68>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a21      	ldr	r2, [pc, #132]	; (8005c68 <TIM_OC2_SetConfig+0xe8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d10d      	bne.n	8005c04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <TIM_OC2_SetConfig+0xe4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <TIM_OC2_SetConfig+0x94>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a16      	ldr	r2, [pc, #88]	; (8005c68 <TIM_OC2_SetConfig+0xe8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d113      	bne.n	8005c3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40010400 	.word	0x40010400

08005c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <TIM_OC3_SetConfig+0xe0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x66>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <TIM_OC3_SetConfig+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10d      	bne.n	8005cee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <TIM_OC3_SetConfig+0xe0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC3_SetConfig+0x92>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <TIM_OC3_SetConfig+0xe4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d113      	bne.n	8005d26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	621a      	str	r2, [r3, #32]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400

08005d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <TIM_OC4_SetConfig+0xa4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC4_SetConfig+0x68>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <TIM_OC4_SetConfig+0xa8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d109      	bne.n	8005dd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400

08005e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0201 	bic.w	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 030a 	bic.w	r3, r3, #10
 8005e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0210 	bic.w	r2, r3, #16
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	031b      	lsls	r3, r3, #12
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f043 0307 	orr.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	021a      	lsls	r2, r3, #8
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	609a      	str	r2, [r3, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e032      	b.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e03f      	b.n	8006050 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f005 fae1 	bl	800b5ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2224      	movs	r2, #36	; 0x24
 8005fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006000:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa5a 	bl	80064bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006016:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006026:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006036:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10d      	bne.n	80060aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_UART_IRQHandler+0x52>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f988 	bl	80063b8 <UART_Receive_IT>
      return;
 80060a8:	e0cc      	b.n	8006244 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80ab 	beq.w	8006208 <HAL_UART_IRQHandler+0x1b0>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <HAL_UART_IRQHandler+0x70>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a0 	beq.w	8006208 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_UART_IRQHandler+0x90>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_UART_IRQHandler+0xb0>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	f043 0202 	orr.w	r2, r3, #2
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_UART_IRQHandler+0xd0>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	f043 0204 	orr.w	r2, r3, #4
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00a      	beq.n	8006148 <HAL_UART_IRQHandler+0xf0>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	f043 0208 	orr.w	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d078      	beq.n	8006242 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_UART_IRQHandler+0x112>
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f927 	bl	80063b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	bf0c      	ite	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2300      	movne	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <HAL_UART_IRQHandler+0x13a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d031      	beq.n	80061f6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f870 	bl	8006278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d123      	bne.n	80061ee <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d013      	beq.n	80061e6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	4a22      	ldr	r2, [pc, #136]	; (800624c <HAL_UART_IRQHandler+0x1f4>)
 80061c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fb f990 	bl	80014f0 <HAL_DMA_Abort_IT>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	e00e      	b.n	8006204 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f83c 	bl	8006264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	e00a      	b.n	8006204 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f838 	bl	8006264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	e006      	b.n	8006204 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f834 	bl	8006264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006202:	e01e      	b.n	8006242 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	bf00      	nop
    return;
 8006206:	e01c      	b.n	8006242 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_UART_IRQHandler+0x1cc>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f85d 	bl	80062dc <UART_Transmit_IT>
    return;
 8006222:	e00f      	b.n	8006244 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_UART_IRQHandler+0x1ec>
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8a5 	bl	8006388 <UART_EndTransmit_IT>
    return;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006242:	bf00      	nop
  }
}
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	080062b5 	.word	0x080062b5

08006250 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800628e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ffc8 	bl	8006264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b21      	cmp	r3, #33	; 0x21
 80062ee:	d144      	bne.n	800637a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d11a      	bne.n	8006330 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]
 8006322:	e00e      	b.n	8006342 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	621a      	str	r2, [r3, #32]
 800632e:	e008      	b.n	8006342 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6211      	str	r1, [r2, #32]
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29b      	uxth	r3, r3
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	4619      	mov	r1, r3
 8006350:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10f      	bne.n	8006376 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006364:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006374:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff51 	bl	8006250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b22      	cmp	r3, #34	; 0x22
 80063ca:	d171      	bne.n	80064b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d4:	d123      	bne.n	800641e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10e      	bne.n	8006402 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006400:	e029      	b.n	8006456 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	b29b      	uxth	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
 800641c:	e01b      	b.n	8006456 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6858      	ldr	r0, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6291      	str	r1, [r2, #40]	; 0x28
 8006436:	b2c2      	uxtb	r2, r0
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e00c      	b.n	8006456 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	1c58      	adds	r0, r3, #1
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	6288      	str	r0, [r1, #40]	; 0x28
 800644e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29b      	uxth	r3, r3
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4619      	mov	r1, r3
 8006464:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006466:	2b00      	cmp	r3, #0
 8006468:	d120      	bne.n	80064ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0220 	bic.w	r2, r2, #32
 8006478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f003 ffb8 	bl	800a418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e002      	b.n	80064b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80064fc:	f023 030c 	bic.w	r3, r3, #12
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	68f9      	ldr	r1, [r7, #12]
 8006506:	430b      	orrs	r3, r1
 8006508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006528:	f040 80e4 	bne.w	80066f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4aab      	ldr	r2, [pc, #684]	; (80067e0 <UART_SetConfig+0x324>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <UART_SetConfig+0x84>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4aaa      	ldr	r2, [pc, #680]	; (80067e4 <UART_SetConfig+0x328>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d16c      	bne.n	800661a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006540:	f7fd faee 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8006544:	4602      	mov	r2, r0
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009a      	lsls	r2, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	4aa3      	ldr	r2, [pc, #652]	; (80067e8 <UART_SetConfig+0x32c>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	011c      	lsls	r4, r3, #4
 8006564:	f7fd fadc 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8006568:	4602      	mov	r2, r0
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009a      	lsls	r2, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	fbb2 f5f3 	udiv	r5, r2, r3
 800657e:	f7fd facf 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8006582:	4602      	mov	r2, r0
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009a      	lsls	r2, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	fbb2 f3f3 	udiv	r3, r2, r3
 8006598:	4a93      	ldr	r2, [pc, #588]	; (80067e8 <UART_SetConfig+0x32c>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	2264      	movs	r2, #100	; 0x64
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	1aeb      	subs	r3, r5, r3
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	3332      	adds	r3, #50	; 0x32
 80065ac:	4a8e      	ldr	r2, [pc, #568]	; (80067e8 <UART_SetConfig+0x32c>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ba:	441c      	add	r4, r3
 80065bc:	f7fd fab0 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 80065c0:	4602      	mov	r2, r0
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009a      	lsls	r2, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80065d6:	f7fd faa3 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 80065da:	4602      	mov	r2, r0
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009a      	lsls	r2, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	4a7d      	ldr	r2, [pc, #500]	; (80067e8 <UART_SetConfig+0x32c>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	2264      	movs	r2, #100	; 0x64
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	1aeb      	subs	r3, r5, r3
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	3332      	adds	r3, #50	; 0x32
 8006604:	4a78      	ldr	r2, [pc, #480]	; (80067e8 <UART_SetConfig+0x32c>)
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	f003 0207 	and.w	r2, r3, #7
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4422      	add	r2, r4
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	e154      	b.n	80068c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800661a:	f7fd fa6d 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800661e:	4602      	mov	r2, r0
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009a      	lsls	r2, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	4a6c      	ldr	r2, [pc, #432]	; (80067e8 <UART_SetConfig+0x32c>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	011c      	lsls	r4, r3, #4
 800663e:	f7fd fa5b 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8006642:	4602      	mov	r2, r0
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009a      	lsls	r2, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fbb2 f5f3 	udiv	r5, r2, r3
 8006658:	f7fd fa4e 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800665c:	4602      	mov	r2, r0
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009a      	lsls	r2, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <UART_SetConfig+0x32c>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	2264      	movs	r2, #100	; 0x64
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	1aeb      	subs	r3, r5, r3
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	3332      	adds	r3, #50	; 0x32
 8006686:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <UART_SetConfig+0x32c>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006694:	441c      	add	r4, r3
 8006696:	f7fd fa2f 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800669a:	4602      	mov	r2, r0
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	009a      	lsls	r2, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80066b0:	f7fd fa22 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009a      	lsls	r2, r3, #2
 80066be:	441a      	add	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	4a47      	ldr	r2, [pc, #284]	; (80067e8 <UART_SetConfig+0x32c>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	2264      	movs	r2, #100	; 0x64
 80066d4:	fb02 f303 	mul.w	r3, r2, r3
 80066d8:	1aeb      	subs	r3, r5, r3
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	3332      	adds	r3, #50	; 0x32
 80066de:	4a42      	ldr	r2, [pc, #264]	; (80067e8 <UART_SetConfig+0x32c>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	f003 0207 	and.w	r2, r3, #7
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4422      	add	r2, r4
 80066f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80066f2:	e0e7      	b.n	80068c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <UART_SetConfig+0x324>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <UART_SetConfig+0x24c>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a38      	ldr	r2, [pc, #224]	; (80067e4 <UART_SetConfig+0x328>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d171      	bne.n	80067ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006708:	f7fd fa0a 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 800670c:	4602      	mov	r2, r0
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009a      	lsls	r2, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <UART_SetConfig+0x32c>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	011c      	lsls	r4, r3, #4
 800672c:	f7fd f9f8 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8006730:	4602      	mov	r2, r0
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009a      	lsls	r2, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	fbb2 f5f3 	udiv	r5, r2, r3
 8006746:	f7fd f9eb 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 800674a:	4602      	mov	r2, r0
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009a      	lsls	r2, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <UART_SetConfig+0x32c>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	2264      	movs	r2, #100	; 0x64
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	1aeb      	subs	r3, r5, r3
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	3332      	adds	r3, #50	; 0x32
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <UART_SetConfig+0x32c>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006780:	441c      	add	r4, r3
 8006782:	f7fd f9cd 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8006786:	4602      	mov	r2, r0
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009a      	lsls	r2, r3, #2
 8006790:	441a      	add	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	fbb2 f5f3 	udiv	r5, r2, r3
 800679c:	f7fd f9c0 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 80067a0:	4602      	mov	r2, r0
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009a      	lsls	r2, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <UART_SetConfig+0x32c>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	2264      	movs	r2, #100	; 0x64
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	1aeb      	subs	r3, r5, r3
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	3332      	adds	r3, #50	; 0x32
 80067ca:	4a07      	ldr	r2, [pc, #28]	; (80067e8 <UART_SetConfig+0x32c>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	f003 020f 	and.w	r2, r3, #15
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4422      	add	r2, r4
 80067dc:	609a      	str	r2, [r3, #8]
 80067de:	e071      	b.n	80068c4 <UART_SetConfig+0x408>
 80067e0:	40011000 	.word	0x40011000
 80067e4:	40011400 	.word	0x40011400
 80067e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80067ec:	f7fd f984 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 80067f0:	4602      	mov	r2, r0
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009a      	lsls	r2, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	4a31      	ldr	r2, [pc, #196]	; (80068cc <UART_SetConfig+0x410>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	011c      	lsls	r4, r3, #4
 8006810:	f7fd f972 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8006814:	4602      	mov	r2, r0
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009a      	lsls	r2, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	fbb2 f5f3 	udiv	r5, r2, r3
 800682a:	f7fd f965 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800682e:	4602      	mov	r2, r0
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009a      	lsls	r2, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	4a21      	ldr	r2, [pc, #132]	; (80068cc <UART_SetConfig+0x410>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2264      	movs	r2, #100	; 0x64
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	1aeb      	subs	r3, r5, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	; 0x32
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <UART_SetConfig+0x410>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006864:	441c      	add	r4, r3
 8006866:	f7fd f947 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 800686a:	4602      	mov	r2, r0
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009a      	lsls	r2, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006880:	f7fd f93a 	bl	8003af8 <HAL_RCC_GetPCLK1Freq>
 8006884:	4602      	mov	r2, r0
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009a      	lsls	r2, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <UART_SetConfig+0x410>)
 800689c:	fba2 2303 	umull	r2, r3, r2, r3
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	2264      	movs	r2, #100	; 0x64
 80068a4:	fb02 f303 	mul.w	r3, r2, r3
 80068a8:	1aeb      	subs	r3, r5, r3
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <UART_SetConfig+0x410>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4422      	add	r2, r4
 80068c0:	609a      	str	r2, [r3, #8]
}
 80068c2:	e7ff      	b.n	80068c4 <UART_SetConfig+0x408>
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bdb0      	pop	{r4, r5, r7, pc}
 80068cc:	51eb851f 	.word	0x51eb851f

080068d0 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80068d0:	b084      	sub	sp, #16
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	f107 001c 	add.w	r0, r7, #28
 80068de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80068e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80068e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80068ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80068ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80068f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80068f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80068fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800690a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	b004      	add	sp, #16
 8006924:	4770      	bx	lr

08006926 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2203      	movs	r2, #3
 800696e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0303 	and.w	r3, r3, #3
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069b8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80069be:	431a      	orrs	r2, r3
                       Command->CPSM);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80069c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069d4:	f023 030f 	bic.w	r3, r3, #15
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	b2db      	uxtb	r3, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	4413      	add	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
}  
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0

}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b088      	sub	sp, #32
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aae:	f107 0308 	add.w	r3, r7, #8
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ff70 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abe:	2110      	movs	r1, #16
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa63 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b088      	sub	sp, #32
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006ae4:	2311      	movs	r3, #17
 8006ae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006af4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006af6:	f107 0308 	add.w	r3, r7, #8
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ff4c 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	2111      	movs	r1, #17
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa3f 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b10:	69fb      	ldr	r3, [r7, #28]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006b2c:	2312      	movs	r3, #18
 8006b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b3c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ff28 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	2112      	movs	r1, #18
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fa1b 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b58:	69fb      	ldr	r3, [r7, #28]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b088      	sub	sp, #32
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006b74:	2318      	movs	r3, #24
 8006b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b84:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b86:	f107 0308 	add.w	r3, r7, #8
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff04 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b96:	2118      	movs	r1, #24
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9f7 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b088      	sub	sp, #32
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006bbc:	2319      	movs	r3, #25
 8006bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bc0:	2340      	movs	r3, #64	; 0x40
 8006bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bcc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fee0 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	2119      	movs	r1, #25
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9d3 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006be6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006be8:	69fb      	ldr	r3, [r7, #28]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006c04:	230c      	movs	r3, #12
 8006c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c14:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c16:	f107 0308 	add.w	r3, r7, #8
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff febc 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8006c22:	4a05      	ldr	r2, [pc, #20]	; (8006c38 <SDMMC_CmdStopTransfer+0x44>)
 8006c24:	210c      	movs	r1, #12
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9b0 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	05f5e100 	.word	0x05f5e100

08006c3c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c50:	2307      	movs	r3, #7
 8006c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c54:	2340      	movs	r3, #64	; 0x40
 8006c56:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c60:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c62:	f107 0310 	add.w	r3, r7, #16
 8006c66:	4619      	mov	r1, r3
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fe96 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c72:	2107      	movs	r1, #7
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f989 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b088      	sub	sp, #32
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ca8:	f107 0308 	add.w	r3, r7, #8
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fe73 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f93f 	bl	8006f38 <SDMMC_GetCmdError>
 8006cba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3720      	adds	r7, #32
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b088      	sub	sp, #32
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006cd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006cd8:	2308      	movs	r3, #8
 8006cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fe52 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fb10 	bl	800731c <SDMMC_GetCmdResp7>
 8006cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006d1a:	2337      	movs	r3, #55	; 0x37
 8006d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d1e:	2340      	movs	r3, #64	; 0x40
 8006d20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d2c:	f107 0308 	add.w	r3, r7, #8
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fe31 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3c:	2137      	movs	r1, #55	; 0x37
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f924 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d46:	69fb      	ldr	r3, [r7, #28]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d6a:	2329      	movs	r3, #41	; 0x29
 8006d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d7c:	f107 0308 	add.w	r3, r7, #8
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fe09 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fa25 	bl	80071d8 <SDMMC_GetCmdResp3>
 8006d8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d90:	69fb      	ldr	r3, [r7, #28]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3720      	adds	r7, #32
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b088      	sub	sp, #32
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006dac:	2306      	movs	r3, #6
 8006dae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dbc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fde8 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	2106      	movs	r1, #6
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8db 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006dd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b088      	sub	sp, #32
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006df2:	2333      	movs	r3, #51	; 0x33
 8006df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e02:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fdc5 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	2133      	movs	r1, #51	; 0x33
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f8b8 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e3c:	23c0      	movs	r3, #192	; 0xc0
 8006e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e48:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fda2 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f97e 	bl	8007158 <SDMMC_GetCmdResp2>
 8006e5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e7a:	2309      	movs	r3, #9
 8006e7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e7e:	23c0      	movs	r3, #192	; 0xc0
 8006e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7ff fd81 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f95d 	bl	8007158 <SDMMC_GetCmdResp2>
 8006e9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b088      	sub	sp, #32
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ecc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff fd60 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	2103      	movs	r1, #3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9ae 	bl	8007240 <SDMMC_GetCmdResp6>
 8006ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006f02:	230d      	movs	r3, #13
 8006f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f06:	2340      	movs	r3, #64	; 0x40
 8006f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f12:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fd3d 	bl	800699a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f24:	210d      	movs	r1, #13
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f830 	bl	8006f8c <SDMMC_GetCmdResp1>
 8006f2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006f38:	b490      	push	{r4, r7}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f40:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <SDMMC_GetCmdError+0x4c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a10      	ldr	r2, [pc, #64]	; (8006f88 <SDMMC_GetCmdError+0x50>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	0a5b      	lsrs	r3, r3, #9
 8006f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f54:	4623      	mov	r3, r4
 8006f56:	1e5c      	subs	r4, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f60:	e00a      	b.n	8006f78 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f2      	beq.n	8006f54 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc90      	pop	{r4, r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000118 	.word	0x20000118
 8006f88:	10624dd3 	.word	0x10624dd3

08006f8c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006f8c:	b590      	push	{r4, r7, lr}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	460b      	mov	r3, r1
 8006f96:	607a      	str	r2, [r7, #4]
 8006f98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006f9a:	4b6c      	ldr	r3, [pc, #432]	; (800714c <SDMMC_GetCmdResp1+0x1c0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a6c      	ldr	r2, [pc, #432]	; (8007150 <SDMMC_GetCmdResp1+0x1c4>)
 8006fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa4:	0a5b      	lsrs	r3, r3, #9
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006fac:	4623      	mov	r3, r4
 8006fae:	1e5c      	subs	r4, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb8:	e0c3      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f2      	beq.n	8006fac <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fd8:	2304      	movs	r3, #4
 8006fda:	e0b2      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e0a7      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fcfb 	bl	80069ee <SDIO_GetCommandResponse>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d001      	beq.n	8007006 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007002:	2301      	movs	r3, #1
 8007004:	e09d      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800700e:	2100      	movs	r1, #0
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fcf9 	bl	8006a08 <SDIO_GetResponse>
 8007016:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4b4e      	ldr	r3, [pc, #312]	; (8007154 <SDMMC_GetCmdResp1+0x1c8>)
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8007022:	2300      	movs	r3, #0
 8007024:	e08d      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da02      	bge.n	8007032 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800702c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007030:	e087      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	e080      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	e079      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800705c:	e071      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706c:	e069      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707c:	e061      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800708c:	e059      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800709c:	e051      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070ac:	e049      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80070b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070bc:	e041      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80070c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070cc:	e039      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80070d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070dc:	e031      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070ec:	e029      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070fc:	e021      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007108:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800710c:	e019      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007118:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800711c:	e011      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007128:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800712c:	e009      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007138:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800713c:	e001      	b.n	8007142 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800713e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	bd90      	pop	{r4, r7, pc}
 800714a:	bf00      	nop
 800714c:	20000118 	.word	0x20000118
 8007150:	10624dd3 	.word	0x10624dd3
 8007154:	fdffe008 	.word	0xfdffe008

08007158 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007158:	b490      	push	{r4, r7}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007160:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <SDMMC_GetCmdResp2+0x78>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <SDMMC_GetCmdResp2+0x7c>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	0a5b      	lsrs	r3, r3, #9
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007174:	4623      	mov	r3, r4
 8007176:	1e5c      	subs	r4, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800717c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007180:	e020      	b.n	80071c4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f2      	beq.n	8007174 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071a0:	2304      	movs	r3, #4
 80071a2:	e00f      	b.n	80071c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e004      	b.n	80071c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bc90      	pop	{r4, r7}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000118 	.word	0x20000118
 80071d4:	10624dd3 	.word	0x10624dd3

080071d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80071d8:	b490      	push	{r4, r7}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071e0:	4b15      	ldr	r3, [pc, #84]	; (8007238 <SDMMC_GetCmdResp3+0x60>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a15      	ldr	r2, [pc, #84]	; (800723c <SDMMC_GetCmdResp3+0x64>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	0a5b      	lsrs	r3, r3, #9
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80071f4:	4623      	mov	r3, r4
 80071f6:	1e5c      	subs	r4, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007200:	e015      	b.n	800722e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f2      	beq.n	80071f4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007220:	2304      	movs	r3, #4
 8007222:	e004      	b.n	800722e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800722a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bc90      	pop	{r4, r7}
 8007236:	4770      	bx	lr
 8007238:	20000118 	.word	0x20000118
 800723c:	10624dd3 	.word	0x10624dd3

08007240 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	460b      	mov	r3, r1
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <SDMMC_GetCmdResp6+0xd4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a31      	ldr	r2, [pc, #196]	; (8007318 <SDMMC_GetCmdResp6+0xd8>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	f241 3288 	movw	r2, #5000	; 0x1388
 800725e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007262:	4623      	mov	r3, r4
 8007264:	1e5c      	subs	r4, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800726a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800726e:	e04c      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0f2      	beq.n	8007262 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2204      	movs	r2, #4
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800728e:	2304      	movs	r3, #4
 8007290:	e03b      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e030      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fba0 	bl	80069ee <SDIO_GetCommandResponse>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d001      	beq.n	80072bc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e026      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fb9e 	bl	8006a08 <SDIO_GetResponse>
 80072cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d106      	bne.n	80072e6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e011      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072f4:	e009      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007304:	e001      	b.n	800730a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd90      	pop	{r4, r7, pc}
 8007312:	bf00      	nop
 8007314:	20000118 	.word	0x20000118
 8007318:	10624dd3 	.word	0x10624dd3

0800731c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800731c:	b490      	push	{r4, r7}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007324:	4b18      	ldr	r3, [pc, #96]	; (8007388 <SDMMC_GetCmdResp7+0x6c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a18      	ldr	r2, [pc, #96]	; (800738c <SDMMC_GetCmdResp7+0x70>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	0a5b      	lsrs	r3, r3, #9
 8007330:	f241 3288 	movw	r2, #5000	; 0x1388
 8007334:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007338:	4623      	mov	r3, r4
 800733a:	1e5c      	subs	r4, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007344:	e01a      	b.n	800737c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f2      	beq.n	8007338 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2240      	movs	r2, #64	; 0x40
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007364:	2304      	movs	r3, #4
 8007366:	e009      	b.n	800737c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	; 0x40
 8007378:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
  
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bc90      	pop	{r4, r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	20000118 	.word	0x20000118
 800738c:	10624dd3 	.word	0x10624dd3

08007390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007390:	b084      	sub	sp, #16
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	f107 001c 	add.w	r0, r7, #28
 800739e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d122      	bne.n	80073ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d105      	bne.n	80073e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fa7c 	bl	80088e0 <USB_CoreReset>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	e01a      	b.n	8007424 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 fa70 	bl	80088e0 <USB_CoreReset>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	639a      	str	r2, [r3, #56]	; 0x38
 8007416:	e005      	b.n	8007424 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10b      	bne.n	8007442 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f043 0206 	orr.w	r2, r3, #6
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f043 0220 	orr.w	r2, r3, #32
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744e:	b004      	add	sp, #16
 8007450:	4770      	bx	lr
	...

08007454 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d165      	bne.n	8007534 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4a41      	ldr	r2, [pc, #260]	; (8007570 <USB_SetTurnaroundTime+0x11c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d906      	bls.n	800747e <USB_SetTurnaroundTime+0x2a>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4a40      	ldr	r2, [pc, #256]	; (8007574 <USB_SetTurnaroundTime+0x120>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d802      	bhi.n	800747e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007478:	230f      	movs	r3, #15
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e062      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4a3c      	ldr	r2, [pc, #240]	; (8007574 <USB_SetTurnaroundTime+0x120>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d906      	bls.n	8007494 <USB_SetTurnaroundTime+0x40>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <USB_SetTurnaroundTime+0x124>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d802      	bhi.n	8007494 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800748e:	230e      	movs	r3, #14
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e057      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4a38      	ldr	r2, [pc, #224]	; (8007578 <USB_SetTurnaroundTime+0x124>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d906      	bls.n	80074aa <USB_SetTurnaroundTime+0x56>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4a37      	ldr	r2, [pc, #220]	; (800757c <USB_SetTurnaroundTime+0x128>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d802      	bhi.n	80074aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074a4:	230d      	movs	r3, #13
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e04c      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	4a33      	ldr	r2, [pc, #204]	; (800757c <USB_SetTurnaroundTime+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d906      	bls.n	80074c0 <USB_SetTurnaroundTime+0x6c>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4a32      	ldr	r2, [pc, #200]	; (8007580 <USB_SetTurnaroundTime+0x12c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d802      	bhi.n	80074c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074ba:	230c      	movs	r3, #12
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e041      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	; (8007580 <USB_SetTurnaroundTime+0x12c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d906      	bls.n	80074d6 <USB_SetTurnaroundTime+0x82>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4a2e      	ldr	r2, [pc, #184]	; (8007584 <USB_SetTurnaroundTime+0x130>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d802      	bhi.n	80074d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074d0:	230b      	movs	r3, #11
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e036      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <USB_SetTurnaroundTime+0x130>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d906      	bls.n	80074ec <USB_SetTurnaroundTime+0x98>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	4a29      	ldr	r2, [pc, #164]	; (8007588 <USB_SetTurnaroundTime+0x134>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d802      	bhi.n	80074ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074e6:	230a      	movs	r3, #10
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e02b      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4a26      	ldr	r2, [pc, #152]	; (8007588 <USB_SetTurnaroundTime+0x134>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d906      	bls.n	8007502 <USB_SetTurnaroundTime+0xae>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4a25      	ldr	r2, [pc, #148]	; (800758c <USB_SetTurnaroundTime+0x138>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d802      	bhi.n	8007502 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074fc:	2309      	movs	r3, #9
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	e020      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4a21      	ldr	r2, [pc, #132]	; (800758c <USB_SetTurnaroundTime+0x138>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d906      	bls.n	8007518 <USB_SetTurnaroundTime+0xc4>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	4a20      	ldr	r2, [pc, #128]	; (8007590 <USB_SetTurnaroundTime+0x13c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d802      	bhi.n	8007518 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007512:	2308      	movs	r3, #8
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e015      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <USB_SetTurnaroundTime+0x13c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d906      	bls.n	800752e <USB_SetTurnaroundTime+0xda>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <USB_SetTurnaroundTime+0x140>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d802      	bhi.n	800752e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007528:	2307      	movs	r3, #7
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	e00a      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800752e:	2306      	movs	r3, #6
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	e007      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800753a:	2309      	movs	r3, #9
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	e001      	b.n	8007544 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007540:	2309      	movs	r3, #9
 8007542:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	00d8acbf 	.word	0x00d8acbf
 8007574:	00e4e1bf 	.word	0x00e4e1bf
 8007578:	00f423ff 	.word	0x00f423ff
 800757c:	0106737f 	.word	0x0106737f
 8007580:	011a499f 	.word	0x011a499f
 8007584:	01312cff 	.word	0x01312cff
 8007588:	014ca43f 	.word	0x014ca43f
 800758c:	016e35ff 	.word	0x016e35ff
 8007590:	01a6ab1f 	.word	0x01a6ab1f
 8007594:	01e847ff 	.word	0x01e847ff

08007598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f043 0201 	orr.w	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d106      	bne.n	8007608 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e00b      	b.n	8007620 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e001      	b.n	8007620 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e003      	b.n	8007628 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007620:	2032      	movs	r0, #50	; 0x32
 8007622:	f7f9 fd23 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b086      	sub	sp, #24
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e009      	b.n	8007664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	3340      	adds	r3, #64	; 0x40
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	2200      	movs	r2, #0
 800765c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	3301      	adds	r3, #1
 8007662:	613b      	str	r3, [r7, #16]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b0e      	cmp	r3, #14
 8007668:	d9f2      	bls.n	8007650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800766a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d112      	bne.n	8007696 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
 8007694:	e00b      	b.n	80076ae <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b4:	461a      	mov	r2, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c0:	4619      	mov	r1, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c8:	461a      	mov	r2, r3
 80076ca:	680b      	ldr	r3, [r1, #0]
 80076cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10c      	bne.n	80076ee <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076da:	2100      	movs	r1, #0
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f961 	bl	80079a4 <USB_SetDevSpeed>
 80076e2:	e008      	b.n	80076f6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f95c 	bl	80079a4 <USB_SetDevSpeed>
 80076ec:	e003      	b.n	80076f6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ee:	2103      	movs	r1, #3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f957 	bl	80079a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076f6:	2110      	movs	r1, #16
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f90b 	bl	8007914 <USB_FlushTxFifo>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f929 	bl	8007960 <USB_FlushRxFifo>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771e:	461a      	mov	r2, r3
 8007720:	2300      	movs	r3, #0
 8007722:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772a:	461a      	mov	r2, r3
 800772c:	2300      	movs	r3, #0
 800772e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007736:	461a      	mov	r2, r3
 8007738:	2300      	movs	r3, #0
 800773a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800773c:	2300      	movs	r3, #0
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	e043      	b.n	80077ca <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d118      	bne.n	800778c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	461a      	mov	r2, r3
 800776e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e013      	b.n	800779e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007782:	461a      	mov	r2, r3
 8007784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	e008      	b.n	800779e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	461a      	mov	r2, r3
 800779a:	2300      	movs	r3, #0
 800779c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	461a      	mov	r2, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	461a      	mov	r2, r3
 80077be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	3301      	adds	r3, #1
 80077c8:	613b      	str	r3, [r7, #16]
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b7      	bcc.n	8007742 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	e043      	b.n	8007860 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ee:	d118      	bne.n	8007822 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	461a      	mov	r2, r3
 8007804:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e013      	b.n	8007834 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007818:	461a      	mov	r2, r3
 800781a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800781e:	6013      	str	r3, [r2, #0]
 8007820:	e008      	b.n	8007834 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	461a      	mov	r2, r3
 8007830:	2300      	movs	r3, #0
 8007832:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	461a      	mov	r2, r3
 8007842:	2300      	movs	r3, #0
 8007844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	461a      	mov	r2, r3
 8007854:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	3301      	adds	r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	429a      	cmp	r2, r3
 8007866:	d3b7      	bcc.n	80077d8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	2b01      	cmp	r3, #1
 8007880:	d111      	bne.n	80078a6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007888:	461a      	mov	r2, r3
 800788a:	4b20      	ldr	r3, [pc, #128]	; (800790c <USB_DevInit+0x2dc>)
 800788c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a0:	f043 0303 	orr.w	r3, r3, #3
 80078a4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f043 0210 	orr.w	r2, r3, #16
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <USB_DevInit+0x2e0>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f043 0208 	orr.w	r2, r3, #8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f2:	f043 0304 	orr.w	r3, r3, #4
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007906:	b004      	add	sp, #16
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	00800100 	.word	0x00800100
 8007910:	803c3800 	.word	0x803c3800

08007914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	019b      	lsls	r3, r3, #6
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a09      	ldr	r2, [pc, #36]	; (800795c <USB_FlushTxFifo+0x48>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b20      	cmp	r3, #32
 800794a:	d0f0      	beq.n	800792e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	00030d40 	.word	0x00030d40

08007960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2210      	movs	r2, #16
 8007970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <USB_FlushRxFifo+0x40>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d901      	bls.n	8007984 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d0f0      	beq.n	8007972 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	00030d40 	.word	0x00030d40

080079a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079c4:	4313      	orrs	r3, r2
 80079c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b087      	sub	sp, #28
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 0306 	and.w	r3, r3, #6
 80079ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
 80079fa:	e00a      	b.n	8007a12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d002      	beq.n	8007a08 <USB_GetDevSpeed+0x32>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d102      	bne.n	8007a0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	75fb      	strb	r3, [r7, #23]
 8007a0c:	e001      	b.n	8007a12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a0e:	230f      	movs	r3, #15
 8007a10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d13a      	bne.n	8007ab2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	68f9      	ldr	r1, [r7, #12]
 8007a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d155      	bne.n	8007b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	e036      	b.n	8007b20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab8:	69da      	ldr	r2, [r3, #28]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac8:	041b      	lsls	r3, r3, #16
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d11a      	bne.n	8007b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	78db      	ldrb	r3, [r3, #3]
 8007b04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b06:	430b      	orrs	r3, r1
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d135      	bne.n	8007bb8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	43db      	mvns	r3, r3
 8007b66:	68f9      	ldr	r1, [r7, #12]
 8007b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b90:	4013      	ands	r3, r2
 8007b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	0159      	lsls	r1, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	440b      	add	r3, r1
 8007baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <USB_DeactivateEndpoint+0x100>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	600b      	str	r3, [r1, #0]
 8007bb6:	e034      	b.n	8007c22 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	2101      	movs	r1, #1
 8007bca:	fa01 f303 	lsl.w	r3, r1, r3
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd8:	4013      	ands	r3, r2
 8007bda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	69da      	ldr	r2, [r3, #28]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	2101      	movs	r1, #1
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	041b      	lsls	r3, r3, #16
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	0159      	lsls	r1, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	440b      	add	r3, r1
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <USB_DeactivateEndpoint+0x104>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	ec337800 	.word	0xec337800
 8007c34:	eff37800 	.word	0xeff37800

08007c38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 815c 	bne.w	8007f12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d132      	bne.n	8007cc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc0:	0cdb      	lsrs	r3, r3, #19
 8007cc2:	04db      	lsls	r3, r3, #19
 8007cc4:	6113      	str	r3, [r2, #16]
 8007cc6:	e074      	b.n	8007db2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce2:	0cdb      	lsrs	r3, r3, #19
 8007ce4:	04db      	lsls	r3, r3, #19
 8007ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6959      	ldr	r1, [r3, #20]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	440b      	add	r3, r1
 8007d24:	1e59      	subs	r1, r3, #1
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d2e:	04d9      	lsls	r1, r3, #19
 8007d30:	4b9d      	ldr	r3, [pc, #628]	; (8007fa8 <USB_EPStartXfer+0x370>)
 8007d32:	400b      	ands	r3, r1
 8007d34:	69b9      	ldr	r1, [r7, #24]
 8007d36:	0148      	lsls	r0, r1, #5
 8007d38:	69f9      	ldr	r1, [r7, #28]
 8007d3a:	4401      	add	r1, r0
 8007d3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d40:	4313      	orrs	r3, r2
 8007d42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	691a      	ldr	r2, [r3, #16]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d5a:	69b9      	ldr	r1, [r7, #24]
 8007d5c:	0148      	lsls	r0, r1, #5
 8007d5e:	69f9      	ldr	r1, [r7, #28]
 8007d60:	4401      	add	r1, r0
 8007d62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d66:	4313      	orrs	r3, r2
 8007d68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	78db      	ldrb	r3, [r3, #3]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d11f      	bne.n	8007db2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007db0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d14b      	bne.n	8007e50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	78db      	ldrb	r3, [r3, #3]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d128      	bne.n	8007e2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e00f      	b.n	8007e2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e12f      	b.n	80080b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	78db      	ldrb	r3, [r3, #3]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d015      	beq.n	8007ea4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 8117 	beq.w	80080b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	2101      	movs	r1, #1
 8007e94:	fa01 f303 	lsl.w	r3, r1, r3
 8007e98:	69f9      	ldr	r1, [r7, #28]
 8007e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	634b      	str	r3, [r1, #52]	; 0x34
 8007ea2:	e105      	b.n	80080b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d110      	bne.n	8007ed6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	015a      	lsls	r2, r3, #5
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	0151      	lsls	r1, r2, #5
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	440a      	add	r2, r1
 8007eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	e00f      	b.n	8007ef6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	68d9      	ldr	r1, [r3, #12]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	b298      	uxth	r0, r3
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4603      	mov	r3, r0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fa2b 	bl	8008366 <USB_WritePacket>
 8007f10:	e0ce      	b.n	80080b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2c:	0cdb      	lsrs	r3, r3, #19
 8007f2e:	04db      	lsls	r3, r3, #19
 8007f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d126      	bne.n	8007fac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6a:	691a      	ldr	r2, [r3, #16]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f74:	69b9      	ldr	r1, [r7, #24]
 8007f76:	0148      	lsls	r0, r1, #5
 8007f78:	69f9      	ldr	r1, [r7, #28]
 8007f7a:	4401      	add	r1, r0
 8007f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f80:	4313      	orrs	r3, r2
 8007f82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fa2:	6113      	str	r3, [r2, #16]
 8007fa4:	e036      	b.n	8008014 <USB_EPStartXfer+0x3dc>
 8007fa6:	bf00      	nop
 8007fa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	695a      	ldr	r2, [r3, #20]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	8afb      	ldrh	r3, [r7, #22]
 8007fd2:	04d9      	lsls	r1, r3, #19
 8007fd4:	4b39      	ldr	r3, [pc, #228]	; (80080bc <USB_EPStartXfer+0x484>)
 8007fd6:	400b      	ands	r3, r1
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	0148      	lsls	r0, r1, #5
 8007fdc:	69f9      	ldr	r1, [r7, #28]
 8007fde:	4401      	add	r1, r0
 8007fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	691a      	ldr	r2, [r3, #16]
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	8af9      	ldrh	r1, [r7, #22]
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
 8008000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008004:	69b9      	ldr	r1, [r7, #24]
 8008006:	0148      	lsls	r0, r1, #5
 8008008:	69f9      	ldr	r1, [r7, #28]
 800800a:	4401      	add	r1, r0
 800800c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008010:	4313      	orrs	r3, r2
 8008012:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d10d      	bne.n	8008036 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68d9      	ldr	r1, [r3, #12]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008032:	460a      	mov	r2, r1
 8008034:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	78db      	ldrb	r3, [r3, #3]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d128      	bne.n	8008090 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d110      	bne.n	8008070 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e00f      	b.n	8008090 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800808e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	1ff80000 	.word	0x1ff80000

080080c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	785b      	ldrb	r3, [r3, #1]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	f040 80cd 	bne.w	800827c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d132      	bne.n	8008150 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008104:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008108:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800810c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	0151      	lsls	r1, r2, #5
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	440a      	add	r2, r1
 8008124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800812c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	0cdb      	lsrs	r3, r3, #19
 800814a:	04db      	lsls	r3, r3, #19
 800814c:	6113      	str	r3, [r2, #16]
 800814e:	e04e      	b.n	80081ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	440a      	add	r2, r1
 8008166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816a:	0cdb      	lsrs	r3, r3, #19
 800816c:	04db      	lsls	r3, r3, #19
 800816e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	440a      	add	r2, r1
 8008186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800818e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008192:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	429a      	cmp	r2, r3
 800819e:	d903      	bls.n	80081a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081de:	6939      	ldr	r1, [r7, #16]
 80081e0:	0148      	lsls	r0, r1, #5
 80081e2:	6979      	ldr	r1, [r7, #20]
 80081e4:	4401      	add	r1, r0
 80081e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081ea:	4313      	orrs	r3, r2
 80081ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d11e      	bne.n	8008232 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d009      	beq.n	8008210 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	461a      	mov	r2, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	440a      	add	r2, r1
 8008226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e092      	b.n	8008358 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008250:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d07e      	beq.n	8008358 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	2101      	movs	r1, #1
 800826c:	fa01 f303 	lsl.w	r3, r1, r3
 8008270:	6979      	ldr	r1, [r7, #20]
 8008272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008276:	4313      	orrs	r3, r2
 8008278:	634b      	str	r3, [r1, #52]	; 0x34
 800827a:	e06d      	b.n	8008358 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008296:	0cdb      	lsrs	r3, r3, #19
 8008298:	04db      	lsls	r3, r3, #19
 800829a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	691a      	ldr	r2, [r3, #16]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008306:	6939      	ldr	r1, [r7, #16]
 8008308:	0148      	lsls	r0, r1, #5
 800830a:	6979      	ldr	r1, [r7, #20]
 800830c:	4401      	add	r1, r0
 800830e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008312:	4313      	orrs	r3, r2
 8008314:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d10d      	bne.n	8008338 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d009      	beq.n	8008338 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68d9      	ldr	r1, [r3, #12]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	015a      	lsls	r2, r3, #5
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	4413      	add	r3, r2
 8008330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008334:	460a      	mov	r2, r1
 8008336:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008366:	b480      	push	{r7}
 8008368:	b089      	sub	sp, #36	; 0x24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	4611      	mov	r1, r2
 8008372:	461a      	mov	r2, r3
 8008374:	460b      	mov	r3, r1
 8008376:	71fb      	strb	r3, [r7, #7]
 8008378:	4613      	mov	r3, r2
 800837a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008384:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11a      	bne.n	80083c2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800838c:	88bb      	ldrh	r3, [r7, #4]
 800838e:	3303      	adds	r3, #3
 8008390:	089b      	lsrs	r3, r3, #2
 8008392:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	e00f      	b.n	80083ba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	031a      	lsls	r2, r3, #12
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a6:	461a      	mov	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	3304      	adds	r3, #4
 80083b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	3301      	adds	r3, #1
 80083b8:	61bb      	str	r3, [r7, #24]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d3eb      	bcc.n	800839a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3724      	adds	r7, #36	; 0x24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b089      	sub	sp, #36	; 0x24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	4613      	mov	r3, r2
 80083dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	3303      	adds	r3, #3
 80083ea:	089b      	lsrs	r3, r3, #2
 80083ec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	e00b      	b.n	800840c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	3304      	adds	r3, #4
 8008404:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	3301      	adds	r3, #1
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	429a      	cmp	r2, r3
 8008412:	d3ef      	bcc.n	80083f4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008414:	69fb      	ldr	r3, [r7, #28]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3724      	adds	r7, #36	; 0x24
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d12c      	bne.n	8008498 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	015a      	lsls	r2, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	db12      	blt.n	8008476 <USB_EPSetStall+0x54>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	0151      	lsls	r1, r2, #5
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	440a      	add	r2, r1
 800846c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008470:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008474:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	0151      	lsls	r1, r2, #5
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	440a      	add	r2, r1
 800848c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	e02b      	b.n	80084f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	db12      	blt.n	80084d0 <USB_EPSetStall+0xae>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00f      	beq.n	80084d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	0151      	lsls	r1, r2, #5
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	440a      	add	r2, r1
 80084e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d128      	bne.n	800856c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008534:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008538:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	78db      	ldrb	r3, [r3, #3]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d003      	beq.n	800854a <USB_EPClearStall+0x4c>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	78db      	ldrb	r3, [r3, #3]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d138      	bne.n	80085bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	0151      	lsls	r1, r2, #5
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	440a      	add	r2, r1
 8008560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e027      	b.n	80085bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008586:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800858a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	78db      	ldrb	r3, [r3, #3]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d003      	beq.n	800859c <USB_EPClearStall+0x9e>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	78db      	ldrb	r3, [r3, #3]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d10f      	bne.n	80085bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b085      	sub	sp, #20
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80085fe:	68f9      	ldr	r1, [r7, #12]
 8008600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008604:	4313      	orrs	r3, r2
 8008606:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008630:	f023 0302 	bic.w	r3, r3, #2
 8008634:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008636:	2003      	movs	r0, #3
 8008638:	f7f8 fd18 	bl	800106c <HAL_Delay>

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008666:	2003      	movs	r0, #3
 8008668:	f7f8 fd00 	bl	800106c <HAL_Delay>

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4013      	ands	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800868e:	68fb      	ldr	r3, [r7, #12]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	4013      	ands	r3, r2
 80086be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	0c1b      	lsrs	r3, r3, #16
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4013      	ands	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	b29b      	uxth	r3, r3
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	4013      	ands	r3, r2
 8008730:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008732:	68bb      	ldr	r3, [r7, #8]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
 8008770:	01db      	lsls	r3, r3, #7
 8008772:	b2db      	uxtb	r3, r3
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4013      	ands	r3, r2
 800878c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800878e:	68bb      	ldr	r3, [r7, #8]
}
 8008790:	4618      	mov	r0, r3
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	f003 0301 	and.w	r3, r3, #1
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087d6:	f023 0307 	bic.w	r3, r3, #7
 80087da:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0306 	and.w	r3, r3, #6
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d109      	bne.n	8008800 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087fa:	f043 0303 	orr.w	r3, r3, #3
 80087fe:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800880e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008812:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	460b      	mov	r3, r1
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	333c      	adds	r3, #60	; 0x3c
 800883a:	3304      	adds	r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4a26      	ldr	r2, [pc, #152]	; (80088dc <USB_EP0_OutStart+0xb8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d90a      	bls.n	800885e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008858:	d101      	bne.n	800885e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e037      	b.n	80088ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	461a      	mov	r2, r3
 8008866:	2300      	movs	r3, #0
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800887c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800888c:	f043 0318 	orr.w	r3, r3, #24
 8008890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80088a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d10f      	bne.n	80088cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	4f54300a 	.word	0x4f54300a

080088e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4a13      	ldr	r2, [pc, #76]	; (8008944 <USB_CoreReset+0x64>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e01b      	b.n	8008936 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	daf2      	bge.n	80088ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a09      	ldr	r2, [pc, #36]	; (8008944 <USB_CoreReset+0x64>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d901      	bls.n	8008928 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e006      	b.n	8008936 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b01      	cmp	r3, #1
 8008932:	d0f0      	beq.n	8008916 <USB_CoreReset+0x36>

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	00030d40 	.word	0x00030d40

08008948 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	7c1b      	ldrb	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d115      	bne.n	800898c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008964:	2202      	movs	r2, #2
 8008966:	2181      	movs	r1, #129	; 0x81
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f003 f9fa 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008978:	2202      	movs	r2, #2
 800897a:	2101      	movs	r1, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f003 f9f0 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800898a:	e012      	b.n	80089b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	2202      	movs	r2, #2
 8008990:	2181      	movs	r1, #129	; 0x81
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f003 f9e5 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800899e:	2340      	movs	r3, #64	; 0x40
 80089a0:	2202      	movs	r2, #2
 80089a2:	2101      	movs	r1, #1
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f003 f9dc 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089b2:	2308      	movs	r3, #8
 80089b4:	2203      	movs	r2, #3
 80089b6:	2182      	movs	r1, #130	; 0x82
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f003 f9d2 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80089c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089c8:	f003 fc80 	bl	800c2cc <malloc>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d102      	bne.n	80089e6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80089e0:	2301      	movs	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e026      	b.n	8008a34 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80089ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7c1b      	ldrb	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f003 fa91 	bl	800bf44 <USBD_LL_PrepareReceive>
 8008a22:	e007      	b.n	8008a34 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f003 fa88 	bl	800bf44 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a4e:	2181      	movs	r1, #129	; 0x81
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f003 f9ac 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f003 f9a5 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a6c:	2182      	movs	r1, #130	; 0x82
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f003 f99d 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008a94:	4618      	mov	r0, r3
 8008a96:	f003 fc21 	bl	800c2dc <free>
    pdev->pClassData = NULL;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008abc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d039      	beq.n	8008b4a <USBD_CDC_Setup+0x9e>
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d17c      	bne.n	8008bd4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d029      	beq.n	8008b36 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da11      	bge.n	8008b10 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008af8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	88d2      	ldrh	r2, [r2, #6]
 8008afe:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b00:	6939      	ldr	r1, [r7, #16]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	88db      	ldrh	r3, [r3, #6]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f9c9 	bl	8009ea0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008b0e:	e068      	b.n	8008be2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	785a      	ldrb	r2, [r3, #1]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b26:	6939      	ldr	r1, [r7, #16]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	88db      	ldrh	r3, [r3, #6]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f9e4 	bl	8009efc <USBD_CtlPrepareRx>
    break;
 8008b34:	e055      	b.n	8008be2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	7850      	ldrb	r0, [r2, #1]
 8008b42:	2200      	movs	r2, #0
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	4798      	blx	r3
    break;
 8008b48:	e04b      	b.n	8008be2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b0a      	cmp	r3, #10
 8008b50:	d017      	beq.n	8008b82 <USBD_CDC_Setup+0xd6>
 8008b52:	2b0b      	cmp	r3, #11
 8008b54:	d029      	beq.n	8008baa <USBD_CDC_Setup+0xfe>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d133      	bne.n	8008bc2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d107      	bne.n	8008b74 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008b64:	f107 030c 	add.w	r3, r7, #12
 8008b68:	2202      	movs	r2, #2
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 f997 	bl	8009ea0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008b72:	e02e      	b.n	8008bd2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 f927 	bl	8009dca <USBD_CtlError>
			  ret = USBD_FAIL;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b80:	e027      	b.n	8008bd2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d107      	bne.n	8008b9c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008b8c:	f107 030f 	add.w	r3, r7, #15
 8008b90:	2201      	movs	r2, #1
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f001 f983 	bl	8009ea0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008b9a:	e01a      	b.n	8008bd2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f001 f913 	bl	8009dca <USBD_CtlError>
			  ret = USBD_FAIL;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ba8:	e013      	b.n	8008bd2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d00d      	beq.n	8008bd0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 f907 	bl	8009dca <USBD_CtlError>
			  ret = USBD_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008bc0:	e006      	b.n	8008bd0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f900 	bl	8009dca <USBD_CtlError>
      ret = USBD_FAIL;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bce:	e000      	b.n	8008bd2 <USBD_CDC_Setup+0x126>
      break;
 8008bd0:	bf00      	nop
    }
    break;
 8008bd2:	e006      	b.n	8008be2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 f8f7 	bl	8009dca <USBD_CtlError>
    ret = USBD_FAIL;
 8008bdc:	2302      	movs	r3, #2
 8008bde:	75fb      	strb	r3, [r7, #23]
    break;
 8008be0:	bf00      	nop
  }

  return ret;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008bfe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008c06:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d03a      	beq.n	8008c88 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	331c      	adds	r3, #28
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d029      	beq.n	8008c7c <USBD_CDC_DataIn+0x90>
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	440b      	add	r3, r1
 8008c36:	331c      	adds	r3, #28
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	78f9      	ldrb	r1, [r7, #3]
 8008c3c:	68b8      	ldr	r0, [r7, #8]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	1a5b      	subs	r3, r3, r1
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4403      	add	r3, r0
 8008c48:	3344      	adds	r3, #68	; 0x44
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c50:	fb03 f301 	mul.w	r3, r3, r1
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008c5a:	78fa      	ldrb	r2, [r7, #3]
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	440b      	add	r3, r1
 8008c68:	331c      	adds	r3, #28
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008c6e:	78f9      	ldrb	r1, [r7, #3]
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f003 f942 	bl	800befe <USBD_LL_Transmit>
 8008c7a:	e003      	b.n	8008c84 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e000      	b.n	8008c8a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c88:	2302      	movs	r3, #2
  }
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f003 f96d 	bl	800bf8a <USBD_LL_GetRxDataSize>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4798      	blx	r3

    return USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e000      	b.n	8008ce0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008cde:	2302      	movs	r3, #2
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008cf6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d015      	beq.n	8008d2e <USBD_CDC_EP0_RxReady+0x46>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d08:	2bff      	cmp	r3, #255	; 0xff
 8008d0a:	d010      	beq.n	8008d2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008d1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d22:	b292      	uxth	r2, r2
 8008d24:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	22ff      	movs	r2, #255	; 0xff
 8008d2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2243      	movs	r2, #67	; 0x43
 8008d44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	20000090 	.word	0x20000090

08008d58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2243      	movs	r2, #67	; 0x43
 8008d64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	2000004c 	.word	0x2000004c

08008d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2243      	movs	r2, #67	; 0x43
 8008d84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008d86:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	200000d4 	.word	0x200000d4

08008d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	220a      	movs	r2, #10
 8008da4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008da6:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000008 	.word	0x20000008

08008db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008dfa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e50:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01c      	beq.n	8008e96 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d115      	bne.n	8008e92 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2181      	movs	r1, #129	; 0x81
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f003 f838 	bl	800befe <USBD_LL_Transmit>

      return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e002      	b.n	8008e98 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008e96:	2302      	movs	r3, #2
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d017      	beq.n	8008eea <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7c1b      	ldrb	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ecc:	2101      	movs	r1, #1
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f003 f838 	bl	800bf44 <USBD_LL_PrepareReceive>
 8008ed4:	e007      	b.n	8008ee6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008edc:	2340      	movs	r3, #64	; 0x40
 8008ede:	2101      	movs	r1, #1
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f003 f82f 	bl	800bf44 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e000      	b.n	8008eec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008eea:	2302      	movs	r3, #2
  }
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e01a      	b.n	8008f42 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	79fa      	ldrb	r2, [r7, #7]
 8008f38:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f002 feaa 	bl	800bc94 <USBD_LL_Init>

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d006      	beq.n	8008f6c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
 8008f6a:	e001      	b.n	8008f70 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f002 fed0 	bl	800bd2c <USBD_LL_Start>

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00c      	beq.n	8008fe0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	4798      	blx	r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	4611      	mov	r1, r2
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
  return USBD_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fe94 	bl	8009d50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009036:	461a      	mov	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009044:	f003 031f 	and.w	r3, r3, #31
 8009048:	2b01      	cmp	r3, #1
 800904a:	d00c      	beq.n	8009066 <USBD_LL_SetupStage+0x56>
 800904c:	2b01      	cmp	r3, #1
 800904e:	d302      	bcc.n	8009056 <USBD_LL_SetupStage+0x46>
 8009050:	2b02      	cmp	r3, #2
 8009052:	d010      	beq.n	8009076 <USBD_LL_SetupStage+0x66>
 8009054:	e017      	b.n	8009086 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa04 	bl	800946c <USBD_StdDevReq>
    break;
 8009064:	e01a      	b.n	800909c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa66 	bl	8009540 <USBD_StdItfReq>
    break;
 8009074:	e012      	b.n	800909c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 faa4 	bl	80095cc <USBD_StdEPReq>
    break;
 8009084:	e00a      	b.n	800909c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800908c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009090:	b2db      	uxtb	r3, r3
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f002 fea9 	bl	800bdec <USBD_LL_StallEP>
    break;
 800909a:	bf00      	nop
  }

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	60f8      	str	r0, [r7, #12]
 80090ae:	460b      	mov	r3, r1
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d14b      	bne.n	8009152 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80090c0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d134      	bne.n	8009136 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d919      	bls.n	800910c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	1ad2      	subs	r2, r2, r3
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d203      	bcs.n	80090fa <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	e002      	b.n	8009100 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 ff17 	bl	8009f38 <USBD_CtlContinueRx>
 800910a:	e038      	b.n	800917e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00a      	beq.n	800912e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800911e:	2b03      	cmp	r3, #3
 8009120:	d105      	bne.n	800912e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 ff14 	bl	8009f5c <USBD_CtlSendStatus>
 8009134:	e023      	b.n	800917e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800913c:	2b05      	cmp	r3, #5
 800913e:	d11e      	bne.n	800917e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009148:	2100      	movs	r1, #0
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f002 fe4e 	bl	800bdec <USBD_LL_StallEP>
 8009150:	e015      	b.n	800917e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00d      	beq.n	800917a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009164:	2b03      	cmp	r3, #3
 8009166:	d108      	bne.n	800917a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	7afa      	ldrb	r2, [r7, #11]
 8009172:	4611      	mov	r1, r2
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	4798      	blx	r3
 8009178:	e001      	b.n	800917e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800917a:	2302      	movs	r3, #2
 800917c:	e000      	b.n	8009180 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	460b      	mov	r3, r1
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d17f      	bne.n	800929c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3314      	adds	r3, #20
 80091a0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d15c      	bne.n	8009266 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	68da      	ldr	r2, [r3, #12]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d915      	bls.n	80091e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	1ad2      	subs	r2, r2, r3
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	461a      	mov	r2, r3
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fe81 	bl	8009ed8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f002 feb1 	bl	800bf44 <USBD_LL_PrepareReceive>
 80091e2:	e04e      	b.n	8009282 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	6912      	ldr	r2, [r2, #16]
 80091ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80091f0:	fb02 f201 	mul.w	r2, r2, r1
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d11c      	bne.n	8009234 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009202:	429a      	cmp	r2, r3
 8009204:	d316      	bcc.n	8009234 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8009210:	429a      	cmp	r2, r3
 8009212:	d20f      	bcs.n	8009234 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 fe5d 	bl	8009ed8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009226:	2300      	movs	r3, #0
 8009228:	2200      	movs	r2, #0
 800922a:	2100      	movs	r1, #0
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f002 fe89 	bl	800bf44 <USBD_LL_PrepareReceive>
 8009232:	e026      	b.n	8009282 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009246:	2b03      	cmp	r3, #3
 8009248:	d105      	bne.n	8009256 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009256:	2180      	movs	r1, #128	; 0x80
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f002 fdc7 	bl	800bdec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fe8f 	bl	8009f82 <USBD_CtlReceiveStatus>
 8009264:	e00d      	b.n	8009282 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800926c:	2b04      	cmp	r3, #4
 800926e:	d004      	beq.n	800927a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f002 fdb5 	bl	800bdec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009288:	2b01      	cmp	r3, #1
 800928a:	d11d      	bne.n	80092c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff fe82 	bl	8008f96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800929a:	e015      	b.n	80092c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00d      	beq.n	80092c4 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d108      	bne.n	80092c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	7afa      	ldrb	r2, [r7, #11]
 80092bc:	4611      	mov	r1, r2
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	4798      	blx	r3
 80092c2:	e001      	b.n	80092c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80092c4:	2302      	movs	r3, #2
 80092c6:	e000      	b.n	80092ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092da:	2340      	movs	r3, #64	; 0x40
 80092dc:	2200      	movs	r2, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f002 fd3e 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2240      	movs	r2, #64	; 0x40
 80092f2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092f6:	2340      	movs	r3, #64	; 0x40
 80092f8:	2200      	movs	r2, #0
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f002 fd30 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2240      	movs	r2, #64	; 0x40
 800930c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6852      	ldr	r2, [r2, #4]
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	4611      	mov	r1, r2
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
  }

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2204      	movs	r2, #4
 800938c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d10b      	bne.n	80093ea <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d005      	beq.n	80093ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6852      	ldr	r2, [r2, #4]
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	4611      	mov	r1, r2
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3

  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009482:	2b20      	cmp	r3, #32
 8009484:	d004      	beq.n	8009490 <USBD_StdDevReq+0x24>
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d002      	beq.n	8009490 <USBD_StdDevReq+0x24>
 800948a:	2b00      	cmp	r3, #0
 800948c:	d008      	beq.n	80094a0 <USBD_StdDevReq+0x34>
 800948e:	e04c      	b.n	800952a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	4798      	blx	r3
    break;
 800949e:	e049      	b.n	8009534 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d83a      	bhi.n	800951e <USBD_StdDevReq+0xb2>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <USBD_StdDevReq+0x44>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009515 	.word	0x08009515
 80094b8:	0800951f 	.word	0x0800951f
 80094bc:	0800950b 	.word	0x0800950b
 80094c0:	0800951f 	.word	0x0800951f
 80094c4:	080094e3 	.word	0x080094e3
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	0800951f 	.word	0x0800951f
 80094d0:	080094f7 	.word	0x080094f7
 80094d4:	080094ed 	.word	0x080094ed
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f9d2 	bl	8009884 <USBD_GetDescriptor>
      break;
 80094e0:	e022      	b.n	8009528 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fac7 	bl	8009a78 <USBD_SetAddress>
      break;
 80094ea:	e01d      	b.n	8009528 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fb04 	bl	8009afc <USBD_SetConfig>
      break;
 80094f4:	e018      	b.n	8009528 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb8d 	bl	8009c18 <USBD_GetConfig>
      break;
 80094fe:	e013      	b.n	8009528 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fbbc 	bl	8009c80 <USBD_GetStatus>
      break;
 8009508:	e00e      	b.n	8009528 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fbea 	bl	8009ce6 <USBD_SetFeature>
      break;
 8009512:	e009      	b.n	8009528 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fbf9 	bl	8009d0e <USBD_ClrFeature>
      break;
 800951c:	e004      	b.n	8009528 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc52 	bl	8009dca <USBD_CtlError>
      break;
 8009526:	bf00      	nop
    }
    break;
 8009528:	e004      	b.n	8009534 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fc4c 	bl	8009dca <USBD_CtlError>
    break;
 8009532:	bf00      	nop
  }

  return ret;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop

08009540 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009556:	2b20      	cmp	r3, #32
 8009558:	d003      	beq.n	8009562 <USBD_StdItfReq+0x22>
 800955a:	2b40      	cmp	r3, #64	; 0x40
 800955c:	d001      	beq.n	8009562 <USBD_StdItfReq+0x22>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d12a      	bne.n	80095b8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009568:	3b01      	subs	r3, #1
 800956a:	2b02      	cmp	r3, #2
 800956c:	d81d      	bhi.n	80095aa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	889b      	ldrh	r3, [r3, #4]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d813      	bhi.n	80095a0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
 8009586:	4603      	mov	r3, r0
 8009588:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d110      	bne.n	80095b4 <USBD_StdItfReq+0x74>
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10d      	bne.n	80095b4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fcdf 	bl	8009f5c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800959e:	e009      	b.n	80095b4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fc11 	bl	8009dca <USBD_CtlError>
      break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fc0c 	bl	8009dca <USBD_CtlError>
      break;
 80095b2:	e000      	b.n	80095b6 <USBD_StdItfReq+0x76>
      break;
 80095b4:	bf00      	nop
    }
    break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fc05 	bl	8009dca <USBD_CtlError>
    break;
 80095c0:	bf00      	nop
  }

  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d004      	beq.n	80095f6 <USBD_StdEPReq+0x2a>
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d002      	beq.n	80095f6 <USBD_StdEPReq+0x2a>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <USBD_StdEPReq+0x3a>
 80095f4:	e13b      	b.n	800986e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	4798      	blx	r3
    break;
 8009604:	e138      	b.n	8009878 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800960e:	2b20      	cmp	r3, #32
 8009610:	d10a      	bne.n	8009628 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	4798      	blx	r3
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	e128      	b.n	800987a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d03e      	beq.n	80096ae <USBD_StdEPReq+0xe2>
 8009630:	2b03      	cmp	r3, #3
 8009632:	d002      	beq.n	800963a <USBD_StdEPReq+0x6e>
 8009634:	2b00      	cmp	r3, #0
 8009636:	d070      	beq.n	800971a <USBD_StdEPReq+0x14e>
 8009638:	e113      	b.n	8009862 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009640:	2b02      	cmp	r3, #2
 8009642:	d002      	beq.n	800964a <USBD_StdEPReq+0x7e>
 8009644:	2b03      	cmp	r3, #3
 8009646:	d015      	beq.n	8009674 <USBD_StdEPReq+0xa8>
 8009648:	e02b      	b.n	80096a2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00c      	beq.n	800966a <USBD_StdEPReq+0x9e>
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d009      	beq.n	800966a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f002 fbc6 	bl	800bdec <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009660:	2180      	movs	r1, #128	; 0x80
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f002 fbc2 	bl	800bdec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009668:	e020      	b.n	80096ac <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fbac 	bl	8009dca <USBD_CtlError>
        break;
 8009672:	e01b      	b.n	80096ac <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10e      	bne.n	800969a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <USBD_StdEPReq+0xce>
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b80      	cmp	r3, #128	; 0x80
 8009686:	d008      	beq.n	800969a <USBD_StdEPReq+0xce>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	88db      	ldrh	r3, [r3, #6]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f002 fba9 	bl	800bdec <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fc5e 	bl	8009f5c <USBD_CtlSendStatus>

        break;
 80096a0:	e004      	b.n	80096ac <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fb90 	bl	8009dca <USBD_CtlError>
        break;
 80096aa:	bf00      	nop
      }
      break;
 80096ac:	e0de      	b.n	800986c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d002      	beq.n	80096be <USBD_StdEPReq+0xf2>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d015      	beq.n	80096e8 <USBD_StdEPReq+0x11c>
 80096bc:	e026      	b.n	800970c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096be:	7bbb      	ldrb	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00c      	beq.n	80096de <USBD_StdEPReq+0x112>
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d009      	beq.n	80096de <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fb8c 	bl	800bdec <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80096d4:	2180      	movs	r1, #128	; 0x80
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fb88 	bl	800bdec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80096dc:	e01c      	b.n	8009718 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fb72 	bl	8009dca <USBD_CtlError>
        break;
 80096e6:	e017      	b.n	8009718 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f002 fb93 	bl	800be2a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fc29 	bl	8009f5c <USBD_CtlSendStatus>
        }
        break;
 800970a:	e004      	b.n	8009716 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb5b 	bl	8009dca <USBD_CtlError>
        break;
 8009714:	e000      	b.n	8009718 <USBD_StdEPReq+0x14c>
        break;
 8009716:	bf00      	nop
      }
      break;
 8009718:	e0a8      	b.n	800986c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009720:	2b02      	cmp	r3, #2
 8009722:	d002      	beq.n	800972a <USBD_StdEPReq+0x15e>
 8009724:	2b03      	cmp	r3, #3
 8009726:	d031      	beq.n	800978c <USBD_StdEPReq+0x1c0>
 8009728:	e095      	b.n	8009856 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d007      	beq.n	8009740 <USBD_StdEPReq+0x174>
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b80      	cmp	r3, #128	; 0x80
 8009734:	d004      	beq.n	8009740 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb46 	bl	8009dca <USBD_CtlError>
          break;
 800973e:	e08f      	b.n	8009860 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da0b      	bge.n	8009760 <USBD_StdEPReq+0x194>
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	3310      	adds	r3, #16
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	4413      	add	r3, r2
 800975c:	3304      	adds	r3, #4
 800975e:	e00a      	b.n	8009776 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	4413      	add	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2202      	movs	r2, #2
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb8b 	bl	8009ea0 <USBD_CtlSendData>
          break;
 800978a:	e069      	b.n	8009860 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800978c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da11      	bge.n	80097b8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	3318      	adds	r3, #24
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d117      	bne.n	80097de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fb0a 	bl	8009dca <USBD_CtlError>
            break;
 80097b6:	e053      	b.n	8009860 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	f003 020f 	and.w	r2, r3, #15
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	4613      	mov	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 faf7 	bl	8009dca <USBD_CtlError>
            break;
 80097dc:	e040      	b.n	8009860 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80097de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	da0b      	bge.n	80097fe <USBD_StdEPReq+0x232>
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	3310      	adds	r3, #16
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	4413      	add	r3, r2
 80097fa:	3304      	adds	r3, #4
 80097fc:	e00a      	b.n	8009814 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <USBD_StdEPReq+0x256>
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d103      	bne.n	800982a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e00e      	b.n	8009848 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f002 fb1a 	bl	800be68 <USBD_LL_IsStallEP>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e002      	b.n	8009848 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2202      	movs	r2, #2
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb26 	bl	8009ea0 <USBD_CtlSendData>
          break;
 8009854:	e004      	b.n	8009860 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fab6 	bl	8009dca <USBD_CtlError>
        break;
 800985e:	bf00      	nop
      }
      break;
 8009860:	e004      	b.n	800986c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fab0 	bl	8009dca <USBD_CtlError>
      break;
 800986a:	bf00      	nop
    }
    break;
 800986c:	e004      	b.n	8009878 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 faaa 	bl	8009dca <USBD_CtlError>
    break;
 8009876:	bf00      	nop
  }

  return ret;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	0a1b      	lsrs	r3, r3, #8
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	2b06      	cmp	r3, #6
 800989a:	f200 80c9 	bhi.w	8009a30 <USBD_GetDescriptor+0x1ac>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <USBD_GetDescriptor+0x20>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098c1 	.word	0x080098c1
 80098a8:	080098d9 	.word	0x080098d9
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009a31 	.word	0x08009a31
 80098b4:	08009a31 	.word	0x08009a31
 80098b8:	080099dd 	.word	0x080099dd
 80098bc:	08009a03 	.word	0x08009a03
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7c12      	ldrb	r2, [r2, #16]
 80098cc:	f107 010a 	add.w	r1, r7, #10
 80098d0:	4610      	mov	r0, r2
 80098d2:	4798      	blx	r3
 80098d4:	60f8      	str	r0, [r7, #12]
    break;
 80098d6:	e0b0      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1b      	ldrb	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10d      	bne.n	80098fc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e8:	f107 020a 	add.w	r2, r7, #10
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	3301      	adds	r3, #1
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80098fa:	e09e      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	f107 020a 	add.w	r2, r7, #10
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	2202      	movs	r2, #2
 8009914:	701a      	strb	r2, [r3, #0]
    break;
 8009916:	e090      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	885b      	ldrh	r3, [r3, #2]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b05      	cmp	r3, #5
 8009920:	d856      	bhi.n	80099d0 <USBD_GetDescriptor+0x14c>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USBD_GetDescriptor+0xa4>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009941 	.word	0x08009941
 800992c:	08009959 	.word	0x08009959
 8009930:	08009971 	.word	0x08009971
 8009934:	08009989 	.word	0x08009989
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099b9 	.word	0x080099b9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7c12      	ldrb	r2, [r2, #16]
 800994c:	f107 010a 	add.w	r1, r7, #10
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
      break;
 8009956:	e040      	b.n	80099da <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	7c12      	ldrb	r2, [r2, #16]
 8009964:	f107 010a 	add.w	r1, r7, #10
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
      break;
 800996e:	e034      	b.n	80099da <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	7c12      	ldrb	r2, [r2, #16]
 800997c:	f107 010a 	add.w	r1, r7, #10
 8009980:	4610      	mov	r0, r2
 8009982:	4798      	blx	r3
 8009984:	60f8      	str	r0, [r7, #12]
      break;
 8009986:	e028      	b.n	80099da <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	7c12      	ldrb	r2, [r2, #16]
 8009994:	f107 010a 	add.w	r1, r7, #10
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
      break;
 800999e:	e01c      	b.n	80099da <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7c12      	ldrb	r2, [r2, #16]
 80099ac:	f107 010a 	add.w	r1, r7, #10
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
      break;
 80099b6:	e010      	b.n	80099da <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 010a 	add.w	r1, r7, #10
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
      break;
 80099ce:	e004      	b.n	80099da <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f9f9 	bl	8009dca <USBD_CtlError>
      return;
 80099d8:	e04b      	b.n	8009a72 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80099da:	e02e      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	7c1b      	ldrb	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d109      	bne.n	80099f8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80099ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ec:	f107 020a 	add.w	r2, r7, #10
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
      break;
 80099f6:	e020      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f9e5 	bl	8009dca <USBD_CtlError>
      return;
 8009a00:	e037      	b.n	8009a72 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	7c1b      	ldrb	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10d      	bne.n	8009a26 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	f107 020a 	add.w	r2, r7, #10
 8009a16:	4610      	mov	r0, r2
 8009a18:	4798      	blx	r3
 8009a1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	2207      	movs	r2, #7
 8009a22:	701a      	strb	r2, [r3, #0]
      break;
 8009a24:	e009      	b.n	8009a3a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f9ce 	bl	8009dca <USBD_CtlError>
      return;
 8009a2e:	e020      	b.n	8009a72 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f9c9 	bl	8009dca <USBD_CtlError>
    return;
 8009a38:	e01b      	b.n	8009a72 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009a3a:	897b      	ldrh	r3, [r7, #10]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d011      	beq.n	8009a64 <USBD_GetDescriptor+0x1e0>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	88db      	ldrh	r3, [r3, #6]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00d      	beq.n	8009a64 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	88da      	ldrh	r2, [r3, #6]
 8009a4c:	897b      	ldrh	r3, [r7, #10]
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	bf28      	it	cs
 8009a52:	4613      	movcs	r3, r2
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009a58:	897b      	ldrh	r3, [r7, #10]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68f9      	ldr	r1, [r7, #12]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa1e 	bl	8009ea0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	88db      	ldrh	r3, [r3, #6]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d102      	bne.n	8009a72 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fa75 	bl	8009f5c <USBD_CtlSendStatus>
  }
}
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	889b      	ldrh	r3, [r3, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d130      	bne.n	8009aec <USBD_SetAddress+0x74>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	88db      	ldrh	r3, [r3, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d12c      	bne.n	8009aec <USBD_SetAddress+0x74>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	885b      	ldrh	r3, [r3, #2]
 8009a96:	2b7f      	cmp	r3, #127	; 0x7f
 8009a98:	d828      	bhi.n	8009aec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d104      	bne.n	8009aba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f989 	bl	8009dca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab8:	e01c      	b.n	8009af4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7bfa      	ldrb	r2, [r7, #15]
 8009abe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f002 f9fa 	bl	800bec0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fa45 	bl	8009f5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d004      	beq.n	8009ae2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ae0:	e008      	b.n	8009af4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aea:	e003      	b.n	8009af4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f96b 	bl	8009dca <USBD_CtlError>
  }
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	885b      	ldrh	r3, [r3, #2]
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	4b41      	ldr	r3, [pc, #260]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b10:	4b40      	ldr	r3, [pc, #256]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d904      	bls.n	8009b22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f955 	bl	8009dca <USBD_CtlError>
 8009b20:	e075      	b.n	8009c0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d002      	beq.n	8009b32 <USBD_SetConfig+0x36>
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d023      	beq.n	8009b78 <USBD_SetConfig+0x7c>
 8009b30:	e062      	b.n	8009bf8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009b32:	4b38      	ldr	r3, [pc, #224]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01a      	beq.n	8009b70 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009b3a:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2203      	movs	r2, #3
 8009b48:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b4c:	4b31      	ldr	r3, [pc, #196]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fa2a 	bl	8008fac <USBD_SetClassConfig>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d104      	bne.n	8009b68 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f932 	bl	8009dca <USBD_CtlError>
          return;
 8009b66:	e052      	b.n	8009c0e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9f7 	bl	8009f5c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009b6e:	e04e      	b.n	8009c0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9f3 	bl	8009f5c <USBD_CtlSendStatus>
      break;
 8009b76:	e04a      	b.n	8009c0e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b78:	4b26      	ldr	r3, [pc, #152]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d112      	bne.n	8009ba6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009b88:	4b22      	ldr	r3, [pc, #136]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b92:	4b20      	ldr	r3, [pc, #128]	; (8009c14 <USBD_SetConfig+0x118>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fa26 	bl	8008fea <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9dc 	bl	8009f5c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009ba4:	e033      	b.n	8009c0e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009ba6:	4b1b      	ldr	r3, [pc, #108]	; (8009c14 <USBD_SetConfig+0x118>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d01d      	beq.n	8009bf0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff fa14 	bl	8008fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009bc2:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <USBD_SetConfig+0x118>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009bcc:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <USBD_SetConfig+0x118>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff f9ea 	bl	8008fac <USBD_SetClassConfig>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d104      	bne.n	8009be8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f8f2 	bl	8009dca <USBD_CtlError>
          return;
 8009be6:	e012      	b.n	8009c0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f9b7 	bl	8009f5c <USBD_CtlSendStatus>
      break;
 8009bee:	e00e      	b.n	8009c0e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f9b3 	bl	8009f5c <USBD_CtlSendStatus>
      break;
 8009bf6:	e00a      	b.n	8009c0e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f8e5 	bl	8009dca <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <USBD_SetConfig+0x118>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff f9ef 	bl	8008fea <USBD_ClrClassConfig>
      break;
 8009c0c:	bf00      	nop
    }
  }
}
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	2000036c 	.word	0x2000036c

08009c18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	88db      	ldrh	r3, [r3, #6]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d004      	beq.n	8009c34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f8cc 	bl	8009dca <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009c32:	e021      	b.n	8009c78 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	db17      	blt.n	8009c6e <USBD_GetConfig+0x56>
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	dd02      	ble.n	8009c48 <USBD_GetConfig+0x30>
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d00b      	beq.n	8009c5e <USBD_GetConfig+0x46>
 8009c46:	e012      	b.n	8009c6e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3308      	adds	r3, #8
 8009c52:	2201      	movs	r2, #1
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f922 	bl	8009ea0 <USBD_CtlSendData>
      break;
 8009c5c:	e00c      	b.n	8009c78 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3304      	adds	r3, #4
 8009c62:	2201      	movs	r2, #1
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f91a 	bl	8009ea0 <USBD_CtlSendData>
      break;
 8009c6c:	e004      	b.n	8009c78 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f8aa 	bl	8009dca <USBD_CtlError>
      break;
 8009c76:	bf00      	nop
}
 8009c78:	bf00      	nop
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009c90:	3b01      	subs	r3, #1
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d81e      	bhi.n	8009cd4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	88db      	ldrh	r3, [r3, #6]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d004      	beq.n	8009ca8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f892 	bl	8009dca <USBD_CtlError>
      break;
 8009ca6:	e01a      	b.n	8009cde <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f043 0202 	orr.w	r2, r3, #2
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	330c      	adds	r3, #12
 8009cc8:	2202      	movs	r2, #2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f8e7 	bl	8009ea0 <USBD_CtlSendData>
    break;
 8009cd2:	e004      	b.n	8009cde <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f877 	bl	8009dca <USBD_CtlError>
    break;
 8009cdc:	bf00      	nop
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d106      	bne.n	8009d06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f92b 	bl	8009f5c <USBD_CtlSendStatus>
  }

}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d80b      	bhi.n	8009d3c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	885b      	ldrh	r3, [r3, #2]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d10c      	bne.n	8009d46 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f911 	bl	8009f5c <USBD_CtlSendStatus>
    }
    break;
 8009d3a:	e004      	b.n	8009d46 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f843 	bl	8009dca <USBD_CtlError>
    break;
 8009d44:	e000      	b.n	8009d48 <USBD_ClrFeature+0x3a>
    break;
 8009d46:	bf00      	nop
  }
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	785a      	ldrb	r2, [r3, #1]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	3302      	adds	r3, #2
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	3303      	adds	r3, #3
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	3305      	adds	r3, #5
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	021b      	lsls	r3, r3, #8
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4413      	add	r3, r2
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	3306      	adds	r3, #6
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	3307      	adds	r3, #7
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	021b      	lsls	r3, r3, #8
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	4413      	add	r3, r2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	80da      	strh	r2, [r3, #6]

}
 8009dbe:	bf00      	nop
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8009dd4:	2180      	movs	r1, #128	; 0x80
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f002 f808 	bl	800bdec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009ddc:	2100      	movs	r1, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f002 f804 	bl	800bdec <USBD_LL_StallEP>
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d032      	beq.n	8009e68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f834 	bl	8009e70 <USBD_GetLen>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	1c5a      	adds	r2, r3, #1
 8009e1a:	75fa      	strb	r2, [r7, #23]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	4413      	add	r3, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	7812      	ldrb	r2, [r2, #0]
 8009e26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	75fa      	strb	r2, [r7, #23]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	4413      	add	r3, r2
 8009e34:	2203      	movs	r2, #3
 8009e36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009e38:	e012      	b.n	8009e60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	60fa      	str	r2, [r7, #12]
 8009e40:	7dfa      	ldrb	r2, [r7, #23]
 8009e42:	1c51      	adds	r1, r2, #1
 8009e44:	75f9      	strb	r1, [r7, #23]
 8009e46:	4611      	mov	r1, r2
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	75fa      	strb	r2, [r7, #23]
 8009e56:	461a      	mov	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1e8      	bne.n	8009e3a <USBD_GetString+0x4e>
    }
  }
}
 8009e68:	bf00      	nop
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8009e7c:	e005      	b.n	8009e8a <USBD_GetLen+0x1a>
    {
        len++;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	3301      	adds	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
        buf++;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3301      	adds	r3, #1
 8009e88:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f5      	bne.n	8009e7e <USBD_GetLen+0xe>
    }

    return len;
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8009eb6:	88fa      	ldrh	r2, [r7, #6]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009ebc:	88fa      	ldrh	r2, [r7, #6]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009ec2:	88fb      	ldrh	r3, [r7, #6]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f002 f818 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	2100      	movs	r1, #0
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f002 f806 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8009f1a:	88fa      	ldrh	r2, [r7, #6]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	2100      	movs	r1, #0
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f002 f80b 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f001 fff9 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2204      	movs	r2, #4
 8009f68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 ffc3 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2205      	movs	r2, #5
 8009f8e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009f92:	2300      	movs	r3, #0
 8009f94:	2200      	movs	r2, #0
 8009f96:	2100      	movs	r1, #0
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 ffd3 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b087      	sub	sp, #28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009fbe:	4b1f      	ldr	r3, [pc, #124]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fc0:	7a5b      	ldrb	r3, [r3, #9]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d131      	bne.n	800a02c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009fc8:	4b1c      	ldr	r3, [pc, #112]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fca:	7a5b      	ldrb	r3, [r3, #9]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	461a      	mov	r2, r3
 8009fd0:	4b1a      	ldr	r3, [pc, #104]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009fd6:	4b19      	ldr	r3, [pc, #100]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fd8:	7a5b      	ldrb	r3, [r3, #9]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	4a17      	ldr	r2, [pc, #92]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009fe6:	4b15      	ldr	r3, [pc, #84]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009fe8:	7a5b      	ldrb	r3, [r3, #9]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	4b13      	ldr	r3, [pc, #76]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009ff0:	4413      	add	r3, r2
 8009ff2:	79fa      	ldrb	r2, [r7, #7]
 8009ff4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ff6:	4b11      	ldr	r3, [pc, #68]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 8009ff8:	7a5b      	ldrb	r3, [r3, #9]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	b2d1      	uxtb	r1, r2
 800a000:	4a0e      	ldr	r2, [pc, #56]	; (800a03c <FATFS_LinkDriverEx+0x94>)
 800a002:	7251      	strb	r1, [r2, #9]
 800a004:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a006:	7dbb      	ldrb	r3, [r7, #22]
 800a008:	3330      	adds	r3, #48	; 0x30
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	3301      	adds	r3, #1
 800a014:	223a      	movs	r2, #58	; 0x3a
 800a016:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3302      	adds	r3, #2
 800a01c:	222f      	movs	r2, #47	; 0x2f
 800a01e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	3303      	adds	r3, #3
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	20000370 	.word	0x20000370

0800a040 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a04a:	2200      	movs	r2, #0
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff ffaa 	bl	8009fa8 <FATFS_LinkDriverEx>
 800a054:	4603      	mov	r3, r0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a06a:	f000 f896 	bl	800a19a <BSP_SD_IsDetected>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b01      	cmp	r3, #1
 800a072:	d001      	beq.n	800a078 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e012      	b.n	800a09e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a078:	480b      	ldr	r0, [pc, #44]	; (800a0a8 <BSP_SD_Init+0x48>)
 800a07a:	f7f9 ff2c 	bl	8003ed6 <HAL_SD_Init>
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a08c:	4806      	ldr	r0, [pc, #24]	; (800a0a8 <BSP_SD_Init+0x48>)
 800a08e:	f7fa fd06 	bl	8004a9e <HAL_SD_ConfigWideBusOperation>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a09c:	79fb      	ldrb	r3, [r7, #7]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20002cac 	.word	0x20002cac

0800a0ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	4806      	ldr	r0, [pc, #24]	; (800a0dc <BSP_SD_ReadBlocks_DMA+0x30>)
 800a0c4:	f7f9 ff8e 	bl	8003fe4 <HAL_SD_ReadBlocks_DMA>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20002cac 	.word	0x20002cac

0800a0e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	68f9      	ldr	r1, [r7, #12]
 800a0f6:	4806      	ldr	r0, [pc, #24]	; (800a110 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a0f8:	f7fa f840 	bl	800417c <HAL_SD_WriteBlocks_DMA>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a106:	7dfb      	ldrb	r3, [r7, #23]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20002cac 	.word	0x20002cac

0800a114 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a118:	4805      	ldr	r0, [pc, #20]	; (800a130 <BSP_SD_GetCardState+0x1c>)
 800a11a:	f7fa fd3c 	bl	8004b96 <HAL_SD_GetCardState>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b04      	cmp	r3, #4
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20002cac 	.word	0x20002cac

0800a134 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	4803      	ldr	r0, [pc, #12]	; (800a14c <BSP_SD_GetCardInfo+0x18>)
 800a140:	f7fa fc81 	bl	8004a46 <HAL_SD_GetCardInfo>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20002cac 	.word	0x20002cac

0800a150 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a158:	f000 f818 	bl	800a18c <BSP_SD_AbortCallback>
}
 800a15c:	bf00      	nop
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a16c:	f000 ff8a 	bl	800b084 <BSP_SD_WriteCpltCallback>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a180:	f000 ff8c 	bl	800b09c <BSP_SD_ReadCpltCallback>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0

}
 800a190:	bf00      	nop
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a1a4:	f000 f81e 	bl	800a1e4 <BSP_PlatformIsDetected>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d101      	bne.n	800a1b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	b2db      	uxtb	r3, r3
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a1c4:	4904      	ldr	r1, [pc, #16]	; (800a1d8 <MX_FATFS_Init+0x18>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	; (800a1dc <MX_FATFS_Init+0x1c>)
 800a1c8:	f7ff ff3a 	bl	800a040 <FATFS_LinkDriver>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4b03      	ldr	r3, [pc, #12]	; (800a1e0 <MX_FATFS_Init+0x20>)
 800a1d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a1d4:	bf00      	nop
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	20000a50 	.word	0x20000a50
 800a1dc:	0800fe14 	.word	0x0800fe14
 800a1e0:	20000a4c 	.word	0x20000a4c

0800a1e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a1f2:	4806      	ldr	r0, [pc, #24]	; (800a20c <BSP_PlatformIsDetected+0x28>)
 800a1f4:	f7f7 fda0 	bl	8001d38 <HAL_GPIO_ReadPin>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a1fe:	2300      	movs	r3, #0
 800a200:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a202:	79fb      	ldrb	r3, [r7, #7]
}  
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	40020000 	.word	0x40020000

0800a210 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
 800a214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	4618      	mov	r0, r3
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 800a224:	b40f      	push	{r0, r1, r2, r3}
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
	if (usbPresent)
 800a22c:	4b31      	ldr	r3, [pc, #196]	; (800a2f4 <println+0xd0>)
 800a22e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a232:	2b03      	cmp	r3, #3
 800a234:	d155      	bne.n	800a2e2 <println+0xbe>
	{
		writePin(LEDD, HIGH);
 800a236:	2201      	movs	r2, #1
 800a238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a23c:	482e      	ldr	r0, [pc, #184]	; (800a2f8 <println+0xd4>)
 800a23e:	f7f7 fd93 	bl	8001d68 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 800a242:	f107 031c 	add.w	r3, r7, #28
 800a246:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	69b9      	ldr	r1, [r7, #24]
 800a24c:	482b      	ldr	r0, [pc, #172]	; (800a2fc <println+0xd8>)
 800a24e:	f003 fe53 	bl	800def8 <vsiprintf>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <println+0xdc>)
 800a258:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 800a25a:	4b29      	ldr	r3, [pc, #164]	; (800a300 <println+0xdc>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a27      	ldr	r2, [pc, #156]	; (800a2fc <println+0xd8>)
 800a260:	210d      	movs	r1, #13
 800a262:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800a264:	4b26      	ldr	r3, [pc, #152]	; (800a300 <println+0xdc>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3301      	adds	r3, #1
 800a26a:	4a24      	ldr	r2, [pc, #144]	; (800a2fc <println+0xd8>)
 800a26c:	210a      	movs	r1, #10
 800a26e:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800a270:	4b23      	ldr	r3, [pc, #140]	; (800a300 <println+0xdc>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3302      	adds	r3, #2
 800a276:	4a21      	ldr	r2, [pc, #132]	; (800a2fc <println+0xd8>)
 800a278:	2100      	movs	r1, #0
 800a27a:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800a27c:	4b20      	ldr	r3, [pc, #128]	; (800a300 <println+0xdc>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3303      	adds	r3, #3
 800a282:	4a1f      	ldr	r2, [pc, #124]	; (800a300 <println+0xdc>)
 800a284:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 800a286:	f7ff ffc3 	bl	800a210 <micros>
 800a28a:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 10;
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <println+0xdc>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	1c5a      	adds	r2, r3, #1
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800a29c:	e00f      	b.n	800a2be <println+0x9a>
		{
			if (micros() - printStart > timeout)
 800a29e:	f7ff ffb7 	bl	800a210 <micros>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d207      	bcs.n	800a2be <println+0x9a>
			{
				writePin(LEDD, LOW);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a2b4:	4810      	ldr	r0, [pc, #64]	; (800a2f8 <println+0xd4>)
 800a2b6:	f7f7 fd57 	bl	8001d68 <HAL_GPIO_WritePin>
				return false;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e012      	b.n	800a2e4 <println+0xc0>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <println+0xdc>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	480d      	ldr	r0, [pc, #52]	; (800a2fc <println+0xd8>)
 800a2c8:	f001 fb78 	bl	800b9bc <CDC_Transmit_FS>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d0e5      	beq.n	800a29e <println+0x7a>
			}
		}
		writePin(LEDD, LOW);
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a2d8:	4807      	ldr	r0, [pc, #28]	; (800a2f8 <println+0xd4>)
 800a2da:	f7f7 fd45 	bl	8001d68 <HAL_GPIO_WritePin>
		return true;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <println+0xc0>
	}
	return false;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2ee:	b004      	add	sp, #16
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000794 	.word	0x20000794
 800a2f8:	40020400 	.word	0x40020400
 800a2fc:	20000380 	.word	0x20000380
 800a300:	2000037c 	.word	0x2000037c
 800a304:	00000000 	.word	0x00000000

0800a308 <setup>:
uint64_t countero;
float counterino;
long long counterotoro;

static void setup(void)
{
 800a308:	b598      	push	{r3, r4, r7, lr}
 800a30a:	af00      	add	r7, sp, #0
	writePin(LEDD, HIGH);	while (readPin(BTN_USR) == HIGH);	writePin(LEDD, LOW);
 800a30c:	2201      	movs	r2, #1
 800a30e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a312:	4819      	ldr	r0, [pc, #100]	; (800a378 <setup+0x70>)
 800a314:	f7f7 fd28 	bl	8001d68 <HAL_GPIO_WritePin>
 800a318:	bf00      	nop
 800a31a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a31e:	4817      	ldr	r0, [pc, #92]	; (800a37c <setup+0x74>)
 800a320:	f7f7 fd0a 	bl	8001d38 <HAL_GPIO_ReadPin>
 800a324:	4603      	mov	r3, r0
 800a326:	2b01      	cmp	r3, #1
 800a328:	d0f7      	beq.n	800a31a <setup+0x12>
 800a32a:	2200      	movs	r2, #0
 800a32c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a330:	4811      	ldr	r0, [pc, #68]	; (800a378 <setup+0x70>)
 800a332:	f7f7 fd19 	bl	8001d68 <HAL_GPIO_WritePin>
	println("Hello world");
 800a336:	4812      	ldr	r0, [pc, #72]	; (800a380 <setup+0x78>)
 800a338:	f7ff ff74 	bl	800a224 <println>
	counter = -20;
 800a33c:	4b11      	ldr	r3, [pc, #68]	; (800a384 <setup+0x7c>)
 800a33e:	f06f 0213 	mvn.w	r2, #19
 800a342:	601a      	str	r2, [r3, #0]
	countero = 24912912;
 800a344:	4a10      	ldr	r2, [pc, #64]	; (800a388 <setup+0x80>)
 800a346:	a408      	add	r4, pc, #32	; (adr r4, 800a368 <setup+0x60>)
 800a348:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a34c:	e9c2 3400 	strd	r3, r4, [r2]
	counterino = 10293.1203;
 800a350:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <setup+0x84>)
 800a352:	4a0f      	ldr	r2, [pc, #60]	; (800a390 <setup+0x88>)
 800a354:	601a      	str	r2, [r3, #0]
	counterotoro = 55556666;
 800a356:	4a0f      	ldr	r2, [pc, #60]	; (800a394 <setup+0x8c>)
 800a358:	a405      	add	r4, pc, #20	; (adr r4, 800a370 <setup+0x68>)
 800a35a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a35e:	e9c2 3400 	strd	r3, r4, [r2]
}
 800a362:	bf00      	nop
 800a364:	bd98      	pop	{r3, r4, r7, pc}
 800a366:	bf00      	nop
 800a368:	017c2410 	.word	0x017c2410
 800a36c:	00000000 	.word	0x00000000
 800a370:	034fba3a 	.word	0x034fba3a
 800a374:	00000000 	.word	0x00000000
 800a378:	40020400 	.word	0x40020400
 800a37c:	40020000 	.word	0x40020000
 800a380:	0800fdb8 	.word	0x0800fdb8
 800a384:	20000a30 	.word	0x20000a30
 800a388:	20000a40 	.word	0x20000a40
 800a38c:	20000a34 	.word	0x20000a34
 800a390:	4620d47b 	.word	0x4620d47b
 800a394:	20000a38 	.word	0x20000a38

0800a398 <loop>:

static void loop(void)
{
 800a398:	b598      	push	{r3, r4, r7, lr}
 800a39a:	af00      	add	r7, sp, #0
	togglePin(LEDA);
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	4817      	ldr	r0, [pc, #92]	; (800a3fc <loop+0x64>)
 800a3a0:	f7f7 fcfb 	bl	8001d9a <HAL_GPIO_TogglePin>
	println("%d", counter);
 800a3a4:	4b16      	ldr	r3, [pc, #88]	; (800a400 <loop+0x68>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4816      	ldr	r0, [pc, #88]	; (800a404 <loop+0x6c>)
 800a3ac:	f7ff ff3a 	bl	800a224 <println>
	println("%lu", countero);
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <loop+0x70>)
 800a3b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	4814      	ldr	r0, [pc, #80]	; (800a40c <loop+0x74>)
 800a3bc:	f7ff ff32 	bl	800a224 <println>
	println("%f", counterino);
 800a3c0:	4b13      	ldr	r3, [pc, #76]	; (800a410 <loop+0x78>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f6 f8bf 	bl	8000548 <__aeabi_f2d>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	4810      	ldr	r0, [pc, #64]	; (800a414 <loop+0x7c>)
 800a3d4:	f7ff ff26 	bl	800a224 <println>
	println("%f", counterino);
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <loop+0x78>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f6 f8b3 	bl	8000548 <__aeabi_f2d>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	480a      	ldr	r0, [pc, #40]	; (800a414 <loop+0x7c>)
 800a3ec:	f7ff ff1a 	bl	800a224 <println>
	delay(1000);
 800a3f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a3f4:	f7f6 fe3a 	bl	800106c <HAL_Delay>
}
 800a3f8:	bf00      	nop
 800a3fa:	bd98      	pop	{r3, r4, r7, pc}
 800a3fc:	40020800 	.word	0x40020800
 800a400:	20000a30 	.word	0x20000a30
 800a404:	0800fdc4 	.word	0x0800fdc4
 800a408:	20000a40 	.word	0x20000a40
 800a40c:	0800fdc8 	.word	0x0800fdc8
 800a410:	20000a34 	.word	0x20000a34
 800a414:	0800fdcc 	.word	0x0800fdcc

0800a418 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
	//GPS_read(&gps);
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a430:	f7f6 fdaa 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a434:	f000 f862 	bl	800a4fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a438:	f000 fb32 	bl	800aaa0 <MX_GPIO_Init>
  MX_DMA_Init();
 800a43c:	f000 fb08 	bl	800aa50 <MX_DMA_Init>
  MX_I2C1_Init();
 800a440:	f000 f8de 	bl	800a600 <MX_I2C1_Init>
  MX_RTC_Init();
 800a444:	f000 f90a 	bl	800a65c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800a448:	f000 f92e 	bl	800a6a8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800a44c:	f000 f94c 	bl	800a6e8 <MX_SPI1_Init>
  MX_TIM2_Init();
 800a450:	f000 f980 	bl	800a754 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a454:	f000 f9cc 	bl	800a7f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800a458:	f000 fa4c 	bl	800a8f4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800a45c:	f000 face 	bl	800a9fc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800a460:	f7ff feae 	bl	800a1c0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800a464:	f001 f9b4 	bl	800b7d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800a468:	4820      	ldr	r0, [pc, #128]	; (800a4ec <main+0xc0>)
 800a46a:	f7fb f8a1 	bl	80055b0 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800a46e:	2200      	movs	r2, #0
 800a470:	2180      	movs	r1, #128	; 0x80
 800a472:	481f      	ldr	r0, [pc, #124]	; (800a4f0 <main+0xc4>)
 800a474:	f7f7 fc78 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800a478:	2200      	movs	r2, #0
 800a47a:	2140      	movs	r1, #64	; 0x40
 800a47c:	481c      	ldr	r0, [pc, #112]	; (800a4f0 <main+0xc4>)
 800a47e:	f7f7 fc73 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800a482:	2200      	movs	r2, #0
 800a484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a488:	481a      	ldr	r0, [pc, #104]	; (800a4f4 <main+0xc8>)
 800a48a:	f7f7 fc6d 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800a48e:	2200      	movs	r2, #0
 800a490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a494:	4817      	ldr	r0, [pc, #92]	; (800a4f4 <main+0xc8>)
 800a496:	f7f7 fc67 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800a49a:	2200      	movs	r2, #0
 800a49c:	2101      	movs	r1, #1
 800a49e:	4816      	ldr	r0, [pc, #88]	; (800a4f8 <main+0xcc>)
 800a4a0:	f7f7 fc62 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2104      	movs	r1, #4
 800a4a8:	4813      	ldr	r0, [pc, #76]	; (800a4f8 <main+0xcc>)
 800a4aa:	f7f7 fc5d 	bl	8001d68 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	480f      	ldr	r0, [pc, #60]	; (800a4f0 <main+0xc4>)
 800a4b4:	f7f7 fc58 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	480c      	ldr	r0, [pc, #48]	; (800a4f0 <main+0xc4>)
 800a4be:	f7f7 fc53 	bl	8001d68 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2102      	movs	r1, #2
 800a4c6:	480a      	ldr	r0, [pc, #40]	; (800a4f0 <main+0xc4>)
 800a4c8:	f7f7 fc4e 	bl	8001d68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	2108      	movs	r1, #8
 800a4d0:	4807      	ldr	r0, [pc, #28]	; (800a4f0 <main+0xc4>)
 800a4d2:	f7f7 fc49 	bl	8001d68 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2110      	movs	r1, #16
 800a4da:	4807      	ldr	r0, [pc, #28]	; (800a4f8 <main+0xcc>)
 800a4dc:	f7f7 fc44 	bl	8001d68 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800a4e0:	f7ff ff12 	bl	800a308 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800a4e4:	f7ff ff58 	bl	800a398 <loop>
 800a4e8:	e7fc      	b.n	800a4e4 <main+0xb8>
 800a4ea:	bf00      	nop
 800a4ec:	20002d88 	.word	0x20002d88
 800a4f0:	40020800 	.word	0x40020800
 800a4f4:	40020400 	.word	0x40020400
 800a4f8:	40020000 	.word	0x40020000

0800a4fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b098      	sub	sp, #96	; 0x60
 800a500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a506:	2230      	movs	r2, #48	; 0x30
 800a508:	2100      	movs	r1, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 fef9 	bl	800c302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a510:	f107 031c 	add.w	r3, r7, #28
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	609a      	str	r2, [r3, #8]
 800a51c:	60da      	str	r2, [r3, #12]
 800a51e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a520:	f107 030c 	add.w	r3, r7, #12
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	605a      	str	r2, [r3, #4]
 800a52a:	609a      	str	r2, [r3, #8]
 800a52c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
 800a532:	4b31      	ldr	r3, [pc, #196]	; (800a5f8 <SystemClock_Config+0xfc>)
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	4a30      	ldr	r2, [pc, #192]	; (800a5f8 <SystemClock_Config+0xfc>)
 800a538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a53c:	6413      	str	r3, [r2, #64]	; 0x40
 800a53e:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <SystemClock_Config+0xfc>)
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a546:	60bb      	str	r3, [r7, #8]
 800a548:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a54a:	2300      	movs	r3, #0
 800a54c:	607b      	str	r3, [r7, #4]
 800a54e:	4b2b      	ldr	r3, [pc, #172]	; (800a5fc <SystemClock_Config+0x100>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a2a      	ldr	r2, [pc, #168]	; (800a5fc <SystemClock_Config+0x100>)
 800a554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	4b28      	ldr	r3, [pc, #160]	; (800a5fc <SystemClock_Config+0x100>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a562:	607b      	str	r3, [r7, #4]
 800a564:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a566:	2305      	movs	r3, #5
 800a568:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a56a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a570:	2301      	movs	r3, #1
 800a572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a574:	2302      	movs	r3, #2
 800a576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a57c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800a57e:	2306      	movs	r3, #6
 800a580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a582:	23a8      	movs	r3, #168	; 0xa8
 800a584:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a586:	2302      	movs	r3, #2
 800a588:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a58a:	2307      	movs	r3, #7
 800a58c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a58e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a592:	4618      	mov	r0, r3
 800a594:	f7f8 fece 	bl	8003334 <HAL_RCC_OscConfig>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a59e:	f000 fb5d 	bl	800ac5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a5a2:	230f      	movs	r3, #15
 800a5a4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a5ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a5b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a5b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a5ba:	f107 031c 	add.w	r3, r7, #28
 800a5be:	2105      	movs	r1, #5
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f9 f8f9 	bl	80037b8 <HAL_RCC_ClockConfig>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a5cc:	f000 fb46 	bl	800ac5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5da:	f107 030c 	add.w	r3, r7, #12
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f9 fab2 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a5ea:	f000 fb37 	bl	800ac5c <Error_Handler>
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	3760      	adds	r7, #96	; 0x60
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40023800 	.word	0x40023800
 800a5fc:	40007000 	.word	0x40007000

0800a600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a604:	4b12      	ldr	r3, [pc, #72]	; (800a650 <MX_I2C1_Init+0x50>)
 800a606:	4a13      	ldr	r2, [pc, #76]	; (800a654 <MX_I2C1_Init+0x54>)
 800a608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <MX_I2C1_Init+0x50>)
 800a60c:	4a12      	ldr	r2, [pc, #72]	; (800a658 <MX_I2C1_Init+0x58>)
 800a60e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a610:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <MX_I2C1_Init+0x50>)
 800a612:	2200      	movs	r2, #0
 800a614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a616:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <MX_I2C1_Init+0x50>)
 800a618:	2200      	movs	r2, #0
 800a61a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a61c:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <MX_I2C1_Init+0x50>)
 800a61e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a624:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <MX_I2C1_Init+0x50>)
 800a626:	2200      	movs	r2, #0
 800a628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <MX_I2C1_Init+0x50>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <MX_I2C1_Init+0x50>)
 800a632:	2200      	movs	r2, #0
 800a634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a636:	4b06      	ldr	r3, [pc, #24]	; (800a650 <MX_I2C1_Init+0x50>)
 800a638:	2200      	movs	r2, #0
 800a63a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a63c:	4804      	ldr	r0, [pc, #16]	; (800a650 <MX_I2C1_Init+0x50>)
 800a63e:	f7f7 fbc7 	bl	8001dd0 <HAL_I2C_Init>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a648:	f000 fb08 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a64c:	bf00      	nop
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20002b58 	.word	0x20002b58
 800a654:	40005400 	.word	0x40005400
 800a658:	00061a80 	.word	0x00061a80

0800a65c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a660:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a662:	4a10      	ldr	r2, [pc, #64]	; (800a6a4 <MX_RTC_Init+0x48>)
 800a664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a666:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a668:	2200      	movs	r2, #0
 800a66a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a66e:	227f      	movs	r2, #127	; 0x7f
 800a670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a672:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a674:	22ff      	movs	r2, #255	; 0xff
 800a676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a678:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a67e:	4b08      	ldr	r3, [pc, #32]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a680:	2200      	movs	r2, #0
 800a682:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a686:	2200      	movs	r2, #0
 800a688:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <MX_RTC_Init+0x44>)
 800a68c:	f7f9 fb3e 	bl	8003d0c <HAL_RTC_Init>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a696:	f000 fae1 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a69a:	bf00      	nop
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20002c2c 	.word	0x20002c2c
 800a6a4:	40002800 	.word	0x40002800

0800a6a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6ae:	4a0d      	ldr	r2, [pc, #52]	; (800a6e4 <MX_SDIO_SD_Init+0x3c>)
 800a6b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a6b8:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a6be:	4b08      	ldr	r3, [pc, #32]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a6c4:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a6ca:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a6d0:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <MX_SDIO_SD_Init+0x38>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a6d6:	bf00      	nop
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	20002cac 	.word	0x20002cac
 800a6e4:	40012c00 	.word	0x40012c00

0800a6e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a6ec:	4b17      	ldr	r3, [pc, #92]	; (800a74c <MX_SPI1_Init+0x64>)
 800a6ee:	4a18      	ldr	r2, [pc, #96]	; (800a750 <MX_SPI1_Init+0x68>)
 800a6f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a6f2:	4b16      	ldr	r3, [pc, #88]	; (800a74c <MX_SPI1_Init+0x64>)
 800a6f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a6f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a6fa:	4b14      	ldr	r3, [pc, #80]	; (800a74c <MX_SPI1_Init+0x64>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a700:	4b12      	ldr	r3, [pc, #72]	; (800a74c <MX_SPI1_Init+0x64>)
 800a702:	2200      	movs	r2, #0
 800a704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a706:	4b11      	ldr	r3, [pc, #68]	; (800a74c <MX_SPI1_Init+0x64>)
 800a708:	2200      	movs	r2, #0
 800a70a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a70c:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <MX_SPI1_Init+0x64>)
 800a70e:	2200      	movs	r2, #0
 800a710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a712:	4b0e      	ldr	r3, [pc, #56]	; (800a74c <MX_SPI1_Init+0x64>)
 800a714:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a71a:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <MX_SPI1_Init+0x64>)
 800a71c:	2218      	movs	r2, #24
 800a71e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a720:	4b0a      	ldr	r3, [pc, #40]	; (800a74c <MX_SPI1_Init+0x64>)
 800a722:	2200      	movs	r2, #0
 800a724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a726:	4b09      	ldr	r3, [pc, #36]	; (800a74c <MX_SPI1_Init+0x64>)
 800a728:	2200      	movs	r2, #0
 800a72a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <MX_SPI1_Init+0x64>)
 800a72e:	2200      	movs	r2, #0
 800a730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a732:	4b06      	ldr	r3, [pc, #24]	; (800a74c <MX_SPI1_Init+0x64>)
 800a734:	220a      	movs	r2, #10
 800a736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a738:	4804      	ldr	r0, [pc, #16]	; (800a74c <MX_SPI1_Init+0x64>)
 800a73a:	f7fa feaa 	bl	8005492 <HAL_SPI_Init>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a744:	f000 fa8a 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a748:	bf00      	nop
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20002d30 	.word	0x20002d30
 800a750:	40013000 	.word	0x40013000

0800a754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a75a:	f107 0308 	add.w	r3, r7, #8
 800a75e:	2200      	movs	r2, #0
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	609a      	str	r2, [r3, #8]
 800a766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a768:	463b      	mov	r3, r7
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a770:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800a778:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a77a:	2253      	movs	r2, #83	; 0x53
 800a77c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a77e:	4b1a      	ldr	r3, [pc, #104]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a780:	2200      	movs	r2, #0
 800a782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800a784:	4b18      	ldr	r3, [pc, #96]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a786:	4a19      	ldr	r2, [pc, #100]	; (800a7ec <MX_TIM2_Init+0x98>)
 800a788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a78a:	4b17      	ldr	r3, [pc, #92]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a790:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a792:	2200      	movs	r2, #0
 800a794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a796:	4814      	ldr	r0, [pc, #80]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a798:	f7fa fedf 	bl	800555a <HAL_TIM_Base_Init>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800a7a2:	f000 fa5b 	bl	800ac5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a7ac:	f107 0308 	add.w	r3, r7, #8
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	480d      	ldr	r0, [pc, #52]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a7b4:	f7fb f81c 	bl	80057f0 <HAL_TIM_ConfigClockSource>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800a7be:	f000 fa4d 	bl	800ac5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4806      	ldr	r0, [pc, #24]	; (800a7e8 <MX_TIM2_Init+0x94>)
 800a7d0:	f7fb fbb0 	bl	8005f34 <HAL_TIMEx_MasterConfigSynchronization>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d001      	beq.n	800a7de <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800a7da:	f000 fa3f 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20002d88 	.word	0x20002d88
 800a7ec:	fa56ea00 	.word	0xfa56ea00

0800a7f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08e      	sub	sp, #56	; 0x38
 800a7f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
 800a800:	609a      	str	r2, [r3, #8]
 800a802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a804:	f107 0320 	add.w	r3, r7, #32
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a80e:	1d3b      	adds	r3, r7, #4
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	609a      	str	r2, [r3, #8]
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	611a      	str	r2, [r3, #16]
 800a81c:	615a      	str	r2, [r3, #20]
 800a81e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a820:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a822:	4a33      	ldr	r2, [pc, #204]	; (800a8f0 <MX_TIM3_Init+0x100>)
 800a824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800a826:	4b31      	ldr	r3, [pc, #196]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a828:	22a7      	movs	r2, #167	; 0xa7
 800a82a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a82c:	4b2f      	ldr	r3, [pc, #188]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a82e:	2200      	movs	r2, #0
 800a830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800a832:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a834:	f242 7210 	movw	r2, #10000	; 0x2710
 800a838:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a83a:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a840:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a842:	2200      	movs	r2, #0
 800a844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a846:	4829      	ldr	r0, [pc, #164]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a848:	f7fa fe87 	bl	800555a <HAL_TIM_Base_Init>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800a852:	f000 fa03 	bl	800ac5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a85a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a85c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a860:	4619      	mov	r1, r3
 800a862:	4822      	ldr	r0, [pc, #136]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a864:	f7fa ffc4 	bl	80057f0 <HAL_TIM_ConfigClockSource>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a86e:	f000 f9f5 	bl	800ac5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a872:	481e      	ldr	r0, [pc, #120]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a874:	f7fa fec0 	bl	80055f8 <HAL_TIM_PWM_Init>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a87e:	f000 f9ed 	bl	800ac5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a882:	2300      	movs	r3, #0
 800a884:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a886:	2300      	movs	r3, #0
 800a888:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a88a:	f107 0320 	add.w	r3, r7, #32
 800a88e:	4619      	mov	r1, r3
 800a890:	4816      	ldr	r0, [pc, #88]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a892:	f7fb fb4f 	bl	8005f34 <HAL_TIMEx_MasterConfigSynchronization>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800a89c:	f000 f9de 	bl	800ac5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a8a0:	2360      	movs	r3, #96	; 0x60
 800a8a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800a8a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a8a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a8b2:	1d3b      	adds	r3, r7, #4
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	480c      	ldr	r0, [pc, #48]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a8ba:	f7fa fed3 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800a8c4:	f000 f9ca 	bl	800ac5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a8c8:	1d3b      	adds	r3, r7, #4
 800a8ca:	220c      	movs	r2, #12
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4807      	ldr	r0, [pc, #28]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a8d0:	f7fa fec8 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800a8da:	f000 f9bf 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a8de:	4803      	ldr	r0, [pc, #12]	; (800a8ec <MX_TIM3_Init+0xfc>)
 800a8e0:	f000 fe02 	bl	800b4e8 <HAL_TIM_MspPostInit>

}
 800a8e4:	bf00      	nop
 800a8e6:	3738      	adds	r7, #56	; 0x38
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20002bec 	.word	0x20002bec
 800a8f0:	40000400 	.word	0x40000400

0800a8f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08e      	sub	sp, #56	; 0x38
 800a8f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	605a      	str	r2, [r3, #4]
 800a904:	609a      	str	r2, [r3, #8]
 800a906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a908:	f107 0320 	add.w	r3, r7, #32
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a912:	1d3b      	adds	r3, r7, #4
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	609a      	str	r2, [r3, #8]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	611a      	str	r2, [r3, #16]
 800a920:	615a      	str	r2, [r3, #20]
 800a922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a924:	4b33      	ldr	r3, [pc, #204]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a926:	4a34      	ldr	r2, [pc, #208]	; (800a9f8 <MX_TIM5_Init+0x104>)
 800a928:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800a92a:	4b32      	ldr	r3, [pc, #200]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a930:	4b30      	ldr	r3, [pc, #192]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a932:	2200      	movs	r2, #0
 800a934:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800a936:	4b2f      	ldr	r3, [pc, #188]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a93c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a93e:	4b2d      	ldr	r3, [pc, #180]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a940:	2200      	movs	r2, #0
 800a942:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a944:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a946:	2200      	movs	r2, #0
 800a948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a94a:	482a      	ldr	r0, [pc, #168]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a94c:	f7fa fe05 	bl	800555a <HAL_TIM_Base_Init>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a956:	f000 f981 	bl	800ac5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a95a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a964:	4619      	mov	r1, r3
 800a966:	4823      	ldr	r0, [pc, #140]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a968:	f7fa ff42 	bl	80057f0 <HAL_TIM_ConfigClockSource>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a972:	f000 f973 	bl	800ac5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a976:	481f      	ldr	r0, [pc, #124]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a978:	f7fa fe3e 	bl	80055f8 <HAL_TIM_PWM_Init>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a982:	f000 f96b 	bl	800ac5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a986:	2300      	movs	r3, #0
 800a988:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a98e:	f107 0320 	add.w	r3, r7, #32
 800a992:	4619      	mov	r1, r3
 800a994:	4817      	ldr	r0, [pc, #92]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a996:	f7fb facd 	bl	8005f34 <HAL_TIMEx_MasterConfigSynchronization>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a9a0:	f000 f95c 	bl	800ac5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800a9a4:	2370      	movs	r3, #112	; 0x70
 800a9a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800a9a8:	2364      	movs	r3, #100	; 0x64
 800a9aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a9b4:	1d3b      	adds	r3, r7, #4
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	480e      	ldr	r0, [pc, #56]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a9bc:	f7fa fe52 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a9c6:	f000 f949 	bl	800ac5c <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800a9ca:	2304      	movs	r3, #4
 800a9cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	220c      	movs	r2, #12
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4807      	ldr	r0, [pc, #28]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a9d6:	f7fa fe45 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800a9e0:	f000 f93c 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a9e4:	4803      	ldr	r0, [pc, #12]	; (800a9f4 <MX_TIM5_Init+0x100>)
 800a9e6:	f000 fd7f 	bl	800b4e8 <HAL_TIM_MspPostInit>

}
 800a9ea:	bf00      	nop
 800a9ec:	3738      	adds	r7, #56	; 0x38
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20002bac 	.word	0x20002bac
 800a9f8:	40000c00 	.word	0x40000c00

0800a9fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800aa00:	4b11      	ldr	r3, [pc, #68]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa02:	4a12      	ldr	r2, [pc, #72]	; (800aa4c <MX_USART3_UART_Init+0x50>)
 800aa04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800aa06:	4b10      	ldr	r3, [pc, #64]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800aa0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800aa0e:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aa14:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aa1a:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa22:	220c      	movs	r2, #12
 800aa24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa26:	4b08      	ldr	r3, [pc, #32]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa2c:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aa32:	4805      	ldr	r0, [pc, #20]	; (800aa48 <MX_USART3_UART_Init+0x4c>)
 800aa34:	f7fb fac3 	bl	8005fbe <HAL_UART_Init>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800aa3e:	f000 f90d 	bl	800ac5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20002b18 	.word	0x20002b18
 800aa4c:	40004800 	.word	0x40004800

0800aa50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800aa56:	2300      	movs	r3, #0
 800aa58:	607b      	str	r3, [r7, #4]
 800aa5a:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <MX_DMA_Init+0x4c>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5e:	4a0f      	ldr	r2, [pc, #60]	; (800aa9c <MX_DMA_Init+0x4c>)
 800aa60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800aa64:	6313      	str	r3, [r2, #48]	; 0x30
 800aa66:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <MX_DMA_Init+0x4c>)
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa6e:	607b      	str	r3, [r7, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800aa72:	2200      	movs	r2, #0
 800aa74:	2100      	movs	r1, #0
 800aa76:	203b      	movs	r0, #59	; 0x3b
 800aa78:	f7f6 fbf5 	bl	8001266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800aa7c:	203b      	movs	r0, #59	; 0x3b
 800aa7e:	f7f6 fc0e 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800aa82:	2200      	movs	r2, #0
 800aa84:	2100      	movs	r1, #0
 800aa86:	2045      	movs	r0, #69	; 0x45
 800aa88:	f7f6 fbed 	bl	8001266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800aa8c:	2045      	movs	r0, #69	; 0x45
 800aa8e:	f7f6 fc06 	bl	800129e <HAL_NVIC_EnableIRQ>

}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40023800 	.word	0x40023800

0800aaa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b08a      	sub	sp, #40	; 0x28
 800aaa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaa6:	f107 0314 	add.w	r3, r7, #20
 800aaaa:	2200      	movs	r2, #0
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	605a      	str	r2, [r3, #4]
 800aab0:	609a      	str	r2, [r3, #8]
 800aab2:	60da      	str	r2, [r3, #12]
 800aab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aab6:	2300      	movs	r3, #0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	4b63      	ldr	r3, [pc, #396]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabe:	4a62      	ldr	r2, [pc, #392]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	6313      	str	r3, [r2, #48]	; 0x30
 800aac6:	4b60      	ldr	r3, [pc, #384]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	613b      	str	r3, [r7, #16]
 800aad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
 800aad6:	4b5c      	ldr	r3, [pc, #368]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	4a5b      	ldr	r2, [pc, #364]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aadc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae0:	6313      	str	r3, [r2, #48]	; 0x30
 800aae2:	4b59      	ldr	r3, [pc, #356]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	4b55      	ldr	r3, [pc, #340]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf6:	4a54      	ldr	r2, [pc, #336]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800aaf8:	f043 0301 	orr.w	r3, r3, #1
 800aafc:	6313      	str	r3, [r2, #48]	; 0x30
 800aafe:	4b52      	ldr	r3, [pc, #328]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	607b      	str	r3, [r7, #4]
 800ab0e:	4b4e      	ldr	r3, [pc, #312]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab12:	4a4d      	ldr	r2, [pc, #308]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab14:	f043 0302 	orr.w	r3, r3, #2
 800ab18:	6313      	str	r3, [r2, #48]	; 0x30
 800ab1a:	4b4b      	ldr	r3, [pc, #300]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab26:	2300      	movs	r3, #0
 800ab28:	603b      	str	r3, [r7, #0]
 800ab2a:	4b47      	ldr	r3, [pc, #284]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2e:	4a46      	ldr	r2, [pc, #280]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab30:	f043 0308 	orr.w	r3, r3, #8
 800ab34:	6313      	str	r3, [r2, #48]	; 0x30
 800ab36:	4b44      	ldr	r3, [pc, #272]	; (800ac48 <MX_GPIO_Init+0x1a8>)
 800ab38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3a:	f003 0308 	and.w	r3, r3, #8
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800ab42:	2200      	movs	r2, #0
 800ab44:	21ef      	movs	r1, #239	; 0xef
 800ab46:	4841      	ldr	r0, [pc, #260]	; (800ac4c <MX_GPIO_Init+0x1ac>)
 800ab48:	f7f7 f90e 	bl	8001d68 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2115      	movs	r1, #21
 800ab50:	483f      	ldr	r0, [pc, #252]	; (800ac50 <MX_GPIO_Init+0x1b0>)
 800ab52:	f7f7 f909 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800ab56:	2200      	movs	r2, #0
 800ab58:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800ab5c:	483d      	ldr	r0, [pc, #244]	; (800ac54 <MX_GPIO_Init+0x1b4>)
 800ab5e:	f7f7 f903 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800ab62:	23cf      	movs	r3, #207	; 0xcf
 800ab64:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab66:	2301      	movs	r3, #1
 800ab68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab72:	f107 0314 	add.w	r3, r7, #20
 800ab76:	4619      	mov	r1, r3
 800ab78:	4834      	ldr	r0, [pc, #208]	; (800ac4c <MX_GPIO_Init+0x1ac>)
 800ab7a:	f7f6 ff43 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800ab7e:	2305      	movs	r3, #5
 800ab80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab82:	2301      	movs	r3, #1
 800ab84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ab86:	2302      	movs	r3, #2
 800ab88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab8e:	f107 0314 	add.w	r3, r7, #20
 800ab92:	4619      	mov	r1, r3
 800ab94:	482e      	ldr	r0, [pc, #184]	; (800ac50 <MX_GPIO_Init+0x1b0>)
 800ab96:	f7f6 ff35 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aba6:	2300      	movs	r3, #0
 800aba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800abaa:	f107 0314 	add.w	r3, r7, #20
 800abae:	4619      	mov	r1, r3
 800abb0:	4827      	ldr	r0, [pc, #156]	; (800ac50 <MX_GPIO_Init+0x1b0>)
 800abb2:	f7f6 ff27 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800abb6:	23c0      	movs	r3, #192	; 0xc0
 800abb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800abba:	4b27      	ldr	r3, [pc, #156]	; (800ac58 <MX_GPIO_Init+0x1b8>)
 800abbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abc2:	f107 0314 	add.w	r3, r7, #20
 800abc6:	4619      	mov	r1, r3
 800abc8:	4821      	ldr	r0, [pc, #132]	; (800ac50 <MX_GPIO_Init+0x1b0>)
 800abca:	f7f6 ff1b 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800abce:	2320      	movs	r3, #32
 800abd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abd2:	2301      	movs	r3, #1
 800abd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800abd6:	2302      	movs	r3, #2
 800abd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abda:	2300      	movs	r3, #0
 800abdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800abde:	f107 0314 	add.w	r3, r7, #20
 800abe2:	4619      	mov	r1, r3
 800abe4:	4819      	ldr	r0, [pc, #100]	; (800ac4c <MX_GPIO_Init+0x1ac>)
 800abe6:	f7f6 ff0d 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800abea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800abee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abf0:	2301      	movs	r3, #1
 800abf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf8:	2300      	movs	r3, #0
 800abfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abfc:	f107 0314 	add.w	r3, r7, #20
 800ac00:	4619      	mov	r1, r3
 800ac02:	4814      	ldr	r0, [pc, #80]	; (800ac54 <MX_GPIO_Init+0x1b4>)
 800ac04:	f7f6 fefe 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800ac08:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800ac0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac12:	2301      	movs	r3, #1
 800ac14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac16:	f107 0314 	add.w	r3, r7, #20
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	480c      	ldr	r0, [pc, #48]	; (800ac50 <MX_GPIO_Init+0x1b0>)
 800ac1e:	f7f6 fef1 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800ac22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac30:	2300      	movs	r3, #0
 800ac32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4806      	ldr	r0, [pc, #24]	; (800ac54 <MX_GPIO_Init+0x1b4>)
 800ac3c:	f7f6 fee2 	bl	8001a04 <HAL_GPIO_Init>

}
 800ac40:	bf00      	nop
 800ac42:	3728      	adds	r7, #40	; 0x28
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	40023800 	.word	0x40023800
 800ac4c:	40020800 	.word	0x40020800
 800ac50:	40020000 	.word	0x40020000
 800ac54:	40020400 	.word	0x40020400
 800ac58:	10110000 	.word	0x10110000

0800ac5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ac60:	bf00      	nop
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ac72:	f7f6 f9ef 	bl	8001054 <HAL_GetTick>
 800ac76:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ac78:	e006      	b.n	800ac88 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac7a:	f7ff fa4b 	bl	800a114 <BSP_SD_GetCardState>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e009      	b.n	800ac9c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ac88:	f7f6 f9e4 	bl	8001054 <HAL_GetTick>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d8f0      	bhi.n	800ac7a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <SD_CheckStatus+0x38>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800acb4:	f7ff fa2e 	bl	800a114 <BSP_SD_GetCardState>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d107      	bne.n	800acce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <SD_CheckStatus+0x38>)
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f023 0301 	bic.w	r3, r3, #1
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	4b04      	ldr	r3, [pc, #16]	; (800acdc <SD_CheckStatus+0x38>)
 800accc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acce:	4b03      	ldr	r3, [pc, #12]	; (800acdc <SD_CheckStatus+0x38>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b2db      	uxtb	r3, r3
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	20000117 	.word	0x20000117

0800ace0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800acea:	f7ff f9b9 	bl	800a060 <BSP_SD_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d107      	bne.n	800ad04 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff ffd4 	bl	800aca4 <SD_CheckStatus>
 800acfc:	4603      	mov	r3, r0
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <SD_initialize+0x34>)
 800ad02:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800ad04:	4b03      	ldr	r3, [pc, #12]	; (800ad14 <SD_initialize+0x34>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	b2db      	uxtb	r3, r3
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20000117 	.word	0x20000117

0800ad18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7ff ffbd 	bl	800aca4 <SD_CheckStatus>
 800ad2a:	4603      	mov	r3, r0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b088      	sub	sp, #32
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
 800ad3e:	603b      	str	r3, [r7, #0]
 800ad40:	4603      	mov	r3, r0
 800ad42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad48:	f247 5030 	movw	r0, #30000	; 0x7530
 800ad4c:	f7ff ff8d 	bl	800ac6a <SD_CheckStatusWithTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da01      	bge.n	800ad5a <SD_read+0x26>
  {
    return res;
 800ad56:	7ffb      	ldrb	r3, [r7, #31]
 800ad58:	e08b      	b.n	800ae72 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f003 0303 	and.w	r3, r3, #3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f040 8085 	bne.w	800ae70 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	68b8      	ldr	r0, [r7, #8]
 800ad6c:	f7ff f99e 	bl	800a0ac <BSP_SD_ReadBlocks_DMA>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d133      	bne.n	800adde <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ad76:	4b41      	ldr	r3, [pc, #260]	; (800ae7c <SD_read+0x148>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ad7c:	f7f6 f96a 	bl	8001054 <HAL_GetTick>
 800ad80:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ad82:	bf00      	nop
 800ad84:	4b3d      	ldr	r3, [pc, #244]	; (800ae7c <SD_read+0x148>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d108      	bne.n	800ad9e <SD_read+0x6a>
 800ad8c:	f7f6 f962 	bl	8001054 <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	f247 522f 	movw	r2, #29999	; 0x752f
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d9f2      	bls.n	800ad84 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ad9e:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <SD_read+0x148>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <SD_read+0x78>
      {
        res = RES_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e061      	b.n	800ae70 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800adac:	4b33      	ldr	r3, [pc, #204]	; (800ae7c <SD_read+0x148>)
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800adb2:	f7f6 f94f 	bl	8001054 <HAL_GetTick>
 800adb6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800adb8:	e007      	b.n	800adca <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adba:	f7ff f9ab 	bl	800a114 <BSP_SD_GetCardState>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <SD_read+0x96>
          {
            res = RES_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800adc8:	e052      	b.n	800ae70 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800adca:	f7f6 f943 	bl	8001054 <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	f247 522f 	movw	r2, #29999	; 0x752f
 800add8:	4293      	cmp	r3, r2
 800adda:	d9ee      	bls.n	800adba <SD_read+0x86>
 800addc:	e048      	b.n	800ae70 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800adde:	2300      	movs	r3, #0
 800ade0:	61bb      	str	r3, [r7, #24]
 800ade2:	e034      	b.n	800ae4e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	607a      	str	r2, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	4619      	mov	r1, r3
 800adee:	4824      	ldr	r0, [pc, #144]	; (800ae80 <SD_read+0x14c>)
 800adf0:	f7ff f95c 	bl	800a0ac <BSP_SD_ReadBlocks_DMA>
 800adf4:	4603      	mov	r3, r0
 800adf6:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800adf8:	7fbb      	ldrb	r3, [r7, #30]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d12c      	bne.n	800ae58 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800adfe:	4b1f      	ldr	r3, [pc, #124]	; (800ae7c <SD_read+0x148>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800ae04:	f7f6 f926 	bl	8001054 <HAL_GetTick>
 800ae08:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae0a:	bf00      	nop
 800ae0c:	4b1b      	ldr	r3, [pc, #108]	; (800ae7c <SD_read+0x148>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d108      	bne.n	800ae26 <SD_read+0xf2>
 800ae14:	f7f6 f91e 	bl	8001054 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d9f2      	bls.n	800ae0c <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <SD_read+0x148>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d016      	beq.n	800ae5c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	4a13      	ldr	r2, [pc, #76]	; (800ae80 <SD_read+0x14c>)
 800ae32:	4618      	mov	r0, r3
 800ae34:	4611      	mov	r1, r2
 800ae36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f001 fa56 	bl	800c2ec <memcpy>
          buff += BLOCKSIZE;
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae46:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d8c6      	bhi.n	800ade4 <SD_read+0xb0>
 800ae56:	e002      	b.n	800ae5e <SD_read+0x12a>
        }
        else
        {
          break;
 800ae58:	bf00      	nop
 800ae5a:	e000      	b.n	800ae5e <SD_read+0x12a>
            break;
 800ae5c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d104      	bne.n	800ae70 <SD_read+0x13c>
 800ae66:	7fbb      	ldrb	r3, [r7, #30]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <SD_read+0x13c>
        res = RES_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20000784 	.word	0x20000784
 800ae80:	20000580 	.word	0x20000580

0800ae84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800ae98:	4b4c      	ldr	r3, [pc, #304]	; (800afcc <SD_write+0x148>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae9e:	f247 5030 	movw	r0, #30000	; 0x7530
 800aea2:	f7ff fee2 	bl	800ac6a <SD_CheckStatusWithTimeout>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da01      	bge.n	800aeb0 <SD_write+0x2c>
  {
    return res;
 800aeac:	7ffb      	ldrb	r3, [r7, #31]
 800aeae:	e088      	b.n	800afc2 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f003 0303 	and.w	r3, r3, #3
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f040 8082 	bne.w	800afc0 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f7ff f90d 	bl	800a0e0 <BSP_SD_WriteBlocks_DMA>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d130      	bne.n	800af2e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aecc:	f7f6 f8c2 	bl	8001054 <HAL_GetTick>
 800aed0:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aed2:	bf00      	nop
 800aed4:	4b3d      	ldr	r3, [pc, #244]	; (800afcc <SD_write+0x148>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d108      	bne.n	800aeee <SD_write+0x6a>
 800aedc:	f7f6 f8ba 	bl	8001054 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	f247 522f 	movw	r2, #29999	; 0x752f
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d9f2      	bls.n	800aed4 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800aeee:	4b37      	ldr	r3, [pc, #220]	; (800afcc <SD_write+0x148>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <SD_write+0x78>
      {
        res = RES_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	77fb      	strb	r3, [r7, #31]
 800aefa:	e061      	b.n	800afc0 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800aefc:	4b33      	ldr	r3, [pc, #204]	; (800afcc <SD_write+0x148>)
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af02:	f7f6 f8a7 	bl	8001054 <HAL_GetTick>
 800af06:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af08:	e007      	b.n	800af1a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af0a:	f7ff f903 	bl	800a114 <BSP_SD_GetCardState>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <SD_write+0x96>
          {
            res = RES_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	77fb      	strb	r3, [r7, #31]
            break;
 800af18:	e052      	b.n	800afc0 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af1a:	f7f6 f89b 	bl	8001054 <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	f247 522f 	movw	r2, #29999	; 0x752f
 800af28:	4293      	cmp	r3, r2
 800af2a:	d9ee      	bls.n	800af0a <SD_write+0x86>
 800af2c:	e048      	b.n	800afc0 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800af2e:	2300      	movs	r3, #0
 800af30:	61bb      	str	r3, [r7, #24]
 800af32:	e034      	b.n	800af9e <SD_write+0x11a>
      {
        WriteStatus = 0;
 800af34:	4b25      	ldr	r3, [pc, #148]	; (800afcc <SD_write+0x148>)
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	1c5a      	adds	r2, r3, #1
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	4619      	mov	r1, r3
 800af44:	4822      	ldr	r0, [pc, #136]	; (800afd0 <SD_write+0x14c>)
 800af46:	f7ff f8cb 	bl	800a0e0 <BSP_SD_WriteBlocks_DMA>
 800af4a:	4603      	mov	r3, r0
 800af4c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800af4e:	7fbb      	ldrb	r3, [r7, #30]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d129      	bne.n	800afa8 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800af54:	f7f6 f87e 	bl	8001054 <HAL_GetTick>
 800af58:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af5a:	bf00      	nop
 800af5c:	4b1b      	ldr	r3, [pc, #108]	; (800afcc <SD_write+0x148>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d108      	bne.n	800af76 <SD_write+0xf2>
 800af64:	f7f6 f876 	bl	8001054 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	f247 522f 	movw	r2, #29999	; 0x752f
 800af72:	4293      	cmp	r3, r2
 800af74:	d9f2      	bls.n	800af5c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <SD_write+0x148>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d016      	beq.n	800afac <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <SD_write+0x14c>)
 800af82:	4618      	mov	r0, r3
 800af84:	4611      	mov	r1, r2
 800af86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af8a:	461a      	mov	r2, r3
 800af8c:	f001 f9ae 	bl	800c2ec <memcpy>
          buff += BLOCKSIZE;
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800af96:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	3301      	adds	r3, #1
 800af9c:	61bb      	str	r3, [r7, #24]
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d8c6      	bhi.n	800af34 <SD_write+0xb0>
 800afa6:	e002      	b.n	800afae <SD_write+0x12a>
        }
        else
        {
          break;
 800afa8:	bf00      	nop
 800afaa:	e000      	b.n	800afae <SD_write+0x12a>
            break;
 800afac:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d104      	bne.n	800afc0 <SD_write+0x13c>
 800afb6:	7fbb      	ldrb	r3, [r7, #30]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <SD_write+0x13c>
        res = RES_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800afc0:	7ffb      	ldrb	r3, [r7, #31]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3720      	adds	r7, #32
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000780 	.word	0x20000780
 800afd0:	20000580 	.word	0x20000580

0800afd4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08c      	sub	sp, #48	; 0x30
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	603a      	str	r2, [r7, #0]
 800afde:	71fb      	strb	r3, [r7, #7]
 800afe0:	460b      	mov	r3, r1
 800afe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afea:	4b25      	ldr	r3, [pc, #148]	; (800b080 <SD_ioctl+0xac>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <SD_ioctl+0x28>
 800aff8:	2303      	movs	r3, #3
 800affa:	e03c      	b.n	800b076 <SD_ioctl+0xa2>

  switch (cmd)
 800affc:	79bb      	ldrb	r3, [r7, #6]
 800affe:	2b03      	cmp	r3, #3
 800b000:	d834      	bhi.n	800b06c <SD_ioctl+0x98>
 800b002:	a201      	add	r2, pc, #4	; (adr r2, 800b008 <SD_ioctl+0x34>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b019 	.word	0x0800b019
 800b00c:	0800b021 	.word	0x0800b021
 800b010:	0800b039 	.word	0x0800b039
 800b014:	0800b053 	.word	0x0800b053
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b01e:	e028      	b.n	800b072 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b020:	f107 030c 	add.w	r3, r7, #12
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff f885 	bl	800a134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b036:	e01c      	b.n	800b072 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b038:	f107 030c 	add.w	r3, r7, #12
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f879 	bl	800a134 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b044:	b29a      	uxth	r2, r3
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b04a:	2300      	movs	r3, #0
 800b04c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b050:	e00f      	b.n	800b072 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b052:	f107 030c 	add.w	r3, r7, #12
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff f86c 	bl	800a134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05e:	0a5a      	lsrs	r2, r3, #9
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b06a:	e002      	b.n	800b072 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b076:	4618      	mov	r0, r3
 800b078:	3730      	adds	r7, #48	; 0x30
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20000117 	.word	0x20000117

0800b084 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800b088:	4b03      	ldr	r3, [pc, #12]	; (800b098 <BSP_SD_WriteCpltCallback+0x14>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
}
 800b08e:	bf00      	nop
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20000780 	.word	0x20000780

0800b09c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b0a0:	4b03      	ldr	r3, [pc, #12]	; (800b0b0 <BSP_SD_ReadCpltCallback+0x14>)
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20000784 	.word	0x20000784

0800b0b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	607b      	str	r3, [r7, #4]
 800b0be:	4b10      	ldr	r3, [pc, #64]	; (800b100 <HAL_MspInit+0x4c>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c2:	4a0f      	ldr	r2, [pc, #60]	; (800b100 <HAL_MspInit+0x4c>)
 800b0c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0c8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <HAL_MspInit+0x4c>)
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d2:	607b      	str	r3, [r7, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	4b09      	ldr	r3, [pc, #36]	; (800b100 <HAL_MspInit+0x4c>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	4a08      	ldr	r2, [pc, #32]	; (800b100 <HAL_MspInit+0x4c>)
 800b0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <HAL_MspInit+0x4c>)
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ee:	603b      	str	r3, [r7, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	40023800 	.word	0x40023800

0800b104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	; 0x28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	605a      	str	r2, [r3, #4]
 800b116:	609a      	str	r2, [r3, #8]
 800b118:	60da      	str	r2, [r3, #12]
 800b11a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a19      	ldr	r2, [pc, #100]	; (800b188 <HAL_I2C_MspInit+0x84>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d12b      	bne.n	800b17e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b126:	2300      	movs	r3, #0
 800b128:	613b      	str	r3, [r7, #16]
 800b12a:	4b18      	ldr	r3, [pc, #96]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12e:	4a17      	ldr	r2, [pc, #92]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b130:	f043 0302 	orr.w	r3, r3, #2
 800b134:	6313      	str	r3, [r2, #48]	; 0x30
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	613b      	str	r3, [r7, #16]
 800b140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800b142:	23c0      	movs	r3, #192	; 0xc0
 800b144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b146:	2312      	movs	r3, #18
 800b148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b14e:	2303      	movs	r3, #3
 800b150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b152:	2304      	movs	r3, #4
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b156:	f107 0314 	add.w	r3, r7, #20
 800b15a:	4619      	mov	r1, r3
 800b15c:	480c      	ldr	r0, [pc, #48]	; (800b190 <HAL_I2C_MspInit+0x8c>)
 800b15e:	f7f6 fc51 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	4b09      	ldr	r3, [pc, #36]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	4a08      	ldr	r2, [pc, #32]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b16c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b170:	6413      	str	r3, [r2, #64]	; 0x40
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_I2C_MspInit+0x88>)
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b17e:	bf00      	nop
 800b180:	3728      	adds	r7, #40	; 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40005400 	.word	0x40005400
 800b18c:	40023800 	.word	0x40023800
 800b190:	40020400 	.word	0x40020400

0800b194 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a05      	ldr	r2, [pc, #20]	; (800b1b8 <HAL_RTC_MspInit+0x24>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d102      	bne.n	800b1ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <HAL_RTC_MspInit+0x28>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	40002800 	.word	0x40002800
 800b1bc:	42470e3c 	.word	0x42470e3c

0800b1c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08a      	sub	sp, #40	; 0x28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c8:	f107 0314 	add.w	r3, r7, #20
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	605a      	str	r2, [r3, #4]
 800b1d2:	609a      	str	r2, [r3, #8]
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a70      	ldr	r2, [pc, #448]	; (800b3a0 <HAL_SD_MspInit+0x1e0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	f040 80da 	bne.w	800b398 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
 800b1e8:	4b6e      	ldr	r3, [pc, #440]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ec:	4a6d      	ldr	r2, [pc, #436]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b1ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1f2:	6453      	str	r3, [r2, #68]	; 0x44
 800b1f4:	4b6b      	ldr	r3, [pc, #428]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1fc:	613b      	str	r3, [r7, #16]
 800b1fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	4b67      	ldr	r3, [pc, #412]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b208:	4a66      	ldr	r2, [pc, #408]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b20a:	f043 0304 	orr.w	r3, r3, #4
 800b20e:	6313      	str	r3, [r2, #48]	; 0x30
 800b210:	4b64      	ldr	r3, [pc, #400]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b21c:	2300      	movs	r3, #0
 800b21e:	60bb      	str	r3, [r7, #8]
 800b220:	4b60      	ldr	r3, [pc, #384]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	4a5f      	ldr	r2, [pc, #380]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b226:	f043 0308 	orr.w	r3, r3, #8
 800b22a:	6313      	str	r3, [r2, #48]	; 0x30
 800b22c:	4b5d      	ldr	r3, [pc, #372]	; (800b3a4 <HAL_SD_MspInit+0x1e4>)
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	f003 0308 	and.w	r3, r3, #8
 800b234:	60bb      	str	r3, [r7, #8]
 800b236:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800b238:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b23c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b23e:	2302      	movs	r3, #2
 800b240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b242:	2301      	movs	r3, #1
 800b244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b246:	2303      	movs	r3, #3
 800b248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b24a:	230c      	movs	r3, #12
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b24e:	f107 0314 	add.w	r3, r7, #20
 800b252:	4619      	mov	r1, r3
 800b254:	4854      	ldr	r0, [pc, #336]	; (800b3a8 <HAL_SD_MspInit+0x1e8>)
 800b256:	f7f6 fbd5 	bl	8001a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b25a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b25e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b260:	2302      	movs	r3, #2
 800b262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b268:	2303      	movs	r3, #3
 800b26a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b26c:	230c      	movs	r3, #12
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b270:	f107 0314 	add.w	r3, r7, #20
 800b274:	4619      	mov	r1, r3
 800b276:	484c      	ldr	r0, [pc, #304]	; (800b3a8 <HAL_SD_MspInit+0x1e8>)
 800b278:	f7f6 fbc4 	bl	8001a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b27c:	2304      	movs	r3, #4
 800b27e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b280:	2302      	movs	r3, #2
 800b282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b284:	2301      	movs	r3, #1
 800b286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b288:	2303      	movs	r3, #3
 800b28a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b28c:	230c      	movs	r3, #12
 800b28e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b290:	f107 0314 	add.w	r3, r7, #20
 800b294:	4619      	mov	r1, r3
 800b296:	4845      	ldr	r0, [pc, #276]	; (800b3ac <HAL_SD_MspInit+0x1ec>)
 800b298:	f7f6 fbb4 	bl	8001a04 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800b29c:	4b44      	ldr	r3, [pc, #272]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b29e:	4a45      	ldr	r2, [pc, #276]	; (800b3b4 <HAL_SD_MspInit+0x1f4>)
 800b2a0:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800b2a2:	4b43      	ldr	r3, [pc, #268]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b2a8:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2aa:	4b41      	ldr	r3, [pc, #260]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2b0:	4b3f      	ldr	r3, [pc, #252]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b2b6:	4b3e      	ldr	r3, [pc, #248]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2bc:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b2be:	4b3c      	ldr	r3, [pc, #240]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2c4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b2c6:	4b3a      	ldr	r3, [pc, #232]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b2cc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800b2ce:	4b38      	ldr	r3, [pc, #224]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b2d4:	4b36      	ldr	r3, [pc, #216]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2da:	4b35      	ldr	r3, [pc, #212]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2dc:	2204      	movs	r2, #4
 800b2de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b2e0:	4b33      	ldr	r3, [pc, #204]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800b2e6:	4b32      	ldr	r3, [pc, #200]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b2ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b2ee:	4b30      	ldr	r3, [pc, #192]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b2f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800b2f6:	482e      	ldr	r0, [pc, #184]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b2f8:	f7f5 ffec 	bl	80012d4 <HAL_DMA_Init>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800b302:	f7ff fcab 	bl	800ac5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a29      	ldr	r2, [pc, #164]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b30a:	63da      	str	r2, [r3, #60]	; 0x3c
 800b30c:	4a28      	ldr	r2, [pc, #160]	; (800b3b0 <HAL_SD_MspInit+0x1f0>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800b312:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b314:	4a29      	ldr	r2, [pc, #164]	; (800b3bc <HAL_SD_MspInit+0x1fc>)
 800b316:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800b318:	4b27      	ldr	r3, [pc, #156]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b31a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b31e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b320:	4b25      	ldr	r3, [pc, #148]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b322:	2240      	movs	r2, #64	; 0x40
 800b324:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b328:	2200      	movs	r2, #0
 800b32a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b32c:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b32e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b332:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b334:	4b20      	ldr	r3, [pc, #128]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b33a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b33c:	4b1e      	ldr	r3, [pc, #120]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b33e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b342:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800b344:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b346:	2220      	movs	r2, #32
 800b348:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b34a:	4b1b      	ldr	r3, [pc, #108]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b350:	4b19      	ldr	r3, [pc, #100]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b352:	2204      	movs	r2, #4
 800b354:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b356:	4b18      	ldr	r3, [pc, #96]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b358:	2203      	movs	r2, #3
 800b35a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800b35c:	4b16      	ldr	r3, [pc, #88]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b35e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b362:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b364:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b366:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800b36c:	4812      	ldr	r0, [pc, #72]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b36e:	f7f5 ffb1 	bl	80012d4 <HAL_DMA_Init>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800b378:	f7ff fc70 	bl	800ac5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a0e      	ldr	r2, [pc, #56]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b380:	641a      	str	r2, [r3, #64]	; 0x40
 800b382:	4a0d      	ldr	r2, [pc, #52]	; (800b3b8 <HAL_SD_MspInit+0x1f8>)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800b388:	2200      	movs	r2, #0
 800b38a:	2100      	movs	r1, #0
 800b38c:	2031      	movs	r0, #49	; 0x31
 800b38e:	f7f5 ff6a 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b392:	2031      	movs	r0, #49	; 0x31
 800b394:	f7f5 ff83 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b398:	bf00      	nop
 800b39a:	3728      	adds	r7, #40	; 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40012c00 	.word	0x40012c00
 800b3a4:	40023800 	.word	0x40023800
 800b3a8:	40020800 	.word	0x40020800
 800b3ac:	40020c00 	.word	0x40020c00
 800b3b0:	20002ab8 	.word	0x20002ab8
 800b3b4:	40026458 	.word	0x40026458
 800b3b8:	20002c4c 	.word	0x20002c4c
 800b3bc:	400264a0 	.word	0x400264a0

0800b3c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b08a      	sub	sp, #40	; 0x28
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3c8:	f107 0314 	add.w	r3, r7, #20
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	605a      	str	r2, [r3, #4]
 800b3d2:	609a      	str	r2, [r3, #8]
 800b3d4:	60da      	str	r2, [r3, #12]
 800b3d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a19      	ldr	r2, [pc, #100]	; (800b444 <HAL_SPI_MspInit+0x84>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d12b      	bne.n	800b43a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	613b      	str	r3, [r7, #16]
 800b3e6:	4b18      	ldr	r3, [pc, #96]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	4a17      	ldr	r2, [pc, #92]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b3ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b3f0:	6453      	str	r3, [r2, #68]	; 0x44
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	4b11      	ldr	r3, [pc, #68]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b406:	4a10      	ldr	r2, [pc, #64]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b408:	f043 0302 	orr.w	r3, r3, #2
 800b40c:	6313      	str	r3, [r2, #48]	; 0x30
 800b40e:	4b0e      	ldr	r3, [pc, #56]	; (800b448 <HAL_SPI_MspInit+0x88>)
 800b410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800b41a:	2338      	movs	r3, #56	; 0x38
 800b41c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b41e:	2302      	movs	r3, #2
 800b420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b422:	2300      	movs	r3, #0
 800b424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b426:	2303      	movs	r3, #3
 800b428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b42a:	2305      	movs	r3, #5
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b42e:	f107 0314 	add.w	r3, r7, #20
 800b432:	4619      	mov	r1, r3
 800b434:	4805      	ldr	r0, [pc, #20]	; (800b44c <HAL_SPI_MspInit+0x8c>)
 800b436:	f7f6 fae5 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b43a:	bf00      	nop
 800b43c:	3728      	adds	r7, #40	; 0x28
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	40013000 	.word	0x40013000
 800b448:	40023800 	.word	0x40023800
 800b44c:	40020400 	.word	0x40020400

0800b450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b450:	b480      	push	{r7}
 800b452:	b087      	sub	sp, #28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b460:	d10e      	bne.n	800b480 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	4a1c      	ldr	r2, [pc, #112]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b46c:	f043 0301 	orr.w	r3, r3, #1
 800b470:	6413      	str	r3, [r2, #64]	; 0x40
 800b472:	4b1a      	ldr	r3, [pc, #104]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800b47e:	e026      	b.n	800b4ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a16      	ldr	r2, [pc, #88]	; (800b4e0 <HAL_TIM_Base_MspInit+0x90>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d10e      	bne.n	800b4a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b48a:	2300      	movs	r3, #0
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	4b13      	ldr	r3, [pc, #76]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b492:	4a12      	ldr	r2, [pc, #72]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b494:	f043 0302 	orr.w	r3, r3, #2
 800b498:	6413      	str	r3, [r2, #64]	; 0x40
 800b49a:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	693b      	ldr	r3, [r7, #16]
}
 800b4a6:	e012      	b.n	800b4ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a0d      	ldr	r2, [pc, #52]	; (800b4e4 <HAL_TIM_Base_MspInit+0x94>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d10d      	bne.n	800b4ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	4b09      	ldr	r3, [pc, #36]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ba:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b4bc:	f043 0308 	orr.w	r3, r3, #8
 800b4c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b4c2:	4b06      	ldr	r3, [pc, #24]	; (800b4dc <HAL_TIM_Base_MspInit+0x8c>)
 800b4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c6:	f003 0308 	and.w	r3, r3, #8
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	40023800 	.word	0x40023800
 800b4e0:	40000400 	.word	0x40000400
 800b4e4:	40000c00 	.word	0x40000c00

0800b4e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08a      	sub	sp, #40	; 0x28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4f0:	f107 0314 	add.w	r3, r7, #20
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	609a      	str	r2, [r3, #8]
 800b4fc:	60da      	str	r2, [r3, #12]
 800b4fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a24      	ldr	r2, [pc, #144]	; (800b598 <HAL_TIM_MspPostInit+0xb0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d11e      	bne.n	800b548 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b50a:	2300      	movs	r3, #0
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	4b23      	ldr	r3, [pc, #140]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b512:	4a22      	ldr	r2, [pc, #136]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b514:	f043 0302 	orr.w	r3, r3, #2
 800b518:	6313      	str	r3, [r2, #48]	; 0x30
 800b51a:	4b20      	ldr	r3, [pc, #128]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	613b      	str	r3, [r7, #16]
 800b524:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 800b526:	2303      	movs	r3, #3
 800b528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b52a:	2302      	movs	r3, #2
 800b52c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b532:	2300      	movs	r3, #0
 800b534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b536:	2302      	movs	r3, #2
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b53a:	f107 0314 	add.w	r3, r7, #20
 800b53e:	4619      	mov	r1, r3
 800b540:	4817      	ldr	r0, [pc, #92]	; (800b5a0 <HAL_TIM_MspPostInit+0xb8>)
 800b542:	f7f6 fa5f 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800b546:	e022      	b.n	800b58e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <HAL_TIM_MspPostInit+0xbc>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d11d      	bne.n	800b58e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	4b11      	ldr	r3, [pc, #68]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55a:	4a10      	ldr	r2, [pc, #64]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b55c:	f043 0301 	orr.w	r3, r3, #1
 800b560:	6313      	str	r3, [r2, #48]	; 0x30
 800b562:	4b0e      	ldr	r3, [pc, #56]	; (800b59c <HAL_TIM_MspPostInit+0xb4>)
 800b564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800b56e:	230a      	movs	r3, #10
 800b570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b572:	2302      	movs	r3, #2
 800b574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b576:	2300      	movs	r3, #0
 800b578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b57a:	2300      	movs	r3, #0
 800b57c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b57e:	2302      	movs	r3, #2
 800b580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b582:	f107 0314 	add.w	r3, r7, #20
 800b586:	4619      	mov	r1, r3
 800b588:	4807      	ldr	r0, [pc, #28]	; (800b5a8 <HAL_TIM_MspPostInit+0xc0>)
 800b58a:	f7f6 fa3b 	bl	8001a04 <HAL_GPIO_Init>
}
 800b58e:	bf00      	nop
 800b590:	3728      	adds	r7, #40	; 0x28
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	40000400 	.word	0x40000400
 800b59c:	40023800 	.word	0x40023800
 800b5a0:	40020400 	.word	0x40020400
 800b5a4:	40000c00 	.word	0x40000c00
 800b5a8:	40020000 	.word	0x40020000

0800b5ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	; 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	605a      	str	r2, [r3, #4]
 800b5be:	609a      	str	r2, [r3, #8]
 800b5c0:	60da      	str	r2, [r3, #12]
 800b5c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	; (800b640 <HAL_UART_MspInit+0x94>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d134      	bne.n	800b638 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d6:	4a1b      	ldr	r2, [pc, #108]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b5de:	4b19      	ldr	r3, [pc, #100]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5e6:	613b      	str	r3, [r7, #16]
 800b5e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	4b15      	ldr	r3, [pc, #84]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f2:	4a14      	ldr	r2, [pc, #80]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5f4:	f043 0302 	orr.w	r3, r3, #2
 800b5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5fa:	4b12      	ldr	r3, [pc, #72]	; (800b644 <HAL_UART_MspInit+0x98>)
 800b5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fe:	f003 0302 	and.w	r3, r3, #2
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800b606:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b60a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b60c:	2302      	movs	r3, #2
 800b60e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b610:	2301      	movs	r3, #1
 800b612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b614:	2303      	movs	r3, #3
 800b616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b618:	2307      	movs	r3, #7
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b61c:	f107 0314 	add.w	r3, r7, #20
 800b620:	4619      	mov	r1, r3
 800b622:	4809      	ldr	r0, [pc, #36]	; (800b648 <HAL_UART_MspInit+0x9c>)
 800b624:	f7f6 f9ee 	bl	8001a04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b628:	2200      	movs	r2, #0
 800b62a:	2100      	movs	r1, #0
 800b62c:	2027      	movs	r0, #39	; 0x27
 800b62e:	f7f5 fe1a 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b632:	2027      	movs	r0, #39	; 0x27
 800b634:	f7f5 fe33 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b638:	bf00      	nop
 800b63a:	3728      	adds	r7, #40	; 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	40004800 	.word	0x40004800
 800b644:	40023800 	.word	0x40023800
 800b648:	40020400 	.word	0x40020400

0800b64c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b650:	bf00      	nop
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b65a:	b480      	push	{r7}
 800b65c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b65e:	e7fe      	b.n	800b65e <HardFault_Handler+0x4>

0800b660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b664:	e7fe      	b.n	800b664 <MemManage_Handler+0x4>

0800b666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b666:	b480      	push	{r7}
 800b668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b66a:	e7fe      	b.n	800b66a <BusFault_Handler+0x4>

0800b66c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b670:	e7fe      	b.n	800b670 <UsageFault_Handler+0x4>

0800b672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b672:	b480      	push	{r7}
 800b674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b676:	bf00      	nop
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b680:	b480      	push	{r7}
 800b682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b68e:	b480      	push	{r7}
 800b690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b692:	bf00      	nop
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b6a0:	f7f5 fcc4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b6a4:	bf00      	nop
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b6ac:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <USART3_IRQHandler+0x10>)
 800b6ae:	f7fa fcd3 	bl	8006058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b6b2:	bf00      	nop
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20002b18 	.word	0x20002b18

0800b6bc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800b6c0:	4802      	ldr	r0, [pc, #8]	; (800b6cc <SDIO_IRQHandler+0x10>)
 800b6c2:	f7f8 fe27 	bl	8004314 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800b6c6:	bf00      	nop
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20002cac 	.word	0x20002cac

0800b6d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800b6d4:	4802      	ldr	r0, [pc, #8]	; (800b6e0 <DMA2_Stream3_IRQHandler+0x10>)
 800b6d6:	f7f5 ff2d 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b6da:	bf00      	nop
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20002ab8 	.word	0x20002ab8

0800b6e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b6e8:	4802      	ldr	r0, [pc, #8]	; (800b6f4 <OTG_FS_IRQHandler+0x10>)
 800b6ea:	f7f6 fde9 	bl	80022c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b6ee:	bf00      	nop
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20003dc8 	.word	0x20003dc8

0800b6f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800b6fc:	4802      	ldr	r0, [pc, #8]	; (800b708 <DMA2_Stream6_IRQHandler+0x10>)
 800b6fe:	f7f5 ff19 	bl	8001534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b702:	bf00      	nop
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20002c4c 	.word	0x20002c4c

0800b70c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b714:	4b11      	ldr	r3, [pc, #68]	; (800b75c <_sbrk+0x50>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d102      	bne.n	800b722 <_sbrk+0x16>
		heap_end = &end;
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <_sbrk+0x50>)
 800b71e:	4a10      	ldr	r2, [pc, #64]	; (800b760 <_sbrk+0x54>)
 800b720:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b722:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <_sbrk+0x50>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b728:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <_sbrk+0x50>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4413      	add	r3, r2
 800b730:	466a      	mov	r2, sp
 800b732:	4293      	cmp	r3, r2
 800b734:	d907      	bls.n	800b746 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b736:	f000 fd9f 	bl	800c278 <__errno>
 800b73a:	4602      	mov	r2, r0
 800b73c:	230c      	movs	r3, #12
 800b73e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b740:	f04f 33ff 	mov.w	r3, #4294967295
 800b744:	e006      	b.n	800b754 <_sbrk+0x48>
	}

	heap_end += incr;
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <_sbrk+0x50>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	4a03      	ldr	r2, [pc, #12]	; (800b75c <_sbrk+0x50>)
 800b750:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b752:	68fb      	ldr	r3, [r7, #12]
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000788 	.word	0x20000788
 800b760:	200043d8 	.word	0x200043d8

0800b764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b768:	4b16      	ldr	r3, [pc, #88]	; (800b7c4 <SystemInit+0x60>)
 800b76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b76e:	4a15      	ldr	r2, [pc, #84]	; (800b7c4 <SystemInit+0x60>)
 800b770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b778:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <SystemInit+0x64>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a12      	ldr	r2, [pc, #72]	; (800b7c8 <SystemInit+0x64>)
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b784:	4b10      	ldr	r3, [pc, #64]	; (800b7c8 <SystemInit+0x64>)
 800b786:	2200      	movs	r2, #0
 800b788:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <SystemInit+0x64>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a0e      	ldr	r2, [pc, #56]	; (800b7c8 <SystemInit+0x64>)
 800b790:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b798:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b79a:	4b0b      	ldr	r3, [pc, #44]	; (800b7c8 <SystemInit+0x64>)
 800b79c:	4a0b      	ldr	r2, [pc, #44]	; (800b7cc <SystemInit+0x68>)
 800b79e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b7a0:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <SystemInit+0x64>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a08      	ldr	r2, [pc, #32]	; (800b7c8 <SystemInit+0x64>)
 800b7a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <SystemInit+0x64>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7b2:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <SystemInit+0x60>)
 800b7b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7b8:	609a      	str	r2, [r3, #8]
#endif
}
 800b7ba:	bf00      	nop
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	e000ed00 	.word	0xe000ed00
 800b7c8:	40023800 	.word	0x40023800
 800b7cc:	24003010 	.word	0x24003010

0800b7d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4912      	ldr	r1, [pc, #72]	; (800b820 <MX_USB_DEVICE_Init+0x50>)
 800b7d8:	4812      	ldr	r0, [pc, #72]	; (800b824 <MX_USB_DEVICE_Init+0x54>)
 800b7da:	f7fd fb8b 	bl	8008ef4 <USBD_Init>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d001      	beq.n	800b7e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7e4:	f7ff fa3a 	bl	800ac5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7e8:	490f      	ldr	r1, [pc, #60]	; (800b828 <MX_USB_DEVICE_Init+0x58>)
 800b7ea:	480e      	ldr	r0, [pc, #56]	; (800b824 <MX_USB_DEVICE_Init+0x54>)
 800b7ec:	f7fd fbad 	bl	8008f4a <USBD_RegisterClass>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7f6:	f7ff fa31 	bl	800ac5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7fa:	490c      	ldr	r1, [pc, #48]	; (800b82c <MX_USB_DEVICE_Init+0x5c>)
 800b7fc:	4809      	ldr	r0, [pc, #36]	; (800b824 <MX_USB_DEVICE_Init+0x54>)
 800b7fe:	f7fd fadb 	bl	8008db8 <USBD_CDC_RegisterInterface>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b808:	f7ff fa28 	bl	800ac5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b80c:	4805      	ldr	r0, [pc, #20]	; (800b824 <MX_USB_DEVICE_Init+0x54>)
 800b80e:	f7fd fbb6 	bl	8008f7e <USBD_Start>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b818:	f7ff fa20 	bl	800ac5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b81c:	bf00      	nop
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	2000012c 	.word	0x2000012c
 800b824:	20000794 	.word	0x20000794
 800b828:	20000014 	.word	0x20000014
 800b82c:	2000011c 	.word	0x2000011c

0800b830 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b834:	2200      	movs	r2, #0
 800b836:	4905      	ldr	r1, [pc, #20]	; (800b84c <CDC_Init_FS+0x1c>)
 800b838:	4805      	ldr	r0, [pc, #20]	; (800b850 <CDC_Init_FS+0x20>)
 800b83a:	f7fd fad4 	bl	8008de6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b83e:	4905      	ldr	r1, [pc, #20]	; (800b854 <CDC_Init_FS+0x24>)
 800b840:	4803      	ldr	r0, [pc, #12]	; (800b850 <CDC_Init_FS+0x20>)
 800b842:	f7fd faea 	bl	8008e1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b846:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b848:	4618      	mov	r0, r3
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	200035c8 	.word	0x200035c8
 800b850:	20000794 	.word	0x20000794
 800b854:	20002dc8 	.word	0x20002dc8

0800b858 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b858:	b480      	push	{r7}
 800b85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b85c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b85e:	4618      	mov	r0, r3
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	6039      	str	r1, [r7, #0]
 800b872:	71fb      	strb	r3, [r7, #7]
 800b874:	4613      	mov	r3, r2
 800b876:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800b878:	f107 0308 	add.w	r3, r7, #8
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	2b23      	cmp	r3, #35	; 0x23
 800b888:	d87c      	bhi.n	800b984 <CDC_Control_FS+0x11c>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <CDC_Control_FS+0x28>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b985 	.word	0x0800b985
 800b894:	0800b985 	.word	0x0800b985
 800b898:	0800b985 	.word	0x0800b985
 800b89c:	0800b985 	.word	0x0800b985
 800b8a0:	0800b985 	.word	0x0800b985
 800b8a4:	0800b985 	.word	0x0800b985
 800b8a8:	0800b985 	.word	0x0800b985
 800b8ac:	0800b985 	.word	0x0800b985
 800b8b0:	0800b985 	.word	0x0800b985
 800b8b4:	0800b985 	.word	0x0800b985
 800b8b8:	0800b985 	.word	0x0800b985
 800b8bc:	0800b985 	.word	0x0800b985
 800b8c0:	0800b985 	.word	0x0800b985
 800b8c4:	0800b985 	.word	0x0800b985
 800b8c8:	0800b985 	.word	0x0800b985
 800b8cc:	0800b985 	.word	0x0800b985
 800b8d0:	0800b985 	.word	0x0800b985
 800b8d4:	0800b985 	.word	0x0800b985
 800b8d8:	0800b985 	.word	0x0800b985
 800b8dc:	0800b985 	.word	0x0800b985
 800b8e0:	0800b985 	.word	0x0800b985
 800b8e4:	0800b985 	.word	0x0800b985
 800b8e8:	0800b985 	.word	0x0800b985
 800b8ec:	0800b985 	.word	0x0800b985
 800b8f0:	0800b985 	.word	0x0800b985
 800b8f4:	0800b985 	.word	0x0800b985
 800b8f8:	0800b985 	.word	0x0800b985
 800b8fc:	0800b985 	.word	0x0800b985
 800b900:	0800b985 	.word	0x0800b985
 800b904:	0800b985 	.word	0x0800b985
 800b908:	0800b985 	.word	0x0800b985
 800b90c:	0800b985 	.word	0x0800b985
 800b910:	0800b921 	.word	0x0800b921
 800b914:	0800b94d 	.word	0x0800b94d
 800b918:	0800b985 	.word	0x0800b985
 800b91c:	0800b985 	.word	0x0800b985
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	789b      	ldrb	r3, [r3, #2]
 800b930:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	791b      	ldrb	r3, [r3, #4]
 800b93c:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	795b      	ldrb	r3, [r3, #5]
 800b942:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	799b      	ldrb	r3, [r3, #6]
 800b948:	73bb      	strb	r3, [r7, #14]
        	break;
 800b94a:	e01c      	b.n	800b986 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800b94c:	7a3a      	ldrb	r2, [r7, #8]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	3301      	adds	r3, #1
 800b956:	7a7a      	ldrb	r2, [r7, #9]
 800b958:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	3302      	adds	r3, #2
 800b95e:	7aba      	ldrb	r2, [r7, #10]
 800b960:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	3303      	adds	r3, #3
 800b966:	7afa      	ldrb	r2, [r7, #11]
 800b968:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	3304      	adds	r3, #4
 800b96e:	7b3a      	ldrb	r2, [r7, #12]
 800b970:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	3305      	adds	r3, #5
 800b976:	7b7a      	ldrb	r2, [r7, #13]
 800b978:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	3306      	adds	r3, #6
 800b97e:	7bba      	ldrb	r2, [r7, #14]
 800b980:	701a      	strb	r2, [r3, #0]
        	break;
 800b982:	e000      	b.n	800b986 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b984:	bf00      	nop
  }

  return (USBD_OK);
 800b986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b99e:	6879      	ldr	r1, [r7, #4]
 800b9a0:	4805      	ldr	r0, [pc, #20]	; (800b9b8 <CDC_Receive_FS+0x24>)
 800b9a2:	f7fd fa3a 	bl	8008e1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b9a6:	4804      	ldr	r0, [pc, #16]	; (800b9b8 <CDC_Receive_FS+0x24>)
 800b9a8:	f7fd fa7a 	bl	8008ea0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b9ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000794 	.word	0x20000794

0800b9bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <CDC_Transmit_FS+0x48>)
 800b9ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b9d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e00b      	b.n	800b9fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b9e2:	887b      	ldrh	r3, [r7, #2]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6879      	ldr	r1, [r7, #4]
 800b9e8:	4806      	ldr	r0, [pc, #24]	; (800ba04 <CDC_Transmit_FS+0x48>)
 800b9ea:	f7fd f9fc 	bl	8008de6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b9ee:	4805      	ldr	r0, [pc, #20]	; (800ba04 <CDC_Transmit_FS+0x48>)
 800b9f0:	f7fd fa27 	bl	8008e42 <USBD_CDC_TransmitPacket>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20000794 	.word	0x20000794

0800ba08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08a      	sub	sp, #40	; 0x28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	609a      	str	r2, [r3, #8]
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba28:	d13a      	bne.n	800baa0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	613b      	str	r3, [r7, #16]
 800ba2e:	4b1e      	ldr	r3, [pc, #120]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	4a1d      	ldr	r2, [pc, #116]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba34:	f043 0301 	orr.w	r3, r3, #1
 800ba38:	6313      	str	r3, [r2, #48]	; 0x30
 800ba3a:	4b1b      	ldr	r3, [pc, #108]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	613b      	str	r3, [r7, #16]
 800ba44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800ba46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba54:	2303      	movs	r3, #3
 800ba56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba58:	230a      	movs	r3, #10
 800ba5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	4619      	mov	r1, r3
 800ba62:	4812      	ldr	r0, [pc, #72]	; (800baac <HAL_PCD_MspInit+0xa4>)
 800ba64:	f7f5 ffce 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba68:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6c:	4a0e      	ldr	r2, [pc, #56]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba72:	6353      	str	r3, [r2, #52]	; 0x34
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	4b0b      	ldr	r3, [pc, #44]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba7c:	4a0a      	ldr	r2, [pc, #40]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba82:	6453      	str	r3, [r2, #68]	; 0x44
 800ba84:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <HAL_PCD_MspInit+0xa0>)
 800ba86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	2043      	movs	r0, #67	; 0x43
 800ba96:	f7f5 fbe6 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba9a:	2043      	movs	r0, #67	; 0x43
 800ba9c:	f7f5 fbff 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800baa0:	bf00      	nop
 800baa2:	3728      	adds	r7, #40	; 0x28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	40023800 	.word	0x40023800
 800baac:	40020000 	.word	0x40020000

0800bab0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f7fd faa2 	bl	8009010 <USBD_LL_SetupStage>
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	1a9b      	subs	r3, r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	78fb      	ldrb	r3, [r7, #3]
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7fd fad2 	bl	80090a6 <USBD_LL_DataOutStage>
}
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	4613      	mov	r3, r2
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	1a9b      	subs	r3, r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	3348      	adds	r3, #72	; 0x48
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	78fb      	ldrb	r3, [r7, #3]
 800bb30:	4619      	mov	r1, r3
 800bb32:	f7fd fb29 	bl	8009188 <USBD_LL_DataInStage>
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fd fc37 	bl	80093c0 <USBD_LL_SOF>
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb62:	2301      	movs	r3, #1
 800bb64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d102      	bne.n	800bb74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
 800bb72:	e008      	b.n	800bb86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d102      	bne.n	800bb82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	73fb      	strb	r3, [r7, #15]
 800bb80:	e001      	b.n	800bb86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb82:	f7ff f86b 	bl	800ac5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb8c:	7bfa      	ldrb	r2, [r7, #15]
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fd fbdf 	bl	8009354 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fd fb98 	bl	80092d2 <USBD_LL_Reset>
}
 800bba2:	bf00      	nop
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fd fbda 	bl	8009374 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbd2:	f043 0301 	orr.w	r3, r3, #1
 800bbd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbe0:	4b04      	ldr	r3, [pc, #16]	; (800bbf4 <HAL_PCD_SuspendCallback+0x48>)
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	4a03      	ldr	r2, [pc, #12]	; (800bbf4 <HAL_PCD_SuspendCallback+0x48>)
 800bbe6:	f043 0306 	orr.w	r3, r3, #6
 800bbea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	e000ed00 	.word	0xe000ed00

0800bbf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fd fbc9 	bl	800939e <USBD_LL_Resume>
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc26:	78fa      	ldrb	r2, [r7, #3]
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd fbef 	bl	800940e <USBD_LL_IsoOUTIncomplete>
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	460b      	mov	r3, r1
 800bc42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc4a:	78fa      	ldrb	r2, [r7, #3]
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fd fbd0 	bl	80093f4 <USBD_LL_IsoINIncomplete>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd fbdc 	bl	8009428 <USBD_LL_DevConnected>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fd fbd9 	bl	800943e <USBD_LL_DevDisconnected>
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d13c      	bne.n	800bd1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bca4:	4a20      	ldr	r2, [pc, #128]	; (800bd28 <USBD_LL_Init+0x94>)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a1e      	ldr	r2, [pc, #120]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bcb4:	4b1c      	ldr	r3, [pc, #112]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bcba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bcbc:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcbe:	2204      	movs	r2, #4
 800bcc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bcc2:	4b19      	ldr	r3, [pc, #100]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bcc8:	4b17      	ldr	r3, [pc, #92]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcce:	4b16      	ldr	r3, [pc, #88]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcd0:	2202      	movs	r2, #2
 800bcd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bcd4:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bce0:	4b11      	ldr	r3, [pc, #68]	; (800bd28 <USBD_LL_Init+0x94>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bce6:	4b10      	ldr	r3, [pc, #64]	; (800bd28 <USBD_LL_Init+0x94>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bcec:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bcf2:	480d      	ldr	r0, [pc, #52]	; (800bd28 <USBD_LL_Init+0x94>)
 800bcf4:	f7f6 f994 	bl	8002020 <HAL_PCD_Init>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bcfe:	f7fe ffad 	bl	800ac5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd02:	2180      	movs	r1, #128	; 0x80
 800bd04:	4808      	ldr	r0, [pc, #32]	; (800bd28 <USBD_LL_Init+0x94>)
 800bd06:	f7f7 faf8 	bl	80032fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd0a:	2240      	movs	r2, #64	; 0x40
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4806      	ldr	r0, [pc, #24]	; (800bd28 <USBD_LL_Init+0x94>)
 800bd10:	f7f7 faac 	bl	800326c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd14:	2280      	movs	r2, #128	; 0x80
 800bd16:	2101      	movs	r1, #1
 800bd18:	4803      	ldr	r0, [pc, #12]	; (800bd28 <USBD_LL_Init+0x94>)
 800bd1a:	f7f7 faa7 	bl	800326c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	20003dc8 	.word	0x20003dc8

0800bd2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f6 fa89 	bl	800225a <HAL_PCD_Start>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f92e 	bl	800bfb0 <USBD_Get_USB_Status>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	4608      	mov	r0, r1
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4603      	mov	r3, r0
 800bd72:	70fb      	strb	r3, [r7, #3]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70bb      	strb	r3, [r7, #2]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bd8a:	78bb      	ldrb	r3, [r7, #2]
 800bd8c:	883a      	ldrh	r2, [r7, #0]
 800bd8e:	78f9      	ldrb	r1, [r7, #3]
 800bd90:	f7f6 fe5e 	bl	8002a50 <HAL_PCD_EP_Open>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f908 	bl	800bfb0 <USBD_Get_USB_Status>
 800bda0:	4603      	mov	r3, r0
 800bda2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b084      	sub	sp, #16
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bdc8:	78fa      	ldrb	r2, [r7, #3]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f6 fea7 	bl	8002b20 <HAL_PCD_EP_Close>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f8e9 	bl	800bfb0 <USBD_Get_USB_Status>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f6 ff7f 	bl	8002d0e <HAL_PCD_EP_SetStall>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f8ca 	bl	800bfb0 <USBD_Get_USB_Status>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800be20:	7bbb      	ldrb	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be44:	78fa      	ldrb	r2, [r7, #3]
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f6 ffc4 	bl	8002dd6 <HAL_PCD_EP_ClrStall>
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	4618      	mov	r0, r3
 800be56:	f000 f8ab 	bl	800bfb0 <USBD_Get_USB_Status>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be7a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800be7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be80:	2b00      	cmp	r3, #0
 800be82:	da0b      	bge.n	800be9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	4613      	mov	r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	1a9b      	subs	r3, r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	333e      	adds	r3, #62	; 0x3e
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	e00b      	b.n	800beb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	4613      	mov	r3, r2
 800bea6:	00db      	lsls	r3, r3, #3
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	440b      	add	r3, r1
 800beae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800beb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	460b      	mov	r3, r1
 800beca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f6 fd91 	bl	8002a06 <HAL_PCD_SetAddress>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f860 	bl	800bfb0 <USBD_Get_USB_Status>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	72fb      	strb	r3, [r7, #11]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bf20:	893b      	ldrh	r3, [r7, #8]
 800bf22:	7af9      	ldrb	r1, [r7, #11]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f7f6 fea8 	bl	8002c7a <HAL_PCD_EP_Transmit>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f83d 	bl	800bfb0 <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	460b      	mov	r3, r1
 800bf52:	72fb      	strb	r3, [r7, #11]
 800bf54:	4613      	mov	r3, r2
 800bf56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bf66:	893b      	ldrh	r3, [r7, #8]
 800bf68:	7af9      	ldrb	r1, [r7, #11]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f7f6 fe22 	bl	8002bb4 <HAL_PCD_EP_Receive>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f81a 	bl	800bfb0 <USBD_Get_USB_Status>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800bf80:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bf9c:	78fa      	ldrb	r2, [r7, #3]
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f6 fe52 	bl	8002c4a <HAL_PCD_EP_GetRxCount>
 800bfa6:	4603      	mov	r3, r0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d817      	bhi.n	800bff4 <USBD_Get_USB_Status+0x44>
 800bfc4:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <USBD_Get_USB_Status+0x1c>)
 800bfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfca:	bf00      	nop
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800bfe3 	.word	0x0800bfe3
 800bfd4:	0800bfe9 	.word	0x0800bfe9
 800bfd8:	0800bfef 	.word	0x0800bfef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe0:	e00b      	b.n	800bffa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe6:	e008      	b.n	800bffa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	73fb      	strb	r3, [r7, #15]
    break;
 800bfec:	e005      	b.n	800bffa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfee:	2302      	movs	r3, #2
 800bff0:	73fb      	strb	r3, [r7, #15]
    break;
 800bff2:	e002      	b.n	800bffa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bff4:	2302      	movs	r3, #2
 800bff6:	73fb      	strb	r3, [r7, #15]
    break;
 800bff8:	bf00      	nop
  }
  return usb_status;
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	6039      	str	r1, [r7, #0]
 800c012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2212      	movs	r2, #18
 800c018:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c01a:	4b03      	ldr	r3, [pc, #12]	; (800c028 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr
 800c028:	20000148 	.word	0x20000148

0800c02c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	6039      	str	r1, [r7, #0]
 800c036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	2204      	movs	r2, #4
 800c03c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c03e:	4b03      	ldr	r3, [pc, #12]	; (800c04c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	2000015c 	.word	0x2000015c

0800c050 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	6039      	str	r1, [r7, #0]
 800c05a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d105      	bne.n	800c06e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	4907      	ldr	r1, [pc, #28]	; (800c084 <USBD_FS_ProductStrDescriptor+0x34>)
 800c066:	4808      	ldr	r0, [pc, #32]	; (800c088 <USBD_FS_ProductStrDescriptor+0x38>)
 800c068:	f7fd fec0 	bl	8009dec <USBD_GetString>
 800c06c:	e004      	b.n	800c078 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	4904      	ldr	r1, [pc, #16]	; (800c084 <USBD_FS_ProductStrDescriptor+0x34>)
 800c072:	4805      	ldr	r0, [pc, #20]	; (800c088 <USBD_FS_ProductStrDescriptor+0x38>)
 800c074:	f7fd feba 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c078:	4b02      	ldr	r3, [pc, #8]	; (800c084 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	200041d0 	.word	0x200041d0
 800c088:	0800fdd0 	.word	0x0800fdd0

0800c08c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	6039      	str	r1, [r7, #0]
 800c096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	4904      	ldr	r1, [pc, #16]	; (800c0ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c09c:	4804      	ldr	r0, [pc, #16]	; (800c0b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c09e:	f7fd fea5 	bl	8009dec <USBD_GetString>
  return USBD_StrDesc;
 800c0a2:	4b02      	ldr	r3, [pc, #8]	; (800c0ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	200041d0 	.word	0x200041d0
 800c0b0:	0800fddc 	.word	0x0800fddc

0800c0b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	6039      	str	r1, [r7, #0]
 800c0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	221a      	movs	r2, #26
 800c0c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c0c6:	f000 f843 	bl	800c150 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800c0ca:	4b02      	ldr	r3, [pc, #8]	; (800c0d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20000160 	.word	0x20000160

0800c0d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	6039      	str	r1, [r7, #0]
 800c0e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d105      	bne.n	800c0f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	4907      	ldr	r1, [pc, #28]	; (800c10c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0ee:	4808      	ldr	r0, [pc, #32]	; (800c110 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c0f0:	f7fd fe7c 	bl	8009dec <USBD_GetString>
 800c0f4:	e004      	b.n	800c100 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	4904      	ldr	r1, [pc, #16]	; (800c10c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0fa:	4805      	ldr	r0, [pc, #20]	; (800c110 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c0fc:	f7fd fe76 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c100:	4b02      	ldr	r3, [pc, #8]	; (800c10c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c102:	4618      	mov	r0, r3
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200041d0 	.word	0x200041d0
 800c110:	0800fdf0 	.word	0x0800fdf0

0800c114 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	4603      	mov	r3, r0
 800c11c:	6039      	str	r1, [r7, #0]
 800c11e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c120:	79fb      	ldrb	r3, [r7, #7]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d105      	bne.n	800c132 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	4907      	ldr	r1, [pc, #28]	; (800c148 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c12a:	4808      	ldr	r0, [pc, #32]	; (800c14c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c12c:	f7fd fe5e 	bl	8009dec <USBD_GetString>
 800c130:	e004      	b.n	800c13c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	4904      	ldr	r1, [pc, #16]	; (800c148 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c136:	4805      	ldr	r0, [pc, #20]	; (800c14c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c138:	f7fd fe58 	bl	8009dec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	200041d0 	.word	0x200041d0
 800c14c:	0800fdfc 	.word	0x0800fdfc

0800c150 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c156:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <Get_SerialNum+0x44>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c15c:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <Get_SerialNum+0x48>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <Get_SerialNum+0x4c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4413      	add	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c176:	2208      	movs	r2, #8
 800c178:	4909      	ldr	r1, [pc, #36]	; (800c1a0 <Get_SerialNum+0x50>)
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 f814 	bl	800c1a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c180:	2204      	movs	r2, #4
 800c182:	4908      	ldr	r1, [pc, #32]	; (800c1a4 <Get_SerialNum+0x54>)
 800c184:	68b8      	ldr	r0, [r7, #8]
 800c186:	f000 f80f 	bl	800c1a8 <IntToUnicode>
  }
}
 800c18a:	bf00      	nop
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	1fff7a10 	.word	0x1fff7a10
 800c198:	1fff7a14 	.word	0x1fff7a14
 800c19c:	1fff7a18 	.word	0x1fff7a18
 800c1a0:	20000162 	.word	0x20000162
 800c1a4:	20000172 	.word	0x20000172

0800c1a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]
 800c1be:	e027      	b.n	800c210 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	0f1b      	lsrs	r3, r3, #28
 800c1c4:	2b09      	cmp	r3, #9
 800c1c6:	d80b      	bhi.n	800c1e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	0f1b      	lsrs	r3, r3, #28
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	440b      	add	r3, r1
 800c1d8:	3230      	adds	r2, #48	; 0x30
 800c1da:	b2d2      	uxtb	r2, r2
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	e00a      	b.n	800c1f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	0f1b      	lsrs	r3, r3, #28
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	440b      	add	r3, r1
 800c1f0:	3237      	adds	r2, #55	; 0x37
 800c1f2:	b2d2      	uxtb	r2, r2
 800c1f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	3301      	adds	r3, #1
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	4413      	add	r3, r2
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	3301      	adds	r3, #1
 800c20e:	75fb      	strb	r3, [r7, #23]
 800c210:	7dfa      	ldrb	r2, [r7, #23]
 800c212:	79fb      	ldrb	r3, [r7, #7]
 800c214:	429a      	cmp	r2, r3
 800c216:	d3d3      	bcc.n	800c1c0 <IntToUnicode+0x18>
  }
}
 800c218:	bf00      	nop
 800c21a:	371c      	adds	r7, #28
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c25c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c228:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c22a:	e003      	b.n	800c234 <LoopCopyDataInit>

0800c22c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c22e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c230:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c232:	3104      	adds	r1, #4

0800c234 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c234:	480b      	ldr	r0, [pc, #44]	; (800c264 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c238:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c23a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c23c:	d3f6      	bcc.n	800c22c <CopyDataInit>
  ldr  r2, =_sbss
 800c23e:	4a0b      	ldr	r2, [pc, #44]	; (800c26c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c240:	e002      	b.n	800c248 <LoopFillZerobss>

0800c242 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c242:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c244:	f842 3b04 	str.w	r3, [r2], #4

0800c248 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c248:	4b09      	ldr	r3, [pc, #36]	; (800c270 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c24a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c24c:	d3f9      	bcc.n	800c242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c24e:	f7ff fa89 	bl	800b764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c252:	f000 f817 	bl	800c284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c256:	f7fe f8e9 	bl	800a42c <main>
  bx  lr    
 800c25a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c25c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c260:	08010108 	.word	0x08010108
  ldr  r0, =_sdata
 800c264:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c268:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800c26c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800c270:	200043d4 	.word	0x200043d4

0800c274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c274:	e7fe      	b.n	800c274 <ADC_IRQHandler>
	...

0800c278 <__errno>:
 800c278:	4b01      	ldr	r3, [pc, #4]	; (800c280 <__errno+0x8>)
 800c27a:	6818      	ldr	r0, [r3, #0]
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	2000017c 	.word	0x2000017c

0800c284 <__libc_init_array>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	4e0d      	ldr	r6, [pc, #52]	; (800c2bc <__libc_init_array+0x38>)
 800c288:	4c0d      	ldr	r4, [pc, #52]	; (800c2c0 <__libc_init_array+0x3c>)
 800c28a:	1ba4      	subs	r4, r4, r6
 800c28c:	10a4      	asrs	r4, r4, #2
 800c28e:	2500      	movs	r5, #0
 800c290:	42a5      	cmp	r5, r4
 800c292:	d109      	bne.n	800c2a8 <__libc_init_array+0x24>
 800c294:	4e0b      	ldr	r6, [pc, #44]	; (800c2c4 <__libc_init_array+0x40>)
 800c296:	4c0c      	ldr	r4, [pc, #48]	; (800c2c8 <__libc_init_array+0x44>)
 800c298:	f003 fd80 	bl	800fd9c <_init>
 800c29c:	1ba4      	subs	r4, r4, r6
 800c29e:	10a4      	asrs	r4, r4, #2
 800c2a0:	2500      	movs	r5, #0
 800c2a2:	42a5      	cmp	r5, r4
 800c2a4:	d105      	bne.n	800c2b2 <__libc_init_array+0x2e>
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
 800c2a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2ac:	4798      	blx	r3
 800c2ae:	3501      	adds	r5, #1
 800c2b0:	e7ee      	b.n	800c290 <__libc_init_array+0xc>
 800c2b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2b6:	4798      	blx	r3
 800c2b8:	3501      	adds	r5, #1
 800c2ba:	e7f2      	b.n	800c2a2 <__libc_init_array+0x1e>
 800c2bc:	08010100 	.word	0x08010100
 800c2c0:	08010100 	.word	0x08010100
 800c2c4:	08010100 	.word	0x08010100
 800c2c8:	08010104 	.word	0x08010104

0800c2cc <malloc>:
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <malloc+0xc>)
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	6818      	ldr	r0, [r3, #0]
 800c2d2:	f000 b86d 	b.w	800c3b0 <_malloc_r>
 800c2d6:	bf00      	nop
 800c2d8:	2000017c 	.word	0x2000017c

0800c2dc <free>:
 800c2dc:	4b02      	ldr	r3, [pc, #8]	; (800c2e8 <free+0xc>)
 800c2de:	4601      	mov	r1, r0
 800c2e0:	6818      	ldr	r0, [r3, #0]
 800c2e2:	f000 b817 	b.w	800c314 <_free_r>
 800c2e6:	bf00      	nop
 800c2e8:	2000017c 	.word	0x2000017c

0800c2ec <memcpy>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	1e43      	subs	r3, r0, #1
 800c2f0:	440a      	add	r2, r1
 800c2f2:	4291      	cmp	r1, r2
 800c2f4:	d100      	bne.n	800c2f8 <memcpy+0xc>
 800c2f6:	bd10      	pop	{r4, pc}
 800c2f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c300:	e7f7      	b.n	800c2f2 <memcpy+0x6>

0800c302 <memset>:
 800c302:	4402      	add	r2, r0
 800c304:	4603      	mov	r3, r0
 800c306:	4293      	cmp	r3, r2
 800c308:	d100      	bne.n	800c30c <memset+0xa>
 800c30a:	4770      	bx	lr
 800c30c:	f803 1b01 	strb.w	r1, [r3], #1
 800c310:	e7f9      	b.n	800c306 <memset+0x4>
	...

0800c314 <_free_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	2900      	cmp	r1, #0
 800c31a:	d045      	beq.n	800c3a8 <_free_r+0x94>
 800c31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c320:	1f0c      	subs	r4, r1, #4
 800c322:	2b00      	cmp	r3, #0
 800c324:	bfb8      	it	lt
 800c326:	18e4      	addlt	r4, r4, r3
 800c328:	f002 ff82 	bl	800f230 <__malloc_lock>
 800c32c:	4a1f      	ldr	r2, [pc, #124]	; (800c3ac <_free_r+0x98>)
 800c32e:	6813      	ldr	r3, [r2, #0]
 800c330:	4610      	mov	r0, r2
 800c332:	b933      	cbnz	r3, 800c342 <_free_r+0x2e>
 800c334:	6063      	str	r3, [r4, #4]
 800c336:	6014      	str	r4, [r2, #0]
 800c338:	4628      	mov	r0, r5
 800c33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33e:	f002 bf78 	b.w	800f232 <__malloc_unlock>
 800c342:	42a3      	cmp	r3, r4
 800c344:	d90c      	bls.n	800c360 <_free_r+0x4c>
 800c346:	6821      	ldr	r1, [r4, #0]
 800c348:	1862      	adds	r2, r4, r1
 800c34a:	4293      	cmp	r3, r2
 800c34c:	bf04      	itt	eq
 800c34e:	681a      	ldreq	r2, [r3, #0]
 800c350:	685b      	ldreq	r3, [r3, #4]
 800c352:	6063      	str	r3, [r4, #4]
 800c354:	bf04      	itt	eq
 800c356:	1852      	addeq	r2, r2, r1
 800c358:	6022      	streq	r2, [r4, #0]
 800c35a:	6004      	str	r4, [r0, #0]
 800c35c:	e7ec      	b.n	800c338 <_free_r+0x24>
 800c35e:	4613      	mov	r3, r2
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	b10a      	cbz	r2, 800c368 <_free_r+0x54>
 800c364:	42a2      	cmp	r2, r4
 800c366:	d9fa      	bls.n	800c35e <_free_r+0x4a>
 800c368:	6819      	ldr	r1, [r3, #0]
 800c36a:	1858      	adds	r0, r3, r1
 800c36c:	42a0      	cmp	r0, r4
 800c36e:	d10b      	bne.n	800c388 <_free_r+0x74>
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4401      	add	r1, r0
 800c374:	1858      	adds	r0, r3, r1
 800c376:	4282      	cmp	r2, r0
 800c378:	6019      	str	r1, [r3, #0]
 800c37a:	d1dd      	bne.n	800c338 <_free_r+0x24>
 800c37c:	6810      	ldr	r0, [r2, #0]
 800c37e:	6852      	ldr	r2, [r2, #4]
 800c380:	605a      	str	r2, [r3, #4]
 800c382:	4401      	add	r1, r0
 800c384:	6019      	str	r1, [r3, #0]
 800c386:	e7d7      	b.n	800c338 <_free_r+0x24>
 800c388:	d902      	bls.n	800c390 <_free_r+0x7c>
 800c38a:	230c      	movs	r3, #12
 800c38c:	602b      	str	r3, [r5, #0]
 800c38e:	e7d3      	b.n	800c338 <_free_r+0x24>
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	1821      	adds	r1, r4, r0
 800c394:	428a      	cmp	r2, r1
 800c396:	bf04      	itt	eq
 800c398:	6811      	ldreq	r1, [r2, #0]
 800c39a:	6852      	ldreq	r2, [r2, #4]
 800c39c:	6062      	str	r2, [r4, #4]
 800c39e:	bf04      	itt	eq
 800c3a0:	1809      	addeq	r1, r1, r0
 800c3a2:	6021      	streq	r1, [r4, #0]
 800c3a4:	605c      	str	r4, [r3, #4]
 800c3a6:	e7c7      	b.n	800c338 <_free_r+0x24>
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
 800c3aa:	bf00      	nop
 800c3ac:	2000078c 	.word	0x2000078c

0800c3b0 <_malloc_r>:
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	1ccd      	adds	r5, r1, #3
 800c3b4:	f025 0503 	bic.w	r5, r5, #3
 800c3b8:	3508      	adds	r5, #8
 800c3ba:	2d0c      	cmp	r5, #12
 800c3bc:	bf38      	it	cc
 800c3be:	250c      	movcc	r5, #12
 800c3c0:	2d00      	cmp	r5, #0
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	db01      	blt.n	800c3ca <_malloc_r+0x1a>
 800c3c6:	42a9      	cmp	r1, r5
 800c3c8:	d903      	bls.n	800c3d2 <_malloc_r+0x22>
 800c3ca:	230c      	movs	r3, #12
 800c3cc:	6033      	str	r3, [r6, #0]
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	bd70      	pop	{r4, r5, r6, pc}
 800c3d2:	f002 ff2d 	bl	800f230 <__malloc_lock>
 800c3d6:	4a21      	ldr	r2, [pc, #132]	; (800c45c <_malloc_r+0xac>)
 800c3d8:	6814      	ldr	r4, [r2, #0]
 800c3da:	4621      	mov	r1, r4
 800c3dc:	b991      	cbnz	r1, 800c404 <_malloc_r+0x54>
 800c3de:	4c20      	ldr	r4, [pc, #128]	; (800c460 <_malloc_r+0xb0>)
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	b91b      	cbnz	r3, 800c3ec <_malloc_r+0x3c>
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f000 fe7b 	bl	800d0e0 <_sbrk_r>
 800c3ea:	6020      	str	r0, [r4, #0]
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f000 fe76 	bl	800d0e0 <_sbrk_r>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d124      	bne.n	800c442 <_malloc_r+0x92>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	6033      	str	r3, [r6, #0]
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f002 ff18 	bl	800f232 <__malloc_unlock>
 800c402:	e7e4      	b.n	800c3ce <_malloc_r+0x1e>
 800c404:	680b      	ldr	r3, [r1, #0]
 800c406:	1b5b      	subs	r3, r3, r5
 800c408:	d418      	bmi.n	800c43c <_malloc_r+0x8c>
 800c40a:	2b0b      	cmp	r3, #11
 800c40c:	d90f      	bls.n	800c42e <_malloc_r+0x7e>
 800c40e:	600b      	str	r3, [r1, #0]
 800c410:	50cd      	str	r5, [r1, r3]
 800c412:	18cc      	adds	r4, r1, r3
 800c414:	4630      	mov	r0, r6
 800c416:	f002 ff0c 	bl	800f232 <__malloc_unlock>
 800c41a:	f104 000b 	add.w	r0, r4, #11
 800c41e:	1d23      	adds	r3, r4, #4
 800c420:	f020 0007 	bic.w	r0, r0, #7
 800c424:	1ac3      	subs	r3, r0, r3
 800c426:	d0d3      	beq.n	800c3d0 <_malloc_r+0x20>
 800c428:	425a      	negs	r2, r3
 800c42a:	50e2      	str	r2, [r4, r3]
 800c42c:	e7d0      	b.n	800c3d0 <_malloc_r+0x20>
 800c42e:	428c      	cmp	r4, r1
 800c430:	684b      	ldr	r3, [r1, #4]
 800c432:	bf16      	itet	ne
 800c434:	6063      	strne	r3, [r4, #4]
 800c436:	6013      	streq	r3, [r2, #0]
 800c438:	460c      	movne	r4, r1
 800c43a:	e7eb      	b.n	800c414 <_malloc_r+0x64>
 800c43c:	460c      	mov	r4, r1
 800c43e:	6849      	ldr	r1, [r1, #4]
 800c440:	e7cc      	b.n	800c3dc <_malloc_r+0x2c>
 800c442:	1cc4      	adds	r4, r0, #3
 800c444:	f024 0403 	bic.w	r4, r4, #3
 800c448:	42a0      	cmp	r0, r4
 800c44a:	d005      	beq.n	800c458 <_malloc_r+0xa8>
 800c44c:	1a21      	subs	r1, r4, r0
 800c44e:	4630      	mov	r0, r6
 800c450:	f000 fe46 	bl	800d0e0 <_sbrk_r>
 800c454:	3001      	adds	r0, #1
 800c456:	d0cf      	beq.n	800c3f8 <_malloc_r+0x48>
 800c458:	6025      	str	r5, [r4, #0]
 800c45a:	e7db      	b.n	800c414 <_malloc_r+0x64>
 800c45c:	2000078c 	.word	0x2000078c
 800c460:	20000790 	.word	0x20000790

0800c464 <__cvt>:
 800c464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c468:	ec55 4b10 	vmov	r4, r5, d0
 800c46c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c46e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c472:	2d00      	cmp	r5, #0
 800c474:	460e      	mov	r6, r1
 800c476:	4691      	mov	r9, r2
 800c478:	4619      	mov	r1, r3
 800c47a:	bfb8      	it	lt
 800c47c:	4622      	movlt	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f027 0720 	bic.w	r7, r7, #32
 800c484:	bfbb      	ittet	lt
 800c486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c48a:	461d      	movlt	r5, r3
 800c48c:	2300      	movge	r3, #0
 800c48e:	232d      	movlt	r3, #45	; 0x2d
 800c490:	bfb8      	it	lt
 800c492:	4614      	movlt	r4, r2
 800c494:	2f46      	cmp	r7, #70	; 0x46
 800c496:	700b      	strb	r3, [r1, #0]
 800c498:	d004      	beq.n	800c4a4 <__cvt+0x40>
 800c49a:	2f45      	cmp	r7, #69	; 0x45
 800c49c:	d100      	bne.n	800c4a0 <__cvt+0x3c>
 800c49e:	3601      	adds	r6, #1
 800c4a0:	2102      	movs	r1, #2
 800c4a2:	e000      	b.n	800c4a6 <__cvt+0x42>
 800c4a4:	2103      	movs	r1, #3
 800c4a6:	ab03      	add	r3, sp, #12
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	ab02      	add	r3, sp, #8
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	4653      	mov	r3, sl
 800c4b2:	ec45 4b10 	vmov	d0, r4, r5
 800c4b6:	f001 fdb7 	bl	800e028 <_dtoa_r>
 800c4ba:	2f47      	cmp	r7, #71	; 0x47
 800c4bc:	4680      	mov	r8, r0
 800c4be:	d102      	bne.n	800c4c6 <__cvt+0x62>
 800c4c0:	f019 0f01 	tst.w	r9, #1
 800c4c4:	d026      	beq.n	800c514 <__cvt+0xb0>
 800c4c6:	2f46      	cmp	r7, #70	; 0x46
 800c4c8:	eb08 0906 	add.w	r9, r8, r6
 800c4cc:	d111      	bne.n	800c4f2 <__cvt+0x8e>
 800c4ce:	f898 3000 	ldrb.w	r3, [r8]
 800c4d2:	2b30      	cmp	r3, #48	; 0x30
 800c4d4:	d10a      	bne.n	800c4ec <__cvt+0x88>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4620      	mov	r0, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7f4 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4e2:	b918      	cbnz	r0, 800c4ec <__cvt+0x88>
 800c4e4:	f1c6 0601 	rsb	r6, r6, #1
 800c4e8:	f8ca 6000 	str.w	r6, [sl]
 800c4ec:	f8da 3000 	ldr.w	r3, [sl]
 800c4f0:	4499      	add	r9, r3
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f4 fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4fe:	b938      	cbnz	r0, 800c510 <__cvt+0xac>
 800c500:	2230      	movs	r2, #48	; 0x30
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	454b      	cmp	r3, r9
 800c506:	d205      	bcs.n	800c514 <__cvt+0xb0>
 800c508:	1c59      	adds	r1, r3, #1
 800c50a:	9103      	str	r1, [sp, #12]
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	e7f8      	b.n	800c502 <__cvt+0x9e>
 800c510:	f8cd 900c 	str.w	r9, [sp, #12]
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c518:	eba3 0308 	sub.w	r3, r3, r8
 800c51c:	4640      	mov	r0, r8
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	b004      	add	sp, #16
 800c522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c526 <__exponent>:
 800c526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c528:	2900      	cmp	r1, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	bfba      	itte	lt
 800c52e:	4249      	neglt	r1, r1
 800c530:	232d      	movlt	r3, #45	; 0x2d
 800c532:	232b      	movge	r3, #43	; 0x2b
 800c534:	2909      	cmp	r1, #9
 800c536:	f804 2b02 	strb.w	r2, [r4], #2
 800c53a:	7043      	strb	r3, [r0, #1]
 800c53c:	dd20      	ble.n	800c580 <__exponent+0x5a>
 800c53e:	f10d 0307 	add.w	r3, sp, #7
 800c542:	461f      	mov	r7, r3
 800c544:	260a      	movs	r6, #10
 800c546:	fb91 f5f6 	sdiv	r5, r1, r6
 800c54a:	fb06 1115 	mls	r1, r6, r5, r1
 800c54e:	3130      	adds	r1, #48	; 0x30
 800c550:	2d09      	cmp	r5, #9
 800c552:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c556:	f103 32ff 	add.w	r2, r3, #4294967295
 800c55a:	4629      	mov	r1, r5
 800c55c:	dc09      	bgt.n	800c572 <__exponent+0x4c>
 800c55e:	3130      	adds	r1, #48	; 0x30
 800c560:	3b02      	subs	r3, #2
 800c562:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c566:	42bb      	cmp	r3, r7
 800c568:	4622      	mov	r2, r4
 800c56a:	d304      	bcc.n	800c576 <__exponent+0x50>
 800c56c:	1a10      	subs	r0, r2, r0
 800c56e:	b003      	add	sp, #12
 800c570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c572:	4613      	mov	r3, r2
 800c574:	e7e7      	b.n	800c546 <__exponent+0x20>
 800c576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c57a:	f804 2b01 	strb.w	r2, [r4], #1
 800c57e:	e7f2      	b.n	800c566 <__exponent+0x40>
 800c580:	2330      	movs	r3, #48	; 0x30
 800c582:	4419      	add	r1, r3
 800c584:	7083      	strb	r3, [r0, #2]
 800c586:	1d02      	adds	r2, r0, #4
 800c588:	70c1      	strb	r1, [r0, #3]
 800c58a:	e7ef      	b.n	800c56c <__exponent+0x46>

0800c58c <_printf_float>:
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	b08d      	sub	sp, #52	; 0x34
 800c592:	460c      	mov	r4, r1
 800c594:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c598:	4616      	mov	r6, r2
 800c59a:	461f      	mov	r7, r3
 800c59c:	4605      	mov	r5, r0
 800c59e:	f002 fe27 	bl	800f1f0 <_localeconv_r>
 800c5a2:	6803      	ldr	r3, [r0, #0]
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7f3 fe12 	bl	80001d0 <strlen>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b4:	9005      	str	r0, [sp, #20]
 800c5b6:	3307      	adds	r3, #7
 800c5b8:	f023 0307 	bic.w	r3, r3, #7
 800c5bc:	f103 0208 	add.w	r2, r3, #8
 800c5c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c5c4:	f8d4 b000 	ldr.w	fp, [r4]
 800c5c8:	f8c8 2000 	str.w	r2, [r8]
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c5d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c5d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5dc:	9307      	str	r3, [sp, #28]
 800c5de:	f8cd 8018 	str.w	r8, [sp, #24]
 800c5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e6:	4ba7      	ldr	r3, [pc, #668]	; (800c884 <_printf_float+0x2f8>)
 800c5e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5ec:	f7f4 fa9e 	bl	8000b2c <__aeabi_dcmpun>
 800c5f0:	bb70      	cbnz	r0, 800c650 <_printf_float+0xc4>
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f6:	4ba3      	ldr	r3, [pc, #652]	; (800c884 <_printf_float+0x2f8>)
 800c5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5fc:	f7f4 fa78 	bl	8000af0 <__aeabi_dcmple>
 800c600:	bb30      	cbnz	r0, 800c650 <_printf_float+0xc4>
 800c602:	2200      	movs	r2, #0
 800c604:	2300      	movs	r3, #0
 800c606:	4640      	mov	r0, r8
 800c608:	4649      	mov	r1, r9
 800c60a:	f7f4 fa67 	bl	8000adc <__aeabi_dcmplt>
 800c60e:	b110      	cbz	r0, 800c616 <_printf_float+0x8a>
 800c610:	232d      	movs	r3, #45	; 0x2d
 800c612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c616:	4a9c      	ldr	r2, [pc, #624]	; (800c888 <_printf_float+0x2fc>)
 800c618:	4b9c      	ldr	r3, [pc, #624]	; (800c88c <_printf_float+0x300>)
 800c61a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c61e:	bf8c      	ite	hi
 800c620:	4690      	movhi	r8, r2
 800c622:	4698      	movls	r8, r3
 800c624:	2303      	movs	r3, #3
 800c626:	f02b 0204 	bic.w	r2, fp, #4
 800c62a:	6123      	str	r3, [r4, #16]
 800c62c:	6022      	str	r2, [r4, #0]
 800c62e:	f04f 0900 	mov.w	r9, #0
 800c632:	9700      	str	r7, [sp, #0]
 800c634:	4633      	mov	r3, r6
 800c636:	aa0b      	add	r2, sp, #44	; 0x2c
 800c638:	4621      	mov	r1, r4
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 f9e6 	bl	800ca0c <_printf_common>
 800c640:	3001      	adds	r0, #1
 800c642:	f040 808d 	bne.w	800c760 <_printf_float+0x1d4>
 800c646:	f04f 30ff 	mov.w	r0, #4294967295
 800c64a:	b00d      	add	sp, #52	; 0x34
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	4642      	mov	r2, r8
 800c652:	464b      	mov	r3, r9
 800c654:	4640      	mov	r0, r8
 800c656:	4649      	mov	r1, r9
 800c658:	f7f4 fa68 	bl	8000b2c <__aeabi_dcmpun>
 800c65c:	b110      	cbz	r0, 800c664 <_printf_float+0xd8>
 800c65e:	4a8c      	ldr	r2, [pc, #560]	; (800c890 <_printf_float+0x304>)
 800c660:	4b8c      	ldr	r3, [pc, #560]	; (800c894 <_printf_float+0x308>)
 800c662:	e7da      	b.n	800c61a <_printf_float+0x8e>
 800c664:	6861      	ldr	r1, [r4, #4]
 800c666:	1c4b      	adds	r3, r1, #1
 800c668:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c66c:	a80a      	add	r0, sp, #40	; 0x28
 800c66e:	d13e      	bne.n	800c6ee <_printf_float+0x162>
 800c670:	2306      	movs	r3, #6
 800c672:	6063      	str	r3, [r4, #4]
 800c674:	2300      	movs	r3, #0
 800c676:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c67a:	ab09      	add	r3, sp, #36	; 0x24
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	ec49 8b10 	vmov	d0, r8, r9
 800c682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c686:	6022      	str	r2, [r4, #0]
 800c688:	f8cd a004 	str.w	sl, [sp, #4]
 800c68c:	6861      	ldr	r1, [r4, #4]
 800c68e:	4628      	mov	r0, r5
 800c690:	f7ff fee8 	bl	800c464 <__cvt>
 800c694:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c698:	2b47      	cmp	r3, #71	; 0x47
 800c69a:	4680      	mov	r8, r0
 800c69c:	d109      	bne.n	800c6b2 <_printf_float+0x126>
 800c69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a0:	1cd8      	adds	r0, r3, #3
 800c6a2:	db02      	blt.n	800c6aa <_printf_float+0x11e>
 800c6a4:	6862      	ldr	r2, [r4, #4]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	dd47      	ble.n	800c73a <_printf_float+0x1ae>
 800c6aa:	f1aa 0a02 	sub.w	sl, sl, #2
 800c6ae:	fa5f fa8a 	uxtb.w	sl, sl
 800c6b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c6b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6b8:	d824      	bhi.n	800c704 <_printf_float+0x178>
 800c6ba:	3901      	subs	r1, #1
 800c6bc:	4652      	mov	r2, sl
 800c6be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6c2:	9109      	str	r1, [sp, #36]	; 0x24
 800c6c4:	f7ff ff2f 	bl	800c526 <__exponent>
 800c6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6ca:	1813      	adds	r3, r2, r0
 800c6cc:	2a01      	cmp	r2, #1
 800c6ce:	4681      	mov	r9, r0
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	dc02      	bgt.n	800c6da <_printf_float+0x14e>
 800c6d4:	6822      	ldr	r2, [r4, #0]
 800c6d6:	07d1      	lsls	r1, r2, #31
 800c6d8:	d501      	bpl.n	800c6de <_printf_float+0x152>
 800c6da:	3301      	adds	r3, #1
 800c6dc:	6123      	str	r3, [r4, #16]
 800c6de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0a5      	beq.n	800c632 <_printf_float+0xa6>
 800c6e6:	232d      	movs	r3, #45	; 0x2d
 800c6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ec:	e7a1      	b.n	800c632 <_printf_float+0xa6>
 800c6ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c6f2:	f000 8177 	beq.w	800c9e4 <_printf_float+0x458>
 800c6f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c6fa:	d1bb      	bne.n	800c674 <_printf_float+0xe8>
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	d1b9      	bne.n	800c674 <_printf_float+0xe8>
 800c700:	2301      	movs	r3, #1
 800c702:	e7b6      	b.n	800c672 <_printf_float+0xe6>
 800c704:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c708:	d119      	bne.n	800c73e <_printf_float+0x1b2>
 800c70a:	2900      	cmp	r1, #0
 800c70c:	6863      	ldr	r3, [r4, #4]
 800c70e:	dd0c      	ble.n	800c72a <_printf_float+0x19e>
 800c710:	6121      	str	r1, [r4, #16]
 800c712:	b913      	cbnz	r3, 800c71a <_printf_float+0x18e>
 800c714:	6822      	ldr	r2, [r4, #0]
 800c716:	07d2      	lsls	r2, r2, #31
 800c718:	d502      	bpl.n	800c720 <_printf_float+0x194>
 800c71a:	3301      	adds	r3, #1
 800c71c:	440b      	add	r3, r1
 800c71e:	6123      	str	r3, [r4, #16]
 800c720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c722:	65a3      	str	r3, [r4, #88]	; 0x58
 800c724:	f04f 0900 	mov.w	r9, #0
 800c728:	e7d9      	b.n	800c6de <_printf_float+0x152>
 800c72a:	b913      	cbnz	r3, 800c732 <_printf_float+0x1a6>
 800c72c:	6822      	ldr	r2, [r4, #0]
 800c72e:	07d0      	lsls	r0, r2, #31
 800c730:	d501      	bpl.n	800c736 <_printf_float+0x1aa>
 800c732:	3302      	adds	r3, #2
 800c734:	e7f3      	b.n	800c71e <_printf_float+0x192>
 800c736:	2301      	movs	r3, #1
 800c738:	e7f1      	b.n	800c71e <_printf_float+0x192>
 800c73a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c73e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c742:	4293      	cmp	r3, r2
 800c744:	db05      	blt.n	800c752 <_printf_float+0x1c6>
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	6123      	str	r3, [r4, #16]
 800c74a:	07d1      	lsls	r1, r2, #31
 800c74c:	d5e8      	bpl.n	800c720 <_printf_float+0x194>
 800c74e:	3301      	adds	r3, #1
 800c750:	e7e5      	b.n	800c71e <_printf_float+0x192>
 800c752:	2b00      	cmp	r3, #0
 800c754:	bfd4      	ite	le
 800c756:	f1c3 0302 	rsble	r3, r3, #2
 800c75a:	2301      	movgt	r3, #1
 800c75c:	4413      	add	r3, r2
 800c75e:	e7de      	b.n	800c71e <_printf_float+0x192>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	055a      	lsls	r2, r3, #21
 800c764:	d407      	bmi.n	800c776 <_printf_float+0x1ea>
 800c766:	6923      	ldr	r3, [r4, #16]
 800c768:	4642      	mov	r2, r8
 800c76a:	4631      	mov	r1, r6
 800c76c:	4628      	mov	r0, r5
 800c76e:	47b8      	blx	r7
 800c770:	3001      	adds	r0, #1
 800c772:	d12b      	bne.n	800c7cc <_printf_float+0x240>
 800c774:	e767      	b.n	800c646 <_printf_float+0xba>
 800c776:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c77a:	f240 80dc 	bls.w	800c936 <_printf_float+0x3aa>
 800c77e:	2200      	movs	r2, #0
 800c780:	2300      	movs	r3, #0
 800c782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c786:	f7f4 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d033      	beq.n	800c7f6 <_printf_float+0x26a>
 800c78e:	2301      	movs	r3, #1
 800c790:	4a41      	ldr	r2, [pc, #260]	; (800c898 <_printf_float+0x30c>)
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	f43f af54 	beq.w	800c646 <_printf_float+0xba>
 800c79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	db02      	blt.n	800c7ac <_printf_float+0x220>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	07d8      	lsls	r0, r3, #31
 800c7aa:	d50f      	bpl.n	800c7cc <_printf_float+0x240>
 800c7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f af45 	beq.w	800c646 <_printf_float+0xba>
 800c7bc:	f04f 0800 	mov.w	r8, #0
 800c7c0:	f104 091a 	add.w	r9, r4, #26
 800c7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	4543      	cmp	r3, r8
 800c7ca:	dc09      	bgt.n	800c7e0 <_printf_float+0x254>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	079b      	lsls	r3, r3, #30
 800c7d0:	f100 8103 	bmi.w	800c9da <_printf_float+0x44e>
 800c7d4:	68e0      	ldr	r0, [r4, #12]
 800c7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7d8:	4298      	cmp	r0, r3
 800c7da:	bfb8      	it	lt
 800c7dc:	4618      	movlt	r0, r3
 800c7de:	e734      	b.n	800c64a <_printf_float+0xbe>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	464a      	mov	r2, r9
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	47b8      	blx	r7
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	f43f af2b 	beq.w	800c646 <_printf_float+0xba>
 800c7f0:	f108 0801 	add.w	r8, r8, #1
 800c7f4:	e7e6      	b.n	800c7c4 <_printf_float+0x238>
 800c7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc2b      	bgt.n	800c854 <_printf_float+0x2c8>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4a26      	ldr	r2, [pc, #152]	; (800c898 <_printf_float+0x30c>)
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f af1d 	beq.w	800c646 <_printf_float+0xba>
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	b923      	cbnz	r3, 800c81a <_printf_float+0x28e>
 800c810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c812:	b913      	cbnz	r3, 800c81a <_printf_float+0x28e>
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	07d9      	lsls	r1, r3, #31
 800c818:	d5d8      	bpl.n	800c7cc <_printf_float+0x240>
 800c81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c81e:	4631      	mov	r1, r6
 800c820:	4628      	mov	r0, r5
 800c822:	47b8      	blx	r7
 800c824:	3001      	adds	r0, #1
 800c826:	f43f af0e 	beq.w	800c646 <_printf_float+0xba>
 800c82a:	f04f 0900 	mov.w	r9, #0
 800c82e:	f104 0a1a 	add.w	sl, r4, #26
 800c832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c834:	425b      	negs	r3, r3
 800c836:	454b      	cmp	r3, r9
 800c838:	dc01      	bgt.n	800c83e <_printf_float+0x2b2>
 800c83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83c:	e794      	b.n	800c768 <_printf_float+0x1dc>
 800c83e:	2301      	movs	r3, #1
 800c840:	4652      	mov	r2, sl
 800c842:	4631      	mov	r1, r6
 800c844:	4628      	mov	r0, r5
 800c846:	47b8      	blx	r7
 800c848:	3001      	adds	r0, #1
 800c84a:	f43f aefc 	beq.w	800c646 <_printf_float+0xba>
 800c84e:	f109 0901 	add.w	r9, r9, #1
 800c852:	e7ee      	b.n	800c832 <_printf_float+0x2a6>
 800c854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c858:	429a      	cmp	r2, r3
 800c85a:	bfa8      	it	ge
 800c85c:	461a      	movge	r2, r3
 800c85e:	2a00      	cmp	r2, #0
 800c860:	4691      	mov	r9, r2
 800c862:	dd07      	ble.n	800c874 <_printf_float+0x2e8>
 800c864:	4613      	mov	r3, r2
 800c866:	4631      	mov	r1, r6
 800c868:	4642      	mov	r2, r8
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b8      	blx	r7
 800c86e:	3001      	adds	r0, #1
 800c870:	f43f aee9 	beq.w	800c646 <_printf_float+0xba>
 800c874:	f104 031a 	add.w	r3, r4, #26
 800c878:	f04f 0b00 	mov.w	fp, #0
 800c87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c880:	9306      	str	r3, [sp, #24]
 800c882:	e015      	b.n	800c8b0 <_printf_float+0x324>
 800c884:	7fefffff 	.word	0x7fefffff
 800c888:	0800fe44 	.word	0x0800fe44
 800c88c:	0800fe40 	.word	0x0800fe40
 800c890:	0800fe4c 	.word	0x0800fe4c
 800c894:	0800fe48 	.word	0x0800fe48
 800c898:	0800fe50 	.word	0x0800fe50
 800c89c:	2301      	movs	r3, #1
 800c89e:	9a06      	ldr	r2, [sp, #24]
 800c8a0:	4631      	mov	r1, r6
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	47b8      	blx	r7
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	f43f aecd 	beq.w	800c646 <_printf_float+0xba>
 800c8ac:	f10b 0b01 	add.w	fp, fp, #1
 800c8b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c8b4:	ebaa 0309 	sub.w	r3, sl, r9
 800c8b8:	455b      	cmp	r3, fp
 800c8ba:	dcef      	bgt.n	800c89c <_printf_float+0x310>
 800c8bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	44d0      	add	r8, sl
 800c8c4:	db15      	blt.n	800c8f2 <_printf_float+0x366>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	07da      	lsls	r2, r3, #31
 800c8ca:	d412      	bmi.n	800c8f2 <_printf_float+0x366>
 800c8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8d0:	eba3 020a 	sub.w	r2, r3, sl
 800c8d4:	eba3 0a01 	sub.w	sl, r3, r1
 800c8d8:	4592      	cmp	sl, r2
 800c8da:	bfa8      	it	ge
 800c8dc:	4692      	movge	sl, r2
 800c8de:	f1ba 0f00 	cmp.w	sl, #0
 800c8e2:	dc0e      	bgt.n	800c902 <_printf_float+0x376>
 800c8e4:	f04f 0800 	mov.w	r8, #0
 800c8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8ec:	f104 091a 	add.w	r9, r4, #26
 800c8f0:	e019      	b.n	800c926 <_printf_float+0x39a>
 800c8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b8      	blx	r7
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d1e5      	bne.n	800c8cc <_printf_float+0x340>
 800c900:	e6a1      	b.n	800c646 <_printf_float+0xba>
 800c902:	4653      	mov	r3, sl
 800c904:	4642      	mov	r2, r8
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	d1e9      	bne.n	800c8e4 <_printf_float+0x358>
 800c910:	e699      	b.n	800c646 <_printf_float+0xba>
 800c912:	2301      	movs	r3, #1
 800c914:	464a      	mov	r2, r9
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae92 	beq.w	800c646 <_printf_float+0xba>
 800c922:	f108 0801 	add.w	r8, r8, #1
 800c926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c92a:	1a9b      	subs	r3, r3, r2
 800c92c:	eba3 030a 	sub.w	r3, r3, sl
 800c930:	4543      	cmp	r3, r8
 800c932:	dcee      	bgt.n	800c912 <_printf_float+0x386>
 800c934:	e74a      	b.n	800c7cc <_printf_float+0x240>
 800c936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c938:	2a01      	cmp	r2, #1
 800c93a:	dc01      	bgt.n	800c940 <_printf_float+0x3b4>
 800c93c:	07db      	lsls	r3, r3, #31
 800c93e:	d53a      	bpl.n	800c9b6 <_printf_float+0x42a>
 800c940:	2301      	movs	r3, #1
 800c942:	4642      	mov	r2, r8
 800c944:	4631      	mov	r1, r6
 800c946:	4628      	mov	r0, r5
 800c948:	47b8      	blx	r7
 800c94a:	3001      	adds	r0, #1
 800c94c:	f43f ae7b 	beq.w	800c646 <_printf_float+0xba>
 800c950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c954:	4631      	mov	r1, r6
 800c956:	4628      	mov	r0, r5
 800c958:	47b8      	blx	r7
 800c95a:	3001      	adds	r0, #1
 800c95c:	f108 0801 	add.w	r8, r8, #1
 800c960:	f43f ae71 	beq.w	800c646 <_printf_float+0xba>
 800c964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c966:	2200      	movs	r2, #0
 800c968:	f103 3aff 	add.w	sl, r3, #4294967295
 800c96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c970:	2300      	movs	r3, #0
 800c972:	f7f4 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c976:	b9c8      	cbnz	r0, 800c9ac <_printf_float+0x420>
 800c978:	4653      	mov	r3, sl
 800c97a:	4642      	mov	r2, r8
 800c97c:	4631      	mov	r1, r6
 800c97e:	4628      	mov	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	3001      	adds	r0, #1
 800c984:	d10e      	bne.n	800c9a4 <_printf_float+0x418>
 800c986:	e65e      	b.n	800c646 <_printf_float+0xba>
 800c988:	2301      	movs	r3, #1
 800c98a:	4652      	mov	r2, sl
 800c98c:	4631      	mov	r1, r6
 800c98e:	4628      	mov	r0, r5
 800c990:	47b8      	blx	r7
 800c992:	3001      	adds	r0, #1
 800c994:	f43f ae57 	beq.w	800c646 <_printf_float+0xba>
 800c998:	f108 0801 	add.w	r8, r8, #1
 800c99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	4543      	cmp	r3, r8
 800c9a2:	dcf1      	bgt.n	800c988 <_printf_float+0x3fc>
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9aa:	e6de      	b.n	800c76a <_printf_float+0x1de>
 800c9ac:	f04f 0800 	mov.w	r8, #0
 800c9b0:	f104 0a1a 	add.w	sl, r4, #26
 800c9b4:	e7f2      	b.n	800c99c <_printf_float+0x410>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e7df      	b.n	800c97a <_printf_float+0x3ee>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	464a      	mov	r2, r9
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	47b8      	blx	r7
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	f43f ae3e 	beq.w	800c646 <_printf_float+0xba>
 800c9ca:	f108 0801 	add.w	r8, r8, #1
 800c9ce:	68e3      	ldr	r3, [r4, #12]
 800c9d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	4543      	cmp	r3, r8
 800c9d6:	dcf0      	bgt.n	800c9ba <_printf_float+0x42e>
 800c9d8:	e6fc      	b.n	800c7d4 <_printf_float+0x248>
 800c9da:	f04f 0800 	mov.w	r8, #0
 800c9de:	f104 0919 	add.w	r9, r4, #25
 800c9e2:	e7f4      	b.n	800c9ce <_printf_float+0x442>
 800c9e4:	2900      	cmp	r1, #0
 800c9e6:	f43f ae8b 	beq.w	800c700 <_printf_float+0x174>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c9f0:	ab09      	add	r3, sp, #36	; 0x24
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	ec49 8b10 	vmov	d0, r8, r9
 800c9f8:	6022      	str	r2, [r4, #0]
 800c9fa:	f8cd a004 	str.w	sl, [sp, #4]
 800c9fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7ff fd2e 	bl	800c464 <__cvt>
 800ca08:	4680      	mov	r8, r0
 800ca0a:	e648      	b.n	800c69e <_printf_float+0x112>

0800ca0c <_printf_common>:
 800ca0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca10:	4691      	mov	r9, r2
 800ca12:	461f      	mov	r7, r3
 800ca14:	688a      	ldr	r2, [r1, #8]
 800ca16:	690b      	ldr	r3, [r1, #16]
 800ca18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	bfb8      	it	lt
 800ca20:	4613      	movlt	r3, r2
 800ca22:	f8c9 3000 	str.w	r3, [r9]
 800ca26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	b112      	cbz	r2, 800ca36 <_printf_common+0x2a>
 800ca30:	3301      	adds	r3, #1
 800ca32:	f8c9 3000 	str.w	r3, [r9]
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	0699      	lsls	r1, r3, #26
 800ca3a:	bf42      	ittt	mi
 800ca3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ca40:	3302      	addmi	r3, #2
 800ca42:	f8c9 3000 	strmi.w	r3, [r9]
 800ca46:	6825      	ldr	r5, [r4, #0]
 800ca48:	f015 0506 	ands.w	r5, r5, #6
 800ca4c:	d107      	bne.n	800ca5e <_printf_common+0x52>
 800ca4e:	f104 0a19 	add.w	sl, r4, #25
 800ca52:	68e3      	ldr	r3, [r4, #12]
 800ca54:	f8d9 2000 	ldr.w	r2, [r9]
 800ca58:	1a9b      	subs	r3, r3, r2
 800ca5a:	42ab      	cmp	r3, r5
 800ca5c:	dc28      	bgt.n	800cab0 <_printf_common+0xa4>
 800ca5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	3300      	adds	r3, #0
 800ca66:	bf18      	it	ne
 800ca68:	2301      	movne	r3, #1
 800ca6a:	0692      	lsls	r2, r2, #26
 800ca6c:	d42d      	bmi.n	800caca <_printf_common+0xbe>
 800ca6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca72:	4639      	mov	r1, r7
 800ca74:	4630      	mov	r0, r6
 800ca76:	47c0      	blx	r8
 800ca78:	3001      	adds	r0, #1
 800ca7a:	d020      	beq.n	800cabe <_printf_common+0xb2>
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	68e5      	ldr	r5, [r4, #12]
 800ca80:	f8d9 2000 	ldr.w	r2, [r9]
 800ca84:	f003 0306 	and.w	r3, r3, #6
 800ca88:	2b04      	cmp	r3, #4
 800ca8a:	bf08      	it	eq
 800ca8c:	1aad      	subeq	r5, r5, r2
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	6922      	ldr	r2, [r4, #16]
 800ca92:	bf0c      	ite	eq
 800ca94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca98:	2500      	movne	r5, #0
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	bfc4      	itt	gt
 800ca9e:	1a9b      	subgt	r3, r3, r2
 800caa0:	18ed      	addgt	r5, r5, r3
 800caa2:	f04f 0900 	mov.w	r9, #0
 800caa6:	341a      	adds	r4, #26
 800caa8:	454d      	cmp	r5, r9
 800caaa:	d11a      	bne.n	800cae2 <_printf_common+0xd6>
 800caac:	2000      	movs	r0, #0
 800caae:	e008      	b.n	800cac2 <_printf_common+0xb6>
 800cab0:	2301      	movs	r3, #1
 800cab2:	4652      	mov	r2, sl
 800cab4:	4639      	mov	r1, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	47c0      	blx	r8
 800caba:	3001      	adds	r0, #1
 800cabc:	d103      	bne.n	800cac6 <_printf_common+0xba>
 800cabe:	f04f 30ff 	mov.w	r0, #4294967295
 800cac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac6:	3501      	adds	r5, #1
 800cac8:	e7c3      	b.n	800ca52 <_printf_common+0x46>
 800caca:	18e1      	adds	r1, r4, r3
 800cacc:	1c5a      	adds	r2, r3, #1
 800cace:	2030      	movs	r0, #48	; 0x30
 800cad0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cad4:	4422      	add	r2, r4
 800cad6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cada:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cade:	3302      	adds	r3, #2
 800cae0:	e7c5      	b.n	800ca6e <_printf_common+0x62>
 800cae2:	2301      	movs	r3, #1
 800cae4:	4622      	mov	r2, r4
 800cae6:	4639      	mov	r1, r7
 800cae8:	4630      	mov	r0, r6
 800caea:	47c0      	blx	r8
 800caec:	3001      	adds	r0, #1
 800caee:	d0e6      	beq.n	800cabe <_printf_common+0xb2>
 800caf0:	f109 0901 	add.w	r9, r9, #1
 800caf4:	e7d8      	b.n	800caa8 <_printf_common+0x9c>
	...

0800caf8 <_printf_i>:
 800caf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cafc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cb00:	460c      	mov	r4, r1
 800cb02:	7e09      	ldrb	r1, [r1, #24]
 800cb04:	b085      	sub	sp, #20
 800cb06:	296e      	cmp	r1, #110	; 0x6e
 800cb08:	4617      	mov	r7, r2
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	4698      	mov	r8, r3
 800cb0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb10:	f000 80b3 	beq.w	800cc7a <_printf_i+0x182>
 800cb14:	d822      	bhi.n	800cb5c <_printf_i+0x64>
 800cb16:	2963      	cmp	r1, #99	; 0x63
 800cb18:	d036      	beq.n	800cb88 <_printf_i+0x90>
 800cb1a:	d80a      	bhi.n	800cb32 <_printf_i+0x3a>
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	f000 80b9 	beq.w	800cc94 <_printf_i+0x19c>
 800cb22:	2958      	cmp	r1, #88	; 0x58
 800cb24:	f000 8083 	beq.w	800cc2e <_printf_i+0x136>
 800cb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cb30:	e032      	b.n	800cb98 <_printf_i+0xa0>
 800cb32:	2964      	cmp	r1, #100	; 0x64
 800cb34:	d001      	beq.n	800cb3a <_printf_i+0x42>
 800cb36:	2969      	cmp	r1, #105	; 0x69
 800cb38:	d1f6      	bne.n	800cb28 <_printf_i+0x30>
 800cb3a:	6820      	ldr	r0, [r4, #0]
 800cb3c:	6813      	ldr	r3, [r2, #0]
 800cb3e:	0605      	lsls	r5, r0, #24
 800cb40:	f103 0104 	add.w	r1, r3, #4
 800cb44:	d52a      	bpl.n	800cb9c <_printf_i+0xa4>
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6011      	str	r1, [r2, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	da03      	bge.n	800cb56 <_printf_i+0x5e>
 800cb4e:	222d      	movs	r2, #45	; 0x2d
 800cb50:	425b      	negs	r3, r3
 800cb52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cb56:	486f      	ldr	r0, [pc, #444]	; (800cd14 <_printf_i+0x21c>)
 800cb58:	220a      	movs	r2, #10
 800cb5a:	e039      	b.n	800cbd0 <_printf_i+0xd8>
 800cb5c:	2973      	cmp	r1, #115	; 0x73
 800cb5e:	f000 809d 	beq.w	800cc9c <_printf_i+0x1a4>
 800cb62:	d808      	bhi.n	800cb76 <_printf_i+0x7e>
 800cb64:	296f      	cmp	r1, #111	; 0x6f
 800cb66:	d020      	beq.n	800cbaa <_printf_i+0xb2>
 800cb68:	2970      	cmp	r1, #112	; 0x70
 800cb6a:	d1dd      	bne.n	800cb28 <_printf_i+0x30>
 800cb6c:	6823      	ldr	r3, [r4, #0]
 800cb6e:	f043 0320 	orr.w	r3, r3, #32
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	e003      	b.n	800cb7e <_printf_i+0x86>
 800cb76:	2975      	cmp	r1, #117	; 0x75
 800cb78:	d017      	beq.n	800cbaa <_printf_i+0xb2>
 800cb7a:	2978      	cmp	r1, #120	; 0x78
 800cb7c:	d1d4      	bne.n	800cb28 <_printf_i+0x30>
 800cb7e:	2378      	movs	r3, #120	; 0x78
 800cb80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb84:	4864      	ldr	r0, [pc, #400]	; (800cd18 <_printf_i+0x220>)
 800cb86:	e055      	b.n	800cc34 <_printf_i+0x13c>
 800cb88:	6813      	ldr	r3, [r2, #0]
 800cb8a:	1d19      	adds	r1, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6011      	str	r1, [r2, #0]
 800cb90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e08c      	b.n	800ccb6 <_printf_i+0x1be>
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6011      	str	r1, [r2, #0]
 800cba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cba4:	bf18      	it	ne
 800cba6:	b21b      	sxthne	r3, r3
 800cba8:	e7cf      	b.n	800cb4a <_printf_i+0x52>
 800cbaa:	6813      	ldr	r3, [r2, #0]
 800cbac:	6825      	ldr	r5, [r4, #0]
 800cbae:	1d18      	adds	r0, r3, #4
 800cbb0:	6010      	str	r0, [r2, #0]
 800cbb2:	0628      	lsls	r0, r5, #24
 800cbb4:	d501      	bpl.n	800cbba <_printf_i+0xc2>
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	e002      	b.n	800cbc0 <_printf_i+0xc8>
 800cbba:	0668      	lsls	r0, r5, #25
 800cbbc:	d5fb      	bpl.n	800cbb6 <_printf_i+0xbe>
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	4854      	ldr	r0, [pc, #336]	; (800cd14 <_printf_i+0x21c>)
 800cbc2:	296f      	cmp	r1, #111	; 0x6f
 800cbc4:	bf14      	ite	ne
 800cbc6:	220a      	movne	r2, #10
 800cbc8:	2208      	moveq	r2, #8
 800cbca:	2100      	movs	r1, #0
 800cbcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbd0:	6865      	ldr	r5, [r4, #4]
 800cbd2:	60a5      	str	r5, [r4, #8]
 800cbd4:	2d00      	cmp	r5, #0
 800cbd6:	f2c0 8095 	blt.w	800cd04 <_printf_i+0x20c>
 800cbda:	6821      	ldr	r1, [r4, #0]
 800cbdc:	f021 0104 	bic.w	r1, r1, #4
 800cbe0:	6021      	str	r1, [r4, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d13d      	bne.n	800cc62 <_printf_i+0x16a>
 800cbe6:	2d00      	cmp	r5, #0
 800cbe8:	f040 808e 	bne.w	800cd08 <_printf_i+0x210>
 800cbec:	4665      	mov	r5, ip
 800cbee:	2a08      	cmp	r2, #8
 800cbf0:	d10b      	bne.n	800cc0a <_printf_i+0x112>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	07db      	lsls	r3, r3, #31
 800cbf6:	d508      	bpl.n	800cc0a <_printf_i+0x112>
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	6862      	ldr	r2, [r4, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	bfde      	ittt	le
 800cc00:	2330      	movle	r3, #48	; 0x30
 800cc02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc0a:	ebac 0305 	sub.w	r3, ip, r5
 800cc0e:	6123      	str	r3, [r4, #16]
 800cc10:	f8cd 8000 	str.w	r8, [sp]
 800cc14:	463b      	mov	r3, r7
 800cc16:	aa03      	add	r2, sp, #12
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff fef6 	bl	800ca0c <_printf_common>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d14d      	bne.n	800ccc0 <_printf_i+0x1c8>
 800cc24:	f04f 30ff 	mov.w	r0, #4294967295
 800cc28:	b005      	add	sp, #20
 800cc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	4839      	ldr	r0, [pc, #228]	; (800cd14 <_printf_i+0x21c>)
 800cc30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cc34:	6813      	ldr	r3, [r2, #0]
 800cc36:	6821      	ldr	r1, [r4, #0]
 800cc38:	1d1d      	adds	r5, r3, #4
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	6015      	str	r5, [r2, #0]
 800cc3e:	060a      	lsls	r2, r1, #24
 800cc40:	d50b      	bpl.n	800cc5a <_printf_i+0x162>
 800cc42:	07ca      	lsls	r2, r1, #31
 800cc44:	bf44      	itt	mi
 800cc46:	f041 0120 	orrmi.w	r1, r1, #32
 800cc4a:	6021      	strmi	r1, [r4, #0]
 800cc4c:	b91b      	cbnz	r3, 800cc56 <_printf_i+0x15e>
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	f022 0220 	bic.w	r2, r2, #32
 800cc54:	6022      	str	r2, [r4, #0]
 800cc56:	2210      	movs	r2, #16
 800cc58:	e7b7      	b.n	800cbca <_printf_i+0xd2>
 800cc5a:	064d      	lsls	r5, r1, #25
 800cc5c:	bf48      	it	mi
 800cc5e:	b29b      	uxthmi	r3, r3
 800cc60:	e7ef      	b.n	800cc42 <_printf_i+0x14a>
 800cc62:	4665      	mov	r5, ip
 800cc64:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc68:	fb02 3311 	mls	r3, r2, r1, r3
 800cc6c:	5cc3      	ldrb	r3, [r0, r3]
 800cc6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cc72:	460b      	mov	r3, r1
 800cc74:	2900      	cmp	r1, #0
 800cc76:	d1f5      	bne.n	800cc64 <_printf_i+0x16c>
 800cc78:	e7b9      	b.n	800cbee <_printf_i+0xf6>
 800cc7a:	6813      	ldr	r3, [r2, #0]
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	6961      	ldr	r1, [r4, #20]
 800cc80:	1d18      	adds	r0, r3, #4
 800cc82:	6010      	str	r0, [r2, #0]
 800cc84:	0628      	lsls	r0, r5, #24
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	d501      	bpl.n	800cc8e <_printf_i+0x196>
 800cc8a:	6019      	str	r1, [r3, #0]
 800cc8c:	e002      	b.n	800cc94 <_printf_i+0x19c>
 800cc8e:	066a      	lsls	r2, r5, #25
 800cc90:	d5fb      	bpl.n	800cc8a <_printf_i+0x192>
 800cc92:	8019      	strh	r1, [r3, #0]
 800cc94:	2300      	movs	r3, #0
 800cc96:	6123      	str	r3, [r4, #16]
 800cc98:	4665      	mov	r5, ip
 800cc9a:	e7b9      	b.n	800cc10 <_printf_i+0x118>
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	1d19      	adds	r1, r3, #4
 800cca0:	6011      	str	r1, [r2, #0]
 800cca2:	681d      	ldr	r5, [r3, #0]
 800cca4:	6862      	ldr	r2, [r4, #4]
 800cca6:	2100      	movs	r1, #0
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f7f3 fa99 	bl	80001e0 <memchr>
 800ccae:	b108      	cbz	r0, 800ccb4 <_printf_i+0x1bc>
 800ccb0:	1b40      	subs	r0, r0, r5
 800ccb2:	6060      	str	r0, [r4, #4]
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccbe:	e7a7      	b.n	800cc10 <_printf_i+0x118>
 800ccc0:	6923      	ldr	r3, [r4, #16]
 800ccc2:	462a      	mov	r2, r5
 800ccc4:	4639      	mov	r1, r7
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	47c0      	blx	r8
 800ccca:	3001      	adds	r0, #1
 800cccc:	d0aa      	beq.n	800cc24 <_printf_i+0x12c>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	079b      	lsls	r3, r3, #30
 800ccd2:	d413      	bmi.n	800ccfc <_printf_i+0x204>
 800ccd4:	68e0      	ldr	r0, [r4, #12]
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	4298      	cmp	r0, r3
 800ccda:	bfb8      	it	lt
 800ccdc:	4618      	movlt	r0, r3
 800ccde:	e7a3      	b.n	800cc28 <_printf_i+0x130>
 800cce0:	2301      	movs	r3, #1
 800cce2:	464a      	mov	r2, r9
 800cce4:	4639      	mov	r1, r7
 800cce6:	4630      	mov	r0, r6
 800cce8:	47c0      	blx	r8
 800ccea:	3001      	adds	r0, #1
 800ccec:	d09a      	beq.n	800cc24 <_printf_i+0x12c>
 800ccee:	3501      	adds	r5, #1
 800ccf0:	68e3      	ldr	r3, [r4, #12]
 800ccf2:	9a03      	ldr	r2, [sp, #12]
 800ccf4:	1a9b      	subs	r3, r3, r2
 800ccf6:	42ab      	cmp	r3, r5
 800ccf8:	dcf2      	bgt.n	800cce0 <_printf_i+0x1e8>
 800ccfa:	e7eb      	b.n	800ccd4 <_printf_i+0x1dc>
 800ccfc:	2500      	movs	r5, #0
 800ccfe:	f104 0919 	add.w	r9, r4, #25
 800cd02:	e7f5      	b.n	800ccf0 <_printf_i+0x1f8>
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1ac      	bne.n	800cc62 <_printf_i+0x16a>
 800cd08:	7803      	ldrb	r3, [r0, #0]
 800cd0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd12:	e76c      	b.n	800cbee <_printf_i+0xf6>
 800cd14:	0800fe52 	.word	0x0800fe52
 800cd18:	0800fe63 	.word	0x0800fe63

0800cd1c <_scanf_float>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	469a      	mov	sl, r3
 800cd22:	688b      	ldr	r3, [r1, #8]
 800cd24:	4616      	mov	r6, r2
 800cd26:	1e5a      	subs	r2, r3, #1
 800cd28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cd2c:	b087      	sub	sp, #28
 800cd2e:	bf83      	ittte	hi
 800cd30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cd34:	189b      	addhi	r3, r3, r2
 800cd36:	9301      	strhi	r3, [sp, #4]
 800cd38:	2300      	movls	r3, #0
 800cd3a:	bf86      	itte	hi
 800cd3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cd40:	608b      	strhi	r3, [r1, #8]
 800cd42:	9301      	strls	r3, [sp, #4]
 800cd44:	680b      	ldr	r3, [r1, #0]
 800cd46:	4688      	mov	r8, r1
 800cd48:	f04f 0b00 	mov.w	fp, #0
 800cd4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cd50:	f848 3b1c 	str.w	r3, [r8], #28
 800cd54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800cd58:	4607      	mov	r7, r0
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	4645      	mov	r5, r8
 800cd5e:	465a      	mov	r2, fp
 800cd60:	46d9      	mov	r9, fp
 800cd62:	f8cd b008 	str.w	fp, [sp, #8]
 800cd66:	68a1      	ldr	r1, [r4, #8]
 800cd68:	b181      	cbz	r1, 800cd8c <_scanf_float+0x70>
 800cd6a:	6833      	ldr	r3, [r6, #0]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b49      	cmp	r3, #73	; 0x49
 800cd70:	d071      	beq.n	800ce56 <_scanf_float+0x13a>
 800cd72:	d84d      	bhi.n	800ce10 <_scanf_float+0xf4>
 800cd74:	2b39      	cmp	r3, #57	; 0x39
 800cd76:	d840      	bhi.n	800cdfa <_scanf_float+0xde>
 800cd78:	2b31      	cmp	r3, #49	; 0x31
 800cd7a:	f080 8088 	bcs.w	800ce8e <_scanf_float+0x172>
 800cd7e:	2b2d      	cmp	r3, #45	; 0x2d
 800cd80:	f000 8090 	beq.w	800cea4 <_scanf_float+0x188>
 800cd84:	d815      	bhi.n	800cdb2 <_scanf_float+0x96>
 800cd86:	2b2b      	cmp	r3, #43	; 0x2b
 800cd88:	f000 808c 	beq.w	800cea4 <_scanf_float+0x188>
 800cd8c:	f1b9 0f00 	cmp.w	r9, #0
 800cd90:	d003      	beq.n	800cd9a <_scanf_float+0x7e>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	3a01      	subs	r2, #1
 800cd9c:	2a01      	cmp	r2, #1
 800cd9e:	f200 80ea 	bhi.w	800cf76 <_scanf_float+0x25a>
 800cda2:	4545      	cmp	r5, r8
 800cda4:	f200 80dc 	bhi.w	800cf60 <_scanf_float+0x244>
 800cda8:	2601      	movs	r6, #1
 800cdaa:	4630      	mov	r0, r6
 800cdac:	b007      	add	sp, #28
 800cdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb2:	2b2e      	cmp	r3, #46	; 0x2e
 800cdb4:	f000 809f 	beq.w	800cef6 <_scanf_float+0x1da>
 800cdb8:	2b30      	cmp	r3, #48	; 0x30
 800cdba:	d1e7      	bne.n	800cd8c <_scanf_float+0x70>
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800cdc2:	d064      	beq.n	800ce8e <_scanf_float+0x172>
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cdca:	6020      	str	r0, [r4, #0]
 800cdcc:	f109 0901 	add.w	r9, r9, #1
 800cdd0:	b11b      	cbz	r3, 800cdda <_scanf_float+0xbe>
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	3101      	adds	r1, #1
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	60a1      	str	r1, [r4, #8]
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	60a3      	str	r3, [r4, #8]
 800cde0:	6923      	ldr	r3, [r4, #16]
 800cde2:	3301      	adds	r3, #1
 800cde4:	6123      	str	r3, [r4, #16]
 800cde6:	6873      	ldr	r3, [r6, #4]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	6073      	str	r3, [r6, #4]
 800cdee:	f340 80ac 	ble.w	800cf4a <_scanf_float+0x22e>
 800cdf2:	6833      	ldr	r3, [r6, #0]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	6033      	str	r3, [r6, #0]
 800cdf8:	e7b5      	b.n	800cd66 <_scanf_float+0x4a>
 800cdfa:	2b45      	cmp	r3, #69	; 0x45
 800cdfc:	f000 8085 	beq.w	800cf0a <_scanf_float+0x1ee>
 800ce00:	2b46      	cmp	r3, #70	; 0x46
 800ce02:	d06a      	beq.n	800ceda <_scanf_float+0x1be>
 800ce04:	2b41      	cmp	r3, #65	; 0x41
 800ce06:	d1c1      	bne.n	800cd8c <_scanf_float+0x70>
 800ce08:	2a01      	cmp	r2, #1
 800ce0a:	d1bf      	bne.n	800cd8c <_scanf_float+0x70>
 800ce0c:	2202      	movs	r2, #2
 800ce0e:	e046      	b.n	800ce9e <_scanf_float+0x182>
 800ce10:	2b65      	cmp	r3, #101	; 0x65
 800ce12:	d07a      	beq.n	800cf0a <_scanf_float+0x1ee>
 800ce14:	d818      	bhi.n	800ce48 <_scanf_float+0x12c>
 800ce16:	2b54      	cmp	r3, #84	; 0x54
 800ce18:	d066      	beq.n	800cee8 <_scanf_float+0x1cc>
 800ce1a:	d811      	bhi.n	800ce40 <_scanf_float+0x124>
 800ce1c:	2b4e      	cmp	r3, #78	; 0x4e
 800ce1e:	d1b5      	bne.n	800cd8c <_scanf_float+0x70>
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	d146      	bne.n	800ceb2 <_scanf_float+0x196>
 800ce24:	f1b9 0f00 	cmp.w	r9, #0
 800ce28:	d145      	bne.n	800ceb6 <_scanf_float+0x19a>
 800ce2a:	6821      	ldr	r1, [r4, #0]
 800ce2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ce30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ce34:	d13f      	bne.n	800ceb6 <_scanf_float+0x19a>
 800ce36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ce3a:	6021      	str	r1, [r4, #0]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	e02e      	b.n	800ce9e <_scanf_float+0x182>
 800ce40:	2b59      	cmp	r3, #89	; 0x59
 800ce42:	d01e      	beq.n	800ce82 <_scanf_float+0x166>
 800ce44:	2b61      	cmp	r3, #97	; 0x61
 800ce46:	e7de      	b.n	800ce06 <_scanf_float+0xea>
 800ce48:	2b6e      	cmp	r3, #110	; 0x6e
 800ce4a:	d0e9      	beq.n	800ce20 <_scanf_float+0x104>
 800ce4c:	d815      	bhi.n	800ce7a <_scanf_float+0x15e>
 800ce4e:	2b66      	cmp	r3, #102	; 0x66
 800ce50:	d043      	beq.n	800ceda <_scanf_float+0x1be>
 800ce52:	2b69      	cmp	r3, #105	; 0x69
 800ce54:	d19a      	bne.n	800cd8c <_scanf_float+0x70>
 800ce56:	f1bb 0f00 	cmp.w	fp, #0
 800ce5a:	d138      	bne.n	800cece <_scanf_float+0x1b2>
 800ce5c:	f1b9 0f00 	cmp.w	r9, #0
 800ce60:	d197      	bne.n	800cd92 <_scanf_float+0x76>
 800ce62:	6821      	ldr	r1, [r4, #0]
 800ce64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ce68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ce6c:	d195      	bne.n	800cd9a <_scanf_float+0x7e>
 800ce6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ce72:	6021      	str	r1, [r4, #0]
 800ce74:	f04f 0b01 	mov.w	fp, #1
 800ce78:	e011      	b.n	800ce9e <_scanf_float+0x182>
 800ce7a:	2b74      	cmp	r3, #116	; 0x74
 800ce7c:	d034      	beq.n	800cee8 <_scanf_float+0x1cc>
 800ce7e:	2b79      	cmp	r3, #121	; 0x79
 800ce80:	d184      	bne.n	800cd8c <_scanf_float+0x70>
 800ce82:	f1bb 0f07 	cmp.w	fp, #7
 800ce86:	d181      	bne.n	800cd8c <_scanf_float+0x70>
 800ce88:	f04f 0b08 	mov.w	fp, #8
 800ce8c:	e007      	b.n	800ce9e <_scanf_float+0x182>
 800ce8e:	eb12 0f0b 	cmn.w	r2, fp
 800ce92:	f47f af7b 	bne.w	800cd8c <_scanf_float+0x70>
 800ce96:	6821      	ldr	r1, [r4, #0]
 800ce98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ce9c:	6021      	str	r1, [r4, #0]
 800ce9e:	702b      	strb	r3, [r5, #0]
 800cea0:	3501      	adds	r5, #1
 800cea2:	e79a      	b.n	800cdda <_scanf_float+0xbe>
 800cea4:	6821      	ldr	r1, [r4, #0]
 800cea6:	0608      	lsls	r0, r1, #24
 800cea8:	f57f af70 	bpl.w	800cd8c <_scanf_float+0x70>
 800ceac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ceb0:	e7f4      	b.n	800ce9c <_scanf_float+0x180>
 800ceb2:	2a02      	cmp	r2, #2
 800ceb4:	d047      	beq.n	800cf46 <_scanf_float+0x22a>
 800ceb6:	f1bb 0f01 	cmp.w	fp, #1
 800ceba:	d003      	beq.n	800cec4 <_scanf_float+0x1a8>
 800cebc:	f1bb 0f04 	cmp.w	fp, #4
 800cec0:	f47f af64 	bne.w	800cd8c <_scanf_float+0x70>
 800cec4:	f10b 0b01 	add.w	fp, fp, #1
 800cec8:	fa5f fb8b 	uxtb.w	fp, fp
 800cecc:	e7e7      	b.n	800ce9e <_scanf_float+0x182>
 800cece:	f1bb 0f03 	cmp.w	fp, #3
 800ced2:	d0f7      	beq.n	800cec4 <_scanf_float+0x1a8>
 800ced4:	f1bb 0f05 	cmp.w	fp, #5
 800ced8:	e7f2      	b.n	800cec0 <_scanf_float+0x1a4>
 800ceda:	f1bb 0f02 	cmp.w	fp, #2
 800cede:	f47f af55 	bne.w	800cd8c <_scanf_float+0x70>
 800cee2:	f04f 0b03 	mov.w	fp, #3
 800cee6:	e7da      	b.n	800ce9e <_scanf_float+0x182>
 800cee8:	f1bb 0f06 	cmp.w	fp, #6
 800ceec:	f47f af4e 	bne.w	800cd8c <_scanf_float+0x70>
 800cef0:	f04f 0b07 	mov.w	fp, #7
 800cef4:	e7d3      	b.n	800ce9e <_scanf_float+0x182>
 800cef6:	6821      	ldr	r1, [r4, #0]
 800cef8:	0588      	lsls	r0, r1, #22
 800cefa:	f57f af47 	bpl.w	800cd8c <_scanf_float+0x70>
 800cefe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800cf02:	6021      	str	r1, [r4, #0]
 800cf04:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf08:	e7c9      	b.n	800ce9e <_scanf_float+0x182>
 800cf0a:	6821      	ldr	r1, [r4, #0]
 800cf0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cf10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cf14:	d006      	beq.n	800cf24 <_scanf_float+0x208>
 800cf16:	0548      	lsls	r0, r1, #21
 800cf18:	f57f af38 	bpl.w	800cd8c <_scanf_float+0x70>
 800cf1c:	f1b9 0f00 	cmp.w	r9, #0
 800cf20:	f43f af3b 	beq.w	800cd9a <_scanf_float+0x7e>
 800cf24:	0588      	lsls	r0, r1, #22
 800cf26:	bf58      	it	pl
 800cf28:	9802      	ldrpl	r0, [sp, #8]
 800cf2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cf2e:	bf58      	it	pl
 800cf30:	eba9 0000 	subpl.w	r0, r9, r0
 800cf34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cf38:	bf58      	it	pl
 800cf3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cf3e:	6021      	str	r1, [r4, #0]
 800cf40:	f04f 0900 	mov.w	r9, #0
 800cf44:	e7ab      	b.n	800ce9e <_scanf_float+0x182>
 800cf46:	2203      	movs	r2, #3
 800cf48:	e7a9      	b.n	800ce9e <_scanf_float+0x182>
 800cf4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf4e:	9205      	str	r2, [sp, #20]
 800cf50:	4631      	mov	r1, r6
 800cf52:	4638      	mov	r0, r7
 800cf54:	4798      	blx	r3
 800cf56:	9a05      	ldr	r2, [sp, #20]
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f43f af04 	beq.w	800cd66 <_scanf_float+0x4a>
 800cf5e:	e715      	b.n	800cd8c <_scanf_float+0x70>
 800cf60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cf68:	4632      	mov	r2, r6
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	4798      	blx	r3
 800cf6e:	6923      	ldr	r3, [r4, #16]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	6123      	str	r3, [r4, #16]
 800cf74:	e715      	b.n	800cda2 <_scanf_float+0x86>
 800cf76:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cf7a:	2b06      	cmp	r3, #6
 800cf7c:	d80a      	bhi.n	800cf94 <_scanf_float+0x278>
 800cf7e:	f1bb 0f02 	cmp.w	fp, #2
 800cf82:	d968      	bls.n	800d056 <_scanf_float+0x33a>
 800cf84:	f1ab 0b03 	sub.w	fp, fp, #3
 800cf88:	fa5f fb8b 	uxtb.w	fp, fp
 800cf8c:	eba5 0b0b 	sub.w	fp, r5, fp
 800cf90:	455d      	cmp	r5, fp
 800cf92:	d14b      	bne.n	800d02c <_scanf_float+0x310>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	05da      	lsls	r2, r3, #23
 800cf98:	d51f      	bpl.n	800cfda <_scanf_float+0x2be>
 800cf9a:	055b      	lsls	r3, r3, #21
 800cf9c:	d468      	bmi.n	800d070 <_scanf_float+0x354>
 800cf9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cfa2:	6923      	ldr	r3, [r4, #16]
 800cfa4:	2965      	cmp	r1, #101	; 0x65
 800cfa6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfaa:	f105 3bff 	add.w	fp, r5, #4294967295
 800cfae:	6123      	str	r3, [r4, #16]
 800cfb0:	d00d      	beq.n	800cfce <_scanf_float+0x2b2>
 800cfb2:	2945      	cmp	r1, #69	; 0x45
 800cfb4:	d00b      	beq.n	800cfce <_scanf_float+0x2b2>
 800cfb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfba:	4632      	mov	r2, r6
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	4798      	blx	r3
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	f1a5 0b02 	sub.w	fp, r5, #2
 800cfcc:	6123      	str	r3, [r4, #16]
 800cfce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfd2:	4632      	mov	r2, r6
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	4798      	blx	r3
 800cfd8:	465d      	mov	r5, fp
 800cfda:	6826      	ldr	r6, [r4, #0]
 800cfdc:	f016 0610 	ands.w	r6, r6, #16
 800cfe0:	d17a      	bne.n	800d0d8 <_scanf_float+0x3bc>
 800cfe2:	702e      	strb	r6, [r5, #0]
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cfea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfee:	d142      	bne.n	800d076 <_scanf_float+0x35a>
 800cff0:	9b02      	ldr	r3, [sp, #8]
 800cff2:	eba9 0303 	sub.w	r3, r9, r3
 800cff6:	425a      	negs	r2, r3
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d149      	bne.n	800d090 <_scanf_float+0x374>
 800cffc:	2200      	movs	r2, #0
 800cffe:	4641      	mov	r1, r8
 800d000:	4638      	mov	r0, r7
 800d002:	f000 fec5 	bl	800dd90 <_strtod_r>
 800d006:	6825      	ldr	r5, [r4, #0]
 800d008:	f8da 3000 	ldr.w	r3, [sl]
 800d00c:	f015 0f02 	tst.w	r5, #2
 800d010:	f103 0204 	add.w	r2, r3, #4
 800d014:	ec59 8b10 	vmov	r8, r9, d0
 800d018:	f8ca 2000 	str.w	r2, [sl]
 800d01c:	d043      	beq.n	800d0a6 <_scanf_float+0x38a>
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	e9c3 8900 	strd	r8, r9, [r3]
 800d024:	68e3      	ldr	r3, [r4, #12]
 800d026:	3301      	adds	r3, #1
 800d028:	60e3      	str	r3, [r4, #12]
 800d02a:	e6be      	b.n	800cdaa <_scanf_float+0x8e>
 800d02c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d030:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d034:	4632      	mov	r2, r6
 800d036:	4638      	mov	r0, r7
 800d038:	4798      	blx	r3
 800d03a:	6923      	ldr	r3, [r4, #16]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	6123      	str	r3, [r4, #16]
 800d040:	e7a6      	b.n	800cf90 <_scanf_float+0x274>
 800d042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d046:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d04a:	4632      	mov	r2, r6
 800d04c:	4638      	mov	r0, r7
 800d04e:	4798      	blx	r3
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	3b01      	subs	r3, #1
 800d054:	6123      	str	r3, [r4, #16]
 800d056:	4545      	cmp	r5, r8
 800d058:	d8f3      	bhi.n	800d042 <_scanf_float+0x326>
 800d05a:	e6a5      	b.n	800cda8 <_scanf_float+0x8c>
 800d05c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d060:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d064:	4632      	mov	r2, r6
 800d066:	4638      	mov	r0, r7
 800d068:	4798      	blx	r3
 800d06a:	6923      	ldr	r3, [r4, #16]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	6123      	str	r3, [r4, #16]
 800d070:	4545      	cmp	r5, r8
 800d072:	d8f3      	bhi.n	800d05c <_scanf_float+0x340>
 800d074:	e698      	b.n	800cda8 <_scanf_float+0x8c>
 800d076:	9b03      	ldr	r3, [sp, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d0bf      	beq.n	800cffc <_scanf_float+0x2e0>
 800d07c:	9904      	ldr	r1, [sp, #16]
 800d07e:	230a      	movs	r3, #10
 800d080:	4632      	mov	r2, r6
 800d082:	3101      	adds	r1, #1
 800d084:	4638      	mov	r0, r7
 800d086:	f000 ff0f 	bl	800dea8 <_strtol_r>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	9d04      	ldr	r5, [sp, #16]
 800d08e:	1ac2      	subs	r2, r0, r3
 800d090:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d094:	429d      	cmp	r5, r3
 800d096:	bf28      	it	cs
 800d098:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d09c:	490f      	ldr	r1, [pc, #60]	; (800d0dc <_scanf_float+0x3c0>)
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f834 	bl	800d10c <siprintf>
 800d0a4:	e7aa      	b.n	800cffc <_scanf_float+0x2e0>
 800d0a6:	f015 0504 	ands.w	r5, r5, #4
 800d0aa:	d1b8      	bne.n	800d01e <_scanf_float+0x302>
 800d0ac:	681f      	ldr	r7, [r3, #0]
 800d0ae:	ee10 2a10 	vmov	r2, s0
 800d0b2:	464b      	mov	r3, r9
 800d0b4:	ee10 0a10 	vmov	r0, s0
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	f7f3 fd37 	bl	8000b2c <__aeabi_dcmpun>
 800d0be:	b128      	cbz	r0, 800d0cc <_scanf_float+0x3b0>
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f000 f81d 	bl	800d100 <nanf>
 800d0c6:	ed87 0a00 	vstr	s0, [r7]
 800d0ca:	e7ab      	b.n	800d024 <_scanf_float+0x308>
 800d0cc:	4640      	mov	r0, r8
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	f7f3 fd8a 	bl	8000be8 <__aeabi_d2f>
 800d0d4:	6038      	str	r0, [r7, #0]
 800d0d6:	e7a5      	b.n	800d024 <_scanf_float+0x308>
 800d0d8:	2600      	movs	r6, #0
 800d0da:	e666      	b.n	800cdaa <_scanf_float+0x8e>
 800d0dc:	0800fe74 	.word	0x0800fe74

0800d0e0 <_sbrk_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4c06      	ldr	r4, [pc, #24]	; (800d0fc <_sbrk_r+0x1c>)
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	6023      	str	r3, [r4, #0]
 800d0ec:	f7fe fb0e 	bl	800b70c <_sbrk>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_sbrk_r+0x1a>
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_sbrk_r+0x1a>
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	200043d0 	.word	0x200043d0

0800d100 <nanf>:
 800d100:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d108 <nanf+0x8>
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	7fc00000 	.word	0x7fc00000

0800d10c <siprintf>:
 800d10c:	b40e      	push	{r1, r2, r3}
 800d10e:	b500      	push	{lr}
 800d110:	b09c      	sub	sp, #112	; 0x70
 800d112:	ab1d      	add	r3, sp, #116	; 0x74
 800d114:	9002      	str	r0, [sp, #8]
 800d116:	9006      	str	r0, [sp, #24]
 800d118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d11c:	4809      	ldr	r0, [pc, #36]	; (800d144 <siprintf+0x38>)
 800d11e:	9107      	str	r1, [sp, #28]
 800d120:	9104      	str	r1, [sp, #16]
 800d122:	4909      	ldr	r1, [pc, #36]	; (800d148 <siprintf+0x3c>)
 800d124:	f853 2b04 	ldr.w	r2, [r3], #4
 800d128:	9105      	str	r1, [sp, #20]
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	a902      	add	r1, sp, #8
 800d130:	f002 fce8 	bl	800fb04 <_svfiprintf_r>
 800d134:	9b02      	ldr	r3, [sp, #8]
 800d136:	2200      	movs	r2, #0
 800d138:	701a      	strb	r2, [r3, #0]
 800d13a:	b01c      	add	sp, #112	; 0x70
 800d13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d140:	b003      	add	sp, #12
 800d142:	4770      	bx	lr
 800d144:	2000017c 	.word	0x2000017c
 800d148:	ffff0208 	.word	0xffff0208

0800d14c <strncmp>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	b16a      	cbz	r2, 800d16c <strncmp+0x20>
 800d150:	3901      	subs	r1, #1
 800d152:	1884      	adds	r4, r0, r2
 800d154:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d158:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d103      	bne.n	800d168 <strncmp+0x1c>
 800d160:	42a0      	cmp	r0, r4
 800d162:	d001      	beq.n	800d168 <strncmp+0x1c>
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1f5      	bne.n	800d154 <strncmp+0x8>
 800d168:	1a98      	subs	r0, r3, r2
 800d16a:	bd10      	pop	{r4, pc}
 800d16c:	4610      	mov	r0, r2
 800d16e:	e7fc      	b.n	800d16a <strncmp+0x1e>

0800d170 <sulp>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	4604      	mov	r4, r0
 800d174:	460d      	mov	r5, r1
 800d176:	ec45 4b10 	vmov	d0, r4, r5
 800d17a:	4616      	mov	r6, r2
 800d17c:	f002 fb26 	bl	800f7cc <__ulp>
 800d180:	ec51 0b10 	vmov	r0, r1, d0
 800d184:	b17e      	cbz	r6, 800d1a6 <sulp+0x36>
 800d186:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d18a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dd09      	ble.n	800d1a6 <sulp+0x36>
 800d192:	051b      	lsls	r3, r3, #20
 800d194:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d198:	2400      	movs	r4, #0
 800d19a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d19e:	4622      	mov	r2, r4
 800d1a0:	462b      	mov	r3, r5
 800d1a2:	f7f3 fa29 	bl	80005f8 <__aeabi_dmul>
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}

0800d1a8 <_strtod_l>:
 800d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ac:	461f      	mov	r7, r3
 800d1ae:	b0a1      	sub	sp, #132	; 0x84
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4681      	mov	r9, r0
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	460e      	mov	r6, r1
 800d1b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1ba:	931c      	str	r3, [sp, #112]	; 0x70
 800d1bc:	f002 f815 	bl	800f1ea <__localeconv_l>
 800d1c0:	4680      	mov	r8, r0
 800d1c2:	6800      	ldr	r0, [r0, #0]
 800d1c4:	f7f3 f804 	bl	80001d0 <strlen>
 800d1c8:	f04f 0a00 	mov.w	sl, #0
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	f04f 0b00 	mov.w	fp, #0
 800d1d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	2a0d      	cmp	r2, #13
 800d1da:	d832      	bhi.n	800d242 <_strtod_l+0x9a>
 800d1dc:	2a09      	cmp	r2, #9
 800d1de:	d236      	bcs.n	800d24e <_strtod_l+0xa6>
 800d1e0:	2a00      	cmp	r2, #0
 800d1e2:	d03e      	beq.n	800d262 <_strtod_l+0xba>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	930d      	str	r3, [sp, #52]	; 0x34
 800d1e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d1ea:	782b      	ldrb	r3, [r5, #0]
 800d1ec:	2b30      	cmp	r3, #48	; 0x30
 800d1ee:	f040 80ac 	bne.w	800d34a <_strtod_l+0x1a2>
 800d1f2:	786b      	ldrb	r3, [r5, #1]
 800d1f4:	2b58      	cmp	r3, #88	; 0x58
 800d1f6:	d001      	beq.n	800d1fc <_strtod_l+0x54>
 800d1f8:	2b78      	cmp	r3, #120	; 0x78
 800d1fa:	d167      	bne.n	800d2cc <_strtod_l+0x124>
 800d1fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	ab1c      	add	r3, sp, #112	; 0x70
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	9702      	str	r7, [sp, #8]
 800d206:	ab1d      	add	r3, sp, #116	; 0x74
 800d208:	4a88      	ldr	r2, [pc, #544]	; (800d42c <_strtod_l+0x284>)
 800d20a:	a91b      	add	r1, sp, #108	; 0x6c
 800d20c:	4648      	mov	r0, r9
 800d20e:	f001 fd12 	bl	800ec36 <__gethex>
 800d212:	f010 0407 	ands.w	r4, r0, #7
 800d216:	4606      	mov	r6, r0
 800d218:	d005      	beq.n	800d226 <_strtod_l+0x7e>
 800d21a:	2c06      	cmp	r4, #6
 800d21c:	d12b      	bne.n	800d276 <_strtod_l+0xce>
 800d21e:	3501      	adds	r5, #1
 800d220:	2300      	movs	r3, #0
 800d222:	951b      	str	r5, [sp, #108]	; 0x6c
 800d224:	930d      	str	r3, [sp, #52]	; 0x34
 800d226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f040 859a 	bne.w	800dd62 <_strtod_l+0xbba>
 800d22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d230:	b1e3      	cbz	r3, 800d26c <_strtod_l+0xc4>
 800d232:	4652      	mov	r2, sl
 800d234:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d238:	ec43 2b10 	vmov	d0, r2, r3
 800d23c:	b021      	add	sp, #132	; 0x84
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	2a2b      	cmp	r2, #43	; 0x2b
 800d244:	d015      	beq.n	800d272 <_strtod_l+0xca>
 800d246:	2a2d      	cmp	r2, #45	; 0x2d
 800d248:	d004      	beq.n	800d254 <_strtod_l+0xac>
 800d24a:	2a20      	cmp	r2, #32
 800d24c:	d1ca      	bne.n	800d1e4 <_strtod_l+0x3c>
 800d24e:	3301      	adds	r3, #1
 800d250:	931b      	str	r3, [sp, #108]	; 0x6c
 800d252:	e7bf      	b.n	800d1d4 <_strtod_l+0x2c>
 800d254:	2201      	movs	r2, #1
 800d256:	920d      	str	r2, [sp, #52]	; 0x34
 800d258:	1c5a      	adds	r2, r3, #1
 800d25a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1c2      	bne.n	800d1e8 <_strtod_l+0x40>
 800d262:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d264:	961b      	str	r6, [sp, #108]	; 0x6c
 800d266:	2b00      	cmp	r3, #0
 800d268:	f040 8579 	bne.w	800dd5e <_strtod_l+0xbb6>
 800d26c:	4652      	mov	r2, sl
 800d26e:	465b      	mov	r3, fp
 800d270:	e7e2      	b.n	800d238 <_strtod_l+0x90>
 800d272:	2200      	movs	r2, #0
 800d274:	e7ef      	b.n	800d256 <_strtod_l+0xae>
 800d276:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d278:	b13a      	cbz	r2, 800d28a <_strtod_l+0xe2>
 800d27a:	2135      	movs	r1, #53	; 0x35
 800d27c:	a81e      	add	r0, sp, #120	; 0x78
 800d27e:	f002 fb9d 	bl	800f9bc <__copybits>
 800d282:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d284:	4648      	mov	r0, r9
 800d286:	f002 f809 	bl	800f29c <_Bfree>
 800d28a:	3c01      	subs	r4, #1
 800d28c:	2c04      	cmp	r4, #4
 800d28e:	d806      	bhi.n	800d29e <_strtod_l+0xf6>
 800d290:	e8df f004 	tbb	[pc, r4]
 800d294:	1714030a 	.word	0x1714030a
 800d298:	0a          	.byte	0x0a
 800d299:	00          	.byte	0x00
 800d29a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d29e:	0730      	lsls	r0, r6, #28
 800d2a0:	d5c1      	bpl.n	800d226 <_strtod_l+0x7e>
 800d2a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d2a6:	e7be      	b.n	800d226 <_strtod_l+0x7e>
 800d2a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d2ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d2ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d2b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d2b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d2ba:	e7f0      	b.n	800d29e <_strtod_l+0xf6>
 800d2bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d430 <_strtod_l+0x288>
 800d2c0:	e7ed      	b.n	800d29e <_strtod_l+0xf6>
 800d2c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d2c6:	f04f 3aff 	mov.w	sl, #4294967295
 800d2ca:	e7e8      	b.n	800d29e <_strtod_l+0xf6>
 800d2cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d2d2:	785b      	ldrb	r3, [r3, #1]
 800d2d4:	2b30      	cmp	r3, #48	; 0x30
 800d2d6:	d0f9      	beq.n	800d2cc <_strtod_l+0x124>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0a4      	beq.n	800d226 <_strtod_l+0x7e>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	2500      	movs	r5, #0
 800d2e0:	9306      	str	r3, [sp, #24]
 800d2e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2e4:	9308      	str	r3, [sp, #32]
 800d2e6:	9507      	str	r5, [sp, #28]
 800d2e8:	9505      	str	r5, [sp, #20]
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d2ee:	7807      	ldrb	r7, [r0, #0]
 800d2f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d2f4:	b2d9      	uxtb	r1, r3
 800d2f6:	2909      	cmp	r1, #9
 800d2f8:	d929      	bls.n	800d34e <_strtod_l+0x1a6>
 800d2fa:	4622      	mov	r2, r4
 800d2fc:	f8d8 1000 	ldr.w	r1, [r8]
 800d300:	f7ff ff24 	bl	800d14c <strncmp>
 800d304:	2800      	cmp	r0, #0
 800d306:	d031      	beq.n	800d36c <_strtod_l+0x1c4>
 800d308:	2000      	movs	r0, #0
 800d30a:	9c05      	ldr	r4, [sp, #20]
 800d30c:	9004      	str	r0, [sp, #16]
 800d30e:	463b      	mov	r3, r7
 800d310:	4602      	mov	r2, r0
 800d312:	2b65      	cmp	r3, #101	; 0x65
 800d314:	d001      	beq.n	800d31a <_strtod_l+0x172>
 800d316:	2b45      	cmp	r3, #69	; 0x45
 800d318:	d114      	bne.n	800d344 <_strtod_l+0x19c>
 800d31a:	b924      	cbnz	r4, 800d326 <_strtod_l+0x17e>
 800d31c:	b910      	cbnz	r0, 800d324 <_strtod_l+0x17c>
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d09e      	beq.n	800d262 <_strtod_l+0xba>
 800d324:	2400      	movs	r4, #0
 800d326:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d328:	1c73      	adds	r3, r6, #1
 800d32a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d32c:	7873      	ldrb	r3, [r6, #1]
 800d32e:	2b2b      	cmp	r3, #43	; 0x2b
 800d330:	d078      	beq.n	800d424 <_strtod_l+0x27c>
 800d332:	2b2d      	cmp	r3, #45	; 0x2d
 800d334:	d070      	beq.n	800d418 <_strtod_l+0x270>
 800d336:	f04f 0c00 	mov.w	ip, #0
 800d33a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d33e:	2f09      	cmp	r7, #9
 800d340:	d97c      	bls.n	800d43c <_strtod_l+0x294>
 800d342:	961b      	str	r6, [sp, #108]	; 0x6c
 800d344:	f04f 0e00 	mov.w	lr, #0
 800d348:	e09a      	b.n	800d480 <_strtod_l+0x2d8>
 800d34a:	2300      	movs	r3, #0
 800d34c:	e7c7      	b.n	800d2de <_strtod_l+0x136>
 800d34e:	9905      	ldr	r1, [sp, #20]
 800d350:	2908      	cmp	r1, #8
 800d352:	bfdd      	ittte	le
 800d354:	9907      	ldrle	r1, [sp, #28]
 800d356:	fb02 3301 	mlale	r3, r2, r1, r3
 800d35a:	9307      	strle	r3, [sp, #28]
 800d35c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d360:	9b05      	ldr	r3, [sp, #20]
 800d362:	3001      	adds	r0, #1
 800d364:	3301      	adds	r3, #1
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	901b      	str	r0, [sp, #108]	; 0x6c
 800d36a:	e7bf      	b.n	800d2ec <_strtod_l+0x144>
 800d36c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d36e:	191a      	adds	r2, r3, r4
 800d370:	921b      	str	r2, [sp, #108]	; 0x6c
 800d372:	9a05      	ldr	r2, [sp, #20]
 800d374:	5d1b      	ldrb	r3, [r3, r4]
 800d376:	2a00      	cmp	r2, #0
 800d378:	d037      	beq.n	800d3ea <_strtod_l+0x242>
 800d37a:	9c05      	ldr	r4, [sp, #20]
 800d37c:	4602      	mov	r2, r0
 800d37e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d382:	2909      	cmp	r1, #9
 800d384:	d913      	bls.n	800d3ae <_strtod_l+0x206>
 800d386:	2101      	movs	r1, #1
 800d388:	9104      	str	r1, [sp, #16]
 800d38a:	e7c2      	b.n	800d312 <_strtod_l+0x16a>
 800d38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d38e:	1c5a      	adds	r2, r3, #1
 800d390:	921b      	str	r2, [sp, #108]	; 0x6c
 800d392:	785b      	ldrb	r3, [r3, #1]
 800d394:	3001      	adds	r0, #1
 800d396:	2b30      	cmp	r3, #48	; 0x30
 800d398:	d0f8      	beq.n	800d38c <_strtod_l+0x1e4>
 800d39a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d39e:	2a08      	cmp	r2, #8
 800d3a0:	f200 84e4 	bhi.w	800dd6c <_strtod_l+0xbc4>
 800d3a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d3a6:	9208      	str	r2, [sp, #32]
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d3b2:	f100 0101 	add.w	r1, r0, #1
 800d3b6:	d012      	beq.n	800d3de <_strtod_l+0x236>
 800d3b8:	440a      	add	r2, r1
 800d3ba:	eb00 0c04 	add.w	ip, r0, r4
 800d3be:	4621      	mov	r1, r4
 800d3c0:	270a      	movs	r7, #10
 800d3c2:	458c      	cmp	ip, r1
 800d3c4:	d113      	bne.n	800d3ee <_strtod_l+0x246>
 800d3c6:	1821      	adds	r1, r4, r0
 800d3c8:	2908      	cmp	r1, #8
 800d3ca:	f104 0401 	add.w	r4, r4, #1
 800d3ce:	4404      	add	r4, r0
 800d3d0:	dc19      	bgt.n	800d406 <_strtod_l+0x25e>
 800d3d2:	9b07      	ldr	r3, [sp, #28]
 800d3d4:	210a      	movs	r1, #10
 800d3d6:	fb01 e303 	mla	r3, r1, r3, lr
 800d3da:	9307      	str	r3, [sp, #28]
 800d3dc:	2100      	movs	r1, #0
 800d3de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3e0:	1c58      	adds	r0, r3, #1
 800d3e2:	901b      	str	r0, [sp, #108]	; 0x6c
 800d3e4:	785b      	ldrb	r3, [r3, #1]
 800d3e6:	4608      	mov	r0, r1
 800d3e8:	e7c9      	b.n	800d37e <_strtod_l+0x1d6>
 800d3ea:	9805      	ldr	r0, [sp, #20]
 800d3ec:	e7d3      	b.n	800d396 <_strtod_l+0x1ee>
 800d3ee:	2908      	cmp	r1, #8
 800d3f0:	f101 0101 	add.w	r1, r1, #1
 800d3f4:	dc03      	bgt.n	800d3fe <_strtod_l+0x256>
 800d3f6:	9b07      	ldr	r3, [sp, #28]
 800d3f8:	437b      	muls	r3, r7
 800d3fa:	9307      	str	r3, [sp, #28]
 800d3fc:	e7e1      	b.n	800d3c2 <_strtod_l+0x21a>
 800d3fe:	2910      	cmp	r1, #16
 800d400:	bfd8      	it	le
 800d402:	437d      	mulle	r5, r7
 800d404:	e7dd      	b.n	800d3c2 <_strtod_l+0x21a>
 800d406:	2c10      	cmp	r4, #16
 800d408:	bfdc      	itt	le
 800d40a:	210a      	movle	r1, #10
 800d40c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d410:	e7e4      	b.n	800d3dc <_strtod_l+0x234>
 800d412:	2301      	movs	r3, #1
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	e781      	b.n	800d31c <_strtod_l+0x174>
 800d418:	f04f 0c01 	mov.w	ip, #1
 800d41c:	1cb3      	adds	r3, r6, #2
 800d41e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d420:	78b3      	ldrb	r3, [r6, #2]
 800d422:	e78a      	b.n	800d33a <_strtod_l+0x192>
 800d424:	f04f 0c00 	mov.w	ip, #0
 800d428:	e7f8      	b.n	800d41c <_strtod_l+0x274>
 800d42a:	bf00      	nop
 800d42c:	0800fe7c 	.word	0x0800fe7c
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d436:	1c5f      	adds	r7, r3, #1
 800d438:	971b      	str	r7, [sp, #108]	; 0x6c
 800d43a:	785b      	ldrb	r3, [r3, #1]
 800d43c:	2b30      	cmp	r3, #48	; 0x30
 800d43e:	d0f9      	beq.n	800d434 <_strtod_l+0x28c>
 800d440:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d444:	2f08      	cmp	r7, #8
 800d446:	f63f af7d 	bhi.w	800d344 <_strtod_l+0x19c>
 800d44a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d44e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d450:	930a      	str	r3, [sp, #40]	; 0x28
 800d452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d454:	1c5f      	adds	r7, r3, #1
 800d456:	971b      	str	r7, [sp, #108]	; 0x6c
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d45e:	f1b8 0f09 	cmp.w	r8, #9
 800d462:	d937      	bls.n	800d4d4 <_strtod_l+0x32c>
 800d464:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d466:	1a7f      	subs	r7, r7, r1
 800d468:	2f08      	cmp	r7, #8
 800d46a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d46e:	dc37      	bgt.n	800d4e0 <_strtod_l+0x338>
 800d470:	45be      	cmp	lr, r7
 800d472:	bfa8      	it	ge
 800d474:	46be      	movge	lr, r7
 800d476:	f1bc 0f00 	cmp.w	ip, #0
 800d47a:	d001      	beq.n	800d480 <_strtod_l+0x2d8>
 800d47c:	f1ce 0e00 	rsb	lr, lr, #0
 800d480:	2c00      	cmp	r4, #0
 800d482:	d151      	bne.n	800d528 <_strtod_l+0x380>
 800d484:	2800      	cmp	r0, #0
 800d486:	f47f aece 	bne.w	800d226 <_strtod_l+0x7e>
 800d48a:	9a06      	ldr	r2, [sp, #24]
 800d48c:	2a00      	cmp	r2, #0
 800d48e:	f47f aeca 	bne.w	800d226 <_strtod_l+0x7e>
 800d492:	9a04      	ldr	r2, [sp, #16]
 800d494:	2a00      	cmp	r2, #0
 800d496:	f47f aee4 	bne.w	800d262 <_strtod_l+0xba>
 800d49a:	2b4e      	cmp	r3, #78	; 0x4e
 800d49c:	d027      	beq.n	800d4ee <_strtod_l+0x346>
 800d49e:	dc21      	bgt.n	800d4e4 <_strtod_l+0x33c>
 800d4a0:	2b49      	cmp	r3, #73	; 0x49
 800d4a2:	f47f aede 	bne.w	800d262 <_strtod_l+0xba>
 800d4a6:	49a0      	ldr	r1, [pc, #640]	; (800d728 <_strtod_l+0x580>)
 800d4a8:	a81b      	add	r0, sp, #108	; 0x6c
 800d4aa:	f001 fdf7 	bl	800f09c <__match>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	f43f aed7 	beq.w	800d262 <_strtod_l+0xba>
 800d4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4b6:	499d      	ldr	r1, [pc, #628]	; (800d72c <_strtod_l+0x584>)
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	a81b      	add	r0, sp, #108	; 0x6c
 800d4bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800d4be:	f001 fded 	bl	800f09c <__match>
 800d4c2:	b910      	cbnz	r0, 800d4ca <_strtod_l+0x322>
 800d4c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d4ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d740 <_strtod_l+0x598>
 800d4ce:	f04f 0a00 	mov.w	sl, #0
 800d4d2:	e6a8      	b.n	800d226 <_strtod_l+0x7e>
 800d4d4:	210a      	movs	r1, #10
 800d4d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d4da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d4de:	e7b8      	b.n	800d452 <_strtod_l+0x2aa>
 800d4e0:	46be      	mov	lr, r7
 800d4e2:	e7c8      	b.n	800d476 <_strtod_l+0x2ce>
 800d4e4:	2b69      	cmp	r3, #105	; 0x69
 800d4e6:	d0de      	beq.n	800d4a6 <_strtod_l+0x2fe>
 800d4e8:	2b6e      	cmp	r3, #110	; 0x6e
 800d4ea:	f47f aeba 	bne.w	800d262 <_strtod_l+0xba>
 800d4ee:	4990      	ldr	r1, [pc, #576]	; (800d730 <_strtod_l+0x588>)
 800d4f0:	a81b      	add	r0, sp, #108	; 0x6c
 800d4f2:	f001 fdd3 	bl	800f09c <__match>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f43f aeb3 	beq.w	800d262 <_strtod_l+0xba>
 800d4fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b28      	cmp	r3, #40	; 0x28
 800d502:	d10e      	bne.n	800d522 <_strtod_l+0x37a>
 800d504:	aa1e      	add	r2, sp, #120	; 0x78
 800d506:	498b      	ldr	r1, [pc, #556]	; (800d734 <_strtod_l+0x58c>)
 800d508:	a81b      	add	r0, sp, #108	; 0x6c
 800d50a:	f001 fddb 	bl	800f0c4 <__hexnan>
 800d50e:	2805      	cmp	r0, #5
 800d510:	d107      	bne.n	800d522 <_strtod_l+0x37a>
 800d512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d514:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d518:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d51c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d520:	e681      	b.n	800d226 <_strtod_l+0x7e>
 800d522:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d748 <_strtod_l+0x5a0>
 800d526:	e7d2      	b.n	800d4ce <_strtod_l+0x326>
 800d528:	ebae 0302 	sub.w	r3, lr, r2
 800d52c:	9306      	str	r3, [sp, #24]
 800d52e:	9b05      	ldr	r3, [sp, #20]
 800d530:	9807      	ldr	r0, [sp, #28]
 800d532:	2b00      	cmp	r3, #0
 800d534:	bf08      	it	eq
 800d536:	4623      	moveq	r3, r4
 800d538:	2c10      	cmp	r4, #16
 800d53a:	9305      	str	r3, [sp, #20]
 800d53c:	46a0      	mov	r8, r4
 800d53e:	bfa8      	it	ge
 800d540:	f04f 0810 	movge.w	r8, #16
 800d544:	f7f2 ffde 	bl	8000504 <__aeabi_ui2d>
 800d548:	2c09      	cmp	r4, #9
 800d54a:	4682      	mov	sl, r0
 800d54c:	468b      	mov	fp, r1
 800d54e:	dc13      	bgt.n	800d578 <_strtod_l+0x3d0>
 800d550:	9b06      	ldr	r3, [sp, #24]
 800d552:	2b00      	cmp	r3, #0
 800d554:	f43f ae67 	beq.w	800d226 <_strtod_l+0x7e>
 800d558:	9b06      	ldr	r3, [sp, #24]
 800d55a:	dd7a      	ble.n	800d652 <_strtod_l+0x4aa>
 800d55c:	2b16      	cmp	r3, #22
 800d55e:	dc61      	bgt.n	800d624 <_strtod_l+0x47c>
 800d560:	4a75      	ldr	r2, [pc, #468]	; (800d738 <_strtod_l+0x590>)
 800d562:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d566:	e9de 0100 	ldrd	r0, r1, [lr]
 800d56a:	4652      	mov	r2, sl
 800d56c:	465b      	mov	r3, fp
 800d56e:	f7f3 f843 	bl	80005f8 <__aeabi_dmul>
 800d572:	4682      	mov	sl, r0
 800d574:	468b      	mov	fp, r1
 800d576:	e656      	b.n	800d226 <_strtod_l+0x7e>
 800d578:	4b6f      	ldr	r3, [pc, #444]	; (800d738 <_strtod_l+0x590>)
 800d57a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d57e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d582:	f7f3 f839 	bl	80005f8 <__aeabi_dmul>
 800d586:	4606      	mov	r6, r0
 800d588:	4628      	mov	r0, r5
 800d58a:	460f      	mov	r7, r1
 800d58c:	f7f2 ffba 	bl	8000504 <__aeabi_ui2d>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4630      	mov	r0, r6
 800d596:	4639      	mov	r1, r7
 800d598:	f7f2 fe78 	bl	800028c <__adddf3>
 800d59c:	2c0f      	cmp	r4, #15
 800d59e:	4682      	mov	sl, r0
 800d5a0:	468b      	mov	fp, r1
 800d5a2:	ddd5      	ble.n	800d550 <_strtod_l+0x3a8>
 800d5a4:	9b06      	ldr	r3, [sp, #24]
 800d5a6:	eba4 0808 	sub.w	r8, r4, r8
 800d5aa:	4498      	add	r8, r3
 800d5ac:	f1b8 0f00 	cmp.w	r8, #0
 800d5b0:	f340 8096 	ble.w	800d6e0 <_strtod_l+0x538>
 800d5b4:	f018 030f 	ands.w	r3, r8, #15
 800d5b8:	d00a      	beq.n	800d5d0 <_strtod_l+0x428>
 800d5ba:	495f      	ldr	r1, [pc, #380]	; (800d738 <_strtod_l+0x590>)
 800d5bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5c0:	4652      	mov	r2, sl
 800d5c2:	465b      	mov	r3, fp
 800d5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5c8:	f7f3 f816 	bl	80005f8 <__aeabi_dmul>
 800d5cc:	4682      	mov	sl, r0
 800d5ce:	468b      	mov	fp, r1
 800d5d0:	f038 080f 	bics.w	r8, r8, #15
 800d5d4:	d073      	beq.n	800d6be <_strtod_l+0x516>
 800d5d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d5da:	dd47      	ble.n	800d66c <_strtod_l+0x4c4>
 800d5dc:	2400      	movs	r4, #0
 800d5de:	46a0      	mov	r8, r4
 800d5e0:	9407      	str	r4, [sp, #28]
 800d5e2:	9405      	str	r4, [sp, #20]
 800d5e4:	2322      	movs	r3, #34	; 0x22
 800d5e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d740 <_strtod_l+0x598>
 800d5ea:	f8c9 3000 	str.w	r3, [r9]
 800d5ee:	f04f 0a00 	mov.w	sl, #0
 800d5f2:	9b07      	ldr	r3, [sp, #28]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f43f ae16 	beq.w	800d226 <_strtod_l+0x7e>
 800d5fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d5fc:	4648      	mov	r0, r9
 800d5fe:	f001 fe4d 	bl	800f29c <_Bfree>
 800d602:	9905      	ldr	r1, [sp, #20]
 800d604:	4648      	mov	r0, r9
 800d606:	f001 fe49 	bl	800f29c <_Bfree>
 800d60a:	4641      	mov	r1, r8
 800d60c:	4648      	mov	r0, r9
 800d60e:	f001 fe45 	bl	800f29c <_Bfree>
 800d612:	9907      	ldr	r1, [sp, #28]
 800d614:	4648      	mov	r0, r9
 800d616:	f001 fe41 	bl	800f29c <_Bfree>
 800d61a:	4621      	mov	r1, r4
 800d61c:	4648      	mov	r0, r9
 800d61e:	f001 fe3d 	bl	800f29c <_Bfree>
 800d622:	e600      	b.n	800d226 <_strtod_l+0x7e>
 800d624:	9a06      	ldr	r2, [sp, #24]
 800d626:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d62a:	4293      	cmp	r3, r2
 800d62c:	dbba      	blt.n	800d5a4 <_strtod_l+0x3fc>
 800d62e:	4d42      	ldr	r5, [pc, #264]	; (800d738 <_strtod_l+0x590>)
 800d630:	f1c4 040f 	rsb	r4, r4, #15
 800d634:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d638:	4652      	mov	r2, sl
 800d63a:	465b      	mov	r3, fp
 800d63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d640:	f7f2 ffda 	bl	80005f8 <__aeabi_dmul>
 800d644:	9b06      	ldr	r3, [sp, #24]
 800d646:	1b1c      	subs	r4, r3, r4
 800d648:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d64c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d650:	e78d      	b.n	800d56e <_strtod_l+0x3c6>
 800d652:	f113 0f16 	cmn.w	r3, #22
 800d656:	dba5      	blt.n	800d5a4 <_strtod_l+0x3fc>
 800d658:	4a37      	ldr	r2, [pc, #220]	; (800d738 <_strtod_l+0x590>)
 800d65a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d65e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d662:	4650      	mov	r0, sl
 800d664:	4659      	mov	r1, fp
 800d666:	f7f3 f8f1 	bl	800084c <__aeabi_ddiv>
 800d66a:	e782      	b.n	800d572 <_strtod_l+0x3ca>
 800d66c:	2300      	movs	r3, #0
 800d66e:	4e33      	ldr	r6, [pc, #204]	; (800d73c <_strtod_l+0x594>)
 800d670:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d674:	4650      	mov	r0, sl
 800d676:	4659      	mov	r1, fp
 800d678:	461d      	mov	r5, r3
 800d67a:	f1b8 0f01 	cmp.w	r8, #1
 800d67e:	dc21      	bgt.n	800d6c4 <_strtod_l+0x51c>
 800d680:	b10b      	cbz	r3, 800d686 <_strtod_l+0x4de>
 800d682:	4682      	mov	sl, r0
 800d684:	468b      	mov	fp, r1
 800d686:	4b2d      	ldr	r3, [pc, #180]	; (800d73c <_strtod_l+0x594>)
 800d688:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d68c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d690:	4652      	mov	r2, sl
 800d692:	465b      	mov	r3, fp
 800d694:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d698:	f7f2 ffae 	bl	80005f8 <__aeabi_dmul>
 800d69c:	4b28      	ldr	r3, [pc, #160]	; (800d740 <_strtod_l+0x598>)
 800d69e:	460a      	mov	r2, r1
 800d6a0:	400b      	ands	r3, r1
 800d6a2:	4928      	ldr	r1, [pc, #160]	; (800d744 <_strtod_l+0x59c>)
 800d6a4:	428b      	cmp	r3, r1
 800d6a6:	4682      	mov	sl, r0
 800d6a8:	d898      	bhi.n	800d5dc <_strtod_l+0x434>
 800d6aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d6ae:	428b      	cmp	r3, r1
 800d6b0:	bf86      	itte	hi
 800d6b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d74c <_strtod_l+0x5a4>
 800d6b6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d6ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9304      	str	r3, [sp, #16]
 800d6c2:	e077      	b.n	800d7b4 <_strtod_l+0x60c>
 800d6c4:	f018 0f01 	tst.w	r8, #1
 800d6c8:	d006      	beq.n	800d6d8 <_strtod_l+0x530>
 800d6ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f2 ff91 	bl	80005f8 <__aeabi_dmul>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	3501      	adds	r5, #1
 800d6da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d6de:	e7cc      	b.n	800d67a <_strtod_l+0x4d2>
 800d6e0:	d0ed      	beq.n	800d6be <_strtod_l+0x516>
 800d6e2:	f1c8 0800 	rsb	r8, r8, #0
 800d6e6:	f018 020f 	ands.w	r2, r8, #15
 800d6ea:	d00a      	beq.n	800d702 <_strtod_l+0x55a>
 800d6ec:	4b12      	ldr	r3, [pc, #72]	; (800d738 <_strtod_l+0x590>)
 800d6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6f2:	4650      	mov	r0, sl
 800d6f4:	4659      	mov	r1, fp
 800d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fa:	f7f3 f8a7 	bl	800084c <__aeabi_ddiv>
 800d6fe:	4682      	mov	sl, r0
 800d700:	468b      	mov	fp, r1
 800d702:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d706:	d0da      	beq.n	800d6be <_strtod_l+0x516>
 800d708:	f1b8 0f1f 	cmp.w	r8, #31
 800d70c:	dd20      	ble.n	800d750 <_strtod_l+0x5a8>
 800d70e:	2400      	movs	r4, #0
 800d710:	46a0      	mov	r8, r4
 800d712:	9407      	str	r4, [sp, #28]
 800d714:	9405      	str	r4, [sp, #20]
 800d716:	2322      	movs	r3, #34	; 0x22
 800d718:	f04f 0a00 	mov.w	sl, #0
 800d71c:	f04f 0b00 	mov.w	fp, #0
 800d720:	f8c9 3000 	str.w	r3, [r9]
 800d724:	e765      	b.n	800d5f2 <_strtod_l+0x44a>
 800d726:	bf00      	nop
 800d728:	0800fe45 	.word	0x0800fe45
 800d72c:	0800fed3 	.word	0x0800fed3
 800d730:	0800fe4d 	.word	0x0800fe4d
 800d734:	0800fe90 	.word	0x0800fe90
 800d738:	0800ff10 	.word	0x0800ff10
 800d73c:	0800fee8 	.word	0x0800fee8
 800d740:	7ff00000 	.word	0x7ff00000
 800d744:	7ca00000 	.word	0x7ca00000
 800d748:	fff80000 	.word	0xfff80000
 800d74c:	7fefffff 	.word	0x7fefffff
 800d750:	f018 0310 	ands.w	r3, r8, #16
 800d754:	bf18      	it	ne
 800d756:	236a      	movne	r3, #106	; 0x6a
 800d758:	4da0      	ldr	r5, [pc, #640]	; (800d9dc <_strtod_l+0x834>)
 800d75a:	9304      	str	r3, [sp, #16]
 800d75c:	4650      	mov	r0, sl
 800d75e:	4659      	mov	r1, fp
 800d760:	2300      	movs	r3, #0
 800d762:	f1b8 0f00 	cmp.w	r8, #0
 800d766:	f300 810a 	bgt.w	800d97e <_strtod_l+0x7d6>
 800d76a:	b10b      	cbz	r3, 800d770 <_strtod_l+0x5c8>
 800d76c:	4682      	mov	sl, r0
 800d76e:	468b      	mov	fp, r1
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	b1bb      	cbz	r3, 800d7a4 <_strtod_l+0x5fc>
 800d774:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	4659      	mov	r1, fp
 800d780:	dd10      	ble.n	800d7a4 <_strtod_l+0x5fc>
 800d782:	2b1f      	cmp	r3, #31
 800d784:	f340 8107 	ble.w	800d996 <_strtod_l+0x7ee>
 800d788:	2b34      	cmp	r3, #52	; 0x34
 800d78a:	bfde      	ittt	le
 800d78c:	3b20      	suble	r3, #32
 800d78e:	f04f 32ff 	movle.w	r2, #4294967295
 800d792:	fa02 f303 	lslle.w	r3, r2, r3
 800d796:	f04f 0a00 	mov.w	sl, #0
 800d79a:	bfcc      	ite	gt
 800d79c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d7a0:	ea03 0b01 	andle.w	fp, r3, r1
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	4659      	mov	r1, fp
 800d7ac:	f7f3 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d1ac      	bne.n	800d70e <_strtod_l+0x566>
 800d7b4:	9b07      	ldr	r3, [sp, #28]
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	9a05      	ldr	r2, [sp, #20]
 800d7ba:	9908      	ldr	r1, [sp, #32]
 800d7bc:	4623      	mov	r3, r4
 800d7be:	4648      	mov	r0, r9
 800d7c0:	f001 fdbe 	bl	800f340 <__s2b>
 800d7c4:	9007      	str	r0, [sp, #28]
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f43f af08 	beq.w	800d5dc <_strtod_l+0x434>
 800d7cc:	9a06      	ldr	r2, [sp, #24]
 800d7ce:	9b06      	ldr	r3, [sp, #24]
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	f1c3 0300 	rsb	r3, r3, #0
 800d7d6:	bfa8      	it	ge
 800d7d8:	2300      	movge	r3, #0
 800d7da:	930e      	str	r3, [sp, #56]	; 0x38
 800d7dc:	2400      	movs	r4, #0
 800d7de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d7e2:	9316      	str	r3, [sp, #88]	; 0x58
 800d7e4:	46a0      	mov	r8, r4
 800d7e6:	9b07      	ldr	r3, [sp, #28]
 800d7e8:	4648      	mov	r0, r9
 800d7ea:	6859      	ldr	r1, [r3, #4]
 800d7ec:	f001 fd22 	bl	800f234 <_Balloc>
 800d7f0:	9005      	str	r0, [sp, #20]
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f43f aef6 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	691a      	ldr	r2, [r3, #16]
 800d7fc:	3202      	adds	r2, #2
 800d7fe:	f103 010c 	add.w	r1, r3, #12
 800d802:	0092      	lsls	r2, r2, #2
 800d804:	300c      	adds	r0, #12
 800d806:	f7fe fd71 	bl	800c2ec <memcpy>
 800d80a:	aa1e      	add	r2, sp, #120	; 0x78
 800d80c:	a91d      	add	r1, sp, #116	; 0x74
 800d80e:	ec4b ab10 	vmov	d0, sl, fp
 800d812:	4648      	mov	r0, r9
 800d814:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d818:	f002 f84e 	bl	800f8b8 <__d2b>
 800d81c:	901c      	str	r0, [sp, #112]	; 0x70
 800d81e:	2800      	cmp	r0, #0
 800d820:	f43f aee0 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d824:	2101      	movs	r1, #1
 800d826:	4648      	mov	r0, r9
 800d828:	f001 fe16 	bl	800f458 <__i2b>
 800d82c:	4680      	mov	r8, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	f43f aed8 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d834:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d836:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d838:	2e00      	cmp	r6, #0
 800d83a:	bfab      	itete	ge
 800d83c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d83e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d840:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d842:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d844:	bfac      	ite	ge
 800d846:	18f7      	addge	r7, r6, r3
 800d848:	1b9d      	sublt	r5, r3, r6
 800d84a:	9b04      	ldr	r3, [sp, #16]
 800d84c:	1af6      	subs	r6, r6, r3
 800d84e:	4416      	add	r6, r2
 800d850:	4b63      	ldr	r3, [pc, #396]	; (800d9e0 <_strtod_l+0x838>)
 800d852:	3e01      	subs	r6, #1
 800d854:	429e      	cmp	r6, r3
 800d856:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d85a:	f280 80af 	bge.w	800d9bc <_strtod_l+0x814>
 800d85e:	1b9b      	subs	r3, r3, r6
 800d860:	2b1f      	cmp	r3, #31
 800d862:	eba2 0203 	sub.w	r2, r2, r3
 800d866:	f04f 0101 	mov.w	r1, #1
 800d86a:	f300 809b 	bgt.w	800d9a4 <_strtod_l+0x7fc>
 800d86e:	fa01 f303 	lsl.w	r3, r1, r3
 800d872:	930f      	str	r3, [sp, #60]	; 0x3c
 800d874:	2300      	movs	r3, #0
 800d876:	930a      	str	r3, [sp, #40]	; 0x28
 800d878:	18be      	adds	r6, r7, r2
 800d87a:	9b04      	ldr	r3, [sp, #16]
 800d87c:	42b7      	cmp	r7, r6
 800d87e:	4415      	add	r5, r2
 800d880:	441d      	add	r5, r3
 800d882:	463b      	mov	r3, r7
 800d884:	bfa8      	it	ge
 800d886:	4633      	movge	r3, r6
 800d888:	42ab      	cmp	r3, r5
 800d88a:	bfa8      	it	ge
 800d88c:	462b      	movge	r3, r5
 800d88e:	2b00      	cmp	r3, #0
 800d890:	bfc2      	ittt	gt
 800d892:	1af6      	subgt	r6, r6, r3
 800d894:	1aed      	subgt	r5, r5, r3
 800d896:	1aff      	subgt	r7, r7, r3
 800d898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d89a:	b1bb      	cbz	r3, 800d8cc <_strtod_l+0x724>
 800d89c:	4641      	mov	r1, r8
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4648      	mov	r0, r9
 800d8a2:	f001 fe79 	bl	800f598 <__pow5mult>
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	f43f ae9b 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d8ae:	4601      	mov	r1, r0
 800d8b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	f001 fdd9 	bl	800f46a <__multiply>
 800d8b8:	900c      	str	r0, [sp, #48]	; 0x30
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f43f ae92 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d8c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8c2:	4648      	mov	r0, r9
 800d8c4:	f001 fcea 	bl	800f29c <_Bfree>
 800d8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ca:	931c      	str	r3, [sp, #112]	; 0x70
 800d8cc:	2e00      	cmp	r6, #0
 800d8ce:	dc7a      	bgt.n	800d9c6 <_strtod_l+0x81e>
 800d8d0:	9b06      	ldr	r3, [sp, #24]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	dd08      	ble.n	800d8e8 <_strtod_l+0x740>
 800d8d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8d8:	9905      	ldr	r1, [sp, #20]
 800d8da:	4648      	mov	r0, r9
 800d8dc:	f001 fe5c 	bl	800f598 <__pow5mult>
 800d8e0:	9005      	str	r0, [sp, #20]
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f43f ae7e 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	dd08      	ble.n	800d8fe <_strtod_l+0x756>
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	9905      	ldr	r1, [sp, #20]
 800d8f0:	4648      	mov	r0, r9
 800d8f2:	f001 fe9f 	bl	800f634 <__lshift>
 800d8f6:	9005      	str	r0, [sp, #20]
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	f43f ae73 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d8fe:	2f00      	cmp	r7, #0
 800d900:	dd08      	ble.n	800d914 <_strtod_l+0x76c>
 800d902:	4641      	mov	r1, r8
 800d904:	463a      	mov	r2, r7
 800d906:	4648      	mov	r0, r9
 800d908:	f001 fe94 	bl	800f634 <__lshift>
 800d90c:	4680      	mov	r8, r0
 800d90e:	2800      	cmp	r0, #0
 800d910:	f43f ae68 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d914:	9a05      	ldr	r2, [sp, #20]
 800d916:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d918:	4648      	mov	r0, r9
 800d91a:	f001 fef9 	bl	800f710 <__mdiff>
 800d91e:	4604      	mov	r4, r0
 800d920:	2800      	cmp	r0, #0
 800d922:	f43f ae5f 	beq.w	800d5e4 <_strtod_l+0x43c>
 800d926:	68c3      	ldr	r3, [r0, #12]
 800d928:	930c      	str	r3, [sp, #48]	; 0x30
 800d92a:	2300      	movs	r3, #0
 800d92c:	60c3      	str	r3, [r0, #12]
 800d92e:	4641      	mov	r1, r8
 800d930:	f001 fed4 	bl	800f6dc <__mcmp>
 800d934:	2800      	cmp	r0, #0
 800d936:	da55      	bge.n	800d9e4 <_strtod_l+0x83c>
 800d938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d93a:	b9e3      	cbnz	r3, 800d976 <_strtod_l+0x7ce>
 800d93c:	f1ba 0f00 	cmp.w	sl, #0
 800d940:	d119      	bne.n	800d976 <_strtod_l+0x7ce>
 800d942:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d946:	b9b3      	cbnz	r3, 800d976 <_strtod_l+0x7ce>
 800d948:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d94c:	0d1b      	lsrs	r3, r3, #20
 800d94e:	051b      	lsls	r3, r3, #20
 800d950:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d954:	d90f      	bls.n	800d976 <_strtod_l+0x7ce>
 800d956:	6963      	ldr	r3, [r4, #20]
 800d958:	b913      	cbnz	r3, 800d960 <_strtod_l+0x7b8>
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	dd0a      	ble.n	800d976 <_strtod_l+0x7ce>
 800d960:	4621      	mov	r1, r4
 800d962:	2201      	movs	r2, #1
 800d964:	4648      	mov	r0, r9
 800d966:	f001 fe65 	bl	800f634 <__lshift>
 800d96a:	4641      	mov	r1, r8
 800d96c:	4604      	mov	r4, r0
 800d96e:	f001 feb5 	bl	800f6dc <__mcmp>
 800d972:	2800      	cmp	r0, #0
 800d974:	dc67      	bgt.n	800da46 <_strtod_l+0x89e>
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d171      	bne.n	800da60 <_strtod_l+0x8b8>
 800d97c:	e63d      	b.n	800d5fa <_strtod_l+0x452>
 800d97e:	f018 0f01 	tst.w	r8, #1
 800d982:	d004      	beq.n	800d98e <_strtod_l+0x7e6>
 800d984:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d988:	f7f2 fe36 	bl	80005f8 <__aeabi_dmul>
 800d98c:	2301      	movs	r3, #1
 800d98e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d992:	3508      	adds	r5, #8
 800d994:	e6e5      	b.n	800d762 <_strtod_l+0x5ba>
 800d996:	f04f 32ff 	mov.w	r2, #4294967295
 800d99a:	fa02 f303 	lsl.w	r3, r2, r3
 800d99e:	ea03 0a0a 	and.w	sl, r3, sl
 800d9a2:	e6ff      	b.n	800d7a4 <_strtod_l+0x5fc>
 800d9a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d9a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d9ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d9b0:	36e2      	adds	r6, #226	; 0xe2
 800d9b2:	fa01 f306 	lsl.w	r3, r1, r6
 800d9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9b8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d9ba:	e75d      	b.n	800d878 <_strtod_l+0x6d0>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	930a      	str	r3, [sp, #40]	; 0x28
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9c4:	e758      	b.n	800d878 <_strtod_l+0x6d0>
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d9ca:	4648      	mov	r0, r9
 800d9cc:	f001 fe32 	bl	800f634 <__lshift>
 800d9d0:	901c      	str	r0, [sp, #112]	; 0x70
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	f47f af7c 	bne.w	800d8d0 <_strtod_l+0x728>
 800d9d8:	e604      	b.n	800d5e4 <_strtod_l+0x43c>
 800d9da:	bf00      	nop
 800d9dc:	0800fea8 	.word	0x0800fea8
 800d9e0:	fffffc02 	.word	0xfffffc02
 800d9e4:	465d      	mov	r5, fp
 800d9e6:	f040 8086 	bne.w	800daf6 <_strtod_l+0x94e>
 800d9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9f0:	b32a      	cbz	r2, 800da3e <_strtod_l+0x896>
 800d9f2:	4aaf      	ldr	r2, [pc, #700]	; (800dcb0 <_strtod_l+0xb08>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d153      	bne.n	800daa0 <_strtod_l+0x8f8>
 800d9f8:	9b04      	ldr	r3, [sp, #16]
 800d9fa:	4650      	mov	r0, sl
 800d9fc:	b1d3      	cbz	r3, 800da34 <_strtod_l+0x88c>
 800d9fe:	4aad      	ldr	r2, [pc, #692]	; (800dcb4 <_strtod_l+0xb0c>)
 800da00:	402a      	ands	r2, r5
 800da02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800da06:	f04f 31ff 	mov.w	r1, #4294967295
 800da0a:	d816      	bhi.n	800da3a <_strtod_l+0x892>
 800da0c:	0d12      	lsrs	r2, r2, #20
 800da0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da12:	fa01 f303 	lsl.w	r3, r1, r3
 800da16:	4298      	cmp	r0, r3
 800da18:	d142      	bne.n	800daa0 <_strtod_l+0x8f8>
 800da1a:	4ba7      	ldr	r3, [pc, #668]	; (800dcb8 <_strtod_l+0xb10>)
 800da1c:	429d      	cmp	r5, r3
 800da1e:	d102      	bne.n	800da26 <_strtod_l+0x87e>
 800da20:	3001      	adds	r0, #1
 800da22:	f43f addf 	beq.w	800d5e4 <_strtod_l+0x43c>
 800da26:	4ba3      	ldr	r3, [pc, #652]	; (800dcb4 <_strtod_l+0xb0c>)
 800da28:	402b      	ands	r3, r5
 800da2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da2e:	f04f 0a00 	mov.w	sl, #0
 800da32:	e7a0      	b.n	800d976 <_strtod_l+0x7ce>
 800da34:	f04f 33ff 	mov.w	r3, #4294967295
 800da38:	e7ed      	b.n	800da16 <_strtod_l+0x86e>
 800da3a:	460b      	mov	r3, r1
 800da3c:	e7eb      	b.n	800da16 <_strtod_l+0x86e>
 800da3e:	bb7b      	cbnz	r3, 800daa0 <_strtod_l+0x8f8>
 800da40:	f1ba 0f00 	cmp.w	sl, #0
 800da44:	d12c      	bne.n	800daa0 <_strtod_l+0x8f8>
 800da46:	9904      	ldr	r1, [sp, #16]
 800da48:	4a9a      	ldr	r2, [pc, #616]	; (800dcb4 <_strtod_l+0xb0c>)
 800da4a:	465b      	mov	r3, fp
 800da4c:	b1f1      	cbz	r1, 800da8c <_strtod_l+0x8e4>
 800da4e:	ea02 010b 	and.w	r1, r2, fp
 800da52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800da56:	dc19      	bgt.n	800da8c <_strtod_l+0x8e4>
 800da58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800da5c:	f77f ae5b 	ble.w	800d716 <_strtod_l+0x56e>
 800da60:	4a96      	ldr	r2, [pc, #600]	; (800dcbc <_strtod_l+0xb14>)
 800da62:	2300      	movs	r3, #0
 800da64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800da68:	4650      	mov	r0, sl
 800da6a:	4659      	mov	r1, fp
 800da6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da70:	f7f2 fdc2 	bl	80005f8 <__aeabi_dmul>
 800da74:	4682      	mov	sl, r0
 800da76:	468b      	mov	fp, r1
 800da78:	2900      	cmp	r1, #0
 800da7a:	f47f adbe 	bne.w	800d5fa <_strtod_l+0x452>
 800da7e:	2800      	cmp	r0, #0
 800da80:	f47f adbb 	bne.w	800d5fa <_strtod_l+0x452>
 800da84:	2322      	movs	r3, #34	; 0x22
 800da86:	f8c9 3000 	str.w	r3, [r9]
 800da8a:	e5b6      	b.n	800d5fa <_strtod_l+0x452>
 800da8c:	4013      	ands	r3, r2
 800da8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800da92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800da96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800da9a:	f04f 3aff 	mov.w	sl, #4294967295
 800da9e:	e76a      	b.n	800d976 <_strtod_l+0x7ce>
 800daa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa2:	b193      	cbz	r3, 800daca <_strtod_l+0x922>
 800daa4:	422b      	tst	r3, r5
 800daa6:	f43f af66 	beq.w	800d976 <_strtod_l+0x7ce>
 800daaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daac:	9a04      	ldr	r2, [sp, #16]
 800daae:	4650      	mov	r0, sl
 800dab0:	4659      	mov	r1, fp
 800dab2:	b173      	cbz	r3, 800dad2 <_strtod_l+0x92a>
 800dab4:	f7ff fb5c 	bl	800d170 <sulp>
 800dab8:	4602      	mov	r2, r0
 800daba:	460b      	mov	r3, r1
 800dabc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dac0:	f7f2 fbe4 	bl	800028c <__adddf3>
 800dac4:	4682      	mov	sl, r0
 800dac6:	468b      	mov	fp, r1
 800dac8:	e755      	b.n	800d976 <_strtod_l+0x7ce>
 800daca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dacc:	ea13 0f0a 	tst.w	r3, sl
 800dad0:	e7e9      	b.n	800daa6 <_strtod_l+0x8fe>
 800dad2:	f7ff fb4d 	bl	800d170 <sulp>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dade:	f7f2 fbd3 	bl	8000288 <__aeabi_dsub>
 800dae2:	2200      	movs	r2, #0
 800dae4:	2300      	movs	r3, #0
 800dae6:	4682      	mov	sl, r0
 800dae8:	468b      	mov	fp, r1
 800daea:	f7f2 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 800daee:	2800      	cmp	r0, #0
 800daf0:	f47f ae11 	bne.w	800d716 <_strtod_l+0x56e>
 800daf4:	e73f      	b.n	800d976 <_strtod_l+0x7ce>
 800daf6:	4641      	mov	r1, r8
 800daf8:	4620      	mov	r0, r4
 800dafa:	f001 ff2c 	bl	800f956 <__ratio>
 800dafe:	ec57 6b10 	vmov	r6, r7, d0
 800db02:	2200      	movs	r2, #0
 800db04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db08:	ee10 0a10 	vmov	r0, s0
 800db0c:	4639      	mov	r1, r7
 800db0e:	f7f2 ffef 	bl	8000af0 <__aeabi_dcmple>
 800db12:	2800      	cmp	r0, #0
 800db14:	d077      	beq.n	800dc06 <_strtod_l+0xa5e>
 800db16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d04a      	beq.n	800dbb2 <_strtod_l+0xa0a>
 800db1c:	4b68      	ldr	r3, [pc, #416]	; (800dcc0 <_strtod_l+0xb18>)
 800db1e:	2200      	movs	r2, #0
 800db20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800db24:	4f66      	ldr	r7, [pc, #408]	; (800dcc0 <_strtod_l+0xb18>)
 800db26:	2600      	movs	r6, #0
 800db28:	4b62      	ldr	r3, [pc, #392]	; (800dcb4 <_strtod_l+0xb0c>)
 800db2a:	402b      	ands	r3, r5
 800db2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800db2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db30:	4b64      	ldr	r3, [pc, #400]	; (800dcc4 <_strtod_l+0xb1c>)
 800db32:	429a      	cmp	r2, r3
 800db34:	f040 80ce 	bne.w	800dcd4 <_strtod_l+0xb2c>
 800db38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800db44:	ec4b ab10 	vmov	d0, sl, fp
 800db48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800db4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db50:	f001 fe3c 	bl	800f7cc <__ulp>
 800db54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db58:	ec53 2b10 	vmov	r2, r3, d0
 800db5c:	f7f2 fd4c 	bl	80005f8 <__aeabi_dmul>
 800db60:	4652      	mov	r2, sl
 800db62:	465b      	mov	r3, fp
 800db64:	f7f2 fb92 	bl	800028c <__adddf3>
 800db68:	460b      	mov	r3, r1
 800db6a:	4952      	ldr	r1, [pc, #328]	; (800dcb4 <_strtod_l+0xb0c>)
 800db6c:	4a56      	ldr	r2, [pc, #344]	; (800dcc8 <_strtod_l+0xb20>)
 800db6e:	4019      	ands	r1, r3
 800db70:	4291      	cmp	r1, r2
 800db72:	4682      	mov	sl, r0
 800db74:	d95b      	bls.n	800dc2e <_strtod_l+0xa86>
 800db76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d103      	bne.n	800db88 <_strtod_l+0x9e0>
 800db80:	9b08      	ldr	r3, [sp, #32]
 800db82:	3301      	adds	r3, #1
 800db84:	f43f ad2e 	beq.w	800d5e4 <_strtod_l+0x43c>
 800db88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800dcb8 <_strtod_l+0xb10>
 800db8c:	f04f 3aff 	mov.w	sl, #4294967295
 800db90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800db92:	4648      	mov	r0, r9
 800db94:	f001 fb82 	bl	800f29c <_Bfree>
 800db98:	9905      	ldr	r1, [sp, #20]
 800db9a:	4648      	mov	r0, r9
 800db9c:	f001 fb7e 	bl	800f29c <_Bfree>
 800dba0:	4641      	mov	r1, r8
 800dba2:	4648      	mov	r0, r9
 800dba4:	f001 fb7a 	bl	800f29c <_Bfree>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4648      	mov	r0, r9
 800dbac:	f001 fb76 	bl	800f29c <_Bfree>
 800dbb0:	e619      	b.n	800d7e6 <_strtod_l+0x63e>
 800dbb2:	f1ba 0f00 	cmp.w	sl, #0
 800dbb6:	d11a      	bne.n	800dbee <_strtod_l+0xa46>
 800dbb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbbc:	b9eb      	cbnz	r3, 800dbfa <_strtod_l+0xa52>
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	4b3f      	ldr	r3, [pc, #252]	; (800dcc0 <_strtod_l+0xb18>)
 800dbc2:	4630      	mov	r0, r6
 800dbc4:	4639      	mov	r1, r7
 800dbc6:	f7f2 ff89 	bl	8000adc <__aeabi_dcmplt>
 800dbca:	b9c8      	cbnz	r0, 800dc00 <_strtod_l+0xa58>
 800dbcc:	4630      	mov	r0, r6
 800dbce:	4639      	mov	r1, r7
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4b3e      	ldr	r3, [pc, #248]	; (800dccc <_strtod_l+0xb24>)
 800dbd4:	f7f2 fd10 	bl	80005f8 <__aeabi_dmul>
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dbe0:	9618      	str	r6, [sp, #96]	; 0x60
 800dbe2:	9319      	str	r3, [sp, #100]	; 0x64
 800dbe4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800dbe8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dbec:	e79c      	b.n	800db28 <_strtod_l+0x980>
 800dbee:	f1ba 0f01 	cmp.w	sl, #1
 800dbf2:	d102      	bne.n	800dbfa <_strtod_l+0xa52>
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	f43f ad8e 	beq.w	800d716 <_strtod_l+0x56e>
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	4b34      	ldr	r3, [pc, #208]	; (800dcd0 <_strtod_l+0xb28>)
 800dbfe:	e78f      	b.n	800db20 <_strtod_l+0x978>
 800dc00:	2600      	movs	r6, #0
 800dc02:	4f32      	ldr	r7, [pc, #200]	; (800dccc <_strtod_l+0xb24>)
 800dc04:	e7ea      	b.n	800dbdc <_strtod_l+0xa34>
 800dc06:	4b31      	ldr	r3, [pc, #196]	; (800dccc <_strtod_l+0xb24>)
 800dc08:	4630      	mov	r0, r6
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f7f2 fcf3 	bl	80005f8 <__aeabi_dmul>
 800dc12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc14:	4606      	mov	r6, r0
 800dc16:	460f      	mov	r7, r1
 800dc18:	b933      	cbnz	r3, 800dc28 <_strtod_l+0xa80>
 800dc1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc1e:	9010      	str	r0, [sp, #64]	; 0x40
 800dc20:	9311      	str	r3, [sp, #68]	; 0x44
 800dc22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dc26:	e7df      	b.n	800dbe8 <_strtod_l+0xa40>
 800dc28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dc2c:	e7f9      	b.n	800dc22 <_strtod_l+0xa7a>
 800dc2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc32:	9b04      	ldr	r3, [sp, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1ab      	bne.n	800db90 <_strtod_l+0x9e8>
 800dc38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc3c:	0d1b      	lsrs	r3, r3, #20
 800dc3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc40:	051b      	lsls	r3, r3, #20
 800dc42:	429a      	cmp	r2, r3
 800dc44:	465d      	mov	r5, fp
 800dc46:	d1a3      	bne.n	800db90 <_strtod_l+0x9e8>
 800dc48:	4639      	mov	r1, r7
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7f2 ff84 	bl	8000b58 <__aeabi_d2iz>
 800dc50:	f7f2 fc68 	bl	8000524 <__aeabi_i2d>
 800dc54:	460b      	mov	r3, r1
 800dc56:	4602      	mov	r2, r0
 800dc58:	4639      	mov	r1, r7
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	f7f2 fb14 	bl	8000288 <__aeabi_dsub>
 800dc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc62:	4606      	mov	r6, r0
 800dc64:	460f      	mov	r7, r1
 800dc66:	b933      	cbnz	r3, 800dc76 <_strtod_l+0xace>
 800dc68:	f1ba 0f00 	cmp.w	sl, #0
 800dc6c:	d103      	bne.n	800dc76 <_strtod_l+0xace>
 800dc6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800dc72:	2d00      	cmp	r5, #0
 800dc74:	d06d      	beq.n	800dd52 <_strtod_l+0xbaa>
 800dc76:	a30a      	add	r3, pc, #40	; (adr r3, 800dca0 <_strtod_l+0xaf8>)
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	f47f acb8 	bne.w	800d5fa <_strtod_l+0x452>
 800dc8a:	a307      	add	r3, pc, #28	; (adr r3, 800dca8 <_strtod_l+0xb00>)
 800dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	f43f af79 	beq.w	800db90 <_strtod_l+0x9e8>
 800dc9e:	e4ac      	b.n	800d5fa <_strtod_l+0x452>
 800dca0:	94a03595 	.word	0x94a03595
 800dca4:	3fdfffff 	.word	0x3fdfffff
 800dca8:	35afe535 	.word	0x35afe535
 800dcac:	3fe00000 	.word	0x3fe00000
 800dcb0:	000fffff 	.word	0x000fffff
 800dcb4:	7ff00000 	.word	0x7ff00000
 800dcb8:	7fefffff 	.word	0x7fefffff
 800dcbc:	39500000 	.word	0x39500000
 800dcc0:	3ff00000 	.word	0x3ff00000
 800dcc4:	7fe00000 	.word	0x7fe00000
 800dcc8:	7c9fffff 	.word	0x7c9fffff
 800dccc:	3fe00000 	.word	0x3fe00000
 800dcd0:	bff00000 	.word	0xbff00000
 800dcd4:	9b04      	ldr	r3, [sp, #16]
 800dcd6:	b333      	cbz	r3, 800dd26 <_strtod_l+0xb7e>
 800dcd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcde:	d822      	bhi.n	800dd26 <_strtod_l+0xb7e>
 800dce0:	a327      	add	r3, pc, #156	; (adr r3, 800dd80 <_strtod_l+0xbd8>)
 800dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce6:	4630      	mov	r0, r6
 800dce8:	4639      	mov	r1, r7
 800dcea:	f7f2 ff01 	bl	8000af0 <__aeabi_dcmple>
 800dcee:	b1a0      	cbz	r0, 800dd1a <_strtod_l+0xb72>
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7f2 ff58 	bl	8000ba8 <__aeabi_d2uiz>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	bf08      	it	eq
 800dcfc:	2001      	moveq	r0, #1
 800dcfe:	f7f2 fc01 	bl	8000504 <__aeabi_ui2d>
 800dd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd04:	4606      	mov	r6, r0
 800dd06:	460f      	mov	r7, r1
 800dd08:	bb03      	cbnz	r3, 800dd4c <_strtod_l+0xba4>
 800dd0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd0e:	9012      	str	r0, [sp, #72]	; 0x48
 800dd10:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dd16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dd1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dd22:	1a9b      	subs	r3, r3, r2
 800dd24:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd26:	ed9d 0b08 	vldr	d0, [sp, #32]
 800dd2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dd2e:	f001 fd4d 	bl	800f7cc <__ulp>
 800dd32:	4650      	mov	r0, sl
 800dd34:	ec53 2b10 	vmov	r2, r3, d0
 800dd38:	4659      	mov	r1, fp
 800dd3a:	f7f2 fc5d 	bl	80005f8 <__aeabi_dmul>
 800dd3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd42:	f7f2 faa3 	bl	800028c <__adddf3>
 800dd46:	4682      	mov	sl, r0
 800dd48:	468b      	mov	fp, r1
 800dd4a:	e772      	b.n	800dc32 <_strtod_l+0xa8a>
 800dd4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800dd50:	e7df      	b.n	800dd12 <_strtod_l+0xb6a>
 800dd52:	a30d      	add	r3, pc, #52	; (adr r3, 800dd88 <_strtod_l+0xbe0>)
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	f7f2 fec0 	bl	8000adc <__aeabi_dcmplt>
 800dd5c:	e79c      	b.n	800dc98 <_strtod_l+0xaf0>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	930d      	str	r3, [sp, #52]	; 0x34
 800dd62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	f7ff ba61 	b.w	800d22e <_strtod_l+0x86>
 800dd6c:	2b65      	cmp	r3, #101	; 0x65
 800dd6e:	f04f 0200 	mov.w	r2, #0
 800dd72:	f43f ab4e 	beq.w	800d412 <_strtod_l+0x26a>
 800dd76:	2101      	movs	r1, #1
 800dd78:	4614      	mov	r4, r2
 800dd7a:	9104      	str	r1, [sp, #16]
 800dd7c:	f7ff bacb 	b.w	800d316 <_strtod_l+0x16e>
 800dd80:	ffc00000 	.word	0xffc00000
 800dd84:	41dfffff 	.word	0x41dfffff
 800dd88:	94a03595 	.word	0x94a03595
 800dd8c:	3fcfffff 	.word	0x3fcfffff

0800dd90 <_strtod_r>:
 800dd90:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <_strtod_r+0x18>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	b410      	push	{r4}
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	4c04      	ldr	r4, [pc, #16]	; (800ddac <_strtod_r+0x1c>)
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	bf08      	it	eq
 800dd9e:	4623      	moveq	r3, r4
 800dda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda4:	f7ff ba00 	b.w	800d1a8 <_strtod_l>
 800dda8:	2000017c 	.word	0x2000017c
 800ddac:	200001e0 	.word	0x200001e0

0800ddb0 <_strtol_l.isra.0>:
 800ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb4:	4680      	mov	r8, r0
 800ddb6:	4689      	mov	r9, r1
 800ddb8:	4692      	mov	sl, r2
 800ddba:	461e      	mov	r6, r3
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	463d      	mov	r5, r7
 800ddc0:	9808      	ldr	r0, [sp, #32]
 800ddc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddc6:	f001 fa0d 	bl	800f1e4 <__locale_ctype_ptr_l>
 800ddca:	4420      	add	r0, r4
 800ddcc:	7843      	ldrb	r3, [r0, #1]
 800ddce:	f013 0308 	ands.w	r3, r3, #8
 800ddd2:	d132      	bne.n	800de3a <_strtol_l.isra.0+0x8a>
 800ddd4:	2c2d      	cmp	r4, #45	; 0x2d
 800ddd6:	d132      	bne.n	800de3e <_strtol_l.isra.0+0x8e>
 800ddd8:	787c      	ldrb	r4, [r7, #1]
 800ddda:	1cbd      	adds	r5, r7, #2
 800dddc:	2201      	movs	r2, #1
 800ddde:	2e00      	cmp	r6, #0
 800dde0:	d05d      	beq.n	800de9e <_strtol_l.isra.0+0xee>
 800dde2:	2e10      	cmp	r6, #16
 800dde4:	d109      	bne.n	800ddfa <_strtol_l.isra.0+0x4a>
 800dde6:	2c30      	cmp	r4, #48	; 0x30
 800dde8:	d107      	bne.n	800ddfa <_strtol_l.isra.0+0x4a>
 800ddea:	782b      	ldrb	r3, [r5, #0]
 800ddec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ddf0:	2b58      	cmp	r3, #88	; 0x58
 800ddf2:	d14f      	bne.n	800de94 <_strtol_l.isra.0+0xe4>
 800ddf4:	786c      	ldrb	r4, [r5, #1]
 800ddf6:	2610      	movs	r6, #16
 800ddf8:	3502      	adds	r5, #2
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	bf14      	ite	ne
 800ddfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800de02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800de06:	2700      	movs	r7, #0
 800de08:	fbb1 fcf6 	udiv	ip, r1, r6
 800de0c:	4638      	mov	r0, r7
 800de0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800de12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800de16:	2b09      	cmp	r3, #9
 800de18:	d817      	bhi.n	800de4a <_strtol_l.isra.0+0x9a>
 800de1a:	461c      	mov	r4, r3
 800de1c:	42a6      	cmp	r6, r4
 800de1e:	dd23      	ble.n	800de68 <_strtol_l.isra.0+0xb8>
 800de20:	1c7b      	adds	r3, r7, #1
 800de22:	d007      	beq.n	800de34 <_strtol_l.isra.0+0x84>
 800de24:	4584      	cmp	ip, r0
 800de26:	d31c      	bcc.n	800de62 <_strtol_l.isra.0+0xb2>
 800de28:	d101      	bne.n	800de2e <_strtol_l.isra.0+0x7e>
 800de2a:	45a6      	cmp	lr, r4
 800de2c:	db19      	blt.n	800de62 <_strtol_l.isra.0+0xb2>
 800de2e:	fb00 4006 	mla	r0, r0, r6, r4
 800de32:	2701      	movs	r7, #1
 800de34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de38:	e7eb      	b.n	800de12 <_strtol_l.isra.0+0x62>
 800de3a:	462f      	mov	r7, r5
 800de3c:	e7bf      	b.n	800ddbe <_strtol_l.isra.0+0xe>
 800de3e:	2c2b      	cmp	r4, #43	; 0x2b
 800de40:	bf04      	itt	eq
 800de42:	1cbd      	addeq	r5, r7, #2
 800de44:	787c      	ldrbeq	r4, [r7, #1]
 800de46:	461a      	mov	r2, r3
 800de48:	e7c9      	b.n	800ddde <_strtol_l.isra.0+0x2e>
 800de4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800de4e:	2b19      	cmp	r3, #25
 800de50:	d801      	bhi.n	800de56 <_strtol_l.isra.0+0xa6>
 800de52:	3c37      	subs	r4, #55	; 0x37
 800de54:	e7e2      	b.n	800de1c <_strtol_l.isra.0+0x6c>
 800de56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800de5a:	2b19      	cmp	r3, #25
 800de5c:	d804      	bhi.n	800de68 <_strtol_l.isra.0+0xb8>
 800de5e:	3c57      	subs	r4, #87	; 0x57
 800de60:	e7dc      	b.n	800de1c <_strtol_l.isra.0+0x6c>
 800de62:	f04f 37ff 	mov.w	r7, #4294967295
 800de66:	e7e5      	b.n	800de34 <_strtol_l.isra.0+0x84>
 800de68:	1c7b      	adds	r3, r7, #1
 800de6a:	d108      	bne.n	800de7e <_strtol_l.isra.0+0xce>
 800de6c:	2322      	movs	r3, #34	; 0x22
 800de6e:	f8c8 3000 	str.w	r3, [r8]
 800de72:	4608      	mov	r0, r1
 800de74:	f1ba 0f00 	cmp.w	sl, #0
 800de78:	d107      	bne.n	800de8a <_strtol_l.isra.0+0xda>
 800de7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7e:	b102      	cbz	r2, 800de82 <_strtol_l.isra.0+0xd2>
 800de80:	4240      	negs	r0, r0
 800de82:	f1ba 0f00 	cmp.w	sl, #0
 800de86:	d0f8      	beq.n	800de7a <_strtol_l.isra.0+0xca>
 800de88:	b10f      	cbz	r7, 800de8e <_strtol_l.isra.0+0xde>
 800de8a:	f105 39ff 	add.w	r9, r5, #4294967295
 800de8e:	f8ca 9000 	str.w	r9, [sl]
 800de92:	e7f2      	b.n	800de7a <_strtol_l.isra.0+0xca>
 800de94:	2430      	movs	r4, #48	; 0x30
 800de96:	2e00      	cmp	r6, #0
 800de98:	d1af      	bne.n	800ddfa <_strtol_l.isra.0+0x4a>
 800de9a:	2608      	movs	r6, #8
 800de9c:	e7ad      	b.n	800ddfa <_strtol_l.isra.0+0x4a>
 800de9e:	2c30      	cmp	r4, #48	; 0x30
 800dea0:	d0a3      	beq.n	800ddea <_strtol_l.isra.0+0x3a>
 800dea2:	260a      	movs	r6, #10
 800dea4:	e7a9      	b.n	800ddfa <_strtol_l.isra.0+0x4a>
	...

0800dea8 <_strtol_r>:
 800dea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deaa:	4c06      	ldr	r4, [pc, #24]	; (800dec4 <_strtol_r+0x1c>)
 800deac:	4d06      	ldr	r5, [pc, #24]	; (800dec8 <_strtol_r+0x20>)
 800deae:	6824      	ldr	r4, [r4, #0]
 800deb0:	6a24      	ldr	r4, [r4, #32]
 800deb2:	2c00      	cmp	r4, #0
 800deb4:	bf08      	it	eq
 800deb6:	462c      	moveq	r4, r5
 800deb8:	9400      	str	r4, [sp, #0]
 800deba:	f7ff ff79 	bl	800ddb0 <_strtol_l.isra.0>
 800debe:	b003      	add	sp, #12
 800dec0:	bd30      	pop	{r4, r5, pc}
 800dec2:	bf00      	nop
 800dec4:	2000017c 	.word	0x2000017c
 800dec8:	200001e0 	.word	0x200001e0

0800decc <_vsiprintf_r>:
 800decc:	b500      	push	{lr}
 800dece:	b09b      	sub	sp, #108	; 0x6c
 800ded0:	9100      	str	r1, [sp, #0]
 800ded2:	9104      	str	r1, [sp, #16]
 800ded4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ded8:	9105      	str	r1, [sp, #20]
 800deda:	9102      	str	r1, [sp, #8]
 800dedc:	4905      	ldr	r1, [pc, #20]	; (800def4 <_vsiprintf_r+0x28>)
 800dede:	9103      	str	r1, [sp, #12]
 800dee0:	4669      	mov	r1, sp
 800dee2:	f001 fe0f 	bl	800fb04 <_svfiprintf_r>
 800dee6:	9b00      	ldr	r3, [sp, #0]
 800dee8:	2200      	movs	r2, #0
 800deea:	701a      	strb	r2, [r3, #0]
 800deec:	b01b      	add	sp, #108	; 0x6c
 800deee:	f85d fb04 	ldr.w	pc, [sp], #4
 800def2:	bf00      	nop
 800def4:	ffff0208 	.word	0xffff0208

0800def8 <vsiprintf>:
 800def8:	4613      	mov	r3, r2
 800defa:	460a      	mov	r2, r1
 800defc:	4601      	mov	r1, r0
 800defe:	4802      	ldr	r0, [pc, #8]	; (800df08 <vsiprintf+0x10>)
 800df00:	6800      	ldr	r0, [r0, #0]
 800df02:	f7ff bfe3 	b.w	800decc <_vsiprintf_r>
 800df06:	bf00      	nop
 800df08:	2000017c 	.word	0x2000017c

0800df0c <quorem>:
 800df0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	6903      	ldr	r3, [r0, #16]
 800df12:	690c      	ldr	r4, [r1, #16]
 800df14:	42a3      	cmp	r3, r4
 800df16:	4680      	mov	r8, r0
 800df18:	f2c0 8082 	blt.w	800e020 <quorem+0x114>
 800df1c:	3c01      	subs	r4, #1
 800df1e:	f101 0714 	add.w	r7, r1, #20
 800df22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800df26:	f100 0614 	add.w	r6, r0, #20
 800df2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800df2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800df32:	eb06 030c 	add.w	r3, r6, ip
 800df36:	3501      	adds	r5, #1
 800df38:	eb07 090c 	add.w	r9, r7, ip
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	fbb0 f5f5 	udiv	r5, r0, r5
 800df42:	b395      	cbz	r5, 800dfaa <quorem+0x9e>
 800df44:	f04f 0a00 	mov.w	sl, #0
 800df48:	4638      	mov	r0, r7
 800df4a:	46b6      	mov	lr, r6
 800df4c:	46d3      	mov	fp, sl
 800df4e:	f850 2b04 	ldr.w	r2, [r0], #4
 800df52:	b293      	uxth	r3, r2
 800df54:	fb05 a303 	mla	r3, r5, r3, sl
 800df58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	ebab 0303 	sub.w	r3, fp, r3
 800df62:	0c12      	lsrs	r2, r2, #16
 800df64:	f8de b000 	ldr.w	fp, [lr]
 800df68:	fb05 a202 	mla	r2, r5, r2, sl
 800df6c:	fa13 f38b 	uxtah	r3, r3, fp
 800df70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800df74:	fa1f fb82 	uxth.w	fp, r2
 800df78:	f8de 2000 	ldr.w	r2, [lr]
 800df7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800df80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df84:	b29b      	uxth	r3, r3
 800df86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df8a:	4581      	cmp	r9, r0
 800df8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800df90:	f84e 3b04 	str.w	r3, [lr], #4
 800df94:	d2db      	bcs.n	800df4e <quorem+0x42>
 800df96:	f856 300c 	ldr.w	r3, [r6, ip]
 800df9a:	b933      	cbnz	r3, 800dfaa <quorem+0x9e>
 800df9c:	9b01      	ldr	r3, [sp, #4]
 800df9e:	3b04      	subs	r3, #4
 800dfa0:	429e      	cmp	r6, r3
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	d330      	bcc.n	800e008 <quorem+0xfc>
 800dfa6:	f8c8 4010 	str.w	r4, [r8, #16]
 800dfaa:	4640      	mov	r0, r8
 800dfac:	f001 fb96 	bl	800f6dc <__mcmp>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	db25      	blt.n	800e000 <quorem+0xf4>
 800dfb4:	3501      	adds	r5, #1
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f04f 0c00 	mov.w	ip, #0
 800dfbc:	f857 2b04 	ldr.w	r2, [r7], #4
 800dfc0:	f8d0 e000 	ldr.w	lr, [r0]
 800dfc4:	b293      	uxth	r3, r2
 800dfc6:	ebac 0303 	sub.w	r3, ip, r3
 800dfca:	0c12      	lsrs	r2, r2, #16
 800dfcc:	fa13 f38e 	uxtah	r3, r3, lr
 800dfd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfde:	45b9      	cmp	r9, r7
 800dfe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfe4:	f840 3b04 	str.w	r3, [r0], #4
 800dfe8:	d2e8      	bcs.n	800dfbc <quorem+0xb0>
 800dfea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dfee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dff2:	b92a      	cbnz	r2, 800e000 <quorem+0xf4>
 800dff4:	3b04      	subs	r3, #4
 800dff6:	429e      	cmp	r6, r3
 800dff8:	461a      	mov	r2, r3
 800dffa:	d30b      	bcc.n	800e014 <quorem+0x108>
 800dffc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e000:	4628      	mov	r0, r5
 800e002:	b003      	add	sp, #12
 800e004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e008:	6812      	ldr	r2, [r2, #0]
 800e00a:	3b04      	subs	r3, #4
 800e00c:	2a00      	cmp	r2, #0
 800e00e:	d1ca      	bne.n	800dfa6 <quorem+0x9a>
 800e010:	3c01      	subs	r4, #1
 800e012:	e7c5      	b.n	800dfa0 <quorem+0x94>
 800e014:	6812      	ldr	r2, [r2, #0]
 800e016:	3b04      	subs	r3, #4
 800e018:	2a00      	cmp	r2, #0
 800e01a:	d1ef      	bne.n	800dffc <quorem+0xf0>
 800e01c:	3c01      	subs	r4, #1
 800e01e:	e7ea      	b.n	800dff6 <quorem+0xea>
 800e020:	2000      	movs	r0, #0
 800e022:	e7ee      	b.n	800e002 <quorem+0xf6>
 800e024:	0000      	movs	r0, r0
	...

0800e028 <_dtoa_r>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	ec57 6b10 	vmov	r6, r7, d0
 800e030:	b097      	sub	sp, #92	; 0x5c
 800e032:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e034:	9106      	str	r1, [sp, #24]
 800e036:	4604      	mov	r4, r0
 800e038:	920b      	str	r2, [sp, #44]	; 0x2c
 800e03a:	9312      	str	r3, [sp, #72]	; 0x48
 800e03c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e040:	e9cd 6700 	strd	r6, r7, [sp]
 800e044:	b93d      	cbnz	r5, 800e056 <_dtoa_r+0x2e>
 800e046:	2010      	movs	r0, #16
 800e048:	f7fe f940 	bl	800c2cc <malloc>
 800e04c:	6260      	str	r0, [r4, #36]	; 0x24
 800e04e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e052:	6005      	str	r5, [r0, #0]
 800e054:	60c5      	str	r5, [r0, #12]
 800e056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e058:	6819      	ldr	r1, [r3, #0]
 800e05a:	b151      	cbz	r1, 800e072 <_dtoa_r+0x4a>
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	604a      	str	r2, [r1, #4]
 800e060:	2301      	movs	r3, #1
 800e062:	4093      	lsls	r3, r2
 800e064:	608b      	str	r3, [r1, #8]
 800e066:	4620      	mov	r0, r4
 800e068:	f001 f918 	bl	800f29c <_Bfree>
 800e06c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e06e:	2200      	movs	r2, #0
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	1e3b      	subs	r3, r7, #0
 800e074:	bfbb      	ittet	lt
 800e076:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e07a:	9301      	strlt	r3, [sp, #4]
 800e07c:	2300      	movge	r3, #0
 800e07e:	2201      	movlt	r2, #1
 800e080:	bfac      	ite	ge
 800e082:	f8c8 3000 	strge.w	r3, [r8]
 800e086:	f8c8 2000 	strlt.w	r2, [r8]
 800e08a:	4baf      	ldr	r3, [pc, #700]	; (800e348 <_dtoa_r+0x320>)
 800e08c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e090:	ea33 0308 	bics.w	r3, r3, r8
 800e094:	d114      	bne.n	800e0c0 <_dtoa_r+0x98>
 800e096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e098:	f242 730f 	movw	r3, #9999	; 0x270f
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	9b00      	ldr	r3, [sp, #0]
 800e0a0:	b923      	cbnz	r3, 800e0ac <_dtoa_r+0x84>
 800e0a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f000 8542 	beq.w	800eb30 <_dtoa_r+0xb08>
 800e0ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e35c <_dtoa_r+0x334>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 8544 	beq.w	800eb40 <_dtoa_r+0xb18>
 800e0b8:	f10b 0303 	add.w	r3, fp, #3
 800e0bc:	f000 bd3e 	b.w	800eb3c <_dtoa_r+0xb14>
 800e0c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	f7f2 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d0:	4681      	mov	r9, r0
 800e0d2:	b168      	cbz	r0, 800e0f0 <_dtoa_r+0xc8>
 800e0d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f000 8524 	beq.w	800eb2a <_dtoa_r+0xb02>
 800e0e2:	4b9a      	ldr	r3, [pc, #616]	; (800e34c <_dtoa_r+0x324>)
 800e0e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0e6:	f103 3bff 	add.w	fp, r3, #4294967295
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	f000 bd28 	b.w	800eb40 <_dtoa_r+0xb18>
 800e0f0:	aa14      	add	r2, sp, #80	; 0x50
 800e0f2:	a915      	add	r1, sp, #84	; 0x54
 800e0f4:	ec47 6b10 	vmov	d0, r6, r7
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f001 fbdd 	bl	800f8b8 <__d2b>
 800e0fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e102:	9004      	str	r0, [sp, #16]
 800e104:	2d00      	cmp	r5, #0
 800e106:	d07c      	beq.n	800e202 <_dtoa_r+0x1da>
 800e108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e10c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e110:	46b2      	mov	sl, r6
 800e112:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e11a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e11e:	2200      	movs	r2, #0
 800e120:	4b8b      	ldr	r3, [pc, #556]	; (800e350 <_dtoa_r+0x328>)
 800e122:	4650      	mov	r0, sl
 800e124:	4659      	mov	r1, fp
 800e126:	f7f2 f8af 	bl	8000288 <__aeabi_dsub>
 800e12a:	a381      	add	r3, pc, #516	; (adr r3, 800e330 <_dtoa_r+0x308>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	f7f2 fa62 	bl	80005f8 <__aeabi_dmul>
 800e134:	a380      	add	r3, pc, #512	; (adr r3, 800e338 <_dtoa_r+0x310>)
 800e136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13a:	f7f2 f8a7 	bl	800028c <__adddf3>
 800e13e:	4606      	mov	r6, r0
 800e140:	4628      	mov	r0, r5
 800e142:	460f      	mov	r7, r1
 800e144:	f7f2 f9ee 	bl	8000524 <__aeabi_i2d>
 800e148:	a37d      	add	r3, pc, #500	; (adr r3, 800e340 <_dtoa_r+0x318>)
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	f7f2 fa53 	bl	80005f8 <__aeabi_dmul>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4630      	mov	r0, r6
 800e158:	4639      	mov	r1, r7
 800e15a:	f7f2 f897 	bl	800028c <__adddf3>
 800e15e:	4606      	mov	r6, r0
 800e160:	460f      	mov	r7, r1
 800e162:	f7f2 fcf9 	bl	8000b58 <__aeabi_d2iz>
 800e166:	2200      	movs	r2, #0
 800e168:	4682      	mov	sl, r0
 800e16a:	2300      	movs	r3, #0
 800e16c:	4630      	mov	r0, r6
 800e16e:	4639      	mov	r1, r7
 800e170:	f7f2 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800e174:	b148      	cbz	r0, 800e18a <_dtoa_r+0x162>
 800e176:	4650      	mov	r0, sl
 800e178:	f7f2 f9d4 	bl	8000524 <__aeabi_i2d>
 800e17c:	4632      	mov	r2, r6
 800e17e:	463b      	mov	r3, r7
 800e180:	f7f2 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e184:	b908      	cbnz	r0, 800e18a <_dtoa_r+0x162>
 800e186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e18a:	f1ba 0f16 	cmp.w	sl, #22
 800e18e:	d859      	bhi.n	800e244 <_dtoa_r+0x21c>
 800e190:	4970      	ldr	r1, [pc, #448]	; (800e354 <_dtoa_r+0x32c>)
 800e192:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e19e:	f7f2 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d050      	beq.n	800e248 <_dtoa_r+0x220>
 800e1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1b0:	1b5d      	subs	r5, r3, r5
 800e1b2:	f1b5 0801 	subs.w	r8, r5, #1
 800e1b6:	bf49      	itett	mi
 800e1b8:	f1c5 0301 	rsbmi	r3, r5, #1
 800e1bc:	2300      	movpl	r3, #0
 800e1be:	9305      	strmi	r3, [sp, #20]
 800e1c0:	f04f 0800 	movmi.w	r8, #0
 800e1c4:	bf58      	it	pl
 800e1c6:	9305      	strpl	r3, [sp, #20]
 800e1c8:	f1ba 0f00 	cmp.w	sl, #0
 800e1cc:	db3e      	blt.n	800e24c <_dtoa_r+0x224>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	44d0      	add	r8, sl
 800e1d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e1d6:	9307      	str	r3, [sp, #28]
 800e1d8:	9b06      	ldr	r3, [sp, #24]
 800e1da:	2b09      	cmp	r3, #9
 800e1dc:	f200 8090 	bhi.w	800e300 <_dtoa_r+0x2d8>
 800e1e0:	2b05      	cmp	r3, #5
 800e1e2:	bfc4      	itt	gt
 800e1e4:	3b04      	subgt	r3, #4
 800e1e6:	9306      	strgt	r3, [sp, #24]
 800e1e8:	9b06      	ldr	r3, [sp, #24]
 800e1ea:	f1a3 0302 	sub.w	r3, r3, #2
 800e1ee:	bfcc      	ite	gt
 800e1f0:	2500      	movgt	r5, #0
 800e1f2:	2501      	movle	r5, #1
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	f200 808f 	bhi.w	800e318 <_dtoa_r+0x2f0>
 800e1fa:	e8df f003 	tbb	[pc, r3]
 800e1fe:	7f7d      	.short	0x7f7d
 800e200:	7131      	.short	0x7131
 800e202:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e206:	441d      	add	r5, r3
 800e208:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e20c:	2820      	cmp	r0, #32
 800e20e:	dd13      	ble.n	800e238 <_dtoa_r+0x210>
 800e210:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e214:	9b00      	ldr	r3, [sp, #0]
 800e216:	fa08 f800 	lsl.w	r8, r8, r0
 800e21a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e21e:	fa23 f000 	lsr.w	r0, r3, r0
 800e222:	ea48 0000 	orr.w	r0, r8, r0
 800e226:	f7f2 f96d 	bl	8000504 <__aeabi_ui2d>
 800e22a:	2301      	movs	r3, #1
 800e22c:	4682      	mov	sl, r0
 800e22e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e232:	3d01      	subs	r5, #1
 800e234:	9313      	str	r3, [sp, #76]	; 0x4c
 800e236:	e772      	b.n	800e11e <_dtoa_r+0xf6>
 800e238:	9b00      	ldr	r3, [sp, #0]
 800e23a:	f1c0 0020 	rsb	r0, r0, #32
 800e23e:	fa03 f000 	lsl.w	r0, r3, r0
 800e242:	e7f0      	b.n	800e226 <_dtoa_r+0x1fe>
 800e244:	2301      	movs	r3, #1
 800e246:	e7b1      	b.n	800e1ac <_dtoa_r+0x184>
 800e248:	900f      	str	r0, [sp, #60]	; 0x3c
 800e24a:	e7b0      	b.n	800e1ae <_dtoa_r+0x186>
 800e24c:	9b05      	ldr	r3, [sp, #20]
 800e24e:	eba3 030a 	sub.w	r3, r3, sl
 800e252:	9305      	str	r3, [sp, #20]
 800e254:	f1ca 0300 	rsb	r3, sl, #0
 800e258:	9307      	str	r3, [sp, #28]
 800e25a:	2300      	movs	r3, #0
 800e25c:	930e      	str	r3, [sp, #56]	; 0x38
 800e25e:	e7bb      	b.n	800e1d8 <_dtoa_r+0x1b0>
 800e260:	2301      	movs	r3, #1
 800e262:	930a      	str	r3, [sp, #40]	; 0x28
 800e264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e266:	2b00      	cmp	r3, #0
 800e268:	dd59      	ble.n	800e31e <_dtoa_r+0x2f6>
 800e26a:	9302      	str	r3, [sp, #8]
 800e26c:	4699      	mov	r9, r3
 800e26e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e270:	2200      	movs	r2, #0
 800e272:	6072      	str	r2, [r6, #4]
 800e274:	2204      	movs	r2, #4
 800e276:	f102 0014 	add.w	r0, r2, #20
 800e27a:	4298      	cmp	r0, r3
 800e27c:	6871      	ldr	r1, [r6, #4]
 800e27e:	d953      	bls.n	800e328 <_dtoa_r+0x300>
 800e280:	4620      	mov	r0, r4
 800e282:	f000 ffd7 	bl	800f234 <_Balloc>
 800e286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e288:	6030      	str	r0, [r6, #0]
 800e28a:	f1b9 0f0e 	cmp.w	r9, #14
 800e28e:	f8d3 b000 	ldr.w	fp, [r3]
 800e292:	f200 80e6 	bhi.w	800e462 <_dtoa_r+0x43a>
 800e296:	2d00      	cmp	r5, #0
 800e298:	f000 80e3 	beq.w	800e462 <_dtoa_r+0x43a>
 800e29c:	ed9d 7b00 	vldr	d7, [sp]
 800e2a0:	f1ba 0f00 	cmp.w	sl, #0
 800e2a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e2a8:	dd74      	ble.n	800e394 <_dtoa_r+0x36c>
 800e2aa:	4a2a      	ldr	r2, [pc, #168]	; (800e354 <_dtoa_r+0x32c>)
 800e2ac:	f00a 030f 	and.w	r3, sl, #15
 800e2b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2b4:	ed93 7b00 	vldr	d7, [r3]
 800e2b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e2bc:	06f0      	lsls	r0, r6, #27
 800e2be:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e2c2:	d565      	bpl.n	800e390 <_dtoa_r+0x368>
 800e2c4:	4b24      	ldr	r3, [pc, #144]	; (800e358 <_dtoa_r+0x330>)
 800e2c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2ce:	f7f2 fabd 	bl	800084c <__aeabi_ddiv>
 800e2d2:	e9cd 0100 	strd	r0, r1, [sp]
 800e2d6:	f006 060f 	and.w	r6, r6, #15
 800e2da:	2503      	movs	r5, #3
 800e2dc:	4f1e      	ldr	r7, [pc, #120]	; (800e358 <_dtoa_r+0x330>)
 800e2de:	e04c      	b.n	800e37a <_dtoa_r+0x352>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e6:	4453      	add	r3, sl
 800e2e8:	f103 0901 	add.w	r9, r3, #1
 800e2ec:	9302      	str	r3, [sp, #8]
 800e2ee:	464b      	mov	r3, r9
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	bfb8      	it	lt
 800e2f4:	2301      	movlt	r3, #1
 800e2f6:	e7ba      	b.n	800e26e <_dtoa_r+0x246>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e7b2      	b.n	800e262 <_dtoa_r+0x23a>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	e7f0      	b.n	800e2e2 <_dtoa_r+0x2ba>
 800e300:	2501      	movs	r5, #1
 800e302:	2300      	movs	r3, #0
 800e304:	9306      	str	r3, [sp, #24]
 800e306:	950a      	str	r5, [sp, #40]	; 0x28
 800e308:	f04f 33ff 	mov.w	r3, #4294967295
 800e30c:	9302      	str	r3, [sp, #8]
 800e30e:	4699      	mov	r9, r3
 800e310:	2200      	movs	r2, #0
 800e312:	2312      	movs	r3, #18
 800e314:	920b      	str	r2, [sp, #44]	; 0x2c
 800e316:	e7aa      	b.n	800e26e <_dtoa_r+0x246>
 800e318:	2301      	movs	r3, #1
 800e31a:	930a      	str	r3, [sp, #40]	; 0x28
 800e31c:	e7f4      	b.n	800e308 <_dtoa_r+0x2e0>
 800e31e:	2301      	movs	r3, #1
 800e320:	9302      	str	r3, [sp, #8]
 800e322:	4699      	mov	r9, r3
 800e324:	461a      	mov	r2, r3
 800e326:	e7f5      	b.n	800e314 <_dtoa_r+0x2ec>
 800e328:	3101      	adds	r1, #1
 800e32a:	6071      	str	r1, [r6, #4]
 800e32c:	0052      	lsls	r2, r2, #1
 800e32e:	e7a2      	b.n	800e276 <_dtoa_r+0x24e>
 800e330:	636f4361 	.word	0x636f4361
 800e334:	3fd287a7 	.word	0x3fd287a7
 800e338:	8b60c8b3 	.word	0x8b60c8b3
 800e33c:	3fc68a28 	.word	0x3fc68a28
 800e340:	509f79fb 	.word	0x509f79fb
 800e344:	3fd34413 	.word	0x3fd34413
 800e348:	7ff00000 	.word	0x7ff00000
 800e34c:	0800fe51 	.word	0x0800fe51
 800e350:	3ff80000 	.word	0x3ff80000
 800e354:	0800ff10 	.word	0x0800ff10
 800e358:	0800fee8 	.word	0x0800fee8
 800e35c:	0800fed9 	.word	0x0800fed9
 800e360:	07f1      	lsls	r1, r6, #31
 800e362:	d508      	bpl.n	800e376 <_dtoa_r+0x34e>
 800e364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e36c:	f7f2 f944 	bl	80005f8 <__aeabi_dmul>
 800e370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e374:	3501      	adds	r5, #1
 800e376:	1076      	asrs	r6, r6, #1
 800e378:	3708      	adds	r7, #8
 800e37a:	2e00      	cmp	r6, #0
 800e37c:	d1f0      	bne.n	800e360 <_dtoa_r+0x338>
 800e37e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e382:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e386:	f7f2 fa61 	bl	800084c <__aeabi_ddiv>
 800e38a:	e9cd 0100 	strd	r0, r1, [sp]
 800e38e:	e01a      	b.n	800e3c6 <_dtoa_r+0x39e>
 800e390:	2502      	movs	r5, #2
 800e392:	e7a3      	b.n	800e2dc <_dtoa_r+0x2b4>
 800e394:	f000 80a0 	beq.w	800e4d8 <_dtoa_r+0x4b0>
 800e398:	f1ca 0600 	rsb	r6, sl, #0
 800e39c:	4b9f      	ldr	r3, [pc, #636]	; (800e61c <_dtoa_r+0x5f4>)
 800e39e:	4fa0      	ldr	r7, [pc, #640]	; (800e620 <_dtoa_r+0x5f8>)
 800e3a0:	f006 020f 	and.w	r2, r6, #15
 800e3a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e3b0:	f7f2 f922 	bl	80005f8 <__aeabi_dmul>
 800e3b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b8:	1136      	asrs	r6, r6, #4
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	2502      	movs	r5, #2
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	d17f      	bne.n	800e4c2 <_dtoa_r+0x49a>
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1e1      	bne.n	800e38a <_dtoa_r+0x362>
 800e3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 8087 	beq.w	800e4dc <_dtoa_r+0x4b4>
 800e3ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4b93      	ldr	r3, [pc, #588]	; (800e624 <_dtoa_r+0x5fc>)
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	4639      	mov	r1, r7
 800e3da:	f7f2 fb7f 	bl	8000adc <__aeabi_dcmplt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d07c      	beq.n	800e4dc <_dtoa_r+0x4b4>
 800e3e2:	f1b9 0f00 	cmp.w	r9, #0
 800e3e6:	d079      	beq.n	800e4dc <_dtoa_r+0x4b4>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dd35      	ble.n	800e45a <_dtoa_r+0x432>
 800e3ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e3f2:	9308      	str	r3, [sp, #32]
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	4b8b      	ldr	r3, [pc, #556]	; (800e628 <_dtoa_r+0x600>)
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7f2 f8fc 	bl	80005f8 <__aeabi_dmul>
 800e400:	e9cd 0100 	strd	r0, r1, [sp]
 800e404:	9f02      	ldr	r7, [sp, #8]
 800e406:	3501      	adds	r5, #1
 800e408:	4628      	mov	r0, r5
 800e40a:	f7f2 f88b 	bl	8000524 <__aeabi_i2d>
 800e40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e412:	f7f2 f8f1 	bl	80005f8 <__aeabi_dmul>
 800e416:	2200      	movs	r2, #0
 800e418:	4b84      	ldr	r3, [pc, #528]	; (800e62c <_dtoa_r+0x604>)
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	4605      	mov	r5, r0
 800e420:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e424:	2f00      	cmp	r7, #0
 800e426:	d15d      	bne.n	800e4e4 <_dtoa_r+0x4bc>
 800e428:	2200      	movs	r2, #0
 800e42a:	4b81      	ldr	r3, [pc, #516]	; (800e630 <_dtoa_r+0x608>)
 800e42c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e430:	f7f1 ff2a 	bl	8000288 <__aeabi_dsub>
 800e434:	462a      	mov	r2, r5
 800e436:	4633      	mov	r3, r6
 800e438:	e9cd 0100 	strd	r0, r1, [sp]
 800e43c:	f7f2 fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 800e440:	2800      	cmp	r0, #0
 800e442:	f040 8288 	bne.w	800e956 <_dtoa_r+0x92e>
 800e446:	462a      	mov	r2, r5
 800e448:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e44c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e450:	f7f2 fb44 	bl	8000adc <__aeabi_dcmplt>
 800e454:	2800      	cmp	r0, #0
 800e456:	f040 827c 	bne.w	800e952 <_dtoa_r+0x92a>
 800e45a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e45e:	e9cd 2300 	strd	r2, r3, [sp]
 800e462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e464:	2b00      	cmp	r3, #0
 800e466:	f2c0 8150 	blt.w	800e70a <_dtoa_r+0x6e2>
 800e46a:	f1ba 0f0e 	cmp.w	sl, #14
 800e46e:	f300 814c 	bgt.w	800e70a <_dtoa_r+0x6e2>
 800e472:	4b6a      	ldr	r3, [pc, #424]	; (800e61c <_dtoa_r+0x5f4>)
 800e474:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e478:	ed93 7b00 	vldr	d7, [r3]
 800e47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e484:	f280 80d8 	bge.w	800e638 <_dtoa_r+0x610>
 800e488:	f1b9 0f00 	cmp.w	r9, #0
 800e48c:	f300 80d4 	bgt.w	800e638 <_dtoa_r+0x610>
 800e490:	f040 825e 	bne.w	800e950 <_dtoa_r+0x928>
 800e494:	2200      	movs	r2, #0
 800e496:	4b66      	ldr	r3, [pc, #408]	; (800e630 <_dtoa_r+0x608>)
 800e498:	ec51 0b17 	vmov	r0, r1, d7
 800e49c:	f7f2 f8ac 	bl	80005f8 <__aeabi_dmul>
 800e4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4a4:	f7f2 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 800e4a8:	464f      	mov	r7, r9
 800e4aa:	464e      	mov	r6, r9
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	f040 8234 	bne.w	800e91a <_dtoa_r+0x8f2>
 800e4b2:	2331      	movs	r3, #49	; 0x31
 800e4b4:	f10b 0501 	add.w	r5, fp, #1
 800e4b8:	f88b 3000 	strb.w	r3, [fp]
 800e4bc:	f10a 0a01 	add.w	sl, sl, #1
 800e4c0:	e22f      	b.n	800e922 <_dtoa_r+0x8fa>
 800e4c2:	07f2      	lsls	r2, r6, #31
 800e4c4:	d505      	bpl.n	800e4d2 <_dtoa_r+0x4aa>
 800e4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4ca:	f7f2 f895 	bl	80005f8 <__aeabi_dmul>
 800e4ce:	3501      	adds	r5, #1
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	1076      	asrs	r6, r6, #1
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	e772      	b.n	800e3be <_dtoa_r+0x396>
 800e4d8:	2502      	movs	r5, #2
 800e4da:	e774      	b.n	800e3c6 <_dtoa_r+0x39e>
 800e4dc:	f8cd a020 	str.w	sl, [sp, #32]
 800e4e0:	464f      	mov	r7, r9
 800e4e2:	e791      	b.n	800e408 <_dtoa_r+0x3e0>
 800e4e4:	4b4d      	ldr	r3, [pc, #308]	; (800e61c <_dtoa_r+0x5f4>)
 800e4e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d047      	beq.n	800e584 <_dtoa_r+0x55c>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	494e      	ldr	r1, [pc, #312]	; (800e634 <_dtoa_r+0x60c>)
 800e4fc:	f7f2 f9a6 	bl	800084c <__aeabi_ddiv>
 800e500:	462a      	mov	r2, r5
 800e502:	4633      	mov	r3, r6
 800e504:	f7f1 fec0 	bl	8000288 <__aeabi_dsub>
 800e508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e50c:	465d      	mov	r5, fp
 800e50e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e512:	f7f2 fb21 	bl	8000b58 <__aeabi_d2iz>
 800e516:	4606      	mov	r6, r0
 800e518:	f7f2 f804 	bl	8000524 <__aeabi_i2d>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e524:	f7f1 feb0 	bl	8000288 <__aeabi_dsub>
 800e528:	3630      	adds	r6, #48	; 0x30
 800e52a:	f805 6b01 	strb.w	r6, [r5], #1
 800e52e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e532:	e9cd 0100 	strd	r0, r1, [sp]
 800e536:	f7f2 fad1 	bl	8000adc <__aeabi_dcmplt>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d163      	bne.n	800e606 <_dtoa_r+0x5de>
 800e53e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e542:	2000      	movs	r0, #0
 800e544:	4937      	ldr	r1, [pc, #220]	; (800e624 <_dtoa_r+0x5fc>)
 800e546:	f7f1 fe9f 	bl	8000288 <__aeabi_dsub>
 800e54a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e54e:	f7f2 fac5 	bl	8000adc <__aeabi_dcmplt>
 800e552:	2800      	cmp	r0, #0
 800e554:	f040 80b7 	bne.w	800e6c6 <_dtoa_r+0x69e>
 800e558:	eba5 030b 	sub.w	r3, r5, fp
 800e55c:	429f      	cmp	r7, r3
 800e55e:	f77f af7c 	ble.w	800e45a <_dtoa_r+0x432>
 800e562:	2200      	movs	r2, #0
 800e564:	4b30      	ldr	r3, [pc, #192]	; (800e628 <_dtoa_r+0x600>)
 800e566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e56a:	f7f2 f845 	bl	80005f8 <__aeabi_dmul>
 800e56e:	2200      	movs	r2, #0
 800e570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e574:	4b2c      	ldr	r3, [pc, #176]	; (800e628 <_dtoa_r+0x600>)
 800e576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e57a:	f7f2 f83d 	bl	80005f8 <__aeabi_dmul>
 800e57e:	e9cd 0100 	strd	r0, r1, [sp]
 800e582:	e7c4      	b.n	800e50e <_dtoa_r+0x4e6>
 800e584:	462a      	mov	r2, r5
 800e586:	4633      	mov	r3, r6
 800e588:	f7f2 f836 	bl	80005f8 <__aeabi_dmul>
 800e58c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e590:	eb0b 0507 	add.w	r5, fp, r7
 800e594:	465e      	mov	r6, fp
 800e596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e59a:	f7f2 fadd 	bl	8000b58 <__aeabi_d2iz>
 800e59e:	4607      	mov	r7, r0
 800e5a0:	f7f1 ffc0 	bl	8000524 <__aeabi_i2d>
 800e5a4:	3730      	adds	r7, #48	; 0x30
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5ae:	f7f1 fe6b 	bl	8000288 <__aeabi_dsub>
 800e5b2:	f806 7b01 	strb.w	r7, [r6], #1
 800e5b6:	42ae      	cmp	r6, r5
 800e5b8:	e9cd 0100 	strd	r0, r1, [sp]
 800e5bc:	f04f 0200 	mov.w	r2, #0
 800e5c0:	d126      	bne.n	800e610 <_dtoa_r+0x5e8>
 800e5c2:	4b1c      	ldr	r3, [pc, #112]	; (800e634 <_dtoa_r+0x60c>)
 800e5c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5c8:	f7f1 fe60 	bl	800028c <__adddf3>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5d4:	f7f2 faa0 	bl	8000b18 <__aeabi_dcmpgt>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d174      	bne.n	800e6c6 <_dtoa_r+0x69e>
 800e5dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e5e0:	2000      	movs	r0, #0
 800e5e2:	4914      	ldr	r1, [pc, #80]	; (800e634 <_dtoa_r+0x60c>)
 800e5e4:	f7f1 fe50 	bl	8000288 <__aeabi_dsub>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5f0:	f7f2 fa74 	bl	8000adc <__aeabi_dcmplt>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	f43f af30 	beq.w	800e45a <_dtoa_r+0x432>
 800e5fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5fe:	2b30      	cmp	r3, #48	; 0x30
 800e600:	f105 32ff 	add.w	r2, r5, #4294967295
 800e604:	d002      	beq.n	800e60c <_dtoa_r+0x5e4>
 800e606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e60a:	e04a      	b.n	800e6a2 <_dtoa_r+0x67a>
 800e60c:	4615      	mov	r5, r2
 800e60e:	e7f4      	b.n	800e5fa <_dtoa_r+0x5d2>
 800e610:	4b05      	ldr	r3, [pc, #20]	; (800e628 <_dtoa_r+0x600>)
 800e612:	f7f1 fff1 	bl	80005f8 <__aeabi_dmul>
 800e616:	e9cd 0100 	strd	r0, r1, [sp]
 800e61a:	e7bc      	b.n	800e596 <_dtoa_r+0x56e>
 800e61c:	0800ff10 	.word	0x0800ff10
 800e620:	0800fee8 	.word	0x0800fee8
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	40240000 	.word	0x40240000
 800e62c:	401c0000 	.word	0x401c0000
 800e630:	40140000 	.word	0x40140000
 800e634:	3fe00000 	.word	0x3fe00000
 800e638:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e63c:	465d      	mov	r5, fp
 800e63e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e642:	4630      	mov	r0, r6
 800e644:	4639      	mov	r1, r7
 800e646:	f7f2 f901 	bl	800084c <__aeabi_ddiv>
 800e64a:	f7f2 fa85 	bl	8000b58 <__aeabi_d2iz>
 800e64e:	4680      	mov	r8, r0
 800e650:	f7f1 ff68 	bl	8000524 <__aeabi_i2d>
 800e654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e658:	f7f1 ffce 	bl	80005f8 <__aeabi_dmul>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4630      	mov	r0, r6
 800e662:	4639      	mov	r1, r7
 800e664:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e668:	f7f1 fe0e 	bl	8000288 <__aeabi_dsub>
 800e66c:	f805 6b01 	strb.w	r6, [r5], #1
 800e670:	eba5 060b 	sub.w	r6, r5, fp
 800e674:	45b1      	cmp	r9, r6
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	d139      	bne.n	800e6f0 <_dtoa_r+0x6c8>
 800e67c:	f7f1 fe06 	bl	800028c <__adddf3>
 800e680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e684:	4606      	mov	r6, r0
 800e686:	460f      	mov	r7, r1
 800e688:	f7f2 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800e68c:	b9c8      	cbnz	r0, 800e6c2 <_dtoa_r+0x69a>
 800e68e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e692:	4630      	mov	r0, r6
 800e694:	4639      	mov	r1, r7
 800e696:	f7f2 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800e69a:	b110      	cbz	r0, 800e6a2 <_dtoa_r+0x67a>
 800e69c:	f018 0f01 	tst.w	r8, #1
 800e6a0:	d10f      	bne.n	800e6c2 <_dtoa_r+0x69a>
 800e6a2:	9904      	ldr	r1, [sp, #16]
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f000 fdf9 	bl	800f29c <_Bfree>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6ae:	702b      	strb	r3, [r5, #0]
 800e6b0:	f10a 0301 	add.w	r3, sl, #1
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 8241 	beq.w	800eb40 <_dtoa_r+0xb18>
 800e6be:	601d      	str	r5, [r3, #0]
 800e6c0:	e23e      	b.n	800eb40 <_dtoa_r+0xb18>
 800e6c2:	f8cd a020 	str.w	sl, [sp, #32]
 800e6c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6ca:	2a39      	cmp	r2, #57	; 0x39
 800e6cc:	f105 33ff 	add.w	r3, r5, #4294967295
 800e6d0:	d108      	bne.n	800e6e4 <_dtoa_r+0x6bc>
 800e6d2:	459b      	cmp	fp, r3
 800e6d4:	d10a      	bne.n	800e6ec <_dtoa_r+0x6c4>
 800e6d6:	9b08      	ldr	r3, [sp, #32]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	9308      	str	r3, [sp, #32]
 800e6dc:	2330      	movs	r3, #48	; 0x30
 800e6de:	f88b 3000 	strb.w	r3, [fp]
 800e6e2:	465b      	mov	r3, fp
 800e6e4:	781a      	ldrb	r2, [r3, #0]
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	701a      	strb	r2, [r3, #0]
 800e6ea:	e78c      	b.n	800e606 <_dtoa_r+0x5de>
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	e7ea      	b.n	800e6c6 <_dtoa_r+0x69e>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	4b9b      	ldr	r3, [pc, #620]	; (800e960 <_dtoa_r+0x938>)
 800e6f4:	f7f1 ff80 	bl	80005f8 <__aeabi_dmul>
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	4606      	mov	r6, r0
 800e6fe:	460f      	mov	r7, r1
 800e700:	f7f2 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e704:	2800      	cmp	r0, #0
 800e706:	d09a      	beq.n	800e63e <_dtoa_r+0x616>
 800e708:	e7cb      	b.n	800e6a2 <_dtoa_r+0x67a>
 800e70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e70c:	2a00      	cmp	r2, #0
 800e70e:	f000 808b 	beq.w	800e828 <_dtoa_r+0x800>
 800e712:	9a06      	ldr	r2, [sp, #24]
 800e714:	2a01      	cmp	r2, #1
 800e716:	dc6e      	bgt.n	800e7f6 <_dtoa_r+0x7ce>
 800e718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	d067      	beq.n	800e7ee <_dtoa_r+0x7c6>
 800e71e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e722:	9f07      	ldr	r7, [sp, #28]
 800e724:	9d05      	ldr	r5, [sp, #20]
 800e726:	9a05      	ldr	r2, [sp, #20]
 800e728:	2101      	movs	r1, #1
 800e72a:	441a      	add	r2, r3
 800e72c:	4620      	mov	r0, r4
 800e72e:	9205      	str	r2, [sp, #20]
 800e730:	4498      	add	r8, r3
 800e732:	f000 fe91 	bl	800f458 <__i2b>
 800e736:	4606      	mov	r6, r0
 800e738:	2d00      	cmp	r5, #0
 800e73a:	dd0c      	ble.n	800e756 <_dtoa_r+0x72e>
 800e73c:	f1b8 0f00 	cmp.w	r8, #0
 800e740:	dd09      	ble.n	800e756 <_dtoa_r+0x72e>
 800e742:	4545      	cmp	r5, r8
 800e744:	9a05      	ldr	r2, [sp, #20]
 800e746:	462b      	mov	r3, r5
 800e748:	bfa8      	it	ge
 800e74a:	4643      	movge	r3, r8
 800e74c:	1ad2      	subs	r2, r2, r3
 800e74e:	9205      	str	r2, [sp, #20]
 800e750:	1aed      	subs	r5, r5, r3
 800e752:	eba8 0803 	sub.w	r8, r8, r3
 800e756:	9b07      	ldr	r3, [sp, #28]
 800e758:	b1eb      	cbz	r3, 800e796 <_dtoa_r+0x76e>
 800e75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d067      	beq.n	800e830 <_dtoa_r+0x808>
 800e760:	b18f      	cbz	r7, 800e786 <_dtoa_r+0x75e>
 800e762:	4631      	mov	r1, r6
 800e764:	463a      	mov	r2, r7
 800e766:	4620      	mov	r0, r4
 800e768:	f000 ff16 	bl	800f598 <__pow5mult>
 800e76c:	9a04      	ldr	r2, [sp, #16]
 800e76e:	4601      	mov	r1, r0
 800e770:	4606      	mov	r6, r0
 800e772:	4620      	mov	r0, r4
 800e774:	f000 fe79 	bl	800f46a <__multiply>
 800e778:	9904      	ldr	r1, [sp, #16]
 800e77a:	9008      	str	r0, [sp, #32]
 800e77c:	4620      	mov	r0, r4
 800e77e:	f000 fd8d 	bl	800f29c <_Bfree>
 800e782:	9b08      	ldr	r3, [sp, #32]
 800e784:	9304      	str	r3, [sp, #16]
 800e786:	9b07      	ldr	r3, [sp, #28]
 800e788:	1bda      	subs	r2, r3, r7
 800e78a:	d004      	beq.n	800e796 <_dtoa_r+0x76e>
 800e78c:	9904      	ldr	r1, [sp, #16]
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 ff02 	bl	800f598 <__pow5mult>
 800e794:	9004      	str	r0, [sp, #16]
 800e796:	2101      	movs	r1, #1
 800e798:	4620      	mov	r0, r4
 800e79a:	f000 fe5d 	bl	800f458 <__i2b>
 800e79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 81d0 	beq.w	800eb48 <_dtoa_r+0xb20>
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 fef3 	bl	800f598 <__pow5mult>
 800e7b2:	9b06      	ldr	r3, [sp, #24]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	dc40      	bgt.n	800e83c <_dtoa_r+0x814>
 800e7ba:	9b00      	ldr	r3, [sp, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d139      	bne.n	800e834 <_dtoa_r+0x80c>
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d136      	bne.n	800e838 <_dtoa_r+0x810>
 800e7ca:	9b01      	ldr	r3, [sp, #4]
 800e7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7d0:	0d1b      	lsrs	r3, r3, #20
 800e7d2:	051b      	lsls	r3, r3, #20
 800e7d4:	b12b      	cbz	r3, 800e7e2 <_dtoa_r+0x7ba>
 800e7d6:	9b05      	ldr	r3, [sp, #20]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	9305      	str	r3, [sp, #20]
 800e7dc:	f108 0801 	add.w	r8, r8, #1
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	9307      	str	r3, [sp, #28]
 800e7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d12a      	bne.n	800e840 <_dtoa_r+0x818>
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	e030      	b.n	800e850 <_dtoa_r+0x828>
 800e7ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7f4:	e795      	b.n	800e722 <_dtoa_r+0x6fa>
 800e7f6:	9b07      	ldr	r3, [sp, #28]
 800e7f8:	f109 37ff 	add.w	r7, r9, #4294967295
 800e7fc:	42bb      	cmp	r3, r7
 800e7fe:	bfbf      	itttt	lt
 800e800:	9b07      	ldrlt	r3, [sp, #28]
 800e802:	9707      	strlt	r7, [sp, #28]
 800e804:	1afa      	sublt	r2, r7, r3
 800e806:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e808:	bfbb      	ittet	lt
 800e80a:	189b      	addlt	r3, r3, r2
 800e80c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e80e:	1bdf      	subge	r7, r3, r7
 800e810:	2700      	movlt	r7, #0
 800e812:	f1b9 0f00 	cmp.w	r9, #0
 800e816:	bfb5      	itete	lt
 800e818:	9b05      	ldrlt	r3, [sp, #20]
 800e81a:	9d05      	ldrge	r5, [sp, #20]
 800e81c:	eba3 0509 	sublt.w	r5, r3, r9
 800e820:	464b      	movge	r3, r9
 800e822:	bfb8      	it	lt
 800e824:	2300      	movlt	r3, #0
 800e826:	e77e      	b.n	800e726 <_dtoa_r+0x6fe>
 800e828:	9f07      	ldr	r7, [sp, #28]
 800e82a:	9d05      	ldr	r5, [sp, #20]
 800e82c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e82e:	e783      	b.n	800e738 <_dtoa_r+0x710>
 800e830:	9a07      	ldr	r2, [sp, #28]
 800e832:	e7ab      	b.n	800e78c <_dtoa_r+0x764>
 800e834:	2300      	movs	r3, #0
 800e836:	e7d4      	b.n	800e7e2 <_dtoa_r+0x7ba>
 800e838:	9b00      	ldr	r3, [sp, #0]
 800e83a:	e7d2      	b.n	800e7e2 <_dtoa_r+0x7ba>
 800e83c:	2300      	movs	r3, #0
 800e83e:	9307      	str	r3, [sp, #28]
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e846:	6918      	ldr	r0, [r3, #16]
 800e848:	f000 fdb8 	bl	800f3bc <__hi0bits>
 800e84c:	f1c0 0020 	rsb	r0, r0, #32
 800e850:	4440      	add	r0, r8
 800e852:	f010 001f 	ands.w	r0, r0, #31
 800e856:	d047      	beq.n	800e8e8 <_dtoa_r+0x8c0>
 800e858:	f1c0 0320 	rsb	r3, r0, #32
 800e85c:	2b04      	cmp	r3, #4
 800e85e:	dd3b      	ble.n	800e8d8 <_dtoa_r+0x8b0>
 800e860:	9b05      	ldr	r3, [sp, #20]
 800e862:	f1c0 001c 	rsb	r0, r0, #28
 800e866:	4403      	add	r3, r0
 800e868:	9305      	str	r3, [sp, #20]
 800e86a:	4405      	add	r5, r0
 800e86c:	4480      	add	r8, r0
 800e86e:	9b05      	ldr	r3, [sp, #20]
 800e870:	2b00      	cmp	r3, #0
 800e872:	dd05      	ble.n	800e880 <_dtoa_r+0x858>
 800e874:	461a      	mov	r2, r3
 800e876:	9904      	ldr	r1, [sp, #16]
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fedb 	bl	800f634 <__lshift>
 800e87e:	9004      	str	r0, [sp, #16]
 800e880:	f1b8 0f00 	cmp.w	r8, #0
 800e884:	dd05      	ble.n	800e892 <_dtoa_r+0x86a>
 800e886:	4639      	mov	r1, r7
 800e888:	4642      	mov	r2, r8
 800e88a:	4620      	mov	r0, r4
 800e88c:	f000 fed2 	bl	800f634 <__lshift>
 800e890:	4607      	mov	r7, r0
 800e892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e894:	b353      	cbz	r3, 800e8ec <_dtoa_r+0x8c4>
 800e896:	4639      	mov	r1, r7
 800e898:	9804      	ldr	r0, [sp, #16]
 800e89a:	f000 ff1f 	bl	800f6dc <__mcmp>
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	da24      	bge.n	800e8ec <_dtoa_r+0x8c4>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	220a      	movs	r2, #10
 800e8a6:	9904      	ldr	r1, [sp, #16]
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f000 fd0e 	bl	800f2ca <__multadd>
 800e8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b0:	9004      	str	r0, [sp, #16]
 800e8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f000 814d 	beq.w	800eb56 <_dtoa_r+0xb2e>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4631      	mov	r1, r6
 800e8c0:	220a      	movs	r2, #10
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 fd01 	bl	800f2ca <__multadd>
 800e8c8:	9b02      	ldr	r3, [sp, #8]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	dc4f      	bgt.n	800e970 <_dtoa_r+0x948>
 800e8d0:	9b06      	ldr	r3, [sp, #24]
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	dd4c      	ble.n	800e970 <_dtoa_r+0x948>
 800e8d6:	e011      	b.n	800e8fc <_dtoa_r+0x8d4>
 800e8d8:	d0c9      	beq.n	800e86e <_dtoa_r+0x846>
 800e8da:	9a05      	ldr	r2, [sp, #20]
 800e8dc:	331c      	adds	r3, #28
 800e8de:	441a      	add	r2, r3
 800e8e0:	9205      	str	r2, [sp, #20]
 800e8e2:	441d      	add	r5, r3
 800e8e4:	4498      	add	r8, r3
 800e8e6:	e7c2      	b.n	800e86e <_dtoa_r+0x846>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	e7f6      	b.n	800e8da <_dtoa_r+0x8b2>
 800e8ec:	f1b9 0f00 	cmp.w	r9, #0
 800e8f0:	dc38      	bgt.n	800e964 <_dtoa_r+0x93c>
 800e8f2:	9b06      	ldr	r3, [sp, #24]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	dd35      	ble.n	800e964 <_dtoa_r+0x93c>
 800e8f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e8fc:	9b02      	ldr	r3, [sp, #8]
 800e8fe:	b963      	cbnz	r3, 800e91a <_dtoa_r+0x8f2>
 800e900:	4639      	mov	r1, r7
 800e902:	2205      	movs	r2, #5
 800e904:	4620      	mov	r0, r4
 800e906:	f000 fce0 	bl	800f2ca <__multadd>
 800e90a:	4601      	mov	r1, r0
 800e90c:	4607      	mov	r7, r0
 800e90e:	9804      	ldr	r0, [sp, #16]
 800e910:	f000 fee4 	bl	800f6dc <__mcmp>
 800e914:	2800      	cmp	r0, #0
 800e916:	f73f adcc 	bgt.w	800e4b2 <_dtoa_r+0x48a>
 800e91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e91c:	465d      	mov	r5, fp
 800e91e:	ea6f 0a03 	mvn.w	sl, r3
 800e922:	f04f 0900 	mov.w	r9, #0
 800e926:	4639      	mov	r1, r7
 800e928:	4620      	mov	r0, r4
 800e92a:	f000 fcb7 	bl	800f29c <_Bfree>
 800e92e:	2e00      	cmp	r6, #0
 800e930:	f43f aeb7 	beq.w	800e6a2 <_dtoa_r+0x67a>
 800e934:	f1b9 0f00 	cmp.w	r9, #0
 800e938:	d005      	beq.n	800e946 <_dtoa_r+0x91e>
 800e93a:	45b1      	cmp	r9, r6
 800e93c:	d003      	beq.n	800e946 <_dtoa_r+0x91e>
 800e93e:	4649      	mov	r1, r9
 800e940:	4620      	mov	r0, r4
 800e942:	f000 fcab 	bl	800f29c <_Bfree>
 800e946:	4631      	mov	r1, r6
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fca7 	bl	800f29c <_Bfree>
 800e94e:	e6a8      	b.n	800e6a2 <_dtoa_r+0x67a>
 800e950:	2700      	movs	r7, #0
 800e952:	463e      	mov	r6, r7
 800e954:	e7e1      	b.n	800e91a <_dtoa_r+0x8f2>
 800e956:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e95a:	463e      	mov	r6, r7
 800e95c:	e5a9      	b.n	800e4b2 <_dtoa_r+0x48a>
 800e95e:	bf00      	nop
 800e960:	40240000 	.word	0x40240000
 800e964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e966:	f8cd 9008 	str.w	r9, [sp, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 80fa 	beq.w	800eb64 <_dtoa_r+0xb3c>
 800e970:	2d00      	cmp	r5, #0
 800e972:	dd05      	ble.n	800e980 <_dtoa_r+0x958>
 800e974:	4631      	mov	r1, r6
 800e976:	462a      	mov	r2, r5
 800e978:	4620      	mov	r0, r4
 800e97a:	f000 fe5b 	bl	800f634 <__lshift>
 800e97e:	4606      	mov	r6, r0
 800e980:	9b07      	ldr	r3, [sp, #28]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d04c      	beq.n	800ea20 <_dtoa_r+0x9f8>
 800e986:	6871      	ldr	r1, [r6, #4]
 800e988:	4620      	mov	r0, r4
 800e98a:	f000 fc53 	bl	800f234 <_Balloc>
 800e98e:	6932      	ldr	r2, [r6, #16]
 800e990:	3202      	adds	r2, #2
 800e992:	4605      	mov	r5, r0
 800e994:	0092      	lsls	r2, r2, #2
 800e996:	f106 010c 	add.w	r1, r6, #12
 800e99a:	300c      	adds	r0, #12
 800e99c:	f7fd fca6 	bl	800c2ec <memcpy>
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 fe45 	bl	800f634 <__lshift>
 800e9aa:	9b00      	ldr	r3, [sp, #0]
 800e9ac:	f8cd b014 	str.w	fp, [sp, #20]
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	46b1      	mov	r9, r6
 800e9b6:	9307      	str	r3, [sp, #28]
 800e9b8:	4606      	mov	r6, r0
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	9804      	ldr	r0, [sp, #16]
 800e9be:	f7ff faa5 	bl	800df0c <quorem>
 800e9c2:	4649      	mov	r1, r9
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e9ca:	9804      	ldr	r0, [sp, #16]
 800e9cc:	f000 fe86 	bl	800f6dc <__mcmp>
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	9000      	str	r0, [sp, #0]
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 fe9a 	bl	800f710 <__mdiff>
 800e9dc:	68c3      	ldr	r3, [r0, #12]
 800e9de:	4602      	mov	r2, r0
 800e9e0:	bb03      	cbnz	r3, 800ea24 <_dtoa_r+0x9fc>
 800e9e2:	4601      	mov	r1, r0
 800e9e4:	9008      	str	r0, [sp, #32]
 800e9e6:	9804      	ldr	r0, [sp, #16]
 800e9e8:	f000 fe78 	bl	800f6dc <__mcmp>
 800e9ec:	9a08      	ldr	r2, [sp, #32]
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4611      	mov	r1, r2
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	9308      	str	r3, [sp, #32]
 800e9f6:	f000 fc51 	bl	800f29c <_Bfree>
 800e9fa:	9b08      	ldr	r3, [sp, #32]
 800e9fc:	b9a3      	cbnz	r3, 800ea28 <_dtoa_r+0xa00>
 800e9fe:	9a06      	ldr	r2, [sp, #24]
 800ea00:	b992      	cbnz	r2, 800ea28 <_dtoa_r+0xa00>
 800ea02:	9a07      	ldr	r2, [sp, #28]
 800ea04:	b982      	cbnz	r2, 800ea28 <_dtoa_r+0xa00>
 800ea06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea0a:	d029      	beq.n	800ea60 <_dtoa_r+0xa38>
 800ea0c:	9b00      	ldr	r3, [sp, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	dd01      	ble.n	800ea16 <_dtoa_r+0x9ee>
 800ea12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ea16:	9b05      	ldr	r3, [sp, #20]
 800ea18:	1c5d      	adds	r5, r3, #1
 800ea1a:	f883 8000 	strb.w	r8, [r3]
 800ea1e:	e782      	b.n	800e926 <_dtoa_r+0x8fe>
 800ea20:	4630      	mov	r0, r6
 800ea22:	e7c2      	b.n	800e9aa <_dtoa_r+0x982>
 800ea24:	2301      	movs	r3, #1
 800ea26:	e7e3      	b.n	800e9f0 <_dtoa_r+0x9c8>
 800ea28:	9a00      	ldr	r2, [sp, #0]
 800ea2a:	2a00      	cmp	r2, #0
 800ea2c:	db04      	blt.n	800ea38 <_dtoa_r+0xa10>
 800ea2e:	d125      	bne.n	800ea7c <_dtoa_r+0xa54>
 800ea30:	9a06      	ldr	r2, [sp, #24]
 800ea32:	bb1a      	cbnz	r2, 800ea7c <_dtoa_r+0xa54>
 800ea34:	9a07      	ldr	r2, [sp, #28]
 800ea36:	bb0a      	cbnz	r2, 800ea7c <_dtoa_r+0xa54>
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	ddec      	ble.n	800ea16 <_dtoa_r+0x9ee>
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	9904      	ldr	r1, [sp, #16]
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 fdf7 	bl	800f634 <__lshift>
 800ea46:	4639      	mov	r1, r7
 800ea48:	9004      	str	r0, [sp, #16]
 800ea4a:	f000 fe47 	bl	800f6dc <__mcmp>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	dc03      	bgt.n	800ea5a <_dtoa_r+0xa32>
 800ea52:	d1e0      	bne.n	800ea16 <_dtoa_r+0x9ee>
 800ea54:	f018 0f01 	tst.w	r8, #1
 800ea58:	d0dd      	beq.n	800ea16 <_dtoa_r+0x9ee>
 800ea5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea5e:	d1d8      	bne.n	800ea12 <_dtoa_r+0x9ea>
 800ea60:	9b05      	ldr	r3, [sp, #20]
 800ea62:	9a05      	ldr	r2, [sp, #20]
 800ea64:	1c5d      	adds	r5, r3, #1
 800ea66:	2339      	movs	r3, #57	; 0x39
 800ea68:	7013      	strb	r3, [r2, #0]
 800ea6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea6e:	2b39      	cmp	r3, #57	; 0x39
 800ea70:	f105 32ff 	add.w	r2, r5, #4294967295
 800ea74:	d04f      	beq.n	800eb16 <_dtoa_r+0xaee>
 800ea76:	3301      	adds	r3, #1
 800ea78:	7013      	strb	r3, [r2, #0]
 800ea7a:	e754      	b.n	800e926 <_dtoa_r+0x8fe>
 800ea7c:	9a05      	ldr	r2, [sp, #20]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f102 0501 	add.w	r5, r2, #1
 800ea84:	dd06      	ble.n	800ea94 <_dtoa_r+0xa6c>
 800ea86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea8a:	d0e9      	beq.n	800ea60 <_dtoa_r+0xa38>
 800ea8c:	f108 0801 	add.w	r8, r8, #1
 800ea90:	9b05      	ldr	r3, [sp, #20]
 800ea92:	e7c2      	b.n	800ea1a <_dtoa_r+0x9f2>
 800ea94:	9a02      	ldr	r2, [sp, #8]
 800ea96:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ea9a:	eba5 030b 	sub.w	r3, r5, fp
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d021      	beq.n	800eae6 <_dtoa_r+0xabe>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	220a      	movs	r2, #10
 800eaa6:	9904      	ldr	r1, [sp, #16]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fc0e 	bl	800f2ca <__multadd>
 800eaae:	45b1      	cmp	r9, r6
 800eab0:	9004      	str	r0, [sp, #16]
 800eab2:	f04f 0300 	mov.w	r3, #0
 800eab6:	f04f 020a 	mov.w	r2, #10
 800eaba:	4649      	mov	r1, r9
 800eabc:	4620      	mov	r0, r4
 800eabe:	d105      	bne.n	800eacc <_dtoa_r+0xaa4>
 800eac0:	f000 fc03 	bl	800f2ca <__multadd>
 800eac4:	4681      	mov	r9, r0
 800eac6:	4606      	mov	r6, r0
 800eac8:	9505      	str	r5, [sp, #20]
 800eaca:	e776      	b.n	800e9ba <_dtoa_r+0x992>
 800eacc:	f000 fbfd 	bl	800f2ca <__multadd>
 800ead0:	4631      	mov	r1, r6
 800ead2:	4681      	mov	r9, r0
 800ead4:	2300      	movs	r3, #0
 800ead6:	220a      	movs	r2, #10
 800ead8:	4620      	mov	r0, r4
 800eada:	f000 fbf6 	bl	800f2ca <__multadd>
 800eade:	4606      	mov	r6, r0
 800eae0:	e7f2      	b.n	800eac8 <_dtoa_r+0xaa0>
 800eae2:	f04f 0900 	mov.w	r9, #0
 800eae6:	2201      	movs	r2, #1
 800eae8:	9904      	ldr	r1, [sp, #16]
 800eaea:	4620      	mov	r0, r4
 800eaec:	f000 fda2 	bl	800f634 <__lshift>
 800eaf0:	4639      	mov	r1, r7
 800eaf2:	9004      	str	r0, [sp, #16]
 800eaf4:	f000 fdf2 	bl	800f6dc <__mcmp>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	dcb6      	bgt.n	800ea6a <_dtoa_r+0xa42>
 800eafc:	d102      	bne.n	800eb04 <_dtoa_r+0xadc>
 800eafe:	f018 0f01 	tst.w	r8, #1
 800eb02:	d1b2      	bne.n	800ea6a <_dtoa_r+0xa42>
 800eb04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb08:	2b30      	cmp	r3, #48	; 0x30
 800eb0a:	f105 32ff 	add.w	r2, r5, #4294967295
 800eb0e:	f47f af0a 	bne.w	800e926 <_dtoa_r+0x8fe>
 800eb12:	4615      	mov	r5, r2
 800eb14:	e7f6      	b.n	800eb04 <_dtoa_r+0xadc>
 800eb16:	4593      	cmp	fp, r2
 800eb18:	d105      	bne.n	800eb26 <_dtoa_r+0xafe>
 800eb1a:	2331      	movs	r3, #49	; 0x31
 800eb1c:	f10a 0a01 	add.w	sl, sl, #1
 800eb20:	f88b 3000 	strb.w	r3, [fp]
 800eb24:	e6ff      	b.n	800e926 <_dtoa_r+0x8fe>
 800eb26:	4615      	mov	r5, r2
 800eb28:	e79f      	b.n	800ea6a <_dtoa_r+0xa42>
 800eb2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800eb90 <_dtoa_r+0xb68>
 800eb2e:	e007      	b.n	800eb40 <_dtoa_r+0xb18>
 800eb30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb32:	f8df b060 	ldr.w	fp, [pc, #96]	; 800eb94 <_dtoa_r+0xb6c>
 800eb36:	b11b      	cbz	r3, 800eb40 <_dtoa_r+0xb18>
 800eb38:	f10b 0308 	add.w	r3, fp, #8
 800eb3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb3e:	6013      	str	r3, [r2, #0]
 800eb40:	4658      	mov	r0, fp
 800eb42:	b017      	add	sp, #92	; 0x5c
 800eb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb48:	9b06      	ldr	r3, [sp, #24]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	f77f ae35 	ble.w	800e7ba <_dtoa_r+0x792>
 800eb50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb52:	9307      	str	r3, [sp, #28]
 800eb54:	e649      	b.n	800e7ea <_dtoa_r+0x7c2>
 800eb56:	9b02      	ldr	r3, [sp, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dc03      	bgt.n	800eb64 <_dtoa_r+0xb3c>
 800eb5c:	9b06      	ldr	r3, [sp, #24]
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	f73f aecc 	bgt.w	800e8fc <_dtoa_r+0x8d4>
 800eb64:	465d      	mov	r5, fp
 800eb66:	4639      	mov	r1, r7
 800eb68:	9804      	ldr	r0, [sp, #16]
 800eb6a:	f7ff f9cf 	bl	800df0c <quorem>
 800eb6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eb72:	f805 8b01 	strb.w	r8, [r5], #1
 800eb76:	9a02      	ldr	r2, [sp, #8]
 800eb78:	eba5 030b 	sub.w	r3, r5, fp
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	ddb0      	ble.n	800eae2 <_dtoa_r+0xaba>
 800eb80:	2300      	movs	r3, #0
 800eb82:	220a      	movs	r2, #10
 800eb84:	9904      	ldr	r1, [sp, #16]
 800eb86:	4620      	mov	r0, r4
 800eb88:	f000 fb9f 	bl	800f2ca <__multadd>
 800eb8c:	9004      	str	r0, [sp, #16]
 800eb8e:	e7ea      	b.n	800eb66 <_dtoa_r+0xb3e>
 800eb90:	0800fe50 	.word	0x0800fe50
 800eb94:	0800fed0 	.word	0x0800fed0

0800eb98 <rshift>:
 800eb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9a:	6906      	ldr	r6, [r0, #16]
 800eb9c:	114b      	asrs	r3, r1, #5
 800eb9e:	429e      	cmp	r6, r3
 800eba0:	f100 0414 	add.w	r4, r0, #20
 800eba4:	dd30      	ble.n	800ec08 <rshift+0x70>
 800eba6:	f011 011f 	ands.w	r1, r1, #31
 800ebaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ebae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ebb2:	d108      	bne.n	800ebc6 <rshift+0x2e>
 800ebb4:	4621      	mov	r1, r4
 800ebb6:	42b2      	cmp	r2, r6
 800ebb8:	460b      	mov	r3, r1
 800ebba:	d211      	bcs.n	800ebe0 <rshift+0x48>
 800ebbc:	f852 3b04 	ldr.w	r3, [r2], #4
 800ebc0:	f841 3b04 	str.w	r3, [r1], #4
 800ebc4:	e7f7      	b.n	800ebb6 <rshift+0x1e>
 800ebc6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ebca:	f1c1 0c20 	rsb	ip, r1, #32
 800ebce:	40cd      	lsrs	r5, r1
 800ebd0:	3204      	adds	r2, #4
 800ebd2:	4623      	mov	r3, r4
 800ebd4:	42b2      	cmp	r2, r6
 800ebd6:	4617      	mov	r7, r2
 800ebd8:	d30c      	bcc.n	800ebf4 <rshift+0x5c>
 800ebda:	601d      	str	r5, [r3, #0]
 800ebdc:	b105      	cbz	r5, 800ebe0 <rshift+0x48>
 800ebde:	3304      	adds	r3, #4
 800ebe0:	1b1a      	subs	r2, r3, r4
 800ebe2:	42a3      	cmp	r3, r4
 800ebe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ebe8:	bf08      	it	eq
 800ebea:	2300      	moveq	r3, #0
 800ebec:	6102      	str	r2, [r0, #16]
 800ebee:	bf08      	it	eq
 800ebf0:	6143      	streq	r3, [r0, #20]
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebf4:	683f      	ldr	r7, [r7, #0]
 800ebf6:	fa07 f70c 	lsl.w	r7, r7, ip
 800ebfa:	433d      	orrs	r5, r7
 800ebfc:	f843 5b04 	str.w	r5, [r3], #4
 800ec00:	f852 5b04 	ldr.w	r5, [r2], #4
 800ec04:	40cd      	lsrs	r5, r1
 800ec06:	e7e5      	b.n	800ebd4 <rshift+0x3c>
 800ec08:	4623      	mov	r3, r4
 800ec0a:	e7e9      	b.n	800ebe0 <rshift+0x48>

0800ec0c <__hexdig_fun>:
 800ec0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ec10:	2b09      	cmp	r3, #9
 800ec12:	d802      	bhi.n	800ec1a <__hexdig_fun+0xe>
 800ec14:	3820      	subs	r0, #32
 800ec16:	b2c0      	uxtb	r0, r0
 800ec18:	4770      	bx	lr
 800ec1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ec1e:	2b05      	cmp	r3, #5
 800ec20:	d801      	bhi.n	800ec26 <__hexdig_fun+0x1a>
 800ec22:	3847      	subs	r0, #71	; 0x47
 800ec24:	e7f7      	b.n	800ec16 <__hexdig_fun+0xa>
 800ec26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ec2a:	2b05      	cmp	r3, #5
 800ec2c:	d801      	bhi.n	800ec32 <__hexdig_fun+0x26>
 800ec2e:	3827      	subs	r0, #39	; 0x27
 800ec30:	e7f1      	b.n	800ec16 <__hexdig_fun+0xa>
 800ec32:	2000      	movs	r0, #0
 800ec34:	4770      	bx	lr

0800ec36 <__gethex>:
 800ec36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	b08b      	sub	sp, #44	; 0x2c
 800ec3c:	468a      	mov	sl, r1
 800ec3e:	9002      	str	r0, [sp, #8]
 800ec40:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ec42:	9306      	str	r3, [sp, #24]
 800ec44:	4690      	mov	r8, r2
 800ec46:	f000 fad0 	bl	800f1ea <__localeconv_l>
 800ec4a:	6803      	ldr	r3, [r0, #0]
 800ec4c:	9303      	str	r3, [sp, #12]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7f1 fabe 	bl	80001d0 <strlen>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	9001      	str	r0, [sp, #4]
 800ec58:	4403      	add	r3, r0
 800ec5a:	f04f 0b00 	mov.w	fp, #0
 800ec5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ec62:	9307      	str	r3, [sp, #28]
 800ec64:	f8da 3000 	ldr.w	r3, [sl]
 800ec68:	3302      	adds	r3, #2
 800ec6a:	461f      	mov	r7, r3
 800ec6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ec70:	2830      	cmp	r0, #48	; 0x30
 800ec72:	d06c      	beq.n	800ed4e <__gethex+0x118>
 800ec74:	f7ff ffca 	bl	800ec0c <__hexdig_fun>
 800ec78:	4604      	mov	r4, r0
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d16a      	bne.n	800ed54 <__gethex+0x11e>
 800ec7e:	9a01      	ldr	r2, [sp, #4]
 800ec80:	9903      	ldr	r1, [sp, #12]
 800ec82:	4638      	mov	r0, r7
 800ec84:	f7fe fa62 	bl	800d14c <strncmp>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	d166      	bne.n	800ed5a <__gethex+0x124>
 800ec8c:	9b01      	ldr	r3, [sp, #4]
 800ec8e:	5cf8      	ldrb	r0, [r7, r3]
 800ec90:	18fe      	adds	r6, r7, r3
 800ec92:	f7ff ffbb 	bl	800ec0c <__hexdig_fun>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d062      	beq.n	800ed60 <__gethex+0x12a>
 800ec9a:	4633      	mov	r3, r6
 800ec9c:	7818      	ldrb	r0, [r3, #0]
 800ec9e:	2830      	cmp	r0, #48	; 0x30
 800eca0:	461f      	mov	r7, r3
 800eca2:	f103 0301 	add.w	r3, r3, #1
 800eca6:	d0f9      	beq.n	800ec9c <__gethex+0x66>
 800eca8:	f7ff ffb0 	bl	800ec0c <__hexdig_fun>
 800ecac:	fab0 f580 	clz	r5, r0
 800ecb0:	096d      	lsrs	r5, r5, #5
 800ecb2:	4634      	mov	r4, r6
 800ecb4:	f04f 0b01 	mov.w	fp, #1
 800ecb8:	463a      	mov	r2, r7
 800ecba:	4616      	mov	r6, r2
 800ecbc:	3201      	adds	r2, #1
 800ecbe:	7830      	ldrb	r0, [r6, #0]
 800ecc0:	f7ff ffa4 	bl	800ec0c <__hexdig_fun>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d1f8      	bne.n	800ecba <__gethex+0x84>
 800ecc8:	9a01      	ldr	r2, [sp, #4]
 800ecca:	9903      	ldr	r1, [sp, #12]
 800eccc:	4630      	mov	r0, r6
 800ecce:	f7fe fa3d 	bl	800d14c <strncmp>
 800ecd2:	b950      	cbnz	r0, 800ecea <__gethex+0xb4>
 800ecd4:	b954      	cbnz	r4, 800ecec <__gethex+0xb6>
 800ecd6:	9b01      	ldr	r3, [sp, #4]
 800ecd8:	18f4      	adds	r4, r6, r3
 800ecda:	4622      	mov	r2, r4
 800ecdc:	4616      	mov	r6, r2
 800ecde:	3201      	adds	r2, #1
 800ece0:	7830      	ldrb	r0, [r6, #0]
 800ece2:	f7ff ff93 	bl	800ec0c <__hexdig_fun>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d1f8      	bne.n	800ecdc <__gethex+0xa6>
 800ecea:	b10c      	cbz	r4, 800ecf0 <__gethex+0xba>
 800ecec:	1ba4      	subs	r4, r4, r6
 800ecee:	00a4      	lsls	r4, r4, #2
 800ecf0:	7833      	ldrb	r3, [r6, #0]
 800ecf2:	2b50      	cmp	r3, #80	; 0x50
 800ecf4:	d001      	beq.n	800ecfa <__gethex+0xc4>
 800ecf6:	2b70      	cmp	r3, #112	; 0x70
 800ecf8:	d140      	bne.n	800ed7c <__gethex+0x146>
 800ecfa:	7873      	ldrb	r3, [r6, #1]
 800ecfc:	2b2b      	cmp	r3, #43	; 0x2b
 800ecfe:	d031      	beq.n	800ed64 <__gethex+0x12e>
 800ed00:	2b2d      	cmp	r3, #45	; 0x2d
 800ed02:	d033      	beq.n	800ed6c <__gethex+0x136>
 800ed04:	1c71      	adds	r1, r6, #1
 800ed06:	f04f 0900 	mov.w	r9, #0
 800ed0a:	7808      	ldrb	r0, [r1, #0]
 800ed0c:	f7ff ff7e 	bl	800ec0c <__hexdig_fun>
 800ed10:	1e43      	subs	r3, r0, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b18      	cmp	r3, #24
 800ed16:	d831      	bhi.n	800ed7c <__gethex+0x146>
 800ed18:	f1a0 0210 	sub.w	r2, r0, #16
 800ed1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed20:	f7ff ff74 	bl	800ec0c <__hexdig_fun>
 800ed24:	1e43      	subs	r3, r0, #1
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b18      	cmp	r3, #24
 800ed2a:	d922      	bls.n	800ed72 <__gethex+0x13c>
 800ed2c:	f1b9 0f00 	cmp.w	r9, #0
 800ed30:	d000      	beq.n	800ed34 <__gethex+0xfe>
 800ed32:	4252      	negs	r2, r2
 800ed34:	4414      	add	r4, r2
 800ed36:	f8ca 1000 	str.w	r1, [sl]
 800ed3a:	b30d      	cbz	r5, 800ed80 <__gethex+0x14a>
 800ed3c:	f1bb 0f00 	cmp.w	fp, #0
 800ed40:	bf0c      	ite	eq
 800ed42:	2706      	moveq	r7, #6
 800ed44:	2700      	movne	r7, #0
 800ed46:	4638      	mov	r0, r7
 800ed48:	b00b      	add	sp, #44	; 0x2c
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	f10b 0b01 	add.w	fp, fp, #1
 800ed52:	e78a      	b.n	800ec6a <__gethex+0x34>
 800ed54:	2500      	movs	r5, #0
 800ed56:	462c      	mov	r4, r5
 800ed58:	e7ae      	b.n	800ecb8 <__gethex+0x82>
 800ed5a:	463e      	mov	r6, r7
 800ed5c:	2501      	movs	r5, #1
 800ed5e:	e7c7      	b.n	800ecf0 <__gethex+0xba>
 800ed60:	4604      	mov	r4, r0
 800ed62:	e7fb      	b.n	800ed5c <__gethex+0x126>
 800ed64:	f04f 0900 	mov.w	r9, #0
 800ed68:	1cb1      	adds	r1, r6, #2
 800ed6a:	e7ce      	b.n	800ed0a <__gethex+0xd4>
 800ed6c:	f04f 0901 	mov.w	r9, #1
 800ed70:	e7fa      	b.n	800ed68 <__gethex+0x132>
 800ed72:	230a      	movs	r3, #10
 800ed74:	fb03 0202 	mla	r2, r3, r2, r0
 800ed78:	3a10      	subs	r2, #16
 800ed7a:	e7cf      	b.n	800ed1c <__gethex+0xe6>
 800ed7c:	4631      	mov	r1, r6
 800ed7e:	e7da      	b.n	800ed36 <__gethex+0x100>
 800ed80:	1bf3      	subs	r3, r6, r7
 800ed82:	3b01      	subs	r3, #1
 800ed84:	4629      	mov	r1, r5
 800ed86:	2b07      	cmp	r3, #7
 800ed88:	dc49      	bgt.n	800ee1e <__gethex+0x1e8>
 800ed8a:	9802      	ldr	r0, [sp, #8]
 800ed8c:	f000 fa52 	bl	800f234 <_Balloc>
 800ed90:	9b01      	ldr	r3, [sp, #4]
 800ed92:	f100 0914 	add.w	r9, r0, #20
 800ed96:	f04f 0b00 	mov.w	fp, #0
 800ed9a:	f1c3 0301 	rsb	r3, r3, #1
 800ed9e:	4605      	mov	r5, r0
 800eda0:	f8cd 9010 	str.w	r9, [sp, #16]
 800eda4:	46da      	mov	sl, fp
 800eda6:	9308      	str	r3, [sp, #32]
 800eda8:	42b7      	cmp	r7, r6
 800edaa:	d33b      	bcc.n	800ee24 <__gethex+0x1ee>
 800edac:	9804      	ldr	r0, [sp, #16]
 800edae:	f840 ab04 	str.w	sl, [r0], #4
 800edb2:	eba0 0009 	sub.w	r0, r0, r9
 800edb6:	1080      	asrs	r0, r0, #2
 800edb8:	6128      	str	r0, [r5, #16]
 800edba:	0147      	lsls	r7, r0, #5
 800edbc:	4650      	mov	r0, sl
 800edbe:	f000 fafd 	bl	800f3bc <__hi0bits>
 800edc2:	f8d8 6000 	ldr.w	r6, [r8]
 800edc6:	1a3f      	subs	r7, r7, r0
 800edc8:	42b7      	cmp	r7, r6
 800edca:	dd64      	ble.n	800ee96 <__gethex+0x260>
 800edcc:	1bbf      	subs	r7, r7, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	4628      	mov	r0, r5
 800edd2:	f000 fe0d 	bl	800f9f0 <__any_on>
 800edd6:	4682      	mov	sl, r0
 800edd8:	b178      	cbz	r0, 800edfa <__gethex+0x1c4>
 800edda:	1e7b      	subs	r3, r7, #1
 800eddc:	1159      	asrs	r1, r3, #5
 800edde:	f003 021f 	and.w	r2, r3, #31
 800ede2:	f04f 0a01 	mov.w	sl, #1
 800ede6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800edea:	fa0a f202 	lsl.w	r2, sl, r2
 800edee:	420a      	tst	r2, r1
 800edf0:	d003      	beq.n	800edfa <__gethex+0x1c4>
 800edf2:	4553      	cmp	r3, sl
 800edf4:	dc46      	bgt.n	800ee84 <__gethex+0x24e>
 800edf6:	f04f 0a02 	mov.w	sl, #2
 800edfa:	4639      	mov	r1, r7
 800edfc:	4628      	mov	r0, r5
 800edfe:	f7ff fecb 	bl	800eb98 <rshift>
 800ee02:	443c      	add	r4, r7
 800ee04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee08:	42a3      	cmp	r3, r4
 800ee0a:	da52      	bge.n	800eeb2 <__gethex+0x27c>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	9802      	ldr	r0, [sp, #8]
 800ee10:	f000 fa44 	bl	800f29c <_Bfree>
 800ee14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee16:	2300      	movs	r3, #0
 800ee18:	6013      	str	r3, [r2, #0]
 800ee1a:	27a3      	movs	r7, #163	; 0xa3
 800ee1c:	e793      	b.n	800ed46 <__gethex+0x110>
 800ee1e:	3101      	adds	r1, #1
 800ee20:	105b      	asrs	r3, r3, #1
 800ee22:	e7b0      	b.n	800ed86 <__gethex+0x150>
 800ee24:	1e73      	subs	r3, r6, #1
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	9a07      	ldr	r2, [sp, #28]
 800ee2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d018      	beq.n	800ee64 <__gethex+0x22e>
 800ee32:	f1bb 0f20 	cmp.w	fp, #32
 800ee36:	d107      	bne.n	800ee48 <__gethex+0x212>
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	f8c3 a000 	str.w	sl, [r3]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	f04f 0a00 	mov.w	sl, #0
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	46d3      	mov	fp, sl
 800ee48:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ee4c:	f7ff fede 	bl	800ec0c <__hexdig_fun>
 800ee50:	f000 000f 	and.w	r0, r0, #15
 800ee54:	fa00 f00b 	lsl.w	r0, r0, fp
 800ee58:	ea4a 0a00 	orr.w	sl, sl, r0
 800ee5c:	f10b 0b04 	add.w	fp, fp, #4
 800ee60:	9b05      	ldr	r3, [sp, #20]
 800ee62:	e00d      	b.n	800ee80 <__gethex+0x24a>
 800ee64:	9b05      	ldr	r3, [sp, #20]
 800ee66:	9a08      	ldr	r2, [sp, #32]
 800ee68:	4413      	add	r3, r2
 800ee6a:	42bb      	cmp	r3, r7
 800ee6c:	d3e1      	bcc.n	800ee32 <__gethex+0x1fc>
 800ee6e:	4618      	mov	r0, r3
 800ee70:	9a01      	ldr	r2, [sp, #4]
 800ee72:	9903      	ldr	r1, [sp, #12]
 800ee74:	9309      	str	r3, [sp, #36]	; 0x24
 800ee76:	f7fe f969 	bl	800d14c <strncmp>
 800ee7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d1d8      	bne.n	800ee32 <__gethex+0x1fc>
 800ee80:	461e      	mov	r6, r3
 800ee82:	e791      	b.n	800eda8 <__gethex+0x172>
 800ee84:	1eb9      	subs	r1, r7, #2
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 fdb2 	bl	800f9f0 <__any_on>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d0b2      	beq.n	800edf6 <__gethex+0x1c0>
 800ee90:	f04f 0a03 	mov.w	sl, #3
 800ee94:	e7b1      	b.n	800edfa <__gethex+0x1c4>
 800ee96:	da09      	bge.n	800eeac <__gethex+0x276>
 800ee98:	1bf7      	subs	r7, r6, r7
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	463a      	mov	r2, r7
 800ee9e:	9802      	ldr	r0, [sp, #8]
 800eea0:	f000 fbc8 	bl	800f634 <__lshift>
 800eea4:	1be4      	subs	r4, r4, r7
 800eea6:	4605      	mov	r5, r0
 800eea8:	f100 0914 	add.w	r9, r0, #20
 800eeac:	f04f 0a00 	mov.w	sl, #0
 800eeb0:	e7a8      	b.n	800ee04 <__gethex+0x1ce>
 800eeb2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eeb6:	42a0      	cmp	r0, r4
 800eeb8:	dd6a      	ble.n	800ef90 <__gethex+0x35a>
 800eeba:	1b04      	subs	r4, r0, r4
 800eebc:	42a6      	cmp	r6, r4
 800eebe:	dc2e      	bgt.n	800ef1e <__gethex+0x2e8>
 800eec0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d022      	beq.n	800ef0e <__gethex+0x2d8>
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d024      	beq.n	800ef16 <__gethex+0x2e0>
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d115      	bne.n	800eefc <__gethex+0x2c6>
 800eed0:	42a6      	cmp	r6, r4
 800eed2:	d113      	bne.n	800eefc <__gethex+0x2c6>
 800eed4:	2e01      	cmp	r6, #1
 800eed6:	dc0b      	bgt.n	800eef0 <__gethex+0x2ba>
 800eed8:	9a06      	ldr	r2, [sp, #24]
 800eeda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eede:	6013      	str	r3, [r2, #0]
 800eee0:	2301      	movs	r3, #1
 800eee2:	612b      	str	r3, [r5, #16]
 800eee4:	f8c9 3000 	str.w	r3, [r9]
 800eee8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eeea:	2762      	movs	r7, #98	; 0x62
 800eeec:	601d      	str	r5, [r3, #0]
 800eeee:	e72a      	b.n	800ed46 <__gethex+0x110>
 800eef0:	1e71      	subs	r1, r6, #1
 800eef2:	4628      	mov	r0, r5
 800eef4:	f000 fd7c 	bl	800f9f0 <__any_on>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d1ed      	bne.n	800eed8 <__gethex+0x2a2>
 800eefc:	4629      	mov	r1, r5
 800eefe:	9802      	ldr	r0, [sp, #8]
 800ef00:	f000 f9cc 	bl	800f29c <_Bfree>
 800ef04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef06:	2300      	movs	r3, #0
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	2750      	movs	r7, #80	; 0x50
 800ef0c:	e71b      	b.n	800ed46 <__gethex+0x110>
 800ef0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d0e1      	beq.n	800eed8 <__gethex+0x2a2>
 800ef14:	e7f2      	b.n	800eefc <__gethex+0x2c6>
 800ef16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1dd      	bne.n	800eed8 <__gethex+0x2a2>
 800ef1c:	e7ee      	b.n	800eefc <__gethex+0x2c6>
 800ef1e:	1e67      	subs	r7, r4, #1
 800ef20:	f1ba 0f00 	cmp.w	sl, #0
 800ef24:	d131      	bne.n	800ef8a <__gethex+0x354>
 800ef26:	b127      	cbz	r7, 800ef32 <__gethex+0x2fc>
 800ef28:	4639      	mov	r1, r7
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f000 fd60 	bl	800f9f0 <__any_on>
 800ef30:	4682      	mov	sl, r0
 800ef32:	117a      	asrs	r2, r7, #5
 800ef34:	2301      	movs	r3, #1
 800ef36:	f007 071f 	and.w	r7, r7, #31
 800ef3a:	fa03 f707 	lsl.w	r7, r3, r7
 800ef3e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ef42:	4621      	mov	r1, r4
 800ef44:	421f      	tst	r7, r3
 800ef46:	4628      	mov	r0, r5
 800ef48:	bf18      	it	ne
 800ef4a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ef4e:	1b36      	subs	r6, r6, r4
 800ef50:	f7ff fe22 	bl	800eb98 <rshift>
 800ef54:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ef58:	2702      	movs	r7, #2
 800ef5a:	f1ba 0f00 	cmp.w	sl, #0
 800ef5e:	d048      	beq.n	800eff2 <__gethex+0x3bc>
 800ef60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d015      	beq.n	800ef94 <__gethex+0x35e>
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	d017      	beq.n	800ef9c <__gethex+0x366>
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d109      	bne.n	800ef84 <__gethex+0x34e>
 800ef70:	f01a 0f02 	tst.w	sl, #2
 800ef74:	d006      	beq.n	800ef84 <__gethex+0x34e>
 800ef76:	f8d9 3000 	ldr.w	r3, [r9]
 800ef7a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ef7e:	f01a 0f01 	tst.w	sl, #1
 800ef82:	d10e      	bne.n	800efa2 <__gethex+0x36c>
 800ef84:	f047 0710 	orr.w	r7, r7, #16
 800ef88:	e033      	b.n	800eff2 <__gethex+0x3bc>
 800ef8a:	f04f 0a01 	mov.w	sl, #1
 800ef8e:	e7d0      	b.n	800ef32 <__gethex+0x2fc>
 800ef90:	2701      	movs	r7, #1
 800ef92:	e7e2      	b.n	800ef5a <__gethex+0x324>
 800ef94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef96:	f1c3 0301 	rsb	r3, r3, #1
 800ef9a:	9315      	str	r3, [sp, #84]	; 0x54
 800ef9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d0f0      	beq.n	800ef84 <__gethex+0x34e>
 800efa2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800efa6:	f105 0314 	add.w	r3, r5, #20
 800efaa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800efae:	eb03 010a 	add.w	r1, r3, sl
 800efb2:	f04f 0c00 	mov.w	ip, #0
 800efb6:	4618      	mov	r0, r3
 800efb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800efbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800efc0:	d01c      	beq.n	800effc <__gethex+0x3c6>
 800efc2:	3201      	adds	r2, #1
 800efc4:	6002      	str	r2, [r0, #0]
 800efc6:	2f02      	cmp	r7, #2
 800efc8:	f105 0314 	add.w	r3, r5, #20
 800efcc:	d138      	bne.n	800f040 <__gethex+0x40a>
 800efce:	f8d8 2000 	ldr.w	r2, [r8]
 800efd2:	3a01      	subs	r2, #1
 800efd4:	42b2      	cmp	r2, r6
 800efd6:	d10a      	bne.n	800efee <__gethex+0x3b8>
 800efd8:	1171      	asrs	r1, r6, #5
 800efda:	2201      	movs	r2, #1
 800efdc:	f006 061f 	and.w	r6, r6, #31
 800efe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efe4:	fa02 f606 	lsl.w	r6, r2, r6
 800efe8:	421e      	tst	r6, r3
 800efea:	bf18      	it	ne
 800efec:	4617      	movne	r7, r2
 800efee:	f047 0720 	orr.w	r7, r7, #32
 800eff2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eff4:	601d      	str	r5, [r3, #0]
 800eff6:	9b06      	ldr	r3, [sp, #24]
 800eff8:	601c      	str	r4, [r3, #0]
 800effa:	e6a4      	b.n	800ed46 <__gethex+0x110>
 800effc:	4299      	cmp	r1, r3
 800effe:	f843 cc04 	str.w	ip, [r3, #-4]
 800f002:	d8d8      	bhi.n	800efb6 <__gethex+0x380>
 800f004:	68ab      	ldr	r3, [r5, #8]
 800f006:	4599      	cmp	r9, r3
 800f008:	db12      	blt.n	800f030 <__gethex+0x3fa>
 800f00a:	6869      	ldr	r1, [r5, #4]
 800f00c:	9802      	ldr	r0, [sp, #8]
 800f00e:	3101      	adds	r1, #1
 800f010:	f000 f910 	bl	800f234 <_Balloc>
 800f014:	692a      	ldr	r2, [r5, #16]
 800f016:	3202      	adds	r2, #2
 800f018:	f105 010c 	add.w	r1, r5, #12
 800f01c:	4683      	mov	fp, r0
 800f01e:	0092      	lsls	r2, r2, #2
 800f020:	300c      	adds	r0, #12
 800f022:	f7fd f963 	bl	800c2ec <memcpy>
 800f026:	4629      	mov	r1, r5
 800f028:	9802      	ldr	r0, [sp, #8]
 800f02a:	f000 f937 	bl	800f29c <_Bfree>
 800f02e:	465d      	mov	r5, fp
 800f030:	692b      	ldr	r3, [r5, #16]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f038:	612a      	str	r2, [r5, #16]
 800f03a:	2201      	movs	r2, #1
 800f03c:	615a      	str	r2, [r3, #20]
 800f03e:	e7c2      	b.n	800efc6 <__gethex+0x390>
 800f040:	692a      	ldr	r2, [r5, #16]
 800f042:	454a      	cmp	r2, r9
 800f044:	dd0b      	ble.n	800f05e <__gethex+0x428>
 800f046:	2101      	movs	r1, #1
 800f048:	4628      	mov	r0, r5
 800f04a:	f7ff fda5 	bl	800eb98 <rshift>
 800f04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f052:	3401      	adds	r4, #1
 800f054:	42a3      	cmp	r3, r4
 800f056:	f6ff aed9 	blt.w	800ee0c <__gethex+0x1d6>
 800f05a:	2701      	movs	r7, #1
 800f05c:	e7c7      	b.n	800efee <__gethex+0x3b8>
 800f05e:	f016 061f 	ands.w	r6, r6, #31
 800f062:	d0fa      	beq.n	800f05a <__gethex+0x424>
 800f064:	449a      	add	sl, r3
 800f066:	f1c6 0620 	rsb	r6, r6, #32
 800f06a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f06e:	f000 f9a5 	bl	800f3bc <__hi0bits>
 800f072:	42b0      	cmp	r0, r6
 800f074:	dbe7      	blt.n	800f046 <__gethex+0x410>
 800f076:	e7f0      	b.n	800f05a <__gethex+0x424>

0800f078 <L_shift>:
 800f078:	f1c2 0208 	rsb	r2, r2, #8
 800f07c:	0092      	lsls	r2, r2, #2
 800f07e:	b570      	push	{r4, r5, r6, lr}
 800f080:	f1c2 0620 	rsb	r6, r2, #32
 800f084:	6843      	ldr	r3, [r0, #4]
 800f086:	6804      	ldr	r4, [r0, #0]
 800f088:	fa03 f506 	lsl.w	r5, r3, r6
 800f08c:	432c      	orrs	r4, r5
 800f08e:	40d3      	lsrs	r3, r2
 800f090:	6004      	str	r4, [r0, #0]
 800f092:	f840 3f04 	str.w	r3, [r0, #4]!
 800f096:	4288      	cmp	r0, r1
 800f098:	d3f4      	bcc.n	800f084 <L_shift+0xc>
 800f09a:	bd70      	pop	{r4, r5, r6, pc}

0800f09c <__match>:
 800f09c:	b530      	push	{r4, r5, lr}
 800f09e:	6803      	ldr	r3, [r0, #0]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0a6:	b914      	cbnz	r4, 800f0ae <__match+0x12>
 800f0a8:	6003      	str	r3, [r0, #0]
 800f0aa:	2001      	movs	r0, #1
 800f0ac:	bd30      	pop	{r4, r5, pc}
 800f0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f0b6:	2d19      	cmp	r5, #25
 800f0b8:	bf98      	it	ls
 800f0ba:	3220      	addls	r2, #32
 800f0bc:	42a2      	cmp	r2, r4
 800f0be:	d0f0      	beq.n	800f0a2 <__match+0x6>
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	e7f3      	b.n	800f0ac <__match+0x10>

0800f0c4 <__hexnan>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	680b      	ldr	r3, [r1, #0]
 800f0ca:	6801      	ldr	r1, [r0, #0]
 800f0cc:	115f      	asrs	r7, r3, #5
 800f0ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f0d2:	f013 031f 	ands.w	r3, r3, #31
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	bf18      	it	ne
 800f0da:	3704      	addne	r7, #4
 800f0dc:	2500      	movs	r5, #0
 800f0de:	1f3e      	subs	r6, r7, #4
 800f0e0:	4682      	mov	sl, r0
 800f0e2:	4690      	mov	r8, r2
 800f0e4:	9301      	str	r3, [sp, #4]
 800f0e6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f0ea:	46b1      	mov	r9, r6
 800f0ec:	4634      	mov	r4, r6
 800f0ee:	9502      	str	r5, [sp, #8]
 800f0f0:	46ab      	mov	fp, r5
 800f0f2:	784a      	ldrb	r2, [r1, #1]
 800f0f4:	1c4b      	adds	r3, r1, #1
 800f0f6:	9303      	str	r3, [sp, #12]
 800f0f8:	b342      	cbz	r2, 800f14c <__hexnan+0x88>
 800f0fa:	4610      	mov	r0, r2
 800f0fc:	9105      	str	r1, [sp, #20]
 800f0fe:	9204      	str	r2, [sp, #16]
 800f100:	f7ff fd84 	bl	800ec0c <__hexdig_fun>
 800f104:	2800      	cmp	r0, #0
 800f106:	d143      	bne.n	800f190 <__hexnan+0xcc>
 800f108:	9a04      	ldr	r2, [sp, #16]
 800f10a:	9905      	ldr	r1, [sp, #20]
 800f10c:	2a20      	cmp	r2, #32
 800f10e:	d818      	bhi.n	800f142 <__hexnan+0x7e>
 800f110:	9b02      	ldr	r3, [sp, #8]
 800f112:	459b      	cmp	fp, r3
 800f114:	dd13      	ble.n	800f13e <__hexnan+0x7a>
 800f116:	454c      	cmp	r4, r9
 800f118:	d206      	bcs.n	800f128 <__hexnan+0x64>
 800f11a:	2d07      	cmp	r5, #7
 800f11c:	dc04      	bgt.n	800f128 <__hexnan+0x64>
 800f11e:	462a      	mov	r2, r5
 800f120:	4649      	mov	r1, r9
 800f122:	4620      	mov	r0, r4
 800f124:	f7ff ffa8 	bl	800f078 <L_shift>
 800f128:	4544      	cmp	r4, r8
 800f12a:	d944      	bls.n	800f1b6 <__hexnan+0xf2>
 800f12c:	2300      	movs	r3, #0
 800f12e:	f1a4 0904 	sub.w	r9, r4, #4
 800f132:	f844 3c04 	str.w	r3, [r4, #-4]
 800f136:	f8cd b008 	str.w	fp, [sp, #8]
 800f13a:	464c      	mov	r4, r9
 800f13c:	461d      	mov	r5, r3
 800f13e:	9903      	ldr	r1, [sp, #12]
 800f140:	e7d7      	b.n	800f0f2 <__hexnan+0x2e>
 800f142:	2a29      	cmp	r2, #41	; 0x29
 800f144:	d14a      	bne.n	800f1dc <__hexnan+0x118>
 800f146:	3102      	adds	r1, #2
 800f148:	f8ca 1000 	str.w	r1, [sl]
 800f14c:	f1bb 0f00 	cmp.w	fp, #0
 800f150:	d044      	beq.n	800f1dc <__hexnan+0x118>
 800f152:	454c      	cmp	r4, r9
 800f154:	d206      	bcs.n	800f164 <__hexnan+0xa0>
 800f156:	2d07      	cmp	r5, #7
 800f158:	dc04      	bgt.n	800f164 <__hexnan+0xa0>
 800f15a:	462a      	mov	r2, r5
 800f15c:	4649      	mov	r1, r9
 800f15e:	4620      	mov	r0, r4
 800f160:	f7ff ff8a 	bl	800f078 <L_shift>
 800f164:	4544      	cmp	r4, r8
 800f166:	d928      	bls.n	800f1ba <__hexnan+0xf6>
 800f168:	4643      	mov	r3, r8
 800f16a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f16e:	f843 2b04 	str.w	r2, [r3], #4
 800f172:	42a6      	cmp	r6, r4
 800f174:	d2f9      	bcs.n	800f16a <__hexnan+0xa6>
 800f176:	2200      	movs	r2, #0
 800f178:	f843 2b04 	str.w	r2, [r3], #4
 800f17c:	429e      	cmp	r6, r3
 800f17e:	d2fb      	bcs.n	800f178 <__hexnan+0xb4>
 800f180:	6833      	ldr	r3, [r6, #0]
 800f182:	b91b      	cbnz	r3, 800f18c <__hexnan+0xc8>
 800f184:	4546      	cmp	r6, r8
 800f186:	d127      	bne.n	800f1d8 <__hexnan+0x114>
 800f188:	2301      	movs	r3, #1
 800f18a:	6033      	str	r3, [r6, #0]
 800f18c:	2005      	movs	r0, #5
 800f18e:	e026      	b.n	800f1de <__hexnan+0x11a>
 800f190:	3501      	adds	r5, #1
 800f192:	2d08      	cmp	r5, #8
 800f194:	f10b 0b01 	add.w	fp, fp, #1
 800f198:	dd06      	ble.n	800f1a8 <__hexnan+0xe4>
 800f19a:	4544      	cmp	r4, r8
 800f19c:	d9cf      	bls.n	800f13e <__hexnan+0x7a>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1a4:	2501      	movs	r5, #1
 800f1a6:	3c04      	subs	r4, #4
 800f1a8:	6822      	ldr	r2, [r4, #0]
 800f1aa:	f000 000f 	and.w	r0, r0, #15
 800f1ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f1b2:	6020      	str	r0, [r4, #0]
 800f1b4:	e7c3      	b.n	800f13e <__hexnan+0x7a>
 800f1b6:	2508      	movs	r5, #8
 800f1b8:	e7c1      	b.n	800f13e <__hexnan+0x7a>
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d0df      	beq.n	800f180 <__hexnan+0xbc>
 800f1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c4:	f1c3 0320 	rsb	r3, r3, #32
 800f1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f1cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f1d0:	401a      	ands	r2, r3
 800f1d2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f1d6:	e7d3      	b.n	800f180 <__hexnan+0xbc>
 800f1d8:	3e04      	subs	r6, #4
 800f1da:	e7d1      	b.n	800f180 <__hexnan+0xbc>
 800f1dc:	2004      	movs	r0, #4
 800f1de:	b007      	add	sp, #28
 800f1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1e4 <__locale_ctype_ptr_l>:
 800f1e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f1e8:	4770      	bx	lr

0800f1ea <__localeconv_l>:
 800f1ea:	30f0      	adds	r0, #240	; 0xf0
 800f1ec:	4770      	bx	lr
	...

0800f1f0 <_localeconv_r>:
 800f1f0:	4b04      	ldr	r3, [pc, #16]	; (800f204 <_localeconv_r+0x14>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6a18      	ldr	r0, [r3, #32]
 800f1f6:	4b04      	ldr	r3, [pc, #16]	; (800f208 <_localeconv_r+0x18>)
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	bf08      	it	eq
 800f1fc:	4618      	moveq	r0, r3
 800f1fe:	30f0      	adds	r0, #240	; 0xf0
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	2000017c 	.word	0x2000017c
 800f208:	200001e0 	.word	0x200001e0

0800f20c <__ascii_mbtowc>:
 800f20c:	b082      	sub	sp, #8
 800f20e:	b901      	cbnz	r1, 800f212 <__ascii_mbtowc+0x6>
 800f210:	a901      	add	r1, sp, #4
 800f212:	b142      	cbz	r2, 800f226 <__ascii_mbtowc+0x1a>
 800f214:	b14b      	cbz	r3, 800f22a <__ascii_mbtowc+0x1e>
 800f216:	7813      	ldrb	r3, [r2, #0]
 800f218:	600b      	str	r3, [r1, #0]
 800f21a:	7812      	ldrb	r2, [r2, #0]
 800f21c:	1c10      	adds	r0, r2, #0
 800f21e:	bf18      	it	ne
 800f220:	2001      	movne	r0, #1
 800f222:	b002      	add	sp, #8
 800f224:	4770      	bx	lr
 800f226:	4610      	mov	r0, r2
 800f228:	e7fb      	b.n	800f222 <__ascii_mbtowc+0x16>
 800f22a:	f06f 0001 	mvn.w	r0, #1
 800f22e:	e7f8      	b.n	800f222 <__ascii_mbtowc+0x16>

0800f230 <__malloc_lock>:
 800f230:	4770      	bx	lr

0800f232 <__malloc_unlock>:
 800f232:	4770      	bx	lr

0800f234 <_Balloc>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f238:	4604      	mov	r4, r0
 800f23a:	460e      	mov	r6, r1
 800f23c:	b93d      	cbnz	r5, 800f24e <_Balloc+0x1a>
 800f23e:	2010      	movs	r0, #16
 800f240:	f7fd f844 	bl	800c2cc <malloc>
 800f244:	6260      	str	r0, [r4, #36]	; 0x24
 800f246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f24a:	6005      	str	r5, [r0, #0]
 800f24c:	60c5      	str	r5, [r0, #12]
 800f24e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f250:	68eb      	ldr	r3, [r5, #12]
 800f252:	b183      	cbz	r3, 800f276 <_Balloc+0x42>
 800f254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f25c:	b9b8      	cbnz	r0, 800f28e <_Balloc+0x5a>
 800f25e:	2101      	movs	r1, #1
 800f260:	fa01 f506 	lsl.w	r5, r1, r6
 800f264:	1d6a      	adds	r2, r5, #5
 800f266:	0092      	lsls	r2, r2, #2
 800f268:	4620      	mov	r0, r4
 800f26a:	f000 fbe2 	bl	800fa32 <_calloc_r>
 800f26e:	b160      	cbz	r0, 800f28a <_Balloc+0x56>
 800f270:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f274:	e00e      	b.n	800f294 <_Balloc+0x60>
 800f276:	2221      	movs	r2, #33	; 0x21
 800f278:	2104      	movs	r1, #4
 800f27a:	4620      	mov	r0, r4
 800f27c:	f000 fbd9 	bl	800fa32 <_calloc_r>
 800f280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f282:	60e8      	str	r0, [r5, #12]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1e4      	bne.n	800f254 <_Balloc+0x20>
 800f28a:	2000      	movs	r0, #0
 800f28c:	bd70      	pop	{r4, r5, r6, pc}
 800f28e:	6802      	ldr	r2, [r0, #0]
 800f290:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f294:	2300      	movs	r3, #0
 800f296:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f29a:	e7f7      	b.n	800f28c <_Balloc+0x58>

0800f29c <_Bfree>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	b93c      	cbnz	r4, 800f2b6 <_Bfree+0x1a>
 800f2a6:	2010      	movs	r0, #16
 800f2a8:	f7fd f810 	bl	800c2cc <malloc>
 800f2ac:	6270      	str	r0, [r6, #36]	; 0x24
 800f2ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2b2:	6004      	str	r4, [r0, #0]
 800f2b4:	60c4      	str	r4, [r0, #12]
 800f2b6:	b13d      	cbz	r5, 800f2c8 <_Bfree+0x2c>
 800f2b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f2ba:	686a      	ldr	r2, [r5, #4]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2c2:	6029      	str	r1, [r5, #0]
 800f2c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}

0800f2ca <__multadd>:
 800f2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ce:	690d      	ldr	r5, [r1, #16]
 800f2d0:	461f      	mov	r7, r3
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	f101 0c14 	add.w	ip, r1, #20
 800f2da:	2300      	movs	r3, #0
 800f2dc:	f8dc 0000 	ldr.w	r0, [ip]
 800f2e0:	b281      	uxth	r1, r0
 800f2e2:	fb02 7101 	mla	r1, r2, r1, r7
 800f2e6:	0c0f      	lsrs	r7, r1, #16
 800f2e8:	0c00      	lsrs	r0, r0, #16
 800f2ea:	fb02 7000 	mla	r0, r2, r0, r7
 800f2ee:	b289      	uxth	r1, r1
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f2f6:	429d      	cmp	r5, r3
 800f2f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f2fc:	f84c 1b04 	str.w	r1, [ip], #4
 800f300:	dcec      	bgt.n	800f2dc <__multadd+0x12>
 800f302:	b1d7      	cbz	r7, 800f33a <__multadd+0x70>
 800f304:	68a3      	ldr	r3, [r4, #8]
 800f306:	42ab      	cmp	r3, r5
 800f308:	dc12      	bgt.n	800f330 <__multadd+0x66>
 800f30a:	6861      	ldr	r1, [r4, #4]
 800f30c:	4630      	mov	r0, r6
 800f30e:	3101      	adds	r1, #1
 800f310:	f7ff ff90 	bl	800f234 <_Balloc>
 800f314:	6922      	ldr	r2, [r4, #16]
 800f316:	3202      	adds	r2, #2
 800f318:	f104 010c 	add.w	r1, r4, #12
 800f31c:	4680      	mov	r8, r0
 800f31e:	0092      	lsls	r2, r2, #2
 800f320:	300c      	adds	r0, #12
 800f322:	f7fc ffe3 	bl	800c2ec <memcpy>
 800f326:	4621      	mov	r1, r4
 800f328:	4630      	mov	r0, r6
 800f32a:	f7ff ffb7 	bl	800f29c <_Bfree>
 800f32e:	4644      	mov	r4, r8
 800f330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f334:	3501      	adds	r5, #1
 800f336:	615f      	str	r7, [r3, #20]
 800f338:	6125      	str	r5, [r4, #16]
 800f33a:	4620      	mov	r0, r4
 800f33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f340 <__s2b>:
 800f340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f344:	460c      	mov	r4, r1
 800f346:	4615      	mov	r5, r2
 800f348:	461f      	mov	r7, r3
 800f34a:	2209      	movs	r2, #9
 800f34c:	3308      	adds	r3, #8
 800f34e:	4606      	mov	r6, r0
 800f350:	fb93 f3f2 	sdiv	r3, r3, r2
 800f354:	2100      	movs	r1, #0
 800f356:	2201      	movs	r2, #1
 800f358:	429a      	cmp	r2, r3
 800f35a:	db20      	blt.n	800f39e <__s2b+0x5e>
 800f35c:	4630      	mov	r0, r6
 800f35e:	f7ff ff69 	bl	800f234 <_Balloc>
 800f362:	9b08      	ldr	r3, [sp, #32]
 800f364:	6143      	str	r3, [r0, #20]
 800f366:	2d09      	cmp	r5, #9
 800f368:	f04f 0301 	mov.w	r3, #1
 800f36c:	6103      	str	r3, [r0, #16]
 800f36e:	dd19      	ble.n	800f3a4 <__s2b+0x64>
 800f370:	f104 0809 	add.w	r8, r4, #9
 800f374:	46c1      	mov	r9, r8
 800f376:	442c      	add	r4, r5
 800f378:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f37c:	4601      	mov	r1, r0
 800f37e:	3b30      	subs	r3, #48	; 0x30
 800f380:	220a      	movs	r2, #10
 800f382:	4630      	mov	r0, r6
 800f384:	f7ff ffa1 	bl	800f2ca <__multadd>
 800f388:	45a1      	cmp	r9, r4
 800f38a:	d1f5      	bne.n	800f378 <__s2b+0x38>
 800f38c:	eb08 0405 	add.w	r4, r8, r5
 800f390:	3c08      	subs	r4, #8
 800f392:	1b2d      	subs	r5, r5, r4
 800f394:	1963      	adds	r3, r4, r5
 800f396:	42bb      	cmp	r3, r7
 800f398:	db07      	blt.n	800f3aa <__s2b+0x6a>
 800f39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f39e:	0052      	lsls	r2, r2, #1
 800f3a0:	3101      	adds	r1, #1
 800f3a2:	e7d9      	b.n	800f358 <__s2b+0x18>
 800f3a4:	340a      	adds	r4, #10
 800f3a6:	2509      	movs	r5, #9
 800f3a8:	e7f3      	b.n	800f392 <__s2b+0x52>
 800f3aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f3ae:	4601      	mov	r1, r0
 800f3b0:	3b30      	subs	r3, #48	; 0x30
 800f3b2:	220a      	movs	r2, #10
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff ff88 	bl	800f2ca <__multadd>
 800f3ba:	e7eb      	b.n	800f394 <__s2b+0x54>

0800f3bc <__hi0bits>:
 800f3bc:	0c02      	lsrs	r2, r0, #16
 800f3be:	0412      	lsls	r2, r2, #16
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	b9b2      	cbnz	r2, 800f3f2 <__hi0bits+0x36>
 800f3c4:	0403      	lsls	r3, r0, #16
 800f3c6:	2010      	movs	r0, #16
 800f3c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f3cc:	bf04      	itt	eq
 800f3ce:	021b      	lsleq	r3, r3, #8
 800f3d0:	3008      	addeq	r0, #8
 800f3d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f3d6:	bf04      	itt	eq
 800f3d8:	011b      	lsleq	r3, r3, #4
 800f3da:	3004      	addeq	r0, #4
 800f3dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f3e0:	bf04      	itt	eq
 800f3e2:	009b      	lsleq	r3, r3, #2
 800f3e4:	3002      	addeq	r0, #2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	db06      	blt.n	800f3f8 <__hi0bits+0x3c>
 800f3ea:	005b      	lsls	r3, r3, #1
 800f3ec:	d503      	bpl.n	800f3f6 <__hi0bits+0x3a>
 800f3ee:	3001      	adds	r0, #1
 800f3f0:	4770      	bx	lr
 800f3f2:	2000      	movs	r0, #0
 800f3f4:	e7e8      	b.n	800f3c8 <__hi0bits+0xc>
 800f3f6:	2020      	movs	r0, #32
 800f3f8:	4770      	bx	lr

0800f3fa <__lo0bits>:
 800f3fa:	6803      	ldr	r3, [r0, #0]
 800f3fc:	f013 0207 	ands.w	r2, r3, #7
 800f400:	4601      	mov	r1, r0
 800f402:	d00b      	beq.n	800f41c <__lo0bits+0x22>
 800f404:	07da      	lsls	r2, r3, #31
 800f406:	d423      	bmi.n	800f450 <__lo0bits+0x56>
 800f408:	0798      	lsls	r0, r3, #30
 800f40a:	bf49      	itett	mi
 800f40c:	085b      	lsrmi	r3, r3, #1
 800f40e:	089b      	lsrpl	r3, r3, #2
 800f410:	2001      	movmi	r0, #1
 800f412:	600b      	strmi	r3, [r1, #0]
 800f414:	bf5c      	itt	pl
 800f416:	600b      	strpl	r3, [r1, #0]
 800f418:	2002      	movpl	r0, #2
 800f41a:	4770      	bx	lr
 800f41c:	b298      	uxth	r0, r3
 800f41e:	b9a8      	cbnz	r0, 800f44c <__lo0bits+0x52>
 800f420:	0c1b      	lsrs	r3, r3, #16
 800f422:	2010      	movs	r0, #16
 800f424:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f428:	bf04      	itt	eq
 800f42a:	0a1b      	lsreq	r3, r3, #8
 800f42c:	3008      	addeq	r0, #8
 800f42e:	071a      	lsls	r2, r3, #28
 800f430:	bf04      	itt	eq
 800f432:	091b      	lsreq	r3, r3, #4
 800f434:	3004      	addeq	r0, #4
 800f436:	079a      	lsls	r2, r3, #30
 800f438:	bf04      	itt	eq
 800f43a:	089b      	lsreq	r3, r3, #2
 800f43c:	3002      	addeq	r0, #2
 800f43e:	07da      	lsls	r2, r3, #31
 800f440:	d402      	bmi.n	800f448 <__lo0bits+0x4e>
 800f442:	085b      	lsrs	r3, r3, #1
 800f444:	d006      	beq.n	800f454 <__lo0bits+0x5a>
 800f446:	3001      	adds	r0, #1
 800f448:	600b      	str	r3, [r1, #0]
 800f44a:	4770      	bx	lr
 800f44c:	4610      	mov	r0, r2
 800f44e:	e7e9      	b.n	800f424 <__lo0bits+0x2a>
 800f450:	2000      	movs	r0, #0
 800f452:	4770      	bx	lr
 800f454:	2020      	movs	r0, #32
 800f456:	4770      	bx	lr

0800f458 <__i2b>:
 800f458:	b510      	push	{r4, lr}
 800f45a:	460c      	mov	r4, r1
 800f45c:	2101      	movs	r1, #1
 800f45e:	f7ff fee9 	bl	800f234 <_Balloc>
 800f462:	2201      	movs	r2, #1
 800f464:	6144      	str	r4, [r0, #20]
 800f466:	6102      	str	r2, [r0, #16]
 800f468:	bd10      	pop	{r4, pc}

0800f46a <__multiply>:
 800f46a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46e:	4614      	mov	r4, r2
 800f470:	690a      	ldr	r2, [r1, #16]
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	429a      	cmp	r2, r3
 800f476:	bfb8      	it	lt
 800f478:	460b      	movlt	r3, r1
 800f47a:	4688      	mov	r8, r1
 800f47c:	bfbc      	itt	lt
 800f47e:	46a0      	movlt	r8, r4
 800f480:	461c      	movlt	r4, r3
 800f482:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f486:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f48a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f48e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f492:	eb07 0609 	add.w	r6, r7, r9
 800f496:	42b3      	cmp	r3, r6
 800f498:	bfb8      	it	lt
 800f49a:	3101      	addlt	r1, #1
 800f49c:	f7ff feca 	bl	800f234 <_Balloc>
 800f4a0:	f100 0514 	add.w	r5, r0, #20
 800f4a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f4a8:	462b      	mov	r3, r5
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4573      	cmp	r3, lr
 800f4ae:	d316      	bcc.n	800f4de <__multiply+0x74>
 800f4b0:	f104 0214 	add.w	r2, r4, #20
 800f4b4:	f108 0114 	add.w	r1, r8, #20
 800f4b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f4bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	9b00      	ldr	r3, [sp, #0]
 800f4c4:	9201      	str	r2, [sp, #4]
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d80c      	bhi.n	800f4e4 <__multiply+0x7a>
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	dd03      	ble.n	800f4d6 <__multiply+0x6c>
 800f4ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d05d      	beq.n	800f592 <__multiply+0x128>
 800f4d6:	6106      	str	r6, [r0, #16]
 800f4d8:	b003      	add	sp, #12
 800f4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4de:	f843 2b04 	str.w	r2, [r3], #4
 800f4e2:	e7e3      	b.n	800f4ac <__multiply+0x42>
 800f4e4:	f8b2 b000 	ldrh.w	fp, [r2]
 800f4e8:	f1bb 0f00 	cmp.w	fp, #0
 800f4ec:	d023      	beq.n	800f536 <__multiply+0xcc>
 800f4ee:	4689      	mov	r9, r1
 800f4f0:	46ac      	mov	ip, r5
 800f4f2:	f04f 0800 	mov.w	r8, #0
 800f4f6:	f859 4b04 	ldr.w	r4, [r9], #4
 800f4fa:	f8dc a000 	ldr.w	sl, [ip]
 800f4fe:	b2a3      	uxth	r3, r4
 800f500:	fa1f fa8a 	uxth.w	sl, sl
 800f504:	fb0b a303 	mla	r3, fp, r3, sl
 800f508:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f50c:	f8dc 4000 	ldr.w	r4, [ip]
 800f510:	4443      	add	r3, r8
 800f512:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f516:	fb0b 840a 	mla	r4, fp, sl, r8
 800f51a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f51e:	46e2      	mov	sl, ip
 800f520:	b29b      	uxth	r3, r3
 800f522:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f526:	454f      	cmp	r7, r9
 800f528:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f52c:	f84a 3b04 	str.w	r3, [sl], #4
 800f530:	d82b      	bhi.n	800f58a <__multiply+0x120>
 800f532:	f8cc 8004 	str.w	r8, [ip, #4]
 800f536:	9b01      	ldr	r3, [sp, #4]
 800f538:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f53c:	3204      	adds	r2, #4
 800f53e:	f1ba 0f00 	cmp.w	sl, #0
 800f542:	d020      	beq.n	800f586 <__multiply+0x11c>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	4689      	mov	r9, r1
 800f548:	46a8      	mov	r8, r5
 800f54a:	f04f 0b00 	mov.w	fp, #0
 800f54e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f552:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f556:	fb0a 440c 	mla	r4, sl, ip, r4
 800f55a:	445c      	add	r4, fp
 800f55c:	46c4      	mov	ip, r8
 800f55e:	b29b      	uxth	r3, r3
 800f560:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f564:	f84c 3b04 	str.w	r3, [ip], #4
 800f568:	f859 3b04 	ldr.w	r3, [r9], #4
 800f56c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f570:	0c1b      	lsrs	r3, r3, #16
 800f572:	fb0a b303 	mla	r3, sl, r3, fp
 800f576:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f57a:	454f      	cmp	r7, r9
 800f57c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f580:	d805      	bhi.n	800f58e <__multiply+0x124>
 800f582:	f8c8 3004 	str.w	r3, [r8, #4]
 800f586:	3504      	adds	r5, #4
 800f588:	e79b      	b.n	800f4c2 <__multiply+0x58>
 800f58a:	46d4      	mov	ip, sl
 800f58c:	e7b3      	b.n	800f4f6 <__multiply+0x8c>
 800f58e:	46e0      	mov	r8, ip
 800f590:	e7dd      	b.n	800f54e <__multiply+0xe4>
 800f592:	3e01      	subs	r6, #1
 800f594:	e799      	b.n	800f4ca <__multiply+0x60>
	...

0800f598 <__pow5mult>:
 800f598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f59c:	4615      	mov	r5, r2
 800f59e:	f012 0203 	ands.w	r2, r2, #3
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	460f      	mov	r7, r1
 800f5a6:	d007      	beq.n	800f5b8 <__pow5mult+0x20>
 800f5a8:	3a01      	subs	r2, #1
 800f5aa:	4c21      	ldr	r4, [pc, #132]	; (800f630 <__pow5mult+0x98>)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5b2:	f7ff fe8a 	bl	800f2ca <__multadd>
 800f5b6:	4607      	mov	r7, r0
 800f5b8:	10ad      	asrs	r5, r5, #2
 800f5ba:	d035      	beq.n	800f628 <__pow5mult+0x90>
 800f5bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5be:	b93c      	cbnz	r4, 800f5d0 <__pow5mult+0x38>
 800f5c0:	2010      	movs	r0, #16
 800f5c2:	f7fc fe83 	bl	800c2cc <malloc>
 800f5c6:	6270      	str	r0, [r6, #36]	; 0x24
 800f5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5cc:	6004      	str	r4, [r0, #0]
 800f5ce:	60c4      	str	r4, [r0, #12]
 800f5d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5d8:	b94c      	cbnz	r4, 800f5ee <__pow5mult+0x56>
 800f5da:	f240 2171 	movw	r1, #625	; 0x271
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f7ff ff3a 	bl	800f458 <__i2b>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	f04f 0800 	mov.w	r8, #0
 800f5f2:	07eb      	lsls	r3, r5, #31
 800f5f4:	d50a      	bpl.n	800f60c <__pow5mult+0x74>
 800f5f6:	4639      	mov	r1, r7
 800f5f8:	4622      	mov	r2, r4
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	f7ff ff35 	bl	800f46a <__multiply>
 800f600:	4639      	mov	r1, r7
 800f602:	4681      	mov	r9, r0
 800f604:	4630      	mov	r0, r6
 800f606:	f7ff fe49 	bl	800f29c <_Bfree>
 800f60a:	464f      	mov	r7, r9
 800f60c:	106d      	asrs	r5, r5, #1
 800f60e:	d00b      	beq.n	800f628 <__pow5mult+0x90>
 800f610:	6820      	ldr	r0, [r4, #0]
 800f612:	b938      	cbnz	r0, 800f624 <__pow5mult+0x8c>
 800f614:	4622      	mov	r2, r4
 800f616:	4621      	mov	r1, r4
 800f618:	4630      	mov	r0, r6
 800f61a:	f7ff ff26 	bl	800f46a <__multiply>
 800f61e:	6020      	str	r0, [r4, #0]
 800f620:	f8c0 8000 	str.w	r8, [r0]
 800f624:	4604      	mov	r4, r0
 800f626:	e7e4      	b.n	800f5f2 <__pow5mult+0x5a>
 800f628:	4638      	mov	r0, r7
 800f62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f62e:	bf00      	nop
 800f630:	0800ffd8 	.word	0x0800ffd8

0800f634 <__lshift>:
 800f634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f638:	460c      	mov	r4, r1
 800f63a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6849      	ldr	r1, [r1, #4]
 800f642:	eb0a 0903 	add.w	r9, sl, r3
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	4607      	mov	r7, r0
 800f64a:	4616      	mov	r6, r2
 800f64c:	f109 0501 	add.w	r5, r9, #1
 800f650:	42ab      	cmp	r3, r5
 800f652:	db32      	blt.n	800f6ba <__lshift+0x86>
 800f654:	4638      	mov	r0, r7
 800f656:	f7ff fded 	bl	800f234 <_Balloc>
 800f65a:	2300      	movs	r3, #0
 800f65c:	4680      	mov	r8, r0
 800f65e:	f100 0114 	add.w	r1, r0, #20
 800f662:	461a      	mov	r2, r3
 800f664:	4553      	cmp	r3, sl
 800f666:	db2b      	blt.n	800f6c0 <__lshift+0x8c>
 800f668:	6920      	ldr	r0, [r4, #16]
 800f66a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f66e:	f104 0314 	add.w	r3, r4, #20
 800f672:	f016 021f 	ands.w	r2, r6, #31
 800f676:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f67a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f67e:	d025      	beq.n	800f6cc <__lshift+0x98>
 800f680:	f1c2 0e20 	rsb	lr, r2, #32
 800f684:	2000      	movs	r0, #0
 800f686:	681e      	ldr	r6, [r3, #0]
 800f688:	468a      	mov	sl, r1
 800f68a:	4096      	lsls	r6, r2
 800f68c:	4330      	orrs	r0, r6
 800f68e:	f84a 0b04 	str.w	r0, [sl], #4
 800f692:	f853 0b04 	ldr.w	r0, [r3], #4
 800f696:	459c      	cmp	ip, r3
 800f698:	fa20 f00e 	lsr.w	r0, r0, lr
 800f69c:	d814      	bhi.n	800f6c8 <__lshift+0x94>
 800f69e:	6048      	str	r0, [r1, #4]
 800f6a0:	b108      	cbz	r0, 800f6a6 <__lshift+0x72>
 800f6a2:	f109 0502 	add.w	r5, r9, #2
 800f6a6:	3d01      	subs	r5, #1
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800f6ae:	4621      	mov	r1, r4
 800f6b0:	f7ff fdf4 	bl	800f29c <_Bfree>
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ba:	3101      	adds	r1, #1
 800f6bc:	005b      	lsls	r3, r3, #1
 800f6be:	e7c7      	b.n	800f650 <__lshift+0x1c>
 800f6c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	e7cd      	b.n	800f664 <__lshift+0x30>
 800f6c8:	4651      	mov	r1, sl
 800f6ca:	e7dc      	b.n	800f686 <__lshift+0x52>
 800f6cc:	3904      	subs	r1, #4
 800f6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6d6:	459c      	cmp	ip, r3
 800f6d8:	d8f9      	bhi.n	800f6ce <__lshift+0x9a>
 800f6da:	e7e4      	b.n	800f6a6 <__lshift+0x72>

0800f6dc <__mcmp>:
 800f6dc:	6903      	ldr	r3, [r0, #16]
 800f6de:	690a      	ldr	r2, [r1, #16]
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	b530      	push	{r4, r5, lr}
 800f6e4:	d10c      	bne.n	800f700 <__mcmp+0x24>
 800f6e6:	0092      	lsls	r2, r2, #2
 800f6e8:	3014      	adds	r0, #20
 800f6ea:	3114      	adds	r1, #20
 800f6ec:	1884      	adds	r4, r0, r2
 800f6ee:	4411      	add	r1, r2
 800f6f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f6f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f6f8:	4295      	cmp	r5, r2
 800f6fa:	d003      	beq.n	800f704 <__mcmp+0x28>
 800f6fc:	d305      	bcc.n	800f70a <__mcmp+0x2e>
 800f6fe:	2301      	movs	r3, #1
 800f700:	4618      	mov	r0, r3
 800f702:	bd30      	pop	{r4, r5, pc}
 800f704:	42a0      	cmp	r0, r4
 800f706:	d3f3      	bcc.n	800f6f0 <__mcmp+0x14>
 800f708:	e7fa      	b.n	800f700 <__mcmp+0x24>
 800f70a:	f04f 33ff 	mov.w	r3, #4294967295
 800f70e:	e7f7      	b.n	800f700 <__mcmp+0x24>

0800f710 <__mdiff>:
 800f710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f714:	460d      	mov	r5, r1
 800f716:	4607      	mov	r7, r0
 800f718:	4611      	mov	r1, r2
 800f71a:	4628      	mov	r0, r5
 800f71c:	4614      	mov	r4, r2
 800f71e:	f7ff ffdd 	bl	800f6dc <__mcmp>
 800f722:	1e06      	subs	r6, r0, #0
 800f724:	d108      	bne.n	800f738 <__mdiff+0x28>
 800f726:	4631      	mov	r1, r6
 800f728:	4638      	mov	r0, r7
 800f72a:	f7ff fd83 	bl	800f234 <_Balloc>
 800f72e:	2301      	movs	r3, #1
 800f730:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f738:	bfa4      	itt	ge
 800f73a:	4623      	movge	r3, r4
 800f73c:	462c      	movge	r4, r5
 800f73e:	4638      	mov	r0, r7
 800f740:	6861      	ldr	r1, [r4, #4]
 800f742:	bfa6      	itte	ge
 800f744:	461d      	movge	r5, r3
 800f746:	2600      	movge	r6, #0
 800f748:	2601      	movlt	r6, #1
 800f74a:	f7ff fd73 	bl	800f234 <_Balloc>
 800f74e:	692b      	ldr	r3, [r5, #16]
 800f750:	60c6      	str	r6, [r0, #12]
 800f752:	6926      	ldr	r6, [r4, #16]
 800f754:	f105 0914 	add.w	r9, r5, #20
 800f758:	f104 0214 	add.w	r2, r4, #20
 800f75c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f760:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f764:	f100 0514 	add.w	r5, r0, #20
 800f768:	f04f 0e00 	mov.w	lr, #0
 800f76c:	f852 ab04 	ldr.w	sl, [r2], #4
 800f770:	f859 4b04 	ldr.w	r4, [r9], #4
 800f774:	fa1e f18a 	uxtah	r1, lr, sl
 800f778:	b2a3      	uxth	r3, r4
 800f77a:	1ac9      	subs	r1, r1, r3
 800f77c:	0c23      	lsrs	r3, r4, #16
 800f77e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f782:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f786:	b289      	uxth	r1, r1
 800f788:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f78c:	45c8      	cmp	r8, r9
 800f78e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f792:	4694      	mov	ip, r2
 800f794:	f845 3b04 	str.w	r3, [r5], #4
 800f798:	d8e8      	bhi.n	800f76c <__mdiff+0x5c>
 800f79a:	45bc      	cmp	ip, r7
 800f79c:	d304      	bcc.n	800f7a8 <__mdiff+0x98>
 800f79e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f7a2:	b183      	cbz	r3, 800f7c6 <__mdiff+0xb6>
 800f7a4:	6106      	str	r6, [r0, #16]
 800f7a6:	e7c5      	b.n	800f734 <__mdiff+0x24>
 800f7a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f7ac:	fa1e f381 	uxtah	r3, lr, r1
 800f7b0:	141a      	asrs	r2, r3, #16
 800f7b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f7c0:	f845 3b04 	str.w	r3, [r5], #4
 800f7c4:	e7e9      	b.n	800f79a <__mdiff+0x8a>
 800f7c6:	3e01      	subs	r6, #1
 800f7c8:	e7e9      	b.n	800f79e <__mdiff+0x8e>
	...

0800f7cc <__ulp>:
 800f7cc:	4b12      	ldr	r3, [pc, #72]	; (800f818 <__ulp+0x4c>)
 800f7ce:	ee10 2a90 	vmov	r2, s1
 800f7d2:	401a      	ands	r2, r3
 800f7d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	dd04      	ble.n	800f7e6 <__ulp+0x1a>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	4619      	mov	r1, r3
 800f7e0:	ec41 0b10 	vmov	d0, r0, r1
 800f7e4:	4770      	bx	lr
 800f7e6:	425b      	negs	r3, r3
 800f7e8:	151b      	asrs	r3, r3, #20
 800f7ea:	2b13      	cmp	r3, #19
 800f7ec:	f04f 0000 	mov.w	r0, #0
 800f7f0:	f04f 0100 	mov.w	r1, #0
 800f7f4:	dc04      	bgt.n	800f800 <__ulp+0x34>
 800f7f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f7fa:	fa42 f103 	asr.w	r1, r2, r3
 800f7fe:	e7ef      	b.n	800f7e0 <__ulp+0x14>
 800f800:	3b14      	subs	r3, #20
 800f802:	2b1e      	cmp	r3, #30
 800f804:	f04f 0201 	mov.w	r2, #1
 800f808:	bfda      	itte	le
 800f80a:	f1c3 031f 	rsble	r3, r3, #31
 800f80e:	fa02 f303 	lslle.w	r3, r2, r3
 800f812:	4613      	movgt	r3, r2
 800f814:	4618      	mov	r0, r3
 800f816:	e7e3      	b.n	800f7e0 <__ulp+0x14>
 800f818:	7ff00000 	.word	0x7ff00000

0800f81c <__b2d>:
 800f81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81e:	6905      	ldr	r5, [r0, #16]
 800f820:	f100 0714 	add.w	r7, r0, #20
 800f824:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f828:	1f2e      	subs	r6, r5, #4
 800f82a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f82e:	4620      	mov	r0, r4
 800f830:	f7ff fdc4 	bl	800f3bc <__hi0bits>
 800f834:	f1c0 0320 	rsb	r3, r0, #32
 800f838:	280a      	cmp	r0, #10
 800f83a:	600b      	str	r3, [r1, #0]
 800f83c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f8b4 <__b2d+0x98>
 800f840:	dc14      	bgt.n	800f86c <__b2d+0x50>
 800f842:	f1c0 0e0b 	rsb	lr, r0, #11
 800f846:	fa24 f10e 	lsr.w	r1, r4, lr
 800f84a:	42b7      	cmp	r7, r6
 800f84c:	ea41 030c 	orr.w	r3, r1, ip
 800f850:	bf34      	ite	cc
 800f852:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f856:	2100      	movcs	r1, #0
 800f858:	3015      	adds	r0, #21
 800f85a:	fa04 f000 	lsl.w	r0, r4, r0
 800f85e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f862:	ea40 0201 	orr.w	r2, r0, r1
 800f866:	ec43 2b10 	vmov	d0, r2, r3
 800f86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f86c:	42b7      	cmp	r7, r6
 800f86e:	bf3a      	itte	cc
 800f870:	f1a5 0608 	subcc.w	r6, r5, #8
 800f874:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f878:	2100      	movcs	r1, #0
 800f87a:	380b      	subs	r0, #11
 800f87c:	d015      	beq.n	800f8aa <__b2d+0x8e>
 800f87e:	4084      	lsls	r4, r0
 800f880:	f1c0 0520 	rsb	r5, r0, #32
 800f884:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f888:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f88c:	42be      	cmp	r6, r7
 800f88e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f892:	ea44 030c 	orr.w	r3, r4, ip
 800f896:	bf8c      	ite	hi
 800f898:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f89c:	2400      	movls	r4, #0
 800f89e:	fa01 f000 	lsl.w	r0, r1, r0
 800f8a2:	40ec      	lsrs	r4, r5
 800f8a4:	ea40 0204 	orr.w	r2, r0, r4
 800f8a8:	e7dd      	b.n	800f866 <__b2d+0x4a>
 800f8aa:	ea44 030c 	orr.w	r3, r4, ip
 800f8ae:	460a      	mov	r2, r1
 800f8b0:	e7d9      	b.n	800f866 <__b2d+0x4a>
 800f8b2:	bf00      	nop
 800f8b4:	3ff00000 	.word	0x3ff00000

0800f8b8 <__d2b>:
 800f8b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f8bc:	460e      	mov	r6, r1
 800f8be:	2101      	movs	r1, #1
 800f8c0:	ec59 8b10 	vmov	r8, r9, d0
 800f8c4:	4615      	mov	r5, r2
 800f8c6:	f7ff fcb5 	bl	800f234 <_Balloc>
 800f8ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f8ce:	4607      	mov	r7, r0
 800f8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8d4:	bb34      	cbnz	r4, 800f924 <__d2b+0x6c>
 800f8d6:	9301      	str	r3, [sp, #4]
 800f8d8:	f1b8 0300 	subs.w	r3, r8, #0
 800f8dc:	d027      	beq.n	800f92e <__d2b+0x76>
 800f8de:	a802      	add	r0, sp, #8
 800f8e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f8e4:	f7ff fd89 	bl	800f3fa <__lo0bits>
 800f8e8:	9900      	ldr	r1, [sp, #0]
 800f8ea:	b1f0      	cbz	r0, 800f92a <__d2b+0x72>
 800f8ec:	9a01      	ldr	r2, [sp, #4]
 800f8ee:	f1c0 0320 	rsb	r3, r0, #32
 800f8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8f6:	430b      	orrs	r3, r1
 800f8f8:	40c2      	lsrs	r2, r0
 800f8fa:	617b      	str	r3, [r7, #20]
 800f8fc:	9201      	str	r2, [sp, #4]
 800f8fe:	9b01      	ldr	r3, [sp, #4]
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	2b00      	cmp	r3, #0
 800f904:	bf14      	ite	ne
 800f906:	2102      	movne	r1, #2
 800f908:	2101      	moveq	r1, #1
 800f90a:	6139      	str	r1, [r7, #16]
 800f90c:	b1c4      	cbz	r4, 800f940 <__d2b+0x88>
 800f90e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f912:	4404      	add	r4, r0
 800f914:	6034      	str	r4, [r6, #0]
 800f916:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f91a:	6028      	str	r0, [r5, #0]
 800f91c:	4638      	mov	r0, r7
 800f91e:	b003      	add	sp, #12
 800f920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f928:	e7d5      	b.n	800f8d6 <__d2b+0x1e>
 800f92a:	6179      	str	r1, [r7, #20]
 800f92c:	e7e7      	b.n	800f8fe <__d2b+0x46>
 800f92e:	a801      	add	r0, sp, #4
 800f930:	f7ff fd63 	bl	800f3fa <__lo0bits>
 800f934:	9b01      	ldr	r3, [sp, #4]
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	2101      	movs	r1, #1
 800f93a:	6139      	str	r1, [r7, #16]
 800f93c:	3020      	adds	r0, #32
 800f93e:	e7e5      	b.n	800f90c <__d2b+0x54>
 800f940:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f944:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f948:	6030      	str	r0, [r6, #0]
 800f94a:	6918      	ldr	r0, [r3, #16]
 800f94c:	f7ff fd36 	bl	800f3bc <__hi0bits>
 800f950:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f954:	e7e1      	b.n	800f91a <__d2b+0x62>

0800f956 <__ratio>:
 800f956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95a:	4688      	mov	r8, r1
 800f95c:	4669      	mov	r1, sp
 800f95e:	4681      	mov	r9, r0
 800f960:	f7ff ff5c 	bl	800f81c <__b2d>
 800f964:	a901      	add	r1, sp, #4
 800f966:	4640      	mov	r0, r8
 800f968:	ec57 6b10 	vmov	r6, r7, d0
 800f96c:	f7ff ff56 	bl	800f81c <__b2d>
 800f970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f974:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f978:	eba3 0c02 	sub.w	ip, r3, r2
 800f97c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f980:	1a9b      	subs	r3, r3, r2
 800f982:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f986:	ec5b ab10 	vmov	sl, fp, d0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	bfce      	itee	gt
 800f98e:	463a      	movgt	r2, r7
 800f990:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f994:	465a      	movle	r2, fp
 800f996:	4659      	mov	r1, fp
 800f998:	463d      	mov	r5, r7
 800f99a:	bfd4      	ite	le
 800f99c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f9a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	ee10 2a10 	vmov	r2, s0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	f7f0 ff4d 	bl	800084c <__aeabi_ddiv>
 800f9b2:	ec41 0b10 	vmov	d0, r0, r1
 800f9b6:	b003      	add	sp, #12
 800f9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9bc <__copybits>:
 800f9bc:	3901      	subs	r1, #1
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	1149      	asrs	r1, r1, #5
 800f9c2:	6914      	ldr	r4, [r2, #16]
 800f9c4:	3101      	adds	r1, #1
 800f9c6:	f102 0314 	add.w	r3, r2, #20
 800f9ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f9ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f9d2:	42a3      	cmp	r3, r4
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	d303      	bcc.n	800f9e0 <__copybits+0x24>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	428a      	cmp	r2, r1
 800f9dc:	d305      	bcc.n	800f9ea <__copybits+0x2e>
 800f9de:	bd10      	pop	{r4, pc}
 800f9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e4:	f840 2b04 	str.w	r2, [r0], #4
 800f9e8:	e7f3      	b.n	800f9d2 <__copybits+0x16>
 800f9ea:	f842 3b04 	str.w	r3, [r2], #4
 800f9ee:	e7f4      	b.n	800f9da <__copybits+0x1e>

0800f9f0 <__any_on>:
 800f9f0:	f100 0214 	add.w	r2, r0, #20
 800f9f4:	6900      	ldr	r0, [r0, #16]
 800f9f6:	114b      	asrs	r3, r1, #5
 800f9f8:	4298      	cmp	r0, r3
 800f9fa:	b510      	push	{r4, lr}
 800f9fc:	db11      	blt.n	800fa22 <__any_on+0x32>
 800f9fe:	dd0a      	ble.n	800fa16 <__any_on+0x26>
 800fa00:	f011 011f 	ands.w	r1, r1, #31
 800fa04:	d007      	beq.n	800fa16 <__any_on+0x26>
 800fa06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fa0a:	fa24 f001 	lsr.w	r0, r4, r1
 800fa0e:	fa00 f101 	lsl.w	r1, r0, r1
 800fa12:	428c      	cmp	r4, r1
 800fa14:	d10b      	bne.n	800fa2e <__any_on+0x3e>
 800fa16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d803      	bhi.n	800fa26 <__any_on+0x36>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	bd10      	pop	{r4, pc}
 800fa22:	4603      	mov	r3, r0
 800fa24:	e7f7      	b.n	800fa16 <__any_on+0x26>
 800fa26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa2a:	2900      	cmp	r1, #0
 800fa2c:	d0f5      	beq.n	800fa1a <__any_on+0x2a>
 800fa2e:	2001      	movs	r0, #1
 800fa30:	e7f6      	b.n	800fa20 <__any_on+0x30>

0800fa32 <_calloc_r>:
 800fa32:	b538      	push	{r3, r4, r5, lr}
 800fa34:	fb02 f401 	mul.w	r4, r2, r1
 800fa38:	4621      	mov	r1, r4
 800fa3a:	f7fc fcb9 	bl	800c3b0 <_malloc_r>
 800fa3e:	4605      	mov	r5, r0
 800fa40:	b118      	cbz	r0, 800fa4a <_calloc_r+0x18>
 800fa42:	4622      	mov	r2, r4
 800fa44:	2100      	movs	r1, #0
 800fa46:	f7fc fc5c 	bl	800c302 <memset>
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	bd38      	pop	{r3, r4, r5, pc}

0800fa4e <__ssputs_r>:
 800fa4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa52:	688e      	ldr	r6, [r1, #8]
 800fa54:	429e      	cmp	r6, r3
 800fa56:	4682      	mov	sl, r0
 800fa58:	460c      	mov	r4, r1
 800fa5a:	4690      	mov	r8, r2
 800fa5c:	4699      	mov	r9, r3
 800fa5e:	d837      	bhi.n	800fad0 <__ssputs_r+0x82>
 800fa60:	898a      	ldrh	r2, [r1, #12]
 800fa62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa66:	d031      	beq.n	800facc <__ssputs_r+0x7e>
 800fa68:	6825      	ldr	r5, [r4, #0]
 800fa6a:	6909      	ldr	r1, [r1, #16]
 800fa6c:	1a6f      	subs	r7, r5, r1
 800fa6e:	6965      	ldr	r5, [r4, #20]
 800fa70:	2302      	movs	r3, #2
 800fa72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa76:	fb95 f5f3 	sdiv	r5, r5, r3
 800fa7a:	f109 0301 	add.w	r3, r9, #1
 800fa7e:	443b      	add	r3, r7
 800fa80:	429d      	cmp	r5, r3
 800fa82:	bf38      	it	cc
 800fa84:	461d      	movcc	r5, r3
 800fa86:	0553      	lsls	r3, r2, #21
 800fa88:	d530      	bpl.n	800faec <__ssputs_r+0x9e>
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	f7fc fc90 	bl	800c3b0 <_malloc_r>
 800fa90:	4606      	mov	r6, r0
 800fa92:	b950      	cbnz	r0, 800faaa <__ssputs_r+0x5c>
 800fa94:	230c      	movs	r3, #12
 800fa96:	f8ca 3000 	str.w	r3, [sl]
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa0:	81a3      	strh	r3, [r4, #12]
 800faa2:	f04f 30ff 	mov.w	r0, #4294967295
 800faa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faaa:	463a      	mov	r2, r7
 800faac:	6921      	ldr	r1, [r4, #16]
 800faae:	f7fc fc1d 	bl	800c2ec <memcpy>
 800fab2:	89a3      	ldrh	r3, [r4, #12]
 800fab4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fabc:	81a3      	strh	r3, [r4, #12]
 800fabe:	6126      	str	r6, [r4, #16]
 800fac0:	6165      	str	r5, [r4, #20]
 800fac2:	443e      	add	r6, r7
 800fac4:	1bed      	subs	r5, r5, r7
 800fac6:	6026      	str	r6, [r4, #0]
 800fac8:	60a5      	str	r5, [r4, #8]
 800faca:	464e      	mov	r6, r9
 800facc:	454e      	cmp	r6, r9
 800face:	d900      	bls.n	800fad2 <__ssputs_r+0x84>
 800fad0:	464e      	mov	r6, r9
 800fad2:	4632      	mov	r2, r6
 800fad4:	4641      	mov	r1, r8
 800fad6:	6820      	ldr	r0, [r4, #0]
 800fad8:	f000 f919 	bl	800fd0e <memmove>
 800fadc:	68a3      	ldr	r3, [r4, #8]
 800fade:	1b9b      	subs	r3, r3, r6
 800fae0:	60a3      	str	r3, [r4, #8]
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	441e      	add	r6, r3
 800fae6:	6026      	str	r6, [r4, #0]
 800fae8:	2000      	movs	r0, #0
 800faea:	e7dc      	b.n	800faa6 <__ssputs_r+0x58>
 800faec:	462a      	mov	r2, r5
 800faee:	f000 f927 	bl	800fd40 <_realloc_r>
 800faf2:	4606      	mov	r6, r0
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d1e2      	bne.n	800fabe <__ssputs_r+0x70>
 800faf8:	6921      	ldr	r1, [r4, #16]
 800fafa:	4650      	mov	r0, sl
 800fafc:	f7fc fc0a 	bl	800c314 <_free_r>
 800fb00:	e7c8      	b.n	800fa94 <__ssputs_r+0x46>
	...

0800fb04 <_svfiprintf_r>:
 800fb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	461d      	mov	r5, r3
 800fb0a:	898b      	ldrh	r3, [r1, #12]
 800fb0c:	061f      	lsls	r7, r3, #24
 800fb0e:	b09d      	sub	sp, #116	; 0x74
 800fb10:	4680      	mov	r8, r0
 800fb12:	460c      	mov	r4, r1
 800fb14:	4616      	mov	r6, r2
 800fb16:	d50f      	bpl.n	800fb38 <_svfiprintf_r+0x34>
 800fb18:	690b      	ldr	r3, [r1, #16]
 800fb1a:	b96b      	cbnz	r3, 800fb38 <_svfiprintf_r+0x34>
 800fb1c:	2140      	movs	r1, #64	; 0x40
 800fb1e:	f7fc fc47 	bl	800c3b0 <_malloc_r>
 800fb22:	6020      	str	r0, [r4, #0]
 800fb24:	6120      	str	r0, [r4, #16]
 800fb26:	b928      	cbnz	r0, 800fb34 <_svfiprintf_r+0x30>
 800fb28:	230c      	movs	r3, #12
 800fb2a:	f8c8 3000 	str.w	r3, [r8]
 800fb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb32:	e0c8      	b.n	800fcc6 <_svfiprintf_r+0x1c2>
 800fb34:	2340      	movs	r3, #64	; 0x40
 800fb36:	6163      	str	r3, [r4, #20]
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb3c:	2320      	movs	r3, #32
 800fb3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb42:	2330      	movs	r3, #48	; 0x30
 800fb44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb48:	9503      	str	r5, [sp, #12]
 800fb4a:	f04f 0b01 	mov.w	fp, #1
 800fb4e:	4637      	mov	r7, r6
 800fb50:	463d      	mov	r5, r7
 800fb52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb56:	b10b      	cbz	r3, 800fb5c <_svfiprintf_r+0x58>
 800fb58:	2b25      	cmp	r3, #37	; 0x25
 800fb5a:	d13e      	bne.n	800fbda <_svfiprintf_r+0xd6>
 800fb5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800fb60:	d00b      	beq.n	800fb7a <_svfiprintf_r+0x76>
 800fb62:	4653      	mov	r3, sl
 800fb64:	4632      	mov	r2, r6
 800fb66:	4621      	mov	r1, r4
 800fb68:	4640      	mov	r0, r8
 800fb6a:	f7ff ff70 	bl	800fa4e <__ssputs_r>
 800fb6e:	3001      	adds	r0, #1
 800fb70:	f000 80a4 	beq.w	800fcbc <_svfiprintf_r+0x1b8>
 800fb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb76:	4453      	add	r3, sl
 800fb78:	9309      	str	r3, [sp, #36]	; 0x24
 800fb7a:	783b      	ldrb	r3, [r7, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f000 809d 	beq.w	800fcbc <_svfiprintf_r+0x1b8>
 800fb82:	2300      	movs	r3, #0
 800fb84:	f04f 32ff 	mov.w	r2, #4294967295
 800fb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb8c:	9304      	str	r3, [sp, #16]
 800fb8e:	9307      	str	r3, [sp, #28]
 800fb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb94:	931a      	str	r3, [sp, #104]	; 0x68
 800fb96:	462f      	mov	r7, r5
 800fb98:	2205      	movs	r2, #5
 800fb9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fb9e:	4850      	ldr	r0, [pc, #320]	; (800fce0 <_svfiprintf_r+0x1dc>)
 800fba0:	f7f0 fb1e 	bl	80001e0 <memchr>
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	b9d0      	cbnz	r0, 800fbde <_svfiprintf_r+0xda>
 800fba8:	06d9      	lsls	r1, r3, #27
 800fbaa:	bf44      	itt	mi
 800fbac:	2220      	movmi	r2, #32
 800fbae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fbb2:	071a      	lsls	r2, r3, #28
 800fbb4:	bf44      	itt	mi
 800fbb6:	222b      	movmi	r2, #43	; 0x2b
 800fbb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fbbc:	782a      	ldrb	r2, [r5, #0]
 800fbbe:	2a2a      	cmp	r2, #42	; 0x2a
 800fbc0:	d015      	beq.n	800fbee <_svfiprintf_r+0xea>
 800fbc2:	9a07      	ldr	r2, [sp, #28]
 800fbc4:	462f      	mov	r7, r5
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	250a      	movs	r5, #10
 800fbca:	4639      	mov	r1, r7
 800fbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbd0:	3b30      	subs	r3, #48	; 0x30
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	d94d      	bls.n	800fc72 <_svfiprintf_r+0x16e>
 800fbd6:	b1b8      	cbz	r0, 800fc08 <_svfiprintf_r+0x104>
 800fbd8:	e00f      	b.n	800fbfa <_svfiprintf_r+0xf6>
 800fbda:	462f      	mov	r7, r5
 800fbdc:	e7b8      	b.n	800fb50 <_svfiprintf_r+0x4c>
 800fbde:	4a40      	ldr	r2, [pc, #256]	; (800fce0 <_svfiprintf_r+0x1dc>)
 800fbe0:	1a80      	subs	r0, r0, r2
 800fbe2:	fa0b f000 	lsl.w	r0, fp, r0
 800fbe6:	4318      	orrs	r0, r3
 800fbe8:	9004      	str	r0, [sp, #16]
 800fbea:	463d      	mov	r5, r7
 800fbec:	e7d3      	b.n	800fb96 <_svfiprintf_r+0x92>
 800fbee:	9a03      	ldr	r2, [sp, #12]
 800fbf0:	1d11      	adds	r1, r2, #4
 800fbf2:	6812      	ldr	r2, [r2, #0]
 800fbf4:	9103      	str	r1, [sp, #12]
 800fbf6:	2a00      	cmp	r2, #0
 800fbf8:	db01      	blt.n	800fbfe <_svfiprintf_r+0xfa>
 800fbfa:	9207      	str	r2, [sp, #28]
 800fbfc:	e004      	b.n	800fc08 <_svfiprintf_r+0x104>
 800fbfe:	4252      	negs	r2, r2
 800fc00:	f043 0302 	orr.w	r3, r3, #2
 800fc04:	9207      	str	r2, [sp, #28]
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	783b      	ldrb	r3, [r7, #0]
 800fc0a:	2b2e      	cmp	r3, #46	; 0x2e
 800fc0c:	d10c      	bne.n	800fc28 <_svfiprintf_r+0x124>
 800fc0e:	787b      	ldrb	r3, [r7, #1]
 800fc10:	2b2a      	cmp	r3, #42	; 0x2a
 800fc12:	d133      	bne.n	800fc7c <_svfiprintf_r+0x178>
 800fc14:	9b03      	ldr	r3, [sp, #12]
 800fc16:	1d1a      	adds	r2, r3, #4
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	9203      	str	r2, [sp, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	bfb8      	it	lt
 800fc20:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc24:	3702      	adds	r7, #2
 800fc26:	9305      	str	r3, [sp, #20]
 800fc28:	4d2e      	ldr	r5, [pc, #184]	; (800fce4 <_svfiprintf_r+0x1e0>)
 800fc2a:	7839      	ldrb	r1, [r7, #0]
 800fc2c:	2203      	movs	r2, #3
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f7f0 fad6 	bl	80001e0 <memchr>
 800fc34:	b138      	cbz	r0, 800fc46 <_svfiprintf_r+0x142>
 800fc36:	2340      	movs	r3, #64	; 0x40
 800fc38:	1b40      	subs	r0, r0, r5
 800fc3a:	fa03 f000 	lsl.w	r0, r3, r0
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	4303      	orrs	r3, r0
 800fc42:	3701      	adds	r7, #1
 800fc44:	9304      	str	r3, [sp, #16]
 800fc46:	7839      	ldrb	r1, [r7, #0]
 800fc48:	4827      	ldr	r0, [pc, #156]	; (800fce8 <_svfiprintf_r+0x1e4>)
 800fc4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc4e:	2206      	movs	r2, #6
 800fc50:	1c7e      	adds	r6, r7, #1
 800fc52:	f7f0 fac5 	bl	80001e0 <memchr>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	d038      	beq.n	800fccc <_svfiprintf_r+0x1c8>
 800fc5a:	4b24      	ldr	r3, [pc, #144]	; (800fcec <_svfiprintf_r+0x1e8>)
 800fc5c:	bb13      	cbnz	r3, 800fca4 <_svfiprintf_r+0x1a0>
 800fc5e:	9b03      	ldr	r3, [sp, #12]
 800fc60:	3307      	adds	r3, #7
 800fc62:	f023 0307 	bic.w	r3, r3, #7
 800fc66:	3308      	adds	r3, #8
 800fc68:	9303      	str	r3, [sp, #12]
 800fc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc6c:	444b      	add	r3, r9
 800fc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc70:	e76d      	b.n	800fb4e <_svfiprintf_r+0x4a>
 800fc72:	fb05 3202 	mla	r2, r5, r2, r3
 800fc76:	2001      	movs	r0, #1
 800fc78:	460f      	mov	r7, r1
 800fc7a:	e7a6      	b.n	800fbca <_svfiprintf_r+0xc6>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	3701      	adds	r7, #1
 800fc80:	9305      	str	r3, [sp, #20]
 800fc82:	4619      	mov	r1, r3
 800fc84:	250a      	movs	r5, #10
 800fc86:	4638      	mov	r0, r7
 800fc88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc8c:	3a30      	subs	r2, #48	; 0x30
 800fc8e:	2a09      	cmp	r2, #9
 800fc90:	d903      	bls.n	800fc9a <_svfiprintf_r+0x196>
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0c8      	beq.n	800fc28 <_svfiprintf_r+0x124>
 800fc96:	9105      	str	r1, [sp, #20]
 800fc98:	e7c6      	b.n	800fc28 <_svfiprintf_r+0x124>
 800fc9a:	fb05 2101 	mla	r1, r5, r1, r2
 800fc9e:	2301      	movs	r3, #1
 800fca0:	4607      	mov	r7, r0
 800fca2:	e7f0      	b.n	800fc86 <_svfiprintf_r+0x182>
 800fca4:	ab03      	add	r3, sp, #12
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	4622      	mov	r2, r4
 800fcaa:	4b11      	ldr	r3, [pc, #68]	; (800fcf0 <_svfiprintf_r+0x1ec>)
 800fcac:	a904      	add	r1, sp, #16
 800fcae:	4640      	mov	r0, r8
 800fcb0:	f7fc fc6c 	bl	800c58c <_printf_float>
 800fcb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fcb8:	4681      	mov	r9, r0
 800fcba:	d1d6      	bne.n	800fc6a <_svfiprintf_r+0x166>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	065b      	lsls	r3, r3, #25
 800fcc0:	f53f af35 	bmi.w	800fb2e <_svfiprintf_r+0x2a>
 800fcc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcc6:	b01d      	add	sp, #116	; 0x74
 800fcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fccc:	ab03      	add	r3, sp, #12
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	4622      	mov	r2, r4
 800fcd2:	4b07      	ldr	r3, [pc, #28]	; (800fcf0 <_svfiprintf_r+0x1ec>)
 800fcd4:	a904      	add	r1, sp, #16
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	f7fc ff0e 	bl	800caf8 <_printf_i>
 800fcdc:	e7ea      	b.n	800fcb4 <_svfiprintf_r+0x1b0>
 800fcde:	bf00      	nop
 800fce0:	0800ffe4 	.word	0x0800ffe4
 800fce4:	0800ffea 	.word	0x0800ffea
 800fce8:	0800ffee 	.word	0x0800ffee
 800fcec:	0800c58d 	.word	0x0800c58d
 800fcf0:	0800fa4f 	.word	0x0800fa4f

0800fcf4 <__ascii_wctomb>:
 800fcf4:	b149      	cbz	r1, 800fd0a <__ascii_wctomb+0x16>
 800fcf6:	2aff      	cmp	r2, #255	; 0xff
 800fcf8:	bf85      	ittet	hi
 800fcfa:	238a      	movhi	r3, #138	; 0x8a
 800fcfc:	6003      	strhi	r3, [r0, #0]
 800fcfe:	700a      	strbls	r2, [r1, #0]
 800fd00:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd04:	bf98      	it	ls
 800fd06:	2001      	movls	r0, #1
 800fd08:	4770      	bx	lr
 800fd0a:	4608      	mov	r0, r1
 800fd0c:	4770      	bx	lr

0800fd0e <memmove>:
 800fd0e:	4288      	cmp	r0, r1
 800fd10:	b510      	push	{r4, lr}
 800fd12:	eb01 0302 	add.w	r3, r1, r2
 800fd16:	d807      	bhi.n	800fd28 <memmove+0x1a>
 800fd18:	1e42      	subs	r2, r0, #1
 800fd1a:	4299      	cmp	r1, r3
 800fd1c:	d00a      	beq.n	800fd34 <memmove+0x26>
 800fd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd22:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fd26:	e7f8      	b.n	800fd1a <memmove+0xc>
 800fd28:	4283      	cmp	r3, r0
 800fd2a:	d9f5      	bls.n	800fd18 <memmove+0xa>
 800fd2c:	1881      	adds	r1, r0, r2
 800fd2e:	1ad2      	subs	r2, r2, r3
 800fd30:	42d3      	cmn	r3, r2
 800fd32:	d100      	bne.n	800fd36 <memmove+0x28>
 800fd34:	bd10      	pop	{r4, pc}
 800fd36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fd3e:	e7f7      	b.n	800fd30 <memmove+0x22>

0800fd40 <_realloc_r>:
 800fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd42:	4607      	mov	r7, r0
 800fd44:	4614      	mov	r4, r2
 800fd46:	460e      	mov	r6, r1
 800fd48:	b921      	cbnz	r1, 800fd54 <_realloc_r+0x14>
 800fd4a:	4611      	mov	r1, r2
 800fd4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd50:	f7fc bb2e 	b.w	800c3b0 <_malloc_r>
 800fd54:	b922      	cbnz	r2, 800fd60 <_realloc_r+0x20>
 800fd56:	f7fc fadd 	bl	800c314 <_free_r>
 800fd5a:	4625      	mov	r5, r4
 800fd5c:	4628      	mov	r0, r5
 800fd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd60:	f000 f814 	bl	800fd8c <_malloc_usable_size_r>
 800fd64:	42a0      	cmp	r0, r4
 800fd66:	d20f      	bcs.n	800fd88 <_realloc_r+0x48>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	f7fc fb20 	bl	800c3b0 <_malloc_r>
 800fd70:	4605      	mov	r5, r0
 800fd72:	2800      	cmp	r0, #0
 800fd74:	d0f2      	beq.n	800fd5c <_realloc_r+0x1c>
 800fd76:	4631      	mov	r1, r6
 800fd78:	4622      	mov	r2, r4
 800fd7a:	f7fc fab7 	bl	800c2ec <memcpy>
 800fd7e:	4631      	mov	r1, r6
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7fc fac7 	bl	800c314 <_free_r>
 800fd86:	e7e9      	b.n	800fd5c <_realloc_r+0x1c>
 800fd88:	4635      	mov	r5, r6
 800fd8a:	e7e7      	b.n	800fd5c <_realloc_r+0x1c>

0800fd8c <_malloc_usable_size_r>:
 800fd8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd90:	1f18      	subs	r0, r3, #4
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	bfbc      	itt	lt
 800fd96:	580b      	ldrlt	r3, [r1, r0]
 800fd98:	18c0      	addlt	r0, r0, r3
 800fd9a:	4770      	bx	lr

0800fd9c <_init>:
 800fd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9e:	bf00      	nop
 800fda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda2:	bc08      	pop	{r3}
 800fda4:	469e      	mov	lr, r3
 800fda6:	4770      	bx	lr

0800fda8 <_fini>:
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	bf00      	nop
 800fdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdae:	bc08      	pop	{r3}
 800fdb0:	469e      	mov	lr, r3
 800fdb2:	4770      	bx	lr
