
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08010098  08010098  00020098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00020598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801059c  0801059c  0002059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  080105a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004274  20000350  080108f0  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045c4  080108f0  000345c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026092  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e3d  00000000  00000000  00056412  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e08  00000000  00000000  0005b250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001be0  00000000  00000000  0005d058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f60  00000000  00000000  0005ec38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bca8  00000000  00000000  00085b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d57f4  00000000  00000000  000a1840  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bb0  00000000  00000000  001770b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0017fc60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801007c 	.word	0x0801007c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0801007c 	.word	0x0801007c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 8000f9c:	b40f      	push	{r0, r1, r2, r3}
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
	if (usbPresent)
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <println+0xb4>)
 8000fa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d147      	bne.n	800103e <println+0xa2>
	{
		writePin(LEDD, HIGH);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <println+0xb8>)
 8000fb6:	f000 ffeb 	bl	8001f90 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <println+0xbc>)
 8000fc6:	f00d f907 	bl	800e1d8 <vsiprintf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <println+0xc0>)
 8000fd0:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <println+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a20      	ldr	r2, [pc, #128]	; (8001058 <println+0xbc>)
 8000fd8:	210d      	movs	r1, #13
 8000fda:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <println+0xc0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <println+0xbc>)
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <println+0xc0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <println+0xbc>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <println+0xc0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <println+0xc0>)
 8000ffc:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 8000ffe:	f7ff ffc3 	bl	8000f88 <micros>
 8001002:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <println+0xc0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	3346      	adds	r3, #70	; 0x46
 8001012:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8001014:	e001      	b.n	800101a <println+0x7e>
		{
			if (micros() - printStart > timeout && false)
 8001016:	f7ff ffb7 	bl	8000f88 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <println+0xc0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <println+0xbc>)
 8001024:	f00a fe38 	bl	800bc98 <CDC_Transmit_FS>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d0f3      	beq.n	8001016 <println+0x7a>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <println+0xb8>)
 8001036:	f000 ffab 	bl	8001f90 <HAL_GPIO_WritePin>
		return true;
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <println+0xa4>
	}
	return false;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800104a:	b004      	add	sp, #16
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000099c 	.word	0x2000099c
 8001054:	40020400 	.word	0x40020400
 8001058:	20000374 	.word	0x20000374
 800105c:	20000370 	.word	0x20000370

08001060 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
 800106a:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <setMotors+0x90>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d037      	beq.n	80010e6 <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <setMotors+0x94>)
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001086:	edd7 7a01 	vldr	s15, [r7, #4]
 800108a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <setMotors+0x94>)
 8001094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001098:	ee17 2a90 	vmov	r2, s15
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <setMotors+0x94>)
 80010a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010ae:	edd7 7a00 	vldr	s15, [r7]
 80010b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <setMotors+0x94>)
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 2a90 	vmov	r2, s15
 80010c4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <setMotors+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <setMotors+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2104      	movs	r1, #4
 80010d6:	4809      	ldr	r0, [pc, #36]	; (80010fc <setMotors+0x9c>)
 80010d8:	f000 ff5a 	bl	8001f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2101      	movs	r1, #1
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <setMotors+0x9c>)
 80010e2:	f000 ff55 	bl	8001f90 <HAL_GPIO_WritePin>
	}
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000036c 	.word	0x2000036c
 80010f4:	40000c00 	.word	0x40000c00
 80010f8:	40000800 	.word	0x40000800
 80010fc:	40020000 	.word	0x40020000

08001100 <haltMotors>:

void haltMotors(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <haltMotors+0x24>)
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <haltMotors+0x24>)
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <haltMotors+0x24>)
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <haltMotors+0x24>)
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <haltMotors+0x28>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40000c00 	.word	0x40000c00
 8001128:	40000800 	.word	0x40000800

0800112c <enableMotors>:

void enableMotors(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <enableMotors+0x70>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02b      	beq.n	8001196 <enableMotors+0x6a>
	{
		haltMotors();
 800113e:	f7ff ffdf 	bl	8001100 <haltMotors>
		motorsEnabled = true;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <enableMotors+0x70>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <enableMotors+0x74>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <enableMotors+0x78>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <enableMotors+0x74>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	2101      	movs	r1, #1
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <enableMotors+0x7c>)
 800115e:	f000 ff17 	bl	8001f90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <enableMotors+0x78>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	2104      	movs	r1, #4
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <enableMotors+0x7c>)
 800116c:	f000 ff10 	bl	8001f90 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 8001170:	f009 fed8 	bl	800af24 <Get_TIM5_Instance>
 8001174:	4603      	mov	r3, r0
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fb6d 	bl	8005858 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 800117e:	f009 fed1 	bl	800af24 <Get_TIM5_Instance>
 8001182:	4603      	mov	r3, r0
 8001184:	210c      	movs	r1, #12
 8001186:	4618      	mov	r0, r3
 8001188:	f004 fb66 	bl	8005858 <HAL_TIM_PWM_Start>

		haltMotors();
 800118c:	f7ff ffb8 	bl	8001100 <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 8001190:	4806      	ldr	r0, [pc, #24]	; (80011ac <enableMotors+0x80>)
 8001192:	f7ff ff03 	bl	8000f9c <println>
	}
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000036c 	.word	0x2000036c
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000001 	.word	0x20000001
 80011a8:	40020000 	.word	0x40020000
 80011ac:	08010098 	.word	0x08010098

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <HAL_Init+0x40>)
 80011ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_Init+0x40>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x40>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f94d 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f00a f8d4 	bl	800b390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023c00 	.word	0x40023c00

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f965 	bl	80014e2 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92d 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000011c 	.word	0x2000011c
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	20000c38 	.word	0x20000c38

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000c38 	.word	0x20000c38

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_Delay+0x40>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001508:	f7ff feb8 	bl	800127c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e099      	b.n	800164c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001538:	e00f      	b.n	800155a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153a:	f7ff fe9f 	bl	800127c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b05      	cmp	r3, #5
 8001546:	d908      	bls.n	800155a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e078      	b.n	800164c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1e8      	bne.n	800153a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_DMA_Init+0x158>)
 8001574:	4013      	ands	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d107      	bne.n	80015c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4313      	orrs	r3, r2
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f023 0307 	bic.w	r3, r3, #7
 80015da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d117      	bne.n	800161e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00e      	beq.n	800161e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fa99 	bl	8001b38 <DMA_CheckFifoParam>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800161a:	2301      	movs	r3, #1
 800161c:	e016      	b.n	800164c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fa50 	bl	8001acc <DMA_CalcBaseAndBitshift>
 800162c:	4603      	mov	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	223f      	movs	r2, #63	; 0x3f
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	f010803f 	.word	0xf010803f

08001658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_DMA_Start_IT+0x26>
 800167a:	2302      	movs	r3, #2
 800167c:	e048      	b.n	8001710 <HAL_DMA_Start_IT+0xb8>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d137      	bne.n	8001702 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2202      	movs	r2, #2
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f9e2 	bl	8001a70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	223f      	movs	r2, #63	; 0x3f
 80016b2:	409a      	lsls	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0216 	orr.w	r2, r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0208 	orr.w	r2, r2, #8
 80016ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e005      	b.n	800170e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800170a:	2302      	movs	r3, #2
 800170c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00c      	b.n	8001750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2205      	movs	r2, #5
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001768:	4b92      	ldr	r3, [pc, #584]	; (80019b4 <HAL_DMA_IRQHandler+0x258>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <HAL_DMA_IRQHandler+0x25c>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0a9b      	lsrs	r3, r3, #10
 8001774:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001786:	2208      	movs	r2, #8
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0204 	bic.w	r2, r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2208      	movs	r2, #8
 80017b6:	409a      	lsls	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	2201      	movs	r2, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d012      	beq.n	80017fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2201      	movs	r2, #1
 80017ec:	409a      	lsls	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	2204      	movs	r2, #4
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00b      	beq.n	8001834 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2204      	movs	r2, #4
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0204 	orr.w	r2, r3, #4
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2210      	movs	r2, #16
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d043      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03c      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2210      	movs	r2, #16
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d018      	beq.n	800189e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d024      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	4798      	blx	r3
 800188a:	e01f      	b.n	80018cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	4798      	blx	r3
 800189c:	e016      	b.n	80018cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0208 	bic.w	r2, r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2220      	movs	r2, #32
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 808e 	beq.w	80019fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 8086 	beq.w	80019fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2220      	movs	r2, #32
 80018f4:	409a      	lsls	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b05      	cmp	r3, #5
 8001904:	d136      	bne.n	8001974 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0216 	bic.w	r2, r2, #22
 8001914:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <HAL_DMA_IRQHandler+0x1da>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0208 	bic.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	223f      	movs	r2, #63	; 0x3f
 800194c:	409a      	lsls	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001966:	2b00      	cmp	r3, #0
 8001968:	d07d      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
        }
        return;
 8001972:	e078      	b.n	8001a66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01c      	beq.n	80019bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	2b00      	cmp	r3, #0
 8001996:	d030      	beq.n	80019fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e02b      	b.n	80019fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d027      	beq.n	80019fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
 80019b2:	e022      	b.n	80019fa <HAL_DMA_IRQHandler+0x29e>
 80019b4:	2000011c 	.word	0x2000011c
 80019b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10f      	bne.n	80019ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0210 	bic.w	r2, r2, #16
 80019d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d032      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d022      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2205      	movs	r2, #5
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d307      	bcc.n	8001a42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f2      	bne.n	8001a26 <HAL_DMA_IRQHandler+0x2ca>
 8001a40:	e000      	b.n	8001a44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e000      	b.n	8001a68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a66:	bf00      	nop
    }
  }
}
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop

08001a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b40      	cmp	r3, #64	; 0x40
 8001a9c:	d108      	bne.n	8001ab0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aae:	e007      	b.n	8001ac0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3b10      	subs	r3, #16
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <DMA_CalcBaseAndBitshift+0x64>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ae6:	4a13      	ldr	r2, [pc, #76]	; (8001b34 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d909      	bls.n	8001b0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	1d1a      	adds	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b0c:	e007      	b.n	8001b1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	aaaaaaab 	.word	0xaaaaaaab
 8001b34:	080102a8 	.word	0x080102a8

08001b38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11f      	bne.n	8001b92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d855      	bhi.n	8001c04 <DMA_CheckFifoParam+0xcc>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <DMA_CheckFifoParam+0x28>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b83 	.word	0x08001b83
 8001b68:	08001b71 	.word	0x08001b71
 8001b6c:	08001c05 	.word	0x08001c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d045      	beq.n	8001c08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b80:	e042      	b.n	8001c08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b8a:	d13f      	bne.n	8001c0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b90:	e03c      	b.n	8001c0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9a:	d121      	bne.n	8001be0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d836      	bhi.n	8001c10 <DMA_CheckFifoParam+0xd8>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <DMA_CheckFifoParam+0x70>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bbf 	.word	0x08001bbf
 8001bb0:	08001bb9 	.word	0x08001bb9
 8001bb4:	08001bd1 	.word	0x08001bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
      break;
 8001bbc:	e02f      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d024      	beq.n	8001c14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bce:	e021      	b.n	8001c14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd8:	d11e      	bne.n	8001c18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bde:	e01b      	b.n	8001c18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d902      	bls.n	8001bec <DMA_CheckFifoParam+0xb4>
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d003      	beq.n	8001bf2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bea:	e018      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e015      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00e      	beq.n	8001c1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      break;
 8001c02:	e00b      	b.n	8001c1c <DMA_CheckFifoParam+0xe4>
      break;
 8001c04:	bf00      	nop
 8001c06:	e00a      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;
 8001c08:	bf00      	nop
 8001c0a:	e008      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e006      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
 8001c12:	e004      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
 8001c16:	e002      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;   
 8001c18:	bf00      	nop
 8001c1a:	e000      	b.n	8001c1e <DMA_CheckFifoParam+0xe6>
      break;
 8001c1c:	bf00      	nop
    }
  } 
  
  return status; 
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e16b      	b.n	8001f20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 815a 	bne.w	8001f1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x4a>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d123      	bne.n	8001cbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	69b9      	ldr	r1, [r7, #24]
 8001cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0203 	and.w	r2, r3, #3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d00b      	beq.n	8001d12 <HAL_GPIO_Init+0xe6>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d007      	beq.n	8001d12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d06:	2b11      	cmp	r3, #17
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b12      	cmp	r3, #18
 8001d10:	d130      	bne.n	8001d74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80b4 	beq.w	8001f1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5e      	ldr	r2, [pc, #376]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d02b      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x222>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x21e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4e      	ldr	r2, [pc, #312]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4d      	ldr	r2, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4b      	ldr	r2, [pc, #300]	; (8001f54 <HAL_GPIO_Init+0x328>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x228>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4934      	ldr	r1, [pc, #208]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e9c:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec6:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f14:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <HAL_GPIO_Init+0x330>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae90 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	; 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fac:	e003      	b.n	8001fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	041a      	lsls	r2, r3, #16
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	619a      	str	r2, [r3, #24]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e10f      	b.n	80021f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f009 f9f8 	bl	800b3e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002008:	f001 fe70 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a7b      	ldr	r2, [pc, #492]	; (8002200 <HAL_I2C_Init+0x23c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d807      	bhi.n	8002028 <HAL_I2C_Init+0x64>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a7a      	ldr	r2, [pc, #488]	; (8002204 <HAL_I2C_Init+0x240>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e006      	b.n	8002036 <HAL_I2C_Init+0x72>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a77      	ldr	r2, [pc, #476]	; (8002208 <HAL_I2C_Init+0x244>)
 800202c:	4293      	cmp	r3, r2
 800202e:	bf94      	ite	ls
 8002030:	2301      	movls	r3, #1
 8002032:	2300      	movhi	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0db      	b.n	80021f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_I2C_Init+0x248>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0c9b      	lsrs	r3, r3, #18
 8002048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a64      	ldr	r2, [pc, #400]	; (8002200 <HAL_I2C_Init+0x23c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d802      	bhi.n	8002078 <HAL_I2C_Init+0xb4>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	3301      	adds	r3, #1
 8002076:	e009      	b.n	800208c <HAL_I2C_Init+0xc8>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a63      	ldr	r2, [pc, #396]	; (8002210 <HAL_I2C_Init+0x24c>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	3301      	adds	r3, #1
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800209e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4956      	ldr	r1, [pc, #344]	; (8002200 <HAL_I2C_Init+0x23c>)
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d80d      	bhi.n	80020c8 <HAL_I2C_Init+0x104>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	bf38      	it	cc
 80020c4:	2304      	movcc	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1a4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x130>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x156>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x15e>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1a4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x184>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1a4>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	b08f      	sub	sp, #60	; 0x3c
 8002218:	af0a      	add	r7, sp, #40	; 0x28
 800221a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e10f      	b.n	8002446 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f009 fd4f 	bl	800bce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fb06 	bl	8007876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	687e      	ldr	r6, [r7, #4]
 8002272:	466d      	mov	r5, sp
 8002274:	f106 0410 	add.w	r4, r6, #16
 8002278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002280:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002284:	e885 0003 	stmia.w	r5, {r0, r1}
 8002288:	1d33      	adds	r3, r6, #4
 800228a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f005 f9dd 	bl	800764c <USB_CoreInit>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 faf4 	bl	8007898 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e04a      	b.n	800234c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333d      	adds	r3, #61	; 0x3d
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	333c      	adds	r3, #60	; 0x3c
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	b298      	uxth	r0, r3
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3342      	adds	r3, #66	; 0x42
 80022f2:	4602      	mov	r2, r0
 80022f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333f      	adds	r3, #63	; 0x3f
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3344      	adds	r3, #68	; 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3348      	adds	r3, #72	; 0x48
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3350      	adds	r3, #80	; 0x50
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3af      	bcc.n	80022b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e044      	b.n	80023e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	3301      	adds	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3b5      	bcc.n	800235c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	687e      	ldr	r6, [r7, #4]
 80023f8:	466d      	mov	r5, sp
 80023fa:	f106 0410 	add.w	r4, r6, #16
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240a:	e885 0003 	stmia.w	r5, {r0, r1}
 800240e:	1d33      	adds	r3, r6, #4
 8002410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	f005 fa6a 	bl	80078ec <USB_DevInit>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00d      	b.n	8002446 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f006 fa5f 	bl	8008902 <USB_DevDisconnect>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800244e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_PCD_Start+0x1c>
 8002466:	2302      	movs	r3, #2
 8002468:	e020      	b.n	80024ac <HAL_PCD_Start+0x5e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	2b01      	cmp	r3, #1
 8002478:	d109      	bne.n	800248e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800247e:	2b01      	cmp	r3, #1
 8002480:	d005      	beq.n	800248e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f006 fa1d 	bl	80088d2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f005 f9d9 	bl	8007854 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b08d      	sub	sp, #52	; 0x34
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 fac4 	bl	8008a58 <USB_GetMode>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 838e 	bne.w	8002bf4 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f006 fa28 	bl	8008932 <USB_ReadInterrupts>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8384 	beq.w	8002bf2 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f006 fa1f 	bl	8008932 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0202 	and.w	r2, r2, #2
 800250c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f006 fa0d 	bl	8008932 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002522:	d17b      	bne.n	800261c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f006 fa13 	bl	8008958 <USB_ReadDevAllOutEpInterrupt>
 8002532:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002534:	e06f      	b.n	8002616 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d064      	beq.n	800260a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f006 fa38 	bl	80089c0 <USB_ReadDevOutEPInterrupt>
 8002550:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00c      	beq.n	8002576 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002568:	461a      	mov	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fe0d 	bl	8003190 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 ff0c 	bl	80033a0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	2308      	movs	r3, #8
 8002598:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b0:	461a      	mov	r2, r3
 80025b2:	2310      	movs	r3, #16
 80025b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d108      	bne.n	80025da <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d2:	461a      	mov	r2, r3
 80025d4:	2101      	movs	r1, #1
 80025d6:	f006 fa83 	bl	8008ae0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	461a      	mov	r2, r3
 80025e8:	2320      	movs	r3, #32
 80025ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002608:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3301      	adds	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d18c      	bne.n	8002536 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f006 f986 	bl	8008932 <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002630:	f040 80c4 	bne.w	80027bc <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f006 f9a7 	bl	800898c <USB_ReadDevAllInEpInterrupt>
 800263e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002644:	e0b6      	b.n	80027b4 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80ab 	beq.w	80027a8 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f006 f9cd 	bl	80089fc <USB_ReadDevInEPInterrupt>
 8002662:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d05b      	beq.n	8002726 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	2201      	movs	r2, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	43db      	mvns	r3, r3
 8002688:	69f9      	ldr	r1, [r7, #28]
 800268a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800268e:	4013      	ands	r3, r2
 8002690:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269e:	461a      	mov	r2, r3
 80026a0:	2301      	movs	r3, #1
 80026a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d11b      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3348      	adds	r3, #72	; 0x48
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	3344      	adds	r3, #68	; 0x44
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4419      	add	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4403      	add	r3, r0
 80026e0:	3348      	adds	r3, #72	; 0x48
 80026e2:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f009 fb7b 	bl	800bde6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d116      	bne.n	8002726 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d113      	bne.n	8002726 <HAL_PCD_IRQHandler+0x272>
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3350      	adds	r3, #80	; 0x50
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800271e:	461a      	mov	r2, r3
 8002720:	2101      	movs	r1, #1
 8002722:	f006 f9dd 	bl	8008ae0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273c:	461a      	mov	r2, r3
 800273e:	2308      	movs	r3, #8
 8002740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002758:	461a      	mov	r2, r3
 800275a:	2310      	movs	r3, #16
 800275c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002774:	461a      	mov	r2, r3
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002790:	461a      	mov	r2, r3
 8002792:	2302      	movs	r3, #2
 8002794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fc67 	bl	8003076 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3301      	adds	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f af45 	bne.w	8002646 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f006 f8b6 	bl	8008932 <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d0:	d122      	bne.n	8002818 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fe88 	bl	8003510 <HAL_PCDEx_LPM_Callback>
 8002800:	e002      	b.n	8002808 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f009 fb66 	bl	800bed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f006 f888 	bl	8008932 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282c:	d112      	bne.n	8002854 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f009 fb22 	bl	800be88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002852:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f006 f86a 	bl	8008932 <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	f040 80a7 	bne.w	80029ba <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2110      	movs	r1, #16
 8002886:	4618      	mov	r0, r3
 8002888:	f005 f9a2 	bl	8007bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002890:	e036      	b.n	8002900 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289e:	461a      	mov	r2, r3
 80028a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	0151      	lsls	r1, r2, #5
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	440a      	add	r2, r1
 80028bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	3301      	adds	r3, #1
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002906:	429a      	cmp	r2, r3
 8002908:	d3c3      	bcc.n	8002892 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002918:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800291c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002936:	f043 030b 	orr.w	r3, r3, #11
 800293a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294c:	f043 030b 	orr.w	r3, r3, #11
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	e015      	b.n	8002980 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002962:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002966:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800296a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297a:	f043 030b 	orr.w	r3, r3, #11
 800297e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002992:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a4:	461a      	mov	r2, r3
 80029a6:	f006 f89b 	bl	8008ae0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 ffb7 	bl	8008932 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	d124      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f006 f84d 	bl	8008a74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 f957 	bl	8007c92 <USB_GetDevSpeed>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681c      	ldr	r4, [r3, #0]
 80029f0:	f001 f970 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 80029f4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4620      	mov	r0, r4
 8002a00:	f004 fe86 	bl	8007710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f009 fa16 	bl	800be36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f005 ff87 	bl	8008932 <USB_ReadInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d161      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0210 	bic.w	r2, r2, #16
 8002a3c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 020f 	and.w	r2, r3, #15
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	0c5b      	lsrs	r3, r3, #17
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d124      	bne.n	8002ab4 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d035      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a38      	ldr	r0, [r7, #32]
 8002a8a:	f005 fdff 	bl	800868c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	e016      	b.n	8002ae2 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	0c5b      	lsrs	r3, r3, #17
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d110      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6a38      	ldr	r0, [r7, #32]
 8002acc:	f005 fdde 	bl	800868c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0210 	orr.w	r2, r2, #16
 8002af0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f005 ff1b 	bl	8008932 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d10a      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f009 f987 	bl	800be1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f002 0208 	and.w	r2, r2, #8
 8002b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f005 ff06 	bl	8008932 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b30:	d10f      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f009 f9e9 	bl	800bf14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f005 feeb 	bl	8008932 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b66:	d10f      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f009 f9bc 	bl	800bef0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 fed0 	bl	8008932 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f009 f9ca 	bl	800bf38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f005 feba 	bl	8008932 <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d115      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f009 f9ba 	bl	800bf54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	e000      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x740>
      return;
 8002bf2:	bf00      	nop
    }
  }
}
 8002bf4:	3734      	adds	r7, #52	; 0x34
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}

08002bfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_PCD_SetAddress+0x1a>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e013      	b.n	8002c3c <HAL_PCD_SetAddress+0x42>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 fe2a 	bl	8008886 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	460b      	mov	r3, r1
 8002c58:	803b      	strh	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da0f      	bge.n	8002c8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3338      	adds	r3, #56	; 0x38
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	705a      	strb	r2, [r3, #1]
 8002c88:	e00f      	b.n	8002caa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cb6:	883a      	ldrh	r2, [r7, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	78ba      	ldrb	r2, [r7, #2]
 8002cc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cd4:	78bb      	ldrb	r3, [r7, #2]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_EP_Open+0xaa>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e00e      	b.n	8002d0c <HAL_PCD_EP_Open+0xc8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 ffed 	bl	8007cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0f      	bge.n	8002d48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	e00f      	b.n	8002d68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_PCD_EP_Close+0x6e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e00e      	b.n	8002da0 <HAL_PCD_EP_Close+0x8c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 f82b 	bl	8007dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	460b      	mov	r3, r1
 8002db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e04:	7afb      	ldrb	r3, [r7, #11]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f005 faae 	bl	800837c <USB_EP0StartXfer>
 8002e20:	e008      	b.n	8002e34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6979      	ldr	r1, [r7, #20]
 8002e30:	f005 f860 	bl	8007ef4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e60:	681b      	ldr	r3, [r3, #0]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6979      	ldr	r1, [r7, #20]
 8002ee0:	f005 fa4c 	bl	800837c <USB_EP0StartXfer>
 8002ee4:	e008      	b.n	8002ef8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	f004 fffe 	bl	8007ef4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d901      	bls.n	8002f20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e050      	b.n	8002fc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0f      	bge.n	8002f48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	3338      	adds	r3, #56	; 0x38
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	705a      	strb	r2, [r3, #1]
 8002f46:	e00d      	b.n	8002f64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_EP_SetStall+0x82>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e01e      	b.n	8002fc2 <HAL_PCD_EP_SetStall+0xc0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 fba3 	bl	80086de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	b2d9      	uxtb	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f005 fd94 	bl	8008ae0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d901      	bls.n	8002fe8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e042      	b.n	800306e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	da0f      	bge.n	8003010 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	3338      	adds	r3, #56	; 0x38
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	3304      	adds	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	705a      	strb	r2, [r3, #1]
 800300e:	e00f      	b.n	8003030 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_EP_ClrStall+0x86>
 800304c:	2302      	movs	r3, #2
 800304e:	e00e      	b.n	800306e <HAL_PCD_EP_ClrStall+0xa4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	4618      	mov	r0, r3
 8003060:	f005 fbab 	bl	80087ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	; 0x28
 800307a:	af02      	add	r7, sp, #8
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	3338      	adds	r3, #56	; 0x38
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	3304      	adds	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d901      	bls.n	80030ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06c      	b.n	8003188 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d902      	bls.n	80030ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3303      	adds	r3, #3
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d2:	e02b      	b.n	800312c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d902      	bls.n	80030f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	3303      	adds	r3, #3
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68d9      	ldr	r1, [r3, #12]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003108:	b2db      	uxtb	r3, r3
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f005 fa87 	bl	8008622 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	441a      	add	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	441a      	add	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	b29b      	uxth	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	429a      	cmp	r2, r3
 8003140:	d809      	bhi.n	8003156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314a:	429a      	cmp	r2, r3
 800314c:	d203      	bcs.n	8003156 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1be      	bne.n	80030d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	429a      	cmp	r2, r3
 8003160:	d811      	bhi.n	8003186 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	2201      	movs	r2, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	43db      	mvns	r3, r3
 800317c:	6939      	ldr	r1, [r7, #16]
 800317e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003182:	4013      	ands	r3, r2
 8003184:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	333c      	adds	r3, #60	; 0x3c
 80031a8:	3304      	adds	r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f040 80b3 	bne.w	800332e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d028      	beq.n	8003224 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a70      	ldr	r2, [pc, #448]	; (8003398 <PCD_EP_OutXfrComplete_int+0x208>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d90e      	bls.n	80031f8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	461a      	mov	r2, r3
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f008 fdc7 	bl	800bd8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003208:	461a      	mov	r2, r3
 800320a:	2101      	movs	r1, #1
 800320c:	f005 fc68 	bl	8008ae0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2308      	movs	r3, #8
 8003220:	6093      	str	r3, [r2, #8]
 8003222:	e0b3      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d009      	beq.n	8003242 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323a:	461a      	mov	r2, r3
 800323c:	2320      	movs	r3, #32
 800323e:	6093      	str	r3, [r2, #8]
 8003240:	e0a4      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 809f 	bne.w	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a51      	ldr	r2, [pc, #324]	; (8003398 <PCD_EP_OutXfrComplete_int+0x208>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d90f      	bls.n	8003276 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003272:	6093      	str	r3, [r2, #8]
 8003274:	e08a      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003288:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	0159      	lsls	r1, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	440b      	add	r3, r1
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800329c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4403      	add	r3, r0
 80032ac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80032b0:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4419      	add	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4403      	add	r3, r0
 80032ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032ee:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f008 fd5a 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d144      	bne.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d138      	bne.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003324:	461a      	mov	r2, r3
 8003326:	2101      	movs	r1, #1
 8003328:	f005 fbda 	bl	8008ae0 <USB_EP0_OutStart>
 800332c:	e02e      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a1a      	ldr	r2, [pc, #104]	; (800339c <PCD_EP_OutXfrComplete_int+0x20c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d124      	bne.n	8003380 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	6093      	str	r3, [r2, #8]
 8003354:	e01a      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2320      	movs	r3, #32
 8003370:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4619      	mov	r1, r3
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f008 fd19 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
 800337e:	e005      	b.n	800338c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f008 fd12 	bl	800bdb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	4f54300a 	.word	0x4f54300a
 800339c:	4f54310a 	.word	0x4f54310a

080033a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	333c      	adds	r3, #60	; 0x3c
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d113      	bne.n	80033fe <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	; (8003458 <PCD_EP_OutSetupPacket_int+0xb8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d922      	bls.n	8003424 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01d      	beq.n	8003424 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	461a      	mov	r2, r3
 80033f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	e012      	b.n	8003424 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a16      	ldr	r2, [pc, #88]	; (800345c <PCD_EP_OutSetupPacket_int+0xbc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10e      	bne.n	8003424 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003422:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f008 fcb1 	bl	800bd8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <PCD_EP_OutSetupPacket_int+0xb8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d90c      	bls.n	800344c <PCD_EP_OutSetupPacket_int+0xac>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003444:	461a      	mov	r2, r3
 8003446:	2101      	movs	r1, #1
 8003448:	f005 fb4a 	bl	8008ae0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	4f54300a 	.word	0x4f54300a
 800345c:	4f54310a 	.word	0x4f54310a

08003460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
 800346c:	4613      	mov	r3, r2
 800346e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800347e:	883b      	ldrh	r3, [r7, #0]
 8003480:	0419      	lsls	r1, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	430a      	orrs	r2, r1
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
 800348c:	e028      	b.n	80034e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	e00d      	b.n	80034be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	3340      	adds	r3, #64	; 0x40
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	3301      	adds	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3ec      	bcc.n	80034a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034c8:	883b      	ldrh	r3, [r7, #0]
 80034ca:	0418      	lsls	r0, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	4302      	orrs	r2, r0
 80034d8:	3340      	adds	r3, #64	; 0x40
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e22d      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	4ba3      	ldr	r3, [pc, #652]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4ba0      	ldr	r3, [pc, #640]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b9d      	ldr	r3, [pc, #628]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b99      	ldr	r3, [pc, #612]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e208      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x74>
 800358e:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a8a      	ldr	r2, [pc, #552]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a87      	ldr	r2, [pc, #540]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 80035c0:	4b84      	ldr	r3, [pc, #528]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a80      	ldr	r2, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fe4c 	bl	800127c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fd fe48 	bl	800127c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1cd      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b76      	ldr	r3, [pc, #472]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fd fe38 	bl	800127c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fd fe34 	bl	800127c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1b9      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e18d      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4952      	ldr	r1, [pc, #328]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fded 	bl	800127c <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fd fde9 	bl	800127c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e16e      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4940      	ldr	r1, [pc, #256]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_OscConfig+0x2b0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fdcc 	bl	800127c <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fd fdc8 	bl	800127c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e14d      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d030      	beq.n	8003774 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd fdac 	bl	800127c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7fd fda8 	bl	800127c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e12d      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x200>
 8003746:	e015      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x2b4>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fd fd95 	bl	800127c <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fd fd91 	bl	800127c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e116      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a0 	beq.w	80038c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d121      	bne.n	8003802 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <HAL_RCC_OscConfig+0x2b8>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fd57 	bl	800127c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e011      	b.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	42470000 	.word	0x42470000
 80037dc:	42470e80 	.word	0x42470e80
 80037e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fd fd4a 	bl	800127c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0cf      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_OscConfig+0x478>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x2f0>
 800380a:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a65      	ldr	r2, [pc, #404]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	; 0x70
 8003816:	e01c      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b05      	cmp	r3, #5
 800381e:	d10c      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 8003820:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a5f      	ldr	r2, [pc, #380]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	4b5d      	ldr	r3, [pc, #372]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a5c      	ldr	r2, [pc, #368]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	e00b      	b.n	8003852 <HAL_RCC_OscConfig+0x32a>
 800383a:	4b5a      	ldr	r3, [pc, #360]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d015      	beq.n	8003886 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fd fd0f 	bl	800127c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fd0b 	bl	800127c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e08e      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCC_OscConfig+0x33a>
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003886:	f7fd fcf9 	bl	800127c <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd fcf5 	bl	800127c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e078      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	4b3f      	ldr	r3, [pc, #252]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ee      	bne.n	800388e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b0:	7dfb      	ldrb	r3, [r7, #23]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a3a      	ldr	r2, [pc, #232]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 80038bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d064      	beq.n	8003994 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x480>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd fcca 	bl	800127c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fd fcc6 	bl	800127c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04b      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491d      	ldr	r1, [pc, #116]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCC_OscConfig+0x480>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fd fc9f 	bl	800127c <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd fc9b 	bl	800127c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e020      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x41a>
 8003960:	e018      	b.n	8003994 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x480>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd fc88 	bl	800127c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fd fc84 	bl	800127c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e009      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_RCC_OscConfig+0x47c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x448>
 800398e:	e001      	b.n	8003994 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470060 	.word	0x42470060

080039ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0ca      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d90c      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b64      	ldr	r3, [pc, #400]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b62      	ldr	r3, [pc, #392]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b6      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a00:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a18:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	494c      	ldr	r1, [pc, #304]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d044      	beq.n	8003acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d119      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e07d      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06d      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e065      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4933      	ldr	r1, [pc, #204]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a9c:	f7fd fbee 	bl	800127c <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fd fbea 	bl	800127c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e04d      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d20c      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCC_ClockConfig+0x1b4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e030      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4915      	ldr	r1, [pc, #84]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	490d      	ldr	r1, [pc, #52]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b32:	f000 f81d 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b36:	4601      	mov	r1, r0
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	5cd3      	ldrb	r3, [r2, r3]
 8003b46:	fa21 f303 	lsr.w	r3, r1, r3
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fd fb50 	bl	80011f4 <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	080102c4 	.word	0x080102c4
 8003b6c:	2000011c 	.word	0x2000011c

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b86:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d007      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 808d 	bne.w	8003cb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b9e:	60bb      	str	r3, [r7, #8]
       break;
 8003ba0:	e08c      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ba4:	60bb      	str	r3, [r7, #8]
      break;
 8003ba6:	e089      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb2:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d023      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	f04f 0400 	mov.w	r4, #0
 8003bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	ea03 0501 	and.w	r5, r3, r1
 8003bd4:	ea04 0602 	and.w	r6, r4, r2
 8003bd8:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bda:	fb02 f106 	mul.w	r1, r2, r6
 8003bde:	2200      	movs	r2, #0
 8003be0:	fb02 f205 	mul.w	r2, r2, r5
 8003be4:	440a      	add	r2, r1
 8003be6:	493a      	ldr	r1, [pc, #232]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be8:	fba5 0101 	umull	r0, r1, r5, r1
 8003bec:	1853      	adds	r3, r2, r1
 8003bee:	4619      	mov	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4623      	mov	r3, r4
 8003bfa:	f7fd f845 	bl	8000c88 <__aeabi_uldivmod>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e049      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b30      	ldr	r3, [pc, #192]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	f04f 0400 	mov.w	r4, #0
 8003c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	ea03 0501 	and.w	r5, r3, r1
 8003c1c:	ea04 0602 	and.w	r6, r4, r2
 8003c20:	4629      	mov	r1, r5
 8003c22:	4632      	mov	r2, r6
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	0154      	lsls	r4, r2, #5
 8003c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c32:	014b      	lsls	r3, r1, #5
 8003c34:	4619      	mov	r1, r3
 8003c36:	4622      	mov	r2, r4
 8003c38:	1b49      	subs	r1, r1, r5
 8003c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	0194      	lsls	r4, r2, #6
 8003c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c4c:	018b      	lsls	r3, r1, #6
 8003c4e:	1a5b      	subs	r3, r3, r1
 8003c50:	eb64 0402 	sbc.w	r4, r4, r2
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	00e2      	lsls	r2, r4, #3
 8003c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c62:	00d9      	lsls	r1, r3, #3
 8003c64:	460b      	mov	r3, r1
 8003c66:	4614      	mov	r4, r2
 8003c68:	195b      	adds	r3, r3, r5
 8003c6a:	eb44 0406 	adc.w	r4, r4, r6
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	02a2      	lsls	r2, r4, #10
 8003c78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c7c:	0299      	lsls	r1, r3, #10
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4614      	mov	r4, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	4621      	mov	r1, r4
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc fffa 	bl	8000c88 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
      break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cb8:	60bb      	str	r3, [r7, #8]
      break;
 8003cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	00b71b00 	.word	0x00b71b00

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	2000011c 	.word	0x2000011c

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	080102d4 	.word	0x080102d4

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffdc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5cd3      	ldrb	r3, [r2, r3]
 8003d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	080102d4 	.word	0x080102d4

08003d3c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d035      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d64:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6a:	f7fd fa87 	bl	800127c <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d72:	f7fd fa83 	bl	800127c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0b0      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d84:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	019a      	lsls	r2, r3, #6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	071b      	lsls	r3, r3, #28
 8003d9c:	4955      	ldr	r1, [pc, #340]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003da4:	4b52      	ldr	r3, [pc, #328]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fa67 	bl	800127c <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003db2:	f7fd fa63 	bl	800127c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e090      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8083 	beq.w	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a43      	ldr	r2, [pc, #268]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3e      	ldr	r2, [pc, #248]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e06:	f7fd fa39 	bl	800127c <HAL_GetTick>
 8003e0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7fd fa35 	bl	800127c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e062      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e20:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f0      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d028      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	4b29      	ldr	r3, [pc, #164]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e66:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d114      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fd fa03 	bl	800127c <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd f9ff 	bl	800127c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e02a      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	490d      	ldr	r1, [pc, #52]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ecc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	4905      	ldr	r1, [pc, #20]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	42470068 	.word	0x42470068
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	42470e40 	.word	0x42470e40

08003f00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e083      	b.n	800401a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7f5b      	ldrb	r3, [r3, #29]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f007 faa4 	bl	800b470 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	22ca      	movs	r2, #202	; 0xca
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2253      	movs	r2, #83	; 0x53
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f897 	bl	8004072 <RTC_EnterInitMode>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	22ff      	movs	r2, #255	; 0xff
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e05e      	b.n	800401a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6899      	ldr	r1, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	041a      	lsls	r2, r3, #16
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f829 	bl	8004022 <HAL_RTC_WaitForSynchro>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	22ff      	movs	r2, #255	; 0xff
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e018      	b.n	800401a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800403c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800403e:	f7fd f91d 	bl	800127c <HAL_GetTick>
 8004042:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004044:	e009      	b.n	800405a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004046:	f7fd f919 	bl	800127c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004054:	d901      	bls.n	800405a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e007      	b.n	800406a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d119      	bne.n	80040c0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004096:	f7fd f8f1 	bl	800127c <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800409c:	e009      	b.n	80040b2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800409e:	f7fd f8ed 	bl	800127c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ac:	d901      	bls.n	80040b2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e007      	b.n	80040c2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ee      	beq.n	800409e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e01d      	b.n	8004118 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f007 f9d4 	bl	800b49c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2203      	movs	r2, #3
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f80f 	bl	8004120 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b08e      	sub	sp, #56	; 0x38
 8004124:	af04      	add	r7, sp, #16
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004140:	2376      	movs	r3, #118	; 0x76
 8004142:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681d      	ldr	r5, [r3, #0]
 8004148:	466c      	mov	r4, sp
 800414a:	f107 0318 	add.w	r3, r7, #24
 800414e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004156:	f107 030c 	add.w	r3, r7, #12
 800415a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800415c:	4628      	mov	r0, r5
 800415e:	f002 fd15 	bl	8006b8c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_SD_InitCard+0xb4>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fd56 	bl	8006c1e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_SD_InitCard+0xb4>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8004178:	2002      	movs	r0, #2
 800417a:	f7fd f88b 	bl	8001294 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fffe 	bl	8005180 <SD_PowerON>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e013      	b.n	80041cc <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 ff22 	bl	8004fee <SD_InitCard>
 80041aa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdb0      	pop	{r4, r5, r7, pc}
 80041d4:	422580a0 	.word	0x422580a0

080041d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08c      	sub	sp, #48	; 0x30
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0ad      	b.n	800435c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 80a6 	bne.w	800435a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	441a      	add	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	429a      	cmp	r2, r3
 8004220:	d907      	bls.n	8004232 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e094      	b.n	800435c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2203      	movs	r2, #3
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004262:	4a41      	ldr	r2, [pc, #260]	; (8004368 <HAL_SD_ReadBlocks_DMA+0x190>)
 8004264:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2200      	movs	r2, #0
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3380      	adds	r3, #128	; 0x80
 8004278:	4619      	mov	r1, r3
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	025b      	lsls	r3, r3, #9
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	f7fd f9e9 	bl	8001658 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_SD_ReadBlocks_DMA+0x194>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	025b      	lsls	r3, r3, #9
 8004298:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80042a6:	2390      	movs	r3, #144	; 0x90
 80042a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80042aa:	2302      	movs	r3, #2
 80042ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f107 0214 	add.w	r2, r7, #20
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f002 fd14 	bl	8006cee <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042ce:	4618      	mov	r0, r3
 80042d0:	f002 fd39 	bl	8006d46 <SDMMC_CmdBlockLength>
 80042d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e02e      	b.n	800435c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d90a      	bls.n	800431a <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2282      	movs	r2, #130	; 0x82
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	f002 fd60 	bl	8006dd6 <SDMMC_CmdReadMultiBlock>
 8004316:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004318:	e009      	b.n	800432e <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2281      	movs	r2, #129	; 0x81
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4618      	mov	r0, r3
 8004328:	f002 fd31 	bl	8006d8e <SDMMC_CmdReadSingleBlock>
 800432c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800433c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	431a      	orrs	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e002      	b.n	800435c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3730      	adds	r7, #48	; 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	08004dff 	.word	0x08004dff
 8004368:	08004e6d 	.word	0x08004e6d
 800436c:	4225858c 	.word	0x4225858c

08004370 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	; 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800437e:	2300      	movs	r3, #0
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0ad      	b.n	80044f4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 80a6 	bne.w	80044f2 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d907      	bls.n	80043ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e094      	b.n	80044f4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2203      	movs	r2, #3
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80043e8:	f043 0302 	orr.w	r3, r3, #2
 80043ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a42      	ldr	r2, [pc, #264]	; (80044fc <HAL_SD_WriteBlocks_DMA+0x18c>)
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a41      	ldr	r2, [pc, #260]	; (8004500 <HAL_SD_WriteBlocks_DMA+0x190>)
 80043fc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2200      	movs	r2, #0
 8004404:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800441c:	4618      	mov	r0, r3
 800441e:	f002 fc92 	bl	8006d46 <SDMMC_CmdBlockLength>
 8004422:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	431a      	orrs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e053      	b.n	80044f4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d90a      	bls.n	8004468 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22a0      	movs	r2, #160	; 0xa0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fd01 	bl	8006e66 <SDMMC_CmdWriteMultiBlock>
 8004464:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004466:	e009      	b.n	800447c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2290      	movs	r2, #144	; 0x90
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f002 fcd2 	bl	8006e1e <SDMMC_CmdWriteSingleBlock>
 800447a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	431a      	orrs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e027      	b.n	80044f4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_SD_WriteBlocks_DMA+0x194>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3380      	adds	r3, #128	; 0x80
 80044b6:	461a      	mov	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	025b      	lsls	r3, r3, #9
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	f7fd f8cb 	bl	8001658 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	025b      	lsls	r3, r3, #9
 80044cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80044ce:	2390      	movs	r3, #144	; 0x90
 80044d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80044da:	2301      	movs	r3, #1
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f107 0214 	add.w	r2, r7, #20
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f002 fc00 	bl	8006cee <SDIO_ConfigData>
    
    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3730      	adds	r7, #48	; 0x30
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	08004dd5 	.word	0x08004dd5
 8004500:	08004e6d 	.word	0x08004e6d
 8004504:	4225858c 	.word	0x4225858c

08004508 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 808d 	beq.w	800463e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800453c:	f023 0302 	bic.w	r3, r3, #2
 8004540:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03a      	beq.n	80045c4 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_SD_IRQHandler+0x5e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f002 fca0 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 8004570:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f925 	bl	80047d4 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_SD_IRQHandler+0xac>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f005 ff3d 	bl	800a434 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80045ba:	e103      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f005 ff2f 	bl	800a420 <HAL_SD_TxCpltCallback>
}
 80045c2:	e0ff      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80f9 	beq.w	80047c4 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d011      	beq.n	8004602 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f002 fc64 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 80045e8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f8e9 	bl	80047d4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 80da 	bne.w	80047c4 <HAL_SD_IRQHandler+0x2bc>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 80d3 	bne.w	80047c4 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0208 	bic.w	r2, r2, #8
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f005 fef2 	bl	800a420 <HAL_SD_TxCpltCallback>
}
 800463c:	e0c2      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 ffef 	bl	800563a <SD_Write_IT>
}
 800465c:	e0b2      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004674:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ffb7 	bl	80055ea <SD_Read_IT>
}
 800467c:	e0a2      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004684:	f240 233a 	movw	r3, #570	; 0x23a
 8004688:	4013      	ands	r3, r2
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 809a 	beq.w	80047c4 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	f043 0202 	orr.w	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	f043 0208 	orr.w	r2, r3, #8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	f043 0210 	orr.w	r2, r3, #16
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	f043 0208 	orr.w	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800472a:	f023 0302 	bic.w	r3, r3, #2
 800472e:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d036      	beq.n	80047aa <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_SD_IRQHandler+0x2c4>)
 800474a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc ffe1 	bl	8001718 <HAL_DMA_Abort_IT>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d033      	beq.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fbc8 	bl	8004ef6 <SD_DMATxAbort>
}
 8004766:	e02d      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_SD_IRQHandler+0x2c8>)
 8004776:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc ffcb 	bl	8001718 <HAL_DMA_Abort_IT>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01d      	beq.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fbf0 	bl	8004f72 <SD_DMARxAbort>
}
 8004792:	e017      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f005 fe32 	bl	800a40c <HAL_SD_AbortCallback>
}
 80047a8:	e00c      	b.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f808 	bl	80047d4 <HAL_SD_ErrorCallback>
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	08004ef7 	.word	0x08004ef7
 80047d0:	08004f73 	.word	0x08004f73

080047d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fa:	0e1b      	lsrs	r3, r3, #24
 80047fc:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	b2da      	uxtb	r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	b2da      	uxtb	r2, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	b2da      	uxtb	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004830:	0c1b      	lsrs	r3, r3, #16
 8004832:	b2db      	uxtb	r3, r3
 8004834:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	b2db      	uxtb	r3, r3
 8004846:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004854:	b2db      	uxtb	r3, r3
 8004856:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	b29b      	uxth	r3, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	b29a      	uxth	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b2db      	uxtb	r3, r3
 800487c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	88db      	ldrh	r3, [r3, #6]
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	b29b      	uxth	r3, r3
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	b29b      	uxth	r3, r3
 8004890:	4313      	orrs	r3, r2
 8004892:	b29a      	uxth	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	09db      	lsrs	r3, r3, #7
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 8087 	bne.w	8004a0e <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004910:	b2db      	uxtb	r3, r3
 8004912:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	431a      	orrs	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	b2db      	uxtb	r3, r3
 800492a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	431a      	orrs	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	b2da      	uxtb	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	b2da      	uxtb	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	b2da      	uxtb	r2, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	b2da      	uxtb	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0306 	and.w	r3, r3, #6
 8004992:	b2da      	uxtb	r2, r3
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	7e1b      	ldrb	r3, [r3, #24]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	09db      	lsrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4313      	orrs	r3, r2
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	7e1b      	ldrb	r3, [r3, #24]
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3302      	adds	r3, #2
 80049ce:	2201      	movs	r2, #1
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049d8:	fb02 f203 	mul.w	r2, r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7a1b      	ldrb	r3, [r3, #8]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	2301      	movs	r3, #1
 80049ea:	fa03 f202 	lsl.w	r2, r3, r2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80049fa:	0a52      	lsrs	r2, r2, #9
 80049fc:	fb02 f203 	mul.w	r2, r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a0c:	e04d      	b.n	8004aaa <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d138      	bne.n	8004a88 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	0e1b      	lsrs	r3, r3, #24
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	3301      	adds	r3, #1
 8004a68:	029a      	lsls	r2, r3, #10
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60
 8004a86:	e010      	b.n	8004aaa <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0c1      	b.n	8004c2e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	099b      	lsrs	r3, r3, #6
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	7e9b      	ldrb	r3, [r3, #26]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	09db      	lsrs	r3, r3, #7
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	09db      	lsrs	r3, r3, #7
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	7fdb      	ldrb	r3, [r3, #31]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	09db      	lsrs	r3, r3, #7
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	089b      	lsrs	r3, r3, #2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004c92:	b5b0      	push	{r4, r5, r7, lr}
 8004c94:	b08e      	sub	sp, #56	; 0x38
 8004c96:	af04      	add	r7, sp, #16
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d02e      	beq.n	8004d0e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	d106      	bne.n	8004cc6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc4:	e029      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fb28 	bl	8005324 <SD_WideBus_Enable>
 8004cd4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ce2:	e01a      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb67 	bl	80053be <SD_WideBus_Disable>
 8004cf0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfe:	e00c      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d0c:	e005      	b.n	8004d1a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e024      	b.n	8004d82 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681d      	ldr	r5, [r3, #0]
 8004d5e:	466c      	mov	r4, sp
 8004d60:	f107 0318 	add.w	r3, r7, #24
 8004d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d6c:	f107 030c 	add.w	r3, r7, #12
 8004d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d72:	4628      	mov	r0, r5
 8004d74:	f001 ff0a 	bl	8006b8c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bdb0      	pop	{r4, r5, r7, pc}

08004d8a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8004d92:	2304      	movs	r3, #4
 8004d94:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8004d9e:	f107 030c 	add.w	r3, r7, #12
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa93 	bl	80052d0 <SD_SendStatus>
 8004daa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	0a5b      	lsrs	r3, r3, #9
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	2b82      	cmp	r3, #130	; 0x82
 8004e16:	d111      	bne.n	8004e3c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f002 f847 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 8004e22:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fccc 	bl	80047d4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0208 	bic.w	r2, r2, #8
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f005 fae8 	bl	800a434 <HAL_SD_RxCpltCallback>
#endif
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d004      	beq.n	8004e8e <SD_DMAError+0x22>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d12c      	bne.n	8004ee8 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff68 	bl	8004d8a <HAL_SD_GetCardState>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	2b06      	cmp	r3, #6
 8004ec2:	d002      	beq.n	8004eca <SD_DMAError+0x5e>
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d10a      	bne.n	8004ee0 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 ffee 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	431a      	orrs	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff fc73 	bl	80047d4 <HAL_SD_ErrorCallback>
#endif
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d127      	bne.n	8004f6a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff35 	bl	8004d8a <HAL_SD_GetCardState>
 8004f20:	4603      	mov	r3, r0
 8004f22:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	2b06      	cmp	r3, #6
 8004f36:	d002      	beq.n	8004f3e <SD_DMATxAbort+0x48>
 8004f38:	7afb      	ldrb	r3, [r7, #11]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d115      	bne.n	8004f6a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 ffb4 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f005 fa55 	bl	800a40c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004f62:	e002      	b.n	8004f6a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff fc35 	bl	80047d4 <HAL_SD_ErrorCallback>
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d127      	bne.n	8004fe6 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7ff fef7 	bl	8004d8a <HAL_SD_GetCardState>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fae:	7afb      	ldrb	r3, [r7, #11]
 8004fb0:	2b06      	cmp	r3, #6
 8004fb2:	d002      	beq.n	8004fba <SD_DMARxAbort+0x48>
 8004fb4:	7afb      	ldrb	r3, [r7, #11]
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d115      	bne.n	8004fe6 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 ff76 	bl	8006eb0 <SDMMC_CmdStopTransfer>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f005 fa17 	bl	800a40c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004fde:	e002      	b.n	8004fe6 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7ff fbf7 	bl	80047d4 <HAL_SD_ErrorCallback>
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004fee:	b5b0      	push	{r4, r5, r7, lr}
 8004ff0:	b094      	sub	sp, #80	; 0x50
 8004ff2:	af04      	add	r7, sp, #16
 8004ff4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fe19 	bl	8006c3a <SDIO_GetPowerState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800500e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005012:	e0b1      	b.n	8005178 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005018:	2b03      	cmp	r3, #3
 800501a:	d02f      	beq.n	800507c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f002 f85f 	bl	80070e4 <SDMMC_CmdSendCID>
 8005026:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <SD_InitCard+0x44>
    {
      return errorstate;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	e0a2      	b.n	8005178 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2100      	movs	r1, #0
 8005038:	4618      	mov	r0, r3
 800503a:	f001 fe43 	bl	8006cc4 <SDIO_GetResponse>
 800503e:	4602      	mov	r2, r0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2104      	movs	r1, #4
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fe3a 	bl	8006cc4 <SDIO_GetResponse>
 8005050:	4602      	mov	r2, r0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2108      	movs	r1, #8
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fe31 	bl	8006cc4 <SDIO_GetResponse>
 8005062:	4602      	mov	r2, r0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	210c      	movs	r1, #12
 800506e:	4618      	mov	r0, r3
 8005070:	f001 fe28 	bl	8006cc4 <SDIO_GetResponse>
 8005074:	4602      	mov	r2, r0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	2b03      	cmp	r3, #3
 8005082:	d00d      	beq.n	80050a0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f107 020e 	add.w	r2, r7, #14
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f002 f869 	bl	8007166 <SDMMC_CmdSetRelAdd>
 8005094:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <SD_InitCard+0xb2>
    {
      return errorstate;
 800509c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509e:	e06b      	b.n	8005178 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d036      	beq.n	8005116 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f002 f831 	bl	8007124 <SDMMC_CmdSendCSD>
 80050c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <SD_InitCard+0xe0>
    {
      return errorstate;
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	e054      	b.n	8005178 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fdf5 	bl	8006cc4 <SDIO_GetResponse>
 80050da:	4602      	mov	r2, r0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2104      	movs	r1, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fdec 	bl	8006cc4 <SDIO_GetResponse>
 80050ec:	4602      	mov	r2, r0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2108      	movs	r1, #8
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 fde3 	bl	8006cc4 <SDIO_GetResponse>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	210c      	movs	r1, #12
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fdda 	bl	8006cc4 <SDIO_GetResponse>
 8005110:	4602      	mov	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2104      	movs	r1, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f001 fdd1 	bl	8006cc4 <SDIO_GetResponse>
 8005122:	4603      	mov	r3, r0
 8005124:	0d1a      	lsrs	r2, r3, #20
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800512a:	f107 0310 	add.w	r3, r7, #16
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fb59 	bl	80047e8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	461a      	mov	r2, r3
 8005146:	4623      	mov	r3, r4
 8005148:	4608      	mov	r0, r1
 800514a:	f001 fed5 	bl	8006ef8 <SDMMC_CmdSelDesel>
 800514e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <SD_InitCard+0x16c>
  {
    return errorstate;
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005158:	e00e      	b.n	8005178 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	466c      	mov	r4, sp
 8005162:	f103 0210 	add.w	r2, r3, #16
 8005166:	ca07      	ldmia	r2, {r0, r1, r2}
 8005168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800516c:	3304      	adds	r3, #4
 800516e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005170:	4628      	mov	r0, r5
 8005172:	f001 fd0b 	bl	8006b8c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3740      	adds	r7, #64	; 0x40
 800517c:	46bd      	mov	sp, r7
 800517e:	bdb0      	pop	{r4, r5, r7, pc}

08005180 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fed0 	bl	8006f42 <SDMMC_CmdGoIdleState>
 80051a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <SD_PowerON+0x2e>
  {
    return errorstate;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	e08c      	b.n	80052c8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fee5 	bl	8006f82 <SDMMC_CmdOperCond>
 80051b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d03d      	beq.n	800523c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80051c6:	e032      	b.n	800522e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	60ba      	str	r2, [r7, #8]
 80051ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d102      	bne.n	80051dc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80051d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051da:	e075      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 feee 	bl	8006fc4 <SDMMC_CmdAppCommand>
 80051e8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051f4:	e068      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 ff05 	bl	800700c <SDMMC_CmdAppOperCommand>
 8005202:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800520a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800520e:	e05b      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2100      	movs	r1, #0
 8005216:	4618      	mov	r0, r3
 8005218:	f001 fd54 	bl	8006cc4 <SDIO_GetResponse>
 800521c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0fdb      	lsrs	r3, r3, #31
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <SD_PowerON+0xaa>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <SD_PowerON+0xac>
 800522a:	2300      	movs	r3, #0
 800522c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0c9      	beq.n	80051c8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
 800523a:	e044      	b.n	80052c6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8005242:	e031      	b.n	80052a8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	60ba      	str	r2, [r7, #8]
 800524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524e:	4293      	cmp	r3, r2
 8005250:	d102      	bne.n	8005258 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005256:	e037      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f001 feb0 	bl	8006fc4 <SDMMC_CmdAppCommand>
 8005264:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <SD_PowerON+0xf0>
      {
        return errorstate;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	e02b      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fec7 	bl	800700c <SDMMC_CmdAppOperCommand>
 800527e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <SD_PowerON+0x10a>
      {
        return errorstate;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	e01e      	b.n	80052c8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f001 fd17 	bl	8006cc4 <SDIO_GetResponse>
 8005296:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	0fdb      	lsrs	r3, r3, #31
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <SD_PowerON+0x124>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <SD_PowerON+0x126>
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ca      	beq.n	8005244 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
 80052be:	e002      	b.n	80052c6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80052e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e8:	e018      	b.n	800531c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f001 ff58 	bl	80071ac <SDMMC_CmdSendStatus>
 80052fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	e009      	b.n	800531c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fcd8 	bl	8006cc4 <SDIO_GetResponse>
 8005314:	4602      	mov	r2, r0
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fcc0 	bl	8006cc4 <SDIO_GetResponse>
 8005344:	4603      	mov	r3, r0
 8005346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800534e:	d102      	bne.n	8005356 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005354:	e02f      	b.n	80053b6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005356:	f107 030c 	add.w	r3, r7, #12
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f87b 	bl	8005458 <SD_FindSCR>
 8005362:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	e023      	b.n	80053b6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01c      	beq.n	80053b2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f001 fe1d 	bl	8006fc4 <SDMMC_CmdAppCommand>
 800538a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	e00f      	b.n	80053b6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2102      	movs	r1, #2
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fe5a 	bl	8007056 <SDMMC_CmdBusWidth>
 80053a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	e003      	b.n	80053b6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e001      	b.n	80053b6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 fc73 	bl	8006cc4 <SDIO_GetResponse>
 80053de:	4603      	mov	r3, r0
 80053e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e8:	d102      	bne.n	80053f0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ee:	e02f      	b.n	8005450 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f82e 	bl	8005458 <SD_FindSCR>
 80053fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	e023      	b.n	8005450 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01c      	beq.n	800544c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f001 fdd0 	bl	8006fc4 <SDMMC_CmdAppCommand>
 8005424:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	e00f      	b.n	8005450 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f001 fe0d 	bl	8007056 <SDMMC_CmdBusWidth>
 800543c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	e003      	b.n	8005450 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005448:	2300      	movs	r3, #0
 800544a:	e001      	b.n	8005450 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800544c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b08f      	sub	sp, #60	; 0x3c
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005466:	f7fb ff09 	bl	800127c <HAL_GetTick>
 800546a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2108      	movs	r1, #8
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fc61 	bl	8006d46 <SDMMC_CmdBlockLength>
 8005484:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <SD_FindSCR+0x38>
  {
    return errorstate;
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	e0a8      	b.n	80055e2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f001 fd91 	bl	8006fc4 <SDMMC_CmdAppCommand>
 80054a2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	e099      	b.n	80055e2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80054b4:	2308      	movs	r3, #8
 80054b6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80054b8:	2330      	movs	r3, #48	; 0x30
 80054ba:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80054bc:	2302      	movs	r3, #2
 80054be:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f107 0214 	add.w	r2, r7, #20
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fc0b 	bl	8006cee <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 fdde 	bl	800709e <SDMMC_CmdSendSCR>
 80054e2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d022      	beq.n	8005530 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	e079      	b.n	80055e2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	f107 020c 	add.w	r2, r7, #12
 8005508:	18d4      	adds	r4, r2, r3
 800550a:	4608      	mov	r0, r1
 800550c:	f001 fb69 	bl	8006be2 <SDIO_ReadFIFO>
 8005510:	4603      	mov	r3, r0
 8005512:	6023      	str	r3, [r4, #0]
      index++;
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	3301      	adds	r3, #1
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800551a:	f7fb feaf 	bl	800127c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d102      	bne.n	8005530 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800552a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800552e:	e058      	b.n	80055e2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005536:	f240 432a 	movw	r3, #1066	; 0x42a
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0d6      	beq.n	80054ee <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2208      	movs	r2, #8
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005556:	2308      	movs	r3, #8
 8005558:	e043      	b.n	80055e2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2202      	movs	r2, #2
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005570:	2302      	movs	r3, #2
 8005572:	e036      	b.n	80055e2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2220      	movs	r2, #32
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800558a:	2320      	movs	r3, #32
 800558c:	e029      	b.n	80055e2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	061a      	lsls	r2, r3, #24
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055a4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0a1b      	lsrs	r3, r3, #8
 80055aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80055ae:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80055ba:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80055bc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	061a      	lsls	r2, r3, #24
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ca:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80055d4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	0e1b      	lsrs	r3, r3, #24
 80055da:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	373c      	adds	r7, #60	; 0x3c
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}

080055ea <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80055ea:	b590      	push	{r4, r7, lr}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e00d      	b.n	800561e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	18d4      	adds	r4, r2, r3
 800560e:	4608      	mov	r0, r1
 8005610:	f001 fae7 	bl	8006be2 <SDIO_ReadFIFO>
 8005614:	4603      	mov	r3, r0
 8005616:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b07      	cmp	r3, #7
 8005622:	d9ee      	bls.n	8005602 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f103 0220 	add.w	r2, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}

0800563a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e00b      	b.n	800566a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f001 facc 	bl	8006bfc <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b07      	cmp	r3, #7
 800566e:	d9f0      	bls.n	8005652 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f103 0220 	add.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e056      	b.n	8005746 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f005 fff2 	bl	800b69c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	ea42 0103 	orr.w	r1, r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0104 	and.w	r1, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005734:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e01d      	b.n	800579c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f005 ffd9 	bl	800b72c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f000 fa1f 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b06      	cmp	r3, #6
 80057c4:	d007      	beq.n	80057d6 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0201 	orr.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e01d      	b.n	800583a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f815 	bl	8005842 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f000 f9d0 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2201      	movs	r2, #1
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fc9a 	bl	80061a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <HAL_TIM_PWM_Start+0x74>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIM_PWM_Start+0x2c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <HAL_TIM_PWM_Start+0x78>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_TIM_PWM_Start+0x30>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_TIM_PWM_Start+0x32>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d007      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40010400 	.word	0x40010400

080058d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e0b4      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	f200 809f 	bhi.w	8005a44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005941 	.word	0x08005941
 8005910:	08005a45 	.word	0x08005a45
 8005914:	08005a45 	.word	0x08005a45
 8005918:	08005a45 	.word	0x08005a45
 800591c:	08005981 	.word	0x08005981
 8005920:	08005a45 	.word	0x08005a45
 8005924:	08005a45 	.word	0x08005a45
 8005928:	08005a45 	.word	0x08005a45
 800592c:	080059c3 	.word	0x080059c3
 8005930:	08005a45 	.word	0x08005a45
 8005934:	08005a45 	.word	0x08005a45
 8005938:	08005a45 	.word	0x08005a45
 800593c:	08005a03 	.word	0x08005a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f9e2 	bl	8005d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	619a      	str	r2, [r3, #24]
      break;
 800597e:	e062      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fa32 	bl	8005df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
      break;
 80059c0:	e041      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fa87 	bl	8005edc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0208 	orr.w	r2, r2, #8
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0204 	bic.w	r2, r2, #4
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	61da      	str	r2, [r3, #28]
      break;
 8005a00:	e021      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fadb 	bl	8005fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	021a      	lsls	r2, r3, #8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	61da      	str	r2, [r3, #28]
      break;
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x18>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0a6      	b.n	8005bc6 <HAL_TIM_ConfigClockSource+0x166>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d067      	beq.n	8005b80 <HAL_TIM_ConfigClockSource+0x120>
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d80b      	bhi.n	8005acc <HAL_TIM_ConfigClockSource+0x6c>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d073      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
 8005ab8:	2b10      	cmp	r3, #16
 8005aba:	d802      	bhi.n	8005ac2 <HAL_TIM_ConfigClockSource+0x62>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d06f      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ac0:	e078      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d06c      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
 8005ac6:	2b30      	cmp	r3, #48	; 0x30
 8005ac8:	d06a      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005aca:	e073      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d00d      	beq.n	8005aec <HAL_TIM_ConfigClockSource+0x8c>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d804      	bhi.n	8005ade <HAL_TIM_ConfigClockSource+0x7e>
 8005ad4:	2b50      	cmp	r3, #80	; 0x50
 8005ad6:	d033      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0xe0>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d041      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005adc:	e06a      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae2:	d066      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x152>
 8005ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae8:	d017      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005aea:	e063      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6899      	ldr	r1, [r3, #8]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f000 fb32 	bl	8006164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e04c      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f000 fb1b 	bl	8006164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3c:	609a      	str	r2, [r3, #8]
      break;
 8005b3e:	e039      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f000 fa8f 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2150      	movs	r1, #80	; 0x50
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fae8 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005b5e:	e029      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f000 faae 	bl	80060ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2160      	movs	r1, #96	; 0x60
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fad8 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005b7e:	e019      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f000 fa6f 	bl	8006070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2140      	movs	r1, #64	; 0x40
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fac8 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e009      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f000 fabf 	bl	800612e <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3d      	ldr	r2, [pc, #244]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3c      	ldr	r2, [pc, #240]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3b      	ldr	r2, [pc, #236]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d027      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d023      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d017      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <TIM_Base_SetConfig+0x128>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <TIM_Base_SetConfig+0x12c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <TIM_Base_SetConfig+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_Base_SetConfig+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_Base_SetConfig+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <TIM_Base_SetConfig+0x13c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d108      	bne.n	8005c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0xf8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d103      	bne.n	8005cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	40001800 	.word	0x40001800
 8005d08:	40001c00 	.word	0x40001c00
 8005d0c:	40002000 	.word	0x40002000

08005d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 0302 	bic.w	r3, r3, #2
 8005d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <TIM_OC1_SetConfig+0xd8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC1_SetConfig+0x64>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <TIM_OC1_SetConfig+0xdc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0308 	bic.w	r3, r3, #8
 8005d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 0304 	bic.w	r3, r3, #4
 8005d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <TIM_OC1_SetConfig+0xd8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC1_SetConfig+0x8e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a14      	ldr	r2, [pc, #80]	; (8005dec <TIM_OC1_SetConfig+0xdc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d111      	bne.n	8005dc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40010400 	.word	0x40010400

08005df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0210 	bic.w	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0320 	bic.w	r3, r3, #32
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a22      	ldr	r2, [pc, #136]	; (8005ed4 <TIM_OC2_SetConfig+0xe4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC2_SetConfig+0x68>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <TIM_OC2_SetConfig+0xe8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10d      	bne.n	8005e74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <TIM_OC2_SetConfig+0xe4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_OC2_SetConfig+0x94>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <TIM_OC2_SetConfig+0xe8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d113      	bne.n	8005eac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400

08005edc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a21      	ldr	r2, [pc, #132]	; (8005fbc <TIM_OC3_SetConfig+0xe0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC3_SetConfig+0x66>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	; (8005fc0 <TIM_OC3_SetConfig+0xe4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10d      	bne.n	8005f5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a16      	ldr	r2, [pc, #88]	; (8005fbc <TIM_OC3_SetConfig+0xe0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_OC3_SetConfig+0x92>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <TIM_OC3_SetConfig+0xe4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d113      	bne.n	8005f96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800600e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a12      	ldr	r2, [pc, #72]	; (8006068 <TIM_OC4_SetConfig+0xa4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_OC4_SetConfig+0x68>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a11      	ldr	r2, [pc, #68]	; (800606c <TIM_OC4_SetConfig+0xa8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d109      	bne.n	8006040 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40010400 	.word	0x40010400

08006070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f023 0201 	bic.w	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800609a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 030a 	bic.w	r3, r3, #10
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b087      	sub	sp, #28
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f023 0210 	bic.w	r2, r3, #16
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	621a      	str	r2, [r3, #32]
}
 8006122:	bf00      	nop
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	f043 0307 	orr.w	r3, r3, #7
 8006150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	609a      	str	r2, [r3, #8]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	021a      	lsls	r2, r3, #8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	431a      	orrs	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4313      	orrs	r3, r2
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	609a      	str	r2, [r3, #8]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2201      	movs	r2, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	43db      	mvns	r3, r3
 80061c6:	401a      	ands	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f003 031f 	and.w	r3, r3, #31
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006202:	2302      	movs	r3, #2
 8006204:	e032      	b.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e03f      	b.n	800630a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f005 faf2 	bl	800b888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa5b 	bl	8006778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_UART_IRQHandler+0x52>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f988 	bl	8006674 <UART_Receive_IT>
      return;
 8006364:	e0cc      	b.n	8006500 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80ab 	beq.w	80064c4 <HAL_UART_IRQHandler+0x1b0>
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_UART_IRQHandler+0x70>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80a0 	beq.w	80064c4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_UART_IRQHandler+0x90>
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	f043 0201 	orr.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_UART_IRQHandler+0xb0>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063bc:	f043 0202 	orr.w	r2, r3, #2
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_UART_IRQHandler+0xd0>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	f043 0204 	orr.w	r2, r3, #4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_UART_IRQHandler+0xf0>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fc:	f043 0208 	orr.w	r2, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d078      	beq.n	80064fe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_UART_IRQHandler+0x112>
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f927 	bl	8006674 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <HAL_UART_IRQHandler+0x13a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d031      	beq.n	80064b2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f870 	bl	8006534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d123      	bne.n	80064aa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006470:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d013      	beq.n	80064a2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_UART_IRQHandler+0x1f4>)
 8006480:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	4618      	mov	r0, r3
 8006488:	f7fb f946 	bl	8001718 <HAL_DMA_Abort_IT>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d016      	beq.n	80064c0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	e00e      	b.n	80064c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f83c 	bl	8006520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e00a      	b.n	80064c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f838 	bl	8006520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	e006      	b.n	80064c0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f834 	bl	8006520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064be:	e01e      	b.n	80064fe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	bf00      	nop
    return;
 80064c2:	e01c      	b.n	80064fe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <HAL_UART_IRQHandler+0x1cc>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f85d 	bl	8006598 <UART_Transmit_IT>
    return;
 80064de:	e00f      	b.n	8006500 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_UART_IRQHandler+0x1ec>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8a5 	bl	8006644 <UART_EndTransmit_IT>
    return;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_UART_IRQHandler+0x1ec>
    return;
 80064fe:	bf00      	nop
  }
}
 8006500:	3720      	adds	r7, #32
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08006571 	.word	0x08006571

0800650c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800654a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff ffc8 	bl	8006520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b21      	cmp	r3, #33	; 0x21
 80065aa:	d144      	bne.n	8006636 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d11a      	bne.n	80065ec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	461a      	mov	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]
 80065de:	e00e      	b.n	80065fe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]
 80065ea:	e008      	b.n	80065fe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6211      	str	r1, [r2, #32]
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29b      	uxth	r3, r3
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4619      	mov	r1, r3
 800660c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10f      	bne.n	8006632 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006620:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006630:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e000      	b.n	8006638 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006636:	2302      	movs	r3, #2
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7ff ff51 	bl	800650c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b22      	cmp	r3, #34	; 0x22
 8006686:	d171      	bne.n	800676c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006690:	d123      	bne.n	80066da <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
 80066bc:	e029      	b.n	8006712 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
 80066d8:	e01b      	b.n	8006712 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6858      	ldr	r0, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ec:	1c59      	adds	r1, r3, #1
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6291      	str	r1, [r2, #40]	; 0x28
 80066f2:	b2c2      	uxtb	r2, r0
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e00c      	b.n	8006712 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	1c58      	adds	r0, r3, #1
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	6288      	str	r0, [r1, #40]	; 0x28
 800670a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29b      	uxth	r3, r3
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	4619      	mov	r1, r3
 8006720:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006722:	2b00      	cmp	r3, #0
 8006724:	d120      	bne.n	8006768 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0220 	bic.w	r2, r2, #32
 8006734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695a      	ldr	r2, [r3, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f003 ffbe 	bl	800a6e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e002      	b.n	800676e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e000      	b.n	800676e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800676c:	2302      	movs	r3, #2
  }
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006778:	b5b0      	push	{r4, r5, r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067b8:	f023 030c 	bic.w	r3, r3, #12
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	430b      	orrs	r3, r1
 80067c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	f040 80e4 	bne.w	80069b0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4aab      	ldr	r2, [pc, #684]	; (8006a9c <UART_SetConfig+0x324>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <UART_SetConfig+0x84>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4aaa      	ldr	r2, [pc, #680]	; (8006aa0 <UART_SetConfig+0x328>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d16c      	bne.n	80068d6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80067fc:	f7fd fa8a 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006800:	4602      	mov	r2, r0
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009a      	lsls	r2, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	fbb2 f3f3 	udiv	r3, r2, r3
 8006816:	4aa3      	ldr	r2, [pc, #652]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	011c      	lsls	r4, r3, #4
 8006820:	f7fd fa78 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006824:	4602      	mov	r2, r0
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009a      	lsls	r2, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	fbb2 f5f3 	udiv	r5, r2, r3
 800683a:	f7fd fa6b 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 800683e:	4602      	mov	r2, r0
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	4a93      	ldr	r2, [pc, #588]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	2264      	movs	r2, #100	; 0x64
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	1aeb      	subs	r3, r5, r3
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	3332      	adds	r3, #50	; 0x32
 8006868:	4a8e      	ldr	r2, [pc, #568]	; (8006aa4 <UART_SetConfig+0x32c>)
 800686a:	fba2 2303 	umull	r2, r3, r2, r3
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006876:	441c      	add	r4, r3
 8006878:	f7fd fa4c 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 800687c:	4602      	mov	r2, r0
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009a      	lsls	r2, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006892:	f7fd fa3f 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006896:	4602      	mov	r2, r0
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009a      	lsls	r2, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ac:	4a7d      	ldr	r2, [pc, #500]	; (8006aa4 <UART_SetConfig+0x32c>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	2264      	movs	r2, #100	; 0x64
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	1aeb      	subs	r3, r5, r3
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	3332      	adds	r3, #50	; 0x32
 80068c0:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <UART_SetConfig+0x32c>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	f003 0207 	and.w	r2, r3, #7
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4422      	add	r2, r4
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	e154      	b.n	8006b80 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80068d6:	f7fd fa09 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80068da:	4602      	mov	r2, r0
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009a      	lsls	r2, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	4a6c      	ldr	r2, [pc, #432]	; (8006aa4 <UART_SetConfig+0x32c>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	011c      	lsls	r4, r3, #4
 80068fa:	f7fd f9f7 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80068fe:	4602      	mov	r2, r0
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009a      	lsls	r2, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fbb2 f5f3 	udiv	r5, r2, r3
 8006914:	f7fd f9ea 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006918:	4602      	mov	r2, r0
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009a      	lsls	r2, r3, #2
 8006922:	441a      	add	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	fbb2 f3f3 	udiv	r3, r2, r3
 800692e:	4a5d      	ldr	r2, [pc, #372]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	2264      	movs	r2, #100	; 0x64
 8006938:	fb02 f303 	mul.w	r3, r2, r3
 800693c:	1aeb      	subs	r3, r5, r3
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	3332      	adds	r3, #50	; 0x32
 8006942:	4a58      	ldr	r2, [pc, #352]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006944:	fba2 2303 	umull	r2, r3, r2, r3
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006950:	441c      	add	r4, r3
 8006952:	f7fd f9cb 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006956:	4602      	mov	r2, r0
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009a      	lsls	r2, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	fbb2 f5f3 	udiv	r5, r2, r3
 800696c:	f7fd f9be 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006970:	4602      	mov	r2, r0
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009a      	lsls	r2, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	4a47      	ldr	r2, [pc, #284]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006988:	fba2 2303 	umull	r2, r3, r2, r3
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2264      	movs	r2, #100	; 0x64
 8006990:	fb02 f303 	mul.w	r3, r2, r3
 8006994:	1aeb      	subs	r3, r5, r3
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	3332      	adds	r3, #50	; 0x32
 800699a:	4a42      	ldr	r2, [pc, #264]	; (8006aa4 <UART_SetConfig+0x32c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 0207 	and.w	r2, r3, #7
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4422      	add	r2, r4
 80069ac:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80069ae:	e0e7      	b.n	8006b80 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a39      	ldr	r2, [pc, #228]	; (8006a9c <UART_SetConfig+0x324>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <UART_SetConfig+0x24c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a38      	ldr	r2, [pc, #224]	; (8006aa0 <UART_SetConfig+0x328>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d171      	bne.n	8006aa8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80069c4:	f7fd f9a6 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009a      	lsls	r2, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	4a31      	ldr	r2, [pc, #196]	; (8006aa4 <UART_SetConfig+0x32c>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	011c      	lsls	r4, r3, #4
 80069e8:	f7fd f994 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009a      	lsls	r2, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8006a02:	f7fd f987 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009a      	lsls	r2, r3, #2
 8006a10:	441a      	add	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1c:	4a21      	ldr	r2, [pc, #132]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	2264      	movs	r2, #100	; 0x64
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	1aeb      	subs	r3, r5, r3
 8006a2c:	011b      	lsls	r3, r3, #4
 8006a2e:	3332      	adds	r3, #50	; 0x32
 8006a30:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a3c:	441c      	add	r4, r3
 8006a3e:	f7fd f969 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006a42:	4602      	mov	r2, r0
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009a      	lsls	r2, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	fbb2 f5f3 	udiv	r5, r2, r3
 8006a58:	f7fd f95c 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009a      	lsls	r2, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	4a0c      	ldr	r2, [pc, #48]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	2264      	movs	r2, #100	; 0x64
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	1aeb      	subs	r3, r5, r3
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	3332      	adds	r3, #50	; 0x32
 8006a86:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <UART_SetConfig+0x32c>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4422      	add	r2, r4
 8006a98:	609a      	str	r2, [r3, #8]
 8006a9a:	e071      	b.n	8006b80 <UART_SetConfig+0x408>
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	40011400 	.word	0x40011400
 8006aa4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006aa8:	f7fd f920 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009a      	lsls	r2, r3, #2
 8006ab6:	441a      	add	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	4a31      	ldr	r2, [pc, #196]	; (8006b88 <UART_SetConfig+0x410>)
 8006ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac8:	095b      	lsrs	r3, r3, #5
 8006aca:	011c      	lsls	r4, r3, #4
 8006acc:	f7fd f90e 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009a      	lsls	r2, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ae6:	f7fd f901 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006aea:	4602      	mov	r2, r0
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009a      	lsls	r2, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	4a21      	ldr	r2, [pc, #132]	; (8006b88 <UART_SetConfig+0x410>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	2264      	movs	r2, #100	; 0x64
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	1aeb      	subs	r3, r5, r3
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	3332      	adds	r3, #50	; 0x32
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <UART_SetConfig+0x410>)
 8006b16:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b20:	441c      	add	r4, r3
 8006b22:	f7fd f8e3 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006b26:	4602      	mov	r2, r0
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009a      	lsls	r2, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b3c:	f7fd f8d6 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8006b40:	4602      	mov	r2, r0
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009a      	lsls	r2, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <UART_SetConfig+0x410>)
 8006b58:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2264      	movs	r2, #100	; 0x64
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
 8006b64:	1aeb      	subs	r3, r5, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <UART_SetConfig+0x410>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4422      	add	r2, r4
 8006b7c:	609a      	str	r2, [r3, #8]
}
 8006b7e:	e7ff      	b.n	8006b80 <UART_SetConfig+0x408>
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bdb0      	pop	{r4, r5, r7, pc}
 8006b88:	51eb851f 	.word	0x51eb851f

08006b8c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	f107 001c 	add.w	r0, r7, #28
 8006b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006ba2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006ba6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006baa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006bae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006bb2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006bb6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006bc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	b004      	add	sp, #16
 8006be0:	4770      	bx	lr

08006be2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2203      	movs	r2, #3
 8006c2a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0303 	and.w	r3, r3, #3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b085      	sub	sp, #20
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c74:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c7a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006c90:	f023 030f 	bic.w	r3, r3, #15
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	b2db      	uxtb	r3, r3
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
}  
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d14:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d1a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0

}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b088      	sub	sp, #32
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d58:	2310      	movs	r3, #16
 8006d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d68:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d6a:	f107 0308 	add.w	r3, r7, #8
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ff70 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	2110      	movs	r1, #16
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fa63 	bl	8007248 <SDMMC_GetCmdResp1>
 8006d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d84:	69fb      	ldr	r3, [r7, #28]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b088      	sub	sp, #32
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006da0:	2311      	movs	r3, #17
 8006da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff4c 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	2111      	movs	r1, #17
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa3f 	bl	8007248 <SDMMC_GetCmdResp1>
 8006dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006de8:	2312      	movs	r3, #18
 8006dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff ff28 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	2112      	movs	r1, #18
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa1b 	bl	8007248 <SDMMC_GetCmdResp1>
 8006e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e14:	69fb      	ldr	r3, [r7, #28]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b088      	sub	sp, #32
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006e30:	2318      	movs	r3, #24
 8006e32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e40:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e42:	f107 0308 	add.w	r3, r7, #8
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff ff04 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e52:	2118      	movs	r1, #24
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f9f7 	bl	8007248 <SDMMC_GetCmdResp1>
 8006e5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3720      	adds	r7, #32
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b088      	sub	sp, #32
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006e78:	2319      	movs	r3, #25
 8006e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e88:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fee0 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9a:	2119      	movs	r1, #25
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f9d3 	bl	8007248 <SDMMC_GetCmdResp1>
 8006ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ec0:	230c      	movs	r3, #12
 8006ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ec4:	2340      	movs	r3, #64	; 0x40
 8006ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ed0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7ff febc 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8006ede:	4a05      	ldr	r2, [pc, #20]	; (8006ef4 <SDMMC_CmdStopTransfer+0x44>)
 8006ee0:	210c      	movs	r1, #12
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f9b0 	bl	8007248 <SDMMC_GetCmdResp1>
 8006ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eea:	69fb      	ldr	r3, [r7, #28]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	05f5e100 	.word	0x05f5e100

08006ef8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006f0c:	2307      	movs	r3, #7
 8006f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f1c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4619      	mov	r1, r3
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff fe96 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f2e:	2107      	movs	r1, #7
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f989 	bl	8007248 <SDMMC_GetCmdResp1>
 8006f36:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	; 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f62:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f64:	f107 0308 	add.w	r3, r7, #8
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7ff fe73 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f93f 	bl	80071f4 <SDMMC_GetCmdError>
 8006f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f78:	69fb      	ldr	r3, [r7, #28]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b088      	sub	sp, #32
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006f8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006f94:	2308      	movs	r3, #8
 8006f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f98:	2340      	movs	r3, #64	; 0x40
 8006f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fa4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fe52 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb10 	bl	80075d8 <SDMMC_GetCmdResp7>
 8006fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fba:	69fb      	ldr	r3, [r7, #28]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006fd6:	2337      	movs	r3, #55	; 0x37
 8006fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fe8:	f107 0308 	add.w	r3, r7, #8
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fe31 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff8:	2137      	movs	r1, #55	; 0x37
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f924 	bl	8007248 <SDMMC_GetCmdResp1>
 8007000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007002:	69fb      	ldr	r3, [r7, #28]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3720      	adds	r7, #32
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007026:	2329      	movs	r3, #41	; 0x29
 8007028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800702a:	2340      	movs	r3, #64	; 0x40
 800702c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007036:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fe09 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa25 	bl	8007494 <SDMMC_GetCmdResp3>
 800704a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800704c:	69fb      	ldr	r3, [r7, #28]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b088      	sub	sp, #32
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007060:	2300      	movs	r3, #0
 8007062:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007068:	2306      	movs	r3, #6
 800706a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007078:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fde8 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	2106      	movs	r1, #6
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8db 	bl	8007248 <SDMMC_GetCmdResp1>
 8007092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007094:	69fb      	ldr	r3, [r7, #28]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b088      	sub	sp, #32
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80070ae:	2333      	movs	r3, #51	; 0x33
 80070b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070b2:	2340      	movs	r3, #64	; 0x40
 80070b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070be:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fdc5 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	2133      	movs	r1, #51	; 0x33
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8b8 	bl	8007248 <SDMMC_GetCmdResp1>
 80070d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070da:	69fb      	ldr	r3, [r7, #28]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80070f4:	2302      	movs	r3, #2
 80070f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80070f8:	23c0      	movs	r3, #192	; 0xc0
 80070fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007104:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fda2 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f97e 	bl	8007414 <SDMMC_GetCmdResp2>
 8007118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800711a:	69fb      	ldr	r3, [r7, #28]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007136:	2309      	movs	r3, #9
 8007138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800713a:	23c0      	movs	r3, #192	; 0xc0
 800713c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007146:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff fd81 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f95d 	bl	8007414 <SDMMC_GetCmdResp2>
 800715a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800715c:	69fb      	ldr	r3, [r7, #28]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007178:	2303      	movs	r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007188:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff fd60 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	2103      	movs	r1, #3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f9ae 	bl	80074fc <SDMMC_GetCmdResp6>
 80071a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a2:	69fb      	ldr	r3, [r7, #28]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80071be:	230d      	movs	r3, #13
 80071c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071c6:	2300      	movs	r3, #0
 80071c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ce:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fd3d 	bl	8006c56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80071dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e0:	210d      	movs	r1, #13
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f830 	bl	8007248 <SDMMC_GetCmdResp1>
 80071e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ea:	69fb      	ldr	r3, [r7, #28]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80071f4:	b490      	push	{r4, r7}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071fc:	4b10      	ldr	r3, [pc, #64]	; (8007240 <SDMMC_GetCmdError+0x4c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a10      	ldr	r2, [pc, #64]	; (8007244 <SDMMC_GetCmdError+0x50>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	0a5b      	lsrs	r3, r3, #9
 8007208:	f241 3288 	movw	r2, #5000	; 0x1388
 800720c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007210:	4623      	mov	r3, r4
 8007212:	1e5c      	subs	r4, r3, #1
 8007214:	2b00      	cmp	r3, #0
 8007216:	d102      	bne.n	800721e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007218:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800721c:	e00a      	b.n	8007234 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f2      	beq.n	8007210 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bc90      	pop	{r4, r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	2000011c 	.word	0x2000011c
 8007244:	10624dd3 	.word	0x10624dd3

08007248 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	460b      	mov	r3, r1
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007256:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <SDMMC_GetCmdResp1+0x1c0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a6c      	ldr	r2, [pc, #432]	; (800740c <SDMMC_GetCmdResp1+0x1c4>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	0a5b      	lsrs	r3, r3, #9
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007268:	4623      	mov	r3, r4
 800726a:	1e5c      	subs	r4, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007270:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007274:	e0c3      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f2      	beq.n	8007268 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	f003 0304 	and.w	r3, r3, #4
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2204      	movs	r2, #4
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007294:	2304      	movs	r3, #4
 8007296:	e0b2      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e0a7      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fcfb 	bl	8006caa <SDIO_GetCommandResponse>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d001      	beq.n	80072c2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072be:	2301      	movs	r3, #1
 80072c0:	e09d      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80072c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80072ca:	2100      	movs	r1, #0
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fcf9 	bl	8006cc4 <SDIO_GetResponse>
 80072d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4b4e      	ldr	r3, [pc, #312]	; (8007410 <SDMMC_GetCmdResp1+0x1c8>)
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80072de:	2300      	movs	r3, #0
 80072e0:	e08d      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da02      	bge.n	80072ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80072e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ec:	e087      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	e080      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007306:	2380      	movs	r3, #128	; 0x80
 8007308:	e079      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007318:	e071      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007328:	e069      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007338:	e061      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007348:	e059      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007358:	e051      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007368:	e049      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007378:	e041      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8007384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007388:	e039      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007398:	e031      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80073a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073a8:	e029      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80073b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073b8:	e021      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80073c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073c8:	e019      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80073d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073d8:	e011      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80073e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073e8:	e009      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80073f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80073f8:	e001      	b.n	80073fe <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80073fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80073fe:	4618      	mov	r0, r3
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}
 8007406:	bf00      	nop
 8007408:	2000011c 	.word	0x2000011c
 800740c:	10624dd3 	.word	0x10624dd3
 8007410:	fdffe008 	.word	0xfdffe008

08007414 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007414:	b490      	push	{r4, r7}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800741c:	4b1b      	ldr	r3, [pc, #108]	; (800748c <SDMMC_GetCmdResp2+0x78>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <SDMMC_GetCmdResp2+0x7c>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	0a5b      	lsrs	r3, r3, #9
 8007428:	f241 3288 	movw	r2, #5000	; 0x1388
 800742c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007430:	4623      	mov	r3, r4
 8007432:	1e5c      	subs	r4, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800743c:	e020      	b.n	8007480 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007442:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f2      	beq.n	8007430 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f003 0304 	and.w	r3, r3, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2204      	movs	r2, #4
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800745c:	2304      	movs	r3, #4
 800745e:	e00f      	b.n	8007480 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007472:	2301      	movs	r3, #1
 8007474:	e004      	b.n	8007480 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bc90      	pop	{r4, r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	2000011c 	.word	0x2000011c
 8007490:	10624dd3 	.word	0x10624dd3

08007494 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007494:	b490      	push	{r4, r7}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800749c:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <SDMMC_GetCmdResp3+0x60>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <SDMMC_GetCmdResp3+0x64>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	0a5b      	lsrs	r3, r3, #9
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80074b0:	4623      	mov	r3, r4
 80074b2:	1e5c      	subs	r4, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d102      	bne.n	80074be <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074bc:	e015      	b.n	80074ea <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f2      	beq.n	80074b0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2204      	movs	r2, #4
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074dc:	2304      	movs	r3, #4
 80074de:	e004      	b.n	80074ea <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc90      	pop	{r4, r7}
 80074f2:	4770      	bx	lr
 80074f4:	2000011c 	.word	0x2000011c
 80074f8:	10624dd3 	.word	0x10624dd3

080074fc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80074fc:	b590      	push	{r4, r7, lr}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	460b      	mov	r3, r1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800750a:	4b31      	ldr	r3, [pc, #196]	; (80075d0 <SDMMC_GetCmdResp6+0xd4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a31      	ldr	r2, [pc, #196]	; (80075d4 <SDMMC_GetCmdResp6+0xd8>)
 8007510:	fba2 2303 	umull	r2, r3, r2, r3
 8007514:	0a5b      	lsrs	r3, r3, #9
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800751e:	4623      	mov	r3, r4
 8007520:	1e5c      	subs	r4, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007526:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800752a:	e04c      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0f2      	beq.n	800751e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2204      	movs	r2, #4
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800754a:	2304      	movs	r3, #4
 800754c:	e03b      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007560:	2301      	movs	r3, #1
 8007562:	e030      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff fba0 	bl	8006caa <SDIO_GetCommandResponse>
 800756a:	4603      	mov	r3, r0
 800756c:	461a      	mov	r2, r3
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	4293      	cmp	r3, r2
 8007572:	d001      	beq.n	8007578 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007574:	2301      	movs	r3, #1
 8007576:	e026      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fb9e 	bl	8006cc4 <SDIO_GetResponse>
 8007588:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	0c1b      	lsrs	r3, r3, #16
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
 80075a0:	e011      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075b0:	e009      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075c0:	e001      	b.n	80075c6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	2000011c 	.word	0x2000011c
 80075d4:	10624dd3 	.word	0x10624dd3

080075d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80075d8:	b490      	push	{r4, r7}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075e0:	4b18      	ldr	r3, [pc, #96]	; (8007644 <SDMMC_GetCmdResp7+0x6c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a18      	ldr	r2, [pc, #96]	; (8007648 <SDMMC_GetCmdResp7+0x70>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	0a5b      	lsrs	r3, r3, #9
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80075f4:	4623      	mov	r3, r4
 80075f6:	1e5c      	subs	r4, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007600:	e01a      	b.n	8007638 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0f2      	beq.n	80075f4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2240      	movs	r2, #64	; 0x40
 800761e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007620:	2304      	movs	r3, #4
 8007622:	e009      	b.n	8007638 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2240      	movs	r2, #64	; 0x40
 8007634:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007636:	2300      	movs	r3, #0
  
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bc90      	pop	{r4, r7}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	2000011c 	.word	0x2000011c
 8007648:	10624dd3 	.word	0x10624dd3

0800764c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800764c:	b084      	sub	sp, #16
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	f107 001c 	add.w	r0, r7, #28
 800765a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2b01      	cmp	r3, #1
 8007662:	d122      	bne.n	80076aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800768c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768e:	2b01      	cmp	r3, #1
 8007690:	d105      	bne.n	800769e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fa7c 	bl	8008b9c <USB_CoreReset>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e01a      	b.n	80076e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fa70 	bl	8008b9c <USB_CoreReset>
 80076bc:	4603      	mov	r3, r0
 80076be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80076c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
 80076d2:	e005      	b.n	80076e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d10b      	bne.n	80076fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f043 0206 	orr.w	r2, r3, #6
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f043 0220 	orr.w	r2, r3, #32
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800770a:	b004      	add	sp, #16
 800770c:	4770      	bx	lr
	...

08007710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d165      	bne.n	80077f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4a41      	ldr	r2, [pc, #260]	; (800782c <USB_SetTurnaroundTime+0x11c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d906      	bls.n	800773a <USB_SetTurnaroundTime+0x2a>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4a40      	ldr	r2, [pc, #256]	; (8007830 <USB_SetTurnaroundTime+0x120>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d802      	bhi.n	800773a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007734:	230f      	movs	r3, #15
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e062      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4a3c      	ldr	r2, [pc, #240]	; (8007830 <USB_SetTurnaroundTime+0x120>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d906      	bls.n	8007750 <USB_SetTurnaroundTime+0x40>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4a3b      	ldr	r2, [pc, #236]	; (8007834 <USB_SetTurnaroundTime+0x124>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d802      	bhi.n	8007750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800774a:	230e      	movs	r3, #14
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e057      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4a38      	ldr	r2, [pc, #224]	; (8007834 <USB_SetTurnaroundTime+0x124>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d906      	bls.n	8007766 <USB_SetTurnaroundTime+0x56>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4a37      	ldr	r2, [pc, #220]	; (8007838 <USB_SetTurnaroundTime+0x128>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d802      	bhi.n	8007766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007760:	230d      	movs	r3, #13
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	e04c      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4a33      	ldr	r2, [pc, #204]	; (8007838 <USB_SetTurnaroundTime+0x128>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d906      	bls.n	800777c <USB_SetTurnaroundTime+0x6c>
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4a32      	ldr	r2, [pc, #200]	; (800783c <USB_SetTurnaroundTime+0x12c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d802      	bhi.n	800777c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007776:	230c      	movs	r3, #12
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	e041      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a2f      	ldr	r2, [pc, #188]	; (800783c <USB_SetTurnaroundTime+0x12c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d906      	bls.n	8007792 <USB_SetTurnaroundTime+0x82>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a2e      	ldr	r2, [pc, #184]	; (8007840 <USB_SetTurnaroundTime+0x130>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d802      	bhi.n	8007792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800778c:	230b      	movs	r3, #11
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e036      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	4a2a      	ldr	r2, [pc, #168]	; (8007840 <USB_SetTurnaroundTime+0x130>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d906      	bls.n	80077a8 <USB_SetTurnaroundTime+0x98>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4a29      	ldr	r2, [pc, #164]	; (8007844 <USB_SetTurnaroundTime+0x134>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d802      	bhi.n	80077a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80077a2:	230a      	movs	r3, #10
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	e02b      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4a26      	ldr	r2, [pc, #152]	; (8007844 <USB_SetTurnaroundTime+0x134>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d906      	bls.n	80077be <USB_SetTurnaroundTime+0xae>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4a25      	ldr	r2, [pc, #148]	; (8007848 <USB_SetTurnaroundTime+0x138>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d802      	bhi.n	80077be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80077b8:	2309      	movs	r3, #9
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e020      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <USB_SetTurnaroundTime+0x138>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d906      	bls.n	80077d4 <USB_SetTurnaroundTime+0xc4>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4a20      	ldr	r2, [pc, #128]	; (800784c <USB_SetTurnaroundTime+0x13c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d802      	bhi.n	80077d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80077ce:	2308      	movs	r3, #8
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e015      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a1d      	ldr	r2, [pc, #116]	; (800784c <USB_SetTurnaroundTime+0x13c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d906      	bls.n	80077ea <USB_SetTurnaroundTime+0xda>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <USB_SetTurnaroundTime+0x140>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d802      	bhi.n	80077ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80077e4:	2307      	movs	r3, #7
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e00a      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80077ea:	2306      	movs	r3, #6
 80077ec:	617b      	str	r3, [r7, #20]
 80077ee:	e007      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80077f6:	2309      	movs	r3, #9
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	e001      	b.n	8007800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077fc:	2309      	movs	r3, #9
 80077fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	00d8acbf 	.word	0x00d8acbf
 8007830:	00e4e1bf 	.word	0x00e4e1bf
 8007834:	00f423ff 	.word	0x00f423ff
 8007838:	0106737f 	.word	0x0106737f
 800783c:	011a499f 	.word	0x011a499f
 8007840:	01312cff 	.word	0x01312cff
 8007844:	014ca43f 	.word	0x014ca43f
 8007848:	016e35ff 	.word	0x016e35ff
 800784c:	01a6ab1f 	.word	0x01a6ab1f
 8007850:	01e847ff 	.word	0x01e847ff

08007854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f043 0201 	orr.w	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f023 0201 	bic.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d106      	bne.n	80078c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	e00b      	b.n	80078dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	e001      	b.n	80078dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e003      	b.n	80078e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80078dc:	2032      	movs	r0, #50	; 0x32
 80078de:	f7f9 fcd9 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078ec:	b084      	sub	sp, #16
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b086      	sub	sp, #24
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	e009      	b.n	8007920 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3340      	adds	r3, #64	; 0x40
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3301      	adds	r3, #1
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b0e      	cmp	r3, #14
 8007924:	d9f2      	bls.n	800790c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d112      	bne.n	8007952 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	639a      	str	r2, [r3, #56]	; 0x38
 8007950:	e00b      	b.n	800796a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007970:	461a      	mov	r2, r3
 8007972:	2300      	movs	r3, #0
 8007974:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797c:	4619      	mov	r1, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007984:	461a      	mov	r2, r3
 8007986:	680b      	ldr	r3, [r1, #0]
 8007988:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10c      	bne.n	80079aa <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f961 	bl	8007c60 <USB_SetDevSpeed>
 800799e:	e008      	b.n	80079b2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f95c 	bl	8007c60 <USB_SetDevSpeed>
 80079a8:	e003      	b.n	80079b2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079aa:	2103      	movs	r1, #3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f957 	bl	8007c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079b2:	2110      	movs	r1, #16
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f90b 	bl	8007bd0 <USB_FlushTxFifo>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f929 	bl	8007c1c <USB_FlushRxFifo>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079da:	461a      	mov	r2, r3
 80079dc:	2300      	movs	r3, #0
 80079de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e6:	461a      	mov	r2, r3
 80079e8:	2300      	movs	r3, #0
 80079ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f2:	461a      	mov	r2, r3
 80079f4:	2300      	movs	r3, #0
 80079f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	e043      	b.n	8007a86 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a14:	d118      	bne.n	8007a48 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e013      	b.n	8007a5a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	e008      	b.n	8007a5a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a66:	461a      	mov	r2, r3
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	3301      	adds	r3, #1
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3b7      	bcc.n	80079fe <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	e043      	b.n	8007b1c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aaa:	d118      	bne.n	8007ade <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	e013      	b.n	8007af0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e008      	b.n	8007af0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	461a      	mov	r2, r3
 8007aec:	2300      	movs	r3, #0
 8007aee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	461a      	mov	r2, r3
 8007afe:	2300      	movs	r3, #0
 8007b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3b7      	bcc.n	8007a94 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b36:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d111      	bne.n	8007b62 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b44:	461a      	mov	r2, r3
 8007b46:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <USB_DevInit+0x2dc>)
 8007b48:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b5c:	f043 0303 	orr.w	r3, r3, #3
 8007b60:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b6e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f043 0210 	orr.w	r2, r3, #16
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	4b11      	ldr	r3, [pc, #68]	; (8007bcc <USB_DevInit+0x2e0>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	f043 0208 	orr.w	r2, r3, #8
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d107      	bne.n	8007bb6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bae:	f043 0304 	orr.w	r3, r3, #4
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bc2:	b004      	add	sp, #16
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	00800100 	.word	0x00800100
 8007bcc:	803c3800 	.word	0x803c3800

08007bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	019b      	lsls	r3, r3, #6
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <USB_FlushTxFifo+0x48>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d901      	bls.n	8007bfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e006      	b.n	8007c0a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d0f0      	beq.n	8007bea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	00030d40 	.word	0x00030d40

08007c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <USB_FlushRxFifo+0x40>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d901      	bls.n	8007c40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e006      	b.n	8007c4e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d0f0      	beq.n	8007c2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c80:	4313      	orrs	r3, r2
 8007c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b087      	sub	sp, #28
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0306 	and.w	r3, r3, #6
 8007caa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d102      	bne.n	8007cb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]
 8007cb6:	e00a      	b.n	8007cce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d002      	beq.n	8007cc4 <USB_GetDevSpeed+0x32>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d102      	bne.n	8007cca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	75fb      	strb	r3, [r7, #23]
 8007cc8:	e001      	b.n	8007cce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cca:	230f      	movs	r3, #15
 8007ccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d13a      	bne.n	8007d6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	2101      	movs	r1, #1
 8007d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	68f9      	ldr	r1, [r7, #12]
 8007d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d155      	bne.n	8007ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	78db      	ldrb	r3, [r3, #3]
 8007d4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	059b      	lsls	r3, r3, #22
 8007d52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d54:	4313      	orrs	r3, r2
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e036      	b.n	8007ddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	2101      	movs	r1, #1
 8007d80:	fa01 f303 	lsl.w	r3, r1, r3
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11a      	bne.n	8007ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	78db      	ldrb	r3, [r3, #3]
 8007dc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d135      	bne.n	8007e74 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	43db      	mvns	r3, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e28:	4013      	ands	r3, r2
 8007e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	0159      	lsls	r1, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	440b      	add	r3, r1
 8007e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4b1f      	ldr	r3, [pc, #124]	; (8007eec <USB_DeactivateEndpoint+0x100>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	e034      	b.n	8007ede <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f303 	lsl.w	r3, r1, r3
 8007e8a:	041b      	lsls	r3, r3, #16
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e94:	4013      	ands	r3, r2
 8007e96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007eae:	041b      	lsls	r3, r3, #16
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb8:	4013      	ands	r3, r2
 8007eba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	0159      	lsls	r1, r3, #5
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	440b      	add	r3, r1
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <USB_DeactivateEndpoint+0x104>)
 8007eda:	4013      	ands	r3, r2
 8007edc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	ec337800 	.word	0xec337800
 8007ef0:	eff37800 	.word	0xeff37800

08007ef4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	f040 815c 	bne.w	80081ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d132      	bne.n	8007f84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	0151      	lsls	r1, r2, #5
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	440a      	add	r2, r1
 8007f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f7c:	0cdb      	lsrs	r3, r3, #19
 8007f7e:	04db      	lsls	r3, r3, #19
 8007f80:	6113      	str	r3, [r2, #16]
 8007f82:	e074      	b.n	800806e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f9e:	0cdb      	lsrs	r3, r3, #19
 8007fa0:	04db      	lsls	r3, r3, #19
 8007fa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	0151      	lsls	r1, r2, #5
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	440a      	add	r2, r1
 8007fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6959      	ldr	r1, [r3, #20]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	440b      	add	r3, r1
 8007fe0:	1e59      	subs	r1, r3, #1
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fea:	04d9      	lsls	r1, r3, #19
 8007fec:	4b9d      	ldr	r3, [pc, #628]	; (8008264 <USB_EPStartXfer+0x370>)
 8007fee:	400b      	ands	r3, r1
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	0148      	lsls	r0, r1, #5
 8007ff4:	69f9      	ldr	r1, [r7, #28]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008016:	69b9      	ldr	r1, [r7, #24]
 8008018:	0148      	lsls	r0, r1, #5
 800801a:	69f9      	ldr	r1, [r7, #28]
 800801c:	4401      	add	r1, r0
 800801e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008022:	4313      	orrs	r3, r2
 8008024:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	78db      	ldrb	r3, [r3, #3]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d11f      	bne.n	800806e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	69fa      	ldr	r2, [r7, #28]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008048:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800804c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800806c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d14b      	bne.n	800810c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	461a      	mov	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	78db      	ldrb	r3, [r3, #3]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d128      	bne.n	80080ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d110      	bne.n	80080ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	e00f      	b.n	80080ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008104:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e12f      	b.n	800836c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008126:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800812a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	78db      	ldrb	r3, [r3, #3]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d015      	beq.n	8008160 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8117 	beq.w	800836c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	2101      	movs	r1, #1
 8008150:	fa01 f303 	lsl.w	r3, r1, r3
 8008154:	69f9      	ldr	r1, [r7, #28]
 8008156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800815a:	4313      	orrs	r3, r2
 800815c:	634b      	str	r3, [r1, #52]	; 0x34
 800815e:	e105      	b.n	800836c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816c:	2b00      	cmp	r3, #0
 800816e:	d110      	bne.n	8008192 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	e00f      	b.n	80081b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	68d9      	ldr	r1, [r3, #12]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	b298      	uxth	r0, r3
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4603      	mov	r3, r0
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 fa2b 	bl	8008622 <USB_WritePacket>
 80081cc:	e0ce      	b.n	800836c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e8:	0cdb      	lsrs	r3, r3, #19
 80081ea:	04db      	lsls	r3, r3, #19
 80081ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	0151      	lsls	r1, r2, #5
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	440a      	add	r2, r1
 8008204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008208:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800820c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008210:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d126      	bne.n	8008268 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008230:	69b9      	ldr	r1, [r7, #24]
 8008232:	0148      	lsls	r0, r1, #5
 8008234:	69f9      	ldr	r1, [r7, #28]
 8008236:	4401      	add	r1, r0
 8008238:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800823c:	4313      	orrs	r3, r2
 800823e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800825a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800825e:	6113      	str	r3, [r2, #16]
 8008260:	e036      	b.n	80082d0 <USB_EPStartXfer+0x3dc>
 8008262:	bf00      	nop
 8008264:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	695a      	ldr	r2, [r3, #20]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	4413      	add	r3, r2
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	fbb2 f3f3 	udiv	r3, r2, r3
 800827c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	8afb      	ldrh	r3, [r7, #22]
 800828e:	04d9      	lsls	r1, r3, #19
 8008290:	4b39      	ldr	r3, [pc, #228]	; (8008378 <USB_EPStartXfer+0x484>)
 8008292:	400b      	ands	r3, r1
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	0148      	lsls	r0, r1, #5
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	4401      	add	r1, r0
 800829c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082a0:	4313      	orrs	r3, r2
 80082a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	8af9      	ldrh	r1, [r7, #22]
 80082b8:	fb01 f303 	mul.w	r3, r1, r3
 80082bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082c0:	69b9      	ldr	r1, [r7, #24]
 80082c2:	0148      	lsls	r0, r1, #5
 80082c4:	69f9      	ldr	r1, [r7, #28]
 80082c6:	4401      	add	r1, r0
 80082c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082cc:	4313      	orrs	r3, r2
 80082ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10d      	bne.n	80082f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d009      	beq.n	80082f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	68d9      	ldr	r1, [r3, #12]
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ee:	460a      	mov	r2, r1
 80082f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	78db      	ldrb	r3, [r3, #3]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d128      	bne.n	800834c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d110      	bne.n	800832c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	0151      	lsls	r1, r2, #5
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	440a      	add	r2, r1
 8008320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	e00f      	b.n	800834c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	440a      	add	r2, r1
 8008342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008366:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800836a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	1ff80000 	.word	0x1ff80000

0800837c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	2b01      	cmp	r3, #1
 800839a:	f040 80cd 	bne.w	8008538 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d132      	bne.n	800840c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	0151      	lsls	r1, r2, #5
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	440a      	add	r2, r1
 80083e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008404:	0cdb      	lsrs	r3, r3, #19
 8008406:	04db      	lsls	r3, r3, #19
 8008408:	6113      	str	r3, [r2, #16]
 800840a:	e04e      	b.n	80084aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008426:	0cdb      	lsrs	r3, r3, #19
 8008428:	04db      	lsls	r3, r3, #19
 800842a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008446:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800844a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800844e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	429a      	cmp	r2, r3
 800845a:	d903      	bls.n	8008464 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800849a:	6939      	ldr	r1, [r7, #16]
 800849c:	0148      	lsls	r0, r1, #5
 800849e:	6979      	ldr	r1, [r7, #20]
 80084a0:	4401      	add	r1, r0
 80084a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084a6:	4313      	orrs	r3, r2
 80084a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d11e      	bne.n	80084ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c4:	461a      	mov	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	0151      	lsls	r1, r2, #5
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	440a      	add	r2, r1
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e092      	b.n	8008614 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800850c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d07e      	beq.n	8008614 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 030f 	and.w	r3, r3, #15
 8008526:	2101      	movs	r1, #1
 8008528:	fa01 f303 	lsl.w	r3, r1, r3
 800852c:	6979      	ldr	r1, [r7, #20]
 800852e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008532:	4313      	orrs	r3, r2
 8008534:	634b      	str	r3, [r1, #52]	; 0x34
 8008536:	e06d      	b.n	8008614 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	440a      	add	r2, r1
 800854e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008552:	0cdb      	lsrs	r3, r3, #19
 8008554:	04db      	lsls	r3, r3, #19
 8008556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800857a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085c2:	6939      	ldr	r1, [r7, #16]
 80085c4:	0148      	lsls	r0, r1, #5
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	4401      	add	r1, r0
 80085ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ce:	4313      	orrs	r3, r2
 80085d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d10d      	bne.n	80085f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	68d9      	ldr	r1, [r3, #12]
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085f0:	460a      	mov	r2, r1
 80085f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008612:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008622:	b480      	push	{r7}
 8008624:	b089      	sub	sp, #36	; 0x24
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	460b      	mov	r3, r1
 8008632:	71fb      	strb	r3, [r7, #7]
 8008634:	4613      	mov	r3, r2
 8008636:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008640:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008644:	2b00      	cmp	r3, #0
 8008646:	d11a      	bne.n	800867e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008648:	88bb      	ldrh	r3, [r7, #4]
 800864a:	3303      	adds	r3, #3
 800864c:	089b      	lsrs	r3, r3, #2
 800864e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	e00f      	b.n	8008676 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	031a      	lsls	r2, r3, #12
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008662:	461a      	mov	r2, r3
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6013      	str	r3, [r2, #0]
      pSrc++;
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	3304      	adds	r3, #4
 800866e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	3301      	adds	r3, #1
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	429a      	cmp	r2, r3
 800867c:	d3eb      	bcc.n	8008656 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3724      	adds	r7, #36	; 0x24
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800868c:	b480      	push	{r7}
 800868e:	b089      	sub	sp, #36	; 0x24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80086a2:	88fb      	ldrh	r3, [r7, #6]
 80086a4:	3303      	adds	r3, #3
 80086a6:	089b      	lsrs	r3, r3, #2
 80086a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
 80086ae:	e00b      	b.n	80086c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	3304      	adds	r3, #4
 80086c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	3301      	adds	r3, #1
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d3ef      	bcc.n	80086b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80086d0:	69fb      	ldr	r3, [r7, #28]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3724      	adds	r7, #36	; 0x24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	785b      	ldrb	r3, [r3, #1]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d12c      	bne.n	8008754 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	db12      	blt.n	8008732 <USB_EPSetStall+0x54>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00f      	beq.n	8008732 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800872c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008730:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	0151      	lsls	r1, r2, #5
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	440a      	add	r2, r1
 8008748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800874c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	e02b      	b.n	80087ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db12      	blt.n	800878c <USB_EPSetStall+0xae>
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00f      	beq.n	800878c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	440a      	add	r2, r1
 8008782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800878a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	0151      	lsls	r1, r2, #5
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	440a      	add	r2, r1
 80087a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d128      	bne.n	8008828 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	0151      	lsls	r1, r2, #5
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	440a      	add	r2, r1
 80087ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	78db      	ldrb	r3, [r3, #3]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d003      	beq.n	8008806 <USB_EPClearStall+0x4c>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	78db      	ldrb	r3, [r3, #3]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d138      	bne.n	8008878 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	0151      	lsls	r1, r2, #5
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	440a      	add	r2, r1
 800881c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e027      	b.n	8008878 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008846:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	78db      	ldrb	r3, [r3, #3]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d003      	beq.n	8008858 <USB_EPClearStall+0x9e>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	78db      	ldrb	r3, [r3, #3]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d10f      	bne.n	8008878 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008876:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	011b      	lsls	r3, r3, #4
 80088b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c0:	4313      	orrs	r3, r2
 80088c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ec:	f023 0302 	bic.w	r3, r3, #2
 80088f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80088f2:	2003      	movs	r0, #3
 80088f4:	f7f8 fcce 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800891c:	f043 0302 	orr.w	r3, r3, #2
 8008920:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008922:	2003      	movs	r0, #3
 8008924:	f7f8 fcb6 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4013      	ands	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	4013      	ands	r3, r2
 800897a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	0c1b      	lsrs	r3, r3, #16
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4013      	ands	r3, r2
 80089ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	b29b      	uxth	r3, r3
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	4013      	ands	r3, r2
 80089ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089ee:	68bb      	ldr	r3, [r7, #8]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2c:	01db      	lsls	r3, r3, #7
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4013      	ands	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	f003 0301 	and.w	r3, r3, #1
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a92:	f023 0307 	bic.w	r3, r3, #7
 8008a96:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f003 0306 	and.w	r3, r3, #6
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d109      	bne.n	8008abc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab6:	f043 0303 	orr.w	r3, r3, #3
 8008aba:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ace:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
	...

08008ae0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	333c      	adds	r3, #60	; 0x3c
 8008af6:	3304      	adds	r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4a26      	ldr	r2, [pc, #152]	; (8008b98 <USB_EP0_OutStart+0xb8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d90a      	bls.n	8008b1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b14:	d101      	bne.n	8008b1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e037      	b.n	8008b8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	461a      	mov	r2, r3
 8008b22:	2300      	movs	r3, #0
 8008b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f043 0318 	orr.w	r3, r3, #24
 8008b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10f      	bne.n	8008b88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6e:	461a      	mov	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	4f54300a 	.word	0x4f54300a

08008b9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a13      	ldr	r2, [pc, #76]	; (8008c00 <USB_CoreReset+0x64>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e01b      	b.n	8008bf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	daf2      	bge.n	8008ba8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f043 0201 	orr.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a09      	ldr	r2, [pc, #36]	; (8008c00 <USB_CoreReset+0x64>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d901      	bls.n	8008be4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e006      	b.n	8008bf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d0f0      	beq.n	8008bd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	00030d40 	.word	0x00030d40

08008c04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7c1b      	ldrb	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d115      	bne.n	8008c48 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c20:	2202      	movs	r2, #2
 8008c22:	2181      	movs	r1, #129	; 0x81
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f003 fa0a 	bl	800c03e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c34:	2202      	movs	r2, #2
 8008c36:	2101      	movs	r1, #1
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f003 fa00 	bl	800c03e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8008c46:	e012      	b.n	8008c6e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	2181      	movs	r1, #129	; 0x81
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f003 f9f5 	bl	800c03e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c5a:	2340      	movs	r3, #64	; 0x40
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	2101      	movs	r1, #1
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f003 f9ec 	bl	800c03e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c6e:	2308      	movs	r3, #8
 8008c70:	2203      	movs	r2, #3
 8008c72:	2182      	movs	r1, #130	; 0x82
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f003 f9e2 	bl	800c03e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008c80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c84:	f003 fc90 	bl	800c5a8 <malloc>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
 8008ca0:	e026      	b.n	8008cf0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008ca8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	7c1b      	ldrb	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d109      	bne.n	8008ce0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f003 faa1 	bl	800c220 <USBD_LL_PrepareReceive>
 8008cde:	e007      	b.n	8008cf0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ce6:	2340      	movs	r3, #64	; 0x40
 8008ce8:	2101      	movs	r1, #1
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f003 fa98 	bl	800c220 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d0a:	2181      	movs	r1, #129	; 0x81
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f003 f9bc 	bl	800c08a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d18:	2101      	movs	r1, #1
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f003 f9b5 	bl	800c08a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d28:	2182      	movs	r1, #130	; 0x82
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f003 f9ad 	bl	800c08a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00e      	beq.n	8008d5e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d50:	4618      	mov	r0, r3
 8008d52:	f003 fc31 	bl	800c5b8 <free>
    pdev->pClassData = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008d78:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d039      	beq.n	8008e06 <USBD_CDC_Setup+0x9e>
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d17c      	bne.n	8008e90 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	88db      	ldrh	r3, [r3, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d029      	beq.n	8008df2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	b25b      	sxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	da11      	bge.n	8008dcc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8008db4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	88d2      	ldrh	r2, [r2, #6]
 8008dba:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008dbc:	6939      	ldr	r1, [r7, #16]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f9c9 	bl	800a15c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8008dca:	e068      	b.n	8008e9e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	785a      	ldrb	r2, [r3, #1]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88db      	ldrh	r3, [r3, #6]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008de2:	6939      	ldr	r1, [r7, #16]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	88db      	ldrh	r3, [r3, #6]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 f9e4 	bl	800a1b8 <USBD_CtlPrepareRx>
    break;
 8008df0:	e055      	b.n	8008e9e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	7850      	ldrb	r0, [r2, #1]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	4798      	blx	r3
    break;
 8008e04:	e04b      	b.n	8008e9e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b0a      	cmp	r3, #10
 8008e0c:	d017      	beq.n	8008e3e <USBD_CDC_Setup+0xd6>
 8008e0e:	2b0b      	cmp	r3, #11
 8008e10:	d029      	beq.n	8008e66 <USBD_CDC_Setup+0xfe>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d133      	bne.n	8008e7e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d107      	bne.n	8008e30 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e20:	f107 030c 	add.w	r3, r7, #12
 8008e24:	2202      	movs	r2, #2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 f997 	bl	800a15c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008e2e:	e02e      	b.n	8008e8e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f927 	bl	800a086 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3c:	e027      	b.n	8008e8e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d107      	bne.n	8008e58 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8008e48:	f107 030f 	add.w	r3, r7, #15
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 f983 	bl	800a15c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8008e56:	e01a      	b.n	8008e8e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f913 	bl	800a086 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e60:	2302      	movs	r3, #2
 8008e62:	75fb      	strb	r3, [r7, #23]
      break;
 8008e64:	e013      	b.n	8008e8e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d00d      	beq.n	8008e8c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f001 f907 	bl	800a086 <USBD_CtlError>
			  ret = USBD_FAIL;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008e7c:	e006      	b.n	8008e8c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f900 	bl	800a086 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e86:	2302      	movs	r3, #2
 8008e88:	75fb      	strb	r3, [r7, #23]
      break;
 8008e8a:	e000      	b.n	8008e8e <USBD_CDC_Setup+0x126>
      break;
 8008e8c:	bf00      	nop
    }
    break;
 8008e8e:	e006      	b.n	8008e9e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f8f7 	bl	800a086 <USBD_CtlError>
    ret = USBD_FAIL;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	75fb      	strb	r3, [r7, #23]
    break;
 8008e9c:	bf00      	nop
  }

  return ret;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ec2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d03a      	beq.n	8008f44 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	331c      	adds	r3, #28
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d029      	beq.n	8008f38 <USBD_CDC_DataIn+0x90>
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	331c      	adds	r3, #28
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	78f9      	ldrb	r1, [r7, #3]
 8008ef8:	68b8      	ldr	r0, [r7, #8]
 8008efa:	460b      	mov	r3, r1
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	1a5b      	subs	r3, r3, r1
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4403      	add	r3, r0
 8008f04:	3344      	adds	r3, #68	; 0x44
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f0c:	fb03 f301 	mul.w	r3, r3, r1
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f16:	78fa      	ldrb	r2, [r7, #3]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	440b      	add	r3, r1
 8008f24:	331c      	adds	r3, #28
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8008f2a:	78f9      	ldrb	r1, [r7, #3]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2200      	movs	r2, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f003 f952 	bl	800c1da <USBD_LL_Transmit>
 8008f36:	e003      	b.n	8008f40 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e000      	b.n	8008f46 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f44:	2302      	movs	r3, #2
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f003 f97d 	bl	800c266 <USBD_LL_GetRxDataSize>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00d      	beq.n	8008f9a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f92:	4611      	mov	r1, r2
 8008f94:	4798      	blx	r3

    return USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e000      	b.n	8008f9c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f9a:	2302      	movs	r3, #2
  }
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008fb2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d015      	beq.n	8008fea <USBD_CDC_EP0_RxReady+0x46>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008fc4:	2bff      	cmp	r3, #255	; 0xff
 8008fc6:	d010      	beq.n	8008fea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008fd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008fde:	b292      	uxth	r2, r2
 8008fe0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2243      	movs	r2, #67	; 0x43
 8009000:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009002:	4b03      	ldr	r3, [pc, #12]	; (8009010 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20000094 	.word	0x20000094

08009014 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2243      	movs	r2, #67	; 0x43
 8009020:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20000050 	.word	0x20000050

08009034 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2243      	movs	r2, #67	; 0x43
 8009040:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009042:	4b03      	ldr	r3, [pc, #12]	; (8009050 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	200000d8 	.word	0x200000d8

08009054 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	220a      	movs	r2, #10
 8009060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009062:	4b03      	ldr	r3, [pc, #12]	; (8009070 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	2000000c 	.word	0x2000000c

08009074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800907e:	2302      	movs	r3, #2
 8009080:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d005      	beq.n	8009094 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b087      	sub	sp, #28
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4613      	mov	r3, r2
 80090ae:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090b6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090c0:	88fa      	ldrh	r2, [r7, #6]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80090e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800910c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01c      	beq.n	8009152 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800911e:	2b00      	cmp	r3, #0
 8009120:	d115      	bne.n	800914e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009140:	b29b      	uxth	r3, r3
 8009142:	2181      	movs	r1, #129	; 0x81
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f003 f848 	bl	800c1da <USBD_LL_Transmit>

      return USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e002      	b.n	8009154 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800914e:	2301      	movs	r3, #1
 8009150:	e000      	b.n	8009154 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009152:	2302      	movs	r3, #2
  }
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800916a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009172:	2b00      	cmp	r3, #0
 8009174:	d017      	beq.n	80091a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7c1b      	ldrb	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d109      	bne.n	8009192 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009188:	2101      	movs	r1, #1
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f003 f848 	bl	800c220 <USBD_LL_PrepareReceive>
 8009190:	e007      	b.n	80091a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	2101      	movs	r1, #1
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f003 f83f 	bl	800c220 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e000      	b.n	80091a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80091a6:	2302      	movs	r3, #2
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4613      	mov	r3, r2
 80091bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
 80091c6:	e01a      	b.n	80091fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f002 feba 	bl	800bf70 <USBD_LL_Init>

  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
 8009226:	e001      	b.n	800922c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009228:	2302      	movs	r3, #2
 800922a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f002 fee0 	bl	800c008 <USBD_LL_Start>

  return USBD_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009274:	2302      	movs	r3, #2
 8009276:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00c      	beq.n	800929c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	4611      	mov	r1, r2
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
  return USBD_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fe94 	bl	800a00c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80092f2:	461a      	mov	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	2b01      	cmp	r3, #1
 8009306:	d00c      	beq.n	8009322 <USBD_LL_SetupStage+0x56>
 8009308:	2b01      	cmp	r3, #1
 800930a:	d302      	bcc.n	8009312 <USBD_LL_SetupStage+0x46>
 800930c:	2b02      	cmp	r3, #2
 800930e:	d010      	beq.n	8009332 <USBD_LL_SetupStage+0x66>
 8009310:	e017      	b.n	8009342 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa04 	bl	8009728 <USBD_StdDevReq>
    break;
 8009320:	e01a      	b.n	8009358 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fa66 	bl	80097fc <USBD_StdItfReq>
    break;
 8009330:	e012      	b.n	8009358 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 faa4 	bl	8009888 <USBD_StdEPReq>
    break;
 8009340:	e00a      	b.n	8009358 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009348:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f002 feb9 	bl	800c0c8 <USBD_LL_StallEP>
    break;
 8009356:	bf00      	nop
  }

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	460b      	mov	r3, r1
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d14b      	bne.n	800940e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800937c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009384:	2b03      	cmp	r3, #3
 8009386:	d134      	bne.n	80093f2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	429a      	cmp	r2, r3
 8009392:	d919      	bls.n	80093c8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	1ad2      	subs	r2, r2, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d203      	bcs.n	80093b6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	e002      	b.n	80093bc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 ff17 	bl	800a1f4 <USBD_CtlContinueRx>
 80093c6:	e038      	b.n	800943a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d105      	bne.n	80093ea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 ff14 	bl	800a218 <USBD_CtlSendStatus>
 80093f0:	e023      	b.n	800943a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80093f8:	2b05      	cmp	r3, #5
 80093fa:	d11e      	bne.n	800943a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009404:	2100      	movs	r1, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f002 fe5e 	bl	800c0c8 <USBD_LL_StallEP>
 800940c:	e015      	b.n	800943a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00d      	beq.n	8009436 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8009420:	2b03      	cmp	r3, #3
 8009422:	d108      	bne.n	8009436 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	7afa      	ldrb	r2, [r7, #11]
 800942e:	4611      	mov	r1, r2
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	4798      	blx	r3
 8009434:	e001      	b.n	800943a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009436:	2302      	movs	r3, #2
 8009438:	e000      	b.n	800943c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	460b      	mov	r3, r1
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d17f      	bne.n	8009558 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3314      	adds	r3, #20
 800945c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009464:	2b02      	cmp	r3, #2
 8009466:	d15c      	bne.n	8009522 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	429a      	cmp	r2, r3
 8009472:	d915      	bls.n	80094a0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	1ad2      	subs	r2, r2, r3
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	b29b      	uxth	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fe81 	bl	800a194 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	2100      	movs	r1, #0
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f002 fec1 	bl	800c220 <USBD_LL_PrepareReceive>
 800949e:	e04e      	b.n	800953e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	6912      	ldr	r2, [r2, #16]
 80094a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80094ac:	fb02 f201 	mul.w	r2, r2, r1
 80094b0:	1a9b      	subs	r3, r3, r2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d11c      	bne.n	80094f0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80094be:	429a      	cmp	r2, r3
 80094c0:	d316      	bcc.n	80094f0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d20f      	bcs.n	80094f0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094d0:	2200      	movs	r2, #0
 80094d2:	2100      	movs	r1, #0
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fe5d 	bl	800a194 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80094e2:	2300      	movs	r3, #0
 80094e4:	2200      	movs	r2, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f002 fe99 	bl	800c220 <USBD_LL_PrepareReceive>
 80094ee:	e026      	b.n	800953e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009502:	2b03      	cmp	r3, #3
 8009504:	d105      	bne.n	8009512 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009512:	2180      	movs	r1, #128	; 0x80
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f002 fdd7 	bl	800c0c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fe8f 	bl	800a23e <USBD_CtlReceiveStatus>
 8009520:	e00d      	b.n	800953e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009528:	2b04      	cmp	r3, #4
 800952a:	d004      	beq.n	8009536 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009532:	2b00      	cmp	r3, #0
 8009534:	d103      	bne.n	800953e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009536:	2180      	movs	r1, #128	; 0x80
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f002 fdc5 	bl	800c0c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8009544:	2b01      	cmp	r3, #1
 8009546:	d11d      	bne.n	8009584 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fe82 	bl	8009252 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8009556:	e015      	b.n	8009584 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00d      	beq.n	8009580 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800956a:	2b03      	cmp	r3, #3
 800956c:	d108      	bne.n	8009580 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	7afa      	ldrb	r2, [r7, #11]
 8009578:	4611      	mov	r1, r2
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	4798      	blx	r3
 800957e:	e001      	b.n	8009584 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009580:	2302      	movs	r3, #2
 8009582:	e000      	b.n	8009586 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009596:	2340      	movs	r3, #64	; 0x40
 8009598:	2200      	movs	r2, #0
 800959a:	2100      	movs	r1, #0
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f002 fd4e 	bl	800c03e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2240      	movs	r2, #64	; 0x40
 80095ae:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	2200      	movs	r2, #0
 80095b6:	2180      	movs	r1, #128	; 0x80
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f002 fd40 	bl	800c03e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2240      	movs	r2, #64	; 0x40
 80095c8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6852      	ldr	r2, [r2, #4]
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	4611      	mov	r1, r2
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
  }

  return USBD_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2204      	movs	r2, #4
 8009648:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800968a:	2b03      	cmp	r3, #3
 800968c:	d10b      	bne.n	80096a6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b083      	sub	sp, #12
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	6852      	ldr	r2, [r2, #4]
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	4611      	mov	r1, r2
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3

  return USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973e:	2b20      	cmp	r3, #32
 8009740:	d004      	beq.n	800974c <USBD_StdDevReq+0x24>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d002      	beq.n	800974c <USBD_StdDevReq+0x24>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d008      	beq.n	800975c <USBD_StdDevReq+0x34>
 800974a:	e04c      	b.n	80097e6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
    break;
 800975a:	e049      	b.n	80097f0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	2b09      	cmp	r3, #9
 8009762:	d83a      	bhi.n	80097da <USBD_StdDevReq+0xb2>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBD_StdDevReq+0x44>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	080097bd 	.word	0x080097bd
 8009770:	080097d1 	.word	0x080097d1
 8009774:	080097db 	.word	0x080097db
 8009778:	080097c7 	.word	0x080097c7
 800977c:	080097db 	.word	0x080097db
 8009780:	0800979f 	.word	0x0800979f
 8009784:	08009795 	.word	0x08009795
 8009788:	080097db 	.word	0x080097db
 800978c:	080097b3 	.word	0x080097b3
 8009790:	080097a9 	.word	0x080097a9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9d2 	bl	8009b40 <USBD_GetDescriptor>
      break;
 800979c:	e022      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fac7 	bl	8009d34 <USBD_SetAddress>
      break;
 80097a6:	e01d      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb04 	bl	8009db8 <USBD_SetConfig>
      break;
 80097b0:	e018      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fb8d 	bl	8009ed4 <USBD_GetConfig>
      break;
 80097ba:	e013      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fbbc 	bl	8009f3c <USBD_GetStatus>
      break;
 80097c4:	e00e      	b.n	80097e4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fbea 	bl	8009fa2 <USBD_SetFeature>
      break;
 80097ce:	e009      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fbf9 	bl	8009fca <USBD_ClrFeature>
      break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc52 	bl	800a086 <USBD_CtlError>
      break;
 80097e2:	bf00      	nop
    }
    break;
 80097e4:	e004      	b.n	80097f0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fc4c 	bl	800a086 <USBD_CtlError>
    break;
 80097ee:	bf00      	nop
  }

  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009812:	2b20      	cmp	r3, #32
 8009814:	d003      	beq.n	800981e <USBD_StdItfReq+0x22>
 8009816:	2b40      	cmp	r3, #64	; 0x40
 8009818:	d001      	beq.n	800981e <USBD_StdItfReq+0x22>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d12a      	bne.n	8009874 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009824:	3b01      	subs	r3, #1
 8009826:	2b02      	cmp	r3, #2
 8009828:	d81d      	bhi.n	8009866 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	889b      	ldrh	r3, [r3, #4]
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	d813      	bhi.n	800985c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	88db      	ldrh	r3, [r3, #6]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d110      	bne.n	8009870 <USBD_StdItfReq+0x74>
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fcdf 	bl	800a218 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800985a:	e009      	b.n	8009870 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc11 	bl	800a086 <USBD_CtlError>
      break;
 8009864:	e004      	b.n	8009870 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fc0c 	bl	800a086 <USBD_CtlError>
      break;
 800986e:	e000      	b.n	8009872 <USBD_StdItfReq+0x76>
      break;
 8009870:	bf00      	nop
    }
    break;
 8009872:	e004      	b.n	800987e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fc05 	bl	800a086 <USBD_CtlError>
    break;
 800987c:	bf00      	nop
  }

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d004      	beq.n	80098b2 <USBD_StdEPReq+0x2a>
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	d002      	beq.n	80098b2 <USBD_StdEPReq+0x2a>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d008      	beq.n	80098c2 <USBD_StdEPReq+0x3a>
 80098b0:	e13b      	b.n	8009b2a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
    break;
 80098c0:	e138      	b.n	8009b34 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	d10a      	bne.n	80098e4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	4798      	blx	r3
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

      return ret;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	e128      	b.n	8009b36 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d03e      	beq.n	800996a <USBD_StdEPReq+0xe2>
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d002      	beq.n	80098f6 <USBD_StdEPReq+0x6e>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d070      	beq.n	80099d6 <USBD_StdEPReq+0x14e>
 80098f4:	e113      	b.n	8009b1e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d002      	beq.n	8009906 <USBD_StdEPReq+0x7e>
 8009900:	2b03      	cmp	r3, #3
 8009902:	d015      	beq.n	8009930 <USBD_StdEPReq+0xa8>
 8009904:	e02b      	b.n	800995e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00c      	beq.n	8009926 <USBD_StdEPReq+0x9e>
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	2b80      	cmp	r3, #128	; 0x80
 8009910:	d009      	beq.n	8009926 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f002 fbd6 	bl	800c0c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800991c:	2180      	movs	r1, #128	; 0x80
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f002 fbd2 	bl	800c0c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009924:	e020      	b.n	8009968 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fbac 	bl	800a086 <USBD_CtlError>
        break;
 800992e:	e01b      	b.n	8009968 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	885b      	ldrh	r3, [r3, #2]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10e      	bne.n	8009956 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00b      	beq.n	8009956 <USBD_StdEPReq+0xce>
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d008      	beq.n	8009956 <USBD_StdEPReq+0xce>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d104      	bne.n	8009956 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f002 fbb9 	bl	800c0c8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc5e 	bl	800a218 <USBD_CtlSendStatus>

        break;
 800995c:	e004      	b.n	8009968 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb90 	bl	800a086 <USBD_CtlError>
        break;
 8009966:	bf00      	nop
      }
      break;
 8009968:	e0de      	b.n	8009b28 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009970:	2b02      	cmp	r3, #2
 8009972:	d002      	beq.n	800997a <USBD_StdEPReq+0xf2>
 8009974:	2b03      	cmp	r3, #3
 8009976:	d015      	beq.n	80099a4 <USBD_StdEPReq+0x11c>
 8009978:	e026      	b.n	80099c8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00c      	beq.n	800999a <USBD_StdEPReq+0x112>
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b80      	cmp	r3, #128	; 0x80
 8009984:	d009      	beq.n	800999a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f002 fb9c 	bl	800c0c8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009990:	2180      	movs	r1, #128	; 0x80
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f002 fb98 	bl	800c0c8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009998:	e01c      	b.n	80099d4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fb72 	bl	800a086 <USBD_CtlError>
        break;
 80099a2:	e017      	b.n	80099d4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d112      	bne.n	80099d2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f002 fba3 	bl	800c106 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fc29 	bl	800a218 <USBD_CtlSendStatus>
        }
        break;
 80099c6:	e004      	b.n	80099d2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fb5b 	bl	800a086 <USBD_CtlError>
        break;
 80099d0:	e000      	b.n	80099d4 <USBD_StdEPReq+0x14c>
        break;
 80099d2:	bf00      	nop
      }
      break;
 80099d4:	e0a8      	b.n	8009b28 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d002      	beq.n	80099e6 <USBD_StdEPReq+0x15e>
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d031      	beq.n	8009a48 <USBD_StdEPReq+0x1c0>
 80099e4:	e095      	b.n	8009b12 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <USBD_StdEPReq+0x174>
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b80      	cmp	r3, #128	; 0x80
 80099f0:	d004      	beq.n	80099fc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fb46 	bl	800a086 <USBD_CtlError>
          break;
 80099fa:	e08f      	b.n	8009b1c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80099fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	da0b      	bge.n	8009a1c <USBD_StdEPReq+0x194>
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	3310      	adds	r3, #16
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	4413      	add	r3, r2
 8009a18:	3304      	adds	r3, #4
 8009a1a:	e00a      	b.n	8009a32 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009a1c:	7bbb      	ldrb	r3, [r7, #14]
 8009a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb8b 	bl	800a15c <USBD_CtlSendData>
          break;
 8009a46:	e069      	b.n	8009b1c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da11      	bge.n	8009a74 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a50:	7bbb      	ldrb	r3, [r7, #14]
 8009a52:	f003 020f 	and.w	r2, r3, #15
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4413      	add	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	440b      	add	r3, r1
 8009a62:	3318      	adds	r3, #24
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d117      	bne.n	8009a9a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb0a 	bl	800a086 <USBD_CtlError>
            break;
 8009a72:	e053      	b.n	8009b1c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	f003 020f 	and.w	r2, r3, #15
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 faf7 	bl	800a086 <USBD_CtlError>
            break;
 8009a98:	e040      	b.n	8009b1c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da0b      	bge.n	8009aba <USBD_StdEPReq+0x232>
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	3310      	adds	r3, #16
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	e00a      	b.n	8009ad0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	4413      	add	r3, r2
 8009ad0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <USBD_StdEPReq+0x256>
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b80      	cmp	r3, #128	; 0x80
 8009adc:	d103      	bne.n	8009ae6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e00e      	b.n	8009b04 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f002 fb2a 	bl	800c144 <USBD_LL_IsStallEP>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	e002      	b.n	8009b04 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2202      	movs	r2, #2
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fb26 	bl	800a15c <USBD_CtlSendData>
          break;
 8009b10:	e004      	b.n	8009b1c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fab6 	bl	800a086 <USBD_CtlError>
        break;
 8009b1a:	bf00      	nop
      }
      break;
 8009b1c:	e004      	b.n	8009b28 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fab0 	bl	800a086 <USBD_CtlError>
      break;
 8009b26:	bf00      	nop
    }
    break;
 8009b28:	e004      	b.n	8009b34 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 faaa 	bl	800a086 <USBD_CtlError>
    break;
 8009b32:	bf00      	nop
  }

  return ret;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	885b      	ldrh	r3, [r3, #2]
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	2b06      	cmp	r3, #6
 8009b56:	f200 80c9 	bhi.w	8009cec <USBD_GetDescriptor+0x1ac>
 8009b5a:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <USBD_GetDescriptor+0x20>)
 8009b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b60:	08009b7d 	.word	0x08009b7d
 8009b64:	08009b95 	.word	0x08009b95
 8009b68:	08009bd5 	.word	0x08009bd5
 8009b6c:	08009ced 	.word	0x08009ced
 8009b70:	08009ced 	.word	0x08009ced
 8009b74:	08009c99 	.word	0x08009c99
 8009b78:	08009cbf 	.word	0x08009cbf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 010a 	add.w	r1, r7, #10
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
    break;
 8009b92:	e0b0      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7c1b      	ldrb	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10d      	bne.n	8009bb8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	f107 020a 	add.w	r2, r7, #10
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4798      	blx	r3
 8009bac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009bb6:	e09e      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	f107 020a 	add.w	r2, r7, #10
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	4798      	blx	r3
 8009bc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	2202      	movs	r2, #2
 8009bd0:	701a      	strb	r2, [r3, #0]
    break;
 8009bd2:	e090      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	885b      	ldrh	r3, [r3, #2]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d856      	bhi.n	8009c8c <USBD_GetDescriptor+0x14c>
 8009bde:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <USBD_GetDescriptor+0xa4>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009bfd 	.word	0x08009bfd
 8009be8:	08009c15 	.word	0x08009c15
 8009bec:	08009c2d 	.word	0x08009c2d
 8009bf0:	08009c45 	.word	0x08009c45
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c75 	.word	0x08009c75
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	7c12      	ldrb	r2, [r2, #16]
 8009c08:	f107 010a 	add.w	r1, r7, #10
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
      break;
 8009c12:	e040      	b.n	8009c96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 010a 	add.w	r1, r7, #10
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
      break;
 8009c2a:	e034      	b.n	8009c96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	7c12      	ldrb	r2, [r2, #16]
 8009c38:	f107 010a 	add.w	r1, r7, #10
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	60f8      	str	r0, [r7, #12]
      break;
 8009c42:	e028      	b.n	8009c96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	7c12      	ldrb	r2, [r2, #16]
 8009c50:	f107 010a 	add.w	r1, r7, #10
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
      break;
 8009c5a:	e01c      	b.n	8009c96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 010a 	add.w	r1, r7, #10
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
      break;
 8009c72:	e010      	b.n	8009c96 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 010a 	add.w	r1, r7, #10
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
      break;
 8009c8a:	e004      	b.n	8009c96 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f9f9 	bl	800a086 <USBD_CtlError>
      return;
 8009c94:	e04b      	b.n	8009d2e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8009c96:	e02e      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	7c1b      	ldrb	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d109      	bne.n	8009cb4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	f107 020a 	add.w	r2, r7, #10
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
      break;
 8009cb2:	e020      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9e5 	bl	800a086 <USBD_CtlError>
      return;
 8009cbc:	e037      	b.n	8009d2e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7c1b      	ldrb	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10d      	bne.n	8009ce2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	f107 020a 	add.w	r2, r7, #10
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4798      	blx	r3
 8009cd6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	2207      	movs	r2, #7
 8009cde:	701a      	strb	r2, [r3, #0]
      break;
 8009ce0:	e009      	b.n	8009cf6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f9ce 	bl	800a086 <USBD_CtlError>
      return;
 8009cea:	e020      	b.n	8009d2e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f9c9 	bl	800a086 <USBD_CtlError>
    return;
 8009cf4:	e01b      	b.n	8009d2e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8009cf6:	897b      	ldrh	r3, [r7, #10]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d011      	beq.n	8009d20 <USBD_GetDescriptor+0x1e0>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	88db      	ldrh	r3, [r3, #6]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00d      	beq.n	8009d20 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	88da      	ldrh	r2, [r3, #6]
 8009d08:	897b      	ldrh	r3, [r7, #10]
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	bf28      	it	cs
 8009d0e:	4613      	movcs	r3, r2
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8009d14:	897b      	ldrh	r3, [r7, #10]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68f9      	ldr	r1, [r7, #12]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa1e 	bl	800a15c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	88db      	ldrh	r3, [r3, #6]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fa75 	bl	800a218 <USBD_CtlSendStatus>
  }
}
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	889b      	ldrh	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d130      	bne.n	8009da8 <USBD_SetAddress+0x74>
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	88db      	ldrh	r3, [r3, #6]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d12c      	bne.n	8009da8 <USBD_SetAddress+0x74>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885b      	ldrh	r3, [r3, #2]
 8009d52:	2b7f      	cmp	r3, #127	; 0x7f
 8009d54:	d828      	bhi.n	8009da8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d104      	bne.n	8009d76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f989 	bl	800a086 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d74:	e01c      	b.n	8009db0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7bfa      	ldrb	r2, [r7, #15]
 8009d7a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 fa0a 	bl	800c19c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fa45 	bl	800a218 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d004      	beq.n	8009d9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9c:	e008      	b.n	8009db0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da6:	e003      	b.n	8009db0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f96b 	bl	800a086 <USBD_CtlError>
  }
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	885b      	ldrh	r3, [r3, #2]
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	4b41      	ldr	r3, [pc, #260]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009dca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009dcc:	4b40      	ldr	r3, [pc, #256]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d904      	bls.n	8009dde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f955 	bl	800a086 <USBD_CtlError>
 8009ddc:	e075      	b.n	8009eca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d002      	beq.n	8009dee <USBD_SetConfig+0x36>
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d023      	beq.n	8009e34 <USBD_SetConfig+0x7c>
 8009dec:	e062      	b.n	8009eb4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8009dee:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01a      	beq.n	8009e2c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8009df6:	4b36      	ldr	r3, [pc, #216]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2203      	movs	r2, #3
 8009e04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e08:	4b31      	ldr	r3, [pc, #196]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fa2a 	bl	8009268 <USBD_SetClassConfig>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d104      	bne.n	8009e24 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f932 	bl	800a086 <USBD_CtlError>
          return;
 8009e22:	e052      	b.n	8009eca <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f9f7 	bl	800a218 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009e2a:	e04e      	b.n	8009eca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f9f3 	bl	800a218 <USBD_CtlSendStatus>
      break;
 8009e32:	e04a      	b.n	8009eca <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e34:	4b26      	ldr	r3, [pc, #152]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d112      	bne.n	8009e62 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8009e44:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e4e:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff fa26 	bl	80092a6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9dc 	bl	800a218 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009e60:	e033      	b.n	8009eca <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8009e62:	4b1b      	ldr	r3, [pc, #108]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d01d      	beq.n	8009eac <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff fa14 	bl	80092a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e7e:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e88:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff f9ea 	bl	8009268 <USBD_SetClassConfig>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d104      	bne.n	8009ea4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f8f2 	bl	800a086 <USBD_CtlError>
          return;
 8009ea2:	e012      	b.n	8009eca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f9b7 	bl	800a218 <USBD_CtlSendStatus>
      break;
 8009eaa:	e00e      	b.n	8009eca <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f9b3 	bl	800a218 <USBD_CtlSendStatus>
      break;
 8009eb2:	e00a      	b.n	8009eca <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f8e5 	bl	800a086 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009ebc:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <USBD_SetConfig+0x118>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff f9ef 	bl	80092a6 <USBD_ClrClassConfig>
      break;
 8009ec8:	bf00      	nop
    }
  }
}
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20000574 	.word	0x20000574

08009ed4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88db      	ldrh	r3, [r3, #6]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d004      	beq.n	8009ef0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f8cc 	bl	800a086 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009eee:	e021      	b.n	8009f34 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	db17      	blt.n	8009f2a <USBD_GetConfig+0x56>
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	dd02      	ble.n	8009f04 <USBD_GetConfig+0x30>
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d00b      	beq.n	8009f1a <USBD_GetConfig+0x46>
 8009f02:	e012      	b.n	8009f2a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4619      	mov	r1, r3
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f922 	bl	800a15c <USBD_CtlSendData>
      break;
 8009f18:	e00c      	b.n	8009f34 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	2201      	movs	r2, #1
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f91a 	bl	800a15c <USBD_CtlSendData>
      break;
 8009f28:	e004      	b.n	8009f34 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f8aa 	bl	800a086 <USBD_CtlError>
      break;
 8009f32:	bf00      	nop
}
 8009f34:	bf00      	nop
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d81e      	bhi.n	8009f90 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	88db      	ldrh	r3, [r3, #6]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d004      	beq.n	8009f64 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f892 	bl	800a086 <USBD_CtlError>
      break;
 8009f62:	e01a      	b.n	8009f9a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f043 0202 	orr.w	r2, r3, #2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	330c      	adds	r3, #12
 8009f84:	2202      	movs	r2, #2
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f8e7 	bl	800a15c <USBD_CtlSendData>
    break;
 8009f8e:	e004      	b.n	8009f9a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f877 	bl	800a086 <USBD_CtlError>
    break;
 8009f98:	bf00      	nop
  }
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	885b      	ldrh	r3, [r3, #2]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d106      	bne.n	8009fc2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f92b 	bl	800a218 <USBD_CtlSendStatus>
  }

}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d80b      	bhi.n	8009ff8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	885b      	ldrh	r3, [r3, #2]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d10c      	bne.n	800a002 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f911 	bl	800a218 <USBD_CtlSendStatus>
    }
    break;
 8009ff6:	e004      	b.n	800a002 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f843 	bl	800a086 <USBD_CtlError>
    break;
 800a000:	e000      	b.n	800a004 <USBD_ClrFeature+0x3a>
    break;
 800a002:	bf00      	nop
  }
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781a      	ldrb	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	785a      	ldrb	r2, [r3, #1]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	3302      	adds	r3, #2
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	3303      	adds	r3, #3
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	3304      	adds	r3, #4
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	3305      	adds	r3, #5
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	021b      	lsls	r3, r3, #8
 800a054:	b29b      	uxth	r3, r3
 800a056:	4413      	add	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	3306      	adds	r3, #6
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b29a      	uxth	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	3307      	adds	r3, #7
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	b29b      	uxth	r3, r3
 800a072:	4413      	add	r3, r2
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	80da      	strh	r2, [r3, #6]

}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a090:	2180      	movs	r1, #128	; 0x80
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f002 f818 	bl	800c0c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f002 f814 	bl	800c0c8 <USBD_LL_StallEP>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d032      	beq.n	800a124 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f834 	bl	800a12c <USBD_GetLen>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	75fa      	strb	r2, [r7, #23]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4413      	add	r3, r2
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	7812      	ldrb	r2, [r2, #0]
 800a0e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	75fa      	strb	r2, [r7, #23]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a0f4:	e012      	b.n	800a11c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	60fa      	str	r2, [r7, #12]
 800a0fc:	7dfa      	ldrb	r2, [r7, #23]
 800a0fe:	1c51      	adds	r1, r2, #1
 800a100:	75f9      	strb	r1, [r7, #23]
 800a102:	4611      	mov	r1, r2
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	440a      	add	r2, r1
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	75fa      	strb	r2, [r7, #23]
 800a112:	461a      	mov	r2, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4413      	add	r3, r2
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e8      	bne.n	800a0f6 <USBD_GetString+0x4e>
    }
  }
}
 800a124:	bf00      	nop
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800a138:	e005      	b.n	800a146 <USBD_GetLen+0x1a>
    {
        len++;
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	3301      	adds	r3, #1
 800a13e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3301      	adds	r3, #1
 800a144:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f5      	bne.n	800a13a <USBD_GetLen+0xe>
    }

    return len;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2202      	movs	r2, #2
 800a16e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a172:	88fa      	ldrh	r2, [r7, #6]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a178:	88fa      	ldrh	r2, [r7, #6]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f002 f828 	bl	800c1da <USBD_LL_Transmit>

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f002 f816 	bl	800c1da <USBD_LL_Transmit>

  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f002 f81b 	bl	800c220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	2100      	movs	r1, #0
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f002 f809 	bl	800c220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2204      	movs	r2, #4
 800a224:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a228:	2300      	movs	r3, #0
 800a22a:	2200      	movs	r2, #0
 800a22c:	2100      	movs	r1, #0
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 ffd3 	bl	800c1da <USBD_LL_Transmit>

  return USBD_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2205      	movs	r2, #5
 800a24a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a24e:	2300      	movs	r3, #0
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 ffe3 	bl	800c220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a272:	2301      	movs	r3, #1
 800a274:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a27a:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a27c:	7a5b      	ldrb	r3, [r3, #9]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d131      	bne.n	800a2e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a284:	4b1c      	ldr	r3, [pc, #112]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a286:	7a5b      	ldrb	r3, [r3, #9]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a28e:	2100      	movs	r1, #0
 800a290:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a292:	4b19      	ldr	r3, [pc, #100]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a294:	7a5b      	ldrb	r3, [r3, #9]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2a2:	4b15      	ldr	r3, [pc, #84]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a2a4:	7a5b      	ldrb	r3, [r3, #9]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a2ac:	4413      	add	r3, r2
 800a2ae:	79fa      	ldrb	r2, [r7, #7]
 800a2b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a2b4:	7a5b      	ldrb	r3, [r3, #9]
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	b2d1      	uxtb	r1, r2
 800a2bc:	4a0e      	ldr	r2, [pc, #56]	; (800a2f8 <FATFS_LinkDriverEx+0x94>)
 800a2be:	7251      	strb	r1, [r2, #9]
 800a2c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
 800a2c4:	3330      	adds	r3, #48	; 0x30
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	223a      	movs	r2, #58	; 0x3a
 800a2d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3302      	adds	r3, #2
 800a2d8:	222f      	movs	r2, #47	; 0x2f
 800a2da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3303      	adds	r3, #3
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	20000578 	.word	0x20000578

0800a2fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a306:	2200      	movs	r2, #0
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff ffaa 	bl	800a264 <FATFS_LinkDriverEx>
 800a310:	4603      	mov	r3, r0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a326:	f000 f896 	bl	800a456 <BSP_SD_IsDetected>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d001      	beq.n	800a334 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e012      	b.n	800a35a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a334:	480b      	ldr	r0, [pc, #44]	; (800a364 <BSP_SD_Init+0x48>)
 800a336:	f7f9 fec8 	bl	80040ca <HAL_SD_Init>
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a33e:	79fb      	ldrb	r3, [r7, #7]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d109      	bne.n	800a358 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a348:	4806      	ldr	r0, [pc, #24]	; (800a364 <BSP_SD_Init+0x48>)
 800a34a:	f7fa fca2 	bl	8004c92 <HAL_SD_ConfigWideBusOperation>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a358:	79fb      	ldrb	r3, [r7, #7]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20002e9c 	.word	0x20002e9c

0800a368 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	68f9      	ldr	r1, [r7, #12]
 800a37e:	4806      	ldr	r0, [pc, #24]	; (800a398 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a380:	f7f9 ff2a 	bl	80041d8 <HAL_SD_ReadBlocks_DMA>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20002e9c 	.word	0x20002e9c

0800a39c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	68f9      	ldr	r1, [r7, #12]
 800a3b2:	4806      	ldr	r0, [pc, #24]	; (800a3cc <BSP_SD_WriteBlocks_DMA+0x30>)
 800a3b4:	f7f9 ffdc 	bl	8004370 <HAL_SD_WriteBlocks_DMA>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3718      	adds	r7, #24
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20002e9c 	.word	0x20002e9c

0800a3d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a3d4:	4805      	ldr	r0, [pc, #20]	; (800a3ec <BSP_SD_GetCardState+0x1c>)
 800a3d6:	f7fa fcd8 	bl	8004d8a <HAL_SD_GetCardState>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	bf14      	ite	ne
 800a3e0:	2301      	movne	r3, #1
 800a3e2:	2300      	moveq	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20002e9c 	.word	0x20002e9c

0800a3f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a3f8:	6879      	ldr	r1, [r7, #4]
 800a3fa:	4803      	ldr	r0, [pc, #12]	; (800a408 <BSP_SD_GetCardInfo+0x18>)
 800a3fc:	f7fa fc1d 	bl	8004c3a <HAL_SD_GetCardInfo>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20002e9c 	.word	0x20002e9c

0800a40c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a414:	f000 f818 	bl	800a448 <BSP_SD_AbortCallback>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a428:	f000 ff9a 	bl	800b360 <BSP_SD_WriteCpltCallback>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a43c:	f000 ff9c 	bl	800b378 <BSP_SD_ReadCpltCallback>
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0

}
 800a44c:	bf00      	nop
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b082      	sub	sp, #8
 800a45a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a45c:	2301      	movs	r3, #1
 800a45e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a460:	f000 f81e 	bl	800a4a0 <BSP_PlatformIsDetected>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a46a:	2300      	movs	r3, #0
 800a46c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	b2db      	uxtb	r3, r3
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a480:	4904      	ldr	r1, [pc, #16]	; (800a494 <MX_FATFS_Init+0x18>)
 800a482:	4805      	ldr	r0, [pc, #20]	; (800a498 <MX_FATFS_Init+0x1c>)
 800a484:	f7ff ff3a 	bl	800a2fc <FATFS_LinkDriver>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	4b03      	ldr	r3, [pc, #12]	; (800a49c <MX_FATFS_Init+0x20>)
 800a48e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a490:	bf00      	nop
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000c40 	.word	0x20000c40
 800a498:	080102b0 	.word	0x080102b0
 800a49c:	20000c3c 	.word	0x20000c3c

0800a4a0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a4aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4ae:	4806      	ldr	r0, [pc, #24]	; (800a4c8 <BSP_PlatformIsDetected+0x28>)
 800a4b0:	f7f7 fd56 	bl	8001f60 <HAL_GPIO_ReadPin>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a4be:	79fb      	ldrb	r3, [r7, #7]
}  
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	40020000 	.word	0x40020000

0800a4cc <micros>:
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <println>:
{
 800a4e0:	b40f      	push	{r0, r1, r2, r3}
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
	if (usbPresent)
 800a4e8:	4b2a      	ldr	r3, [pc, #168]	; (800a594 <println+0xb4>)
 800a4ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d147      	bne.n	800a582 <println+0xa2>
		writePin(LEDD, HIGH);
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4f8:	4827      	ldr	r0, [pc, #156]	; (800a598 <println+0xb8>)
 800a4fa:	f7f7 fd49 	bl	8001f90 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800a4fe:	f107 031c 	add.w	r3, r7, #28
 800a502:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	69b9      	ldr	r1, [r7, #24]
 800a508:	4824      	ldr	r0, [pc, #144]	; (800a59c <println+0xbc>)
 800a50a:	f003 fe65 	bl	800e1d8 <vsiprintf>
 800a50e:	4603      	mov	r3, r0
 800a510:	461a      	mov	r2, r3
 800a512:	4b23      	ldr	r3, [pc, #140]	; (800a5a0 <println+0xc0>)
 800a514:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 800a516:	4b22      	ldr	r3, [pc, #136]	; (800a5a0 <println+0xc0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a20      	ldr	r2, [pc, #128]	; (800a59c <println+0xbc>)
 800a51c:	210d      	movs	r1, #13
 800a51e:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800a520:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <println+0xc0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3301      	adds	r3, #1
 800a526:	4a1d      	ldr	r2, [pc, #116]	; (800a59c <println+0xbc>)
 800a528:	210a      	movs	r1, #10
 800a52a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800a52c:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <println+0xc0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3302      	adds	r3, #2
 800a532:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <println+0xbc>)
 800a534:	2100      	movs	r1, #0
 800a536:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800a538:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <println+0xc0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3303      	adds	r3, #3
 800a53e:	4a18      	ldr	r2, [pc, #96]	; (800a5a0 <println+0xc0>)
 800a540:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800a542:	f7ff ffc3 	bl	800a4cc <micros>
 800a546:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 800a548:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <println+0xc0>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	005b      	lsls	r3, r3, #1
 800a554:	3346      	adds	r3, #70	; 0x46
 800a556:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800a558:	e001      	b.n	800a55e <println+0x7e>
			if (micros() - printStart > timeout && false)
 800a55a:	f7ff ffb7 	bl	800a4cc <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800a55e:	4b10      	ldr	r3, [pc, #64]	; (800a5a0 <println+0xc0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	b29b      	uxth	r3, r3
 800a564:	4619      	mov	r1, r3
 800a566:	480d      	ldr	r0, [pc, #52]	; (800a59c <println+0xbc>)
 800a568:	f001 fb96 	bl	800bc98 <CDC_Transmit_FS>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d0f3      	beq.n	800a55a <println+0x7a>
		writePin(LEDD, LOW);
 800a572:	2200      	movs	r2, #0
 800a574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a578:	4807      	ldr	r0, [pc, #28]	; (800a598 <println+0xb8>)
 800a57a:	f7f7 fd09 	bl	8001f90 <HAL_GPIO_WritePin>
		return true;
 800a57e:	2301      	movs	r3, #1
 800a580:	e000      	b.n	800a584 <println+0xa4>
	return false;
 800a582:	2300      	movs	r3, #0
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a58e:	b004      	add	sp, #16
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	2000099c 	.word	0x2000099c
 800a598:	40020400 	.word	0x40020400
 800a59c:	20000588 	.word	0x20000588
 800a5a0:	20000584 	.word	0x20000584

0800a5a4 <motorTest_begin>:
// Set to 1 to drive motors only when USR is pressed
#define MOTORTEST_ON_USR_PRESS 0
#define power_treshold 190

static bool motorTest_begin(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
	println("motorTest start!");
 800a5a8:	4803      	ldr	r0, [pc, #12]	; (800a5b8 <motorTest_begin+0x14>)
 800a5aa:	f7ff ff99 	bl	800a4e0 <println>
	enableMotors();
 800a5ae:	f7f6 fdbd 	bl	800112c <enableMotors>
	return true;
 800a5b2:	2301      	movs	r3, #1
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	0801024c 	.word	0x0801024c

0800a5bc <mot_up_down>:


static void mot_up_down(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < power_treshold; i++)
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	71fb      	strb	r3, [r7, #7]
 800a5c6:	e028      	b.n	800a61a <mot_up_down+0x5e>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET || !MOTORTEST_ON_USR_PRESS)
 800a5c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5cc:	4838      	ldr	r0, [pc, #224]	; (800a6b0 <mot_up_down+0xf4>)
 800a5ce:	f7f7 fcc7 	bl	8001f60 <HAL_GPIO_ReadPin>
		{
			setMotors(((float)i) / 255.0, ((float)i) / 255.0);
 800a5d2:	79fb      	ldrb	r3, [r7, #7]
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5dc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a6b4 <mot_up_down+0xf8>
 800a5e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a5e4:	79fb      	ldrb	r3, [r7, #7]
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ee:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a6b4 <mot_up_down+0xf8>
 800a5f2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a5f6:	eef0 0a46 	vmov.f32	s1, s12
 800a5fa:	eeb0 0a66 	vmov.f32	s0, s13
 800a5fe:	f7f6 fd2f 	bl	8001060 <setMotors>
			HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 800a602:	2201      	movs	r2, #1
 800a604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a608:	482b      	ldr	r0, [pc, #172]	; (800a6b8 <mot_up_down+0xfc>)
 800a60a:	f7f7 fcc1 	bl	8001f90 <HAL_GPIO_WritePin>
		else
		{
			haltMotors();
			HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
		}
		HAL_Delay(10);
 800a60e:	200a      	movs	r0, #10
 800a610:	f7f6 fe40 	bl	8001294 <HAL_Delay>
	for (i = 0; i < power_treshold; i++)
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	3301      	adds	r3, #1
 800a618:	71fb      	strb	r3, [r7, #7]
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	2bbd      	cmp	r3, #189	; 0xbd
 800a61e:	d9d3      	bls.n	800a5c8 <mot_up_down+0xc>
	}
	for (i = 0; i < 100; i++)
 800a620:	2300      	movs	r3, #0
 800a622:	71fb      	strb	r3, [r7, #7]
 800a624:	e00a      	b.n	800a63c <mot_up_down+0x80>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET || !MOTORTEST_ON_USR_PRESS) HAL_Delay(100);
 800a626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a62a:	4821      	ldr	r0, [pc, #132]	; (800a6b0 <mot_up_down+0xf4>)
 800a62c:	f7f7 fc98 	bl	8001f60 <HAL_GPIO_ReadPin>
 800a630:	2064      	movs	r0, #100	; 0x64
 800a632:	f7f6 fe2f 	bl	8001294 <HAL_Delay>
	for (i = 0; i < 100; i++)
 800a636:	79fb      	ldrb	r3, [r7, #7]
 800a638:	3301      	adds	r3, #1
 800a63a:	71fb      	strb	r3, [r7, #7]
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	2b63      	cmp	r3, #99	; 0x63
 800a640:	d9f1      	bls.n	800a626 <mot_up_down+0x6a>
	}
	for (i = power_treshold; i > 0; i--)
 800a642:	23be      	movs	r3, #190	; 0xbe
 800a644:	71fb      	strb	r3, [r7, #7]
 800a646:	e028      	b.n	800a69a <mot_up_down+0xde>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET || !MOTORTEST_ON_USR_PRESS)
 800a648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a64c:	4818      	ldr	r0, [pc, #96]	; (800a6b0 <mot_up_down+0xf4>)
 800a64e:	f7f7 fc87 	bl	8001f60 <HAL_GPIO_ReadPin>
		{
			setMotors(((float)i) / 255.0, ((float)i) / 255.0);
 800a652:	79fb      	ldrb	r3, [r7, #7]
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a6b4 <mot_up_down+0xf8>
 800a660:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a6b4 <mot_up_down+0xf8>
 800a672:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a676:	eef0 0a46 	vmov.f32	s1, s12
 800a67a:	eeb0 0a66 	vmov.f32	s0, s13
 800a67e:	f7f6 fcef 	bl	8001060 <setMotors>
			HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 800a682:	2201      	movs	r2, #1
 800a684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a688:	480b      	ldr	r0, [pc, #44]	; (800a6b8 <mot_up_down+0xfc>)
 800a68a:	f7f7 fc81 	bl	8001f90 <HAL_GPIO_WritePin>
		{
			haltMotors();
			HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
		}

		HAL_Delay(10);
 800a68e:	200a      	movs	r0, #10
 800a690:	f7f6 fe00 	bl	8001294 <HAL_Delay>
	for (i = power_treshold; i > 0; i--)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	3b01      	subs	r3, #1
 800a698:	71fb      	strb	r3, [r7, #7]
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1d3      	bne.n	800a648 <mot_up_down+0x8c>
	}
	HAL_Delay(400);
 800a6a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a6a4:	f7f6 fdf6 	bl	8001294 <HAL_Delay>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	40020000 	.word	0x40020000
 800a6b4:	437f0000 	.word	0x437f0000
 800a6b8:	40020400 	.word	0x40020400

0800a6bc <setup>:
#include "Scripts/Peripherials/imuTest.c"
#include "Scripts/Peripherials/motorTest.c"


static void setup(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
	//writePin(LEDD, HIGH);	while (readPin(BTN_USR) == HIGH);	writePin(LEDD, LOW);
	println("Hello world");
 800a6c0:	4803      	ldr	r0, [pc, #12]	; (800a6d0 <setup+0x14>)
 800a6c2:	f7ff ff0d 	bl	800a4e0 <println>
	

	//imuTest_begin();
	motorTest_begin();
 800a6c6:	f7ff ff6d 	bl	800a5a4 <motorTest_begin>

	/*
	gps.uart = Get_UART3_Instance();
	GPS_init(&gps);
	 */
}
 800a6ca:	bf00      	nop
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	08010260 	.word	0x08010260

0800a6d4 <loop>:

static void loop(void)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	af00      	add	r7, sp, #0
	//imuTest_loop();
	mot_up_down();
 800a6d8:	f7ff ff70 	bl	800a5bc <mot_up_down>
	{
		char toPrint[2] = {gps.uartBuffer[0], '\0'};
		print(toPrint);
	}
	*/
}
 800a6dc:	bf00      	nop
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
	//GPS_read(&gps);
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a6f8:	f7f6 fd5a 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a6fc:	f000 f862 	bl	800a7c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a700:	f000 fb32 	bl	800ad68 <MX_GPIO_Init>
  MX_DMA_Init();
 800a704:	f000 fb08 	bl	800ad18 <MX_DMA_Init>
  MX_I2C1_Init();
 800a708:	f000 f8de 	bl	800a8c8 <MX_I2C1_Init>
  MX_RTC_Init();
 800a70c:	f000 f90a 	bl	800a924 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800a710:	f000 f92e 	bl	800a970 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800a714:	f000 f94c 	bl	800a9b0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800a718:	f000 f980 	bl	800aa1c <MX_TIM2_Init>
  MX_TIM3_Init();
 800a71c:	f000 f9cc 	bl	800aab8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800a720:	f000 fa4c 	bl	800abbc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800a724:	f000 face 	bl	800acc4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800a728:	f7ff fea8 	bl	800a47c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800a72c:	f001 f9be 	bl	800baac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800a730:	4820      	ldr	r0, [pc, #128]	; (800a7b4 <main+0xc0>)
 800a732:	f7fb f837 	bl	80057a4 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800a736:	2200      	movs	r2, #0
 800a738:	2180      	movs	r1, #128	; 0x80
 800a73a:	481f      	ldr	r0, [pc, #124]	; (800a7b8 <main+0xc4>)
 800a73c:	f7f7 fc28 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800a740:	2200      	movs	r2, #0
 800a742:	2140      	movs	r1, #64	; 0x40
 800a744:	481c      	ldr	r0, [pc, #112]	; (800a7b8 <main+0xc4>)
 800a746:	f7f7 fc23 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800a74a:	2200      	movs	r2, #0
 800a74c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a750:	481a      	ldr	r0, [pc, #104]	; (800a7bc <main+0xc8>)
 800a752:	f7f7 fc1d 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800a756:	2200      	movs	r2, #0
 800a758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a75c:	4817      	ldr	r0, [pc, #92]	; (800a7bc <main+0xc8>)
 800a75e:	f7f7 fc17 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800a762:	2200      	movs	r2, #0
 800a764:	2101      	movs	r1, #1
 800a766:	4816      	ldr	r0, [pc, #88]	; (800a7c0 <main+0xcc>)
 800a768:	f7f7 fc12 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800a76c:	2200      	movs	r2, #0
 800a76e:	2104      	movs	r1, #4
 800a770:	4813      	ldr	r0, [pc, #76]	; (800a7c0 <main+0xcc>)
 800a772:	f7f7 fc0d 	bl	8001f90 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800a776:	2200      	movs	r2, #0
 800a778:	2101      	movs	r1, #1
 800a77a:	480f      	ldr	r0, [pc, #60]	; (800a7b8 <main+0xc4>)
 800a77c:	f7f7 fc08 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800a780:	2200      	movs	r2, #0
 800a782:	2104      	movs	r1, #4
 800a784:	480c      	ldr	r0, [pc, #48]	; (800a7b8 <main+0xc4>)
 800a786:	f7f7 fc03 	bl	8001f90 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800a78a:	2200      	movs	r2, #0
 800a78c:	2102      	movs	r1, #2
 800a78e:	480a      	ldr	r0, [pc, #40]	; (800a7b8 <main+0xc4>)
 800a790:	f7f7 fbfe 	bl	8001f90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800a794:	2201      	movs	r2, #1
 800a796:	2108      	movs	r1, #8
 800a798:	4807      	ldr	r0, [pc, #28]	; (800a7b8 <main+0xc4>)
 800a79a:	f7f7 fbf9 	bl	8001f90 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2110      	movs	r1, #16
 800a7a2:	4807      	ldr	r0, [pc, #28]	; (800a7c0 <main+0xcc>)
 800a7a4:	f7f7 fbf4 	bl	8001f90 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800a7a8:	f7ff ff88 	bl	800a6bc <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800a7ac:	f7ff ff92 	bl	800a6d4 <loop>
 800a7b0:	e7fc      	b.n	800a7ac <main+0xb8>
 800a7b2:	bf00      	nop
 800a7b4:	20002f78 	.word	0x20002f78
 800a7b8:	40020800 	.word	0x40020800
 800a7bc:	40020400 	.word	0x40020400
 800a7c0:	40020000 	.word	0x40020000

0800a7c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b098      	sub	sp, #96	; 0x60
 800a7c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a7ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7ce:	2230      	movs	r2, #48	; 0x30
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 ff03 	bl	800c5de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a7d8:	f107 031c 	add.w	r3, r7, #28
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	605a      	str	r2, [r3, #4]
 800a7e2:	609a      	str	r2, [r3, #8]
 800a7e4:	60da      	str	r2, [r3, #12]
 800a7e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a7e8:	f107 030c 	add.w	r3, r7, #12
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	605a      	str	r2, [r3, #4]
 800a7f2:	609a      	str	r2, [r3, #8]
 800a7f4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60bb      	str	r3, [r7, #8]
 800a7fa:	4b31      	ldr	r3, [pc, #196]	; (800a8c0 <SystemClock_Config+0xfc>)
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	4a30      	ldr	r2, [pc, #192]	; (800a8c0 <SystemClock_Config+0xfc>)
 800a800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a804:	6413      	str	r3, [r2, #64]	; 0x40
 800a806:	4b2e      	ldr	r3, [pc, #184]	; (800a8c0 <SystemClock_Config+0xfc>)
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a80e:	60bb      	str	r3, [r7, #8]
 800a810:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
 800a816:	4b2b      	ldr	r3, [pc, #172]	; (800a8c4 <SystemClock_Config+0x100>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a2a      	ldr	r2, [pc, #168]	; (800a8c4 <SystemClock_Config+0x100>)
 800a81c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	4b28      	ldr	r3, [pc, #160]	; (800a8c4 <SystemClock_Config+0x100>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a82e:	2305      	movs	r3, #5
 800a830:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a838:	2301      	movs	r3, #1
 800a83a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a83c:	2302      	movs	r3, #2
 800a83e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a844:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800a846:	2306      	movs	r3, #6
 800a848:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a84a:	23a8      	movs	r3, #168	; 0xa8
 800a84c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a84e:	2302      	movs	r3, #2
 800a850:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a852:	2307      	movs	r3, #7
 800a854:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f8 fe64 	bl	8003528 <HAL_RCC_OscConfig>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a866:	f000 fb67 	bl	800af38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a86a:	230f      	movs	r3, #15
 800a86c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a86e:	2302      	movs	r3, #2
 800a870:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a872:	2300      	movs	r3, #0
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a876:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a87a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a87c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a882:	f107 031c 	add.w	r3, r7, #28
 800a886:	2105      	movs	r1, #5
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f9 f88f 	bl	80039ac <HAL_RCC_ClockConfig>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a894:	f000 fb50 	bl	800af38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a898:	2302      	movs	r3, #2
 800a89a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a89c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8a0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8a2:	f107 030c 	add.w	r3, r7, #12
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7f9 fa48 	bl	8003d3c <HAL_RCCEx_PeriphCLKConfig>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a8b2:	f000 fb41 	bl	800af38 <Error_Handler>
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3760      	adds	r7, #96	; 0x60
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	40023800 	.word	0x40023800
 800a8c4:	40007000 	.word	0x40007000

0800a8c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a8cc:	4b12      	ldr	r3, [pc, #72]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8ce:	4a13      	ldr	r2, [pc, #76]	; (800a91c <MX_I2C1_Init+0x54>)
 800a8d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a8d2:	4b11      	ldr	r3, [pc, #68]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8d4:	4a12      	ldr	r2, [pc, #72]	; (800a920 <MX_I2C1_Init+0x58>)
 800a8d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a8de:	4b0e      	ldr	r3, [pc, #56]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a8e4:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a8ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a8f2:	4b09      	ldr	r3, [pc, #36]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a8f8:	4b07      	ldr	r3, [pc, #28]	; (800a918 <MX_I2C1_Init+0x50>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a8fe:	4b06      	ldr	r3, [pc, #24]	; (800a918 <MX_I2C1_Init+0x50>)
 800a900:	2200      	movs	r2, #0
 800a902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a904:	4804      	ldr	r0, [pc, #16]	; (800a918 <MX_I2C1_Init+0x50>)
 800a906:	f7f7 fb5d 	bl	8001fc4 <HAL_I2C_Init>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a910:	f000 fb12 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a914:	bf00      	nop
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20002d48 	.word	0x20002d48
 800a91c:	40005400 	.word	0x40005400
 800a920:	00061a80 	.word	0x00061a80

0800a924 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a928:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <MX_RTC_Init+0x44>)
 800a92a:	4a10      	ldr	r2, [pc, #64]	; (800a96c <MX_RTC_Init+0x48>)
 800a92c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a92e:	4b0e      	ldr	r3, [pc, #56]	; (800a968 <MX_RTC_Init+0x44>)
 800a930:	2200      	movs	r2, #0
 800a932:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <MX_RTC_Init+0x44>)
 800a936:	227f      	movs	r2, #127	; 0x7f
 800a938:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <MX_RTC_Init+0x44>)
 800a93c:	22ff      	movs	r2, #255	; 0xff
 800a93e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <MX_RTC_Init+0x44>)
 800a942:	2200      	movs	r2, #0
 800a944:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a946:	4b08      	ldr	r3, [pc, #32]	; (800a968 <MX_RTC_Init+0x44>)
 800a948:	2200      	movs	r2, #0
 800a94a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <MX_RTC_Init+0x44>)
 800a94e:	2200      	movs	r2, #0
 800a950:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a952:	4805      	ldr	r0, [pc, #20]	; (800a968 <MX_RTC_Init+0x44>)
 800a954:	f7f9 fad4 	bl	8003f00 <HAL_RTC_Init>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a95e:	f000 faeb 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a962:	bf00      	nop
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20002e1c 	.word	0x20002e1c
 800a96c:	40002800 	.word	0x40002800

0800a970 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a970:	b480      	push	{r7}
 800a972:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a976:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <MX_SDIO_SD_Init+0x3c>)
 800a978:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a980:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a982:	2200      	movs	r2, #0
 800a984:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a986:	4b08      	ldr	r3, [pc, #32]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a988:	2200      	movs	r2, #0
 800a98a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a98c:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a98e:	2200      	movs	r2, #0
 800a990:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a994:	2200      	movs	r2, #0
 800a996:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <MX_SDIO_SD_Init+0x38>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a99e:	bf00      	nop
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr
 800a9a8:	20002e9c 	.word	0x20002e9c
 800a9ac:	40012c00 	.word	0x40012c00

0800a9b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a9b4:	4b17      	ldr	r3, [pc, #92]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9b6:	4a18      	ldr	r2, [pc, #96]	; (800aa18 <MX_SPI1_Init+0x68>)
 800a9b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a9ba:	4b16      	ldr	r3, [pc, #88]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a9c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a9c2:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9c8:	4b12      	ldr	r3, [pc, #72]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a9ce:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a9d4:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a9da:	4b0e      	ldr	r3, [pc, #56]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9e4:	2218      	movs	r2, #24
 800a9e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a9ee:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9f4:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a9fa:	4b06      	ldr	r3, [pc, #24]	; (800aa14 <MX_SPI1_Init+0x64>)
 800a9fc:	220a      	movs	r2, #10
 800a9fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800aa00:	4804      	ldr	r0, [pc, #16]	; (800aa14 <MX_SPI1_Init+0x64>)
 800aa02:	f7fa fe40 	bl	8005686 <HAL_SPI_Init>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800aa0c:	f000 fa94 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800aa10:	bf00      	nop
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	20002f20 	.word	0x20002f20
 800aa18:	40013000 	.word	0x40013000

0800aa1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	605a      	str	r2, [r3, #4]
 800aa2c:	609a      	str	r2, [r3, #8]
 800aa2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa30:	463b      	mov	r3, r7
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800aa38:	4b1d      	ldr	r3, [pc, #116]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa42:	2253      	movs	r2, #83	; 0x53
 800aa44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa46:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800aa4c:	4b18      	ldr	r3, [pc, #96]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa4e:	4a19      	ldr	r2, [pc, #100]	; (800aab4 <MX_TIM2_Init+0x98>)
 800aa50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa58:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800aa5e:	4814      	ldr	r0, [pc, #80]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa60:	f7fa fe75 	bl	800574e <HAL_TIM_Base_Init>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800aa6a:	f000 fa65 	bl	800af38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800aa74:	f107 0308 	add.w	r3, r7, #8
 800aa78:	4619      	mov	r1, r3
 800aa7a:	480d      	ldr	r0, [pc, #52]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa7c:	f7fa fff0 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800aa86:	f000 fa57 	bl	800af38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aa92:	463b      	mov	r3, r7
 800aa94:	4619      	mov	r1, r3
 800aa96:	4806      	ldr	r0, [pc, #24]	; (800aab0 <MX_TIM2_Init+0x94>)
 800aa98:	f7fb fba9 	bl	80061ee <HAL_TIMEx_MasterConfigSynchronization>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800aaa2:	f000 fa49 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800aaa6:	bf00      	nop
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20002f78 	.word	0x20002f78
 800aab4:	fa56ea00 	.word	0xfa56ea00

0800aab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b08e      	sub	sp, #56	; 0x38
 800aabc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aabe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	605a      	str	r2, [r3, #4]
 800aac8:	609a      	str	r2, [r3, #8]
 800aaca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aacc:	f107 0320 	add.w	r3, r7, #32
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aad6:	1d3b      	adds	r3, r7, #4
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	605a      	str	r2, [r3, #4]
 800aade:	609a      	str	r2, [r3, #8]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	611a      	str	r2, [r3, #16]
 800aae4:	615a      	str	r2, [r3, #20]
 800aae6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800aae8:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800aaea:	4a33      	ldr	r2, [pc, #204]	; (800abb8 <MX_TIM3_Init+0x100>)
 800aaec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800aaee:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800aaf0:	22a7      	movs	r2, #167	; 0xa7
 800aaf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaf4:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800aafa:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800aafc:	f242 7210 	movw	r2, #10000	; 0x2710
 800ab00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab02:	4b2c      	ldr	r3, [pc, #176]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab08:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ab0e:	4829      	ldr	r0, [pc, #164]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab10:	f7fa fe1d 	bl	800574e <HAL_TIM_Base_Init>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800ab1a:	f000 fa0d 	bl	800af38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ab1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ab24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4822      	ldr	r0, [pc, #136]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab2c:	f7fa ff98 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800ab36:	f000 f9ff 	bl	800af38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ab3a:	481e      	ldr	r0, [pc, #120]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab3c:	f7fa fe56 	bl	80057ec <HAL_TIM_PWM_Init>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800ab46:	f000 f9f7 	bl	800af38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ab52:	f107 0320 	add.w	r3, r7, #32
 800ab56:	4619      	mov	r1, r3
 800ab58:	4816      	ldr	r0, [pc, #88]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab5a:	f7fb fb48 	bl	80061ee <HAL_TIMEx_MasterConfigSynchronization>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800ab64:	f000 f9e8 	bl	800af38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ab68:	2360      	movs	r3, #96	; 0x60
 800ab6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800ab6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ab70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ab7a:	1d3b      	adds	r3, r7, #4
 800ab7c:	2208      	movs	r2, #8
 800ab7e:	4619      	mov	r1, r3
 800ab80:	480c      	ldr	r0, [pc, #48]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab82:	f7fa fea7 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800ab8c:	f000 f9d4 	bl	800af38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ab90:	1d3b      	adds	r3, r7, #4
 800ab92:	220c      	movs	r2, #12
 800ab94:	4619      	mov	r1, r3
 800ab96:	4807      	ldr	r0, [pc, #28]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800ab98:	f7fa fe9c 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800aba2:	f000 f9c9 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800aba6:	4803      	ldr	r0, [pc, #12]	; (800abb4 <MX_TIM3_Init+0xfc>)
 800aba8:	f000 fe0c 	bl	800b7c4 <HAL_TIM_MspPostInit>

}
 800abac:	bf00      	nop
 800abae:	3738      	adds	r7, #56	; 0x38
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20002ddc 	.word	0x20002ddc
 800abb8:	40000400 	.word	0x40000400

0800abbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08e      	sub	sp, #56	; 0x38
 800abc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800abc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	605a      	str	r2, [r3, #4]
 800abcc:	609a      	str	r2, [r3, #8]
 800abce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abd0:	f107 0320 	add.w	r3, r7, #32
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800abda:	1d3b      	adds	r3, r7, #4
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	605a      	str	r2, [r3, #4]
 800abe2:	609a      	str	r2, [r3, #8]
 800abe4:	60da      	str	r2, [r3, #12]
 800abe6:	611a      	str	r2, [r3, #16]
 800abe8:	615a      	str	r2, [r3, #20]
 800abea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800abec:	4b33      	ldr	r3, [pc, #204]	; (800acbc <MX_TIM5_Init+0x100>)
 800abee:	4a34      	ldr	r2, [pc, #208]	; (800acc0 <MX_TIM5_Init+0x104>)
 800abf0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800abf2:	4b32      	ldr	r3, [pc, #200]	; (800acbc <MX_TIM5_Init+0x100>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abf8:	4b30      	ldr	r3, [pc, #192]	; (800acbc <MX_TIM5_Init+0x100>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800abfe:	4b2f      	ldr	r3, [pc, #188]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac06:	4b2d      	ldr	r3, [pc, #180]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac0c:	4b2b      	ldr	r3, [pc, #172]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800ac12:	482a      	ldr	r0, [pc, #168]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac14:	f7fa fd9b 	bl	800574e <HAL_TIM_Base_Init>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800ac1e:	f000 f98b 	bl	800af38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800ac28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4823      	ldr	r0, [pc, #140]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac30:	f7fa ff16 	bl	8005a60 <HAL_TIM_ConfigClockSource>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800ac3a:	f000 f97d 	bl	800af38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800ac3e:	481f      	ldr	r0, [pc, #124]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac40:	f7fa fdd4 	bl	80057ec <HAL_TIM_PWM_Init>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800ac4a:	f000 f975 	bl	800af38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac52:	2300      	movs	r3, #0
 800ac54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ac56:	f107 0320 	add.w	r3, r7, #32
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4817      	ldr	r0, [pc, #92]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac5e:	f7fb fac6 	bl	80061ee <HAL_TIMEx_MasterConfigSynchronization>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800ac68:	f000 f966 	bl	800af38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800ac6c:	2370      	movs	r3, #112	; 0x70
 800ac6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800ac70:	2364      	movs	r3, #100	; 0x64
 800ac72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ac7c:	1d3b      	adds	r3, r7, #4
 800ac7e:	2204      	movs	r2, #4
 800ac80:	4619      	mov	r1, r3
 800ac82:	480e      	ldr	r0, [pc, #56]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac84:	f7fa fe26 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800ac8e:	f000 f953 	bl	800af38 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800ac92:	2304      	movs	r3, #4
 800ac94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ac96:	1d3b      	adds	r3, r7, #4
 800ac98:	220c      	movs	r2, #12
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4807      	ldr	r0, [pc, #28]	; (800acbc <MX_TIM5_Init+0x100>)
 800ac9e:	f7fa fe19 	bl	80058d4 <HAL_TIM_PWM_ConfigChannel>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800aca8:	f000 f946 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800acac:	4803      	ldr	r0, [pc, #12]	; (800acbc <MX_TIM5_Init+0x100>)
 800acae:	f000 fd89 	bl	800b7c4 <HAL_TIM_MspPostInit>

}
 800acb2:	bf00      	nop
 800acb4:	3738      	adds	r7, #56	; 0x38
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20002d9c 	.word	0x20002d9c
 800acc0:	40000c00 	.word	0x40000c00

0800acc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800acc8:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acca:	4a12      	ldr	r2, [pc, #72]	; (800ad14 <MX_USART3_UART_Init+0x50>)
 800accc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800acce:	4b10      	ldr	r3, [pc, #64]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800acd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800acd6:	4b0e      	ldr	r3, [pc, #56]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acd8:	2200      	movs	r2, #0
 800acda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800acdc:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acde:	2200      	movs	r2, #0
 800ace0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ace2:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ace8:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acea:	220c      	movs	r2, #12
 800acec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acee:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acf6:	2200      	movs	r2, #0
 800acf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800acfa:	4805      	ldr	r0, [pc, #20]	; (800ad10 <MX_USART3_UART_Init+0x4c>)
 800acfc:	f7fb fabc 	bl	8006278 <HAL_UART_Init>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800ad06:	f000 f917 	bl	800af38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800ad0a:	bf00      	nop
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20002d08 	.word	0x20002d08
 800ad14:	40004800 	.word	0x40004800

0800ad18 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ad1e:	2300      	movs	r3, #0
 800ad20:	607b      	str	r3, [r7, #4]
 800ad22:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <MX_DMA_Init+0x4c>)
 800ad24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad26:	4a0f      	ldr	r2, [pc, #60]	; (800ad64 <MX_DMA_Init+0x4c>)
 800ad28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ad2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad2e:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <MX_DMA_Init+0x4c>)
 800ad30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	203b      	movs	r0, #59	; 0x3b
 800ad40:	f7f6 fba5 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800ad44:	203b      	movs	r0, #59	; 0x3b
 800ad46:	f7f6 fbbe 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	2045      	movs	r0, #69	; 0x45
 800ad50:	f7f6 fb9d 	bl	800148e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800ad54:	2045      	movs	r0, #69	; 0x45
 800ad56:	f7f6 fbb6 	bl	80014c6 <HAL_NVIC_EnableIRQ>

}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	40023800 	.word	0x40023800

0800ad68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	; 0x28
 800ad6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad6e:	f107 0314 	add.w	r3, r7, #20
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	605a      	str	r2, [r3, #4]
 800ad78:	609a      	str	r2, [r3, #8]
 800ad7a:	60da      	str	r2, [r3, #12]
 800ad7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad7e:	2300      	movs	r3, #0
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	4b63      	ldr	r3, [pc, #396]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	4a62      	ldr	r2, [pc, #392]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ad88:	f043 0304 	orr.w	r3, r3, #4
 800ad8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad8e:	4b60      	ldr	r3, [pc, #384]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ad90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	613b      	str	r3, [r7, #16]
 800ad98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	4b5c      	ldr	r3, [pc, #368]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	4a5b      	ldr	r2, [pc, #364]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ada4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada8:	6313      	str	r3, [r2, #48]	; 0x30
 800adaa:	4b59      	ldr	r3, [pc, #356]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]
 800adba:	4b55      	ldr	r3, [pc, #340]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbe:	4a54      	ldr	r2, [pc, #336]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adc0:	f043 0301 	orr.w	r3, r3, #1
 800adc4:	6313      	str	r3, [r2, #48]	; 0x30
 800adc6:	4b52      	ldr	r3, [pc, #328]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800add2:	2300      	movs	r3, #0
 800add4:	607b      	str	r3, [r7, #4]
 800add6:	4b4e      	ldr	r3, [pc, #312]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adda:	4a4d      	ldr	r2, [pc, #308]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	6313      	str	r3, [r2, #48]	; 0x30
 800ade2:	4b4b      	ldr	r3, [pc, #300]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ade4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800adee:	2300      	movs	r3, #0
 800adf0:	603b      	str	r3, [r7, #0]
 800adf2:	4b47      	ldr	r3, [pc, #284]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf6:	4a46      	ldr	r2, [pc, #280]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800adf8:	f043 0308 	orr.w	r3, r3, #8
 800adfc:	6313      	str	r3, [r2, #48]	; 0x30
 800adfe:	4b44      	ldr	r3, [pc, #272]	; (800af10 <MX_GPIO_Init+0x1a8>)
 800ae00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	21ef      	movs	r1, #239	; 0xef
 800ae0e:	4841      	ldr	r0, [pc, #260]	; (800af14 <MX_GPIO_Init+0x1ac>)
 800ae10:	f7f7 f8be 	bl	8001f90 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800ae14:	2200      	movs	r2, #0
 800ae16:	2115      	movs	r1, #21
 800ae18:	483f      	ldr	r0, [pc, #252]	; (800af18 <MX_GPIO_Init+0x1b0>)
 800ae1a:	f7f7 f8b9 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800ae24:	483d      	ldr	r0, [pc, #244]	; (800af1c <MX_GPIO_Init+0x1b4>)
 800ae26:	f7f7 f8b3 	bl	8001f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800ae2a:	23cf      	movs	r3, #207	; 0xcf
 800ae2c:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae36:	2300      	movs	r3, #0
 800ae38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae3a:	f107 0314 	add.w	r3, r7, #20
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4834      	ldr	r0, [pc, #208]	; (800af14 <MX_GPIO_Init+0x1ac>)
 800ae42:	f7f6 fef3 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800ae46:	2305      	movs	r3, #5
 800ae48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae52:	2300      	movs	r3, #0
 800ae54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae56:	f107 0314 	add.w	r3, r7, #20
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	482e      	ldr	r0, [pc, #184]	; (800af18 <MX_GPIO_Init+0x1b0>)
 800ae5e:	f7f6 fee5 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800ae62:	2310      	movs	r3, #16
 800ae64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae66:	2301      	movs	r3, #1
 800ae68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800ae72:	f107 0314 	add.w	r3, r7, #20
 800ae76:	4619      	mov	r1, r3
 800ae78:	4827      	ldr	r0, [pc, #156]	; (800af18 <MX_GPIO_Init+0x1b0>)
 800ae7a:	f7f6 fed7 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800ae7e:	23c0      	movs	r3, #192	; 0xc0
 800ae80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ae82:	4b27      	ldr	r3, [pc, #156]	; (800af20 <MX_GPIO_Init+0x1b8>)
 800ae84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4821      	ldr	r0, [pc, #132]	; (800af18 <MX_GPIO_Init+0x1b0>)
 800ae92:	f7f6 fecb 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800ae96:	2320      	movs	r3, #32
 800ae98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aea2:	2300      	movs	r3, #0
 800aea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800aea6:	f107 0314 	add.w	r3, r7, #20
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4819      	ldr	r0, [pc, #100]	; (800af14 <MX_GPIO_Init+0x1ac>)
 800aeae:	f7f6 febd 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800aeb2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800aeb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aec0:	2300      	movs	r3, #0
 800aec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	4619      	mov	r1, r3
 800aeca:	4814      	ldr	r0, [pc, #80]	; (800af1c <MX_GPIO_Init+0x1b4>)
 800aecc:	f7f6 feae 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800aed0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800aed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aeda:	2301      	movs	r3, #1
 800aedc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aede:	f107 0314 	add.w	r3, r7, #20
 800aee2:	4619      	mov	r1, r3
 800aee4:	480c      	ldr	r0, [pc, #48]	; (800af18 <MX_GPIO_Init+0x1b0>)
 800aee6:	f7f6 fea1 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800aeea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aef0:	2301      	movs	r3, #1
 800aef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aef4:	2302      	movs	r3, #2
 800aef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aef8:	2300      	movs	r3, #0
 800aefa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800aefc:	f107 0314 	add.w	r3, r7, #20
 800af00:	4619      	mov	r1, r3
 800af02:	4806      	ldr	r0, [pc, #24]	; (800af1c <MX_GPIO_Init+0x1b4>)
 800af04:	f7f6 fe92 	bl	8001c2c <HAL_GPIO_Init>

}
 800af08:	bf00      	nop
 800af0a:	3728      	adds	r7, #40	; 0x28
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	40023800 	.word	0x40023800
 800af14:	40020800 	.word	0x40020800
 800af18:	40020000 	.word	0x40020000
 800af1c:	40020400 	.word	0x40020400
 800af20:	10110000 	.word	0x10110000

0800af24 <Get_TIM5_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
 800af28:	4b02      	ldr	r3, [pc, #8]	; (800af34 <Get_TIM5_Instance+0x10>)
 800af2a:	4618      	mov	r0, r3
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	20002d9c 	.word	0x20002d9c

0800af38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800af3c:	bf00      	nop
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800af4e:	f7f6 f995 	bl	800127c <HAL_GetTick>
 800af52:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800af54:	e006      	b.n	800af64 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af56:	f7ff fa3b 	bl	800a3d0 <BSP_SD_GetCardState>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af60:	2300      	movs	r3, #0
 800af62:	e009      	b.n	800af78 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800af64:	f7f6 f98a 	bl	800127c <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d8f0      	bhi.n	800af56 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800af74:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	4603      	mov	r3, r0
 800af88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af8a:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <SD_CheckStatus+0x38>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800af90:	f7ff fa1e 	bl	800a3d0 <BSP_SD_GetCardState>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d107      	bne.n	800afaa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af9a:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <SD_CheckStatus+0x38>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <SD_CheckStatus+0x38>)
 800afa8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800afaa:	4b03      	ldr	r3, [pc, #12]	; (800afb8 <SD_CheckStatus+0x38>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b2db      	uxtb	r3, r3
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000011b 	.word	0x2000011b

0800afbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800afc6:	f7ff f9a9 	bl	800a31c <BSP_SD_Init>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d107      	bne.n	800afe0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff ffd4 	bl	800af80 <SD_CheckStatus>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <SD_initialize+0x34>)
 800afde:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800afe0:	4b03      	ldr	r3, [pc, #12]	; (800aff0 <SD_initialize+0x34>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b2db      	uxtb	r3, r3
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	2000011b 	.word	0x2000011b

0800aff4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff ffbd 	bl	800af80 <SD_CheckStatus>
 800b006:	4603      	mov	r3, r0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b024:	f247 5030 	movw	r0, #30000	; 0x7530
 800b028:	f7ff ff8d 	bl	800af46 <SD_CheckStatusWithTimeout>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da01      	bge.n	800b036 <SD_read+0x26>
  {
    return res;
 800b032:	7ffb      	ldrb	r3, [r7, #31]
 800b034:	e08b      	b.n	800b14e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f040 8085 	bne.w	800b14c <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	68b8      	ldr	r0, [r7, #8]
 800b048:	f7ff f98e 	bl	800a368 <BSP_SD_ReadBlocks_DMA>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d133      	bne.n	800b0ba <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b052:	4b41      	ldr	r3, [pc, #260]	; (800b158 <SD_read+0x148>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b058:	f7f6 f910 	bl	800127c <HAL_GetTick>
 800b05c:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b05e:	bf00      	nop
 800b060:	4b3d      	ldr	r3, [pc, #244]	; (800b158 <SD_read+0x148>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d108      	bne.n	800b07a <SD_read+0x6a>
 800b068:	f7f6 f908 	bl	800127c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	f247 522f 	movw	r2, #29999	; 0x752f
 800b076:	4293      	cmp	r3, r2
 800b078:	d9f2      	bls.n	800b060 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b07a:	4b37      	ldr	r3, [pc, #220]	; (800b158 <SD_read+0x148>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	77fb      	strb	r3, [r7, #31]
 800b086:	e061      	b.n	800b14c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b088:	4b33      	ldr	r3, [pc, #204]	; (800b158 <SD_read+0x148>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b08e:	f7f6 f8f5 	bl	800127c <HAL_GetTick>
 800b092:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b094:	e007      	b.n	800b0a6 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b096:	f7ff f99b 	bl	800a3d0 <BSP_SD_GetCardState>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d102      	bne.n	800b0a6 <SD_read+0x96>
          {
            res = RES_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b0a4:	e052      	b.n	800b14c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0a6:	f7f6 f8e9 	bl	800127c <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d9ee      	bls.n	800b096 <SD_read+0x86>
 800b0b8:	e048      	b.n	800b14c <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	e034      	b.n	800b12a <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4824      	ldr	r0, [pc, #144]	; (800b15c <SD_read+0x14c>)
 800b0cc:	f7ff f94c 	bl	800a368 <BSP_SD_ReadBlocks_DMA>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b0d4:	7fbb      	ldrb	r3, [r7, #30]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d12c      	bne.n	800b134 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b0da:	4b1f      	ldr	r3, [pc, #124]	; (800b158 <SD_read+0x148>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b0e0:	f7f6 f8cc 	bl	800127c <HAL_GetTick>
 800b0e4:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b0e6:	bf00      	nop
 800b0e8:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <SD_read+0x148>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d108      	bne.n	800b102 <SD_read+0xf2>
 800b0f0:	f7f6 f8c4 	bl	800127c <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d9f2      	bls.n	800b0e8 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b102:	4b15      	ldr	r3, [pc, #84]	; (800b158 <SD_read+0x148>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	4a13      	ldr	r2, [pc, #76]	; (800b15c <SD_read+0x14c>)
 800b10e:	4618      	mov	r0, r3
 800b110:	4611      	mov	r1, r2
 800b112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b116:	461a      	mov	r2, r3
 800b118:	f001 fa56 	bl	800c5c8 <memcpy>
          buff += BLOCKSIZE;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b122:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	3301      	adds	r3, #1
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d8c6      	bhi.n	800b0c0 <SD_read+0xb0>
 800b132:	e002      	b.n	800b13a <SD_read+0x12a>
        }
        else
        {
          break;
 800b134:	bf00      	nop
 800b136:	e000      	b.n	800b13a <SD_read+0x12a>
            break;
 800b138:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	683a      	ldr	r2, [r7, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d104      	bne.n	800b14c <SD_read+0x13c>
 800b142:	7fbb      	ldrb	r3, [r7, #30]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <SD_read+0x13c>
        res = RES_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b14c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3720      	adds	r7, #32
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	2000098c 	.word	0x2000098c
 800b15c:	20000788 	.word	0x20000788

0800b160 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b174:	4b4c      	ldr	r3, [pc, #304]	; (800b2a8 <SD_write+0x148>)
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b17a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b17e:	f7ff fee2 	bl	800af46 <SD_CheckStatusWithTimeout>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	da01      	bge.n	800b18c <SD_write+0x2c>
  {
    return res;
 800b188:	7ffb      	ldrb	r3, [r7, #31]
 800b18a:	e088      	b.n	800b29e <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	f003 0303 	and.w	r3, r3, #3
 800b192:	2b00      	cmp	r3, #0
 800b194:	f040 8082 	bne.w	800b29c <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	68b8      	ldr	r0, [r7, #8]
 800b19e:	f7ff f8fd 	bl	800a39c <BSP_SD_WriteBlocks_DMA>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d130      	bne.n	800b20a <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b1a8:	f7f6 f868 	bl	800127c <HAL_GetTick>
 800b1ac:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1ae:	bf00      	nop
 800b1b0:	4b3d      	ldr	r3, [pc, #244]	; (800b2a8 <SD_write+0x148>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d108      	bne.n	800b1ca <SD_write+0x6a>
 800b1b8:	f7f6 f860 	bl	800127c <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d9f2      	bls.n	800b1b0 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b1ca:	4b37      	ldr	r3, [pc, #220]	; (800b2a8 <SD_write+0x148>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d102      	bne.n	800b1d8 <SD_write+0x78>
      {
        res = RES_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	77fb      	strb	r3, [r7, #31]
 800b1d6:	e061      	b.n	800b29c <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800b1d8:	4b33      	ldr	r3, [pc, #204]	; (800b2a8 <SD_write+0x148>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1de:	f7f6 f84d 	bl	800127c <HAL_GetTick>
 800b1e2:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1e4:	e007      	b.n	800b1f6 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1e6:	f7ff f8f3 	bl	800a3d0 <BSP_SD_GetCardState>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <SD_write+0x96>
          {
            res = RES_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	77fb      	strb	r3, [r7, #31]
            break;
 800b1f4:	e052      	b.n	800b29c <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f6:	f7f6 f841 	bl	800127c <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	f247 522f 	movw	r2, #29999	; 0x752f
 800b204:	4293      	cmp	r3, r2
 800b206:	d9ee      	bls.n	800b1e6 <SD_write+0x86>
 800b208:	e048      	b.n	800b29c <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800b20a:	2300      	movs	r3, #0
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	e034      	b.n	800b27a <SD_write+0x11a>
      {
        WriteStatus = 0;
 800b210:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <SD_write+0x148>)
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	4619      	mov	r1, r3
 800b220:	4822      	ldr	r0, [pc, #136]	; (800b2ac <SD_write+0x14c>)
 800b222:	f7ff f8bb 	bl	800a39c <BSP_SD_WriteBlocks_DMA>
 800b226:	4603      	mov	r3, r0
 800b228:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b22a:	7fbb      	ldrb	r3, [r7, #30]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d129      	bne.n	800b284 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800b230:	f7f6 f824 	bl	800127c <HAL_GetTick>
 800b234:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b236:	bf00      	nop
 800b238:	4b1b      	ldr	r3, [pc, #108]	; (800b2a8 <SD_write+0x148>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d108      	bne.n	800b252 <SD_write+0xf2>
 800b240:	f7f6 f81c 	bl	800127c <HAL_GetTick>
 800b244:	4602      	mov	r2, r0
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b24e:	4293      	cmp	r3, r2
 800b250:	d9f2      	bls.n	800b238 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800b252:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <SD_write+0x148>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d016      	beq.n	800b288 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <SD_write+0x14c>)
 800b25e:	4618      	mov	r0, r3
 800b260:	4611      	mov	r1, r2
 800b262:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b266:	461a      	mov	r2, r3
 800b268:	f001 f9ae 	bl	800c5c8 <memcpy>
          buff += BLOCKSIZE;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b272:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	3301      	adds	r3, #1
 800b278:	61bb      	str	r3, [r7, #24]
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d8c6      	bhi.n	800b210 <SD_write+0xb0>
 800b282:	e002      	b.n	800b28a <SD_write+0x12a>
        }
        else
        {
          break;
 800b284:	bf00      	nop
 800b286:	e000      	b.n	800b28a <SD_write+0x12a>
            break;
 800b288:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d104      	bne.n	800b29c <SD_write+0x13c>
 800b292:	7fbb      	ldrb	r3, [r7, #30]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <SD_write+0x13c>
        res = RES_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800b29c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3720      	adds	r7, #32
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000988 	.word	0x20000988
 800b2ac:	20000788 	.word	0x20000788

0800b2b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08c      	sub	sp, #48	; 0x30
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	603a      	str	r2, [r7, #0]
 800b2ba:	71fb      	strb	r3, [r7, #7]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2c6:	4b25      	ldr	r3, [pc, #148]	; (800b35c <SD_ioctl+0xac>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <SD_ioctl+0x28>
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e03c      	b.n	800b352 <SD_ioctl+0xa2>

  switch (cmd)
 800b2d8:	79bb      	ldrb	r3, [r7, #6]
 800b2da:	2b03      	cmp	r3, #3
 800b2dc:	d834      	bhi.n	800b348 <SD_ioctl+0x98>
 800b2de:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <SD_ioctl+0x34>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b2f5 	.word	0x0800b2f5
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b315 	.word	0x0800b315
 800b2f0:	0800b32f 	.word	0x0800b32f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b2fa:	e028      	b.n	800b34e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b2fc:	f107 030c 	add.w	r3, r7, #12
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff f875 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b312:	e01c      	b.n	800b34e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b314:	f107 030c 	add.w	r3, r7, #12
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff f869 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b320:	b29a      	uxth	r2, r3
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b32c:	e00f      	b.n	800b34e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b32e:	f107 030c 	add.w	r3, r7, #12
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff f85c 	bl	800a3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	0a5a      	lsrs	r2, r3, #9
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b346:	e002      	b.n	800b34e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b348:	2304      	movs	r3, #4
 800b34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b34e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b352:	4618      	mov	r0, r3
 800b354:	3730      	adds	r7, #48	; 0x30
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	2000011b 	.word	0x2000011b

0800b360 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800b364:	4b03      	ldr	r3, [pc, #12]	; (800b374 <BSP_SD_WriteCpltCallback+0x14>)
 800b366:	2201      	movs	r2, #1
 800b368:	601a      	str	r2, [r3, #0]
}
 800b36a:	bf00      	nop
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	20000988 	.word	0x20000988

0800b378 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b37c:	4b03      	ldr	r3, [pc, #12]	; (800b38c <BSP_SD_ReadCpltCallback+0x14>)
 800b37e:	2201      	movs	r2, #1
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	2000098c 	.word	0x2000098c

0800b390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b396:	2300      	movs	r3, #0
 800b398:	607b      	str	r3, [r7, #4]
 800b39a:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <HAL_MspInit+0x4c>)
 800b39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39e:	4a0f      	ldr	r2, [pc, #60]	; (800b3dc <HAL_MspInit+0x4c>)
 800b3a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3a4:	6453      	str	r3, [r2, #68]	; 0x44
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <HAL_MspInit+0x4c>)
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	603b      	str	r3, [r7, #0]
 800b3b6:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <HAL_MspInit+0x4c>)
 800b3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ba:	4a08      	ldr	r2, [pc, #32]	; (800b3dc <HAL_MspInit+0x4c>)
 800b3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c0:	6413      	str	r3, [r2, #64]	; 0x40
 800b3c2:	4b06      	ldr	r3, [pc, #24]	; (800b3dc <HAL_MspInit+0x4c>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	40023800 	.word	0x40023800

0800b3e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08a      	sub	sp, #40	; 0x28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3e8:	f107 0314 	add.w	r3, r7, #20
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	605a      	str	r2, [r3, #4]
 800b3f2:	609a      	str	r2, [r3, #8]
 800b3f4:	60da      	str	r2, [r3, #12]
 800b3f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a19      	ldr	r2, [pc, #100]	; (800b464 <HAL_I2C_MspInit+0x84>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d12b      	bne.n	800b45a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b402:	2300      	movs	r3, #0
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	4b18      	ldr	r3, [pc, #96]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	4a17      	ldr	r2, [pc, #92]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b40c:	f043 0302 	orr.w	r3, r3, #2
 800b410:	6313      	str	r3, [r2, #48]	; 0x30
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800b41e:	23c0      	movs	r3, #192	; 0xc0
 800b420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b422:	2312      	movs	r3, #18
 800b424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b426:	2300      	movs	r3, #0
 800b428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b42a:	2303      	movs	r3, #3
 800b42c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b42e:	2304      	movs	r3, #4
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b432:	f107 0314 	add.w	r3, r7, #20
 800b436:	4619      	mov	r1, r3
 800b438:	480c      	ldr	r0, [pc, #48]	; (800b46c <HAL_I2C_MspInit+0x8c>)
 800b43a:	f7f6 fbf7 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	4a08      	ldr	r2, [pc, #32]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b44c:	6413      	str	r3, [r2, #64]	; 0x40
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <HAL_I2C_MspInit+0x88>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b456:	60fb      	str	r3, [r7, #12]
 800b458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800b45a:	bf00      	nop
 800b45c:	3728      	adds	r7, #40	; 0x28
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40005400 	.word	0x40005400
 800b468:	40023800 	.word	0x40023800
 800b46c:	40020400 	.word	0x40020400

0800b470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a05      	ldr	r2, [pc, #20]	; (800b494 <HAL_RTC_MspInit+0x24>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d102      	bne.n	800b488 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <HAL_RTC_MspInit+0x28>)
 800b484:	2201      	movs	r2, #1
 800b486:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	40002800 	.word	0x40002800
 800b498:	42470e3c 	.word	0x42470e3c

0800b49c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	605a      	str	r2, [r3, #4]
 800b4ae:	609a      	str	r2, [r3, #8]
 800b4b0:	60da      	str	r2, [r3, #12]
 800b4b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a70      	ldr	r2, [pc, #448]	; (800b67c <HAL_SD_MspInit+0x1e0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	f040 80da 	bne.w	800b674 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	613b      	str	r3, [r7, #16]
 800b4c4:	4b6e      	ldr	r3, [pc, #440]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c8:	4a6d      	ldr	r2, [pc, #436]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4ce:	6453      	str	r3, [r2, #68]	; 0x44
 800b4d0:	4b6b      	ldr	r3, [pc, #428]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4dc:	2300      	movs	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]
 800b4e0:	4b67      	ldr	r3, [pc, #412]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e4:	4a66      	ldr	r2, [pc, #408]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4e6:	f043 0304 	orr.w	r3, r3, #4
 800b4ea:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ec:	4b64      	ldr	r3, [pc, #400]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f0:	f003 0304 	and.w	r3, r3, #4
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60bb      	str	r3, [r7, #8]
 800b4fc:	4b60      	ldr	r3, [pc, #384]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b500:	4a5f      	ldr	r2, [pc, #380]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b502:	f043 0308 	orr.w	r3, r3, #8
 800b506:	6313      	str	r3, [r2, #48]	; 0x30
 800b508:	4b5d      	ldr	r3, [pc, #372]	; (800b680 <HAL_SD_MspInit+0x1e4>)
 800b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	60bb      	str	r3, [r7, #8]
 800b512:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800b514:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b51a:	2302      	movs	r3, #2
 800b51c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b51e:	2301      	movs	r3, #1
 800b520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b522:	2303      	movs	r3, #3
 800b524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b526:	230c      	movs	r3, #12
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b52a:	f107 0314 	add.w	r3, r7, #20
 800b52e:	4619      	mov	r1, r3
 800b530:	4854      	ldr	r0, [pc, #336]	; (800b684 <HAL_SD_MspInit+0x1e8>)
 800b532:	f7f6 fb7b 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b536:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b53a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b53c:	2302      	movs	r3, #2
 800b53e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b540:	2300      	movs	r3, #0
 800b542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b544:	2303      	movs	r3, #3
 800b546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b548:	230c      	movs	r3, #12
 800b54a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	4619      	mov	r1, r3
 800b552:	484c      	ldr	r0, [pc, #304]	; (800b684 <HAL_SD_MspInit+0x1e8>)
 800b554:	f7f6 fb6a 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b558:	2304      	movs	r3, #4
 800b55a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b55c:	2302      	movs	r3, #2
 800b55e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b560:	2301      	movs	r3, #1
 800b562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b564:	2303      	movs	r3, #3
 800b566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b568:	230c      	movs	r3, #12
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b56c:	f107 0314 	add.w	r3, r7, #20
 800b570:	4619      	mov	r1, r3
 800b572:	4845      	ldr	r0, [pc, #276]	; (800b688 <HAL_SD_MspInit+0x1ec>)
 800b574:	f7f6 fb5a 	bl	8001c2c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800b578:	4b44      	ldr	r3, [pc, #272]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b57a:	4a45      	ldr	r2, [pc, #276]	; (800b690 <HAL_SD_MspInit+0x1f4>)
 800b57c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800b57e:	4b43      	ldr	r3, [pc, #268]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b584:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b586:	4b41      	ldr	r3, [pc, #260]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b588:	2200      	movs	r2, #0
 800b58a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b58c:	4b3f      	ldr	r3, [pc, #252]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b58e:	2200      	movs	r2, #0
 800b590:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b592:	4b3e      	ldr	r3, [pc, #248]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b598:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b59a:	4b3c      	ldr	r3, [pc, #240]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b59c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b5a0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b5a2:	4b3a      	ldr	r3, [pc, #232]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b5a8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800b5aa:	4b38      	ldr	r3, [pc, #224]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b5b6:	4b35      	ldr	r3, [pc, #212]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5b8:	2204      	movs	r2, #4
 800b5ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b5bc:	4b33      	ldr	r3, [pc, #204]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5be:	2203      	movs	r2, #3
 800b5c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800b5c2:	4b32      	ldr	r3, [pc, #200]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b5c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b5ca:	4b30      	ldr	r3, [pc, #192]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b5d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800b5d2:	482e      	ldr	r0, [pc, #184]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5d4:	f7f5 ff92 	bl	80014fc <HAL_DMA_Init>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800b5de:	f7ff fcab 	bl	800af38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a29      	ldr	r2, [pc, #164]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5e6:	63da      	str	r2, [r3, #60]	; 0x3c
 800b5e8:	4a28      	ldr	r2, [pc, #160]	; (800b68c <HAL_SD_MspInit+0x1f0>)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800b5ee:	4b29      	ldr	r3, [pc, #164]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b5f0:	4a29      	ldr	r2, [pc, #164]	; (800b698 <HAL_SD_MspInit+0x1fc>)
 800b5f2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800b5f4:	4b27      	ldr	r3, [pc, #156]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b5f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5fa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b5fc:	4b25      	ldr	r3, [pc, #148]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b5fe:	2240      	movs	r2, #64	; 0x40
 800b600:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b602:	4b24      	ldr	r3, [pc, #144]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b604:	2200      	movs	r2, #0
 800b606:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b608:	4b22      	ldr	r3, [pc, #136]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b60a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b60e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b610:	4b20      	ldr	r3, [pc, #128]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b616:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b618:	4b1e      	ldr	r3, [pc, #120]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b61a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b61e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800b620:	4b1c      	ldr	r3, [pc, #112]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b622:	2220      	movs	r2, #32
 800b624:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b626:	4b1b      	ldr	r3, [pc, #108]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b628:	2200      	movs	r2, #0
 800b62a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b62c:	4b19      	ldr	r3, [pc, #100]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b62e:	2204      	movs	r2, #4
 800b630:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b632:	4b18      	ldr	r3, [pc, #96]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b634:	2203      	movs	r2, #3
 800b636:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800b638:	4b16      	ldr	r3, [pc, #88]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b63a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b63e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800b640:	4b14      	ldr	r3, [pc, #80]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b642:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b646:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800b648:	4812      	ldr	r0, [pc, #72]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b64a:	f7f5 ff57 	bl	80014fc <HAL_DMA_Init>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800b654:	f7ff fc70 	bl	800af38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a0e      	ldr	r2, [pc, #56]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b65c:	641a      	str	r2, [r3, #64]	; 0x40
 800b65e:	4a0d      	ldr	r2, [pc, #52]	; (800b694 <HAL_SD_MspInit+0x1f8>)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800b664:	2200      	movs	r2, #0
 800b666:	2100      	movs	r1, #0
 800b668:	2031      	movs	r0, #49	; 0x31
 800b66a:	f7f5 ff10 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b66e:	2031      	movs	r0, #49	; 0x31
 800b670:	f7f5 ff29 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800b674:	bf00      	nop
 800b676:	3728      	adds	r7, #40	; 0x28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40023800 	.word	0x40023800
 800b684:	40020800 	.word	0x40020800
 800b688:	40020c00 	.word	0x40020c00
 800b68c:	20002ca8 	.word	0x20002ca8
 800b690:	40026458 	.word	0x40026458
 800b694:	20002e3c 	.word	0x20002e3c
 800b698:	400264a0 	.word	0x400264a0

0800b69c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b08a      	sub	sp, #40	; 0x28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6a4:	f107 0314 	add.w	r3, r7, #20
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	605a      	str	r2, [r3, #4]
 800b6ae:	609a      	str	r2, [r3, #8]
 800b6b0:	60da      	str	r2, [r3, #12]
 800b6b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a19      	ldr	r2, [pc, #100]	; (800b720 <HAL_SPI_MspInit+0x84>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d12b      	bne.n	800b716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	4b18      	ldr	r3, [pc, #96]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c6:	4a17      	ldr	r2, [pc, #92]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b6cc:	6453      	str	r3, [r2, #68]	; 0x44
 800b6ce:	4b15      	ldr	r3, [pc, #84]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6da:	2300      	movs	r3, #0
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	4b11      	ldr	r3, [pc, #68]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	4a10      	ldr	r2, [pc, #64]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6e4:	f043 0302 	orr.w	r3, r3, #2
 800b6e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b6ea:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <HAL_SPI_MspInit+0x88>)
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800b6f6:	2338      	movs	r3, #56	; 0x38
 800b6f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b702:	2303      	movs	r3, #3
 800b704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b706:	2305      	movs	r3, #5
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b70a:	f107 0314 	add.w	r3, r7, #20
 800b70e:	4619      	mov	r1, r3
 800b710:	4805      	ldr	r0, [pc, #20]	; (800b728 <HAL_SPI_MspInit+0x8c>)
 800b712:	f7f6 fa8b 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b716:	bf00      	nop
 800b718:	3728      	adds	r7, #40	; 0x28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	40013000 	.word	0x40013000
 800b724:	40023800 	.word	0x40023800
 800b728:	40020400 	.word	0x40020400

0800b72c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73c:	d10e      	bne.n	800b75c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b746:	4a1c      	ldr	r2, [pc, #112]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b748:	f043 0301 	orr.w	r3, r3, #1
 800b74c:	6413      	str	r3, [r2, #64]	; 0x40
 800b74e:	4b1a      	ldr	r3, [pc, #104]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800b75a:	e026      	b.n	800b7aa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a16      	ldr	r2, [pc, #88]	; (800b7bc <HAL_TIM_Base_MspInit+0x90>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d10e      	bne.n	800b784 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b766:	2300      	movs	r3, #0
 800b768:	613b      	str	r3, [r7, #16]
 800b76a:	4b13      	ldr	r3, [pc, #76]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	4a12      	ldr	r2, [pc, #72]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b770:	f043 0302 	orr.w	r3, r3, #2
 800b774:	6413      	str	r3, [r2, #64]	; 0x40
 800b776:	4b10      	ldr	r3, [pc, #64]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	613b      	str	r3, [r7, #16]
 800b780:	693b      	ldr	r3, [r7, #16]
}
 800b782:	e012      	b.n	800b7aa <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a0d      	ldr	r2, [pc, #52]	; (800b7c0 <HAL_TIM_Base_MspInit+0x94>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d10d      	bne.n	800b7aa <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b796:	4a08      	ldr	r2, [pc, #32]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b798:	f043 0308 	orr.w	r3, r3, #8
 800b79c:	6413      	str	r3, [r2, #64]	; 0x40
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <HAL_TIM_Base_MspInit+0x8c>)
 800b7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a2:	f003 0308 	and.w	r3, r3, #8
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
}
 800b7aa:	bf00      	nop
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	40023800 	.word	0x40023800
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000c00 	.word	0x40000c00

0800b7c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08a      	sub	sp, #40	; 0x28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	605a      	str	r2, [r3, #4]
 800b7d6:	609a      	str	r2, [r3, #8]
 800b7d8:	60da      	str	r2, [r3, #12]
 800b7da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a24      	ldr	r2, [pc, #144]	; (800b874 <HAL_TIM_MspPostInit+0xb0>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d11e      	bne.n	800b824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	613b      	str	r3, [r7, #16]
 800b7ea:	4b23      	ldr	r3, [pc, #140]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ee:	4a22      	ldr	r2, [pc, #136]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b7f0:	f043 0302 	orr.w	r3, r3, #2
 800b7f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7f6:	4b20      	ldr	r3, [pc, #128]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	613b      	str	r3, [r7, #16]
 800b800:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 800b802:	2303      	movs	r3, #3
 800b804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b806:	2302      	movs	r3, #2
 800b808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b80e:	2300      	movs	r3, #0
 800b810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b812:	2302      	movs	r3, #2
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b816:	f107 0314 	add.w	r3, r7, #20
 800b81a:	4619      	mov	r1, r3
 800b81c:	4817      	ldr	r0, [pc, #92]	; (800b87c <HAL_TIM_MspPostInit+0xb8>)
 800b81e:	f7f6 fa05 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800b822:	e022      	b.n	800b86a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a15      	ldr	r2, [pc, #84]	; (800b880 <HAL_TIM_MspPostInit+0xbc>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d11d      	bne.n	800b86a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b836:	4a10      	ldr	r2, [pc, #64]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b838:	f043 0301 	orr.w	r3, r3, #1
 800b83c:	6313      	str	r3, [r2, #48]	; 0x30
 800b83e:	4b0e      	ldr	r3, [pc, #56]	; (800b878 <HAL_TIM_MspPostInit+0xb4>)
 800b840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b842:	f003 0301 	and.w	r3, r3, #1
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800b84a:	230a      	movs	r3, #10
 800b84c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b84e:	2302      	movs	r3, #2
 800b850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b852:	2300      	movs	r3, #0
 800b854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b856:	2300      	movs	r3, #0
 800b858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b85a:	2302      	movs	r3, #2
 800b85c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b85e:	f107 0314 	add.w	r3, r7, #20
 800b862:	4619      	mov	r1, r3
 800b864:	4807      	ldr	r0, [pc, #28]	; (800b884 <HAL_TIM_MspPostInit+0xc0>)
 800b866:	f7f6 f9e1 	bl	8001c2c <HAL_GPIO_Init>
}
 800b86a:	bf00      	nop
 800b86c:	3728      	adds	r7, #40	; 0x28
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	40000400 	.word	0x40000400
 800b878:	40023800 	.word	0x40023800
 800b87c:	40020400 	.word	0x40020400
 800b880:	40000c00 	.word	0x40000c00
 800b884:	40020000 	.word	0x40020000

0800b888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08a      	sub	sp, #40	; 0x28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b890:	f107 0314 	add.w	r3, r7, #20
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	605a      	str	r2, [r3, #4]
 800b89a:	609a      	str	r2, [r3, #8]
 800b89c:	60da      	str	r2, [r3, #12]
 800b89e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a1d      	ldr	r2, [pc, #116]	; (800b91c <HAL_UART_MspInit+0x94>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d134      	bne.n	800b914 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	4b1c      	ldr	r3, [pc, #112]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b2:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b8ba:	4b19      	ldr	r3, [pc, #100]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	4b15      	ldr	r3, [pc, #84]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ce:	4a14      	ldr	r2, [pc, #80]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8d0:	f043 0302 	orr.w	r3, r3, #2
 800b8d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <HAL_UART_MspInit+0x98>)
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800b8e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b8e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b8f4:	2307      	movs	r3, #7
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b8f8:	f107 0314 	add.w	r3, r7, #20
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4809      	ldr	r0, [pc, #36]	; (800b924 <HAL_UART_MspInit+0x9c>)
 800b900:	f7f6 f994 	bl	8001c2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800b904:	2200      	movs	r2, #0
 800b906:	2100      	movs	r1, #0
 800b908:	2027      	movs	r0, #39	; 0x27
 800b90a:	f7f5 fdc0 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b90e:	2027      	movs	r0, #39	; 0x27
 800b910:	f7f5 fdd9 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b914:	bf00      	nop
 800b916:	3728      	adds	r7, #40	; 0x28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	40004800 	.word	0x40004800
 800b920:	40023800 	.word	0x40023800
 800b924:	40020400 	.word	0x40020400

0800b928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b928:	b480      	push	{r7}
 800b92a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b92c:	bf00      	nop
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b936:	b480      	push	{r7}
 800b938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b93a:	e7fe      	b.n	800b93a <HardFault_Handler+0x4>

0800b93c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b940:	e7fe      	b.n	800b940 <MemManage_Handler+0x4>

0800b942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b942:	b480      	push	{r7}
 800b944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b946:	e7fe      	b.n	800b946 <BusFault_Handler+0x4>

0800b948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b948:	b480      	push	{r7}
 800b94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b94c:	e7fe      	b.n	800b94c <UsageFault_Handler+0x4>

0800b94e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b94e:	b480      	push	{r7}
 800b950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b952:	bf00      	nop
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b960:	bf00      	nop
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b96a:	b480      	push	{r7}
 800b96c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b96e:	bf00      	nop
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b97c:	f7f5 fc6a 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b980:	bf00      	nop
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b988:	4802      	ldr	r0, [pc, #8]	; (800b994 <USART3_IRQHandler+0x10>)
 800b98a:	f7fa fcc3 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b98e:	bf00      	nop
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20002d08 	.word	0x20002d08

0800b998 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800b99c:	4802      	ldr	r0, [pc, #8]	; (800b9a8 <SDIO_IRQHandler+0x10>)
 800b99e:	f7f8 fdb3 	bl	8004508 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800b9a2:	bf00      	nop
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20002e9c 	.word	0x20002e9c

0800b9ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800b9b0:	4802      	ldr	r0, [pc, #8]	; (800b9bc <DMA2_Stream3_IRQHandler+0x10>)
 800b9b2:	f7f5 fed3 	bl	800175c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b9b6:	bf00      	nop
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20002ca8 	.word	0x20002ca8

0800b9c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b9c4:	4802      	ldr	r0, [pc, #8]	; (800b9d0 <OTG_FS_IRQHandler+0x10>)
 800b9c6:	f7f6 fd75 	bl	80024b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b9ca:	bf00      	nop
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20003fb8 	.word	0x20003fb8

0800b9d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800b9d8:	4802      	ldr	r0, [pc, #8]	; (800b9e4 <DMA2_Stream6_IRQHandler+0x10>)
 800b9da:	f7f5 febf 	bl	800175c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b9de:	bf00      	nop
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20002e3c 	.word	0x20002e3c

0800b9e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b9f0:	4b11      	ldr	r3, [pc, #68]	; (800ba38 <_sbrk+0x50>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d102      	bne.n	800b9fe <_sbrk+0x16>
		heap_end = &end;
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ba38 <_sbrk+0x50>)
 800b9fa:	4a10      	ldr	r2, [pc, #64]	; (800ba3c <_sbrk+0x54>)
 800b9fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <_sbrk+0x50>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ba04:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <_sbrk+0x50>)
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	466a      	mov	r2, sp
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d907      	bls.n	800ba22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ba12:	f000 fd9f 	bl	800c554 <__errno>
 800ba16:	4602      	mov	r2, r0
 800ba18:	230c      	movs	r3, #12
 800ba1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ba1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba20:	e006      	b.n	800ba30 <_sbrk+0x48>
	}

	heap_end += incr;
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <_sbrk+0x50>)
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4413      	add	r3, r2
 800ba2a:	4a03      	ldr	r2, [pc, #12]	; (800ba38 <_sbrk+0x50>)
 800ba2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20000990 	.word	0x20000990
 800ba3c:	200045c8 	.word	0x200045c8

0800ba40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ba40:	b480      	push	{r7}
 800ba42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ba44:	4b16      	ldr	r3, [pc, #88]	; (800baa0 <SystemInit+0x60>)
 800ba46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4a:	4a15      	ldr	r2, [pc, #84]	; (800baa0 <SystemInit+0x60>)
 800ba4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ba54:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <SystemInit+0x64>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a12      	ldr	r2, [pc, #72]	; (800baa4 <SystemInit+0x64>)
 800ba5a:	f043 0301 	orr.w	r3, r3, #1
 800ba5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ba60:	4b10      	ldr	r3, [pc, #64]	; (800baa4 <SystemInit+0x64>)
 800ba62:	2200      	movs	r2, #0
 800ba64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <SystemInit+0x64>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a0e      	ldr	r2, [pc, #56]	; (800baa4 <SystemInit+0x64>)
 800ba6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ba70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ba76:	4b0b      	ldr	r3, [pc, #44]	; (800baa4 <SystemInit+0x64>)
 800ba78:	4a0b      	ldr	r2, [pc, #44]	; (800baa8 <SystemInit+0x68>)
 800ba7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ba7c:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <SystemInit+0x64>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a08      	ldr	r2, [pc, #32]	; (800baa4 <SystemInit+0x64>)
 800ba82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ba88:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <SystemInit+0x64>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ba8e:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <SystemInit+0x60>)
 800ba90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba94:	609a      	str	r2, [r3, #8]
#endif
}
 800ba96:	bf00      	nop
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	e000ed00 	.word	0xe000ed00
 800baa4:	40023800 	.word	0x40023800
 800baa8:	24003010 	.word	0x24003010

0800baac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bab0:	2200      	movs	r2, #0
 800bab2:	4912      	ldr	r1, [pc, #72]	; (800bafc <MX_USB_DEVICE_Init+0x50>)
 800bab4:	4812      	ldr	r0, [pc, #72]	; (800bb00 <MX_USB_DEVICE_Init+0x54>)
 800bab6:	f7fd fb7b 	bl	80091b0 <USBD_Init>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bac0:	f7ff fa3a 	bl	800af38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bac4:	490f      	ldr	r1, [pc, #60]	; (800bb04 <MX_USB_DEVICE_Init+0x58>)
 800bac6:	480e      	ldr	r0, [pc, #56]	; (800bb00 <MX_USB_DEVICE_Init+0x54>)
 800bac8:	f7fd fb9d 	bl	8009206 <USBD_RegisterClass>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bad2:	f7ff fa31 	bl	800af38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bad6:	490c      	ldr	r1, [pc, #48]	; (800bb08 <MX_USB_DEVICE_Init+0x5c>)
 800bad8:	4809      	ldr	r0, [pc, #36]	; (800bb00 <MX_USB_DEVICE_Init+0x54>)
 800bada:	f7fd facb 	bl	8009074 <USBD_CDC_RegisterInterface>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bae4:	f7ff fa28 	bl	800af38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bae8:	4805      	ldr	r0, [pc, #20]	; (800bb00 <MX_USB_DEVICE_Init+0x54>)
 800baea:	f7fd fba6 	bl	800923a <USBD_Start>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baf4:	f7ff fa20 	bl	800af38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baf8:	bf00      	nop
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20000130 	.word	0x20000130
 800bb00:	2000099c 	.word	0x2000099c
 800bb04:	20000018 	.word	0x20000018
 800bb08:	20000120 	.word	0x20000120

0800bb0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb10:	2200      	movs	r2, #0
 800bb12:	4905      	ldr	r1, [pc, #20]	; (800bb28 <CDC_Init_FS+0x1c>)
 800bb14:	4805      	ldr	r0, [pc, #20]	; (800bb2c <CDC_Init_FS+0x20>)
 800bb16:	f7fd fac4 	bl	80090a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb1a:	4905      	ldr	r1, [pc, #20]	; (800bb30 <CDC_Init_FS+0x24>)
 800bb1c:	4803      	ldr	r0, [pc, #12]	; (800bb2c <CDC_Init_FS+0x20>)
 800bb1e:	f7fd fada 	bl	80090d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	200037b8 	.word	0x200037b8
 800bb2c:	2000099c 	.word	0x2000099c
 800bb30:	20002fb8 	.word	0x20002fb8

0800bb34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb34:	b480      	push	{r7}
 800bb36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
 800bb50:	4613      	mov	r3, r2
 800bb52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800bb54:	f107 0308 	add.w	r3, r7, #8
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
 800bb5c:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800bb60:	79fb      	ldrb	r3, [r7, #7]
 800bb62:	2b23      	cmp	r3, #35	; 0x23
 800bb64:	d87c      	bhi.n	800bc60 <CDC_Control_FS+0x11c>
 800bb66:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <CDC_Control_FS+0x28>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bc61 	.word	0x0800bc61
 800bb70:	0800bc61 	.word	0x0800bc61
 800bb74:	0800bc61 	.word	0x0800bc61
 800bb78:	0800bc61 	.word	0x0800bc61
 800bb7c:	0800bc61 	.word	0x0800bc61
 800bb80:	0800bc61 	.word	0x0800bc61
 800bb84:	0800bc61 	.word	0x0800bc61
 800bb88:	0800bc61 	.word	0x0800bc61
 800bb8c:	0800bc61 	.word	0x0800bc61
 800bb90:	0800bc61 	.word	0x0800bc61
 800bb94:	0800bc61 	.word	0x0800bc61
 800bb98:	0800bc61 	.word	0x0800bc61
 800bb9c:	0800bc61 	.word	0x0800bc61
 800bba0:	0800bc61 	.word	0x0800bc61
 800bba4:	0800bc61 	.word	0x0800bc61
 800bba8:	0800bc61 	.word	0x0800bc61
 800bbac:	0800bc61 	.word	0x0800bc61
 800bbb0:	0800bc61 	.word	0x0800bc61
 800bbb4:	0800bc61 	.word	0x0800bc61
 800bbb8:	0800bc61 	.word	0x0800bc61
 800bbbc:	0800bc61 	.word	0x0800bc61
 800bbc0:	0800bc61 	.word	0x0800bc61
 800bbc4:	0800bc61 	.word	0x0800bc61
 800bbc8:	0800bc61 	.word	0x0800bc61
 800bbcc:	0800bc61 	.word	0x0800bc61
 800bbd0:	0800bc61 	.word	0x0800bc61
 800bbd4:	0800bc61 	.word	0x0800bc61
 800bbd8:	0800bc61 	.word	0x0800bc61
 800bbdc:	0800bc61 	.word	0x0800bc61
 800bbe0:	0800bc61 	.word	0x0800bc61
 800bbe4:	0800bc61 	.word	0x0800bc61
 800bbe8:	0800bc61 	.word	0x0800bc61
 800bbec:	0800bbfd 	.word	0x0800bbfd
 800bbf0:	0800bc29 	.word	0x0800bc29
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800bc61 	.word	0x0800bc61
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	789b      	ldrb	r3, [r3, #2]
 800bc0c:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	78db      	ldrb	r3, [r3, #3]
 800bc12:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	791b      	ldrb	r3, [r3, #4]
 800bc18:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	795b      	ldrb	r3, [r3, #5]
 800bc1e:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	799b      	ldrb	r3, [r3, #6]
 800bc24:	73bb      	strb	r3, [r7, #14]
        	break;
 800bc26:	e01c      	b.n	800bc62 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800bc28:	7a3a      	ldrb	r2, [r7, #8]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	3301      	adds	r3, #1
 800bc32:	7a7a      	ldrb	r2, [r7, #9]
 800bc34:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	3302      	adds	r3, #2
 800bc3a:	7aba      	ldrb	r2, [r7, #10]
 800bc3c:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	3303      	adds	r3, #3
 800bc42:	7afa      	ldrb	r2, [r7, #11]
 800bc44:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	3304      	adds	r3, #4
 800bc4a:	7b3a      	ldrb	r2, [r7, #12]
 800bc4c:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	3305      	adds	r3, #5
 800bc52:	7b7a      	ldrb	r2, [r7, #13]
 800bc54:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	3306      	adds	r3, #6
 800bc5a:	7bba      	ldrb	r2, [r7, #14]
 800bc5c:	701a      	strb	r2, [r3, #0]
        	break;
 800bc5e:	e000      	b.n	800bc62 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc60:	bf00      	nop
  }

  return (USBD_OK);
 800bc62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	4805      	ldr	r0, [pc, #20]	; (800bc94 <CDC_Receive_FS+0x24>)
 800bc7e:	f7fd fa2a 	bl	80090d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc82:	4804      	ldr	r0, [pc, #16]	; (800bc94 <CDC_Receive_FS+0x24>)
 800bc84:	f7fd fa6a 	bl	800915c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	2000099c 	.word	0x2000099c

0800bc98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bca8:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <CDC_Transmit_FS+0x48>)
 800bcaa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bcae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e00b      	b.n	800bcd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bcbe:	887b      	ldrh	r3, [r7, #2]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	4806      	ldr	r0, [pc, #24]	; (800bce0 <CDC_Transmit_FS+0x48>)
 800bcc6:	f7fd f9ec 	bl	80090a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcca:	4805      	ldr	r0, [pc, #20]	; (800bce0 <CDC_Transmit_FS+0x48>)
 800bccc:	f7fd fa17 	bl	80090fe <USBD_CDC_TransmitPacket>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	2000099c 	.word	0x2000099c

0800bce4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	; 0x28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcec:	f107 0314 	add.w	r3, r7, #20
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	605a      	str	r2, [r3, #4]
 800bcf6:	609a      	str	r2, [r3, #8]
 800bcf8:	60da      	str	r2, [r3, #12]
 800bcfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd04:	d13a      	bne.n	800bd7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd06:	2300      	movs	r3, #0
 800bd08:	613b      	str	r3, [r7, #16]
 800bd0a:	4b1e      	ldr	r3, [pc, #120]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0e:	4a1d      	ldr	r2, [pc, #116]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd10:	f043 0301 	orr.w	r3, r3, #1
 800bd14:	6313      	str	r3, [r2, #48]	; 0x30
 800bd16:	4b1b      	ldr	r3, [pc, #108]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800bd22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd30:	2303      	movs	r3, #3
 800bd32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd34:	230a      	movs	r3, #10
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd38:	f107 0314 	add.w	r3, r7, #20
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4812      	ldr	r0, [pc, #72]	; (800bd88 <HAL_PCD_MspInit+0xa4>)
 800bd40:	f7f5 ff74 	bl	8001c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd44:	4b0f      	ldr	r3, [pc, #60]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	4a0e      	ldr	r2, [pc, #56]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd4e:	6353      	str	r3, [r2, #52]	; 0x34
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	4b0b      	ldr	r3, [pc, #44]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd58:	4a0a      	ldr	r2, [pc, #40]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd5e:	6453      	str	r3, [r2, #68]	; 0x44
 800bd60:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <HAL_PCD_MspInit+0xa0>)
 800bd62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	2100      	movs	r1, #0
 800bd70:	2043      	movs	r0, #67	; 0x43
 800bd72:	f7f5 fb8c 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd76:	2043      	movs	r0, #67	; 0x43
 800bd78:	f7f5 fba5 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	3728      	adds	r7, #40	; 0x28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	40023800 	.word	0x40023800
 800bd88:	40020000 	.word	0x40020000

0800bd8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f7fd fa92 	bl	80092cc <USBD_LL_SetupStage>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	6879      	ldr	r1, [r7, #4]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	440b      	add	r3, r1
 800bdd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	78fb      	ldrb	r3, [r7, #3]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f7fd fac2 	bl	8009362 <USBD_LL_DataOutStage>
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b082      	sub	sp, #8
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bdf8:	78fa      	ldrb	r2, [r7, #3]
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	1a9b      	subs	r3, r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	440b      	add	r3, r1
 800be06:	3348      	adds	r3, #72	; 0x48
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	78fb      	ldrb	r3, [r7, #3]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f7fd fb19 	bl	8009444 <USBD_LL_DataInStage>
}
 800be12:	bf00      	nop
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fd fc27 	bl	800967c <USBD_LL_SOF>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be3e:	2301      	movs	r3, #1
 800be40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800be4a:	2300      	movs	r3, #0
 800be4c:	73fb      	strb	r3, [r7, #15]
 800be4e:	e008      	b.n	800be62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d102      	bne.n	800be5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be58:	2301      	movs	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
 800be5c:	e001      	b.n	800be62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be5e:	f7ff f86b 	bl	800af38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be68:	7bfa      	ldrb	r2, [r7, #15]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fd fbcf 	bl	8009610 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fd fb88 	bl	800958e <USBD_LL_Reset>
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800be96:	4618      	mov	r0, r3
 800be98:	f7fd fbca 	bl	8009630 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800beae:	f043 0301 	orr.w	r3, r3, #1
 800beb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <HAL_PCD_SuspendCallback+0x48>)
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	4a03      	ldr	r2, [pc, #12]	; (800bed0 <HAL_PCD_SuspendCallback+0x48>)
 800bec2:	f043 0306 	orr.w	r3, r3, #6
 800bec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bec8:	bf00      	nop
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	e000ed00 	.word	0xe000ed00

0800bed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fbb9 	bl	800965a <USBD_LL_Resume>
}
 800bee8:	bf00      	nop
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf02:	78fa      	ldrb	r2, [r7, #3]
 800bf04:	4611      	mov	r1, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fd fbdf 	bl	80096ca <USBD_LL_IsoOUTIncomplete>
}
 800bf0c:	bf00      	nop
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf26:	78fa      	ldrb	r2, [r7, #3]
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fd fbc0 	bl	80096b0 <USBD_LL_IsoINIncomplete>
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fd fbcc 	bl	80096e4 <USBD_LL_DevConnected>
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fd fbc9 	bl	80096fa <USBD_LL_DevDisconnected>
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d13c      	bne.n	800bffa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bf80:	4a20      	ldr	r2, [pc, #128]	; (800c004 <USBD_LL_Init+0x94>)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a1e      	ldr	r2, [pc, #120]	; (800c004 <USBD_LL_Init+0x94>)
 800bf8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf90:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <USBD_LL_Init+0x94>)
 800bf92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bf98:	4b1a      	ldr	r3, [pc, #104]	; (800c004 <USBD_LL_Init+0x94>)
 800bf9a:	2204      	movs	r2, #4
 800bf9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf9e:	4b19      	ldr	r3, [pc, #100]	; (800c004 <USBD_LL_Init+0x94>)
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfa4:	4b17      	ldr	r3, [pc, #92]	; (800c004 <USBD_LL_Init+0x94>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfaa:	4b16      	ldr	r3, [pc, #88]	; (800c004 <USBD_LL_Init+0x94>)
 800bfac:	2202      	movs	r2, #2
 800bfae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfb0:	4b14      	ldr	r3, [pc, #80]	; (800c004 <USBD_LL_Init+0x94>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bfb6:	4b13      	ldr	r3, [pc, #76]	; (800c004 <USBD_LL_Init+0x94>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bfbc:	4b11      	ldr	r3, [pc, #68]	; (800c004 <USBD_LL_Init+0x94>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bfc2:	4b10      	ldr	r3, [pc, #64]	; (800c004 <USBD_LL_Init+0x94>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bfc8:	4b0e      	ldr	r3, [pc, #56]	; (800c004 <USBD_LL_Init+0x94>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bfce:	480d      	ldr	r0, [pc, #52]	; (800c004 <USBD_LL_Init+0x94>)
 800bfd0:	f7f6 f920 	bl	8002214 <HAL_PCD_Init>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bfda:	f7fe ffad 	bl	800af38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bfde:	2180      	movs	r1, #128	; 0x80
 800bfe0:	4808      	ldr	r0, [pc, #32]	; (800c004 <USBD_LL_Init+0x94>)
 800bfe2:	f7f7 fa84 	bl	80034ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bfe6:	2240      	movs	r2, #64	; 0x40
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4806      	ldr	r0, [pc, #24]	; (800c004 <USBD_LL_Init+0x94>)
 800bfec:	f7f7 fa38 	bl	8003460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bff0:	2280      	movs	r2, #128	; 0x80
 800bff2:	2101      	movs	r1, #1
 800bff4:	4803      	ldr	r0, [pc, #12]	; (800c004 <USBD_LL_Init+0x94>)
 800bff6:	f7f7 fa33 	bl	8003460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20003fb8 	.word	0x20003fb8

0800c008 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c01e:	4618      	mov	r0, r3
 800c020:	f7f6 fa15 	bl	800244e <HAL_PCD_Start>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 f92e 	bl	800c28c <USBD_Get_USB_Status>
 800c030:	4603      	mov	r3, r0
 800c032:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c034:	7bbb      	ldrb	r3, [r7, #14]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	4608      	mov	r0, r1
 800c048:	4611      	mov	r1, r2
 800c04a:	461a      	mov	r2, r3
 800c04c:	4603      	mov	r3, r0
 800c04e:	70fb      	strb	r3, [r7, #3]
 800c050:	460b      	mov	r3, r1
 800c052:	70bb      	strb	r3, [r7, #2]
 800c054:	4613      	mov	r3, r2
 800c056:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c066:	78bb      	ldrb	r3, [r7, #2]
 800c068:	883a      	ldrh	r2, [r7, #0]
 800c06a:	78f9      	ldrb	r1, [r7, #3]
 800c06c:	f7f6 fdea 	bl	8002c44 <HAL_PCD_EP_Open>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f908 	bl	800c28c <USBD_Get_USB_Status>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c080:	7bbb      	ldrb	r3, [r7, #14]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c0a4:	78fa      	ldrb	r2, [r7, #3]
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7f6 fe33 	bl	8002d14 <HAL_PCD_EP_Close>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 f8e9 	bl	800c28c <USBD_Get_USB_Status>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c0e2:	78fa      	ldrb	r2, [r7, #3]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f6 ff0b 	bl	8002f02 <HAL_PCD_EP_SetStall>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 f8ca 	bl	800c28c <USBD_Get_USB_Status>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	460b      	mov	r3, r1
 800c110:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c120:	78fa      	ldrb	r2, [r7, #3]
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f7f6 ff50 	bl	8002fca <HAL_PCD_EP_ClrStall>
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f8ab 	bl	800c28c <USBD_Get_USB_Status>
 800c136:	4603      	mov	r3, r0
 800c138:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c156:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800c158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da0b      	bge.n	800c178 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	4613      	mov	r3, r2
 800c16a:	00db      	lsls	r3, r3, #3
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	440b      	add	r3, r1
 800c172:	333e      	adds	r3, #62	; 0x3e
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	e00b      	b.n	800c190 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	4613      	mov	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	1a9b      	subs	r3, r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c18e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	4611      	mov	r1, r2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f6 fd1d 	bl	8002bfa <HAL_PCD_SetAddress>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f860 	bl	800c28c <USBD_Get_USB_Status>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	72fb      	strb	r3, [r7, #11]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c1fc:	893b      	ldrh	r3, [r7, #8]
 800c1fe:	7af9      	ldrb	r1, [r7, #11]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	f7f6 fe34 	bl	8002e6e <HAL_PCD_EP_Transmit>
 800c206:	4603      	mov	r3, r0
 800c208:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f83d 	bl	800c28c <USBD_Get_USB_Status>
 800c212:	4603      	mov	r3, r0
 800c214:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800c216:	7dbb      	ldrb	r3, [r7, #22]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	607a      	str	r2, [r7, #4]
 800c22a:	461a      	mov	r2, r3
 800c22c:	460b      	mov	r3, r1
 800c22e:	72fb      	strb	r3, [r7, #11]
 800c230:	4613      	mov	r3, r2
 800c232:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c242:	893b      	ldrh	r3, [r7, #8]
 800c244:	7af9      	ldrb	r1, [r7, #11]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	f7f6 fdae 	bl	8002da8 <HAL_PCD_EP_Receive>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 f81a 	bl	800c28c <USBD_Get_USB_Status>
 800c258:	4603      	mov	r3, r0
 800c25a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800c25c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	460b      	mov	r3, r1
 800c270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c278:	78fa      	ldrb	r2, [r7, #3]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7f6 fdde 	bl	8002e3e <HAL_PCD_EP_GetRxCount>
 800c282:	4603      	mov	r3, r0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c29a:	79fb      	ldrb	r3, [r7, #7]
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d817      	bhi.n	800c2d0 <USBD_Get_USB_Status+0x44>
 800c2a0:	a201      	add	r2, pc, #4	; (adr r2, 800c2a8 <USBD_Get_USB_Status+0x1c>)
 800c2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a6:	bf00      	nop
 800c2a8:	0800c2b9 	.word	0x0800c2b9
 800c2ac:	0800c2bf 	.word	0x0800c2bf
 800c2b0:	0800c2c5 	.word	0x0800c2c5
 800c2b4:	0800c2cb 	.word	0x0800c2cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c2bc:	e00b      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2be:	2302      	movs	r3, #2
 800c2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c2:	e008      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c8:	e005      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ce:	e002      	b.n	800c2d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d4:	bf00      	nop
  }
  return usb_status;
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2212      	movs	r2, #18
 800c2f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2f6:	4b03      	ldr	r3, [pc, #12]	; (800c304 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	2000014c 	.word	0x2000014c

0800c308 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	6039      	str	r1, [r7, #0]
 800c312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2204      	movs	r2, #4
 800c318:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c31a:	4b03      	ldr	r3, [pc, #12]	; (800c328 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	20000160 	.word	0x20000160

0800c32c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	4603      	mov	r3, r0
 800c334:	6039      	str	r1, [r7, #0]
 800c336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c338:	79fb      	ldrb	r3, [r7, #7]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d105      	bne.n	800c34a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	4907      	ldr	r1, [pc, #28]	; (800c360 <USBD_FS_ProductStrDescriptor+0x34>)
 800c342:	4808      	ldr	r0, [pc, #32]	; (800c364 <USBD_FS_ProductStrDescriptor+0x38>)
 800c344:	f7fd feb0 	bl	800a0a8 <USBD_GetString>
 800c348:	e004      	b.n	800c354 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	4904      	ldr	r1, [pc, #16]	; (800c360 <USBD_FS_ProductStrDescriptor+0x34>)
 800c34e:	4805      	ldr	r0, [pc, #20]	; (800c364 <USBD_FS_ProductStrDescriptor+0x38>)
 800c350:	f7fd feaa 	bl	800a0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c354:	4b02      	ldr	r3, [pc, #8]	; (800c360 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	200043c0 	.word	0x200043c0
 800c364:	0801026c 	.word	0x0801026c

0800c368 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	6039      	str	r1, [r7, #0]
 800c372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	4904      	ldr	r1, [pc, #16]	; (800c388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c378:	4804      	ldr	r0, [pc, #16]	; (800c38c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c37a:	f7fd fe95 	bl	800a0a8 <USBD_GetString>
  return USBD_StrDesc;
 800c37e:	4b02      	ldr	r3, [pc, #8]	; (800c388 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c380:	4618      	mov	r0, r3
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	200043c0 	.word	0x200043c0
 800c38c:	08010278 	.word	0x08010278

0800c390 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	221a      	movs	r2, #26
 800c3a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c3a2:	f000 f843 	bl	800c42c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800c3a6:	4b02      	ldr	r3, [pc, #8]	; (800c3b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	20000164 	.word	0x20000164

0800c3b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	6039      	str	r1, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c3c0:	79fb      	ldrb	r3, [r7, #7]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d105      	bne.n	800c3d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	4907      	ldr	r1, [pc, #28]	; (800c3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3ca:	4808      	ldr	r0, [pc, #32]	; (800c3ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3cc:	f7fd fe6c 	bl	800a0a8 <USBD_GetString>
 800c3d0:	e004      	b.n	800c3dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	4904      	ldr	r1, [pc, #16]	; (800c3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c3d6:	4805      	ldr	r0, [pc, #20]	; (800c3ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800c3d8:	f7fd fe66 	bl	800a0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3dc:	4b02      	ldr	r3, [pc, #8]	; (800c3e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	200043c0 	.word	0x200043c0
 800c3ec:	0801028c 	.word	0x0801028c

0800c3f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	6039      	str	r1, [r7, #0]
 800c3fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3fc:	79fb      	ldrb	r3, [r7, #7]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d105      	bne.n	800c40e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	4907      	ldr	r1, [pc, #28]	; (800c424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c406:	4808      	ldr	r0, [pc, #32]	; (800c428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c408:	f7fd fe4e 	bl	800a0a8 <USBD_GetString>
 800c40c:	e004      	b.n	800c418 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	4904      	ldr	r1, [pc, #16]	; (800c424 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c412:	4805      	ldr	r0, [pc, #20]	; (800c428 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c414:	f7fd fe48 	bl	800a0a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c418:	4b02      	ldr	r3, [pc, #8]	; (800c424 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	200043c0 	.word	0x200043c0
 800c428:	08010298 	.word	0x08010298

0800c42c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c432:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <Get_SerialNum+0x44>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c438:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <Get_SerialNum+0x48>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c43e:	4b0e      	ldr	r3, [pc, #56]	; (800c478 <Get_SerialNum+0x4c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d009      	beq.n	800c466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c452:	2208      	movs	r2, #8
 800c454:	4909      	ldr	r1, [pc, #36]	; (800c47c <Get_SerialNum+0x50>)
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 f814 	bl	800c484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c45c:	2204      	movs	r2, #4
 800c45e:	4908      	ldr	r1, [pc, #32]	; (800c480 <Get_SerialNum+0x54>)
 800c460:	68b8      	ldr	r0, [r7, #8]
 800c462:	f000 f80f 	bl	800c484 <IntToUnicode>
  }
}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	1fff7a10 	.word	0x1fff7a10
 800c474:	1fff7a14 	.word	0x1fff7a14
 800c478:	1fff7a18 	.word	0x1fff7a18
 800c47c:	20000166 	.word	0x20000166
 800c480:	20000176 	.word	0x20000176

0800c484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c484:	b480      	push	{r7}
 800c486:	b087      	sub	sp, #28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	4613      	mov	r3, r2
 800c490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c496:	2300      	movs	r3, #0
 800c498:	75fb      	strb	r3, [r7, #23]
 800c49a:	e027      	b.n	800c4ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	0f1b      	lsrs	r3, r3, #28
 800c4a0:	2b09      	cmp	r3, #9
 800c4a2:	d80b      	bhi.n	800c4bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	0f1b      	lsrs	r3, r3, #28
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	440b      	add	r3, r1
 800c4b4:	3230      	adds	r2, #48	; 0x30
 800c4b6:	b2d2      	uxtb	r2, r2
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	e00a      	b.n	800c4d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	0f1b      	lsrs	r3, r3, #28
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	440b      	add	r3, r1
 800c4cc:	3237      	adds	r2, #55	; 0x37
 800c4ce:	b2d2      	uxtb	r2, r2
 800c4d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	011b      	lsls	r3, r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c4d8:	7dfb      	ldrb	r3, [r7, #23]
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	3301      	adds	r3, #1
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	75fb      	strb	r3, [r7, #23]
 800c4ec:	7dfa      	ldrb	r2, [r7, #23]
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d3d3      	bcc.n	800c49c <IntToUnicode+0x18>
  }
}
 800c4f4:	bf00      	nop
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c500:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c506:	e003      	b.n	800c510 <LoopCopyDataInit>

0800c508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c508:	4b0c      	ldr	r3, [pc, #48]	; (800c53c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c50a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c50c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c50e:	3104      	adds	r1, #4

0800c510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c510:	480b      	ldr	r0, [pc, #44]	; (800c540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c512:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c518:	d3f6      	bcc.n	800c508 <CopyDataInit>
  ldr  r2, =_sbss
 800c51a:	4a0b      	ldr	r2, [pc, #44]	; (800c548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c51c:	e002      	b.n	800c524 <LoopFillZerobss>

0800c51e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c51e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c520:	f842 3b04 	str.w	r3, [r2], #4

0800c524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c524:	4b09      	ldr	r3, [pc, #36]	; (800c54c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c528:	d3f9      	bcc.n	800c51e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c52a:	f7ff fa89 	bl	800ba40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c52e:	f000 f817 	bl	800c560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c532:	f7fe f8df 	bl	800a6f4 <main>
  bx  lr    
 800c536:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c538:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c53c:	080105a0 	.word	0x080105a0
  ldr  r0, =_sdata
 800c540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c544:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 800c548:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800c54c:	200045c4 	.word	0x200045c4

0800c550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c550:	e7fe      	b.n	800c550 <ADC_IRQHandler>
	...

0800c554 <__errno>:
 800c554:	4b01      	ldr	r3, [pc, #4]	; (800c55c <__errno+0x8>)
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	20000180 	.word	0x20000180

0800c560 <__libc_init_array>:
 800c560:	b570      	push	{r4, r5, r6, lr}
 800c562:	4e0d      	ldr	r6, [pc, #52]	; (800c598 <__libc_init_array+0x38>)
 800c564:	4c0d      	ldr	r4, [pc, #52]	; (800c59c <__libc_init_array+0x3c>)
 800c566:	1ba4      	subs	r4, r4, r6
 800c568:	10a4      	asrs	r4, r4, #2
 800c56a:	2500      	movs	r5, #0
 800c56c:	42a5      	cmp	r5, r4
 800c56e:	d109      	bne.n	800c584 <__libc_init_array+0x24>
 800c570:	4e0b      	ldr	r6, [pc, #44]	; (800c5a0 <__libc_init_array+0x40>)
 800c572:	4c0c      	ldr	r4, [pc, #48]	; (800c5a4 <__libc_init_array+0x44>)
 800c574:	f003 fd82 	bl	801007c <_init>
 800c578:	1ba4      	subs	r4, r4, r6
 800c57a:	10a4      	asrs	r4, r4, #2
 800c57c:	2500      	movs	r5, #0
 800c57e:	42a5      	cmp	r5, r4
 800c580:	d105      	bne.n	800c58e <__libc_init_array+0x2e>
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c588:	4798      	blx	r3
 800c58a:	3501      	adds	r5, #1
 800c58c:	e7ee      	b.n	800c56c <__libc_init_array+0xc>
 800c58e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c592:	4798      	blx	r3
 800c594:	3501      	adds	r5, #1
 800c596:	e7f2      	b.n	800c57e <__libc_init_array+0x1e>
 800c598:	08010598 	.word	0x08010598
 800c59c:	08010598 	.word	0x08010598
 800c5a0:	08010598 	.word	0x08010598
 800c5a4:	0801059c 	.word	0x0801059c

0800c5a8 <malloc>:
 800c5a8:	4b02      	ldr	r3, [pc, #8]	; (800c5b4 <malloc+0xc>)
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	6818      	ldr	r0, [r3, #0]
 800c5ae:	f000 b86d 	b.w	800c68c <_malloc_r>
 800c5b2:	bf00      	nop
 800c5b4:	20000180 	.word	0x20000180

0800c5b8 <free>:
 800c5b8:	4b02      	ldr	r3, [pc, #8]	; (800c5c4 <free+0xc>)
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f000 b817 	b.w	800c5f0 <_free_r>
 800c5c2:	bf00      	nop
 800c5c4:	20000180 	.word	0x20000180

0800c5c8 <memcpy>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	1e43      	subs	r3, r0, #1
 800c5cc:	440a      	add	r2, r1
 800c5ce:	4291      	cmp	r1, r2
 800c5d0:	d100      	bne.n	800c5d4 <memcpy+0xc>
 800c5d2:	bd10      	pop	{r4, pc}
 800c5d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5dc:	e7f7      	b.n	800c5ce <memcpy+0x6>

0800c5de <memset>:
 800c5de:	4402      	add	r2, r0
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d100      	bne.n	800c5e8 <memset+0xa>
 800c5e6:	4770      	bx	lr
 800c5e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ec:	e7f9      	b.n	800c5e2 <memset+0x4>
	...

0800c5f0 <_free_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	d045      	beq.n	800c684 <_free_r+0x94>
 800c5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5fc:	1f0c      	subs	r4, r1, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfb8      	it	lt
 800c602:	18e4      	addlt	r4, r4, r3
 800c604:	f002 ff84 	bl	800f510 <__malloc_lock>
 800c608:	4a1f      	ldr	r2, [pc, #124]	; (800c688 <_free_r+0x98>)
 800c60a:	6813      	ldr	r3, [r2, #0]
 800c60c:	4610      	mov	r0, r2
 800c60e:	b933      	cbnz	r3, 800c61e <_free_r+0x2e>
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	6014      	str	r4, [r2, #0]
 800c614:	4628      	mov	r0, r5
 800c616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c61a:	f002 bf7a 	b.w	800f512 <__malloc_unlock>
 800c61e:	42a3      	cmp	r3, r4
 800c620:	d90c      	bls.n	800c63c <_free_r+0x4c>
 800c622:	6821      	ldr	r1, [r4, #0]
 800c624:	1862      	adds	r2, r4, r1
 800c626:	4293      	cmp	r3, r2
 800c628:	bf04      	itt	eq
 800c62a:	681a      	ldreq	r2, [r3, #0]
 800c62c:	685b      	ldreq	r3, [r3, #4]
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	bf04      	itt	eq
 800c632:	1852      	addeq	r2, r2, r1
 800c634:	6022      	streq	r2, [r4, #0]
 800c636:	6004      	str	r4, [r0, #0]
 800c638:	e7ec      	b.n	800c614 <_free_r+0x24>
 800c63a:	4613      	mov	r3, r2
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	b10a      	cbz	r2, 800c644 <_free_r+0x54>
 800c640:	42a2      	cmp	r2, r4
 800c642:	d9fa      	bls.n	800c63a <_free_r+0x4a>
 800c644:	6819      	ldr	r1, [r3, #0]
 800c646:	1858      	adds	r0, r3, r1
 800c648:	42a0      	cmp	r0, r4
 800c64a:	d10b      	bne.n	800c664 <_free_r+0x74>
 800c64c:	6820      	ldr	r0, [r4, #0]
 800c64e:	4401      	add	r1, r0
 800c650:	1858      	adds	r0, r3, r1
 800c652:	4282      	cmp	r2, r0
 800c654:	6019      	str	r1, [r3, #0]
 800c656:	d1dd      	bne.n	800c614 <_free_r+0x24>
 800c658:	6810      	ldr	r0, [r2, #0]
 800c65a:	6852      	ldr	r2, [r2, #4]
 800c65c:	605a      	str	r2, [r3, #4]
 800c65e:	4401      	add	r1, r0
 800c660:	6019      	str	r1, [r3, #0]
 800c662:	e7d7      	b.n	800c614 <_free_r+0x24>
 800c664:	d902      	bls.n	800c66c <_free_r+0x7c>
 800c666:	230c      	movs	r3, #12
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	e7d3      	b.n	800c614 <_free_r+0x24>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	1821      	adds	r1, r4, r0
 800c670:	428a      	cmp	r2, r1
 800c672:	bf04      	itt	eq
 800c674:	6811      	ldreq	r1, [r2, #0]
 800c676:	6852      	ldreq	r2, [r2, #4]
 800c678:	6062      	str	r2, [r4, #4]
 800c67a:	bf04      	itt	eq
 800c67c:	1809      	addeq	r1, r1, r0
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	605c      	str	r4, [r3, #4]
 800c682:	e7c7      	b.n	800c614 <_free_r+0x24>
 800c684:	bd38      	pop	{r3, r4, r5, pc}
 800c686:	bf00      	nop
 800c688:	20000994 	.word	0x20000994

0800c68c <_malloc_r>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	1ccd      	adds	r5, r1, #3
 800c690:	f025 0503 	bic.w	r5, r5, #3
 800c694:	3508      	adds	r5, #8
 800c696:	2d0c      	cmp	r5, #12
 800c698:	bf38      	it	cc
 800c69a:	250c      	movcc	r5, #12
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	4606      	mov	r6, r0
 800c6a0:	db01      	blt.n	800c6a6 <_malloc_r+0x1a>
 800c6a2:	42a9      	cmp	r1, r5
 800c6a4:	d903      	bls.n	800c6ae <_malloc_r+0x22>
 800c6a6:	230c      	movs	r3, #12
 800c6a8:	6033      	str	r3, [r6, #0]
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
 800c6ae:	f002 ff2f 	bl	800f510 <__malloc_lock>
 800c6b2:	4a21      	ldr	r2, [pc, #132]	; (800c738 <_malloc_r+0xac>)
 800c6b4:	6814      	ldr	r4, [r2, #0]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	b991      	cbnz	r1, 800c6e0 <_malloc_r+0x54>
 800c6ba:	4c20      	ldr	r4, [pc, #128]	; (800c73c <_malloc_r+0xb0>)
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	b91b      	cbnz	r3, 800c6c8 <_malloc_r+0x3c>
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f000 fe7b 	bl	800d3bc <_sbrk_r>
 800c6c6:	6020      	str	r0, [r4, #0]
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f000 fe76 	bl	800d3bc <_sbrk_r>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d124      	bne.n	800c71e <_malloc_r+0x92>
 800c6d4:	230c      	movs	r3, #12
 800c6d6:	6033      	str	r3, [r6, #0]
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f002 ff1a 	bl	800f512 <__malloc_unlock>
 800c6de:	e7e4      	b.n	800c6aa <_malloc_r+0x1e>
 800c6e0:	680b      	ldr	r3, [r1, #0]
 800c6e2:	1b5b      	subs	r3, r3, r5
 800c6e4:	d418      	bmi.n	800c718 <_malloc_r+0x8c>
 800c6e6:	2b0b      	cmp	r3, #11
 800c6e8:	d90f      	bls.n	800c70a <_malloc_r+0x7e>
 800c6ea:	600b      	str	r3, [r1, #0]
 800c6ec:	50cd      	str	r5, [r1, r3]
 800c6ee:	18cc      	adds	r4, r1, r3
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f002 ff0e 	bl	800f512 <__malloc_unlock>
 800c6f6:	f104 000b 	add.w	r0, r4, #11
 800c6fa:	1d23      	adds	r3, r4, #4
 800c6fc:	f020 0007 	bic.w	r0, r0, #7
 800c700:	1ac3      	subs	r3, r0, r3
 800c702:	d0d3      	beq.n	800c6ac <_malloc_r+0x20>
 800c704:	425a      	negs	r2, r3
 800c706:	50e2      	str	r2, [r4, r3]
 800c708:	e7d0      	b.n	800c6ac <_malloc_r+0x20>
 800c70a:	428c      	cmp	r4, r1
 800c70c:	684b      	ldr	r3, [r1, #4]
 800c70e:	bf16      	itet	ne
 800c710:	6063      	strne	r3, [r4, #4]
 800c712:	6013      	streq	r3, [r2, #0]
 800c714:	460c      	movne	r4, r1
 800c716:	e7eb      	b.n	800c6f0 <_malloc_r+0x64>
 800c718:	460c      	mov	r4, r1
 800c71a:	6849      	ldr	r1, [r1, #4]
 800c71c:	e7cc      	b.n	800c6b8 <_malloc_r+0x2c>
 800c71e:	1cc4      	adds	r4, r0, #3
 800c720:	f024 0403 	bic.w	r4, r4, #3
 800c724:	42a0      	cmp	r0, r4
 800c726:	d005      	beq.n	800c734 <_malloc_r+0xa8>
 800c728:	1a21      	subs	r1, r4, r0
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 fe46 	bl	800d3bc <_sbrk_r>
 800c730:	3001      	adds	r0, #1
 800c732:	d0cf      	beq.n	800c6d4 <_malloc_r+0x48>
 800c734:	6025      	str	r5, [r4, #0]
 800c736:	e7db      	b.n	800c6f0 <_malloc_r+0x64>
 800c738:	20000994 	.word	0x20000994
 800c73c:	20000998 	.word	0x20000998

0800c740 <__cvt>:
 800c740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	ec55 4b10 	vmov	r4, r5, d0
 800c748:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c74a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c74e:	2d00      	cmp	r5, #0
 800c750:	460e      	mov	r6, r1
 800c752:	4691      	mov	r9, r2
 800c754:	4619      	mov	r1, r3
 800c756:	bfb8      	it	lt
 800c758:	4622      	movlt	r2, r4
 800c75a:	462b      	mov	r3, r5
 800c75c:	f027 0720 	bic.w	r7, r7, #32
 800c760:	bfbb      	ittet	lt
 800c762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c766:	461d      	movlt	r5, r3
 800c768:	2300      	movge	r3, #0
 800c76a:	232d      	movlt	r3, #45	; 0x2d
 800c76c:	bfb8      	it	lt
 800c76e:	4614      	movlt	r4, r2
 800c770:	2f46      	cmp	r7, #70	; 0x46
 800c772:	700b      	strb	r3, [r1, #0]
 800c774:	d004      	beq.n	800c780 <__cvt+0x40>
 800c776:	2f45      	cmp	r7, #69	; 0x45
 800c778:	d100      	bne.n	800c77c <__cvt+0x3c>
 800c77a:	3601      	adds	r6, #1
 800c77c:	2102      	movs	r1, #2
 800c77e:	e000      	b.n	800c782 <__cvt+0x42>
 800c780:	2103      	movs	r1, #3
 800c782:	ab03      	add	r3, sp, #12
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	ab02      	add	r3, sp, #8
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	4632      	mov	r2, r6
 800c78c:	4653      	mov	r3, sl
 800c78e:	ec45 4b10 	vmov	d0, r4, r5
 800c792:	f001 fdb9 	bl	800e308 <_dtoa_r>
 800c796:	2f47      	cmp	r7, #71	; 0x47
 800c798:	4680      	mov	r8, r0
 800c79a:	d102      	bne.n	800c7a2 <__cvt+0x62>
 800c79c:	f019 0f01 	tst.w	r9, #1
 800c7a0:	d026      	beq.n	800c7f0 <__cvt+0xb0>
 800c7a2:	2f46      	cmp	r7, #70	; 0x46
 800c7a4:	eb08 0906 	add.w	r9, r8, r6
 800c7a8:	d111      	bne.n	800c7ce <__cvt+0x8e>
 800c7aa:	f898 3000 	ldrb.w	r3, [r8]
 800c7ae:	2b30      	cmp	r3, #48	; 0x30
 800c7b0:	d10a      	bne.n	800c7c8 <__cvt+0x88>
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	f7f4 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7be:	b918      	cbnz	r0, 800c7c8 <__cvt+0x88>
 800c7c0:	f1c6 0601 	rsb	r6, r6, #1
 800c7c4:	f8ca 6000 	str.w	r6, [sl]
 800c7c8:	f8da 3000 	ldr.w	r3, [sl]
 800c7cc:	4499      	add	r9, r3
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	4629      	mov	r1, r5
 800c7d6:	f7f4 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7da:	b938      	cbnz	r0, 800c7ec <__cvt+0xac>
 800c7dc:	2230      	movs	r2, #48	; 0x30
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	454b      	cmp	r3, r9
 800c7e2:	d205      	bcs.n	800c7f0 <__cvt+0xb0>
 800c7e4:	1c59      	adds	r1, r3, #1
 800c7e6:	9103      	str	r1, [sp, #12]
 800c7e8:	701a      	strb	r2, [r3, #0]
 800c7ea:	e7f8      	b.n	800c7de <__cvt+0x9e>
 800c7ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7f0:	9b03      	ldr	r3, [sp, #12]
 800c7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7f4:	eba3 0308 	sub.w	r3, r3, r8
 800c7f8:	4640      	mov	r0, r8
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	b004      	add	sp, #16
 800c7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c802 <__exponent>:
 800c802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c804:	2900      	cmp	r1, #0
 800c806:	4604      	mov	r4, r0
 800c808:	bfba      	itte	lt
 800c80a:	4249      	neglt	r1, r1
 800c80c:	232d      	movlt	r3, #45	; 0x2d
 800c80e:	232b      	movge	r3, #43	; 0x2b
 800c810:	2909      	cmp	r1, #9
 800c812:	f804 2b02 	strb.w	r2, [r4], #2
 800c816:	7043      	strb	r3, [r0, #1]
 800c818:	dd20      	ble.n	800c85c <__exponent+0x5a>
 800c81a:	f10d 0307 	add.w	r3, sp, #7
 800c81e:	461f      	mov	r7, r3
 800c820:	260a      	movs	r6, #10
 800c822:	fb91 f5f6 	sdiv	r5, r1, r6
 800c826:	fb06 1115 	mls	r1, r6, r5, r1
 800c82a:	3130      	adds	r1, #48	; 0x30
 800c82c:	2d09      	cmp	r5, #9
 800c82e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c832:	f103 32ff 	add.w	r2, r3, #4294967295
 800c836:	4629      	mov	r1, r5
 800c838:	dc09      	bgt.n	800c84e <__exponent+0x4c>
 800c83a:	3130      	adds	r1, #48	; 0x30
 800c83c:	3b02      	subs	r3, #2
 800c83e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c842:	42bb      	cmp	r3, r7
 800c844:	4622      	mov	r2, r4
 800c846:	d304      	bcc.n	800c852 <__exponent+0x50>
 800c848:	1a10      	subs	r0, r2, r0
 800c84a:	b003      	add	sp, #12
 800c84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c84e:	4613      	mov	r3, r2
 800c850:	e7e7      	b.n	800c822 <__exponent+0x20>
 800c852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c856:	f804 2b01 	strb.w	r2, [r4], #1
 800c85a:	e7f2      	b.n	800c842 <__exponent+0x40>
 800c85c:	2330      	movs	r3, #48	; 0x30
 800c85e:	4419      	add	r1, r3
 800c860:	7083      	strb	r3, [r0, #2]
 800c862:	1d02      	adds	r2, r0, #4
 800c864:	70c1      	strb	r1, [r0, #3]
 800c866:	e7ef      	b.n	800c848 <__exponent+0x46>

0800c868 <_printf_float>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	b08d      	sub	sp, #52	; 0x34
 800c86e:	460c      	mov	r4, r1
 800c870:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c874:	4616      	mov	r6, r2
 800c876:	461f      	mov	r7, r3
 800c878:	4605      	mov	r5, r0
 800c87a:	f002 fe29 	bl	800f4d0 <_localeconv_r>
 800c87e:	6803      	ldr	r3, [r0, #0]
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	4618      	mov	r0, r3
 800c884:	f7f3 fca4 	bl	80001d0 <strlen>
 800c888:	2300      	movs	r3, #0
 800c88a:	930a      	str	r3, [sp, #40]	; 0x28
 800c88c:	f8d8 3000 	ldr.w	r3, [r8]
 800c890:	9005      	str	r0, [sp, #20]
 800c892:	3307      	adds	r3, #7
 800c894:	f023 0307 	bic.w	r3, r3, #7
 800c898:	f103 0208 	add.w	r2, r3, #8
 800c89c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c8a0:	f8d4 b000 	ldr.w	fp, [r4]
 800c8a4:	f8c8 2000 	str.w	r2, [r8]
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8b0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8b8:	9307      	str	r3, [sp, #28]
 800c8ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8be:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c2:	4ba7      	ldr	r3, [pc, #668]	; (800cb60 <_printf_float+0x2f8>)
 800c8c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c8:	f7f4 f930 	bl	8000b2c <__aeabi_dcmpun>
 800c8cc:	bb70      	cbnz	r0, 800c92c <_printf_float+0xc4>
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	4ba3      	ldr	r3, [pc, #652]	; (800cb60 <_printf_float+0x2f8>)
 800c8d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8d8:	f7f4 f90a 	bl	8000af0 <__aeabi_dcmple>
 800c8dc:	bb30      	cbnz	r0, 800c92c <_printf_float+0xc4>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	f7f4 f8f9 	bl	8000adc <__aeabi_dcmplt>
 800c8ea:	b110      	cbz	r0, 800c8f2 <_printf_float+0x8a>
 800c8ec:	232d      	movs	r3, #45	; 0x2d
 800c8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f2:	4a9c      	ldr	r2, [pc, #624]	; (800cb64 <_printf_float+0x2fc>)
 800c8f4:	4b9c      	ldr	r3, [pc, #624]	; (800cb68 <_printf_float+0x300>)
 800c8f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c8fa:	bf8c      	ite	hi
 800c8fc:	4690      	movhi	r8, r2
 800c8fe:	4698      	movls	r8, r3
 800c900:	2303      	movs	r3, #3
 800c902:	f02b 0204 	bic.w	r2, fp, #4
 800c906:	6123      	str	r3, [r4, #16]
 800c908:	6022      	str	r2, [r4, #0]
 800c90a:	f04f 0900 	mov.w	r9, #0
 800c90e:	9700      	str	r7, [sp, #0]
 800c910:	4633      	mov	r3, r6
 800c912:	aa0b      	add	r2, sp, #44	; 0x2c
 800c914:	4621      	mov	r1, r4
 800c916:	4628      	mov	r0, r5
 800c918:	f000 f9e6 	bl	800cce8 <_printf_common>
 800c91c:	3001      	adds	r0, #1
 800c91e:	f040 808d 	bne.w	800ca3c <_printf_float+0x1d4>
 800c922:	f04f 30ff 	mov.w	r0, #4294967295
 800c926:	b00d      	add	sp, #52	; 0x34
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92c:	4642      	mov	r2, r8
 800c92e:	464b      	mov	r3, r9
 800c930:	4640      	mov	r0, r8
 800c932:	4649      	mov	r1, r9
 800c934:	f7f4 f8fa 	bl	8000b2c <__aeabi_dcmpun>
 800c938:	b110      	cbz	r0, 800c940 <_printf_float+0xd8>
 800c93a:	4a8c      	ldr	r2, [pc, #560]	; (800cb6c <_printf_float+0x304>)
 800c93c:	4b8c      	ldr	r3, [pc, #560]	; (800cb70 <_printf_float+0x308>)
 800c93e:	e7da      	b.n	800c8f6 <_printf_float+0x8e>
 800c940:	6861      	ldr	r1, [r4, #4]
 800c942:	1c4b      	adds	r3, r1, #1
 800c944:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c948:	a80a      	add	r0, sp, #40	; 0x28
 800c94a:	d13e      	bne.n	800c9ca <_printf_float+0x162>
 800c94c:	2306      	movs	r3, #6
 800c94e:	6063      	str	r3, [r4, #4]
 800c950:	2300      	movs	r3, #0
 800c952:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c956:	ab09      	add	r3, sp, #36	; 0x24
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	ec49 8b10 	vmov	d0, r8, r9
 800c95e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c962:	6022      	str	r2, [r4, #0]
 800c964:	f8cd a004 	str.w	sl, [sp, #4]
 800c968:	6861      	ldr	r1, [r4, #4]
 800c96a:	4628      	mov	r0, r5
 800c96c:	f7ff fee8 	bl	800c740 <__cvt>
 800c970:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c974:	2b47      	cmp	r3, #71	; 0x47
 800c976:	4680      	mov	r8, r0
 800c978:	d109      	bne.n	800c98e <_printf_float+0x126>
 800c97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c97c:	1cd8      	adds	r0, r3, #3
 800c97e:	db02      	blt.n	800c986 <_printf_float+0x11e>
 800c980:	6862      	ldr	r2, [r4, #4]
 800c982:	4293      	cmp	r3, r2
 800c984:	dd47      	ble.n	800ca16 <_printf_float+0x1ae>
 800c986:	f1aa 0a02 	sub.w	sl, sl, #2
 800c98a:	fa5f fa8a 	uxtb.w	sl, sl
 800c98e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c992:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c994:	d824      	bhi.n	800c9e0 <_printf_float+0x178>
 800c996:	3901      	subs	r1, #1
 800c998:	4652      	mov	r2, sl
 800c99a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c99e:	9109      	str	r1, [sp, #36]	; 0x24
 800c9a0:	f7ff ff2f 	bl	800c802 <__exponent>
 800c9a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9a6:	1813      	adds	r3, r2, r0
 800c9a8:	2a01      	cmp	r2, #1
 800c9aa:	4681      	mov	r9, r0
 800c9ac:	6123      	str	r3, [r4, #16]
 800c9ae:	dc02      	bgt.n	800c9b6 <_printf_float+0x14e>
 800c9b0:	6822      	ldr	r2, [r4, #0]
 800c9b2:	07d1      	lsls	r1, r2, #31
 800c9b4:	d501      	bpl.n	800c9ba <_printf_float+0x152>
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	6123      	str	r3, [r4, #16]
 800c9ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0a5      	beq.n	800c90e <_printf_float+0xa6>
 800c9c2:	232d      	movs	r3, #45	; 0x2d
 800c9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9c8:	e7a1      	b.n	800c90e <_printf_float+0xa6>
 800c9ca:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c9ce:	f000 8177 	beq.w	800ccc0 <_printf_float+0x458>
 800c9d2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c9d6:	d1bb      	bne.n	800c950 <_printf_float+0xe8>
 800c9d8:	2900      	cmp	r1, #0
 800c9da:	d1b9      	bne.n	800c950 <_printf_float+0xe8>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e7b6      	b.n	800c94e <_printf_float+0xe6>
 800c9e0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c9e4:	d119      	bne.n	800ca1a <_printf_float+0x1b2>
 800c9e6:	2900      	cmp	r1, #0
 800c9e8:	6863      	ldr	r3, [r4, #4]
 800c9ea:	dd0c      	ble.n	800ca06 <_printf_float+0x19e>
 800c9ec:	6121      	str	r1, [r4, #16]
 800c9ee:	b913      	cbnz	r3, 800c9f6 <_printf_float+0x18e>
 800c9f0:	6822      	ldr	r2, [r4, #0]
 800c9f2:	07d2      	lsls	r2, r2, #31
 800c9f4:	d502      	bpl.n	800c9fc <_printf_float+0x194>
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	440b      	add	r3, r1
 800c9fa:	6123      	str	r3, [r4, #16]
 800c9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fe:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca00:	f04f 0900 	mov.w	r9, #0
 800ca04:	e7d9      	b.n	800c9ba <_printf_float+0x152>
 800ca06:	b913      	cbnz	r3, 800ca0e <_printf_float+0x1a6>
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	07d0      	lsls	r0, r2, #31
 800ca0c:	d501      	bpl.n	800ca12 <_printf_float+0x1aa>
 800ca0e:	3302      	adds	r3, #2
 800ca10:	e7f3      	b.n	800c9fa <_printf_float+0x192>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e7f1      	b.n	800c9fa <_printf_float+0x192>
 800ca16:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ca1a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	db05      	blt.n	800ca2e <_printf_float+0x1c6>
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	6123      	str	r3, [r4, #16]
 800ca26:	07d1      	lsls	r1, r2, #31
 800ca28:	d5e8      	bpl.n	800c9fc <_printf_float+0x194>
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	e7e5      	b.n	800c9fa <_printf_float+0x192>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bfd4      	ite	le
 800ca32:	f1c3 0302 	rsble	r3, r3, #2
 800ca36:	2301      	movgt	r3, #1
 800ca38:	4413      	add	r3, r2
 800ca3a:	e7de      	b.n	800c9fa <_printf_float+0x192>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	055a      	lsls	r2, r3, #21
 800ca40:	d407      	bmi.n	800ca52 <_printf_float+0x1ea>
 800ca42:	6923      	ldr	r3, [r4, #16]
 800ca44:	4642      	mov	r2, r8
 800ca46:	4631      	mov	r1, r6
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b8      	blx	r7
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d12b      	bne.n	800caa8 <_printf_float+0x240>
 800ca50:	e767      	b.n	800c922 <_printf_float+0xba>
 800ca52:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ca56:	f240 80dc 	bls.w	800cc12 <_printf_float+0x3aa>
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca62:	f7f4 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d033      	beq.n	800cad2 <_printf_float+0x26a>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4a41      	ldr	r2, [pc, #260]	; (800cb74 <_printf_float+0x30c>)
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	f43f af54 	beq.w	800c922 <_printf_float+0xba>
 800ca7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	db02      	blt.n	800ca88 <_printf_float+0x220>
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	07d8      	lsls	r0, r3, #31
 800ca86:	d50f      	bpl.n	800caa8 <_printf_float+0x240>
 800ca88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca8c:	4631      	mov	r1, r6
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	f43f af45 	beq.w	800c922 <_printf_float+0xba>
 800ca98:	f04f 0800 	mov.w	r8, #0
 800ca9c:	f104 091a 	add.w	r9, r4, #26
 800caa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa2:	3b01      	subs	r3, #1
 800caa4:	4543      	cmp	r3, r8
 800caa6:	dc09      	bgt.n	800cabc <_printf_float+0x254>
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	079b      	lsls	r3, r3, #30
 800caac:	f100 8103 	bmi.w	800ccb6 <_printf_float+0x44e>
 800cab0:	68e0      	ldr	r0, [r4, #12]
 800cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab4:	4298      	cmp	r0, r3
 800cab6:	bfb8      	it	lt
 800cab8:	4618      	movlt	r0, r3
 800caba:	e734      	b.n	800c926 <_printf_float+0xbe>
 800cabc:	2301      	movs	r3, #1
 800cabe:	464a      	mov	r2, r9
 800cac0:	4631      	mov	r1, r6
 800cac2:	4628      	mov	r0, r5
 800cac4:	47b8      	blx	r7
 800cac6:	3001      	adds	r0, #1
 800cac8:	f43f af2b 	beq.w	800c922 <_printf_float+0xba>
 800cacc:	f108 0801 	add.w	r8, r8, #1
 800cad0:	e7e6      	b.n	800caa0 <_printf_float+0x238>
 800cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	dc2b      	bgt.n	800cb30 <_printf_float+0x2c8>
 800cad8:	2301      	movs	r3, #1
 800cada:	4a26      	ldr	r2, [pc, #152]	; (800cb74 <_printf_float+0x30c>)
 800cadc:	4631      	mov	r1, r6
 800cade:	4628      	mov	r0, r5
 800cae0:	47b8      	blx	r7
 800cae2:	3001      	adds	r0, #1
 800cae4:	f43f af1d 	beq.w	800c922 <_printf_float+0xba>
 800cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caea:	b923      	cbnz	r3, 800caf6 <_printf_float+0x28e>
 800caec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caee:	b913      	cbnz	r3, 800caf6 <_printf_float+0x28e>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	07d9      	lsls	r1, r3, #31
 800caf4:	d5d8      	bpl.n	800caa8 <_printf_float+0x240>
 800caf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cafa:	4631      	mov	r1, r6
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b8      	blx	r7
 800cb00:	3001      	adds	r0, #1
 800cb02:	f43f af0e 	beq.w	800c922 <_printf_float+0xba>
 800cb06:	f04f 0900 	mov.w	r9, #0
 800cb0a:	f104 0a1a 	add.w	sl, r4, #26
 800cb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb10:	425b      	negs	r3, r3
 800cb12:	454b      	cmp	r3, r9
 800cb14:	dc01      	bgt.n	800cb1a <_printf_float+0x2b2>
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	e794      	b.n	800ca44 <_printf_float+0x1dc>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4652      	mov	r2, sl
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	f43f aefc 	beq.w	800c922 <_printf_float+0xba>
 800cb2a:	f109 0901 	add.w	r9, r9, #1
 800cb2e:	e7ee      	b.n	800cb0e <_printf_float+0x2a6>
 800cb30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb34:	429a      	cmp	r2, r3
 800cb36:	bfa8      	it	ge
 800cb38:	461a      	movge	r2, r3
 800cb3a:	2a00      	cmp	r2, #0
 800cb3c:	4691      	mov	r9, r2
 800cb3e:	dd07      	ble.n	800cb50 <_printf_float+0x2e8>
 800cb40:	4613      	mov	r3, r2
 800cb42:	4631      	mov	r1, r6
 800cb44:	4642      	mov	r2, r8
 800cb46:	4628      	mov	r0, r5
 800cb48:	47b8      	blx	r7
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	f43f aee9 	beq.w	800c922 <_printf_float+0xba>
 800cb50:	f104 031a 	add.w	r3, r4, #26
 800cb54:	f04f 0b00 	mov.w	fp, #0
 800cb58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb5c:	9306      	str	r3, [sp, #24]
 800cb5e:	e015      	b.n	800cb8c <_printf_float+0x324>
 800cb60:	7fefffff 	.word	0x7fefffff
 800cb64:	080102e0 	.word	0x080102e0
 800cb68:	080102dc 	.word	0x080102dc
 800cb6c:	080102e8 	.word	0x080102e8
 800cb70:	080102e4 	.word	0x080102e4
 800cb74:	080102ec 	.word	0x080102ec
 800cb78:	2301      	movs	r3, #1
 800cb7a:	9a06      	ldr	r2, [sp, #24]
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	f43f aecd 	beq.w	800c922 <_printf_float+0xba>
 800cb88:	f10b 0b01 	add.w	fp, fp, #1
 800cb8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cb90:	ebaa 0309 	sub.w	r3, sl, r9
 800cb94:	455b      	cmp	r3, fp
 800cb96:	dcef      	bgt.n	800cb78 <_printf_float+0x310>
 800cb98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	44d0      	add	r8, sl
 800cba0:	db15      	blt.n	800cbce <_printf_float+0x366>
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	07da      	lsls	r2, r3, #31
 800cba6:	d412      	bmi.n	800cbce <_printf_float+0x366>
 800cba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbac:	eba3 020a 	sub.w	r2, r3, sl
 800cbb0:	eba3 0a01 	sub.w	sl, r3, r1
 800cbb4:	4592      	cmp	sl, r2
 800cbb6:	bfa8      	it	ge
 800cbb8:	4692      	movge	sl, r2
 800cbba:	f1ba 0f00 	cmp.w	sl, #0
 800cbbe:	dc0e      	bgt.n	800cbde <_printf_float+0x376>
 800cbc0:	f04f 0800 	mov.w	r8, #0
 800cbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbc8:	f104 091a 	add.w	r9, r4, #26
 800cbcc:	e019      	b.n	800cc02 <_printf_float+0x39a>
 800cbce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	47b8      	blx	r7
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d1e5      	bne.n	800cba8 <_printf_float+0x340>
 800cbdc:	e6a1      	b.n	800c922 <_printf_float+0xba>
 800cbde:	4653      	mov	r3, sl
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	4631      	mov	r1, r6
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	47b8      	blx	r7
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d1e9      	bne.n	800cbc0 <_printf_float+0x358>
 800cbec:	e699      	b.n	800c922 <_printf_float+0xba>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	464a      	mov	r2, r9
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	47b8      	blx	r7
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	f43f ae92 	beq.w	800c922 <_printf_float+0xba>
 800cbfe:	f108 0801 	add.w	r8, r8, #1
 800cc02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc06:	1a9b      	subs	r3, r3, r2
 800cc08:	eba3 030a 	sub.w	r3, r3, sl
 800cc0c:	4543      	cmp	r3, r8
 800cc0e:	dcee      	bgt.n	800cbee <_printf_float+0x386>
 800cc10:	e74a      	b.n	800caa8 <_printf_float+0x240>
 800cc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc14:	2a01      	cmp	r2, #1
 800cc16:	dc01      	bgt.n	800cc1c <_printf_float+0x3b4>
 800cc18:	07db      	lsls	r3, r3, #31
 800cc1a:	d53a      	bpl.n	800cc92 <_printf_float+0x42a>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	4642      	mov	r2, r8
 800cc20:	4631      	mov	r1, r6
 800cc22:	4628      	mov	r0, r5
 800cc24:	47b8      	blx	r7
 800cc26:	3001      	adds	r0, #1
 800cc28:	f43f ae7b 	beq.w	800c922 <_printf_float+0xba>
 800cc2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	f108 0801 	add.w	r8, r8, #1
 800cc3c:	f43f ae71 	beq.w	800c922 <_printf_float+0xba>
 800cc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc42:	2200      	movs	r2, #0
 800cc44:	f103 3aff 	add.w	sl, r3, #4294967295
 800cc48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f7f3 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc52:	b9c8      	cbnz	r0, 800cc88 <_printf_float+0x420>
 800cc54:	4653      	mov	r3, sl
 800cc56:	4642      	mov	r2, r8
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d10e      	bne.n	800cc80 <_printf_float+0x418>
 800cc62:	e65e      	b.n	800c922 <_printf_float+0xba>
 800cc64:	2301      	movs	r3, #1
 800cc66:	4652      	mov	r2, sl
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	47b8      	blx	r7
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f43f ae57 	beq.w	800c922 <_printf_float+0xba>
 800cc74:	f108 0801 	add.w	r8, r8, #1
 800cc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4543      	cmp	r3, r8
 800cc7e:	dcf1      	bgt.n	800cc64 <_printf_float+0x3fc>
 800cc80:	464b      	mov	r3, r9
 800cc82:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc86:	e6de      	b.n	800ca46 <_printf_float+0x1de>
 800cc88:	f04f 0800 	mov.w	r8, #0
 800cc8c:	f104 0a1a 	add.w	sl, r4, #26
 800cc90:	e7f2      	b.n	800cc78 <_printf_float+0x410>
 800cc92:	2301      	movs	r3, #1
 800cc94:	e7df      	b.n	800cc56 <_printf_float+0x3ee>
 800cc96:	2301      	movs	r3, #1
 800cc98:	464a      	mov	r2, r9
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b8      	blx	r7
 800cca0:	3001      	adds	r0, #1
 800cca2:	f43f ae3e 	beq.w	800c922 <_printf_float+0xba>
 800cca6:	f108 0801 	add.w	r8, r8, #1
 800ccaa:	68e3      	ldr	r3, [r4, #12]
 800ccac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	4543      	cmp	r3, r8
 800ccb2:	dcf0      	bgt.n	800cc96 <_printf_float+0x42e>
 800ccb4:	e6fc      	b.n	800cab0 <_printf_float+0x248>
 800ccb6:	f04f 0800 	mov.w	r8, #0
 800ccba:	f104 0919 	add.w	r9, r4, #25
 800ccbe:	e7f4      	b.n	800ccaa <_printf_float+0x442>
 800ccc0:	2900      	cmp	r1, #0
 800ccc2:	f43f ae8b 	beq.w	800c9dc <_printf_float+0x174>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cccc:	ab09      	add	r3, sp, #36	; 0x24
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	ec49 8b10 	vmov	d0, r8, r9
 800ccd4:	6022      	str	r2, [r4, #0]
 800ccd6:	f8cd a004 	str.w	sl, [sp, #4]
 800ccda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccde:	4628      	mov	r0, r5
 800cce0:	f7ff fd2e 	bl	800c740 <__cvt>
 800cce4:	4680      	mov	r8, r0
 800cce6:	e648      	b.n	800c97a <_printf_float+0x112>

0800cce8 <_printf_common>:
 800cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccec:	4691      	mov	r9, r2
 800ccee:	461f      	mov	r7, r3
 800ccf0:	688a      	ldr	r2, [r1, #8]
 800ccf2:	690b      	ldr	r3, [r1, #16]
 800ccf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	bfb8      	it	lt
 800ccfc:	4613      	movlt	r3, r2
 800ccfe:	f8c9 3000 	str.w	r3, [r9]
 800cd02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	b112      	cbz	r2, 800cd12 <_printf_common+0x2a>
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	f8c9 3000 	str.w	r3, [r9]
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	0699      	lsls	r1, r3, #26
 800cd16:	bf42      	ittt	mi
 800cd18:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cd1c:	3302      	addmi	r3, #2
 800cd1e:	f8c9 3000 	strmi.w	r3, [r9]
 800cd22:	6825      	ldr	r5, [r4, #0]
 800cd24:	f015 0506 	ands.w	r5, r5, #6
 800cd28:	d107      	bne.n	800cd3a <_printf_common+0x52>
 800cd2a:	f104 0a19 	add.w	sl, r4, #25
 800cd2e:	68e3      	ldr	r3, [r4, #12]
 800cd30:	f8d9 2000 	ldr.w	r2, [r9]
 800cd34:	1a9b      	subs	r3, r3, r2
 800cd36:	42ab      	cmp	r3, r5
 800cd38:	dc28      	bgt.n	800cd8c <_printf_common+0xa4>
 800cd3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cd3e:	6822      	ldr	r2, [r4, #0]
 800cd40:	3300      	adds	r3, #0
 800cd42:	bf18      	it	ne
 800cd44:	2301      	movne	r3, #1
 800cd46:	0692      	lsls	r2, r2, #26
 800cd48:	d42d      	bmi.n	800cda6 <_printf_common+0xbe>
 800cd4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd4e:	4639      	mov	r1, r7
 800cd50:	4630      	mov	r0, r6
 800cd52:	47c0      	blx	r8
 800cd54:	3001      	adds	r0, #1
 800cd56:	d020      	beq.n	800cd9a <_printf_common+0xb2>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	68e5      	ldr	r5, [r4, #12]
 800cd5c:	f8d9 2000 	ldr.w	r2, [r9]
 800cd60:	f003 0306 	and.w	r3, r3, #6
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf08      	it	eq
 800cd68:	1aad      	subeq	r5, r5, r2
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	bf0c      	ite	eq
 800cd70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd74:	2500      	movne	r5, #0
 800cd76:	4293      	cmp	r3, r2
 800cd78:	bfc4      	itt	gt
 800cd7a:	1a9b      	subgt	r3, r3, r2
 800cd7c:	18ed      	addgt	r5, r5, r3
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	341a      	adds	r4, #26
 800cd84:	454d      	cmp	r5, r9
 800cd86:	d11a      	bne.n	800cdbe <_printf_common+0xd6>
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e008      	b.n	800cd9e <_printf_common+0xb6>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4652      	mov	r2, sl
 800cd90:	4639      	mov	r1, r7
 800cd92:	4630      	mov	r0, r6
 800cd94:	47c0      	blx	r8
 800cd96:	3001      	adds	r0, #1
 800cd98:	d103      	bne.n	800cda2 <_printf_common+0xba>
 800cd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	3501      	adds	r5, #1
 800cda4:	e7c3      	b.n	800cd2e <_printf_common+0x46>
 800cda6:	18e1      	adds	r1, r4, r3
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	2030      	movs	r0, #48	; 0x30
 800cdac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdb0:	4422      	add	r2, r4
 800cdb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdba:	3302      	adds	r3, #2
 800cdbc:	e7c5      	b.n	800cd4a <_printf_common+0x62>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	47c0      	blx	r8
 800cdc8:	3001      	adds	r0, #1
 800cdca:	d0e6      	beq.n	800cd9a <_printf_common+0xb2>
 800cdcc:	f109 0901 	add.w	r9, r9, #1
 800cdd0:	e7d8      	b.n	800cd84 <_printf_common+0x9c>
	...

0800cdd4 <_printf_i>:
 800cdd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cddc:	460c      	mov	r4, r1
 800cdde:	7e09      	ldrb	r1, [r1, #24]
 800cde0:	b085      	sub	sp, #20
 800cde2:	296e      	cmp	r1, #110	; 0x6e
 800cde4:	4617      	mov	r7, r2
 800cde6:	4606      	mov	r6, r0
 800cde8:	4698      	mov	r8, r3
 800cdea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdec:	f000 80b3 	beq.w	800cf56 <_printf_i+0x182>
 800cdf0:	d822      	bhi.n	800ce38 <_printf_i+0x64>
 800cdf2:	2963      	cmp	r1, #99	; 0x63
 800cdf4:	d036      	beq.n	800ce64 <_printf_i+0x90>
 800cdf6:	d80a      	bhi.n	800ce0e <_printf_i+0x3a>
 800cdf8:	2900      	cmp	r1, #0
 800cdfa:	f000 80b9 	beq.w	800cf70 <_printf_i+0x19c>
 800cdfe:	2958      	cmp	r1, #88	; 0x58
 800ce00:	f000 8083 	beq.w	800cf0a <_printf_i+0x136>
 800ce04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ce0c:	e032      	b.n	800ce74 <_printf_i+0xa0>
 800ce0e:	2964      	cmp	r1, #100	; 0x64
 800ce10:	d001      	beq.n	800ce16 <_printf_i+0x42>
 800ce12:	2969      	cmp	r1, #105	; 0x69
 800ce14:	d1f6      	bne.n	800ce04 <_printf_i+0x30>
 800ce16:	6820      	ldr	r0, [r4, #0]
 800ce18:	6813      	ldr	r3, [r2, #0]
 800ce1a:	0605      	lsls	r5, r0, #24
 800ce1c:	f103 0104 	add.w	r1, r3, #4
 800ce20:	d52a      	bpl.n	800ce78 <_printf_i+0xa4>
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6011      	str	r1, [r2, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	da03      	bge.n	800ce32 <_printf_i+0x5e>
 800ce2a:	222d      	movs	r2, #45	; 0x2d
 800ce2c:	425b      	negs	r3, r3
 800ce2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ce32:	486f      	ldr	r0, [pc, #444]	; (800cff0 <_printf_i+0x21c>)
 800ce34:	220a      	movs	r2, #10
 800ce36:	e039      	b.n	800ceac <_printf_i+0xd8>
 800ce38:	2973      	cmp	r1, #115	; 0x73
 800ce3a:	f000 809d 	beq.w	800cf78 <_printf_i+0x1a4>
 800ce3e:	d808      	bhi.n	800ce52 <_printf_i+0x7e>
 800ce40:	296f      	cmp	r1, #111	; 0x6f
 800ce42:	d020      	beq.n	800ce86 <_printf_i+0xb2>
 800ce44:	2970      	cmp	r1, #112	; 0x70
 800ce46:	d1dd      	bne.n	800ce04 <_printf_i+0x30>
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	f043 0320 	orr.w	r3, r3, #32
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	e003      	b.n	800ce5a <_printf_i+0x86>
 800ce52:	2975      	cmp	r1, #117	; 0x75
 800ce54:	d017      	beq.n	800ce86 <_printf_i+0xb2>
 800ce56:	2978      	cmp	r1, #120	; 0x78
 800ce58:	d1d4      	bne.n	800ce04 <_printf_i+0x30>
 800ce5a:	2378      	movs	r3, #120	; 0x78
 800ce5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce60:	4864      	ldr	r0, [pc, #400]	; (800cff4 <_printf_i+0x220>)
 800ce62:	e055      	b.n	800cf10 <_printf_i+0x13c>
 800ce64:	6813      	ldr	r3, [r2, #0]
 800ce66:	1d19      	adds	r1, r3, #4
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6011      	str	r1, [r2, #0]
 800ce6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce74:	2301      	movs	r3, #1
 800ce76:	e08c      	b.n	800cf92 <_printf_i+0x1be>
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6011      	str	r1, [r2, #0]
 800ce7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce80:	bf18      	it	ne
 800ce82:	b21b      	sxthne	r3, r3
 800ce84:	e7cf      	b.n	800ce26 <_printf_i+0x52>
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	6825      	ldr	r5, [r4, #0]
 800ce8a:	1d18      	adds	r0, r3, #4
 800ce8c:	6010      	str	r0, [r2, #0]
 800ce8e:	0628      	lsls	r0, r5, #24
 800ce90:	d501      	bpl.n	800ce96 <_printf_i+0xc2>
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	e002      	b.n	800ce9c <_printf_i+0xc8>
 800ce96:	0668      	lsls	r0, r5, #25
 800ce98:	d5fb      	bpl.n	800ce92 <_printf_i+0xbe>
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	4854      	ldr	r0, [pc, #336]	; (800cff0 <_printf_i+0x21c>)
 800ce9e:	296f      	cmp	r1, #111	; 0x6f
 800cea0:	bf14      	ite	ne
 800cea2:	220a      	movne	r2, #10
 800cea4:	2208      	moveq	r2, #8
 800cea6:	2100      	movs	r1, #0
 800cea8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceac:	6865      	ldr	r5, [r4, #4]
 800ceae:	60a5      	str	r5, [r4, #8]
 800ceb0:	2d00      	cmp	r5, #0
 800ceb2:	f2c0 8095 	blt.w	800cfe0 <_printf_i+0x20c>
 800ceb6:	6821      	ldr	r1, [r4, #0]
 800ceb8:	f021 0104 	bic.w	r1, r1, #4
 800cebc:	6021      	str	r1, [r4, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d13d      	bne.n	800cf3e <_printf_i+0x16a>
 800cec2:	2d00      	cmp	r5, #0
 800cec4:	f040 808e 	bne.w	800cfe4 <_printf_i+0x210>
 800cec8:	4665      	mov	r5, ip
 800ceca:	2a08      	cmp	r2, #8
 800cecc:	d10b      	bne.n	800cee6 <_printf_i+0x112>
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	07db      	lsls	r3, r3, #31
 800ced2:	d508      	bpl.n	800cee6 <_printf_i+0x112>
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	6862      	ldr	r2, [r4, #4]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	bfde      	ittt	le
 800cedc:	2330      	movle	r3, #48	; 0x30
 800cede:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cee6:	ebac 0305 	sub.w	r3, ip, r5
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	f8cd 8000 	str.w	r8, [sp]
 800cef0:	463b      	mov	r3, r7
 800cef2:	aa03      	add	r2, sp, #12
 800cef4:	4621      	mov	r1, r4
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7ff fef6 	bl	800cce8 <_printf_common>
 800cefc:	3001      	adds	r0, #1
 800cefe:	d14d      	bne.n	800cf9c <_printf_i+0x1c8>
 800cf00:	f04f 30ff 	mov.w	r0, #4294967295
 800cf04:	b005      	add	sp, #20
 800cf06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0a:	4839      	ldr	r0, [pc, #228]	; (800cff0 <_printf_i+0x21c>)
 800cf0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cf10:	6813      	ldr	r3, [r2, #0]
 800cf12:	6821      	ldr	r1, [r4, #0]
 800cf14:	1d1d      	adds	r5, r3, #4
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6015      	str	r5, [r2, #0]
 800cf1a:	060a      	lsls	r2, r1, #24
 800cf1c:	d50b      	bpl.n	800cf36 <_printf_i+0x162>
 800cf1e:	07ca      	lsls	r2, r1, #31
 800cf20:	bf44      	itt	mi
 800cf22:	f041 0120 	orrmi.w	r1, r1, #32
 800cf26:	6021      	strmi	r1, [r4, #0]
 800cf28:	b91b      	cbnz	r3, 800cf32 <_printf_i+0x15e>
 800cf2a:	6822      	ldr	r2, [r4, #0]
 800cf2c:	f022 0220 	bic.w	r2, r2, #32
 800cf30:	6022      	str	r2, [r4, #0]
 800cf32:	2210      	movs	r2, #16
 800cf34:	e7b7      	b.n	800cea6 <_printf_i+0xd2>
 800cf36:	064d      	lsls	r5, r1, #25
 800cf38:	bf48      	it	mi
 800cf3a:	b29b      	uxthmi	r3, r3
 800cf3c:	e7ef      	b.n	800cf1e <_printf_i+0x14a>
 800cf3e:	4665      	mov	r5, ip
 800cf40:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf44:	fb02 3311 	mls	r3, r2, r1, r3
 800cf48:	5cc3      	ldrb	r3, [r0, r3]
 800cf4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cf4e:	460b      	mov	r3, r1
 800cf50:	2900      	cmp	r1, #0
 800cf52:	d1f5      	bne.n	800cf40 <_printf_i+0x16c>
 800cf54:	e7b9      	b.n	800ceca <_printf_i+0xf6>
 800cf56:	6813      	ldr	r3, [r2, #0]
 800cf58:	6825      	ldr	r5, [r4, #0]
 800cf5a:	6961      	ldr	r1, [r4, #20]
 800cf5c:	1d18      	adds	r0, r3, #4
 800cf5e:	6010      	str	r0, [r2, #0]
 800cf60:	0628      	lsls	r0, r5, #24
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	d501      	bpl.n	800cf6a <_printf_i+0x196>
 800cf66:	6019      	str	r1, [r3, #0]
 800cf68:	e002      	b.n	800cf70 <_printf_i+0x19c>
 800cf6a:	066a      	lsls	r2, r5, #25
 800cf6c:	d5fb      	bpl.n	800cf66 <_printf_i+0x192>
 800cf6e:	8019      	strh	r1, [r3, #0]
 800cf70:	2300      	movs	r3, #0
 800cf72:	6123      	str	r3, [r4, #16]
 800cf74:	4665      	mov	r5, ip
 800cf76:	e7b9      	b.n	800ceec <_printf_i+0x118>
 800cf78:	6813      	ldr	r3, [r2, #0]
 800cf7a:	1d19      	adds	r1, r3, #4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	681d      	ldr	r5, [r3, #0]
 800cf80:	6862      	ldr	r2, [r4, #4]
 800cf82:	2100      	movs	r1, #0
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7f3 f92b 	bl	80001e0 <memchr>
 800cf8a:	b108      	cbz	r0, 800cf90 <_printf_i+0x1bc>
 800cf8c:	1b40      	subs	r0, r0, r5
 800cf8e:	6060      	str	r0, [r4, #4]
 800cf90:	6863      	ldr	r3, [r4, #4]
 800cf92:	6123      	str	r3, [r4, #16]
 800cf94:	2300      	movs	r3, #0
 800cf96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf9a:	e7a7      	b.n	800ceec <_printf_i+0x118>
 800cf9c:	6923      	ldr	r3, [r4, #16]
 800cf9e:	462a      	mov	r2, r5
 800cfa0:	4639      	mov	r1, r7
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	47c0      	blx	r8
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d0aa      	beq.n	800cf00 <_printf_i+0x12c>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	079b      	lsls	r3, r3, #30
 800cfae:	d413      	bmi.n	800cfd8 <_printf_i+0x204>
 800cfb0:	68e0      	ldr	r0, [r4, #12]
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	4298      	cmp	r0, r3
 800cfb6:	bfb8      	it	lt
 800cfb8:	4618      	movlt	r0, r3
 800cfba:	e7a3      	b.n	800cf04 <_printf_i+0x130>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	464a      	mov	r2, r9
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d09a      	beq.n	800cf00 <_printf_i+0x12c>
 800cfca:	3501      	adds	r5, #1
 800cfcc:	68e3      	ldr	r3, [r4, #12]
 800cfce:	9a03      	ldr	r2, [sp, #12]
 800cfd0:	1a9b      	subs	r3, r3, r2
 800cfd2:	42ab      	cmp	r3, r5
 800cfd4:	dcf2      	bgt.n	800cfbc <_printf_i+0x1e8>
 800cfd6:	e7eb      	b.n	800cfb0 <_printf_i+0x1dc>
 800cfd8:	2500      	movs	r5, #0
 800cfda:	f104 0919 	add.w	r9, r4, #25
 800cfde:	e7f5      	b.n	800cfcc <_printf_i+0x1f8>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1ac      	bne.n	800cf3e <_printf_i+0x16a>
 800cfe4:	7803      	ldrb	r3, [r0, #0]
 800cfe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cfea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfee:	e76c      	b.n	800ceca <_printf_i+0xf6>
 800cff0:	080102ee 	.word	0x080102ee
 800cff4:	080102ff 	.word	0x080102ff

0800cff8 <_scanf_float>:
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	469a      	mov	sl, r3
 800cffe:	688b      	ldr	r3, [r1, #8]
 800d000:	4616      	mov	r6, r2
 800d002:	1e5a      	subs	r2, r3, #1
 800d004:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d008:	b087      	sub	sp, #28
 800d00a:	bf83      	ittte	hi
 800d00c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d010:	189b      	addhi	r3, r3, r2
 800d012:	9301      	strhi	r3, [sp, #4]
 800d014:	2300      	movls	r3, #0
 800d016:	bf86      	itte	hi
 800d018:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d01c:	608b      	strhi	r3, [r1, #8]
 800d01e:	9301      	strls	r3, [sp, #4]
 800d020:	680b      	ldr	r3, [r1, #0]
 800d022:	4688      	mov	r8, r1
 800d024:	f04f 0b00 	mov.w	fp, #0
 800d028:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d02c:	f848 3b1c 	str.w	r3, [r8], #28
 800d030:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d034:	4607      	mov	r7, r0
 800d036:	460c      	mov	r4, r1
 800d038:	4645      	mov	r5, r8
 800d03a:	465a      	mov	r2, fp
 800d03c:	46d9      	mov	r9, fp
 800d03e:	f8cd b008 	str.w	fp, [sp, #8]
 800d042:	68a1      	ldr	r1, [r4, #8]
 800d044:	b181      	cbz	r1, 800d068 <_scanf_float+0x70>
 800d046:	6833      	ldr	r3, [r6, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b49      	cmp	r3, #73	; 0x49
 800d04c:	d071      	beq.n	800d132 <_scanf_float+0x13a>
 800d04e:	d84d      	bhi.n	800d0ec <_scanf_float+0xf4>
 800d050:	2b39      	cmp	r3, #57	; 0x39
 800d052:	d840      	bhi.n	800d0d6 <_scanf_float+0xde>
 800d054:	2b31      	cmp	r3, #49	; 0x31
 800d056:	f080 8088 	bcs.w	800d16a <_scanf_float+0x172>
 800d05a:	2b2d      	cmp	r3, #45	; 0x2d
 800d05c:	f000 8090 	beq.w	800d180 <_scanf_float+0x188>
 800d060:	d815      	bhi.n	800d08e <_scanf_float+0x96>
 800d062:	2b2b      	cmp	r3, #43	; 0x2b
 800d064:	f000 808c 	beq.w	800d180 <_scanf_float+0x188>
 800d068:	f1b9 0f00 	cmp.w	r9, #0
 800d06c:	d003      	beq.n	800d076 <_scanf_float+0x7e>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	3a01      	subs	r2, #1
 800d078:	2a01      	cmp	r2, #1
 800d07a:	f200 80ea 	bhi.w	800d252 <_scanf_float+0x25a>
 800d07e:	4545      	cmp	r5, r8
 800d080:	f200 80dc 	bhi.w	800d23c <_scanf_float+0x244>
 800d084:	2601      	movs	r6, #1
 800d086:	4630      	mov	r0, r6
 800d088:	b007      	add	sp, #28
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	2b2e      	cmp	r3, #46	; 0x2e
 800d090:	f000 809f 	beq.w	800d1d2 <_scanf_float+0x1da>
 800d094:	2b30      	cmp	r3, #48	; 0x30
 800d096:	d1e7      	bne.n	800d068 <_scanf_float+0x70>
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d09e:	d064      	beq.n	800d16a <_scanf_float+0x172>
 800d0a0:	9b01      	ldr	r3, [sp, #4]
 800d0a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d0a6:	6020      	str	r0, [r4, #0]
 800d0a8:	f109 0901 	add.w	r9, r9, #1
 800d0ac:	b11b      	cbz	r3, 800d0b6 <_scanf_float+0xbe>
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	3101      	adds	r1, #1
 800d0b2:	9301      	str	r3, [sp, #4]
 800d0b4:	60a1      	str	r1, [r4, #8]
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	60a3      	str	r3, [r4, #8]
 800d0bc:	6923      	ldr	r3, [r4, #16]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	6123      	str	r3, [r4, #16]
 800d0c2:	6873      	ldr	r3, [r6, #4]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	6073      	str	r3, [r6, #4]
 800d0ca:	f340 80ac 	ble.w	800d226 <_scanf_float+0x22e>
 800d0ce:	6833      	ldr	r3, [r6, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	e7b5      	b.n	800d042 <_scanf_float+0x4a>
 800d0d6:	2b45      	cmp	r3, #69	; 0x45
 800d0d8:	f000 8085 	beq.w	800d1e6 <_scanf_float+0x1ee>
 800d0dc:	2b46      	cmp	r3, #70	; 0x46
 800d0de:	d06a      	beq.n	800d1b6 <_scanf_float+0x1be>
 800d0e0:	2b41      	cmp	r3, #65	; 0x41
 800d0e2:	d1c1      	bne.n	800d068 <_scanf_float+0x70>
 800d0e4:	2a01      	cmp	r2, #1
 800d0e6:	d1bf      	bne.n	800d068 <_scanf_float+0x70>
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	e046      	b.n	800d17a <_scanf_float+0x182>
 800d0ec:	2b65      	cmp	r3, #101	; 0x65
 800d0ee:	d07a      	beq.n	800d1e6 <_scanf_float+0x1ee>
 800d0f0:	d818      	bhi.n	800d124 <_scanf_float+0x12c>
 800d0f2:	2b54      	cmp	r3, #84	; 0x54
 800d0f4:	d066      	beq.n	800d1c4 <_scanf_float+0x1cc>
 800d0f6:	d811      	bhi.n	800d11c <_scanf_float+0x124>
 800d0f8:	2b4e      	cmp	r3, #78	; 0x4e
 800d0fa:	d1b5      	bne.n	800d068 <_scanf_float+0x70>
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d146      	bne.n	800d18e <_scanf_float+0x196>
 800d100:	f1b9 0f00 	cmp.w	r9, #0
 800d104:	d145      	bne.n	800d192 <_scanf_float+0x19a>
 800d106:	6821      	ldr	r1, [r4, #0]
 800d108:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d10c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d110:	d13f      	bne.n	800d192 <_scanf_float+0x19a>
 800d112:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d116:	6021      	str	r1, [r4, #0]
 800d118:	2201      	movs	r2, #1
 800d11a:	e02e      	b.n	800d17a <_scanf_float+0x182>
 800d11c:	2b59      	cmp	r3, #89	; 0x59
 800d11e:	d01e      	beq.n	800d15e <_scanf_float+0x166>
 800d120:	2b61      	cmp	r3, #97	; 0x61
 800d122:	e7de      	b.n	800d0e2 <_scanf_float+0xea>
 800d124:	2b6e      	cmp	r3, #110	; 0x6e
 800d126:	d0e9      	beq.n	800d0fc <_scanf_float+0x104>
 800d128:	d815      	bhi.n	800d156 <_scanf_float+0x15e>
 800d12a:	2b66      	cmp	r3, #102	; 0x66
 800d12c:	d043      	beq.n	800d1b6 <_scanf_float+0x1be>
 800d12e:	2b69      	cmp	r3, #105	; 0x69
 800d130:	d19a      	bne.n	800d068 <_scanf_float+0x70>
 800d132:	f1bb 0f00 	cmp.w	fp, #0
 800d136:	d138      	bne.n	800d1aa <_scanf_float+0x1b2>
 800d138:	f1b9 0f00 	cmp.w	r9, #0
 800d13c:	d197      	bne.n	800d06e <_scanf_float+0x76>
 800d13e:	6821      	ldr	r1, [r4, #0]
 800d140:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d144:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d148:	d195      	bne.n	800d076 <_scanf_float+0x7e>
 800d14a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d14e:	6021      	str	r1, [r4, #0]
 800d150:	f04f 0b01 	mov.w	fp, #1
 800d154:	e011      	b.n	800d17a <_scanf_float+0x182>
 800d156:	2b74      	cmp	r3, #116	; 0x74
 800d158:	d034      	beq.n	800d1c4 <_scanf_float+0x1cc>
 800d15a:	2b79      	cmp	r3, #121	; 0x79
 800d15c:	d184      	bne.n	800d068 <_scanf_float+0x70>
 800d15e:	f1bb 0f07 	cmp.w	fp, #7
 800d162:	d181      	bne.n	800d068 <_scanf_float+0x70>
 800d164:	f04f 0b08 	mov.w	fp, #8
 800d168:	e007      	b.n	800d17a <_scanf_float+0x182>
 800d16a:	eb12 0f0b 	cmn.w	r2, fp
 800d16e:	f47f af7b 	bne.w	800d068 <_scanf_float+0x70>
 800d172:	6821      	ldr	r1, [r4, #0]
 800d174:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d178:	6021      	str	r1, [r4, #0]
 800d17a:	702b      	strb	r3, [r5, #0]
 800d17c:	3501      	adds	r5, #1
 800d17e:	e79a      	b.n	800d0b6 <_scanf_float+0xbe>
 800d180:	6821      	ldr	r1, [r4, #0]
 800d182:	0608      	lsls	r0, r1, #24
 800d184:	f57f af70 	bpl.w	800d068 <_scanf_float+0x70>
 800d188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d18c:	e7f4      	b.n	800d178 <_scanf_float+0x180>
 800d18e:	2a02      	cmp	r2, #2
 800d190:	d047      	beq.n	800d222 <_scanf_float+0x22a>
 800d192:	f1bb 0f01 	cmp.w	fp, #1
 800d196:	d003      	beq.n	800d1a0 <_scanf_float+0x1a8>
 800d198:	f1bb 0f04 	cmp.w	fp, #4
 800d19c:	f47f af64 	bne.w	800d068 <_scanf_float+0x70>
 800d1a0:	f10b 0b01 	add.w	fp, fp, #1
 800d1a4:	fa5f fb8b 	uxtb.w	fp, fp
 800d1a8:	e7e7      	b.n	800d17a <_scanf_float+0x182>
 800d1aa:	f1bb 0f03 	cmp.w	fp, #3
 800d1ae:	d0f7      	beq.n	800d1a0 <_scanf_float+0x1a8>
 800d1b0:	f1bb 0f05 	cmp.w	fp, #5
 800d1b4:	e7f2      	b.n	800d19c <_scanf_float+0x1a4>
 800d1b6:	f1bb 0f02 	cmp.w	fp, #2
 800d1ba:	f47f af55 	bne.w	800d068 <_scanf_float+0x70>
 800d1be:	f04f 0b03 	mov.w	fp, #3
 800d1c2:	e7da      	b.n	800d17a <_scanf_float+0x182>
 800d1c4:	f1bb 0f06 	cmp.w	fp, #6
 800d1c8:	f47f af4e 	bne.w	800d068 <_scanf_float+0x70>
 800d1cc:	f04f 0b07 	mov.w	fp, #7
 800d1d0:	e7d3      	b.n	800d17a <_scanf_float+0x182>
 800d1d2:	6821      	ldr	r1, [r4, #0]
 800d1d4:	0588      	lsls	r0, r1, #22
 800d1d6:	f57f af47 	bpl.w	800d068 <_scanf_float+0x70>
 800d1da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d1de:	6021      	str	r1, [r4, #0]
 800d1e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1e4:	e7c9      	b.n	800d17a <_scanf_float+0x182>
 800d1e6:	6821      	ldr	r1, [r4, #0]
 800d1e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d1ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d1f0:	d006      	beq.n	800d200 <_scanf_float+0x208>
 800d1f2:	0548      	lsls	r0, r1, #21
 800d1f4:	f57f af38 	bpl.w	800d068 <_scanf_float+0x70>
 800d1f8:	f1b9 0f00 	cmp.w	r9, #0
 800d1fc:	f43f af3b 	beq.w	800d076 <_scanf_float+0x7e>
 800d200:	0588      	lsls	r0, r1, #22
 800d202:	bf58      	it	pl
 800d204:	9802      	ldrpl	r0, [sp, #8]
 800d206:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d20a:	bf58      	it	pl
 800d20c:	eba9 0000 	subpl.w	r0, r9, r0
 800d210:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d214:	bf58      	it	pl
 800d216:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d21a:	6021      	str	r1, [r4, #0]
 800d21c:	f04f 0900 	mov.w	r9, #0
 800d220:	e7ab      	b.n	800d17a <_scanf_float+0x182>
 800d222:	2203      	movs	r2, #3
 800d224:	e7a9      	b.n	800d17a <_scanf_float+0x182>
 800d226:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d22a:	9205      	str	r2, [sp, #20]
 800d22c:	4631      	mov	r1, r6
 800d22e:	4638      	mov	r0, r7
 800d230:	4798      	blx	r3
 800d232:	9a05      	ldr	r2, [sp, #20]
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f af04 	beq.w	800d042 <_scanf_float+0x4a>
 800d23a:	e715      	b.n	800d068 <_scanf_float+0x70>
 800d23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d244:	4632      	mov	r2, r6
 800d246:	4638      	mov	r0, r7
 800d248:	4798      	blx	r3
 800d24a:	6923      	ldr	r3, [r4, #16]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	6123      	str	r3, [r4, #16]
 800d250:	e715      	b.n	800d07e <_scanf_float+0x86>
 800d252:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d256:	2b06      	cmp	r3, #6
 800d258:	d80a      	bhi.n	800d270 <_scanf_float+0x278>
 800d25a:	f1bb 0f02 	cmp.w	fp, #2
 800d25e:	d968      	bls.n	800d332 <_scanf_float+0x33a>
 800d260:	f1ab 0b03 	sub.w	fp, fp, #3
 800d264:	fa5f fb8b 	uxtb.w	fp, fp
 800d268:	eba5 0b0b 	sub.w	fp, r5, fp
 800d26c:	455d      	cmp	r5, fp
 800d26e:	d14b      	bne.n	800d308 <_scanf_float+0x310>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	05da      	lsls	r2, r3, #23
 800d274:	d51f      	bpl.n	800d2b6 <_scanf_float+0x2be>
 800d276:	055b      	lsls	r3, r3, #21
 800d278:	d468      	bmi.n	800d34c <_scanf_float+0x354>
 800d27a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	2965      	cmp	r1, #101	; 0x65
 800d282:	f103 33ff 	add.w	r3, r3, #4294967295
 800d286:	f105 3bff 	add.w	fp, r5, #4294967295
 800d28a:	6123      	str	r3, [r4, #16]
 800d28c:	d00d      	beq.n	800d2aa <_scanf_float+0x2b2>
 800d28e:	2945      	cmp	r1, #69	; 0x45
 800d290:	d00b      	beq.n	800d2aa <_scanf_float+0x2b2>
 800d292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d296:	4632      	mov	r2, r6
 800d298:	4638      	mov	r0, r7
 800d29a:	4798      	blx	r3
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	f1a5 0b02 	sub.w	fp, r5, #2
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	4798      	blx	r3
 800d2b4:	465d      	mov	r5, fp
 800d2b6:	6826      	ldr	r6, [r4, #0]
 800d2b8:	f016 0610 	ands.w	r6, r6, #16
 800d2bc:	d17a      	bne.n	800d3b4 <_scanf_float+0x3bc>
 800d2be:	702e      	strb	r6, [r5, #0]
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2ca:	d142      	bne.n	800d352 <_scanf_float+0x35a>
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	eba9 0303 	sub.w	r3, r9, r3
 800d2d2:	425a      	negs	r2, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d149      	bne.n	800d36c <_scanf_float+0x374>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4641      	mov	r1, r8
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f000 fec7 	bl	800e070 <_strtod_r>
 800d2e2:	6825      	ldr	r5, [r4, #0]
 800d2e4:	f8da 3000 	ldr.w	r3, [sl]
 800d2e8:	f015 0f02 	tst.w	r5, #2
 800d2ec:	f103 0204 	add.w	r2, r3, #4
 800d2f0:	ec59 8b10 	vmov	r8, r9, d0
 800d2f4:	f8ca 2000 	str.w	r2, [sl]
 800d2f8:	d043      	beq.n	800d382 <_scanf_float+0x38a>
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	e9c3 8900 	strd	r8, r9, [r3]
 800d300:	68e3      	ldr	r3, [r4, #12]
 800d302:	3301      	adds	r3, #1
 800d304:	60e3      	str	r3, [r4, #12]
 800d306:	e6be      	b.n	800d086 <_scanf_float+0x8e>
 800d308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d30c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d310:	4632      	mov	r2, r6
 800d312:	4638      	mov	r0, r7
 800d314:	4798      	blx	r3
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	3b01      	subs	r3, #1
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	e7a6      	b.n	800d26c <_scanf_float+0x274>
 800d31e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d322:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d326:	4632      	mov	r2, r6
 800d328:	4638      	mov	r0, r7
 800d32a:	4798      	blx	r3
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	3b01      	subs	r3, #1
 800d330:	6123      	str	r3, [r4, #16]
 800d332:	4545      	cmp	r5, r8
 800d334:	d8f3      	bhi.n	800d31e <_scanf_float+0x326>
 800d336:	e6a5      	b.n	800d084 <_scanf_float+0x8c>
 800d338:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d33c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d340:	4632      	mov	r2, r6
 800d342:	4638      	mov	r0, r7
 800d344:	4798      	blx	r3
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	3b01      	subs	r3, #1
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	4545      	cmp	r5, r8
 800d34e:	d8f3      	bhi.n	800d338 <_scanf_float+0x340>
 800d350:	e698      	b.n	800d084 <_scanf_float+0x8c>
 800d352:	9b03      	ldr	r3, [sp, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d0bf      	beq.n	800d2d8 <_scanf_float+0x2e0>
 800d358:	9904      	ldr	r1, [sp, #16]
 800d35a:	230a      	movs	r3, #10
 800d35c:	4632      	mov	r2, r6
 800d35e:	3101      	adds	r1, #1
 800d360:	4638      	mov	r0, r7
 800d362:	f000 ff11 	bl	800e188 <_strtol_r>
 800d366:	9b03      	ldr	r3, [sp, #12]
 800d368:	9d04      	ldr	r5, [sp, #16]
 800d36a:	1ac2      	subs	r2, r0, r3
 800d36c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d370:	429d      	cmp	r5, r3
 800d372:	bf28      	it	cs
 800d374:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d378:	490f      	ldr	r1, [pc, #60]	; (800d3b8 <_scanf_float+0x3c0>)
 800d37a:	4628      	mov	r0, r5
 800d37c:	f000 f834 	bl	800d3e8 <siprintf>
 800d380:	e7aa      	b.n	800d2d8 <_scanf_float+0x2e0>
 800d382:	f015 0504 	ands.w	r5, r5, #4
 800d386:	d1b8      	bne.n	800d2fa <_scanf_float+0x302>
 800d388:	681f      	ldr	r7, [r3, #0]
 800d38a:	ee10 2a10 	vmov	r2, s0
 800d38e:	464b      	mov	r3, r9
 800d390:	ee10 0a10 	vmov	r0, s0
 800d394:	4649      	mov	r1, r9
 800d396:	f7f3 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800d39a:	b128      	cbz	r0, 800d3a8 <_scanf_float+0x3b0>
 800d39c:	4628      	mov	r0, r5
 800d39e:	f000 f81d 	bl	800d3dc <nanf>
 800d3a2:	ed87 0a00 	vstr	s0, [r7]
 800d3a6:	e7ab      	b.n	800d300 <_scanf_float+0x308>
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f3 fc1c 	bl	8000be8 <__aeabi_d2f>
 800d3b0:	6038      	str	r0, [r7, #0]
 800d3b2:	e7a5      	b.n	800d300 <_scanf_float+0x308>
 800d3b4:	2600      	movs	r6, #0
 800d3b6:	e666      	b.n	800d086 <_scanf_float+0x8e>
 800d3b8:	08010310 	.word	0x08010310

0800d3bc <_sbrk_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4c06      	ldr	r4, [pc, #24]	; (800d3d8 <_sbrk_r+0x1c>)
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	4608      	mov	r0, r1
 800d3c6:	6023      	str	r3, [r4, #0]
 800d3c8:	f7fe fb0e 	bl	800b9e8 <_sbrk>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_sbrk_r+0x1a>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_sbrk_r+0x1a>
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	200045c0 	.word	0x200045c0

0800d3dc <nanf>:
 800d3dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d3e4 <nanf+0x8>
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	7fc00000 	.word	0x7fc00000

0800d3e8 <siprintf>:
 800d3e8:	b40e      	push	{r1, r2, r3}
 800d3ea:	b500      	push	{lr}
 800d3ec:	b09c      	sub	sp, #112	; 0x70
 800d3ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d3f0:	9002      	str	r0, [sp, #8]
 800d3f2:	9006      	str	r0, [sp, #24]
 800d3f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3f8:	4809      	ldr	r0, [pc, #36]	; (800d420 <siprintf+0x38>)
 800d3fa:	9107      	str	r1, [sp, #28]
 800d3fc:	9104      	str	r1, [sp, #16]
 800d3fe:	4909      	ldr	r1, [pc, #36]	; (800d424 <siprintf+0x3c>)
 800d400:	f853 2b04 	ldr.w	r2, [r3], #4
 800d404:	9105      	str	r1, [sp, #20]
 800d406:	6800      	ldr	r0, [r0, #0]
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	a902      	add	r1, sp, #8
 800d40c:	f002 fcea 	bl	800fde4 <_svfiprintf_r>
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
 800d416:	b01c      	add	sp, #112	; 0x70
 800d418:	f85d eb04 	ldr.w	lr, [sp], #4
 800d41c:	b003      	add	sp, #12
 800d41e:	4770      	bx	lr
 800d420:	20000180 	.word	0x20000180
 800d424:	ffff0208 	.word	0xffff0208

0800d428 <strncmp>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	b16a      	cbz	r2, 800d448 <strncmp+0x20>
 800d42c:	3901      	subs	r1, #1
 800d42e:	1884      	adds	r4, r0, r2
 800d430:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d434:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d438:	4293      	cmp	r3, r2
 800d43a:	d103      	bne.n	800d444 <strncmp+0x1c>
 800d43c:	42a0      	cmp	r0, r4
 800d43e:	d001      	beq.n	800d444 <strncmp+0x1c>
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1f5      	bne.n	800d430 <strncmp+0x8>
 800d444:	1a98      	subs	r0, r3, r2
 800d446:	bd10      	pop	{r4, pc}
 800d448:	4610      	mov	r0, r2
 800d44a:	e7fc      	b.n	800d446 <strncmp+0x1e>

0800d44c <sulp>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	4604      	mov	r4, r0
 800d450:	460d      	mov	r5, r1
 800d452:	ec45 4b10 	vmov	d0, r4, r5
 800d456:	4616      	mov	r6, r2
 800d458:	f002 fb28 	bl	800faac <__ulp>
 800d45c:	ec51 0b10 	vmov	r0, r1, d0
 800d460:	b17e      	cbz	r6, 800d482 <sulp+0x36>
 800d462:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d466:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dd09      	ble.n	800d482 <sulp+0x36>
 800d46e:	051b      	lsls	r3, r3, #20
 800d470:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d474:	2400      	movs	r4, #0
 800d476:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d47a:	4622      	mov	r2, r4
 800d47c:	462b      	mov	r3, r5
 800d47e:	f7f3 f8bb 	bl	80005f8 <__aeabi_dmul>
 800d482:	bd70      	pop	{r4, r5, r6, pc}
 800d484:	0000      	movs	r0, r0
	...

0800d488 <_strtod_l>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	461f      	mov	r7, r3
 800d48e:	b0a1      	sub	sp, #132	; 0x84
 800d490:	2300      	movs	r3, #0
 800d492:	4681      	mov	r9, r0
 800d494:	4638      	mov	r0, r7
 800d496:	460e      	mov	r6, r1
 800d498:	9217      	str	r2, [sp, #92]	; 0x5c
 800d49a:	931c      	str	r3, [sp, #112]	; 0x70
 800d49c:	f002 f815 	bl	800f4ca <__localeconv_l>
 800d4a0:	4680      	mov	r8, r0
 800d4a2:	6800      	ldr	r0, [r0, #0]
 800d4a4:	f7f2 fe94 	bl	80001d0 <strlen>
 800d4a8:	f04f 0a00 	mov.w	sl, #0
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	f04f 0b00 	mov.w	fp, #0
 800d4b2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	2a0d      	cmp	r2, #13
 800d4ba:	d832      	bhi.n	800d522 <_strtod_l+0x9a>
 800d4bc:	2a09      	cmp	r2, #9
 800d4be:	d236      	bcs.n	800d52e <_strtod_l+0xa6>
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	d03e      	beq.n	800d542 <_strtod_l+0xba>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d4c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d4ca:	782b      	ldrb	r3, [r5, #0]
 800d4cc:	2b30      	cmp	r3, #48	; 0x30
 800d4ce:	f040 80ac 	bne.w	800d62a <_strtod_l+0x1a2>
 800d4d2:	786b      	ldrb	r3, [r5, #1]
 800d4d4:	2b58      	cmp	r3, #88	; 0x58
 800d4d6:	d001      	beq.n	800d4dc <_strtod_l+0x54>
 800d4d8:	2b78      	cmp	r3, #120	; 0x78
 800d4da:	d167      	bne.n	800d5ac <_strtod_l+0x124>
 800d4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	ab1c      	add	r3, sp, #112	; 0x70
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	9702      	str	r7, [sp, #8]
 800d4e6:	ab1d      	add	r3, sp, #116	; 0x74
 800d4e8:	4a88      	ldr	r2, [pc, #544]	; (800d70c <_strtod_l+0x284>)
 800d4ea:	a91b      	add	r1, sp, #108	; 0x6c
 800d4ec:	4648      	mov	r0, r9
 800d4ee:	f001 fd12 	bl	800ef16 <__gethex>
 800d4f2:	f010 0407 	ands.w	r4, r0, #7
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	d005      	beq.n	800d506 <_strtod_l+0x7e>
 800d4fa:	2c06      	cmp	r4, #6
 800d4fc:	d12b      	bne.n	800d556 <_strtod_l+0xce>
 800d4fe:	3501      	adds	r5, #1
 800d500:	2300      	movs	r3, #0
 800d502:	951b      	str	r5, [sp, #108]	; 0x6c
 800d504:	930d      	str	r3, [sp, #52]	; 0x34
 800d506:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f040 859a 	bne.w	800e042 <_strtod_l+0xbba>
 800d50e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d510:	b1e3      	cbz	r3, 800d54c <_strtod_l+0xc4>
 800d512:	4652      	mov	r2, sl
 800d514:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d518:	ec43 2b10 	vmov	d0, r2, r3
 800d51c:	b021      	add	sp, #132	; 0x84
 800d51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d522:	2a2b      	cmp	r2, #43	; 0x2b
 800d524:	d015      	beq.n	800d552 <_strtod_l+0xca>
 800d526:	2a2d      	cmp	r2, #45	; 0x2d
 800d528:	d004      	beq.n	800d534 <_strtod_l+0xac>
 800d52a:	2a20      	cmp	r2, #32
 800d52c:	d1ca      	bne.n	800d4c4 <_strtod_l+0x3c>
 800d52e:	3301      	adds	r3, #1
 800d530:	931b      	str	r3, [sp, #108]	; 0x6c
 800d532:	e7bf      	b.n	800d4b4 <_strtod_l+0x2c>
 800d534:	2201      	movs	r2, #1
 800d536:	920d      	str	r2, [sp, #52]	; 0x34
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d53c:	785b      	ldrb	r3, [r3, #1]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1c2      	bne.n	800d4c8 <_strtod_l+0x40>
 800d542:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d544:	961b      	str	r6, [sp, #108]	; 0x6c
 800d546:	2b00      	cmp	r3, #0
 800d548:	f040 8579 	bne.w	800e03e <_strtod_l+0xbb6>
 800d54c:	4652      	mov	r2, sl
 800d54e:	465b      	mov	r3, fp
 800d550:	e7e2      	b.n	800d518 <_strtod_l+0x90>
 800d552:	2200      	movs	r2, #0
 800d554:	e7ef      	b.n	800d536 <_strtod_l+0xae>
 800d556:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d558:	b13a      	cbz	r2, 800d56a <_strtod_l+0xe2>
 800d55a:	2135      	movs	r1, #53	; 0x35
 800d55c:	a81e      	add	r0, sp, #120	; 0x78
 800d55e:	f002 fb9d 	bl	800fc9c <__copybits>
 800d562:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d564:	4648      	mov	r0, r9
 800d566:	f002 f809 	bl	800f57c <_Bfree>
 800d56a:	3c01      	subs	r4, #1
 800d56c:	2c04      	cmp	r4, #4
 800d56e:	d806      	bhi.n	800d57e <_strtod_l+0xf6>
 800d570:	e8df f004 	tbb	[pc, r4]
 800d574:	1714030a 	.word	0x1714030a
 800d578:	0a          	.byte	0x0a
 800d579:	00          	.byte	0x00
 800d57a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d57e:	0730      	lsls	r0, r6, #28
 800d580:	d5c1      	bpl.n	800d506 <_strtod_l+0x7e>
 800d582:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d586:	e7be      	b.n	800d506 <_strtod_l+0x7e>
 800d588:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d58c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d58e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d592:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d596:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d59a:	e7f0      	b.n	800d57e <_strtod_l+0xf6>
 800d59c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d710 <_strtod_l+0x288>
 800d5a0:	e7ed      	b.n	800d57e <_strtod_l+0xf6>
 800d5a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d5a6:	f04f 3aff 	mov.w	sl, #4294967295
 800d5aa:	e7e8      	b.n	800d57e <_strtod_l+0xf6>
 800d5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d5b2:	785b      	ldrb	r3, [r3, #1]
 800d5b4:	2b30      	cmp	r3, #48	; 0x30
 800d5b6:	d0f9      	beq.n	800d5ac <_strtod_l+0x124>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0a4      	beq.n	800d506 <_strtod_l+0x7e>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	2500      	movs	r5, #0
 800d5c0:	9306      	str	r3, [sp, #24]
 800d5c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5c4:	9308      	str	r3, [sp, #32]
 800d5c6:	9507      	str	r5, [sp, #28]
 800d5c8:	9505      	str	r5, [sp, #20]
 800d5ca:	220a      	movs	r2, #10
 800d5cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d5ce:	7807      	ldrb	r7, [r0, #0]
 800d5d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d5d4:	b2d9      	uxtb	r1, r3
 800d5d6:	2909      	cmp	r1, #9
 800d5d8:	d929      	bls.n	800d62e <_strtod_l+0x1a6>
 800d5da:	4622      	mov	r2, r4
 800d5dc:	f8d8 1000 	ldr.w	r1, [r8]
 800d5e0:	f7ff ff22 	bl	800d428 <strncmp>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d031      	beq.n	800d64c <_strtod_l+0x1c4>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	9c05      	ldr	r4, [sp, #20]
 800d5ec:	9004      	str	r0, [sp, #16]
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	2b65      	cmp	r3, #101	; 0x65
 800d5f4:	d001      	beq.n	800d5fa <_strtod_l+0x172>
 800d5f6:	2b45      	cmp	r3, #69	; 0x45
 800d5f8:	d114      	bne.n	800d624 <_strtod_l+0x19c>
 800d5fa:	b924      	cbnz	r4, 800d606 <_strtod_l+0x17e>
 800d5fc:	b910      	cbnz	r0, 800d604 <_strtod_l+0x17c>
 800d5fe:	9b06      	ldr	r3, [sp, #24]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d09e      	beq.n	800d542 <_strtod_l+0xba>
 800d604:	2400      	movs	r4, #0
 800d606:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d608:	1c73      	adds	r3, r6, #1
 800d60a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d60c:	7873      	ldrb	r3, [r6, #1]
 800d60e:	2b2b      	cmp	r3, #43	; 0x2b
 800d610:	d078      	beq.n	800d704 <_strtod_l+0x27c>
 800d612:	2b2d      	cmp	r3, #45	; 0x2d
 800d614:	d070      	beq.n	800d6f8 <_strtod_l+0x270>
 800d616:	f04f 0c00 	mov.w	ip, #0
 800d61a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d61e:	2f09      	cmp	r7, #9
 800d620:	d97c      	bls.n	800d71c <_strtod_l+0x294>
 800d622:	961b      	str	r6, [sp, #108]	; 0x6c
 800d624:	f04f 0e00 	mov.w	lr, #0
 800d628:	e09a      	b.n	800d760 <_strtod_l+0x2d8>
 800d62a:	2300      	movs	r3, #0
 800d62c:	e7c7      	b.n	800d5be <_strtod_l+0x136>
 800d62e:	9905      	ldr	r1, [sp, #20]
 800d630:	2908      	cmp	r1, #8
 800d632:	bfdd      	ittte	le
 800d634:	9907      	ldrle	r1, [sp, #28]
 800d636:	fb02 3301 	mlale	r3, r2, r1, r3
 800d63a:	9307      	strle	r3, [sp, #28]
 800d63c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d640:	9b05      	ldr	r3, [sp, #20]
 800d642:	3001      	adds	r0, #1
 800d644:	3301      	adds	r3, #1
 800d646:	9305      	str	r3, [sp, #20]
 800d648:	901b      	str	r0, [sp, #108]	; 0x6c
 800d64a:	e7bf      	b.n	800d5cc <_strtod_l+0x144>
 800d64c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d64e:	191a      	adds	r2, r3, r4
 800d650:	921b      	str	r2, [sp, #108]	; 0x6c
 800d652:	9a05      	ldr	r2, [sp, #20]
 800d654:	5d1b      	ldrb	r3, [r3, r4]
 800d656:	2a00      	cmp	r2, #0
 800d658:	d037      	beq.n	800d6ca <_strtod_l+0x242>
 800d65a:	9c05      	ldr	r4, [sp, #20]
 800d65c:	4602      	mov	r2, r0
 800d65e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d662:	2909      	cmp	r1, #9
 800d664:	d913      	bls.n	800d68e <_strtod_l+0x206>
 800d666:	2101      	movs	r1, #1
 800d668:	9104      	str	r1, [sp, #16]
 800d66a:	e7c2      	b.n	800d5f2 <_strtod_l+0x16a>
 800d66c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	921b      	str	r2, [sp, #108]	; 0x6c
 800d672:	785b      	ldrb	r3, [r3, #1]
 800d674:	3001      	adds	r0, #1
 800d676:	2b30      	cmp	r3, #48	; 0x30
 800d678:	d0f8      	beq.n	800d66c <_strtod_l+0x1e4>
 800d67a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d67e:	2a08      	cmp	r2, #8
 800d680:	f200 84e4 	bhi.w	800e04c <_strtod_l+0xbc4>
 800d684:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d686:	9208      	str	r2, [sp, #32]
 800d688:	4602      	mov	r2, r0
 800d68a:	2000      	movs	r0, #0
 800d68c:	4604      	mov	r4, r0
 800d68e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d692:	f100 0101 	add.w	r1, r0, #1
 800d696:	d012      	beq.n	800d6be <_strtod_l+0x236>
 800d698:	440a      	add	r2, r1
 800d69a:	eb00 0c04 	add.w	ip, r0, r4
 800d69e:	4621      	mov	r1, r4
 800d6a0:	270a      	movs	r7, #10
 800d6a2:	458c      	cmp	ip, r1
 800d6a4:	d113      	bne.n	800d6ce <_strtod_l+0x246>
 800d6a6:	1821      	adds	r1, r4, r0
 800d6a8:	2908      	cmp	r1, #8
 800d6aa:	f104 0401 	add.w	r4, r4, #1
 800d6ae:	4404      	add	r4, r0
 800d6b0:	dc19      	bgt.n	800d6e6 <_strtod_l+0x25e>
 800d6b2:	9b07      	ldr	r3, [sp, #28]
 800d6b4:	210a      	movs	r1, #10
 800d6b6:	fb01 e303 	mla	r3, r1, r3, lr
 800d6ba:	9307      	str	r3, [sp, #28]
 800d6bc:	2100      	movs	r1, #0
 800d6be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6c0:	1c58      	adds	r0, r3, #1
 800d6c2:	901b      	str	r0, [sp, #108]	; 0x6c
 800d6c4:	785b      	ldrb	r3, [r3, #1]
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	e7c9      	b.n	800d65e <_strtod_l+0x1d6>
 800d6ca:	9805      	ldr	r0, [sp, #20]
 800d6cc:	e7d3      	b.n	800d676 <_strtod_l+0x1ee>
 800d6ce:	2908      	cmp	r1, #8
 800d6d0:	f101 0101 	add.w	r1, r1, #1
 800d6d4:	dc03      	bgt.n	800d6de <_strtod_l+0x256>
 800d6d6:	9b07      	ldr	r3, [sp, #28]
 800d6d8:	437b      	muls	r3, r7
 800d6da:	9307      	str	r3, [sp, #28]
 800d6dc:	e7e1      	b.n	800d6a2 <_strtod_l+0x21a>
 800d6de:	2910      	cmp	r1, #16
 800d6e0:	bfd8      	it	le
 800d6e2:	437d      	mulle	r5, r7
 800d6e4:	e7dd      	b.n	800d6a2 <_strtod_l+0x21a>
 800d6e6:	2c10      	cmp	r4, #16
 800d6e8:	bfdc      	itt	le
 800d6ea:	210a      	movle	r1, #10
 800d6ec:	fb01 e505 	mlale	r5, r1, r5, lr
 800d6f0:	e7e4      	b.n	800d6bc <_strtod_l+0x234>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	9304      	str	r3, [sp, #16]
 800d6f6:	e781      	b.n	800d5fc <_strtod_l+0x174>
 800d6f8:	f04f 0c01 	mov.w	ip, #1
 800d6fc:	1cb3      	adds	r3, r6, #2
 800d6fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800d700:	78b3      	ldrb	r3, [r6, #2]
 800d702:	e78a      	b.n	800d61a <_strtod_l+0x192>
 800d704:	f04f 0c00 	mov.w	ip, #0
 800d708:	e7f8      	b.n	800d6fc <_strtod_l+0x274>
 800d70a:	bf00      	nop
 800d70c:	08010318 	.word	0x08010318
 800d710:	7ff00000 	.word	0x7ff00000
 800d714:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d716:	1c5f      	adds	r7, r3, #1
 800d718:	971b      	str	r7, [sp, #108]	; 0x6c
 800d71a:	785b      	ldrb	r3, [r3, #1]
 800d71c:	2b30      	cmp	r3, #48	; 0x30
 800d71e:	d0f9      	beq.n	800d714 <_strtod_l+0x28c>
 800d720:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d724:	2f08      	cmp	r7, #8
 800d726:	f63f af7d 	bhi.w	800d624 <_strtod_l+0x19c>
 800d72a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d72e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d730:	930a      	str	r3, [sp, #40]	; 0x28
 800d732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d734:	1c5f      	adds	r7, r3, #1
 800d736:	971b      	str	r7, [sp, #108]	; 0x6c
 800d738:	785b      	ldrb	r3, [r3, #1]
 800d73a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d73e:	f1b8 0f09 	cmp.w	r8, #9
 800d742:	d937      	bls.n	800d7b4 <_strtod_l+0x32c>
 800d744:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d746:	1a7f      	subs	r7, r7, r1
 800d748:	2f08      	cmp	r7, #8
 800d74a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d74e:	dc37      	bgt.n	800d7c0 <_strtod_l+0x338>
 800d750:	45be      	cmp	lr, r7
 800d752:	bfa8      	it	ge
 800d754:	46be      	movge	lr, r7
 800d756:	f1bc 0f00 	cmp.w	ip, #0
 800d75a:	d001      	beq.n	800d760 <_strtod_l+0x2d8>
 800d75c:	f1ce 0e00 	rsb	lr, lr, #0
 800d760:	2c00      	cmp	r4, #0
 800d762:	d151      	bne.n	800d808 <_strtod_l+0x380>
 800d764:	2800      	cmp	r0, #0
 800d766:	f47f aece 	bne.w	800d506 <_strtod_l+0x7e>
 800d76a:	9a06      	ldr	r2, [sp, #24]
 800d76c:	2a00      	cmp	r2, #0
 800d76e:	f47f aeca 	bne.w	800d506 <_strtod_l+0x7e>
 800d772:	9a04      	ldr	r2, [sp, #16]
 800d774:	2a00      	cmp	r2, #0
 800d776:	f47f aee4 	bne.w	800d542 <_strtod_l+0xba>
 800d77a:	2b4e      	cmp	r3, #78	; 0x4e
 800d77c:	d027      	beq.n	800d7ce <_strtod_l+0x346>
 800d77e:	dc21      	bgt.n	800d7c4 <_strtod_l+0x33c>
 800d780:	2b49      	cmp	r3, #73	; 0x49
 800d782:	f47f aede 	bne.w	800d542 <_strtod_l+0xba>
 800d786:	49a0      	ldr	r1, [pc, #640]	; (800da08 <_strtod_l+0x580>)
 800d788:	a81b      	add	r0, sp, #108	; 0x6c
 800d78a:	f001 fdf7 	bl	800f37c <__match>
 800d78e:	2800      	cmp	r0, #0
 800d790:	f43f aed7 	beq.w	800d542 <_strtod_l+0xba>
 800d794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d796:	499d      	ldr	r1, [pc, #628]	; (800da0c <_strtod_l+0x584>)
 800d798:	3b01      	subs	r3, #1
 800d79a:	a81b      	add	r0, sp, #108	; 0x6c
 800d79c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d79e:	f001 fded 	bl	800f37c <__match>
 800d7a2:	b910      	cbnz	r0, 800d7aa <_strtod_l+0x322>
 800d7a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 800da20 <_strtod_l+0x598>
 800d7ae:	f04f 0a00 	mov.w	sl, #0
 800d7b2:	e6a8      	b.n	800d506 <_strtod_l+0x7e>
 800d7b4:	210a      	movs	r1, #10
 800d7b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d7ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d7be:	e7b8      	b.n	800d732 <_strtod_l+0x2aa>
 800d7c0:	46be      	mov	lr, r7
 800d7c2:	e7c8      	b.n	800d756 <_strtod_l+0x2ce>
 800d7c4:	2b69      	cmp	r3, #105	; 0x69
 800d7c6:	d0de      	beq.n	800d786 <_strtod_l+0x2fe>
 800d7c8:	2b6e      	cmp	r3, #110	; 0x6e
 800d7ca:	f47f aeba 	bne.w	800d542 <_strtod_l+0xba>
 800d7ce:	4990      	ldr	r1, [pc, #576]	; (800da10 <_strtod_l+0x588>)
 800d7d0:	a81b      	add	r0, sp, #108	; 0x6c
 800d7d2:	f001 fdd3 	bl	800f37c <__match>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f43f aeb3 	beq.w	800d542 <_strtod_l+0xba>
 800d7dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	2b28      	cmp	r3, #40	; 0x28
 800d7e2:	d10e      	bne.n	800d802 <_strtod_l+0x37a>
 800d7e4:	aa1e      	add	r2, sp, #120	; 0x78
 800d7e6:	498b      	ldr	r1, [pc, #556]	; (800da14 <_strtod_l+0x58c>)
 800d7e8:	a81b      	add	r0, sp, #108	; 0x6c
 800d7ea:	f001 fddb 	bl	800f3a4 <__hexnan>
 800d7ee:	2805      	cmp	r0, #5
 800d7f0:	d107      	bne.n	800d802 <_strtod_l+0x37a>
 800d7f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d7f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d7f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d7fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d800:	e681      	b.n	800d506 <_strtod_l+0x7e>
 800d802:	f8df b224 	ldr.w	fp, [pc, #548]	; 800da28 <_strtod_l+0x5a0>
 800d806:	e7d2      	b.n	800d7ae <_strtod_l+0x326>
 800d808:	ebae 0302 	sub.w	r3, lr, r2
 800d80c:	9306      	str	r3, [sp, #24]
 800d80e:	9b05      	ldr	r3, [sp, #20]
 800d810:	9807      	ldr	r0, [sp, #28]
 800d812:	2b00      	cmp	r3, #0
 800d814:	bf08      	it	eq
 800d816:	4623      	moveq	r3, r4
 800d818:	2c10      	cmp	r4, #16
 800d81a:	9305      	str	r3, [sp, #20]
 800d81c:	46a0      	mov	r8, r4
 800d81e:	bfa8      	it	ge
 800d820:	f04f 0810 	movge.w	r8, #16
 800d824:	f7f2 fe6e 	bl	8000504 <__aeabi_ui2d>
 800d828:	2c09      	cmp	r4, #9
 800d82a:	4682      	mov	sl, r0
 800d82c:	468b      	mov	fp, r1
 800d82e:	dc13      	bgt.n	800d858 <_strtod_l+0x3d0>
 800d830:	9b06      	ldr	r3, [sp, #24]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f43f ae67 	beq.w	800d506 <_strtod_l+0x7e>
 800d838:	9b06      	ldr	r3, [sp, #24]
 800d83a:	dd7a      	ble.n	800d932 <_strtod_l+0x4aa>
 800d83c:	2b16      	cmp	r3, #22
 800d83e:	dc61      	bgt.n	800d904 <_strtod_l+0x47c>
 800d840:	4a75      	ldr	r2, [pc, #468]	; (800da18 <_strtod_l+0x590>)
 800d842:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d846:	e9de 0100 	ldrd	r0, r1, [lr]
 800d84a:	4652      	mov	r2, sl
 800d84c:	465b      	mov	r3, fp
 800d84e:	f7f2 fed3 	bl	80005f8 <__aeabi_dmul>
 800d852:	4682      	mov	sl, r0
 800d854:	468b      	mov	fp, r1
 800d856:	e656      	b.n	800d506 <_strtod_l+0x7e>
 800d858:	4b6f      	ldr	r3, [pc, #444]	; (800da18 <_strtod_l+0x590>)
 800d85a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d85e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d862:	f7f2 fec9 	bl	80005f8 <__aeabi_dmul>
 800d866:	4606      	mov	r6, r0
 800d868:	4628      	mov	r0, r5
 800d86a:	460f      	mov	r7, r1
 800d86c:	f7f2 fe4a 	bl	8000504 <__aeabi_ui2d>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	4630      	mov	r0, r6
 800d876:	4639      	mov	r1, r7
 800d878:	f7f2 fd08 	bl	800028c <__adddf3>
 800d87c:	2c0f      	cmp	r4, #15
 800d87e:	4682      	mov	sl, r0
 800d880:	468b      	mov	fp, r1
 800d882:	ddd5      	ble.n	800d830 <_strtod_l+0x3a8>
 800d884:	9b06      	ldr	r3, [sp, #24]
 800d886:	eba4 0808 	sub.w	r8, r4, r8
 800d88a:	4498      	add	r8, r3
 800d88c:	f1b8 0f00 	cmp.w	r8, #0
 800d890:	f340 8096 	ble.w	800d9c0 <_strtod_l+0x538>
 800d894:	f018 030f 	ands.w	r3, r8, #15
 800d898:	d00a      	beq.n	800d8b0 <_strtod_l+0x428>
 800d89a:	495f      	ldr	r1, [pc, #380]	; (800da18 <_strtod_l+0x590>)
 800d89c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8a0:	4652      	mov	r2, sl
 800d8a2:	465b      	mov	r3, fp
 800d8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a8:	f7f2 fea6 	bl	80005f8 <__aeabi_dmul>
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	468b      	mov	fp, r1
 800d8b0:	f038 080f 	bics.w	r8, r8, #15
 800d8b4:	d073      	beq.n	800d99e <_strtod_l+0x516>
 800d8b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d8ba:	dd47      	ble.n	800d94c <_strtod_l+0x4c4>
 800d8bc:	2400      	movs	r4, #0
 800d8be:	46a0      	mov	r8, r4
 800d8c0:	9407      	str	r4, [sp, #28]
 800d8c2:	9405      	str	r4, [sp, #20]
 800d8c4:	2322      	movs	r3, #34	; 0x22
 800d8c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800da20 <_strtod_l+0x598>
 800d8ca:	f8c9 3000 	str.w	r3, [r9]
 800d8ce:	f04f 0a00 	mov.w	sl, #0
 800d8d2:	9b07      	ldr	r3, [sp, #28]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f43f ae16 	beq.w	800d506 <_strtod_l+0x7e>
 800d8da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8dc:	4648      	mov	r0, r9
 800d8de:	f001 fe4d 	bl	800f57c <_Bfree>
 800d8e2:	9905      	ldr	r1, [sp, #20]
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f001 fe49 	bl	800f57c <_Bfree>
 800d8ea:	4641      	mov	r1, r8
 800d8ec:	4648      	mov	r0, r9
 800d8ee:	f001 fe45 	bl	800f57c <_Bfree>
 800d8f2:	9907      	ldr	r1, [sp, #28]
 800d8f4:	4648      	mov	r0, r9
 800d8f6:	f001 fe41 	bl	800f57c <_Bfree>
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4648      	mov	r0, r9
 800d8fe:	f001 fe3d 	bl	800f57c <_Bfree>
 800d902:	e600      	b.n	800d506 <_strtod_l+0x7e>
 800d904:	9a06      	ldr	r2, [sp, #24]
 800d906:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d90a:	4293      	cmp	r3, r2
 800d90c:	dbba      	blt.n	800d884 <_strtod_l+0x3fc>
 800d90e:	4d42      	ldr	r5, [pc, #264]	; (800da18 <_strtod_l+0x590>)
 800d910:	f1c4 040f 	rsb	r4, r4, #15
 800d914:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d918:	4652      	mov	r2, sl
 800d91a:	465b      	mov	r3, fp
 800d91c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d920:	f7f2 fe6a 	bl	80005f8 <__aeabi_dmul>
 800d924:	9b06      	ldr	r3, [sp, #24]
 800d926:	1b1c      	subs	r4, r3, r4
 800d928:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d92c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d930:	e78d      	b.n	800d84e <_strtod_l+0x3c6>
 800d932:	f113 0f16 	cmn.w	r3, #22
 800d936:	dba5      	blt.n	800d884 <_strtod_l+0x3fc>
 800d938:	4a37      	ldr	r2, [pc, #220]	; (800da18 <_strtod_l+0x590>)
 800d93a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d93e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d942:	4650      	mov	r0, sl
 800d944:	4659      	mov	r1, fp
 800d946:	f7f2 ff81 	bl	800084c <__aeabi_ddiv>
 800d94a:	e782      	b.n	800d852 <_strtod_l+0x3ca>
 800d94c:	2300      	movs	r3, #0
 800d94e:	4e33      	ldr	r6, [pc, #204]	; (800da1c <_strtod_l+0x594>)
 800d950:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d954:	4650      	mov	r0, sl
 800d956:	4659      	mov	r1, fp
 800d958:	461d      	mov	r5, r3
 800d95a:	f1b8 0f01 	cmp.w	r8, #1
 800d95e:	dc21      	bgt.n	800d9a4 <_strtod_l+0x51c>
 800d960:	b10b      	cbz	r3, 800d966 <_strtod_l+0x4de>
 800d962:	4682      	mov	sl, r0
 800d964:	468b      	mov	fp, r1
 800d966:	4b2d      	ldr	r3, [pc, #180]	; (800da1c <_strtod_l+0x594>)
 800d968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d96c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d970:	4652      	mov	r2, sl
 800d972:	465b      	mov	r3, fp
 800d974:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d978:	f7f2 fe3e 	bl	80005f8 <__aeabi_dmul>
 800d97c:	4b28      	ldr	r3, [pc, #160]	; (800da20 <_strtod_l+0x598>)
 800d97e:	460a      	mov	r2, r1
 800d980:	400b      	ands	r3, r1
 800d982:	4928      	ldr	r1, [pc, #160]	; (800da24 <_strtod_l+0x59c>)
 800d984:	428b      	cmp	r3, r1
 800d986:	4682      	mov	sl, r0
 800d988:	d898      	bhi.n	800d8bc <_strtod_l+0x434>
 800d98a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d98e:	428b      	cmp	r3, r1
 800d990:	bf86      	itte	hi
 800d992:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800da2c <_strtod_l+0x5a4>
 800d996:	f04f 3aff 	movhi.w	sl, #4294967295
 800d99a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	e077      	b.n	800da94 <_strtod_l+0x60c>
 800d9a4:	f018 0f01 	tst.w	r8, #1
 800d9a8:	d006      	beq.n	800d9b8 <_strtod_l+0x530>
 800d9aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fe21 	bl	80005f8 <__aeabi_dmul>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	3501      	adds	r5, #1
 800d9ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9be:	e7cc      	b.n	800d95a <_strtod_l+0x4d2>
 800d9c0:	d0ed      	beq.n	800d99e <_strtod_l+0x516>
 800d9c2:	f1c8 0800 	rsb	r8, r8, #0
 800d9c6:	f018 020f 	ands.w	r2, r8, #15
 800d9ca:	d00a      	beq.n	800d9e2 <_strtod_l+0x55a>
 800d9cc:	4b12      	ldr	r3, [pc, #72]	; (800da18 <_strtod_l+0x590>)
 800d9ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 ff37 	bl	800084c <__aeabi_ddiv>
 800d9de:	4682      	mov	sl, r0
 800d9e0:	468b      	mov	fp, r1
 800d9e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d9e6:	d0da      	beq.n	800d99e <_strtod_l+0x516>
 800d9e8:	f1b8 0f1f 	cmp.w	r8, #31
 800d9ec:	dd20      	ble.n	800da30 <_strtod_l+0x5a8>
 800d9ee:	2400      	movs	r4, #0
 800d9f0:	46a0      	mov	r8, r4
 800d9f2:	9407      	str	r4, [sp, #28]
 800d9f4:	9405      	str	r4, [sp, #20]
 800d9f6:	2322      	movs	r3, #34	; 0x22
 800d9f8:	f04f 0a00 	mov.w	sl, #0
 800d9fc:	f04f 0b00 	mov.w	fp, #0
 800da00:	f8c9 3000 	str.w	r3, [r9]
 800da04:	e765      	b.n	800d8d2 <_strtod_l+0x44a>
 800da06:	bf00      	nop
 800da08:	080102e1 	.word	0x080102e1
 800da0c:	0801036b 	.word	0x0801036b
 800da10:	080102e9 	.word	0x080102e9
 800da14:	0801032c 	.word	0x0801032c
 800da18:	080103a8 	.word	0x080103a8
 800da1c:	08010380 	.word	0x08010380
 800da20:	7ff00000 	.word	0x7ff00000
 800da24:	7ca00000 	.word	0x7ca00000
 800da28:	fff80000 	.word	0xfff80000
 800da2c:	7fefffff 	.word	0x7fefffff
 800da30:	f018 0310 	ands.w	r3, r8, #16
 800da34:	bf18      	it	ne
 800da36:	236a      	movne	r3, #106	; 0x6a
 800da38:	4da0      	ldr	r5, [pc, #640]	; (800dcbc <_strtod_l+0x834>)
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	4650      	mov	r0, sl
 800da3e:	4659      	mov	r1, fp
 800da40:	2300      	movs	r3, #0
 800da42:	f1b8 0f00 	cmp.w	r8, #0
 800da46:	f300 810a 	bgt.w	800dc5e <_strtod_l+0x7d6>
 800da4a:	b10b      	cbz	r3, 800da50 <_strtod_l+0x5c8>
 800da4c:	4682      	mov	sl, r0
 800da4e:	468b      	mov	fp, r1
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	b1bb      	cbz	r3, 800da84 <_strtod_l+0x5fc>
 800da54:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800da58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	4659      	mov	r1, fp
 800da60:	dd10      	ble.n	800da84 <_strtod_l+0x5fc>
 800da62:	2b1f      	cmp	r3, #31
 800da64:	f340 8107 	ble.w	800dc76 <_strtod_l+0x7ee>
 800da68:	2b34      	cmp	r3, #52	; 0x34
 800da6a:	bfde      	ittt	le
 800da6c:	3b20      	suble	r3, #32
 800da6e:	f04f 32ff 	movle.w	r2, #4294967295
 800da72:	fa02 f303 	lslle.w	r3, r2, r3
 800da76:	f04f 0a00 	mov.w	sl, #0
 800da7a:	bfcc      	ite	gt
 800da7c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800da80:	ea03 0b01 	andle.w	fp, r3, r1
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	4650      	mov	r0, sl
 800da8a:	4659      	mov	r1, fp
 800da8c:	f7f3 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da90:	2800      	cmp	r0, #0
 800da92:	d1ac      	bne.n	800d9ee <_strtod_l+0x566>
 800da94:	9b07      	ldr	r3, [sp, #28]
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	9a05      	ldr	r2, [sp, #20]
 800da9a:	9908      	ldr	r1, [sp, #32]
 800da9c:	4623      	mov	r3, r4
 800da9e:	4648      	mov	r0, r9
 800daa0:	f001 fdbe 	bl	800f620 <__s2b>
 800daa4:	9007      	str	r0, [sp, #28]
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f43f af08 	beq.w	800d8bc <_strtod_l+0x434>
 800daac:	9a06      	ldr	r2, [sp, #24]
 800daae:	9b06      	ldr	r3, [sp, #24]
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	f1c3 0300 	rsb	r3, r3, #0
 800dab6:	bfa8      	it	ge
 800dab8:	2300      	movge	r3, #0
 800daba:	930e      	str	r3, [sp, #56]	; 0x38
 800dabc:	2400      	movs	r4, #0
 800dabe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dac2:	9316      	str	r3, [sp, #88]	; 0x58
 800dac4:	46a0      	mov	r8, r4
 800dac6:	9b07      	ldr	r3, [sp, #28]
 800dac8:	4648      	mov	r0, r9
 800daca:	6859      	ldr	r1, [r3, #4]
 800dacc:	f001 fd22 	bl	800f514 <_Balloc>
 800dad0:	9005      	str	r0, [sp, #20]
 800dad2:	2800      	cmp	r0, #0
 800dad4:	f43f aef6 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dad8:	9b07      	ldr	r3, [sp, #28]
 800dada:	691a      	ldr	r2, [r3, #16]
 800dadc:	3202      	adds	r2, #2
 800dade:	f103 010c 	add.w	r1, r3, #12
 800dae2:	0092      	lsls	r2, r2, #2
 800dae4:	300c      	adds	r0, #12
 800dae6:	f7fe fd6f 	bl	800c5c8 <memcpy>
 800daea:	aa1e      	add	r2, sp, #120	; 0x78
 800daec:	a91d      	add	r1, sp, #116	; 0x74
 800daee:	ec4b ab10 	vmov	d0, sl, fp
 800daf2:	4648      	mov	r0, r9
 800daf4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800daf8:	f002 f84e 	bl	800fb98 <__d2b>
 800dafc:	901c      	str	r0, [sp, #112]	; 0x70
 800dafe:	2800      	cmp	r0, #0
 800db00:	f43f aee0 	beq.w	800d8c4 <_strtod_l+0x43c>
 800db04:	2101      	movs	r1, #1
 800db06:	4648      	mov	r0, r9
 800db08:	f001 fe16 	bl	800f738 <__i2b>
 800db0c:	4680      	mov	r8, r0
 800db0e:	2800      	cmp	r0, #0
 800db10:	f43f aed8 	beq.w	800d8c4 <_strtod_l+0x43c>
 800db14:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800db16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db18:	2e00      	cmp	r6, #0
 800db1a:	bfab      	itete	ge
 800db1c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800db1e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800db20:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800db22:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800db24:	bfac      	ite	ge
 800db26:	18f7      	addge	r7, r6, r3
 800db28:	1b9d      	sublt	r5, r3, r6
 800db2a:	9b04      	ldr	r3, [sp, #16]
 800db2c:	1af6      	subs	r6, r6, r3
 800db2e:	4416      	add	r6, r2
 800db30:	4b63      	ldr	r3, [pc, #396]	; (800dcc0 <_strtod_l+0x838>)
 800db32:	3e01      	subs	r6, #1
 800db34:	429e      	cmp	r6, r3
 800db36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db3a:	f280 80af 	bge.w	800dc9c <_strtod_l+0x814>
 800db3e:	1b9b      	subs	r3, r3, r6
 800db40:	2b1f      	cmp	r3, #31
 800db42:	eba2 0203 	sub.w	r2, r2, r3
 800db46:	f04f 0101 	mov.w	r1, #1
 800db4a:	f300 809b 	bgt.w	800dc84 <_strtod_l+0x7fc>
 800db4e:	fa01 f303 	lsl.w	r3, r1, r3
 800db52:	930f      	str	r3, [sp, #60]	; 0x3c
 800db54:	2300      	movs	r3, #0
 800db56:	930a      	str	r3, [sp, #40]	; 0x28
 800db58:	18be      	adds	r6, r7, r2
 800db5a:	9b04      	ldr	r3, [sp, #16]
 800db5c:	42b7      	cmp	r7, r6
 800db5e:	4415      	add	r5, r2
 800db60:	441d      	add	r5, r3
 800db62:	463b      	mov	r3, r7
 800db64:	bfa8      	it	ge
 800db66:	4633      	movge	r3, r6
 800db68:	42ab      	cmp	r3, r5
 800db6a:	bfa8      	it	ge
 800db6c:	462b      	movge	r3, r5
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bfc2      	ittt	gt
 800db72:	1af6      	subgt	r6, r6, r3
 800db74:	1aed      	subgt	r5, r5, r3
 800db76:	1aff      	subgt	r7, r7, r3
 800db78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db7a:	b1bb      	cbz	r3, 800dbac <_strtod_l+0x724>
 800db7c:	4641      	mov	r1, r8
 800db7e:	461a      	mov	r2, r3
 800db80:	4648      	mov	r0, r9
 800db82:	f001 fe79 	bl	800f878 <__pow5mult>
 800db86:	4680      	mov	r8, r0
 800db88:	2800      	cmp	r0, #0
 800db8a:	f43f ae9b 	beq.w	800d8c4 <_strtod_l+0x43c>
 800db8e:	4601      	mov	r1, r0
 800db90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800db92:	4648      	mov	r0, r9
 800db94:	f001 fdd9 	bl	800f74a <__multiply>
 800db98:	900c      	str	r0, [sp, #48]	; 0x30
 800db9a:	2800      	cmp	r0, #0
 800db9c:	f43f ae92 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dba2:	4648      	mov	r0, r9
 800dba4:	f001 fcea 	bl	800f57c <_Bfree>
 800dba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbaa:	931c      	str	r3, [sp, #112]	; 0x70
 800dbac:	2e00      	cmp	r6, #0
 800dbae:	dc7a      	bgt.n	800dca6 <_strtod_l+0x81e>
 800dbb0:	9b06      	ldr	r3, [sp, #24]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd08      	ble.n	800dbc8 <_strtod_l+0x740>
 800dbb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dbb8:	9905      	ldr	r1, [sp, #20]
 800dbba:	4648      	mov	r0, r9
 800dbbc:	f001 fe5c 	bl	800f878 <__pow5mult>
 800dbc0:	9005      	str	r0, [sp, #20]
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	f43f ae7e 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dbc8:	2d00      	cmp	r5, #0
 800dbca:	dd08      	ble.n	800dbde <_strtod_l+0x756>
 800dbcc:	462a      	mov	r2, r5
 800dbce:	9905      	ldr	r1, [sp, #20]
 800dbd0:	4648      	mov	r0, r9
 800dbd2:	f001 fe9f 	bl	800f914 <__lshift>
 800dbd6:	9005      	str	r0, [sp, #20]
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	f43f ae73 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dbde:	2f00      	cmp	r7, #0
 800dbe0:	dd08      	ble.n	800dbf4 <_strtod_l+0x76c>
 800dbe2:	4641      	mov	r1, r8
 800dbe4:	463a      	mov	r2, r7
 800dbe6:	4648      	mov	r0, r9
 800dbe8:	f001 fe94 	bl	800f914 <__lshift>
 800dbec:	4680      	mov	r8, r0
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f43f ae68 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dbf4:	9a05      	ldr	r2, [sp, #20]
 800dbf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dbf8:	4648      	mov	r0, r9
 800dbfa:	f001 fef9 	bl	800f9f0 <__mdiff>
 800dbfe:	4604      	mov	r4, r0
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f43f ae5f 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dc06:	68c3      	ldr	r3, [r0, #12]
 800dc08:	930c      	str	r3, [sp, #48]	; 0x30
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	60c3      	str	r3, [r0, #12]
 800dc0e:	4641      	mov	r1, r8
 800dc10:	f001 fed4 	bl	800f9bc <__mcmp>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	da55      	bge.n	800dcc4 <_strtod_l+0x83c>
 800dc18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc1a:	b9e3      	cbnz	r3, 800dc56 <_strtod_l+0x7ce>
 800dc1c:	f1ba 0f00 	cmp.w	sl, #0
 800dc20:	d119      	bne.n	800dc56 <_strtod_l+0x7ce>
 800dc22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc26:	b9b3      	cbnz	r3, 800dc56 <_strtod_l+0x7ce>
 800dc28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc2c:	0d1b      	lsrs	r3, r3, #20
 800dc2e:	051b      	lsls	r3, r3, #20
 800dc30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dc34:	d90f      	bls.n	800dc56 <_strtod_l+0x7ce>
 800dc36:	6963      	ldr	r3, [r4, #20]
 800dc38:	b913      	cbnz	r3, 800dc40 <_strtod_l+0x7b8>
 800dc3a:	6923      	ldr	r3, [r4, #16]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	dd0a      	ble.n	800dc56 <_strtod_l+0x7ce>
 800dc40:	4621      	mov	r1, r4
 800dc42:	2201      	movs	r2, #1
 800dc44:	4648      	mov	r0, r9
 800dc46:	f001 fe65 	bl	800f914 <__lshift>
 800dc4a:	4641      	mov	r1, r8
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	f001 feb5 	bl	800f9bc <__mcmp>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	dc67      	bgt.n	800dd26 <_strtod_l+0x89e>
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d171      	bne.n	800dd40 <_strtod_l+0x8b8>
 800dc5c:	e63d      	b.n	800d8da <_strtod_l+0x452>
 800dc5e:	f018 0f01 	tst.w	r8, #1
 800dc62:	d004      	beq.n	800dc6e <_strtod_l+0x7e6>
 800dc64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc72:	3508      	adds	r5, #8
 800dc74:	e6e5      	b.n	800da42 <_strtod_l+0x5ba>
 800dc76:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7e:	ea03 0a0a 	and.w	sl, r3, sl
 800dc82:	e6ff      	b.n	800da84 <_strtod_l+0x5fc>
 800dc84:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dc88:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dc8c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dc90:	36e2      	adds	r6, #226	; 0xe2
 800dc92:	fa01 f306 	lsl.w	r3, r1, r6
 800dc96:	930a      	str	r3, [sp, #40]	; 0x28
 800dc98:	910f      	str	r1, [sp, #60]	; 0x3c
 800dc9a:	e75d      	b.n	800db58 <_strtod_l+0x6d0>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	930a      	str	r3, [sp, #40]	; 0x28
 800dca0:	2301      	movs	r3, #1
 800dca2:	930f      	str	r3, [sp, #60]	; 0x3c
 800dca4:	e758      	b.n	800db58 <_strtod_l+0x6d0>
 800dca6:	4632      	mov	r2, r6
 800dca8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dcaa:	4648      	mov	r0, r9
 800dcac:	f001 fe32 	bl	800f914 <__lshift>
 800dcb0:	901c      	str	r0, [sp, #112]	; 0x70
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f47f af7c 	bne.w	800dbb0 <_strtod_l+0x728>
 800dcb8:	e604      	b.n	800d8c4 <_strtod_l+0x43c>
 800dcba:	bf00      	nop
 800dcbc:	08010340 	.word	0x08010340
 800dcc0:	fffffc02 	.word	0xfffffc02
 800dcc4:	465d      	mov	r5, fp
 800dcc6:	f040 8086 	bne.w	800ddd6 <_strtod_l+0x94e>
 800dcca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcd0:	b32a      	cbz	r2, 800dd1e <_strtod_l+0x896>
 800dcd2:	4aaf      	ldr	r2, [pc, #700]	; (800df90 <_strtod_l+0xb08>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d153      	bne.n	800dd80 <_strtod_l+0x8f8>
 800dcd8:	9b04      	ldr	r3, [sp, #16]
 800dcda:	4650      	mov	r0, sl
 800dcdc:	b1d3      	cbz	r3, 800dd14 <_strtod_l+0x88c>
 800dcde:	4aad      	ldr	r2, [pc, #692]	; (800df94 <_strtod_l+0xb0c>)
 800dce0:	402a      	ands	r2, r5
 800dce2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dce6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcea:	d816      	bhi.n	800dd1a <_strtod_l+0x892>
 800dcec:	0d12      	lsrs	r2, r2, #20
 800dcee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf6:	4298      	cmp	r0, r3
 800dcf8:	d142      	bne.n	800dd80 <_strtod_l+0x8f8>
 800dcfa:	4ba7      	ldr	r3, [pc, #668]	; (800df98 <_strtod_l+0xb10>)
 800dcfc:	429d      	cmp	r5, r3
 800dcfe:	d102      	bne.n	800dd06 <_strtod_l+0x87e>
 800dd00:	3001      	adds	r0, #1
 800dd02:	f43f addf 	beq.w	800d8c4 <_strtod_l+0x43c>
 800dd06:	4ba3      	ldr	r3, [pc, #652]	; (800df94 <_strtod_l+0xb0c>)
 800dd08:	402b      	ands	r3, r5
 800dd0a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dd0e:	f04f 0a00 	mov.w	sl, #0
 800dd12:	e7a0      	b.n	800dc56 <_strtod_l+0x7ce>
 800dd14:	f04f 33ff 	mov.w	r3, #4294967295
 800dd18:	e7ed      	b.n	800dcf6 <_strtod_l+0x86e>
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	e7eb      	b.n	800dcf6 <_strtod_l+0x86e>
 800dd1e:	bb7b      	cbnz	r3, 800dd80 <_strtod_l+0x8f8>
 800dd20:	f1ba 0f00 	cmp.w	sl, #0
 800dd24:	d12c      	bne.n	800dd80 <_strtod_l+0x8f8>
 800dd26:	9904      	ldr	r1, [sp, #16]
 800dd28:	4a9a      	ldr	r2, [pc, #616]	; (800df94 <_strtod_l+0xb0c>)
 800dd2a:	465b      	mov	r3, fp
 800dd2c:	b1f1      	cbz	r1, 800dd6c <_strtod_l+0x8e4>
 800dd2e:	ea02 010b 	and.w	r1, r2, fp
 800dd32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dd36:	dc19      	bgt.n	800dd6c <_strtod_l+0x8e4>
 800dd38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dd3c:	f77f ae5b 	ble.w	800d9f6 <_strtod_l+0x56e>
 800dd40:	4a96      	ldr	r2, [pc, #600]	; (800df9c <_strtod_l+0xb14>)
 800dd42:	2300      	movs	r3, #0
 800dd44:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800dd48:	4650      	mov	r0, sl
 800dd4a:	4659      	mov	r1, fp
 800dd4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dd50:	f7f2 fc52 	bl	80005f8 <__aeabi_dmul>
 800dd54:	4682      	mov	sl, r0
 800dd56:	468b      	mov	fp, r1
 800dd58:	2900      	cmp	r1, #0
 800dd5a:	f47f adbe 	bne.w	800d8da <_strtod_l+0x452>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f47f adbb 	bne.w	800d8da <_strtod_l+0x452>
 800dd64:	2322      	movs	r3, #34	; 0x22
 800dd66:	f8c9 3000 	str.w	r3, [r9]
 800dd6a:	e5b6      	b.n	800d8da <_strtod_l+0x452>
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd72:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd7a:	f04f 3aff 	mov.w	sl, #4294967295
 800dd7e:	e76a      	b.n	800dc56 <_strtod_l+0x7ce>
 800dd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd82:	b193      	cbz	r3, 800ddaa <_strtod_l+0x922>
 800dd84:	422b      	tst	r3, r5
 800dd86:	f43f af66 	beq.w	800dc56 <_strtod_l+0x7ce>
 800dd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	4650      	mov	r0, sl
 800dd90:	4659      	mov	r1, fp
 800dd92:	b173      	cbz	r3, 800ddb2 <_strtod_l+0x92a>
 800dd94:	f7ff fb5a 	bl	800d44c <sulp>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dda0:	f7f2 fa74 	bl	800028c <__adddf3>
 800dda4:	4682      	mov	sl, r0
 800dda6:	468b      	mov	fp, r1
 800dda8:	e755      	b.n	800dc56 <_strtod_l+0x7ce>
 800ddaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddac:	ea13 0f0a 	tst.w	r3, sl
 800ddb0:	e7e9      	b.n	800dd86 <_strtod_l+0x8fe>
 800ddb2:	f7ff fb4b 	bl	800d44c <sulp>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	460b      	mov	r3, r1
 800ddba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ddbe:	f7f2 fa63 	bl	8000288 <__aeabi_dsub>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4682      	mov	sl, r0
 800ddc8:	468b      	mov	fp, r1
 800ddca:	f7f2 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f47f ae11 	bne.w	800d9f6 <_strtod_l+0x56e>
 800ddd4:	e73f      	b.n	800dc56 <_strtod_l+0x7ce>
 800ddd6:	4641      	mov	r1, r8
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f001 ff2c 	bl	800fc36 <__ratio>
 800ddde:	ec57 6b10 	vmov	r6, r7, d0
 800dde2:	2200      	movs	r2, #0
 800dde4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dde8:	ee10 0a10 	vmov	r0, s0
 800ddec:	4639      	mov	r1, r7
 800ddee:	f7f2 fe7f 	bl	8000af0 <__aeabi_dcmple>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d077      	beq.n	800dee6 <_strtod_l+0xa5e>
 800ddf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d04a      	beq.n	800de92 <_strtod_l+0xa0a>
 800ddfc:	4b68      	ldr	r3, [pc, #416]	; (800dfa0 <_strtod_l+0xb18>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800de04:	4f66      	ldr	r7, [pc, #408]	; (800dfa0 <_strtod_l+0xb18>)
 800de06:	2600      	movs	r6, #0
 800de08:	4b62      	ldr	r3, [pc, #392]	; (800df94 <_strtod_l+0xb0c>)
 800de0a:	402b      	ands	r3, r5
 800de0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800de10:	4b64      	ldr	r3, [pc, #400]	; (800dfa4 <_strtod_l+0xb1c>)
 800de12:	429a      	cmp	r2, r3
 800de14:	f040 80ce 	bne.w	800dfb4 <_strtod_l+0xb2c>
 800de18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800de1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800de24:	ec4b ab10 	vmov	d0, sl, fp
 800de28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800de2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800de30:	f001 fe3c 	bl	800faac <__ulp>
 800de34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de38:	ec53 2b10 	vmov	r2, r3, d0
 800de3c:	f7f2 fbdc 	bl	80005f8 <__aeabi_dmul>
 800de40:	4652      	mov	r2, sl
 800de42:	465b      	mov	r3, fp
 800de44:	f7f2 fa22 	bl	800028c <__adddf3>
 800de48:	460b      	mov	r3, r1
 800de4a:	4952      	ldr	r1, [pc, #328]	; (800df94 <_strtod_l+0xb0c>)
 800de4c:	4a56      	ldr	r2, [pc, #344]	; (800dfa8 <_strtod_l+0xb20>)
 800de4e:	4019      	ands	r1, r3
 800de50:	4291      	cmp	r1, r2
 800de52:	4682      	mov	sl, r0
 800de54:	d95b      	bls.n	800df0e <_strtod_l+0xa86>
 800de56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d103      	bne.n	800de68 <_strtod_l+0x9e0>
 800de60:	9b08      	ldr	r3, [sp, #32]
 800de62:	3301      	adds	r3, #1
 800de64:	f43f ad2e 	beq.w	800d8c4 <_strtod_l+0x43c>
 800de68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800df98 <_strtod_l+0xb10>
 800de6c:	f04f 3aff 	mov.w	sl, #4294967295
 800de70:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de72:	4648      	mov	r0, r9
 800de74:	f001 fb82 	bl	800f57c <_Bfree>
 800de78:	9905      	ldr	r1, [sp, #20]
 800de7a:	4648      	mov	r0, r9
 800de7c:	f001 fb7e 	bl	800f57c <_Bfree>
 800de80:	4641      	mov	r1, r8
 800de82:	4648      	mov	r0, r9
 800de84:	f001 fb7a 	bl	800f57c <_Bfree>
 800de88:	4621      	mov	r1, r4
 800de8a:	4648      	mov	r0, r9
 800de8c:	f001 fb76 	bl	800f57c <_Bfree>
 800de90:	e619      	b.n	800dac6 <_strtod_l+0x63e>
 800de92:	f1ba 0f00 	cmp.w	sl, #0
 800de96:	d11a      	bne.n	800dece <_strtod_l+0xa46>
 800de98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de9c:	b9eb      	cbnz	r3, 800deda <_strtod_l+0xa52>
 800de9e:	2200      	movs	r2, #0
 800dea0:	4b3f      	ldr	r3, [pc, #252]	; (800dfa0 <_strtod_l+0xb18>)
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fe19 	bl	8000adc <__aeabi_dcmplt>
 800deaa:	b9c8      	cbnz	r0, 800dee0 <_strtod_l+0xa58>
 800deac:	4630      	mov	r0, r6
 800deae:	4639      	mov	r1, r7
 800deb0:	2200      	movs	r2, #0
 800deb2:	4b3e      	ldr	r3, [pc, #248]	; (800dfac <_strtod_l+0xb24>)
 800deb4:	f7f2 fba0 	bl	80005f8 <__aeabi_dmul>
 800deb8:	4606      	mov	r6, r0
 800deba:	460f      	mov	r7, r1
 800debc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dec0:	9618      	str	r6, [sp, #96]	; 0x60
 800dec2:	9319      	str	r3, [sp, #100]	; 0x64
 800dec4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800dec8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800decc:	e79c      	b.n	800de08 <_strtod_l+0x980>
 800dece:	f1ba 0f01 	cmp.w	sl, #1
 800ded2:	d102      	bne.n	800deda <_strtod_l+0xa52>
 800ded4:	2d00      	cmp	r5, #0
 800ded6:	f43f ad8e 	beq.w	800d9f6 <_strtod_l+0x56e>
 800deda:	2200      	movs	r2, #0
 800dedc:	4b34      	ldr	r3, [pc, #208]	; (800dfb0 <_strtod_l+0xb28>)
 800dede:	e78f      	b.n	800de00 <_strtod_l+0x978>
 800dee0:	2600      	movs	r6, #0
 800dee2:	4f32      	ldr	r7, [pc, #200]	; (800dfac <_strtod_l+0xb24>)
 800dee4:	e7ea      	b.n	800debc <_strtod_l+0xa34>
 800dee6:	4b31      	ldr	r3, [pc, #196]	; (800dfac <_strtod_l+0xb24>)
 800dee8:	4630      	mov	r0, r6
 800deea:	4639      	mov	r1, r7
 800deec:	2200      	movs	r2, #0
 800deee:	f7f2 fb83 	bl	80005f8 <__aeabi_dmul>
 800def2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800def4:	4606      	mov	r6, r0
 800def6:	460f      	mov	r7, r1
 800def8:	b933      	cbnz	r3, 800df08 <_strtod_l+0xa80>
 800defa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800defe:	9010      	str	r0, [sp, #64]	; 0x40
 800df00:	9311      	str	r3, [sp, #68]	; 0x44
 800df02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df06:	e7df      	b.n	800dec8 <_strtod_l+0xa40>
 800df08:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800df0c:	e7f9      	b.n	800df02 <_strtod_l+0xa7a>
 800df0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1ab      	bne.n	800de70 <_strtod_l+0x9e8>
 800df18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df1c:	0d1b      	lsrs	r3, r3, #20
 800df1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df20:	051b      	lsls	r3, r3, #20
 800df22:	429a      	cmp	r2, r3
 800df24:	465d      	mov	r5, fp
 800df26:	d1a3      	bne.n	800de70 <_strtod_l+0x9e8>
 800df28:	4639      	mov	r1, r7
 800df2a:	4630      	mov	r0, r6
 800df2c:	f7f2 fe14 	bl	8000b58 <__aeabi_d2iz>
 800df30:	f7f2 faf8 	bl	8000524 <__aeabi_i2d>
 800df34:	460b      	mov	r3, r1
 800df36:	4602      	mov	r2, r0
 800df38:	4639      	mov	r1, r7
 800df3a:	4630      	mov	r0, r6
 800df3c:	f7f2 f9a4 	bl	8000288 <__aeabi_dsub>
 800df40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df42:	4606      	mov	r6, r0
 800df44:	460f      	mov	r7, r1
 800df46:	b933      	cbnz	r3, 800df56 <_strtod_l+0xace>
 800df48:	f1ba 0f00 	cmp.w	sl, #0
 800df4c:	d103      	bne.n	800df56 <_strtod_l+0xace>
 800df4e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800df52:	2d00      	cmp	r5, #0
 800df54:	d06d      	beq.n	800e032 <_strtod_l+0xbaa>
 800df56:	a30a      	add	r3, pc, #40	; (adr r3, 800df80 <_strtod_l+0xaf8>)
 800df58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5c:	4630      	mov	r0, r6
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800df64:	2800      	cmp	r0, #0
 800df66:	f47f acb8 	bne.w	800d8da <_strtod_l+0x452>
 800df6a:	a307      	add	r3, pc, #28	; (adr r3, 800df88 <_strtod_l+0xb00>)
 800df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df70:	4630      	mov	r0, r6
 800df72:	4639      	mov	r1, r7
 800df74:	f7f2 fdd0 	bl	8000b18 <__aeabi_dcmpgt>
 800df78:	2800      	cmp	r0, #0
 800df7a:	f43f af79 	beq.w	800de70 <_strtod_l+0x9e8>
 800df7e:	e4ac      	b.n	800d8da <_strtod_l+0x452>
 800df80:	94a03595 	.word	0x94a03595
 800df84:	3fdfffff 	.word	0x3fdfffff
 800df88:	35afe535 	.word	0x35afe535
 800df8c:	3fe00000 	.word	0x3fe00000
 800df90:	000fffff 	.word	0x000fffff
 800df94:	7ff00000 	.word	0x7ff00000
 800df98:	7fefffff 	.word	0x7fefffff
 800df9c:	39500000 	.word	0x39500000
 800dfa0:	3ff00000 	.word	0x3ff00000
 800dfa4:	7fe00000 	.word	0x7fe00000
 800dfa8:	7c9fffff 	.word	0x7c9fffff
 800dfac:	3fe00000 	.word	0x3fe00000
 800dfb0:	bff00000 	.word	0xbff00000
 800dfb4:	9b04      	ldr	r3, [sp, #16]
 800dfb6:	b333      	cbz	r3, 800e006 <_strtod_l+0xb7e>
 800dfb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dfbe:	d822      	bhi.n	800e006 <_strtod_l+0xb7e>
 800dfc0:	a327      	add	r3, pc, #156	; (adr r3, 800e060 <_strtod_l+0xbd8>)
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	4639      	mov	r1, r7
 800dfca:	f7f2 fd91 	bl	8000af0 <__aeabi_dcmple>
 800dfce:	b1a0      	cbz	r0, 800dffa <_strtod_l+0xb72>
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7f2 fde8 	bl	8000ba8 <__aeabi_d2uiz>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	bf08      	it	eq
 800dfdc:	2001      	moveq	r0, #1
 800dfde:	f7f2 fa91 	bl	8000504 <__aeabi_ui2d>
 800dfe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	460f      	mov	r7, r1
 800dfe8:	bb03      	cbnz	r3, 800e02c <_strtod_l+0xba4>
 800dfea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfee:	9012      	str	r0, [sp, #72]	; 0x48
 800dff0:	9313      	str	r3, [sp, #76]	; 0x4c
 800dff2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dff6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dffe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e002:	1a9b      	subs	r3, r3, r2
 800e004:	930b      	str	r3, [sp, #44]	; 0x2c
 800e006:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e00a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e00e:	f001 fd4d 	bl	800faac <__ulp>
 800e012:	4650      	mov	r0, sl
 800e014:	ec53 2b10 	vmov	r2, r3, d0
 800e018:	4659      	mov	r1, fp
 800e01a:	f7f2 faed 	bl	80005f8 <__aeabi_dmul>
 800e01e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e022:	f7f2 f933 	bl	800028c <__adddf3>
 800e026:	4682      	mov	sl, r0
 800e028:	468b      	mov	fp, r1
 800e02a:	e772      	b.n	800df12 <_strtod_l+0xa8a>
 800e02c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e030:	e7df      	b.n	800dff2 <_strtod_l+0xb6a>
 800e032:	a30d      	add	r3, pc, #52	; (adr r3, 800e068 <_strtod_l+0xbe0>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f7f2 fd50 	bl	8000adc <__aeabi_dcmplt>
 800e03c:	e79c      	b.n	800df78 <_strtod_l+0xaf0>
 800e03e:	2300      	movs	r3, #0
 800e040:	930d      	str	r3, [sp, #52]	; 0x34
 800e042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f7ff ba61 	b.w	800d50e <_strtod_l+0x86>
 800e04c:	2b65      	cmp	r3, #101	; 0x65
 800e04e:	f04f 0200 	mov.w	r2, #0
 800e052:	f43f ab4e 	beq.w	800d6f2 <_strtod_l+0x26a>
 800e056:	2101      	movs	r1, #1
 800e058:	4614      	mov	r4, r2
 800e05a:	9104      	str	r1, [sp, #16]
 800e05c:	f7ff bacb 	b.w	800d5f6 <_strtod_l+0x16e>
 800e060:	ffc00000 	.word	0xffc00000
 800e064:	41dfffff 	.word	0x41dfffff
 800e068:	94a03595 	.word	0x94a03595
 800e06c:	3fcfffff 	.word	0x3fcfffff

0800e070 <_strtod_r>:
 800e070:	4b05      	ldr	r3, [pc, #20]	; (800e088 <_strtod_r+0x18>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	b410      	push	{r4}
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	4c04      	ldr	r4, [pc, #16]	; (800e08c <_strtod_r+0x1c>)
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bf08      	it	eq
 800e07e:	4623      	moveq	r3, r4
 800e080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e084:	f7ff ba00 	b.w	800d488 <_strtod_l>
 800e088:	20000180 	.word	0x20000180
 800e08c:	200001e4 	.word	0x200001e4

0800e090 <_strtol_l.isra.0>:
 800e090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e094:	4680      	mov	r8, r0
 800e096:	4689      	mov	r9, r1
 800e098:	4692      	mov	sl, r2
 800e09a:	461e      	mov	r6, r3
 800e09c:	460f      	mov	r7, r1
 800e09e:	463d      	mov	r5, r7
 800e0a0:	9808      	ldr	r0, [sp, #32]
 800e0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0a6:	f001 fa0d 	bl	800f4c4 <__locale_ctype_ptr_l>
 800e0aa:	4420      	add	r0, r4
 800e0ac:	7843      	ldrb	r3, [r0, #1]
 800e0ae:	f013 0308 	ands.w	r3, r3, #8
 800e0b2:	d132      	bne.n	800e11a <_strtol_l.isra.0+0x8a>
 800e0b4:	2c2d      	cmp	r4, #45	; 0x2d
 800e0b6:	d132      	bne.n	800e11e <_strtol_l.isra.0+0x8e>
 800e0b8:	787c      	ldrb	r4, [r7, #1]
 800e0ba:	1cbd      	adds	r5, r7, #2
 800e0bc:	2201      	movs	r2, #1
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	d05d      	beq.n	800e17e <_strtol_l.isra.0+0xee>
 800e0c2:	2e10      	cmp	r6, #16
 800e0c4:	d109      	bne.n	800e0da <_strtol_l.isra.0+0x4a>
 800e0c6:	2c30      	cmp	r4, #48	; 0x30
 800e0c8:	d107      	bne.n	800e0da <_strtol_l.isra.0+0x4a>
 800e0ca:	782b      	ldrb	r3, [r5, #0]
 800e0cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0d0:	2b58      	cmp	r3, #88	; 0x58
 800e0d2:	d14f      	bne.n	800e174 <_strtol_l.isra.0+0xe4>
 800e0d4:	786c      	ldrb	r4, [r5, #1]
 800e0d6:	2610      	movs	r6, #16
 800e0d8:	3502      	adds	r5, #2
 800e0da:	2a00      	cmp	r2, #0
 800e0dc:	bf14      	ite	ne
 800e0de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e0e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e0e6:	2700      	movs	r7, #0
 800e0e8:	fbb1 fcf6 	udiv	ip, r1, r6
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e0f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e0f6:	2b09      	cmp	r3, #9
 800e0f8:	d817      	bhi.n	800e12a <_strtol_l.isra.0+0x9a>
 800e0fa:	461c      	mov	r4, r3
 800e0fc:	42a6      	cmp	r6, r4
 800e0fe:	dd23      	ble.n	800e148 <_strtol_l.isra.0+0xb8>
 800e100:	1c7b      	adds	r3, r7, #1
 800e102:	d007      	beq.n	800e114 <_strtol_l.isra.0+0x84>
 800e104:	4584      	cmp	ip, r0
 800e106:	d31c      	bcc.n	800e142 <_strtol_l.isra.0+0xb2>
 800e108:	d101      	bne.n	800e10e <_strtol_l.isra.0+0x7e>
 800e10a:	45a6      	cmp	lr, r4
 800e10c:	db19      	blt.n	800e142 <_strtol_l.isra.0+0xb2>
 800e10e:	fb00 4006 	mla	r0, r0, r6, r4
 800e112:	2701      	movs	r7, #1
 800e114:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e118:	e7eb      	b.n	800e0f2 <_strtol_l.isra.0+0x62>
 800e11a:	462f      	mov	r7, r5
 800e11c:	e7bf      	b.n	800e09e <_strtol_l.isra.0+0xe>
 800e11e:	2c2b      	cmp	r4, #43	; 0x2b
 800e120:	bf04      	itt	eq
 800e122:	1cbd      	addeq	r5, r7, #2
 800e124:	787c      	ldrbeq	r4, [r7, #1]
 800e126:	461a      	mov	r2, r3
 800e128:	e7c9      	b.n	800e0be <_strtol_l.isra.0+0x2e>
 800e12a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e12e:	2b19      	cmp	r3, #25
 800e130:	d801      	bhi.n	800e136 <_strtol_l.isra.0+0xa6>
 800e132:	3c37      	subs	r4, #55	; 0x37
 800e134:	e7e2      	b.n	800e0fc <_strtol_l.isra.0+0x6c>
 800e136:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e13a:	2b19      	cmp	r3, #25
 800e13c:	d804      	bhi.n	800e148 <_strtol_l.isra.0+0xb8>
 800e13e:	3c57      	subs	r4, #87	; 0x57
 800e140:	e7dc      	b.n	800e0fc <_strtol_l.isra.0+0x6c>
 800e142:	f04f 37ff 	mov.w	r7, #4294967295
 800e146:	e7e5      	b.n	800e114 <_strtol_l.isra.0+0x84>
 800e148:	1c7b      	adds	r3, r7, #1
 800e14a:	d108      	bne.n	800e15e <_strtol_l.isra.0+0xce>
 800e14c:	2322      	movs	r3, #34	; 0x22
 800e14e:	f8c8 3000 	str.w	r3, [r8]
 800e152:	4608      	mov	r0, r1
 800e154:	f1ba 0f00 	cmp.w	sl, #0
 800e158:	d107      	bne.n	800e16a <_strtol_l.isra.0+0xda>
 800e15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15e:	b102      	cbz	r2, 800e162 <_strtol_l.isra.0+0xd2>
 800e160:	4240      	negs	r0, r0
 800e162:	f1ba 0f00 	cmp.w	sl, #0
 800e166:	d0f8      	beq.n	800e15a <_strtol_l.isra.0+0xca>
 800e168:	b10f      	cbz	r7, 800e16e <_strtol_l.isra.0+0xde>
 800e16a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e16e:	f8ca 9000 	str.w	r9, [sl]
 800e172:	e7f2      	b.n	800e15a <_strtol_l.isra.0+0xca>
 800e174:	2430      	movs	r4, #48	; 0x30
 800e176:	2e00      	cmp	r6, #0
 800e178:	d1af      	bne.n	800e0da <_strtol_l.isra.0+0x4a>
 800e17a:	2608      	movs	r6, #8
 800e17c:	e7ad      	b.n	800e0da <_strtol_l.isra.0+0x4a>
 800e17e:	2c30      	cmp	r4, #48	; 0x30
 800e180:	d0a3      	beq.n	800e0ca <_strtol_l.isra.0+0x3a>
 800e182:	260a      	movs	r6, #10
 800e184:	e7a9      	b.n	800e0da <_strtol_l.isra.0+0x4a>
	...

0800e188 <_strtol_r>:
 800e188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e18a:	4c06      	ldr	r4, [pc, #24]	; (800e1a4 <_strtol_r+0x1c>)
 800e18c:	4d06      	ldr	r5, [pc, #24]	; (800e1a8 <_strtol_r+0x20>)
 800e18e:	6824      	ldr	r4, [r4, #0]
 800e190:	6a24      	ldr	r4, [r4, #32]
 800e192:	2c00      	cmp	r4, #0
 800e194:	bf08      	it	eq
 800e196:	462c      	moveq	r4, r5
 800e198:	9400      	str	r4, [sp, #0]
 800e19a:	f7ff ff79 	bl	800e090 <_strtol_l.isra.0>
 800e19e:	b003      	add	sp, #12
 800e1a0:	bd30      	pop	{r4, r5, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20000180 	.word	0x20000180
 800e1a8:	200001e4 	.word	0x200001e4

0800e1ac <_vsiprintf_r>:
 800e1ac:	b500      	push	{lr}
 800e1ae:	b09b      	sub	sp, #108	; 0x6c
 800e1b0:	9100      	str	r1, [sp, #0]
 800e1b2:	9104      	str	r1, [sp, #16]
 800e1b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1b8:	9105      	str	r1, [sp, #20]
 800e1ba:	9102      	str	r1, [sp, #8]
 800e1bc:	4905      	ldr	r1, [pc, #20]	; (800e1d4 <_vsiprintf_r+0x28>)
 800e1be:	9103      	str	r1, [sp, #12]
 800e1c0:	4669      	mov	r1, sp
 800e1c2:	f001 fe0f 	bl	800fde4 <_svfiprintf_r>
 800e1c6:	9b00      	ldr	r3, [sp, #0]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	b01b      	add	sp, #108	; 0x6c
 800e1ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1d2:	bf00      	nop
 800e1d4:	ffff0208 	.word	0xffff0208

0800e1d8 <vsiprintf>:
 800e1d8:	4613      	mov	r3, r2
 800e1da:	460a      	mov	r2, r1
 800e1dc:	4601      	mov	r1, r0
 800e1de:	4802      	ldr	r0, [pc, #8]	; (800e1e8 <vsiprintf+0x10>)
 800e1e0:	6800      	ldr	r0, [r0, #0]
 800e1e2:	f7ff bfe3 	b.w	800e1ac <_vsiprintf_r>
 800e1e6:	bf00      	nop
 800e1e8:	20000180 	.word	0x20000180

0800e1ec <quorem>:
 800e1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	6903      	ldr	r3, [r0, #16]
 800e1f2:	690c      	ldr	r4, [r1, #16]
 800e1f4:	42a3      	cmp	r3, r4
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	f2c0 8082 	blt.w	800e300 <quorem+0x114>
 800e1fc:	3c01      	subs	r4, #1
 800e1fe:	f101 0714 	add.w	r7, r1, #20
 800e202:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e206:	f100 0614 	add.w	r6, r0, #20
 800e20a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e20e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e212:	eb06 030c 	add.w	r3, r6, ip
 800e216:	3501      	adds	r5, #1
 800e218:	eb07 090c 	add.w	r9, r7, ip
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	fbb0 f5f5 	udiv	r5, r0, r5
 800e222:	b395      	cbz	r5, 800e28a <quorem+0x9e>
 800e224:	f04f 0a00 	mov.w	sl, #0
 800e228:	4638      	mov	r0, r7
 800e22a:	46b6      	mov	lr, r6
 800e22c:	46d3      	mov	fp, sl
 800e22e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e232:	b293      	uxth	r3, r2
 800e234:	fb05 a303 	mla	r3, r5, r3, sl
 800e238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	ebab 0303 	sub.w	r3, fp, r3
 800e242:	0c12      	lsrs	r2, r2, #16
 800e244:	f8de b000 	ldr.w	fp, [lr]
 800e248:	fb05 a202 	mla	r2, r5, r2, sl
 800e24c:	fa13 f38b 	uxtah	r3, r3, fp
 800e250:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e254:	fa1f fb82 	uxth.w	fp, r2
 800e258:	f8de 2000 	ldr.w	r2, [lr]
 800e25c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e264:	b29b      	uxth	r3, r3
 800e266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e26a:	4581      	cmp	r9, r0
 800e26c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e270:	f84e 3b04 	str.w	r3, [lr], #4
 800e274:	d2db      	bcs.n	800e22e <quorem+0x42>
 800e276:	f856 300c 	ldr.w	r3, [r6, ip]
 800e27a:	b933      	cbnz	r3, 800e28a <quorem+0x9e>
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	3b04      	subs	r3, #4
 800e280:	429e      	cmp	r6, r3
 800e282:	461a      	mov	r2, r3
 800e284:	d330      	bcc.n	800e2e8 <quorem+0xfc>
 800e286:	f8c8 4010 	str.w	r4, [r8, #16]
 800e28a:	4640      	mov	r0, r8
 800e28c:	f001 fb96 	bl	800f9bc <__mcmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	db25      	blt.n	800e2e0 <quorem+0xf4>
 800e294:	3501      	adds	r5, #1
 800e296:	4630      	mov	r0, r6
 800e298:	f04f 0c00 	mov.w	ip, #0
 800e29c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e2a0:	f8d0 e000 	ldr.w	lr, [r0]
 800e2a4:	b293      	uxth	r3, r2
 800e2a6:	ebac 0303 	sub.w	r3, ip, r3
 800e2aa:	0c12      	lsrs	r2, r2, #16
 800e2ac:	fa13 f38e 	uxtah	r3, r3, lr
 800e2b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2be:	45b9      	cmp	r9, r7
 800e2c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e2c4:	f840 3b04 	str.w	r3, [r0], #4
 800e2c8:	d2e8      	bcs.n	800e29c <quorem+0xb0>
 800e2ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e2ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e2d2:	b92a      	cbnz	r2, 800e2e0 <quorem+0xf4>
 800e2d4:	3b04      	subs	r3, #4
 800e2d6:	429e      	cmp	r6, r3
 800e2d8:	461a      	mov	r2, r3
 800e2da:	d30b      	bcc.n	800e2f4 <quorem+0x108>
 800e2dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	b003      	add	sp, #12
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	6812      	ldr	r2, [r2, #0]
 800e2ea:	3b04      	subs	r3, #4
 800e2ec:	2a00      	cmp	r2, #0
 800e2ee:	d1ca      	bne.n	800e286 <quorem+0x9a>
 800e2f0:	3c01      	subs	r4, #1
 800e2f2:	e7c5      	b.n	800e280 <quorem+0x94>
 800e2f4:	6812      	ldr	r2, [r2, #0]
 800e2f6:	3b04      	subs	r3, #4
 800e2f8:	2a00      	cmp	r2, #0
 800e2fa:	d1ef      	bne.n	800e2dc <quorem+0xf0>
 800e2fc:	3c01      	subs	r4, #1
 800e2fe:	e7ea      	b.n	800e2d6 <quorem+0xea>
 800e300:	2000      	movs	r0, #0
 800e302:	e7ee      	b.n	800e2e2 <quorem+0xf6>
 800e304:	0000      	movs	r0, r0
	...

0800e308 <_dtoa_r>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	ec57 6b10 	vmov	r6, r7, d0
 800e310:	b097      	sub	sp, #92	; 0x5c
 800e312:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e314:	9106      	str	r1, [sp, #24]
 800e316:	4604      	mov	r4, r0
 800e318:	920b      	str	r2, [sp, #44]	; 0x2c
 800e31a:	9312      	str	r3, [sp, #72]	; 0x48
 800e31c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e320:	e9cd 6700 	strd	r6, r7, [sp]
 800e324:	b93d      	cbnz	r5, 800e336 <_dtoa_r+0x2e>
 800e326:	2010      	movs	r0, #16
 800e328:	f7fe f93e 	bl	800c5a8 <malloc>
 800e32c:	6260      	str	r0, [r4, #36]	; 0x24
 800e32e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e332:	6005      	str	r5, [r0, #0]
 800e334:	60c5      	str	r5, [r0, #12]
 800e336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e338:	6819      	ldr	r1, [r3, #0]
 800e33a:	b151      	cbz	r1, 800e352 <_dtoa_r+0x4a>
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	604a      	str	r2, [r1, #4]
 800e340:	2301      	movs	r3, #1
 800e342:	4093      	lsls	r3, r2
 800e344:	608b      	str	r3, [r1, #8]
 800e346:	4620      	mov	r0, r4
 800e348:	f001 f918 	bl	800f57c <_Bfree>
 800e34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	1e3b      	subs	r3, r7, #0
 800e354:	bfbb      	ittet	lt
 800e356:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e35a:	9301      	strlt	r3, [sp, #4]
 800e35c:	2300      	movge	r3, #0
 800e35e:	2201      	movlt	r2, #1
 800e360:	bfac      	ite	ge
 800e362:	f8c8 3000 	strge.w	r3, [r8]
 800e366:	f8c8 2000 	strlt.w	r2, [r8]
 800e36a:	4baf      	ldr	r3, [pc, #700]	; (800e628 <_dtoa_r+0x320>)
 800e36c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e370:	ea33 0308 	bics.w	r3, r3, r8
 800e374:	d114      	bne.n	800e3a0 <_dtoa_r+0x98>
 800e376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e378:	f242 730f 	movw	r3, #9999	; 0x270f
 800e37c:	6013      	str	r3, [r2, #0]
 800e37e:	9b00      	ldr	r3, [sp, #0]
 800e380:	b923      	cbnz	r3, 800e38c <_dtoa_r+0x84>
 800e382:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e386:	2800      	cmp	r0, #0
 800e388:	f000 8542 	beq.w	800ee10 <_dtoa_r+0xb08>
 800e38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e38e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e63c <_dtoa_r+0x334>
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 8544 	beq.w	800ee20 <_dtoa_r+0xb18>
 800e398:	f10b 0303 	add.w	r3, fp, #3
 800e39c:	f000 bd3e 	b.w	800ee1c <_dtoa_r+0xb14>
 800e3a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	4639      	mov	r1, r7
 800e3ac:	f7f2 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3b0:	4681      	mov	r9, r0
 800e3b2:	b168      	cbz	r0, 800e3d0 <_dtoa_r+0xc8>
 800e3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	6013      	str	r3, [r2, #0]
 800e3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 8524 	beq.w	800ee0a <_dtoa_r+0xb02>
 800e3c2:	4b9a      	ldr	r3, [pc, #616]	; (800e62c <_dtoa_r+0x324>)
 800e3c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3c6:	f103 3bff 	add.w	fp, r3, #4294967295
 800e3ca:	6013      	str	r3, [r2, #0]
 800e3cc:	f000 bd28 	b.w	800ee20 <_dtoa_r+0xb18>
 800e3d0:	aa14      	add	r2, sp, #80	; 0x50
 800e3d2:	a915      	add	r1, sp, #84	; 0x54
 800e3d4:	ec47 6b10 	vmov	d0, r6, r7
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f001 fbdd 	bl	800fb98 <__d2b>
 800e3de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3e2:	9004      	str	r0, [sp, #16]
 800e3e4:	2d00      	cmp	r5, #0
 800e3e6:	d07c      	beq.n	800e4e2 <_dtoa_r+0x1da>
 800e3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e3f0:	46b2      	mov	sl, r6
 800e3f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e3fe:	2200      	movs	r2, #0
 800e400:	4b8b      	ldr	r3, [pc, #556]	; (800e630 <_dtoa_r+0x328>)
 800e402:	4650      	mov	r0, sl
 800e404:	4659      	mov	r1, fp
 800e406:	f7f1 ff3f 	bl	8000288 <__aeabi_dsub>
 800e40a:	a381      	add	r3, pc, #516	; (adr r3, 800e610 <_dtoa_r+0x308>)
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	f7f2 f8f2 	bl	80005f8 <__aeabi_dmul>
 800e414:	a380      	add	r3, pc, #512	; (adr r3, 800e618 <_dtoa_r+0x310>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff37 	bl	800028c <__adddf3>
 800e41e:	4606      	mov	r6, r0
 800e420:	4628      	mov	r0, r5
 800e422:	460f      	mov	r7, r1
 800e424:	f7f2 f87e 	bl	8000524 <__aeabi_i2d>
 800e428:	a37d      	add	r3, pc, #500	; (adr r3, 800e620 <_dtoa_r+0x318>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4630      	mov	r0, r6
 800e438:	4639      	mov	r1, r7
 800e43a:	f7f1 ff27 	bl	800028c <__adddf3>
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	f7f2 fb89 	bl	8000b58 <__aeabi_d2iz>
 800e446:	2200      	movs	r2, #0
 800e448:	4682      	mov	sl, r0
 800e44a:	2300      	movs	r3, #0
 800e44c:	4630      	mov	r0, r6
 800e44e:	4639      	mov	r1, r7
 800e450:	f7f2 fb44 	bl	8000adc <__aeabi_dcmplt>
 800e454:	b148      	cbz	r0, 800e46a <_dtoa_r+0x162>
 800e456:	4650      	mov	r0, sl
 800e458:	f7f2 f864 	bl	8000524 <__aeabi_i2d>
 800e45c:	4632      	mov	r2, r6
 800e45e:	463b      	mov	r3, r7
 800e460:	f7f2 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800e464:	b908      	cbnz	r0, 800e46a <_dtoa_r+0x162>
 800e466:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e46a:	f1ba 0f16 	cmp.w	sl, #22
 800e46e:	d859      	bhi.n	800e524 <_dtoa_r+0x21c>
 800e470:	4970      	ldr	r1, [pc, #448]	; (800e634 <_dtoa_r+0x32c>)
 800e472:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e47e:	f7f2 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 800e482:	2800      	cmp	r0, #0
 800e484:	d050      	beq.n	800e528 <_dtoa_r+0x220>
 800e486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e48a:	2300      	movs	r3, #0
 800e48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e48e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e490:	1b5d      	subs	r5, r3, r5
 800e492:	f1b5 0801 	subs.w	r8, r5, #1
 800e496:	bf49      	itett	mi
 800e498:	f1c5 0301 	rsbmi	r3, r5, #1
 800e49c:	2300      	movpl	r3, #0
 800e49e:	9305      	strmi	r3, [sp, #20]
 800e4a0:	f04f 0800 	movmi.w	r8, #0
 800e4a4:	bf58      	it	pl
 800e4a6:	9305      	strpl	r3, [sp, #20]
 800e4a8:	f1ba 0f00 	cmp.w	sl, #0
 800e4ac:	db3e      	blt.n	800e52c <_dtoa_r+0x224>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	44d0      	add	r8, sl
 800e4b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e4b6:	9307      	str	r3, [sp, #28]
 800e4b8:	9b06      	ldr	r3, [sp, #24]
 800e4ba:	2b09      	cmp	r3, #9
 800e4bc:	f200 8090 	bhi.w	800e5e0 <_dtoa_r+0x2d8>
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	bfc4      	itt	gt
 800e4c4:	3b04      	subgt	r3, #4
 800e4c6:	9306      	strgt	r3, [sp, #24]
 800e4c8:	9b06      	ldr	r3, [sp, #24]
 800e4ca:	f1a3 0302 	sub.w	r3, r3, #2
 800e4ce:	bfcc      	ite	gt
 800e4d0:	2500      	movgt	r5, #0
 800e4d2:	2501      	movle	r5, #1
 800e4d4:	2b03      	cmp	r3, #3
 800e4d6:	f200 808f 	bhi.w	800e5f8 <_dtoa_r+0x2f0>
 800e4da:	e8df f003 	tbb	[pc, r3]
 800e4de:	7f7d      	.short	0x7f7d
 800e4e0:	7131      	.short	0x7131
 800e4e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e4e6:	441d      	add	r5, r3
 800e4e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e4ec:	2820      	cmp	r0, #32
 800e4ee:	dd13      	ble.n	800e518 <_dtoa_r+0x210>
 800e4f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e4f4:	9b00      	ldr	r3, [sp, #0]
 800e4f6:	fa08 f800 	lsl.w	r8, r8, r0
 800e4fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e4fe:	fa23 f000 	lsr.w	r0, r3, r0
 800e502:	ea48 0000 	orr.w	r0, r8, r0
 800e506:	f7f1 fffd 	bl	8000504 <__aeabi_ui2d>
 800e50a:	2301      	movs	r3, #1
 800e50c:	4682      	mov	sl, r0
 800e50e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e512:	3d01      	subs	r5, #1
 800e514:	9313      	str	r3, [sp, #76]	; 0x4c
 800e516:	e772      	b.n	800e3fe <_dtoa_r+0xf6>
 800e518:	9b00      	ldr	r3, [sp, #0]
 800e51a:	f1c0 0020 	rsb	r0, r0, #32
 800e51e:	fa03 f000 	lsl.w	r0, r3, r0
 800e522:	e7f0      	b.n	800e506 <_dtoa_r+0x1fe>
 800e524:	2301      	movs	r3, #1
 800e526:	e7b1      	b.n	800e48c <_dtoa_r+0x184>
 800e528:	900f      	str	r0, [sp, #60]	; 0x3c
 800e52a:	e7b0      	b.n	800e48e <_dtoa_r+0x186>
 800e52c:	9b05      	ldr	r3, [sp, #20]
 800e52e:	eba3 030a 	sub.w	r3, r3, sl
 800e532:	9305      	str	r3, [sp, #20]
 800e534:	f1ca 0300 	rsb	r3, sl, #0
 800e538:	9307      	str	r3, [sp, #28]
 800e53a:	2300      	movs	r3, #0
 800e53c:	930e      	str	r3, [sp, #56]	; 0x38
 800e53e:	e7bb      	b.n	800e4b8 <_dtoa_r+0x1b0>
 800e540:	2301      	movs	r3, #1
 800e542:	930a      	str	r3, [sp, #40]	; 0x28
 800e544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e546:	2b00      	cmp	r3, #0
 800e548:	dd59      	ble.n	800e5fe <_dtoa_r+0x2f6>
 800e54a:	9302      	str	r3, [sp, #8]
 800e54c:	4699      	mov	r9, r3
 800e54e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e550:	2200      	movs	r2, #0
 800e552:	6072      	str	r2, [r6, #4]
 800e554:	2204      	movs	r2, #4
 800e556:	f102 0014 	add.w	r0, r2, #20
 800e55a:	4298      	cmp	r0, r3
 800e55c:	6871      	ldr	r1, [r6, #4]
 800e55e:	d953      	bls.n	800e608 <_dtoa_r+0x300>
 800e560:	4620      	mov	r0, r4
 800e562:	f000 ffd7 	bl	800f514 <_Balloc>
 800e566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e568:	6030      	str	r0, [r6, #0]
 800e56a:	f1b9 0f0e 	cmp.w	r9, #14
 800e56e:	f8d3 b000 	ldr.w	fp, [r3]
 800e572:	f200 80e6 	bhi.w	800e742 <_dtoa_r+0x43a>
 800e576:	2d00      	cmp	r5, #0
 800e578:	f000 80e3 	beq.w	800e742 <_dtoa_r+0x43a>
 800e57c:	ed9d 7b00 	vldr	d7, [sp]
 800e580:	f1ba 0f00 	cmp.w	sl, #0
 800e584:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e588:	dd74      	ble.n	800e674 <_dtoa_r+0x36c>
 800e58a:	4a2a      	ldr	r2, [pc, #168]	; (800e634 <_dtoa_r+0x32c>)
 800e58c:	f00a 030f 	and.w	r3, sl, #15
 800e590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e594:	ed93 7b00 	vldr	d7, [r3]
 800e598:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e59c:	06f0      	lsls	r0, r6, #27
 800e59e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e5a2:	d565      	bpl.n	800e670 <_dtoa_r+0x368>
 800e5a4:	4b24      	ldr	r3, [pc, #144]	; (800e638 <_dtoa_r+0x330>)
 800e5a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e5aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5ae:	f7f2 f94d 	bl	800084c <__aeabi_ddiv>
 800e5b2:	e9cd 0100 	strd	r0, r1, [sp]
 800e5b6:	f006 060f 	and.w	r6, r6, #15
 800e5ba:	2503      	movs	r5, #3
 800e5bc:	4f1e      	ldr	r7, [pc, #120]	; (800e638 <_dtoa_r+0x330>)
 800e5be:	e04c      	b.n	800e65a <_dtoa_r+0x352>
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5c6:	4453      	add	r3, sl
 800e5c8:	f103 0901 	add.w	r9, r3, #1
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	464b      	mov	r3, r9
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	bfb8      	it	lt
 800e5d4:	2301      	movlt	r3, #1
 800e5d6:	e7ba      	b.n	800e54e <_dtoa_r+0x246>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	e7b2      	b.n	800e542 <_dtoa_r+0x23a>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e7f0      	b.n	800e5c2 <_dtoa_r+0x2ba>
 800e5e0:	2501      	movs	r5, #1
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9306      	str	r3, [sp, #24]
 800e5e6:	950a      	str	r5, [sp, #40]	; 0x28
 800e5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ec:	9302      	str	r3, [sp, #8]
 800e5ee:	4699      	mov	r9, r3
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	2312      	movs	r3, #18
 800e5f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5f6:	e7aa      	b.n	800e54e <_dtoa_r+0x246>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e5fc:	e7f4      	b.n	800e5e8 <_dtoa_r+0x2e0>
 800e5fe:	2301      	movs	r3, #1
 800e600:	9302      	str	r3, [sp, #8]
 800e602:	4699      	mov	r9, r3
 800e604:	461a      	mov	r2, r3
 800e606:	e7f5      	b.n	800e5f4 <_dtoa_r+0x2ec>
 800e608:	3101      	adds	r1, #1
 800e60a:	6071      	str	r1, [r6, #4]
 800e60c:	0052      	lsls	r2, r2, #1
 800e60e:	e7a2      	b.n	800e556 <_dtoa_r+0x24e>
 800e610:	636f4361 	.word	0x636f4361
 800e614:	3fd287a7 	.word	0x3fd287a7
 800e618:	8b60c8b3 	.word	0x8b60c8b3
 800e61c:	3fc68a28 	.word	0x3fc68a28
 800e620:	509f79fb 	.word	0x509f79fb
 800e624:	3fd34413 	.word	0x3fd34413
 800e628:	7ff00000 	.word	0x7ff00000
 800e62c:	080102ed 	.word	0x080102ed
 800e630:	3ff80000 	.word	0x3ff80000
 800e634:	080103a8 	.word	0x080103a8
 800e638:	08010380 	.word	0x08010380
 800e63c:	08010371 	.word	0x08010371
 800e640:	07f1      	lsls	r1, r6, #31
 800e642:	d508      	bpl.n	800e656 <_dtoa_r+0x34e>
 800e644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e64c:	f7f1 ffd4 	bl	80005f8 <__aeabi_dmul>
 800e650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e654:	3501      	adds	r5, #1
 800e656:	1076      	asrs	r6, r6, #1
 800e658:	3708      	adds	r7, #8
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	d1f0      	bne.n	800e640 <_dtoa_r+0x338>
 800e65e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e662:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e666:	f7f2 f8f1 	bl	800084c <__aeabi_ddiv>
 800e66a:	e9cd 0100 	strd	r0, r1, [sp]
 800e66e:	e01a      	b.n	800e6a6 <_dtoa_r+0x39e>
 800e670:	2502      	movs	r5, #2
 800e672:	e7a3      	b.n	800e5bc <_dtoa_r+0x2b4>
 800e674:	f000 80a0 	beq.w	800e7b8 <_dtoa_r+0x4b0>
 800e678:	f1ca 0600 	rsb	r6, sl, #0
 800e67c:	4b9f      	ldr	r3, [pc, #636]	; (800e8fc <_dtoa_r+0x5f4>)
 800e67e:	4fa0      	ldr	r7, [pc, #640]	; (800e900 <_dtoa_r+0x5f8>)
 800e680:	f006 020f 	and.w	r2, r6, #15
 800e684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e690:	f7f1 ffb2 	bl	80005f8 <__aeabi_dmul>
 800e694:	e9cd 0100 	strd	r0, r1, [sp]
 800e698:	1136      	asrs	r6, r6, #4
 800e69a:	2300      	movs	r3, #0
 800e69c:	2502      	movs	r5, #2
 800e69e:	2e00      	cmp	r6, #0
 800e6a0:	d17f      	bne.n	800e7a2 <_dtoa_r+0x49a>
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1e1      	bne.n	800e66a <_dtoa_r+0x362>
 800e6a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 8087 	beq.w	800e7bc <_dtoa_r+0x4b4>
 800e6ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4b93      	ldr	r3, [pc, #588]	; (800e904 <_dtoa_r+0x5fc>)
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	4639      	mov	r1, r7
 800e6ba:	f7f2 fa0f 	bl	8000adc <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d07c      	beq.n	800e7bc <_dtoa_r+0x4b4>
 800e6c2:	f1b9 0f00 	cmp.w	r9, #0
 800e6c6:	d079      	beq.n	800e7bc <_dtoa_r+0x4b4>
 800e6c8:	9b02      	ldr	r3, [sp, #8]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	dd35      	ble.n	800e73a <_dtoa_r+0x432>
 800e6ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e6d2:	9308      	str	r3, [sp, #32]
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	4b8b      	ldr	r3, [pc, #556]	; (800e908 <_dtoa_r+0x600>)
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f7f1 ff8c 	bl	80005f8 <__aeabi_dmul>
 800e6e0:	e9cd 0100 	strd	r0, r1, [sp]
 800e6e4:	9f02      	ldr	r7, [sp, #8]
 800e6e6:	3501      	adds	r5, #1
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7f1 ff1b 	bl	8000524 <__aeabi_i2d>
 800e6ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6f2:	f7f1 ff81 	bl	80005f8 <__aeabi_dmul>
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	4b84      	ldr	r3, [pc, #528]	; (800e90c <_dtoa_r+0x604>)
 800e6fa:	f7f1 fdc7 	bl	800028c <__adddf3>
 800e6fe:	4605      	mov	r5, r0
 800e700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e704:	2f00      	cmp	r7, #0
 800e706:	d15d      	bne.n	800e7c4 <_dtoa_r+0x4bc>
 800e708:	2200      	movs	r2, #0
 800e70a:	4b81      	ldr	r3, [pc, #516]	; (800e910 <_dtoa_r+0x608>)
 800e70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e710:	f7f1 fdba 	bl	8000288 <__aeabi_dsub>
 800e714:	462a      	mov	r2, r5
 800e716:	4633      	mov	r3, r6
 800e718:	e9cd 0100 	strd	r0, r1, [sp]
 800e71c:	f7f2 f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 800e720:	2800      	cmp	r0, #0
 800e722:	f040 8288 	bne.w	800ec36 <_dtoa_r+0x92e>
 800e726:	462a      	mov	r2, r5
 800e728:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e730:	f7f2 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800e734:	2800      	cmp	r0, #0
 800e736:	f040 827c 	bne.w	800ec32 <_dtoa_r+0x92a>
 800e73a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e73e:	e9cd 2300 	strd	r2, r3, [sp]
 800e742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e744:	2b00      	cmp	r3, #0
 800e746:	f2c0 8150 	blt.w	800e9ea <_dtoa_r+0x6e2>
 800e74a:	f1ba 0f0e 	cmp.w	sl, #14
 800e74e:	f300 814c 	bgt.w	800e9ea <_dtoa_r+0x6e2>
 800e752:	4b6a      	ldr	r3, [pc, #424]	; (800e8fc <_dtoa_r+0x5f4>)
 800e754:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e758:	ed93 7b00 	vldr	d7, [r3]
 800e75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e75e:	2b00      	cmp	r3, #0
 800e760:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e764:	f280 80d8 	bge.w	800e918 <_dtoa_r+0x610>
 800e768:	f1b9 0f00 	cmp.w	r9, #0
 800e76c:	f300 80d4 	bgt.w	800e918 <_dtoa_r+0x610>
 800e770:	f040 825e 	bne.w	800ec30 <_dtoa_r+0x928>
 800e774:	2200      	movs	r2, #0
 800e776:	4b66      	ldr	r3, [pc, #408]	; (800e910 <_dtoa_r+0x608>)
 800e778:	ec51 0b17 	vmov	r0, r1, d7
 800e77c:	f7f1 ff3c 	bl	80005f8 <__aeabi_dmul>
 800e780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e784:	f7f2 f9be 	bl	8000b04 <__aeabi_dcmpge>
 800e788:	464f      	mov	r7, r9
 800e78a:	464e      	mov	r6, r9
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f040 8234 	bne.w	800ebfa <_dtoa_r+0x8f2>
 800e792:	2331      	movs	r3, #49	; 0x31
 800e794:	f10b 0501 	add.w	r5, fp, #1
 800e798:	f88b 3000 	strb.w	r3, [fp]
 800e79c:	f10a 0a01 	add.w	sl, sl, #1
 800e7a0:	e22f      	b.n	800ec02 <_dtoa_r+0x8fa>
 800e7a2:	07f2      	lsls	r2, r6, #31
 800e7a4:	d505      	bpl.n	800e7b2 <_dtoa_r+0x4aa>
 800e7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7aa:	f7f1 ff25 	bl	80005f8 <__aeabi_dmul>
 800e7ae:	3501      	adds	r5, #1
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	1076      	asrs	r6, r6, #1
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	e772      	b.n	800e69e <_dtoa_r+0x396>
 800e7b8:	2502      	movs	r5, #2
 800e7ba:	e774      	b.n	800e6a6 <_dtoa_r+0x39e>
 800e7bc:	f8cd a020 	str.w	sl, [sp, #32]
 800e7c0:	464f      	mov	r7, r9
 800e7c2:	e791      	b.n	800e6e8 <_dtoa_r+0x3e0>
 800e7c4:	4b4d      	ldr	r3, [pc, #308]	; (800e8fc <_dtoa_r+0x5f4>)
 800e7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d047      	beq.n	800e864 <_dtoa_r+0x55c>
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	2000      	movs	r0, #0
 800e7da:	494e      	ldr	r1, [pc, #312]	; (800e914 <_dtoa_r+0x60c>)
 800e7dc:	f7f2 f836 	bl	800084c <__aeabi_ddiv>
 800e7e0:	462a      	mov	r2, r5
 800e7e2:	4633      	mov	r3, r6
 800e7e4:	f7f1 fd50 	bl	8000288 <__aeabi_dsub>
 800e7e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e7ec:	465d      	mov	r5, fp
 800e7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7f2:	f7f2 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	f7f1 fe94 	bl	8000524 <__aeabi_i2d>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e804:	f7f1 fd40 	bl	8000288 <__aeabi_dsub>
 800e808:	3630      	adds	r6, #48	; 0x30
 800e80a:	f805 6b01 	strb.w	r6, [r5], #1
 800e80e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e812:	e9cd 0100 	strd	r0, r1, [sp]
 800e816:	f7f2 f961 	bl	8000adc <__aeabi_dcmplt>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d163      	bne.n	800e8e6 <_dtoa_r+0x5de>
 800e81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e822:	2000      	movs	r0, #0
 800e824:	4937      	ldr	r1, [pc, #220]	; (800e904 <_dtoa_r+0x5fc>)
 800e826:	f7f1 fd2f 	bl	8000288 <__aeabi_dsub>
 800e82a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e82e:	f7f2 f955 	bl	8000adc <__aeabi_dcmplt>
 800e832:	2800      	cmp	r0, #0
 800e834:	f040 80b7 	bne.w	800e9a6 <_dtoa_r+0x69e>
 800e838:	eba5 030b 	sub.w	r3, r5, fp
 800e83c:	429f      	cmp	r7, r3
 800e83e:	f77f af7c 	ble.w	800e73a <_dtoa_r+0x432>
 800e842:	2200      	movs	r2, #0
 800e844:	4b30      	ldr	r3, [pc, #192]	; (800e908 <_dtoa_r+0x600>)
 800e846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e84a:	f7f1 fed5 	bl	80005f8 <__aeabi_dmul>
 800e84e:	2200      	movs	r2, #0
 800e850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e854:	4b2c      	ldr	r3, [pc, #176]	; (800e908 <_dtoa_r+0x600>)
 800e856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e85a:	f7f1 fecd 	bl	80005f8 <__aeabi_dmul>
 800e85e:	e9cd 0100 	strd	r0, r1, [sp]
 800e862:	e7c4      	b.n	800e7ee <_dtoa_r+0x4e6>
 800e864:	462a      	mov	r2, r5
 800e866:	4633      	mov	r3, r6
 800e868:	f7f1 fec6 	bl	80005f8 <__aeabi_dmul>
 800e86c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e870:	eb0b 0507 	add.w	r5, fp, r7
 800e874:	465e      	mov	r6, fp
 800e876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e87a:	f7f2 f96d 	bl	8000b58 <__aeabi_d2iz>
 800e87e:	4607      	mov	r7, r0
 800e880:	f7f1 fe50 	bl	8000524 <__aeabi_i2d>
 800e884:	3730      	adds	r7, #48	; 0x30
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e88e:	f7f1 fcfb 	bl	8000288 <__aeabi_dsub>
 800e892:	f806 7b01 	strb.w	r7, [r6], #1
 800e896:	42ae      	cmp	r6, r5
 800e898:	e9cd 0100 	strd	r0, r1, [sp]
 800e89c:	f04f 0200 	mov.w	r2, #0
 800e8a0:	d126      	bne.n	800e8f0 <_dtoa_r+0x5e8>
 800e8a2:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <_dtoa_r+0x60c>)
 800e8a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8a8:	f7f1 fcf0 	bl	800028c <__adddf3>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b4:	f7f2 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d174      	bne.n	800e9a6 <_dtoa_r+0x69e>
 800e8bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	4914      	ldr	r1, [pc, #80]	; (800e914 <_dtoa_r+0x60c>)
 800e8c4:	f7f1 fce0 	bl	8000288 <__aeabi_dsub>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8d0:	f7f2 f904 	bl	8000adc <__aeabi_dcmplt>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	f43f af30 	beq.w	800e73a <_dtoa_r+0x432>
 800e8da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8de:	2b30      	cmp	r3, #48	; 0x30
 800e8e0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8e4:	d002      	beq.n	800e8ec <_dtoa_r+0x5e4>
 800e8e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e8ea:	e04a      	b.n	800e982 <_dtoa_r+0x67a>
 800e8ec:	4615      	mov	r5, r2
 800e8ee:	e7f4      	b.n	800e8da <_dtoa_r+0x5d2>
 800e8f0:	4b05      	ldr	r3, [pc, #20]	; (800e908 <_dtoa_r+0x600>)
 800e8f2:	f7f1 fe81 	bl	80005f8 <__aeabi_dmul>
 800e8f6:	e9cd 0100 	strd	r0, r1, [sp]
 800e8fa:	e7bc      	b.n	800e876 <_dtoa_r+0x56e>
 800e8fc:	080103a8 	.word	0x080103a8
 800e900:	08010380 	.word	0x08010380
 800e904:	3ff00000 	.word	0x3ff00000
 800e908:	40240000 	.word	0x40240000
 800e90c:	401c0000 	.word	0x401c0000
 800e910:	40140000 	.word	0x40140000
 800e914:	3fe00000 	.word	0x3fe00000
 800e918:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e91c:	465d      	mov	r5, fp
 800e91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e922:	4630      	mov	r0, r6
 800e924:	4639      	mov	r1, r7
 800e926:	f7f1 ff91 	bl	800084c <__aeabi_ddiv>
 800e92a:	f7f2 f915 	bl	8000b58 <__aeabi_d2iz>
 800e92e:	4680      	mov	r8, r0
 800e930:	f7f1 fdf8 	bl	8000524 <__aeabi_i2d>
 800e934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e938:	f7f1 fe5e 	bl	80005f8 <__aeabi_dmul>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	4630      	mov	r0, r6
 800e942:	4639      	mov	r1, r7
 800e944:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e948:	f7f1 fc9e 	bl	8000288 <__aeabi_dsub>
 800e94c:	f805 6b01 	strb.w	r6, [r5], #1
 800e950:	eba5 060b 	sub.w	r6, r5, fp
 800e954:	45b1      	cmp	r9, r6
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	d139      	bne.n	800e9d0 <_dtoa_r+0x6c8>
 800e95c:	f7f1 fc96 	bl	800028c <__adddf3>
 800e960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e964:	4606      	mov	r6, r0
 800e966:	460f      	mov	r7, r1
 800e968:	f7f2 f8d6 	bl	8000b18 <__aeabi_dcmpgt>
 800e96c:	b9c8      	cbnz	r0, 800e9a2 <_dtoa_r+0x69a>
 800e96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e972:	4630      	mov	r0, r6
 800e974:	4639      	mov	r1, r7
 800e976:	f7f2 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e97a:	b110      	cbz	r0, 800e982 <_dtoa_r+0x67a>
 800e97c:	f018 0f01 	tst.w	r8, #1
 800e980:	d10f      	bne.n	800e9a2 <_dtoa_r+0x69a>
 800e982:	9904      	ldr	r1, [sp, #16]
 800e984:	4620      	mov	r0, r4
 800e986:	f000 fdf9 	bl	800f57c <_Bfree>
 800e98a:	2300      	movs	r3, #0
 800e98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e98e:	702b      	strb	r3, [r5, #0]
 800e990:	f10a 0301 	add.w	r3, sl, #1
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f000 8241 	beq.w	800ee20 <_dtoa_r+0xb18>
 800e99e:	601d      	str	r5, [r3, #0]
 800e9a0:	e23e      	b.n	800ee20 <_dtoa_r+0xb18>
 800e9a2:	f8cd a020 	str.w	sl, [sp, #32]
 800e9a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e9aa:	2a39      	cmp	r2, #57	; 0x39
 800e9ac:	f105 33ff 	add.w	r3, r5, #4294967295
 800e9b0:	d108      	bne.n	800e9c4 <_dtoa_r+0x6bc>
 800e9b2:	459b      	cmp	fp, r3
 800e9b4:	d10a      	bne.n	800e9cc <_dtoa_r+0x6c4>
 800e9b6:	9b08      	ldr	r3, [sp, #32]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	9308      	str	r3, [sp, #32]
 800e9bc:	2330      	movs	r3, #48	; 0x30
 800e9be:	f88b 3000 	strb.w	r3, [fp]
 800e9c2:	465b      	mov	r3, fp
 800e9c4:	781a      	ldrb	r2, [r3, #0]
 800e9c6:	3201      	adds	r2, #1
 800e9c8:	701a      	strb	r2, [r3, #0]
 800e9ca:	e78c      	b.n	800e8e6 <_dtoa_r+0x5de>
 800e9cc:	461d      	mov	r5, r3
 800e9ce:	e7ea      	b.n	800e9a6 <_dtoa_r+0x69e>
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	4b9b      	ldr	r3, [pc, #620]	; (800ec40 <_dtoa_r+0x938>)
 800e9d4:	f7f1 fe10 	bl	80005f8 <__aeabi_dmul>
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4606      	mov	r6, r0
 800e9de:	460f      	mov	r7, r1
 800e9e0:	f7f2 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d09a      	beq.n	800e91e <_dtoa_r+0x616>
 800e9e8:	e7cb      	b.n	800e982 <_dtoa_r+0x67a>
 800e9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	f000 808b 	beq.w	800eb08 <_dtoa_r+0x800>
 800e9f2:	9a06      	ldr	r2, [sp, #24]
 800e9f4:	2a01      	cmp	r2, #1
 800e9f6:	dc6e      	bgt.n	800ead6 <_dtoa_r+0x7ce>
 800e9f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	d067      	beq.n	800eace <_dtoa_r+0x7c6>
 800e9fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea02:	9f07      	ldr	r7, [sp, #28]
 800ea04:	9d05      	ldr	r5, [sp, #20]
 800ea06:	9a05      	ldr	r2, [sp, #20]
 800ea08:	2101      	movs	r1, #1
 800ea0a:	441a      	add	r2, r3
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	9205      	str	r2, [sp, #20]
 800ea10:	4498      	add	r8, r3
 800ea12:	f000 fe91 	bl	800f738 <__i2b>
 800ea16:	4606      	mov	r6, r0
 800ea18:	2d00      	cmp	r5, #0
 800ea1a:	dd0c      	ble.n	800ea36 <_dtoa_r+0x72e>
 800ea1c:	f1b8 0f00 	cmp.w	r8, #0
 800ea20:	dd09      	ble.n	800ea36 <_dtoa_r+0x72e>
 800ea22:	4545      	cmp	r5, r8
 800ea24:	9a05      	ldr	r2, [sp, #20]
 800ea26:	462b      	mov	r3, r5
 800ea28:	bfa8      	it	ge
 800ea2a:	4643      	movge	r3, r8
 800ea2c:	1ad2      	subs	r2, r2, r3
 800ea2e:	9205      	str	r2, [sp, #20]
 800ea30:	1aed      	subs	r5, r5, r3
 800ea32:	eba8 0803 	sub.w	r8, r8, r3
 800ea36:	9b07      	ldr	r3, [sp, #28]
 800ea38:	b1eb      	cbz	r3, 800ea76 <_dtoa_r+0x76e>
 800ea3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d067      	beq.n	800eb10 <_dtoa_r+0x808>
 800ea40:	b18f      	cbz	r7, 800ea66 <_dtoa_r+0x75e>
 800ea42:	4631      	mov	r1, r6
 800ea44:	463a      	mov	r2, r7
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 ff16 	bl	800f878 <__pow5mult>
 800ea4c:	9a04      	ldr	r2, [sp, #16]
 800ea4e:	4601      	mov	r1, r0
 800ea50:	4606      	mov	r6, r0
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 fe79 	bl	800f74a <__multiply>
 800ea58:	9904      	ldr	r1, [sp, #16]
 800ea5a:	9008      	str	r0, [sp, #32]
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fd8d 	bl	800f57c <_Bfree>
 800ea62:	9b08      	ldr	r3, [sp, #32]
 800ea64:	9304      	str	r3, [sp, #16]
 800ea66:	9b07      	ldr	r3, [sp, #28]
 800ea68:	1bda      	subs	r2, r3, r7
 800ea6a:	d004      	beq.n	800ea76 <_dtoa_r+0x76e>
 800ea6c:	9904      	ldr	r1, [sp, #16]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f000 ff02 	bl	800f878 <__pow5mult>
 800ea74:	9004      	str	r0, [sp, #16]
 800ea76:	2101      	movs	r1, #1
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 fe5d 	bl	800f738 <__i2b>
 800ea7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea80:	4607      	mov	r7, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f000 81d0 	beq.w	800ee28 <_dtoa_r+0xb20>
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f000 fef3 	bl	800f878 <__pow5mult>
 800ea92:	9b06      	ldr	r3, [sp, #24]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	4607      	mov	r7, r0
 800ea98:	dc40      	bgt.n	800eb1c <_dtoa_r+0x814>
 800ea9a:	9b00      	ldr	r3, [sp, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d139      	bne.n	800eb14 <_dtoa_r+0x80c>
 800eaa0:	9b01      	ldr	r3, [sp, #4]
 800eaa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d136      	bne.n	800eb18 <_dtoa_r+0x810>
 800eaaa:	9b01      	ldr	r3, [sp, #4]
 800eaac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eab0:	0d1b      	lsrs	r3, r3, #20
 800eab2:	051b      	lsls	r3, r3, #20
 800eab4:	b12b      	cbz	r3, 800eac2 <_dtoa_r+0x7ba>
 800eab6:	9b05      	ldr	r3, [sp, #20]
 800eab8:	3301      	adds	r3, #1
 800eaba:	9305      	str	r3, [sp, #20]
 800eabc:	f108 0801 	add.w	r8, r8, #1
 800eac0:	2301      	movs	r3, #1
 800eac2:	9307      	str	r3, [sp, #28]
 800eac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d12a      	bne.n	800eb20 <_dtoa_r+0x818>
 800eaca:	2001      	movs	r0, #1
 800eacc:	e030      	b.n	800eb30 <_dtoa_r+0x828>
 800eace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ead0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ead4:	e795      	b.n	800ea02 <_dtoa_r+0x6fa>
 800ead6:	9b07      	ldr	r3, [sp, #28]
 800ead8:	f109 37ff 	add.w	r7, r9, #4294967295
 800eadc:	42bb      	cmp	r3, r7
 800eade:	bfbf      	itttt	lt
 800eae0:	9b07      	ldrlt	r3, [sp, #28]
 800eae2:	9707      	strlt	r7, [sp, #28]
 800eae4:	1afa      	sublt	r2, r7, r3
 800eae6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eae8:	bfbb      	ittet	lt
 800eaea:	189b      	addlt	r3, r3, r2
 800eaec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eaee:	1bdf      	subge	r7, r3, r7
 800eaf0:	2700      	movlt	r7, #0
 800eaf2:	f1b9 0f00 	cmp.w	r9, #0
 800eaf6:	bfb5      	itete	lt
 800eaf8:	9b05      	ldrlt	r3, [sp, #20]
 800eafa:	9d05      	ldrge	r5, [sp, #20]
 800eafc:	eba3 0509 	sublt.w	r5, r3, r9
 800eb00:	464b      	movge	r3, r9
 800eb02:	bfb8      	it	lt
 800eb04:	2300      	movlt	r3, #0
 800eb06:	e77e      	b.n	800ea06 <_dtoa_r+0x6fe>
 800eb08:	9f07      	ldr	r7, [sp, #28]
 800eb0a:	9d05      	ldr	r5, [sp, #20]
 800eb0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800eb0e:	e783      	b.n	800ea18 <_dtoa_r+0x710>
 800eb10:	9a07      	ldr	r2, [sp, #28]
 800eb12:	e7ab      	b.n	800ea6c <_dtoa_r+0x764>
 800eb14:	2300      	movs	r3, #0
 800eb16:	e7d4      	b.n	800eac2 <_dtoa_r+0x7ba>
 800eb18:	9b00      	ldr	r3, [sp, #0]
 800eb1a:	e7d2      	b.n	800eac2 <_dtoa_r+0x7ba>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9307      	str	r3, [sp, #28]
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800eb26:	6918      	ldr	r0, [r3, #16]
 800eb28:	f000 fdb8 	bl	800f69c <__hi0bits>
 800eb2c:	f1c0 0020 	rsb	r0, r0, #32
 800eb30:	4440      	add	r0, r8
 800eb32:	f010 001f 	ands.w	r0, r0, #31
 800eb36:	d047      	beq.n	800ebc8 <_dtoa_r+0x8c0>
 800eb38:	f1c0 0320 	rsb	r3, r0, #32
 800eb3c:	2b04      	cmp	r3, #4
 800eb3e:	dd3b      	ble.n	800ebb8 <_dtoa_r+0x8b0>
 800eb40:	9b05      	ldr	r3, [sp, #20]
 800eb42:	f1c0 001c 	rsb	r0, r0, #28
 800eb46:	4403      	add	r3, r0
 800eb48:	9305      	str	r3, [sp, #20]
 800eb4a:	4405      	add	r5, r0
 800eb4c:	4480      	add	r8, r0
 800eb4e:	9b05      	ldr	r3, [sp, #20]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dd05      	ble.n	800eb60 <_dtoa_r+0x858>
 800eb54:	461a      	mov	r2, r3
 800eb56:	9904      	ldr	r1, [sp, #16]
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f000 fedb 	bl	800f914 <__lshift>
 800eb5e:	9004      	str	r0, [sp, #16]
 800eb60:	f1b8 0f00 	cmp.w	r8, #0
 800eb64:	dd05      	ble.n	800eb72 <_dtoa_r+0x86a>
 800eb66:	4639      	mov	r1, r7
 800eb68:	4642      	mov	r2, r8
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f000 fed2 	bl	800f914 <__lshift>
 800eb70:	4607      	mov	r7, r0
 800eb72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb74:	b353      	cbz	r3, 800ebcc <_dtoa_r+0x8c4>
 800eb76:	4639      	mov	r1, r7
 800eb78:	9804      	ldr	r0, [sp, #16]
 800eb7a:	f000 ff1f 	bl	800f9bc <__mcmp>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	da24      	bge.n	800ebcc <_dtoa_r+0x8c4>
 800eb82:	2300      	movs	r3, #0
 800eb84:	220a      	movs	r2, #10
 800eb86:	9904      	ldr	r1, [sp, #16]
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f000 fd0e 	bl	800f5aa <__multadd>
 800eb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb90:	9004      	str	r0, [sp, #16]
 800eb92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 814d 	beq.w	800ee36 <_dtoa_r+0xb2e>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4631      	mov	r1, r6
 800eba0:	220a      	movs	r2, #10
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 fd01 	bl	800f5aa <__multadd>
 800eba8:	9b02      	ldr	r3, [sp, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	4606      	mov	r6, r0
 800ebae:	dc4f      	bgt.n	800ec50 <_dtoa_r+0x948>
 800ebb0:	9b06      	ldr	r3, [sp, #24]
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	dd4c      	ble.n	800ec50 <_dtoa_r+0x948>
 800ebb6:	e011      	b.n	800ebdc <_dtoa_r+0x8d4>
 800ebb8:	d0c9      	beq.n	800eb4e <_dtoa_r+0x846>
 800ebba:	9a05      	ldr	r2, [sp, #20]
 800ebbc:	331c      	adds	r3, #28
 800ebbe:	441a      	add	r2, r3
 800ebc0:	9205      	str	r2, [sp, #20]
 800ebc2:	441d      	add	r5, r3
 800ebc4:	4498      	add	r8, r3
 800ebc6:	e7c2      	b.n	800eb4e <_dtoa_r+0x846>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	e7f6      	b.n	800ebba <_dtoa_r+0x8b2>
 800ebcc:	f1b9 0f00 	cmp.w	r9, #0
 800ebd0:	dc38      	bgt.n	800ec44 <_dtoa_r+0x93c>
 800ebd2:	9b06      	ldr	r3, [sp, #24]
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	dd35      	ble.n	800ec44 <_dtoa_r+0x93c>
 800ebd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebdc:	9b02      	ldr	r3, [sp, #8]
 800ebde:	b963      	cbnz	r3, 800ebfa <_dtoa_r+0x8f2>
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	2205      	movs	r2, #5
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f000 fce0 	bl	800f5aa <__multadd>
 800ebea:	4601      	mov	r1, r0
 800ebec:	4607      	mov	r7, r0
 800ebee:	9804      	ldr	r0, [sp, #16]
 800ebf0:	f000 fee4 	bl	800f9bc <__mcmp>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	f73f adcc 	bgt.w	800e792 <_dtoa_r+0x48a>
 800ebfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebfc:	465d      	mov	r5, fp
 800ebfe:	ea6f 0a03 	mvn.w	sl, r3
 800ec02:	f04f 0900 	mov.w	r9, #0
 800ec06:	4639      	mov	r1, r7
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fcb7 	bl	800f57c <_Bfree>
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	f43f aeb7 	beq.w	800e982 <_dtoa_r+0x67a>
 800ec14:	f1b9 0f00 	cmp.w	r9, #0
 800ec18:	d005      	beq.n	800ec26 <_dtoa_r+0x91e>
 800ec1a:	45b1      	cmp	r9, r6
 800ec1c:	d003      	beq.n	800ec26 <_dtoa_r+0x91e>
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4620      	mov	r0, r4
 800ec22:	f000 fcab 	bl	800f57c <_Bfree>
 800ec26:	4631      	mov	r1, r6
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f000 fca7 	bl	800f57c <_Bfree>
 800ec2e:	e6a8      	b.n	800e982 <_dtoa_r+0x67a>
 800ec30:	2700      	movs	r7, #0
 800ec32:	463e      	mov	r6, r7
 800ec34:	e7e1      	b.n	800ebfa <_dtoa_r+0x8f2>
 800ec36:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ec3a:	463e      	mov	r6, r7
 800ec3c:	e5a9      	b.n	800e792 <_dtoa_r+0x48a>
 800ec3e:	bf00      	nop
 800ec40:	40240000 	.word	0x40240000
 800ec44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec46:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f000 80fa 	beq.w	800ee44 <_dtoa_r+0xb3c>
 800ec50:	2d00      	cmp	r5, #0
 800ec52:	dd05      	ble.n	800ec60 <_dtoa_r+0x958>
 800ec54:	4631      	mov	r1, r6
 800ec56:	462a      	mov	r2, r5
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fe5b 	bl	800f914 <__lshift>
 800ec5e:	4606      	mov	r6, r0
 800ec60:	9b07      	ldr	r3, [sp, #28]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d04c      	beq.n	800ed00 <_dtoa_r+0x9f8>
 800ec66:	6871      	ldr	r1, [r6, #4]
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f000 fc53 	bl	800f514 <_Balloc>
 800ec6e:	6932      	ldr	r2, [r6, #16]
 800ec70:	3202      	adds	r2, #2
 800ec72:	4605      	mov	r5, r0
 800ec74:	0092      	lsls	r2, r2, #2
 800ec76:	f106 010c 	add.w	r1, r6, #12
 800ec7a:	300c      	adds	r0, #12
 800ec7c:	f7fd fca4 	bl	800c5c8 <memcpy>
 800ec80:	2201      	movs	r2, #1
 800ec82:	4629      	mov	r1, r5
 800ec84:	4620      	mov	r0, r4
 800ec86:	f000 fe45 	bl	800f914 <__lshift>
 800ec8a:	9b00      	ldr	r3, [sp, #0]
 800ec8c:	f8cd b014 	str.w	fp, [sp, #20]
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	46b1      	mov	r9, r6
 800ec96:	9307      	str	r3, [sp, #28]
 800ec98:	4606      	mov	r6, r0
 800ec9a:	4639      	mov	r1, r7
 800ec9c:	9804      	ldr	r0, [sp, #16]
 800ec9e:	f7ff faa5 	bl	800e1ec <quorem>
 800eca2:	4649      	mov	r1, r9
 800eca4:	4605      	mov	r5, r0
 800eca6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ecaa:	9804      	ldr	r0, [sp, #16]
 800ecac:	f000 fe86 	bl	800f9bc <__mcmp>
 800ecb0:	4632      	mov	r2, r6
 800ecb2:	9000      	str	r0, [sp, #0]
 800ecb4:	4639      	mov	r1, r7
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 fe9a 	bl	800f9f0 <__mdiff>
 800ecbc:	68c3      	ldr	r3, [r0, #12]
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	bb03      	cbnz	r3, 800ed04 <_dtoa_r+0x9fc>
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	9008      	str	r0, [sp, #32]
 800ecc6:	9804      	ldr	r0, [sp, #16]
 800ecc8:	f000 fe78 	bl	800f9bc <__mcmp>
 800eccc:	9a08      	ldr	r2, [sp, #32]
 800ecce:	4603      	mov	r3, r0
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	9308      	str	r3, [sp, #32]
 800ecd6:	f000 fc51 	bl	800f57c <_Bfree>
 800ecda:	9b08      	ldr	r3, [sp, #32]
 800ecdc:	b9a3      	cbnz	r3, 800ed08 <_dtoa_r+0xa00>
 800ecde:	9a06      	ldr	r2, [sp, #24]
 800ece0:	b992      	cbnz	r2, 800ed08 <_dtoa_r+0xa00>
 800ece2:	9a07      	ldr	r2, [sp, #28]
 800ece4:	b982      	cbnz	r2, 800ed08 <_dtoa_r+0xa00>
 800ece6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecea:	d029      	beq.n	800ed40 <_dtoa_r+0xa38>
 800ecec:	9b00      	ldr	r3, [sp, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	dd01      	ble.n	800ecf6 <_dtoa_r+0x9ee>
 800ecf2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ecf6:	9b05      	ldr	r3, [sp, #20]
 800ecf8:	1c5d      	adds	r5, r3, #1
 800ecfa:	f883 8000 	strb.w	r8, [r3]
 800ecfe:	e782      	b.n	800ec06 <_dtoa_r+0x8fe>
 800ed00:	4630      	mov	r0, r6
 800ed02:	e7c2      	b.n	800ec8a <_dtoa_r+0x982>
 800ed04:	2301      	movs	r3, #1
 800ed06:	e7e3      	b.n	800ecd0 <_dtoa_r+0x9c8>
 800ed08:	9a00      	ldr	r2, [sp, #0]
 800ed0a:	2a00      	cmp	r2, #0
 800ed0c:	db04      	blt.n	800ed18 <_dtoa_r+0xa10>
 800ed0e:	d125      	bne.n	800ed5c <_dtoa_r+0xa54>
 800ed10:	9a06      	ldr	r2, [sp, #24]
 800ed12:	bb1a      	cbnz	r2, 800ed5c <_dtoa_r+0xa54>
 800ed14:	9a07      	ldr	r2, [sp, #28]
 800ed16:	bb0a      	cbnz	r2, 800ed5c <_dtoa_r+0xa54>
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	ddec      	ble.n	800ecf6 <_dtoa_r+0x9ee>
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	9904      	ldr	r1, [sp, #16]
 800ed20:	4620      	mov	r0, r4
 800ed22:	f000 fdf7 	bl	800f914 <__lshift>
 800ed26:	4639      	mov	r1, r7
 800ed28:	9004      	str	r0, [sp, #16]
 800ed2a:	f000 fe47 	bl	800f9bc <__mcmp>
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	dc03      	bgt.n	800ed3a <_dtoa_r+0xa32>
 800ed32:	d1e0      	bne.n	800ecf6 <_dtoa_r+0x9ee>
 800ed34:	f018 0f01 	tst.w	r8, #1
 800ed38:	d0dd      	beq.n	800ecf6 <_dtoa_r+0x9ee>
 800ed3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed3e:	d1d8      	bne.n	800ecf2 <_dtoa_r+0x9ea>
 800ed40:	9b05      	ldr	r3, [sp, #20]
 800ed42:	9a05      	ldr	r2, [sp, #20]
 800ed44:	1c5d      	adds	r5, r3, #1
 800ed46:	2339      	movs	r3, #57	; 0x39
 800ed48:	7013      	strb	r3, [r2, #0]
 800ed4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed4e:	2b39      	cmp	r3, #57	; 0x39
 800ed50:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed54:	d04f      	beq.n	800edf6 <_dtoa_r+0xaee>
 800ed56:	3301      	adds	r3, #1
 800ed58:	7013      	strb	r3, [r2, #0]
 800ed5a:	e754      	b.n	800ec06 <_dtoa_r+0x8fe>
 800ed5c:	9a05      	ldr	r2, [sp, #20]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f102 0501 	add.w	r5, r2, #1
 800ed64:	dd06      	ble.n	800ed74 <_dtoa_r+0xa6c>
 800ed66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed6a:	d0e9      	beq.n	800ed40 <_dtoa_r+0xa38>
 800ed6c:	f108 0801 	add.w	r8, r8, #1
 800ed70:	9b05      	ldr	r3, [sp, #20]
 800ed72:	e7c2      	b.n	800ecfa <_dtoa_r+0x9f2>
 800ed74:	9a02      	ldr	r2, [sp, #8]
 800ed76:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ed7a:	eba5 030b 	sub.w	r3, r5, fp
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d021      	beq.n	800edc6 <_dtoa_r+0xabe>
 800ed82:	2300      	movs	r3, #0
 800ed84:	220a      	movs	r2, #10
 800ed86:	9904      	ldr	r1, [sp, #16]
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f000 fc0e 	bl	800f5aa <__multadd>
 800ed8e:	45b1      	cmp	r9, r6
 800ed90:	9004      	str	r0, [sp, #16]
 800ed92:	f04f 0300 	mov.w	r3, #0
 800ed96:	f04f 020a 	mov.w	r2, #10
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	d105      	bne.n	800edac <_dtoa_r+0xaa4>
 800eda0:	f000 fc03 	bl	800f5aa <__multadd>
 800eda4:	4681      	mov	r9, r0
 800eda6:	4606      	mov	r6, r0
 800eda8:	9505      	str	r5, [sp, #20]
 800edaa:	e776      	b.n	800ec9a <_dtoa_r+0x992>
 800edac:	f000 fbfd 	bl	800f5aa <__multadd>
 800edb0:	4631      	mov	r1, r6
 800edb2:	4681      	mov	r9, r0
 800edb4:	2300      	movs	r3, #0
 800edb6:	220a      	movs	r2, #10
 800edb8:	4620      	mov	r0, r4
 800edba:	f000 fbf6 	bl	800f5aa <__multadd>
 800edbe:	4606      	mov	r6, r0
 800edc0:	e7f2      	b.n	800eda8 <_dtoa_r+0xaa0>
 800edc2:	f04f 0900 	mov.w	r9, #0
 800edc6:	2201      	movs	r2, #1
 800edc8:	9904      	ldr	r1, [sp, #16]
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fda2 	bl	800f914 <__lshift>
 800edd0:	4639      	mov	r1, r7
 800edd2:	9004      	str	r0, [sp, #16]
 800edd4:	f000 fdf2 	bl	800f9bc <__mcmp>
 800edd8:	2800      	cmp	r0, #0
 800edda:	dcb6      	bgt.n	800ed4a <_dtoa_r+0xa42>
 800eddc:	d102      	bne.n	800ede4 <_dtoa_r+0xadc>
 800edde:	f018 0f01 	tst.w	r8, #1
 800ede2:	d1b2      	bne.n	800ed4a <_dtoa_r+0xa42>
 800ede4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ede8:	2b30      	cmp	r3, #48	; 0x30
 800edea:	f105 32ff 	add.w	r2, r5, #4294967295
 800edee:	f47f af0a 	bne.w	800ec06 <_dtoa_r+0x8fe>
 800edf2:	4615      	mov	r5, r2
 800edf4:	e7f6      	b.n	800ede4 <_dtoa_r+0xadc>
 800edf6:	4593      	cmp	fp, r2
 800edf8:	d105      	bne.n	800ee06 <_dtoa_r+0xafe>
 800edfa:	2331      	movs	r3, #49	; 0x31
 800edfc:	f10a 0a01 	add.w	sl, sl, #1
 800ee00:	f88b 3000 	strb.w	r3, [fp]
 800ee04:	e6ff      	b.n	800ec06 <_dtoa_r+0x8fe>
 800ee06:	4615      	mov	r5, r2
 800ee08:	e79f      	b.n	800ed4a <_dtoa_r+0xa42>
 800ee0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ee70 <_dtoa_r+0xb68>
 800ee0e:	e007      	b.n	800ee20 <_dtoa_r+0xb18>
 800ee10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee12:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ee74 <_dtoa_r+0xb6c>
 800ee16:	b11b      	cbz	r3, 800ee20 <_dtoa_r+0xb18>
 800ee18:	f10b 0308 	add.w	r3, fp, #8
 800ee1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	4658      	mov	r0, fp
 800ee22:	b017      	add	sp, #92	; 0x5c
 800ee24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee28:	9b06      	ldr	r3, [sp, #24]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	f77f ae35 	ble.w	800ea9a <_dtoa_r+0x792>
 800ee30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee32:	9307      	str	r3, [sp, #28]
 800ee34:	e649      	b.n	800eaca <_dtoa_r+0x7c2>
 800ee36:	9b02      	ldr	r3, [sp, #8]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dc03      	bgt.n	800ee44 <_dtoa_r+0xb3c>
 800ee3c:	9b06      	ldr	r3, [sp, #24]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	f73f aecc 	bgt.w	800ebdc <_dtoa_r+0x8d4>
 800ee44:	465d      	mov	r5, fp
 800ee46:	4639      	mov	r1, r7
 800ee48:	9804      	ldr	r0, [sp, #16]
 800ee4a:	f7ff f9cf 	bl	800e1ec <quorem>
 800ee4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee52:	f805 8b01 	strb.w	r8, [r5], #1
 800ee56:	9a02      	ldr	r2, [sp, #8]
 800ee58:	eba5 030b 	sub.w	r3, r5, fp
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	ddb0      	ble.n	800edc2 <_dtoa_r+0xaba>
 800ee60:	2300      	movs	r3, #0
 800ee62:	220a      	movs	r2, #10
 800ee64:	9904      	ldr	r1, [sp, #16]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 fb9f 	bl	800f5aa <__multadd>
 800ee6c:	9004      	str	r0, [sp, #16]
 800ee6e:	e7ea      	b.n	800ee46 <_dtoa_r+0xb3e>
 800ee70:	080102ec 	.word	0x080102ec
 800ee74:	08010368 	.word	0x08010368

0800ee78 <rshift>:
 800ee78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee7a:	6906      	ldr	r6, [r0, #16]
 800ee7c:	114b      	asrs	r3, r1, #5
 800ee7e:	429e      	cmp	r6, r3
 800ee80:	f100 0414 	add.w	r4, r0, #20
 800ee84:	dd30      	ble.n	800eee8 <rshift+0x70>
 800ee86:	f011 011f 	ands.w	r1, r1, #31
 800ee8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ee8e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ee92:	d108      	bne.n	800eea6 <rshift+0x2e>
 800ee94:	4621      	mov	r1, r4
 800ee96:	42b2      	cmp	r2, r6
 800ee98:	460b      	mov	r3, r1
 800ee9a:	d211      	bcs.n	800eec0 <rshift+0x48>
 800ee9c:	f852 3b04 	ldr.w	r3, [r2], #4
 800eea0:	f841 3b04 	str.w	r3, [r1], #4
 800eea4:	e7f7      	b.n	800ee96 <rshift+0x1e>
 800eea6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800eeaa:	f1c1 0c20 	rsb	ip, r1, #32
 800eeae:	40cd      	lsrs	r5, r1
 800eeb0:	3204      	adds	r2, #4
 800eeb2:	4623      	mov	r3, r4
 800eeb4:	42b2      	cmp	r2, r6
 800eeb6:	4617      	mov	r7, r2
 800eeb8:	d30c      	bcc.n	800eed4 <rshift+0x5c>
 800eeba:	601d      	str	r5, [r3, #0]
 800eebc:	b105      	cbz	r5, 800eec0 <rshift+0x48>
 800eebe:	3304      	adds	r3, #4
 800eec0:	1b1a      	subs	r2, r3, r4
 800eec2:	42a3      	cmp	r3, r4
 800eec4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eec8:	bf08      	it	eq
 800eeca:	2300      	moveq	r3, #0
 800eecc:	6102      	str	r2, [r0, #16]
 800eece:	bf08      	it	eq
 800eed0:	6143      	streq	r3, [r0, #20]
 800eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed4:	683f      	ldr	r7, [r7, #0]
 800eed6:	fa07 f70c 	lsl.w	r7, r7, ip
 800eeda:	433d      	orrs	r5, r7
 800eedc:	f843 5b04 	str.w	r5, [r3], #4
 800eee0:	f852 5b04 	ldr.w	r5, [r2], #4
 800eee4:	40cd      	lsrs	r5, r1
 800eee6:	e7e5      	b.n	800eeb4 <rshift+0x3c>
 800eee8:	4623      	mov	r3, r4
 800eeea:	e7e9      	b.n	800eec0 <rshift+0x48>

0800eeec <__hexdig_fun>:
 800eeec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eef0:	2b09      	cmp	r3, #9
 800eef2:	d802      	bhi.n	800eefa <__hexdig_fun+0xe>
 800eef4:	3820      	subs	r0, #32
 800eef6:	b2c0      	uxtb	r0, r0
 800eef8:	4770      	bx	lr
 800eefa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eefe:	2b05      	cmp	r3, #5
 800ef00:	d801      	bhi.n	800ef06 <__hexdig_fun+0x1a>
 800ef02:	3847      	subs	r0, #71	; 0x47
 800ef04:	e7f7      	b.n	800eef6 <__hexdig_fun+0xa>
 800ef06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef0a:	2b05      	cmp	r3, #5
 800ef0c:	d801      	bhi.n	800ef12 <__hexdig_fun+0x26>
 800ef0e:	3827      	subs	r0, #39	; 0x27
 800ef10:	e7f1      	b.n	800eef6 <__hexdig_fun+0xa>
 800ef12:	2000      	movs	r0, #0
 800ef14:	4770      	bx	lr

0800ef16 <__gethex>:
 800ef16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1a:	b08b      	sub	sp, #44	; 0x2c
 800ef1c:	468a      	mov	sl, r1
 800ef1e:	9002      	str	r0, [sp, #8]
 800ef20:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ef22:	9306      	str	r3, [sp, #24]
 800ef24:	4690      	mov	r8, r2
 800ef26:	f000 fad0 	bl	800f4ca <__localeconv_l>
 800ef2a:	6803      	ldr	r3, [r0, #0]
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7f1 f94e 	bl	80001d0 <strlen>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	9001      	str	r0, [sp, #4]
 800ef38:	4403      	add	r3, r0
 800ef3a:	f04f 0b00 	mov.w	fp, #0
 800ef3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ef42:	9307      	str	r3, [sp, #28]
 800ef44:	f8da 3000 	ldr.w	r3, [sl]
 800ef48:	3302      	adds	r3, #2
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef50:	2830      	cmp	r0, #48	; 0x30
 800ef52:	d06c      	beq.n	800f02e <__gethex+0x118>
 800ef54:	f7ff ffca 	bl	800eeec <__hexdig_fun>
 800ef58:	4604      	mov	r4, r0
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d16a      	bne.n	800f034 <__gethex+0x11e>
 800ef5e:	9a01      	ldr	r2, [sp, #4]
 800ef60:	9903      	ldr	r1, [sp, #12]
 800ef62:	4638      	mov	r0, r7
 800ef64:	f7fe fa60 	bl	800d428 <strncmp>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d166      	bne.n	800f03a <__gethex+0x124>
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	5cf8      	ldrb	r0, [r7, r3]
 800ef70:	18fe      	adds	r6, r7, r3
 800ef72:	f7ff ffbb 	bl	800eeec <__hexdig_fun>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d062      	beq.n	800f040 <__gethex+0x12a>
 800ef7a:	4633      	mov	r3, r6
 800ef7c:	7818      	ldrb	r0, [r3, #0]
 800ef7e:	2830      	cmp	r0, #48	; 0x30
 800ef80:	461f      	mov	r7, r3
 800ef82:	f103 0301 	add.w	r3, r3, #1
 800ef86:	d0f9      	beq.n	800ef7c <__gethex+0x66>
 800ef88:	f7ff ffb0 	bl	800eeec <__hexdig_fun>
 800ef8c:	fab0 f580 	clz	r5, r0
 800ef90:	096d      	lsrs	r5, r5, #5
 800ef92:	4634      	mov	r4, r6
 800ef94:	f04f 0b01 	mov.w	fp, #1
 800ef98:	463a      	mov	r2, r7
 800ef9a:	4616      	mov	r6, r2
 800ef9c:	3201      	adds	r2, #1
 800ef9e:	7830      	ldrb	r0, [r6, #0]
 800efa0:	f7ff ffa4 	bl	800eeec <__hexdig_fun>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d1f8      	bne.n	800ef9a <__gethex+0x84>
 800efa8:	9a01      	ldr	r2, [sp, #4]
 800efaa:	9903      	ldr	r1, [sp, #12]
 800efac:	4630      	mov	r0, r6
 800efae:	f7fe fa3b 	bl	800d428 <strncmp>
 800efb2:	b950      	cbnz	r0, 800efca <__gethex+0xb4>
 800efb4:	b954      	cbnz	r4, 800efcc <__gethex+0xb6>
 800efb6:	9b01      	ldr	r3, [sp, #4]
 800efb8:	18f4      	adds	r4, r6, r3
 800efba:	4622      	mov	r2, r4
 800efbc:	4616      	mov	r6, r2
 800efbe:	3201      	adds	r2, #1
 800efc0:	7830      	ldrb	r0, [r6, #0]
 800efc2:	f7ff ff93 	bl	800eeec <__hexdig_fun>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d1f8      	bne.n	800efbc <__gethex+0xa6>
 800efca:	b10c      	cbz	r4, 800efd0 <__gethex+0xba>
 800efcc:	1ba4      	subs	r4, r4, r6
 800efce:	00a4      	lsls	r4, r4, #2
 800efd0:	7833      	ldrb	r3, [r6, #0]
 800efd2:	2b50      	cmp	r3, #80	; 0x50
 800efd4:	d001      	beq.n	800efda <__gethex+0xc4>
 800efd6:	2b70      	cmp	r3, #112	; 0x70
 800efd8:	d140      	bne.n	800f05c <__gethex+0x146>
 800efda:	7873      	ldrb	r3, [r6, #1]
 800efdc:	2b2b      	cmp	r3, #43	; 0x2b
 800efde:	d031      	beq.n	800f044 <__gethex+0x12e>
 800efe0:	2b2d      	cmp	r3, #45	; 0x2d
 800efe2:	d033      	beq.n	800f04c <__gethex+0x136>
 800efe4:	1c71      	adds	r1, r6, #1
 800efe6:	f04f 0900 	mov.w	r9, #0
 800efea:	7808      	ldrb	r0, [r1, #0]
 800efec:	f7ff ff7e 	bl	800eeec <__hexdig_fun>
 800eff0:	1e43      	subs	r3, r0, #1
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	2b18      	cmp	r3, #24
 800eff6:	d831      	bhi.n	800f05c <__gethex+0x146>
 800eff8:	f1a0 0210 	sub.w	r2, r0, #16
 800effc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f000:	f7ff ff74 	bl	800eeec <__hexdig_fun>
 800f004:	1e43      	subs	r3, r0, #1
 800f006:	b2db      	uxtb	r3, r3
 800f008:	2b18      	cmp	r3, #24
 800f00a:	d922      	bls.n	800f052 <__gethex+0x13c>
 800f00c:	f1b9 0f00 	cmp.w	r9, #0
 800f010:	d000      	beq.n	800f014 <__gethex+0xfe>
 800f012:	4252      	negs	r2, r2
 800f014:	4414      	add	r4, r2
 800f016:	f8ca 1000 	str.w	r1, [sl]
 800f01a:	b30d      	cbz	r5, 800f060 <__gethex+0x14a>
 800f01c:	f1bb 0f00 	cmp.w	fp, #0
 800f020:	bf0c      	ite	eq
 800f022:	2706      	moveq	r7, #6
 800f024:	2700      	movne	r7, #0
 800f026:	4638      	mov	r0, r7
 800f028:	b00b      	add	sp, #44	; 0x2c
 800f02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02e:	f10b 0b01 	add.w	fp, fp, #1
 800f032:	e78a      	b.n	800ef4a <__gethex+0x34>
 800f034:	2500      	movs	r5, #0
 800f036:	462c      	mov	r4, r5
 800f038:	e7ae      	b.n	800ef98 <__gethex+0x82>
 800f03a:	463e      	mov	r6, r7
 800f03c:	2501      	movs	r5, #1
 800f03e:	e7c7      	b.n	800efd0 <__gethex+0xba>
 800f040:	4604      	mov	r4, r0
 800f042:	e7fb      	b.n	800f03c <__gethex+0x126>
 800f044:	f04f 0900 	mov.w	r9, #0
 800f048:	1cb1      	adds	r1, r6, #2
 800f04a:	e7ce      	b.n	800efea <__gethex+0xd4>
 800f04c:	f04f 0901 	mov.w	r9, #1
 800f050:	e7fa      	b.n	800f048 <__gethex+0x132>
 800f052:	230a      	movs	r3, #10
 800f054:	fb03 0202 	mla	r2, r3, r2, r0
 800f058:	3a10      	subs	r2, #16
 800f05a:	e7cf      	b.n	800effc <__gethex+0xe6>
 800f05c:	4631      	mov	r1, r6
 800f05e:	e7da      	b.n	800f016 <__gethex+0x100>
 800f060:	1bf3      	subs	r3, r6, r7
 800f062:	3b01      	subs	r3, #1
 800f064:	4629      	mov	r1, r5
 800f066:	2b07      	cmp	r3, #7
 800f068:	dc49      	bgt.n	800f0fe <__gethex+0x1e8>
 800f06a:	9802      	ldr	r0, [sp, #8]
 800f06c:	f000 fa52 	bl	800f514 <_Balloc>
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	f100 0914 	add.w	r9, r0, #20
 800f076:	f04f 0b00 	mov.w	fp, #0
 800f07a:	f1c3 0301 	rsb	r3, r3, #1
 800f07e:	4605      	mov	r5, r0
 800f080:	f8cd 9010 	str.w	r9, [sp, #16]
 800f084:	46da      	mov	sl, fp
 800f086:	9308      	str	r3, [sp, #32]
 800f088:	42b7      	cmp	r7, r6
 800f08a:	d33b      	bcc.n	800f104 <__gethex+0x1ee>
 800f08c:	9804      	ldr	r0, [sp, #16]
 800f08e:	f840 ab04 	str.w	sl, [r0], #4
 800f092:	eba0 0009 	sub.w	r0, r0, r9
 800f096:	1080      	asrs	r0, r0, #2
 800f098:	6128      	str	r0, [r5, #16]
 800f09a:	0147      	lsls	r7, r0, #5
 800f09c:	4650      	mov	r0, sl
 800f09e:	f000 fafd 	bl	800f69c <__hi0bits>
 800f0a2:	f8d8 6000 	ldr.w	r6, [r8]
 800f0a6:	1a3f      	subs	r7, r7, r0
 800f0a8:	42b7      	cmp	r7, r6
 800f0aa:	dd64      	ble.n	800f176 <__gethex+0x260>
 800f0ac:	1bbf      	subs	r7, r7, r6
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	f000 fe0d 	bl	800fcd0 <__any_on>
 800f0b6:	4682      	mov	sl, r0
 800f0b8:	b178      	cbz	r0, 800f0da <__gethex+0x1c4>
 800f0ba:	1e7b      	subs	r3, r7, #1
 800f0bc:	1159      	asrs	r1, r3, #5
 800f0be:	f003 021f 	and.w	r2, r3, #31
 800f0c2:	f04f 0a01 	mov.w	sl, #1
 800f0c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f0ca:	fa0a f202 	lsl.w	r2, sl, r2
 800f0ce:	420a      	tst	r2, r1
 800f0d0:	d003      	beq.n	800f0da <__gethex+0x1c4>
 800f0d2:	4553      	cmp	r3, sl
 800f0d4:	dc46      	bgt.n	800f164 <__gethex+0x24e>
 800f0d6:	f04f 0a02 	mov.w	sl, #2
 800f0da:	4639      	mov	r1, r7
 800f0dc:	4628      	mov	r0, r5
 800f0de:	f7ff fecb 	bl	800ee78 <rshift>
 800f0e2:	443c      	add	r4, r7
 800f0e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0e8:	42a3      	cmp	r3, r4
 800f0ea:	da52      	bge.n	800f192 <__gethex+0x27c>
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	9802      	ldr	r0, [sp, #8]
 800f0f0:	f000 fa44 	bl	800f57c <_Bfree>
 800f0f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	27a3      	movs	r7, #163	; 0xa3
 800f0fc:	e793      	b.n	800f026 <__gethex+0x110>
 800f0fe:	3101      	adds	r1, #1
 800f100:	105b      	asrs	r3, r3, #1
 800f102:	e7b0      	b.n	800f066 <__gethex+0x150>
 800f104:	1e73      	subs	r3, r6, #1
 800f106:	9305      	str	r3, [sp, #20]
 800f108:	9a07      	ldr	r2, [sp, #28]
 800f10a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f10e:	4293      	cmp	r3, r2
 800f110:	d018      	beq.n	800f144 <__gethex+0x22e>
 800f112:	f1bb 0f20 	cmp.w	fp, #32
 800f116:	d107      	bne.n	800f128 <__gethex+0x212>
 800f118:	9b04      	ldr	r3, [sp, #16]
 800f11a:	f8c3 a000 	str.w	sl, [r3]
 800f11e:	3304      	adds	r3, #4
 800f120:	f04f 0a00 	mov.w	sl, #0
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	46d3      	mov	fp, sl
 800f128:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f12c:	f7ff fede 	bl	800eeec <__hexdig_fun>
 800f130:	f000 000f 	and.w	r0, r0, #15
 800f134:	fa00 f00b 	lsl.w	r0, r0, fp
 800f138:	ea4a 0a00 	orr.w	sl, sl, r0
 800f13c:	f10b 0b04 	add.w	fp, fp, #4
 800f140:	9b05      	ldr	r3, [sp, #20]
 800f142:	e00d      	b.n	800f160 <__gethex+0x24a>
 800f144:	9b05      	ldr	r3, [sp, #20]
 800f146:	9a08      	ldr	r2, [sp, #32]
 800f148:	4413      	add	r3, r2
 800f14a:	42bb      	cmp	r3, r7
 800f14c:	d3e1      	bcc.n	800f112 <__gethex+0x1fc>
 800f14e:	4618      	mov	r0, r3
 800f150:	9a01      	ldr	r2, [sp, #4]
 800f152:	9903      	ldr	r1, [sp, #12]
 800f154:	9309      	str	r3, [sp, #36]	; 0x24
 800f156:	f7fe f967 	bl	800d428 <strncmp>
 800f15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d1d8      	bne.n	800f112 <__gethex+0x1fc>
 800f160:	461e      	mov	r6, r3
 800f162:	e791      	b.n	800f088 <__gethex+0x172>
 800f164:	1eb9      	subs	r1, r7, #2
 800f166:	4628      	mov	r0, r5
 800f168:	f000 fdb2 	bl	800fcd0 <__any_on>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d0b2      	beq.n	800f0d6 <__gethex+0x1c0>
 800f170:	f04f 0a03 	mov.w	sl, #3
 800f174:	e7b1      	b.n	800f0da <__gethex+0x1c4>
 800f176:	da09      	bge.n	800f18c <__gethex+0x276>
 800f178:	1bf7      	subs	r7, r6, r7
 800f17a:	4629      	mov	r1, r5
 800f17c:	463a      	mov	r2, r7
 800f17e:	9802      	ldr	r0, [sp, #8]
 800f180:	f000 fbc8 	bl	800f914 <__lshift>
 800f184:	1be4      	subs	r4, r4, r7
 800f186:	4605      	mov	r5, r0
 800f188:	f100 0914 	add.w	r9, r0, #20
 800f18c:	f04f 0a00 	mov.w	sl, #0
 800f190:	e7a8      	b.n	800f0e4 <__gethex+0x1ce>
 800f192:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f196:	42a0      	cmp	r0, r4
 800f198:	dd6a      	ble.n	800f270 <__gethex+0x35a>
 800f19a:	1b04      	subs	r4, r0, r4
 800f19c:	42a6      	cmp	r6, r4
 800f19e:	dc2e      	bgt.n	800f1fe <__gethex+0x2e8>
 800f1a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d022      	beq.n	800f1ee <__gethex+0x2d8>
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d024      	beq.n	800f1f6 <__gethex+0x2e0>
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d115      	bne.n	800f1dc <__gethex+0x2c6>
 800f1b0:	42a6      	cmp	r6, r4
 800f1b2:	d113      	bne.n	800f1dc <__gethex+0x2c6>
 800f1b4:	2e01      	cmp	r6, #1
 800f1b6:	dc0b      	bgt.n	800f1d0 <__gethex+0x2ba>
 800f1b8:	9a06      	ldr	r2, [sp, #24]
 800f1ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	612b      	str	r3, [r5, #16]
 800f1c4:	f8c9 3000 	str.w	r3, [r9]
 800f1c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1ca:	2762      	movs	r7, #98	; 0x62
 800f1cc:	601d      	str	r5, [r3, #0]
 800f1ce:	e72a      	b.n	800f026 <__gethex+0x110>
 800f1d0:	1e71      	subs	r1, r6, #1
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 fd7c 	bl	800fcd0 <__any_on>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d1ed      	bne.n	800f1b8 <__gethex+0x2a2>
 800f1dc:	4629      	mov	r1, r5
 800f1de:	9802      	ldr	r0, [sp, #8]
 800f1e0:	f000 f9cc 	bl	800f57c <_Bfree>
 800f1e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	6013      	str	r3, [r2, #0]
 800f1ea:	2750      	movs	r7, #80	; 0x50
 800f1ec:	e71b      	b.n	800f026 <__gethex+0x110>
 800f1ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d0e1      	beq.n	800f1b8 <__gethex+0x2a2>
 800f1f4:	e7f2      	b.n	800f1dc <__gethex+0x2c6>
 800f1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1dd      	bne.n	800f1b8 <__gethex+0x2a2>
 800f1fc:	e7ee      	b.n	800f1dc <__gethex+0x2c6>
 800f1fe:	1e67      	subs	r7, r4, #1
 800f200:	f1ba 0f00 	cmp.w	sl, #0
 800f204:	d131      	bne.n	800f26a <__gethex+0x354>
 800f206:	b127      	cbz	r7, 800f212 <__gethex+0x2fc>
 800f208:	4639      	mov	r1, r7
 800f20a:	4628      	mov	r0, r5
 800f20c:	f000 fd60 	bl	800fcd0 <__any_on>
 800f210:	4682      	mov	sl, r0
 800f212:	117a      	asrs	r2, r7, #5
 800f214:	2301      	movs	r3, #1
 800f216:	f007 071f 	and.w	r7, r7, #31
 800f21a:	fa03 f707 	lsl.w	r7, r3, r7
 800f21e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f222:	4621      	mov	r1, r4
 800f224:	421f      	tst	r7, r3
 800f226:	4628      	mov	r0, r5
 800f228:	bf18      	it	ne
 800f22a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f22e:	1b36      	subs	r6, r6, r4
 800f230:	f7ff fe22 	bl	800ee78 <rshift>
 800f234:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f238:	2702      	movs	r7, #2
 800f23a:	f1ba 0f00 	cmp.w	sl, #0
 800f23e:	d048      	beq.n	800f2d2 <__gethex+0x3bc>
 800f240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f244:	2b02      	cmp	r3, #2
 800f246:	d015      	beq.n	800f274 <__gethex+0x35e>
 800f248:	2b03      	cmp	r3, #3
 800f24a:	d017      	beq.n	800f27c <__gethex+0x366>
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d109      	bne.n	800f264 <__gethex+0x34e>
 800f250:	f01a 0f02 	tst.w	sl, #2
 800f254:	d006      	beq.n	800f264 <__gethex+0x34e>
 800f256:	f8d9 3000 	ldr.w	r3, [r9]
 800f25a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f25e:	f01a 0f01 	tst.w	sl, #1
 800f262:	d10e      	bne.n	800f282 <__gethex+0x36c>
 800f264:	f047 0710 	orr.w	r7, r7, #16
 800f268:	e033      	b.n	800f2d2 <__gethex+0x3bc>
 800f26a:	f04f 0a01 	mov.w	sl, #1
 800f26e:	e7d0      	b.n	800f212 <__gethex+0x2fc>
 800f270:	2701      	movs	r7, #1
 800f272:	e7e2      	b.n	800f23a <__gethex+0x324>
 800f274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f276:	f1c3 0301 	rsb	r3, r3, #1
 800f27a:	9315      	str	r3, [sp, #84]	; 0x54
 800f27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d0f0      	beq.n	800f264 <__gethex+0x34e>
 800f282:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f286:	f105 0314 	add.w	r3, r5, #20
 800f28a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f28e:	eb03 010a 	add.w	r1, r3, sl
 800f292:	f04f 0c00 	mov.w	ip, #0
 800f296:	4618      	mov	r0, r3
 800f298:	f853 2b04 	ldr.w	r2, [r3], #4
 800f29c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f2a0:	d01c      	beq.n	800f2dc <__gethex+0x3c6>
 800f2a2:	3201      	adds	r2, #1
 800f2a4:	6002      	str	r2, [r0, #0]
 800f2a6:	2f02      	cmp	r7, #2
 800f2a8:	f105 0314 	add.w	r3, r5, #20
 800f2ac:	d138      	bne.n	800f320 <__gethex+0x40a>
 800f2ae:	f8d8 2000 	ldr.w	r2, [r8]
 800f2b2:	3a01      	subs	r2, #1
 800f2b4:	42b2      	cmp	r2, r6
 800f2b6:	d10a      	bne.n	800f2ce <__gethex+0x3b8>
 800f2b8:	1171      	asrs	r1, r6, #5
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f006 061f 	and.w	r6, r6, #31
 800f2c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2c4:	fa02 f606 	lsl.w	r6, r2, r6
 800f2c8:	421e      	tst	r6, r3
 800f2ca:	bf18      	it	ne
 800f2cc:	4617      	movne	r7, r2
 800f2ce:	f047 0720 	orr.w	r7, r7, #32
 800f2d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2d4:	601d      	str	r5, [r3, #0]
 800f2d6:	9b06      	ldr	r3, [sp, #24]
 800f2d8:	601c      	str	r4, [r3, #0]
 800f2da:	e6a4      	b.n	800f026 <__gethex+0x110>
 800f2dc:	4299      	cmp	r1, r3
 800f2de:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2e2:	d8d8      	bhi.n	800f296 <__gethex+0x380>
 800f2e4:	68ab      	ldr	r3, [r5, #8]
 800f2e6:	4599      	cmp	r9, r3
 800f2e8:	db12      	blt.n	800f310 <__gethex+0x3fa>
 800f2ea:	6869      	ldr	r1, [r5, #4]
 800f2ec:	9802      	ldr	r0, [sp, #8]
 800f2ee:	3101      	adds	r1, #1
 800f2f0:	f000 f910 	bl	800f514 <_Balloc>
 800f2f4:	692a      	ldr	r2, [r5, #16]
 800f2f6:	3202      	adds	r2, #2
 800f2f8:	f105 010c 	add.w	r1, r5, #12
 800f2fc:	4683      	mov	fp, r0
 800f2fe:	0092      	lsls	r2, r2, #2
 800f300:	300c      	adds	r0, #12
 800f302:	f7fd f961 	bl	800c5c8 <memcpy>
 800f306:	4629      	mov	r1, r5
 800f308:	9802      	ldr	r0, [sp, #8]
 800f30a:	f000 f937 	bl	800f57c <_Bfree>
 800f30e:	465d      	mov	r5, fp
 800f310:	692b      	ldr	r3, [r5, #16]
 800f312:	1c5a      	adds	r2, r3, #1
 800f314:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f318:	612a      	str	r2, [r5, #16]
 800f31a:	2201      	movs	r2, #1
 800f31c:	615a      	str	r2, [r3, #20]
 800f31e:	e7c2      	b.n	800f2a6 <__gethex+0x390>
 800f320:	692a      	ldr	r2, [r5, #16]
 800f322:	454a      	cmp	r2, r9
 800f324:	dd0b      	ble.n	800f33e <__gethex+0x428>
 800f326:	2101      	movs	r1, #1
 800f328:	4628      	mov	r0, r5
 800f32a:	f7ff fda5 	bl	800ee78 <rshift>
 800f32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f332:	3401      	adds	r4, #1
 800f334:	42a3      	cmp	r3, r4
 800f336:	f6ff aed9 	blt.w	800f0ec <__gethex+0x1d6>
 800f33a:	2701      	movs	r7, #1
 800f33c:	e7c7      	b.n	800f2ce <__gethex+0x3b8>
 800f33e:	f016 061f 	ands.w	r6, r6, #31
 800f342:	d0fa      	beq.n	800f33a <__gethex+0x424>
 800f344:	449a      	add	sl, r3
 800f346:	f1c6 0620 	rsb	r6, r6, #32
 800f34a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f34e:	f000 f9a5 	bl	800f69c <__hi0bits>
 800f352:	42b0      	cmp	r0, r6
 800f354:	dbe7      	blt.n	800f326 <__gethex+0x410>
 800f356:	e7f0      	b.n	800f33a <__gethex+0x424>

0800f358 <L_shift>:
 800f358:	f1c2 0208 	rsb	r2, r2, #8
 800f35c:	0092      	lsls	r2, r2, #2
 800f35e:	b570      	push	{r4, r5, r6, lr}
 800f360:	f1c2 0620 	rsb	r6, r2, #32
 800f364:	6843      	ldr	r3, [r0, #4]
 800f366:	6804      	ldr	r4, [r0, #0]
 800f368:	fa03 f506 	lsl.w	r5, r3, r6
 800f36c:	432c      	orrs	r4, r5
 800f36e:	40d3      	lsrs	r3, r2
 800f370:	6004      	str	r4, [r0, #0]
 800f372:	f840 3f04 	str.w	r3, [r0, #4]!
 800f376:	4288      	cmp	r0, r1
 800f378:	d3f4      	bcc.n	800f364 <L_shift+0xc>
 800f37a:	bd70      	pop	{r4, r5, r6, pc}

0800f37c <__match>:
 800f37c:	b530      	push	{r4, r5, lr}
 800f37e:	6803      	ldr	r3, [r0, #0]
 800f380:	3301      	adds	r3, #1
 800f382:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f386:	b914      	cbnz	r4, 800f38e <__match+0x12>
 800f388:	6003      	str	r3, [r0, #0]
 800f38a:	2001      	movs	r0, #1
 800f38c:	bd30      	pop	{r4, r5, pc}
 800f38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f396:	2d19      	cmp	r5, #25
 800f398:	bf98      	it	ls
 800f39a:	3220      	addls	r2, #32
 800f39c:	42a2      	cmp	r2, r4
 800f39e:	d0f0      	beq.n	800f382 <__match+0x6>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e7f3      	b.n	800f38c <__match+0x10>

0800f3a4 <__hexnan>:
 800f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a8:	680b      	ldr	r3, [r1, #0]
 800f3aa:	6801      	ldr	r1, [r0, #0]
 800f3ac:	115f      	asrs	r7, r3, #5
 800f3ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f3b2:	f013 031f 	ands.w	r3, r3, #31
 800f3b6:	b087      	sub	sp, #28
 800f3b8:	bf18      	it	ne
 800f3ba:	3704      	addne	r7, #4
 800f3bc:	2500      	movs	r5, #0
 800f3be:	1f3e      	subs	r6, r7, #4
 800f3c0:	4682      	mov	sl, r0
 800f3c2:	4690      	mov	r8, r2
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	f847 5c04 	str.w	r5, [r7, #-4]
 800f3ca:	46b1      	mov	r9, r6
 800f3cc:	4634      	mov	r4, r6
 800f3ce:	9502      	str	r5, [sp, #8]
 800f3d0:	46ab      	mov	fp, r5
 800f3d2:	784a      	ldrb	r2, [r1, #1]
 800f3d4:	1c4b      	adds	r3, r1, #1
 800f3d6:	9303      	str	r3, [sp, #12]
 800f3d8:	b342      	cbz	r2, 800f42c <__hexnan+0x88>
 800f3da:	4610      	mov	r0, r2
 800f3dc:	9105      	str	r1, [sp, #20]
 800f3de:	9204      	str	r2, [sp, #16]
 800f3e0:	f7ff fd84 	bl	800eeec <__hexdig_fun>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d143      	bne.n	800f470 <__hexnan+0xcc>
 800f3e8:	9a04      	ldr	r2, [sp, #16]
 800f3ea:	9905      	ldr	r1, [sp, #20]
 800f3ec:	2a20      	cmp	r2, #32
 800f3ee:	d818      	bhi.n	800f422 <__hexnan+0x7e>
 800f3f0:	9b02      	ldr	r3, [sp, #8]
 800f3f2:	459b      	cmp	fp, r3
 800f3f4:	dd13      	ble.n	800f41e <__hexnan+0x7a>
 800f3f6:	454c      	cmp	r4, r9
 800f3f8:	d206      	bcs.n	800f408 <__hexnan+0x64>
 800f3fa:	2d07      	cmp	r5, #7
 800f3fc:	dc04      	bgt.n	800f408 <__hexnan+0x64>
 800f3fe:	462a      	mov	r2, r5
 800f400:	4649      	mov	r1, r9
 800f402:	4620      	mov	r0, r4
 800f404:	f7ff ffa8 	bl	800f358 <L_shift>
 800f408:	4544      	cmp	r4, r8
 800f40a:	d944      	bls.n	800f496 <__hexnan+0xf2>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f1a4 0904 	sub.w	r9, r4, #4
 800f412:	f844 3c04 	str.w	r3, [r4, #-4]
 800f416:	f8cd b008 	str.w	fp, [sp, #8]
 800f41a:	464c      	mov	r4, r9
 800f41c:	461d      	mov	r5, r3
 800f41e:	9903      	ldr	r1, [sp, #12]
 800f420:	e7d7      	b.n	800f3d2 <__hexnan+0x2e>
 800f422:	2a29      	cmp	r2, #41	; 0x29
 800f424:	d14a      	bne.n	800f4bc <__hexnan+0x118>
 800f426:	3102      	adds	r1, #2
 800f428:	f8ca 1000 	str.w	r1, [sl]
 800f42c:	f1bb 0f00 	cmp.w	fp, #0
 800f430:	d044      	beq.n	800f4bc <__hexnan+0x118>
 800f432:	454c      	cmp	r4, r9
 800f434:	d206      	bcs.n	800f444 <__hexnan+0xa0>
 800f436:	2d07      	cmp	r5, #7
 800f438:	dc04      	bgt.n	800f444 <__hexnan+0xa0>
 800f43a:	462a      	mov	r2, r5
 800f43c:	4649      	mov	r1, r9
 800f43e:	4620      	mov	r0, r4
 800f440:	f7ff ff8a 	bl	800f358 <L_shift>
 800f444:	4544      	cmp	r4, r8
 800f446:	d928      	bls.n	800f49a <__hexnan+0xf6>
 800f448:	4643      	mov	r3, r8
 800f44a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f44e:	f843 2b04 	str.w	r2, [r3], #4
 800f452:	42a6      	cmp	r6, r4
 800f454:	d2f9      	bcs.n	800f44a <__hexnan+0xa6>
 800f456:	2200      	movs	r2, #0
 800f458:	f843 2b04 	str.w	r2, [r3], #4
 800f45c:	429e      	cmp	r6, r3
 800f45e:	d2fb      	bcs.n	800f458 <__hexnan+0xb4>
 800f460:	6833      	ldr	r3, [r6, #0]
 800f462:	b91b      	cbnz	r3, 800f46c <__hexnan+0xc8>
 800f464:	4546      	cmp	r6, r8
 800f466:	d127      	bne.n	800f4b8 <__hexnan+0x114>
 800f468:	2301      	movs	r3, #1
 800f46a:	6033      	str	r3, [r6, #0]
 800f46c:	2005      	movs	r0, #5
 800f46e:	e026      	b.n	800f4be <__hexnan+0x11a>
 800f470:	3501      	adds	r5, #1
 800f472:	2d08      	cmp	r5, #8
 800f474:	f10b 0b01 	add.w	fp, fp, #1
 800f478:	dd06      	ble.n	800f488 <__hexnan+0xe4>
 800f47a:	4544      	cmp	r4, r8
 800f47c:	d9cf      	bls.n	800f41e <__hexnan+0x7a>
 800f47e:	2300      	movs	r3, #0
 800f480:	f844 3c04 	str.w	r3, [r4, #-4]
 800f484:	2501      	movs	r5, #1
 800f486:	3c04      	subs	r4, #4
 800f488:	6822      	ldr	r2, [r4, #0]
 800f48a:	f000 000f 	and.w	r0, r0, #15
 800f48e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f492:	6020      	str	r0, [r4, #0]
 800f494:	e7c3      	b.n	800f41e <__hexnan+0x7a>
 800f496:	2508      	movs	r5, #8
 800f498:	e7c1      	b.n	800f41e <__hexnan+0x7a>
 800f49a:	9b01      	ldr	r3, [sp, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d0df      	beq.n	800f460 <__hexnan+0xbc>
 800f4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a4:	f1c3 0320 	rsb	r3, r3, #32
 800f4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f4b0:	401a      	ands	r2, r3
 800f4b2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f4b6:	e7d3      	b.n	800f460 <__hexnan+0xbc>
 800f4b8:	3e04      	subs	r6, #4
 800f4ba:	e7d1      	b.n	800f460 <__hexnan+0xbc>
 800f4bc:	2004      	movs	r0, #4
 800f4be:	b007      	add	sp, #28
 800f4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4c4 <__locale_ctype_ptr_l>:
 800f4c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f4c8:	4770      	bx	lr

0800f4ca <__localeconv_l>:
 800f4ca:	30f0      	adds	r0, #240	; 0xf0
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <_localeconv_r>:
 800f4d0:	4b04      	ldr	r3, [pc, #16]	; (800f4e4 <_localeconv_r+0x14>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	6a18      	ldr	r0, [r3, #32]
 800f4d6:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <_localeconv_r+0x18>)
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	bf08      	it	eq
 800f4dc:	4618      	moveq	r0, r3
 800f4de:	30f0      	adds	r0, #240	; 0xf0
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	20000180 	.word	0x20000180
 800f4e8:	200001e4 	.word	0x200001e4

0800f4ec <__ascii_mbtowc>:
 800f4ec:	b082      	sub	sp, #8
 800f4ee:	b901      	cbnz	r1, 800f4f2 <__ascii_mbtowc+0x6>
 800f4f0:	a901      	add	r1, sp, #4
 800f4f2:	b142      	cbz	r2, 800f506 <__ascii_mbtowc+0x1a>
 800f4f4:	b14b      	cbz	r3, 800f50a <__ascii_mbtowc+0x1e>
 800f4f6:	7813      	ldrb	r3, [r2, #0]
 800f4f8:	600b      	str	r3, [r1, #0]
 800f4fa:	7812      	ldrb	r2, [r2, #0]
 800f4fc:	1c10      	adds	r0, r2, #0
 800f4fe:	bf18      	it	ne
 800f500:	2001      	movne	r0, #1
 800f502:	b002      	add	sp, #8
 800f504:	4770      	bx	lr
 800f506:	4610      	mov	r0, r2
 800f508:	e7fb      	b.n	800f502 <__ascii_mbtowc+0x16>
 800f50a:	f06f 0001 	mvn.w	r0, #1
 800f50e:	e7f8      	b.n	800f502 <__ascii_mbtowc+0x16>

0800f510 <__malloc_lock>:
 800f510:	4770      	bx	lr

0800f512 <__malloc_unlock>:
 800f512:	4770      	bx	lr

0800f514 <_Balloc>:
 800f514:	b570      	push	{r4, r5, r6, lr}
 800f516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f518:	4604      	mov	r4, r0
 800f51a:	460e      	mov	r6, r1
 800f51c:	b93d      	cbnz	r5, 800f52e <_Balloc+0x1a>
 800f51e:	2010      	movs	r0, #16
 800f520:	f7fd f842 	bl	800c5a8 <malloc>
 800f524:	6260      	str	r0, [r4, #36]	; 0x24
 800f526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f52a:	6005      	str	r5, [r0, #0]
 800f52c:	60c5      	str	r5, [r0, #12]
 800f52e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f530:	68eb      	ldr	r3, [r5, #12]
 800f532:	b183      	cbz	r3, 800f556 <_Balloc+0x42>
 800f534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f53c:	b9b8      	cbnz	r0, 800f56e <_Balloc+0x5a>
 800f53e:	2101      	movs	r1, #1
 800f540:	fa01 f506 	lsl.w	r5, r1, r6
 800f544:	1d6a      	adds	r2, r5, #5
 800f546:	0092      	lsls	r2, r2, #2
 800f548:	4620      	mov	r0, r4
 800f54a:	f000 fbe2 	bl	800fd12 <_calloc_r>
 800f54e:	b160      	cbz	r0, 800f56a <_Balloc+0x56>
 800f550:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f554:	e00e      	b.n	800f574 <_Balloc+0x60>
 800f556:	2221      	movs	r2, #33	; 0x21
 800f558:	2104      	movs	r1, #4
 800f55a:	4620      	mov	r0, r4
 800f55c:	f000 fbd9 	bl	800fd12 <_calloc_r>
 800f560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f562:	60e8      	str	r0, [r5, #12]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1e4      	bne.n	800f534 <_Balloc+0x20>
 800f56a:	2000      	movs	r0, #0
 800f56c:	bd70      	pop	{r4, r5, r6, pc}
 800f56e:	6802      	ldr	r2, [r0, #0]
 800f570:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f574:	2300      	movs	r3, #0
 800f576:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f57a:	e7f7      	b.n	800f56c <_Balloc+0x58>

0800f57c <_Bfree>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f580:	4606      	mov	r6, r0
 800f582:	460d      	mov	r5, r1
 800f584:	b93c      	cbnz	r4, 800f596 <_Bfree+0x1a>
 800f586:	2010      	movs	r0, #16
 800f588:	f7fd f80e 	bl	800c5a8 <malloc>
 800f58c:	6270      	str	r0, [r6, #36]	; 0x24
 800f58e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f592:	6004      	str	r4, [r0, #0]
 800f594:	60c4      	str	r4, [r0, #12]
 800f596:	b13d      	cbz	r5, 800f5a8 <_Bfree+0x2c>
 800f598:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f59a:	686a      	ldr	r2, [r5, #4]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5a2:	6029      	str	r1, [r5, #0]
 800f5a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}

0800f5aa <__multadd>:
 800f5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ae:	690d      	ldr	r5, [r1, #16]
 800f5b0:	461f      	mov	r7, r3
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	f101 0c14 	add.w	ip, r1, #20
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f8dc 0000 	ldr.w	r0, [ip]
 800f5c0:	b281      	uxth	r1, r0
 800f5c2:	fb02 7101 	mla	r1, r2, r1, r7
 800f5c6:	0c0f      	lsrs	r7, r1, #16
 800f5c8:	0c00      	lsrs	r0, r0, #16
 800f5ca:	fb02 7000 	mla	r0, r2, r0, r7
 800f5ce:	b289      	uxth	r1, r1
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f5dc:	f84c 1b04 	str.w	r1, [ip], #4
 800f5e0:	dcec      	bgt.n	800f5bc <__multadd+0x12>
 800f5e2:	b1d7      	cbz	r7, 800f61a <__multadd+0x70>
 800f5e4:	68a3      	ldr	r3, [r4, #8]
 800f5e6:	42ab      	cmp	r3, r5
 800f5e8:	dc12      	bgt.n	800f610 <__multadd+0x66>
 800f5ea:	6861      	ldr	r1, [r4, #4]
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	3101      	adds	r1, #1
 800f5f0:	f7ff ff90 	bl	800f514 <_Balloc>
 800f5f4:	6922      	ldr	r2, [r4, #16]
 800f5f6:	3202      	adds	r2, #2
 800f5f8:	f104 010c 	add.w	r1, r4, #12
 800f5fc:	4680      	mov	r8, r0
 800f5fe:	0092      	lsls	r2, r2, #2
 800f600:	300c      	adds	r0, #12
 800f602:	f7fc ffe1 	bl	800c5c8 <memcpy>
 800f606:	4621      	mov	r1, r4
 800f608:	4630      	mov	r0, r6
 800f60a:	f7ff ffb7 	bl	800f57c <_Bfree>
 800f60e:	4644      	mov	r4, r8
 800f610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f614:	3501      	adds	r5, #1
 800f616:	615f      	str	r7, [r3, #20]
 800f618:	6125      	str	r5, [r4, #16]
 800f61a:	4620      	mov	r0, r4
 800f61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f620 <__s2b>:
 800f620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f624:	460c      	mov	r4, r1
 800f626:	4615      	mov	r5, r2
 800f628:	461f      	mov	r7, r3
 800f62a:	2209      	movs	r2, #9
 800f62c:	3308      	adds	r3, #8
 800f62e:	4606      	mov	r6, r0
 800f630:	fb93 f3f2 	sdiv	r3, r3, r2
 800f634:	2100      	movs	r1, #0
 800f636:	2201      	movs	r2, #1
 800f638:	429a      	cmp	r2, r3
 800f63a:	db20      	blt.n	800f67e <__s2b+0x5e>
 800f63c:	4630      	mov	r0, r6
 800f63e:	f7ff ff69 	bl	800f514 <_Balloc>
 800f642:	9b08      	ldr	r3, [sp, #32]
 800f644:	6143      	str	r3, [r0, #20]
 800f646:	2d09      	cmp	r5, #9
 800f648:	f04f 0301 	mov.w	r3, #1
 800f64c:	6103      	str	r3, [r0, #16]
 800f64e:	dd19      	ble.n	800f684 <__s2b+0x64>
 800f650:	f104 0809 	add.w	r8, r4, #9
 800f654:	46c1      	mov	r9, r8
 800f656:	442c      	add	r4, r5
 800f658:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f65c:	4601      	mov	r1, r0
 800f65e:	3b30      	subs	r3, #48	; 0x30
 800f660:	220a      	movs	r2, #10
 800f662:	4630      	mov	r0, r6
 800f664:	f7ff ffa1 	bl	800f5aa <__multadd>
 800f668:	45a1      	cmp	r9, r4
 800f66a:	d1f5      	bne.n	800f658 <__s2b+0x38>
 800f66c:	eb08 0405 	add.w	r4, r8, r5
 800f670:	3c08      	subs	r4, #8
 800f672:	1b2d      	subs	r5, r5, r4
 800f674:	1963      	adds	r3, r4, r5
 800f676:	42bb      	cmp	r3, r7
 800f678:	db07      	blt.n	800f68a <__s2b+0x6a>
 800f67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f67e:	0052      	lsls	r2, r2, #1
 800f680:	3101      	adds	r1, #1
 800f682:	e7d9      	b.n	800f638 <__s2b+0x18>
 800f684:	340a      	adds	r4, #10
 800f686:	2509      	movs	r5, #9
 800f688:	e7f3      	b.n	800f672 <__s2b+0x52>
 800f68a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f68e:	4601      	mov	r1, r0
 800f690:	3b30      	subs	r3, #48	; 0x30
 800f692:	220a      	movs	r2, #10
 800f694:	4630      	mov	r0, r6
 800f696:	f7ff ff88 	bl	800f5aa <__multadd>
 800f69a:	e7eb      	b.n	800f674 <__s2b+0x54>

0800f69c <__hi0bits>:
 800f69c:	0c02      	lsrs	r2, r0, #16
 800f69e:	0412      	lsls	r2, r2, #16
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	b9b2      	cbnz	r2, 800f6d2 <__hi0bits+0x36>
 800f6a4:	0403      	lsls	r3, r0, #16
 800f6a6:	2010      	movs	r0, #16
 800f6a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f6ac:	bf04      	itt	eq
 800f6ae:	021b      	lsleq	r3, r3, #8
 800f6b0:	3008      	addeq	r0, #8
 800f6b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f6b6:	bf04      	itt	eq
 800f6b8:	011b      	lsleq	r3, r3, #4
 800f6ba:	3004      	addeq	r0, #4
 800f6bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f6c0:	bf04      	itt	eq
 800f6c2:	009b      	lsleq	r3, r3, #2
 800f6c4:	3002      	addeq	r0, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	db06      	blt.n	800f6d8 <__hi0bits+0x3c>
 800f6ca:	005b      	lsls	r3, r3, #1
 800f6cc:	d503      	bpl.n	800f6d6 <__hi0bits+0x3a>
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	4770      	bx	lr
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	e7e8      	b.n	800f6a8 <__hi0bits+0xc>
 800f6d6:	2020      	movs	r0, #32
 800f6d8:	4770      	bx	lr

0800f6da <__lo0bits>:
 800f6da:	6803      	ldr	r3, [r0, #0]
 800f6dc:	f013 0207 	ands.w	r2, r3, #7
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	d00b      	beq.n	800f6fc <__lo0bits+0x22>
 800f6e4:	07da      	lsls	r2, r3, #31
 800f6e6:	d423      	bmi.n	800f730 <__lo0bits+0x56>
 800f6e8:	0798      	lsls	r0, r3, #30
 800f6ea:	bf49      	itett	mi
 800f6ec:	085b      	lsrmi	r3, r3, #1
 800f6ee:	089b      	lsrpl	r3, r3, #2
 800f6f0:	2001      	movmi	r0, #1
 800f6f2:	600b      	strmi	r3, [r1, #0]
 800f6f4:	bf5c      	itt	pl
 800f6f6:	600b      	strpl	r3, [r1, #0]
 800f6f8:	2002      	movpl	r0, #2
 800f6fa:	4770      	bx	lr
 800f6fc:	b298      	uxth	r0, r3
 800f6fe:	b9a8      	cbnz	r0, 800f72c <__lo0bits+0x52>
 800f700:	0c1b      	lsrs	r3, r3, #16
 800f702:	2010      	movs	r0, #16
 800f704:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f708:	bf04      	itt	eq
 800f70a:	0a1b      	lsreq	r3, r3, #8
 800f70c:	3008      	addeq	r0, #8
 800f70e:	071a      	lsls	r2, r3, #28
 800f710:	bf04      	itt	eq
 800f712:	091b      	lsreq	r3, r3, #4
 800f714:	3004      	addeq	r0, #4
 800f716:	079a      	lsls	r2, r3, #30
 800f718:	bf04      	itt	eq
 800f71a:	089b      	lsreq	r3, r3, #2
 800f71c:	3002      	addeq	r0, #2
 800f71e:	07da      	lsls	r2, r3, #31
 800f720:	d402      	bmi.n	800f728 <__lo0bits+0x4e>
 800f722:	085b      	lsrs	r3, r3, #1
 800f724:	d006      	beq.n	800f734 <__lo0bits+0x5a>
 800f726:	3001      	adds	r0, #1
 800f728:	600b      	str	r3, [r1, #0]
 800f72a:	4770      	bx	lr
 800f72c:	4610      	mov	r0, r2
 800f72e:	e7e9      	b.n	800f704 <__lo0bits+0x2a>
 800f730:	2000      	movs	r0, #0
 800f732:	4770      	bx	lr
 800f734:	2020      	movs	r0, #32
 800f736:	4770      	bx	lr

0800f738 <__i2b>:
 800f738:	b510      	push	{r4, lr}
 800f73a:	460c      	mov	r4, r1
 800f73c:	2101      	movs	r1, #1
 800f73e:	f7ff fee9 	bl	800f514 <_Balloc>
 800f742:	2201      	movs	r2, #1
 800f744:	6144      	str	r4, [r0, #20]
 800f746:	6102      	str	r2, [r0, #16]
 800f748:	bd10      	pop	{r4, pc}

0800f74a <__multiply>:
 800f74a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74e:	4614      	mov	r4, r2
 800f750:	690a      	ldr	r2, [r1, #16]
 800f752:	6923      	ldr	r3, [r4, #16]
 800f754:	429a      	cmp	r2, r3
 800f756:	bfb8      	it	lt
 800f758:	460b      	movlt	r3, r1
 800f75a:	4688      	mov	r8, r1
 800f75c:	bfbc      	itt	lt
 800f75e:	46a0      	movlt	r8, r4
 800f760:	461c      	movlt	r4, r3
 800f762:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f766:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f76e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f772:	eb07 0609 	add.w	r6, r7, r9
 800f776:	42b3      	cmp	r3, r6
 800f778:	bfb8      	it	lt
 800f77a:	3101      	addlt	r1, #1
 800f77c:	f7ff feca 	bl	800f514 <_Balloc>
 800f780:	f100 0514 	add.w	r5, r0, #20
 800f784:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f788:	462b      	mov	r3, r5
 800f78a:	2200      	movs	r2, #0
 800f78c:	4573      	cmp	r3, lr
 800f78e:	d316      	bcc.n	800f7be <__multiply+0x74>
 800f790:	f104 0214 	add.w	r2, r4, #20
 800f794:	f108 0114 	add.w	r1, r8, #20
 800f798:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f79c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	9201      	str	r2, [sp, #4]
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d80c      	bhi.n	800f7c4 <__multiply+0x7a>
 800f7aa:	2e00      	cmp	r6, #0
 800f7ac:	dd03      	ble.n	800f7b6 <__multiply+0x6c>
 800f7ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d05d      	beq.n	800f872 <__multiply+0x128>
 800f7b6:	6106      	str	r6, [r0, #16]
 800f7b8:	b003      	add	sp, #12
 800f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7be:	f843 2b04 	str.w	r2, [r3], #4
 800f7c2:	e7e3      	b.n	800f78c <__multiply+0x42>
 800f7c4:	f8b2 b000 	ldrh.w	fp, [r2]
 800f7c8:	f1bb 0f00 	cmp.w	fp, #0
 800f7cc:	d023      	beq.n	800f816 <__multiply+0xcc>
 800f7ce:	4689      	mov	r9, r1
 800f7d0:	46ac      	mov	ip, r5
 800f7d2:	f04f 0800 	mov.w	r8, #0
 800f7d6:	f859 4b04 	ldr.w	r4, [r9], #4
 800f7da:	f8dc a000 	ldr.w	sl, [ip]
 800f7de:	b2a3      	uxth	r3, r4
 800f7e0:	fa1f fa8a 	uxth.w	sl, sl
 800f7e4:	fb0b a303 	mla	r3, fp, r3, sl
 800f7e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f7ec:	f8dc 4000 	ldr.w	r4, [ip]
 800f7f0:	4443      	add	r3, r8
 800f7f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f7f6:	fb0b 840a 	mla	r4, fp, sl, r8
 800f7fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f7fe:	46e2      	mov	sl, ip
 800f800:	b29b      	uxth	r3, r3
 800f802:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f806:	454f      	cmp	r7, r9
 800f808:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f80c:	f84a 3b04 	str.w	r3, [sl], #4
 800f810:	d82b      	bhi.n	800f86a <__multiply+0x120>
 800f812:	f8cc 8004 	str.w	r8, [ip, #4]
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f81c:	3204      	adds	r2, #4
 800f81e:	f1ba 0f00 	cmp.w	sl, #0
 800f822:	d020      	beq.n	800f866 <__multiply+0x11c>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	4689      	mov	r9, r1
 800f828:	46a8      	mov	r8, r5
 800f82a:	f04f 0b00 	mov.w	fp, #0
 800f82e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f832:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f836:	fb0a 440c 	mla	r4, sl, ip, r4
 800f83a:	445c      	add	r4, fp
 800f83c:	46c4      	mov	ip, r8
 800f83e:	b29b      	uxth	r3, r3
 800f840:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f844:	f84c 3b04 	str.w	r3, [ip], #4
 800f848:	f859 3b04 	ldr.w	r3, [r9], #4
 800f84c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f850:	0c1b      	lsrs	r3, r3, #16
 800f852:	fb0a b303 	mla	r3, sl, r3, fp
 800f856:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f85a:	454f      	cmp	r7, r9
 800f85c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f860:	d805      	bhi.n	800f86e <__multiply+0x124>
 800f862:	f8c8 3004 	str.w	r3, [r8, #4]
 800f866:	3504      	adds	r5, #4
 800f868:	e79b      	b.n	800f7a2 <__multiply+0x58>
 800f86a:	46d4      	mov	ip, sl
 800f86c:	e7b3      	b.n	800f7d6 <__multiply+0x8c>
 800f86e:	46e0      	mov	r8, ip
 800f870:	e7dd      	b.n	800f82e <__multiply+0xe4>
 800f872:	3e01      	subs	r6, #1
 800f874:	e799      	b.n	800f7aa <__multiply+0x60>
	...

0800f878 <__pow5mult>:
 800f878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f87c:	4615      	mov	r5, r2
 800f87e:	f012 0203 	ands.w	r2, r2, #3
 800f882:	4606      	mov	r6, r0
 800f884:	460f      	mov	r7, r1
 800f886:	d007      	beq.n	800f898 <__pow5mult+0x20>
 800f888:	3a01      	subs	r2, #1
 800f88a:	4c21      	ldr	r4, [pc, #132]	; (800f910 <__pow5mult+0x98>)
 800f88c:	2300      	movs	r3, #0
 800f88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f892:	f7ff fe8a 	bl	800f5aa <__multadd>
 800f896:	4607      	mov	r7, r0
 800f898:	10ad      	asrs	r5, r5, #2
 800f89a:	d035      	beq.n	800f908 <__pow5mult+0x90>
 800f89c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f89e:	b93c      	cbnz	r4, 800f8b0 <__pow5mult+0x38>
 800f8a0:	2010      	movs	r0, #16
 800f8a2:	f7fc fe81 	bl	800c5a8 <malloc>
 800f8a6:	6270      	str	r0, [r6, #36]	; 0x24
 800f8a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8ac:	6004      	str	r4, [r0, #0]
 800f8ae:	60c4      	str	r4, [r0, #12]
 800f8b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8b8:	b94c      	cbnz	r4, 800f8ce <__pow5mult+0x56>
 800f8ba:	f240 2171 	movw	r1, #625	; 0x271
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f7ff ff3a 	bl	800f738 <__i2b>
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	6003      	str	r3, [r0, #0]
 800f8ce:	f04f 0800 	mov.w	r8, #0
 800f8d2:	07eb      	lsls	r3, r5, #31
 800f8d4:	d50a      	bpl.n	800f8ec <__pow5mult+0x74>
 800f8d6:	4639      	mov	r1, r7
 800f8d8:	4622      	mov	r2, r4
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7ff ff35 	bl	800f74a <__multiply>
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	4681      	mov	r9, r0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7ff fe49 	bl	800f57c <_Bfree>
 800f8ea:	464f      	mov	r7, r9
 800f8ec:	106d      	asrs	r5, r5, #1
 800f8ee:	d00b      	beq.n	800f908 <__pow5mult+0x90>
 800f8f0:	6820      	ldr	r0, [r4, #0]
 800f8f2:	b938      	cbnz	r0, 800f904 <__pow5mult+0x8c>
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7ff ff26 	bl	800f74a <__multiply>
 800f8fe:	6020      	str	r0, [r4, #0]
 800f900:	f8c0 8000 	str.w	r8, [r0]
 800f904:	4604      	mov	r4, r0
 800f906:	e7e4      	b.n	800f8d2 <__pow5mult+0x5a>
 800f908:	4638      	mov	r0, r7
 800f90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f90e:	bf00      	nop
 800f910:	08010470 	.word	0x08010470

0800f914 <__lshift>:
 800f914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f918:	460c      	mov	r4, r1
 800f91a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f91e:	6923      	ldr	r3, [r4, #16]
 800f920:	6849      	ldr	r1, [r1, #4]
 800f922:	eb0a 0903 	add.w	r9, sl, r3
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	4607      	mov	r7, r0
 800f92a:	4616      	mov	r6, r2
 800f92c:	f109 0501 	add.w	r5, r9, #1
 800f930:	42ab      	cmp	r3, r5
 800f932:	db32      	blt.n	800f99a <__lshift+0x86>
 800f934:	4638      	mov	r0, r7
 800f936:	f7ff fded 	bl	800f514 <_Balloc>
 800f93a:	2300      	movs	r3, #0
 800f93c:	4680      	mov	r8, r0
 800f93e:	f100 0114 	add.w	r1, r0, #20
 800f942:	461a      	mov	r2, r3
 800f944:	4553      	cmp	r3, sl
 800f946:	db2b      	blt.n	800f9a0 <__lshift+0x8c>
 800f948:	6920      	ldr	r0, [r4, #16]
 800f94a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f94e:	f104 0314 	add.w	r3, r4, #20
 800f952:	f016 021f 	ands.w	r2, r6, #31
 800f956:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f95a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f95e:	d025      	beq.n	800f9ac <__lshift+0x98>
 800f960:	f1c2 0e20 	rsb	lr, r2, #32
 800f964:	2000      	movs	r0, #0
 800f966:	681e      	ldr	r6, [r3, #0]
 800f968:	468a      	mov	sl, r1
 800f96a:	4096      	lsls	r6, r2
 800f96c:	4330      	orrs	r0, r6
 800f96e:	f84a 0b04 	str.w	r0, [sl], #4
 800f972:	f853 0b04 	ldr.w	r0, [r3], #4
 800f976:	459c      	cmp	ip, r3
 800f978:	fa20 f00e 	lsr.w	r0, r0, lr
 800f97c:	d814      	bhi.n	800f9a8 <__lshift+0x94>
 800f97e:	6048      	str	r0, [r1, #4]
 800f980:	b108      	cbz	r0, 800f986 <__lshift+0x72>
 800f982:	f109 0502 	add.w	r5, r9, #2
 800f986:	3d01      	subs	r5, #1
 800f988:	4638      	mov	r0, r7
 800f98a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f98e:	4621      	mov	r1, r4
 800f990:	f7ff fdf4 	bl	800f57c <_Bfree>
 800f994:	4640      	mov	r0, r8
 800f996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99a:	3101      	adds	r1, #1
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	e7c7      	b.n	800f930 <__lshift+0x1c>
 800f9a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	e7cd      	b.n	800f944 <__lshift+0x30>
 800f9a8:	4651      	mov	r1, sl
 800f9aa:	e7dc      	b.n	800f966 <__lshift+0x52>
 800f9ac:	3904      	subs	r1, #4
 800f9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9b6:	459c      	cmp	ip, r3
 800f9b8:	d8f9      	bhi.n	800f9ae <__lshift+0x9a>
 800f9ba:	e7e4      	b.n	800f986 <__lshift+0x72>

0800f9bc <__mcmp>:
 800f9bc:	6903      	ldr	r3, [r0, #16]
 800f9be:	690a      	ldr	r2, [r1, #16]
 800f9c0:	1a9b      	subs	r3, r3, r2
 800f9c2:	b530      	push	{r4, r5, lr}
 800f9c4:	d10c      	bne.n	800f9e0 <__mcmp+0x24>
 800f9c6:	0092      	lsls	r2, r2, #2
 800f9c8:	3014      	adds	r0, #20
 800f9ca:	3114      	adds	r1, #20
 800f9cc:	1884      	adds	r4, r0, r2
 800f9ce:	4411      	add	r1, r2
 800f9d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9d8:	4295      	cmp	r5, r2
 800f9da:	d003      	beq.n	800f9e4 <__mcmp+0x28>
 800f9dc:	d305      	bcc.n	800f9ea <__mcmp+0x2e>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	bd30      	pop	{r4, r5, pc}
 800f9e4:	42a0      	cmp	r0, r4
 800f9e6:	d3f3      	bcc.n	800f9d0 <__mcmp+0x14>
 800f9e8:	e7fa      	b.n	800f9e0 <__mcmp+0x24>
 800f9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ee:	e7f7      	b.n	800f9e0 <__mcmp+0x24>

0800f9f0 <__mdiff>:
 800f9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f4:	460d      	mov	r5, r1
 800f9f6:	4607      	mov	r7, r0
 800f9f8:	4611      	mov	r1, r2
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	f7ff ffdd 	bl	800f9bc <__mcmp>
 800fa02:	1e06      	subs	r6, r0, #0
 800fa04:	d108      	bne.n	800fa18 <__mdiff+0x28>
 800fa06:	4631      	mov	r1, r6
 800fa08:	4638      	mov	r0, r7
 800fa0a:	f7ff fd83 	bl	800f514 <_Balloc>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa18:	bfa4      	itt	ge
 800fa1a:	4623      	movge	r3, r4
 800fa1c:	462c      	movge	r4, r5
 800fa1e:	4638      	mov	r0, r7
 800fa20:	6861      	ldr	r1, [r4, #4]
 800fa22:	bfa6      	itte	ge
 800fa24:	461d      	movge	r5, r3
 800fa26:	2600      	movge	r6, #0
 800fa28:	2601      	movlt	r6, #1
 800fa2a:	f7ff fd73 	bl	800f514 <_Balloc>
 800fa2e:	692b      	ldr	r3, [r5, #16]
 800fa30:	60c6      	str	r6, [r0, #12]
 800fa32:	6926      	ldr	r6, [r4, #16]
 800fa34:	f105 0914 	add.w	r9, r5, #20
 800fa38:	f104 0214 	add.w	r2, r4, #20
 800fa3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fa40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fa44:	f100 0514 	add.w	r5, r0, #20
 800fa48:	f04f 0e00 	mov.w	lr, #0
 800fa4c:	f852 ab04 	ldr.w	sl, [r2], #4
 800fa50:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa54:	fa1e f18a 	uxtah	r1, lr, sl
 800fa58:	b2a3      	uxth	r3, r4
 800fa5a:	1ac9      	subs	r1, r1, r3
 800fa5c:	0c23      	lsrs	r3, r4, #16
 800fa5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fa62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fa66:	b289      	uxth	r1, r1
 800fa68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fa6c:	45c8      	cmp	r8, r9
 800fa6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fa72:	4694      	mov	ip, r2
 800fa74:	f845 3b04 	str.w	r3, [r5], #4
 800fa78:	d8e8      	bhi.n	800fa4c <__mdiff+0x5c>
 800fa7a:	45bc      	cmp	ip, r7
 800fa7c:	d304      	bcc.n	800fa88 <__mdiff+0x98>
 800fa7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fa82:	b183      	cbz	r3, 800faa6 <__mdiff+0xb6>
 800fa84:	6106      	str	r6, [r0, #16]
 800fa86:	e7c5      	b.n	800fa14 <__mdiff+0x24>
 800fa88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fa8c:	fa1e f381 	uxtah	r3, lr, r1
 800fa90:	141a      	asrs	r2, r3, #16
 800fa92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800faa0:	f845 3b04 	str.w	r3, [r5], #4
 800faa4:	e7e9      	b.n	800fa7a <__mdiff+0x8a>
 800faa6:	3e01      	subs	r6, #1
 800faa8:	e7e9      	b.n	800fa7e <__mdiff+0x8e>
	...

0800faac <__ulp>:
 800faac:	4b12      	ldr	r3, [pc, #72]	; (800faf8 <__ulp+0x4c>)
 800faae:	ee10 2a90 	vmov	r2, s1
 800fab2:	401a      	ands	r2, r3
 800fab4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fab8:	2b00      	cmp	r3, #0
 800faba:	dd04      	ble.n	800fac6 <__ulp+0x1a>
 800fabc:	2000      	movs	r0, #0
 800fabe:	4619      	mov	r1, r3
 800fac0:	ec41 0b10 	vmov	d0, r0, r1
 800fac4:	4770      	bx	lr
 800fac6:	425b      	negs	r3, r3
 800fac8:	151b      	asrs	r3, r3, #20
 800faca:	2b13      	cmp	r3, #19
 800facc:	f04f 0000 	mov.w	r0, #0
 800fad0:	f04f 0100 	mov.w	r1, #0
 800fad4:	dc04      	bgt.n	800fae0 <__ulp+0x34>
 800fad6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fada:	fa42 f103 	asr.w	r1, r2, r3
 800fade:	e7ef      	b.n	800fac0 <__ulp+0x14>
 800fae0:	3b14      	subs	r3, #20
 800fae2:	2b1e      	cmp	r3, #30
 800fae4:	f04f 0201 	mov.w	r2, #1
 800fae8:	bfda      	itte	le
 800faea:	f1c3 031f 	rsble	r3, r3, #31
 800faee:	fa02 f303 	lslle.w	r3, r2, r3
 800faf2:	4613      	movgt	r3, r2
 800faf4:	4618      	mov	r0, r3
 800faf6:	e7e3      	b.n	800fac0 <__ulp+0x14>
 800faf8:	7ff00000 	.word	0x7ff00000

0800fafc <__b2d>:
 800fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafe:	6905      	ldr	r5, [r0, #16]
 800fb00:	f100 0714 	add.w	r7, r0, #20
 800fb04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb08:	1f2e      	subs	r6, r5, #4
 800fb0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f7ff fdc4 	bl	800f69c <__hi0bits>
 800fb14:	f1c0 0320 	rsb	r3, r0, #32
 800fb18:	280a      	cmp	r0, #10
 800fb1a:	600b      	str	r3, [r1, #0]
 800fb1c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fb94 <__b2d+0x98>
 800fb20:	dc14      	bgt.n	800fb4c <__b2d+0x50>
 800fb22:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb26:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb2a:	42b7      	cmp	r7, r6
 800fb2c:	ea41 030c 	orr.w	r3, r1, ip
 800fb30:	bf34      	ite	cc
 800fb32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb36:	2100      	movcs	r1, #0
 800fb38:	3015      	adds	r0, #21
 800fb3a:	fa04 f000 	lsl.w	r0, r4, r0
 800fb3e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb42:	ea40 0201 	orr.w	r2, r0, r1
 800fb46:	ec43 2b10 	vmov	d0, r2, r3
 800fb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb4c:	42b7      	cmp	r7, r6
 800fb4e:	bf3a      	itte	cc
 800fb50:	f1a5 0608 	subcc.w	r6, r5, #8
 800fb54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb58:	2100      	movcs	r1, #0
 800fb5a:	380b      	subs	r0, #11
 800fb5c:	d015      	beq.n	800fb8a <__b2d+0x8e>
 800fb5e:	4084      	lsls	r4, r0
 800fb60:	f1c0 0520 	rsb	r5, r0, #32
 800fb64:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fb68:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fb6c:	42be      	cmp	r6, r7
 800fb6e:	fa21 fc05 	lsr.w	ip, r1, r5
 800fb72:	ea44 030c 	orr.w	r3, r4, ip
 800fb76:	bf8c      	ite	hi
 800fb78:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fb7c:	2400      	movls	r4, #0
 800fb7e:	fa01 f000 	lsl.w	r0, r1, r0
 800fb82:	40ec      	lsrs	r4, r5
 800fb84:	ea40 0204 	orr.w	r2, r0, r4
 800fb88:	e7dd      	b.n	800fb46 <__b2d+0x4a>
 800fb8a:	ea44 030c 	orr.w	r3, r4, ip
 800fb8e:	460a      	mov	r2, r1
 800fb90:	e7d9      	b.n	800fb46 <__b2d+0x4a>
 800fb92:	bf00      	nop
 800fb94:	3ff00000 	.word	0x3ff00000

0800fb98 <__d2b>:
 800fb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	460e      	mov	r6, r1
 800fb9e:	2101      	movs	r1, #1
 800fba0:	ec59 8b10 	vmov	r8, r9, d0
 800fba4:	4615      	mov	r5, r2
 800fba6:	f7ff fcb5 	bl	800f514 <_Balloc>
 800fbaa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fbae:	4607      	mov	r7, r0
 800fbb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fbb4:	bb34      	cbnz	r4, 800fc04 <__d2b+0x6c>
 800fbb6:	9301      	str	r3, [sp, #4]
 800fbb8:	f1b8 0300 	subs.w	r3, r8, #0
 800fbbc:	d027      	beq.n	800fc0e <__d2b+0x76>
 800fbbe:	a802      	add	r0, sp, #8
 800fbc0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fbc4:	f7ff fd89 	bl	800f6da <__lo0bits>
 800fbc8:	9900      	ldr	r1, [sp, #0]
 800fbca:	b1f0      	cbz	r0, 800fc0a <__d2b+0x72>
 800fbcc:	9a01      	ldr	r2, [sp, #4]
 800fbce:	f1c0 0320 	rsb	r3, r0, #32
 800fbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd6:	430b      	orrs	r3, r1
 800fbd8:	40c2      	lsrs	r2, r0
 800fbda:	617b      	str	r3, [r7, #20]
 800fbdc:	9201      	str	r2, [sp, #4]
 800fbde:	9b01      	ldr	r3, [sp, #4]
 800fbe0:	61bb      	str	r3, [r7, #24]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	bf14      	ite	ne
 800fbe6:	2102      	movne	r1, #2
 800fbe8:	2101      	moveq	r1, #1
 800fbea:	6139      	str	r1, [r7, #16]
 800fbec:	b1c4      	cbz	r4, 800fc20 <__d2b+0x88>
 800fbee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fbf2:	4404      	add	r4, r0
 800fbf4:	6034      	str	r4, [r6, #0]
 800fbf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbfa:	6028      	str	r0, [r5, #0]
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	b003      	add	sp, #12
 800fc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc08:	e7d5      	b.n	800fbb6 <__d2b+0x1e>
 800fc0a:	6179      	str	r1, [r7, #20]
 800fc0c:	e7e7      	b.n	800fbde <__d2b+0x46>
 800fc0e:	a801      	add	r0, sp, #4
 800fc10:	f7ff fd63 	bl	800f6da <__lo0bits>
 800fc14:	9b01      	ldr	r3, [sp, #4]
 800fc16:	617b      	str	r3, [r7, #20]
 800fc18:	2101      	movs	r1, #1
 800fc1a:	6139      	str	r1, [r7, #16]
 800fc1c:	3020      	adds	r0, #32
 800fc1e:	e7e5      	b.n	800fbec <__d2b+0x54>
 800fc20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fc24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc28:	6030      	str	r0, [r6, #0]
 800fc2a:	6918      	ldr	r0, [r3, #16]
 800fc2c:	f7ff fd36 	bl	800f69c <__hi0bits>
 800fc30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fc34:	e7e1      	b.n	800fbfa <__d2b+0x62>

0800fc36 <__ratio>:
 800fc36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3a:	4688      	mov	r8, r1
 800fc3c:	4669      	mov	r1, sp
 800fc3e:	4681      	mov	r9, r0
 800fc40:	f7ff ff5c 	bl	800fafc <__b2d>
 800fc44:	a901      	add	r1, sp, #4
 800fc46:	4640      	mov	r0, r8
 800fc48:	ec57 6b10 	vmov	r6, r7, d0
 800fc4c:	f7ff ff56 	bl	800fafc <__b2d>
 800fc50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc58:	eba3 0c02 	sub.w	ip, r3, r2
 800fc5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc60:	1a9b      	subs	r3, r3, r2
 800fc62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fc66:	ec5b ab10 	vmov	sl, fp, d0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	bfce      	itee	gt
 800fc6e:	463a      	movgt	r2, r7
 800fc70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fc74:	465a      	movle	r2, fp
 800fc76:	4659      	mov	r1, fp
 800fc78:	463d      	mov	r5, r7
 800fc7a:	bfd4      	ite	le
 800fc7c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fc80:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fc84:	4630      	mov	r0, r6
 800fc86:	ee10 2a10 	vmov	r2, s0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	f7f0 fddd 	bl	800084c <__aeabi_ddiv>
 800fc92:	ec41 0b10 	vmov	d0, r0, r1
 800fc96:	b003      	add	sp, #12
 800fc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc9c <__copybits>:
 800fc9c:	3901      	subs	r1, #1
 800fc9e:	b510      	push	{r4, lr}
 800fca0:	1149      	asrs	r1, r1, #5
 800fca2:	6914      	ldr	r4, [r2, #16]
 800fca4:	3101      	adds	r1, #1
 800fca6:	f102 0314 	add.w	r3, r2, #20
 800fcaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcb2:	42a3      	cmp	r3, r4
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	d303      	bcc.n	800fcc0 <__copybits+0x24>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	428a      	cmp	r2, r1
 800fcbc:	d305      	bcc.n	800fcca <__copybits+0x2e>
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc4:	f840 2b04 	str.w	r2, [r0], #4
 800fcc8:	e7f3      	b.n	800fcb2 <__copybits+0x16>
 800fcca:	f842 3b04 	str.w	r3, [r2], #4
 800fcce:	e7f4      	b.n	800fcba <__copybits+0x1e>

0800fcd0 <__any_on>:
 800fcd0:	f100 0214 	add.w	r2, r0, #20
 800fcd4:	6900      	ldr	r0, [r0, #16]
 800fcd6:	114b      	asrs	r3, r1, #5
 800fcd8:	4298      	cmp	r0, r3
 800fcda:	b510      	push	{r4, lr}
 800fcdc:	db11      	blt.n	800fd02 <__any_on+0x32>
 800fcde:	dd0a      	ble.n	800fcf6 <__any_on+0x26>
 800fce0:	f011 011f 	ands.w	r1, r1, #31
 800fce4:	d007      	beq.n	800fcf6 <__any_on+0x26>
 800fce6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fcea:	fa24 f001 	lsr.w	r0, r4, r1
 800fcee:	fa00 f101 	lsl.w	r1, r0, r1
 800fcf2:	428c      	cmp	r4, r1
 800fcf4:	d10b      	bne.n	800fd0e <__any_on+0x3e>
 800fcf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d803      	bhi.n	800fd06 <__any_on+0x36>
 800fcfe:	2000      	movs	r0, #0
 800fd00:	bd10      	pop	{r4, pc}
 800fd02:	4603      	mov	r3, r0
 800fd04:	e7f7      	b.n	800fcf6 <__any_on+0x26>
 800fd06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd0a:	2900      	cmp	r1, #0
 800fd0c:	d0f5      	beq.n	800fcfa <__any_on+0x2a>
 800fd0e:	2001      	movs	r0, #1
 800fd10:	e7f6      	b.n	800fd00 <__any_on+0x30>

0800fd12 <_calloc_r>:
 800fd12:	b538      	push	{r3, r4, r5, lr}
 800fd14:	fb02 f401 	mul.w	r4, r2, r1
 800fd18:	4621      	mov	r1, r4
 800fd1a:	f7fc fcb7 	bl	800c68c <_malloc_r>
 800fd1e:	4605      	mov	r5, r0
 800fd20:	b118      	cbz	r0, 800fd2a <_calloc_r+0x18>
 800fd22:	4622      	mov	r2, r4
 800fd24:	2100      	movs	r1, #0
 800fd26:	f7fc fc5a 	bl	800c5de <memset>
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	bd38      	pop	{r3, r4, r5, pc}

0800fd2e <__ssputs_r>:
 800fd2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd32:	688e      	ldr	r6, [r1, #8]
 800fd34:	429e      	cmp	r6, r3
 800fd36:	4682      	mov	sl, r0
 800fd38:	460c      	mov	r4, r1
 800fd3a:	4690      	mov	r8, r2
 800fd3c:	4699      	mov	r9, r3
 800fd3e:	d837      	bhi.n	800fdb0 <__ssputs_r+0x82>
 800fd40:	898a      	ldrh	r2, [r1, #12]
 800fd42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd46:	d031      	beq.n	800fdac <__ssputs_r+0x7e>
 800fd48:	6825      	ldr	r5, [r4, #0]
 800fd4a:	6909      	ldr	r1, [r1, #16]
 800fd4c:	1a6f      	subs	r7, r5, r1
 800fd4e:	6965      	ldr	r5, [r4, #20]
 800fd50:	2302      	movs	r3, #2
 800fd52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd56:	fb95 f5f3 	sdiv	r5, r5, r3
 800fd5a:	f109 0301 	add.w	r3, r9, #1
 800fd5e:	443b      	add	r3, r7
 800fd60:	429d      	cmp	r5, r3
 800fd62:	bf38      	it	cc
 800fd64:	461d      	movcc	r5, r3
 800fd66:	0553      	lsls	r3, r2, #21
 800fd68:	d530      	bpl.n	800fdcc <__ssputs_r+0x9e>
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	f7fc fc8e 	bl	800c68c <_malloc_r>
 800fd70:	4606      	mov	r6, r0
 800fd72:	b950      	cbnz	r0, 800fd8a <__ssputs_r+0x5c>
 800fd74:	230c      	movs	r3, #12
 800fd76:	f8ca 3000 	str.w	r3, [sl]
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd80:	81a3      	strh	r3, [r4, #12]
 800fd82:	f04f 30ff 	mov.w	r0, #4294967295
 800fd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd8a:	463a      	mov	r2, r7
 800fd8c:	6921      	ldr	r1, [r4, #16]
 800fd8e:	f7fc fc1b 	bl	800c5c8 <memcpy>
 800fd92:	89a3      	ldrh	r3, [r4, #12]
 800fd94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9c:	81a3      	strh	r3, [r4, #12]
 800fd9e:	6126      	str	r6, [r4, #16]
 800fda0:	6165      	str	r5, [r4, #20]
 800fda2:	443e      	add	r6, r7
 800fda4:	1bed      	subs	r5, r5, r7
 800fda6:	6026      	str	r6, [r4, #0]
 800fda8:	60a5      	str	r5, [r4, #8]
 800fdaa:	464e      	mov	r6, r9
 800fdac:	454e      	cmp	r6, r9
 800fdae:	d900      	bls.n	800fdb2 <__ssputs_r+0x84>
 800fdb0:	464e      	mov	r6, r9
 800fdb2:	4632      	mov	r2, r6
 800fdb4:	4641      	mov	r1, r8
 800fdb6:	6820      	ldr	r0, [r4, #0]
 800fdb8:	f000 f919 	bl	800ffee <memmove>
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	1b9b      	subs	r3, r3, r6
 800fdc0:	60a3      	str	r3, [r4, #8]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	441e      	add	r6, r3
 800fdc6:	6026      	str	r6, [r4, #0]
 800fdc8:	2000      	movs	r0, #0
 800fdca:	e7dc      	b.n	800fd86 <__ssputs_r+0x58>
 800fdcc:	462a      	mov	r2, r5
 800fdce:	f000 f927 	bl	8010020 <_realloc_r>
 800fdd2:	4606      	mov	r6, r0
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d1e2      	bne.n	800fd9e <__ssputs_r+0x70>
 800fdd8:	6921      	ldr	r1, [r4, #16]
 800fdda:	4650      	mov	r0, sl
 800fddc:	f7fc fc08 	bl	800c5f0 <_free_r>
 800fde0:	e7c8      	b.n	800fd74 <__ssputs_r+0x46>
	...

0800fde4 <_svfiprintf_r>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	461d      	mov	r5, r3
 800fdea:	898b      	ldrh	r3, [r1, #12]
 800fdec:	061f      	lsls	r7, r3, #24
 800fdee:	b09d      	sub	sp, #116	; 0x74
 800fdf0:	4680      	mov	r8, r0
 800fdf2:	460c      	mov	r4, r1
 800fdf4:	4616      	mov	r6, r2
 800fdf6:	d50f      	bpl.n	800fe18 <_svfiprintf_r+0x34>
 800fdf8:	690b      	ldr	r3, [r1, #16]
 800fdfa:	b96b      	cbnz	r3, 800fe18 <_svfiprintf_r+0x34>
 800fdfc:	2140      	movs	r1, #64	; 0x40
 800fdfe:	f7fc fc45 	bl	800c68c <_malloc_r>
 800fe02:	6020      	str	r0, [r4, #0]
 800fe04:	6120      	str	r0, [r4, #16]
 800fe06:	b928      	cbnz	r0, 800fe14 <_svfiprintf_r+0x30>
 800fe08:	230c      	movs	r3, #12
 800fe0a:	f8c8 3000 	str.w	r3, [r8]
 800fe0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe12:	e0c8      	b.n	800ffa6 <_svfiprintf_r+0x1c2>
 800fe14:	2340      	movs	r3, #64	; 0x40
 800fe16:	6163      	str	r3, [r4, #20]
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe1c:	2320      	movs	r3, #32
 800fe1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe22:	2330      	movs	r3, #48	; 0x30
 800fe24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe28:	9503      	str	r5, [sp, #12]
 800fe2a:	f04f 0b01 	mov.w	fp, #1
 800fe2e:	4637      	mov	r7, r6
 800fe30:	463d      	mov	r5, r7
 800fe32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe36:	b10b      	cbz	r3, 800fe3c <_svfiprintf_r+0x58>
 800fe38:	2b25      	cmp	r3, #37	; 0x25
 800fe3a:	d13e      	bne.n	800feba <_svfiprintf_r+0xd6>
 800fe3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800fe40:	d00b      	beq.n	800fe5a <_svfiprintf_r+0x76>
 800fe42:	4653      	mov	r3, sl
 800fe44:	4632      	mov	r2, r6
 800fe46:	4621      	mov	r1, r4
 800fe48:	4640      	mov	r0, r8
 800fe4a:	f7ff ff70 	bl	800fd2e <__ssputs_r>
 800fe4e:	3001      	adds	r0, #1
 800fe50:	f000 80a4 	beq.w	800ff9c <_svfiprintf_r+0x1b8>
 800fe54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe56:	4453      	add	r3, sl
 800fe58:	9309      	str	r3, [sp, #36]	; 0x24
 800fe5a:	783b      	ldrb	r3, [r7, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 809d 	beq.w	800ff9c <_svfiprintf_r+0x1b8>
 800fe62:	2300      	movs	r3, #0
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295
 800fe68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe6c:	9304      	str	r3, [sp, #16]
 800fe6e:	9307      	str	r3, [sp, #28]
 800fe70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe74:	931a      	str	r3, [sp, #104]	; 0x68
 800fe76:	462f      	mov	r7, r5
 800fe78:	2205      	movs	r2, #5
 800fe7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fe7e:	4850      	ldr	r0, [pc, #320]	; (800ffc0 <_svfiprintf_r+0x1dc>)
 800fe80:	f7f0 f9ae 	bl	80001e0 <memchr>
 800fe84:	9b04      	ldr	r3, [sp, #16]
 800fe86:	b9d0      	cbnz	r0, 800febe <_svfiprintf_r+0xda>
 800fe88:	06d9      	lsls	r1, r3, #27
 800fe8a:	bf44      	itt	mi
 800fe8c:	2220      	movmi	r2, #32
 800fe8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe92:	071a      	lsls	r2, r3, #28
 800fe94:	bf44      	itt	mi
 800fe96:	222b      	movmi	r2, #43	; 0x2b
 800fe98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fe9c:	782a      	ldrb	r2, [r5, #0]
 800fe9e:	2a2a      	cmp	r2, #42	; 0x2a
 800fea0:	d015      	beq.n	800fece <_svfiprintf_r+0xea>
 800fea2:	9a07      	ldr	r2, [sp, #28]
 800fea4:	462f      	mov	r7, r5
 800fea6:	2000      	movs	r0, #0
 800fea8:	250a      	movs	r5, #10
 800feaa:	4639      	mov	r1, r7
 800feac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feb0:	3b30      	subs	r3, #48	; 0x30
 800feb2:	2b09      	cmp	r3, #9
 800feb4:	d94d      	bls.n	800ff52 <_svfiprintf_r+0x16e>
 800feb6:	b1b8      	cbz	r0, 800fee8 <_svfiprintf_r+0x104>
 800feb8:	e00f      	b.n	800feda <_svfiprintf_r+0xf6>
 800feba:	462f      	mov	r7, r5
 800febc:	e7b8      	b.n	800fe30 <_svfiprintf_r+0x4c>
 800febe:	4a40      	ldr	r2, [pc, #256]	; (800ffc0 <_svfiprintf_r+0x1dc>)
 800fec0:	1a80      	subs	r0, r0, r2
 800fec2:	fa0b f000 	lsl.w	r0, fp, r0
 800fec6:	4318      	orrs	r0, r3
 800fec8:	9004      	str	r0, [sp, #16]
 800feca:	463d      	mov	r5, r7
 800fecc:	e7d3      	b.n	800fe76 <_svfiprintf_r+0x92>
 800fece:	9a03      	ldr	r2, [sp, #12]
 800fed0:	1d11      	adds	r1, r2, #4
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	9103      	str	r1, [sp, #12]
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	db01      	blt.n	800fede <_svfiprintf_r+0xfa>
 800feda:	9207      	str	r2, [sp, #28]
 800fedc:	e004      	b.n	800fee8 <_svfiprintf_r+0x104>
 800fede:	4252      	negs	r2, r2
 800fee0:	f043 0302 	orr.w	r3, r3, #2
 800fee4:	9207      	str	r2, [sp, #28]
 800fee6:	9304      	str	r3, [sp, #16]
 800fee8:	783b      	ldrb	r3, [r7, #0]
 800feea:	2b2e      	cmp	r3, #46	; 0x2e
 800feec:	d10c      	bne.n	800ff08 <_svfiprintf_r+0x124>
 800feee:	787b      	ldrb	r3, [r7, #1]
 800fef0:	2b2a      	cmp	r3, #42	; 0x2a
 800fef2:	d133      	bne.n	800ff5c <_svfiprintf_r+0x178>
 800fef4:	9b03      	ldr	r3, [sp, #12]
 800fef6:	1d1a      	adds	r2, r3, #4
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	9203      	str	r2, [sp, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bfb8      	it	lt
 800ff00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff04:	3702      	adds	r7, #2
 800ff06:	9305      	str	r3, [sp, #20]
 800ff08:	4d2e      	ldr	r5, [pc, #184]	; (800ffc4 <_svfiprintf_r+0x1e0>)
 800ff0a:	7839      	ldrb	r1, [r7, #0]
 800ff0c:	2203      	movs	r2, #3
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f7f0 f966 	bl	80001e0 <memchr>
 800ff14:	b138      	cbz	r0, 800ff26 <_svfiprintf_r+0x142>
 800ff16:	2340      	movs	r3, #64	; 0x40
 800ff18:	1b40      	subs	r0, r0, r5
 800ff1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ff1e:	9b04      	ldr	r3, [sp, #16]
 800ff20:	4303      	orrs	r3, r0
 800ff22:	3701      	adds	r7, #1
 800ff24:	9304      	str	r3, [sp, #16]
 800ff26:	7839      	ldrb	r1, [r7, #0]
 800ff28:	4827      	ldr	r0, [pc, #156]	; (800ffc8 <_svfiprintf_r+0x1e4>)
 800ff2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff2e:	2206      	movs	r2, #6
 800ff30:	1c7e      	adds	r6, r7, #1
 800ff32:	f7f0 f955 	bl	80001e0 <memchr>
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d038      	beq.n	800ffac <_svfiprintf_r+0x1c8>
 800ff3a:	4b24      	ldr	r3, [pc, #144]	; (800ffcc <_svfiprintf_r+0x1e8>)
 800ff3c:	bb13      	cbnz	r3, 800ff84 <_svfiprintf_r+0x1a0>
 800ff3e:	9b03      	ldr	r3, [sp, #12]
 800ff40:	3307      	adds	r3, #7
 800ff42:	f023 0307 	bic.w	r3, r3, #7
 800ff46:	3308      	adds	r3, #8
 800ff48:	9303      	str	r3, [sp, #12]
 800ff4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4c:	444b      	add	r3, r9
 800ff4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff50:	e76d      	b.n	800fe2e <_svfiprintf_r+0x4a>
 800ff52:	fb05 3202 	mla	r2, r5, r2, r3
 800ff56:	2001      	movs	r0, #1
 800ff58:	460f      	mov	r7, r1
 800ff5a:	e7a6      	b.n	800feaa <_svfiprintf_r+0xc6>
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	3701      	adds	r7, #1
 800ff60:	9305      	str	r3, [sp, #20]
 800ff62:	4619      	mov	r1, r3
 800ff64:	250a      	movs	r5, #10
 800ff66:	4638      	mov	r0, r7
 800ff68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff6c:	3a30      	subs	r2, #48	; 0x30
 800ff6e:	2a09      	cmp	r2, #9
 800ff70:	d903      	bls.n	800ff7a <_svfiprintf_r+0x196>
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0c8      	beq.n	800ff08 <_svfiprintf_r+0x124>
 800ff76:	9105      	str	r1, [sp, #20]
 800ff78:	e7c6      	b.n	800ff08 <_svfiprintf_r+0x124>
 800ff7a:	fb05 2101 	mla	r1, r5, r1, r2
 800ff7e:	2301      	movs	r3, #1
 800ff80:	4607      	mov	r7, r0
 800ff82:	e7f0      	b.n	800ff66 <_svfiprintf_r+0x182>
 800ff84:	ab03      	add	r3, sp, #12
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	4622      	mov	r2, r4
 800ff8a:	4b11      	ldr	r3, [pc, #68]	; (800ffd0 <_svfiprintf_r+0x1ec>)
 800ff8c:	a904      	add	r1, sp, #16
 800ff8e:	4640      	mov	r0, r8
 800ff90:	f7fc fc6a 	bl	800c868 <_printf_float>
 800ff94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ff98:	4681      	mov	r9, r0
 800ff9a:	d1d6      	bne.n	800ff4a <_svfiprintf_r+0x166>
 800ff9c:	89a3      	ldrh	r3, [r4, #12]
 800ff9e:	065b      	lsls	r3, r3, #25
 800ffa0:	f53f af35 	bmi.w	800fe0e <_svfiprintf_r+0x2a>
 800ffa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffa6:	b01d      	add	sp, #116	; 0x74
 800ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffac:	ab03      	add	r3, sp, #12
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	4622      	mov	r2, r4
 800ffb2:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <_svfiprintf_r+0x1ec>)
 800ffb4:	a904      	add	r1, sp, #16
 800ffb6:	4640      	mov	r0, r8
 800ffb8:	f7fc ff0c 	bl	800cdd4 <_printf_i>
 800ffbc:	e7ea      	b.n	800ff94 <_svfiprintf_r+0x1b0>
 800ffbe:	bf00      	nop
 800ffc0:	0801047c 	.word	0x0801047c
 800ffc4:	08010482 	.word	0x08010482
 800ffc8:	08010486 	.word	0x08010486
 800ffcc:	0800c869 	.word	0x0800c869
 800ffd0:	0800fd2f 	.word	0x0800fd2f

0800ffd4 <__ascii_wctomb>:
 800ffd4:	b149      	cbz	r1, 800ffea <__ascii_wctomb+0x16>
 800ffd6:	2aff      	cmp	r2, #255	; 0xff
 800ffd8:	bf85      	ittet	hi
 800ffda:	238a      	movhi	r3, #138	; 0x8a
 800ffdc:	6003      	strhi	r3, [r0, #0]
 800ffde:	700a      	strbls	r2, [r1, #0]
 800ffe0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffe4:	bf98      	it	ls
 800ffe6:	2001      	movls	r0, #1
 800ffe8:	4770      	bx	lr
 800ffea:	4608      	mov	r0, r1
 800ffec:	4770      	bx	lr

0800ffee <memmove>:
 800ffee:	4288      	cmp	r0, r1
 800fff0:	b510      	push	{r4, lr}
 800fff2:	eb01 0302 	add.w	r3, r1, r2
 800fff6:	d807      	bhi.n	8010008 <memmove+0x1a>
 800fff8:	1e42      	subs	r2, r0, #1
 800fffa:	4299      	cmp	r1, r3
 800fffc:	d00a      	beq.n	8010014 <memmove+0x26>
 800fffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010002:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010006:	e7f8      	b.n	800fffa <memmove+0xc>
 8010008:	4283      	cmp	r3, r0
 801000a:	d9f5      	bls.n	800fff8 <memmove+0xa>
 801000c:	1881      	adds	r1, r0, r2
 801000e:	1ad2      	subs	r2, r2, r3
 8010010:	42d3      	cmn	r3, r2
 8010012:	d100      	bne.n	8010016 <memmove+0x28>
 8010014:	bd10      	pop	{r4, pc}
 8010016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801001a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801001e:	e7f7      	b.n	8010010 <memmove+0x22>

08010020 <_realloc_r>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	4607      	mov	r7, r0
 8010024:	4614      	mov	r4, r2
 8010026:	460e      	mov	r6, r1
 8010028:	b921      	cbnz	r1, 8010034 <_realloc_r+0x14>
 801002a:	4611      	mov	r1, r2
 801002c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010030:	f7fc bb2c 	b.w	800c68c <_malloc_r>
 8010034:	b922      	cbnz	r2, 8010040 <_realloc_r+0x20>
 8010036:	f7fc fadb 	bl	800c5f0 <_free_r>
 801003a:	4625      	mov	r5, r4
 801003c:	4628      	mov	r0, r5
 801003e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010040:	f000 f814 	bl	801006c <_malloc_usable_size_r>
 8010044:	42a0      	cmp	r0, r4
 8010046:	d20f      	bcs.n	8010068 <_realloc_r+0x48>
 8010048:	4621      	mov	r1, r4
 801004a:	4638      	mov	r0, r7
 801004c:	f7fc fb1e 	bl	800c68c <_malloc_r>
 8010050:	4605      	mov	r5, r0
 8010052:	2800      	cmp	r0, #0
 8010054:	d0f2      	beq.n	801003c <_realloc_r+0x1c>
 8010056:	4631      	mov	r1, r6
 8010058:	4622      	mov	r2, r4
 801005a:	f7fc fab5 	bl	800c5c8 <memcpy>
 801005e:	4631      	mov	r1, r6
 8010060:	4638      	mov	r0, r7
 8010062:	f7fc fac5 	bl	800c5f0 <_free_r>
 8010066:	e7e9      	b.n	801003c <_realloc_r+0x1c>
 8010068:	4635      	mov	r5, r6
 801006a:	e7e7      	b.n	801003c <_realloc_r+0x1c>

0801006c <_malloc_usable_size_r>:
 801006c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010070:	1f18      	subs	r0, r3, #4
 8010072:	2b00      	cmp	r3, #0
 8010074:	bfbc      	itt	lt
 8010076:	580b      	ldrlt	r3, [r1, r0]
 8010078:	18c0      	addlt	r0, r0, r3
 801007a:	4770      	bx	lr

0801007c <_init>:
 801007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007e:	bf00      	nop
 8010080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010082:	bc08      	pop	{r3}
 8010084:	469e      	mov	lr, r3
 8010086:	4770      	bx	lr

08010088 <_fini>:
 8010088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008a:	bf00      	nop
 801008c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801008e:	bc08      	pop	{r3}
 8010090:	469e      	mov	lr, r3
 8010092:	4770      	bx	lr
