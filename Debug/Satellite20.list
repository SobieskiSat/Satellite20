
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08015078  08015078  00025078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015568  08015568  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  08015568  08015568  00025568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015570  08015570  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015570  08015570  00025570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015574  08015574  00025574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  08015578  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b04  20000394  0801590c  00030394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007e98  0801590c  00037e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b6fe  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005495  00000000  00000000  0005bac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb8  00000000  00000000  00060f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  00062f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028032  00000000  00000000  00064c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e0a2  00000000  00000000  0008ccb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6389  00000000  00000000  000aad54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001810dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009698  00000000  00000000  00181158  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0018a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000394 	.word	0x20000394
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801505c 	.word	0x0801505c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000398 	.word	0x20000398
 80001cc:	0801505c 	.word	0x0801505c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 8000f9c:	b40f      	push	{r0, r1, r2, r3}
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
	if (usbPresent)
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <println+0xb4>)
 8000fa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d147      	bne.n	800103e <println+0xa2>
	{
		writePin(LEDD, HIGH);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <println+0xb8>)
 8000fb6:	f003 fb87 	bl	80046c8 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <println+0xbc>)
 8000fc6:	f010 fb63 	bl	8011690 <vsiprintf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <println+0xc0>)
 8000fd0:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <println+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a20      	ldr	r2, [pc, #128]	; (8001058 <println+0xbc>)
 8000fd8:	210d      	movs	r1, #13
 8000fda:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <println+0xc0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <println+0xbc>)
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <println+0xc0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <println+0xbc>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <println+0xc0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <println+0xc0>)
 8000ffc:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 8000ffe:	f7ff ffc3 	bl	8000f88 <micros>
 8001002:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <println+0xc0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	3346      	adds	r3, #70	; 0x46
 8001012:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8001014:	e001      	b.n	800101a <println+0x7e>
		{
			if (micros() - printStart > timeout && false)
 8001016:	f7ff ffb7 	bl	8000f88 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <println+0xc0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <println+0xbc>)
 8001024:	f00e f896 	bl	800f154 <CDC_Transmit_FS>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d0f3      	beq.n	8001016 <println+0x7a>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <println+0xb8>)
 8001036:	f003 fb47 	bl	80046c8 <HAL_GPIO_WritePin>
		return true;
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <println+0xa4>
	}
	return false;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800104a:	b004      	add	sp, #16
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200009dc 	.word	0x200009dc
 8001054:	40020400 	.word	0x40020400
 8001058:	200003b4 	.word	0x200003b4
 800105c:	200003b0 	.word	0x200003b0

08001060 <MPU9250_writeByte>:
#include <math.h>
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_i2c.h"

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 2);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	b299      	uxth	r1, r3
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	b29a      	uxth	r2, r3
 800107e:	2302      	movs	r3, #2
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	f003 fc5e 	bl	800494c <HAL_I2C_Mem_Write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 2);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2302      	movs	r3, #2
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2301      	movs	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	f003 fd3d 	bl	8004b40 <HAL_I2C_Mem_Read>
	return (char)data[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08f      	sub	sp, #60	; 0x3c
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	72fb      	strb	r3, [r7, #11]
 80010de:	4613      	mov	r3, r2
 80010e0:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 2);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	b299      	uxth	r1, r3
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	b29c      	uxth	r4, r3
 80010f0:	7abb      	ldrb	r3, [r7, #10]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2202      	movs	r2, #2
 80010f6:	9202      	str	r2, [sp, #8]
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	4622      	mov	r2, r4
 8001104:	f003 fd1c 	bl	8004b40 <HAL_I2C_Mem_Read>

	int ii = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	e00b      	b.n	800112a <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	f107 0114 	add.w	r1, r7, #20
 800111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111e:	440a      	add	r2, r1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	7abb      	ldrb	r3, [r7, #10]
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	dbef      	blt.n	8001112 <MPU9250_readBytes+0x42>
	}
}
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	; 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}

0800113a <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af04      	add	r7, sp, #16
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	4613      	mov	r3, r2
 8001148:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 2);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	b299      	uxth	r1, r3
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2302      	movs	r3, #2
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f003 fbf1 	bl	800494c <HAL_I2C_Mem_Write>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b088      	sub	sp, #32
 8001176:	af04      	add	r7, sp, #16
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	b299      	uxth	r1, r3
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	b29a      	uxth	r2, r3
 800118c:	2302      	movs	r3, #2
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	f003 fcd0 	bl	8004b40 <HAL_I2C_Mem_Read>
	return (char)data[0];
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08f      	sub	sp, #60	; 0x3c
 80011ae:	af04      	add	r7, sp, #16
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]
 80011b8:	4613      	mov	r3, r2
 80011ba:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 2);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	b299      	uxth	r1, r3
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	7abb      	ldrb	r3, [r7, #10]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2202      	movs	r2, #2
 80011d0:	9202      	str	r2, [sp, #8]
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4622      	mov	r2, r4
 80011de:	f003 fcaf 	bl	8004b40 <HAL_I2C_Mem_Read>

	int ii = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	e00b      	b.n	8001204 <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	440a      	add	r2, r1
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	429a      	cmp	r2, r3
 800120a:	dbef      	blt.n	80011ec <AK8963_readBytes+0x42>
	}
}
 800120c:	bf00      	nop
 800120e:	372c      	adds	r7, #44	; 0x2c
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}

08001214 <MPU9250_getRes>:
 
void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <MPU9250_getRes+0x18>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d004      	beq.n	8001234 <MPU9250_getRes+0x20>
 800122a:	e007      	b.n	800123c <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <MPU9250_getRes+0xbc>)
 8001230:	649a      	str	r2, [r3, #72]	; 0x48
 8001232:	e003      	b.n	800123c <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <MPU9250_getRes+0xc0>)
 8001238:	649a      	str	r2, [r3, #72]	; 0x48
 800123a:	bf00      	nop
	}
	switch (config->Gscale)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d81b      	bhi.n	800127c <MPU9250_getRes+0x68>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <MPU9250_getRes+0x38>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	0800125d 	.word	0x0800125d
 8001250:	08001265 	.word	0x08001265
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001275 	.word	0x08001275
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <MPU9250_getRes+0xc4>)
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
 8001262:	e00b      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <MPU9250_getRes+0xc8>)
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
 800126a:	e007      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MPU9250_getRes+0xcc>)
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
 8001272:	e003      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MPU9250_getRes+0xd0>)
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
 800127a:	bf00      	nop
	}
	switch (config->Ascale)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d81f      	bhi.n	80012c4 <MPU9250_getRes+0xb0>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <MPU9250_getRes+0x78>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012a7 	.word	0x080012a7
 8001294:	080012b1 	.word	0x080012b1
 8001298:	080012bb 	.word	0x080012bb
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
 80012a4:	e00e      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	e009      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
 80012b8:	e004      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
 80012c2:	bf00      	nop
	}
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40bfebff 	.word	0x40bfebff
 80012d4:	3fbfebff 	.word	0x3fbfebff
 80012d8:	3bfa0000 	.word	0x3bfa0000
 80012dc:	3c7a0000 	.word	0x3c7a0000
 80012e0:	3cfa0000 	.word	0x3cfa0000
 80012e4:	3d7a0000 	.word	0x3d7a0000

080012e8 <MPU9250_readAccelData>:

void MPU9250_readAccelData(MPU9250* inst)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2206      	movs	r2, #6
 80012f6:	213b      	movs	r1, #59	; 0x3b
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fee9 	bl	80010d0 <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 80012fe:	7a3b      	ldrb	r3, [r7, #8]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7a7b      	ldrb	r3, [r7, #9]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800131a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edc3 7a07 	vstr	s15, [r3, #28]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800134a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800137a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <MPU9250_readGyroData>:
void MPU9250_readGyroData(MPU9250* inst)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2206      	movs	r2, #6
 80013a4:	2143      	movs	r1, #67	; 0x43
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fe92 	bl	80010d0 <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes - inst->gyroBias[0];
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80013d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes - inst->gyroBias[1];
 80013dc:	7abb      	ldrb	r3, [r7, #10]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes - inst->gyroBias[2];
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <MPU9250_readMagData>:
void MPU9250_readMagData(MPU9250* inst)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 800144c:	2102      	movs	r1, #2
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe8f 	bl	8001172 <AK8963_readByte>
 8001454:	4603      	mov	r3, r0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d064      	beq.n	8001528 <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2207      	movs	r2, #7
 8001464:	2103      	movs	r1, #3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe9f 	bl	80011aa <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d156      	bne.n	8001528 <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 800147a:	7a7b      	ldrb	r3, [r7, #9]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b21a      	sxth	r2, r3
 8001480:	7a3b      	ldrb	r3, [r7, #8]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21b      	sxth	r3, r3
 8001488:	ee07 3a90 	vmov	s15, r3
 800148c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80014a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80014aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	7abb      	ldrb	r3, [r7, #10]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4313      	orrs	r3, r2
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800150a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800151e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
	}
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <MPU9250_present>:
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}

bool MPU9250_present(MPU9250* inst, uint8_t trials)	// arg = trials of getting WHO_AM_I response from MPU and AK
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	uint8_t attempts = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
	do
	{
		//MPU9250_reset(inst);
		char who[2] = {0, 0};
 8001540:	2300      	movs	r3, #0
 8001542:	733b      	strb	r3, [r7, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	737b      	strb	r3, [r7, #13]
		who[0] = MPU9250_readByte(inst, MPU9250_WHO_AM_I);
 8001548:	2175      	movs	r1, #117	; 0x75
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fda4 	bl	8001098 <MPU9250_readByte>
 8001550:	4603      	mov	r3, r0
 8001552:	733b      	strb	r3, [r7, #12]
		who[1] = AK8963_readByte(inst, AK8963_WHO_AM_I);
 8001554:	2100      	movs	r1, #0
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fe0b 	bl	8001172 <AK8963_readByte>
 800155c:	4603      	mov	r3, r0
 800155e:	737b      	strb	r3, [r7, #13]
		if (who[0] == 0x71)
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	2b71      	cmp	r3, #113	; 0x71
 8001564:	d104      	bne.n	8001570 <MPU9250_present+0x40>
		{
			println("Both present!");
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <MPU9250_present+0x68>)
 8001568:	f7ff fd18 	bl	8000f9c <println>
			return true;
 800156c:	2301      	movs	r3, #1
 800156e:	e00e      	b.n	800158e <MPU9250_present+0x5e>
		}
		else
		{
			attempts++;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	3301      	adds	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 8001576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157a:	f002 fa27 	bl	80039cc <HAL_Delay>
		}
	} while (attempts <= trials);
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	429a      	cmp	r2, r3
 8001584:	d9dc      	bls.n	8001540 <MPU9250_present+0x10>
	inst->active = false;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	721a      	strb	r2, [r3, #8]
	return false;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	08015078 	.word	0x08015078
 800159c:	00000000 	.word	0x00000000

080015a0 <MPU9250_init>:

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	inst->active = false;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	dd0a      	ble.n	80015de <MPU9250_init+0x3e>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 80015dc:	e004      	b.n	80015e8 <MPU9250_init+0x48>
	else inst->alg_delay = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	inst->euler_delay = 1000000.0 / config->euler_rate;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffab 	bl	8000548 <__aeabi_f2d>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	a185      	add	r1, pc, #532	; (adr r1, 8001810 <MPU9250_init+0x270>)
 80015fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001600:	f7ff f924 	bl	800084c <__aeabi_ddiv>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	4618      	mov	r0, r3
 800160a:	4621      	mov	r1, r4
 800160c:	f7ff facc 	bl	8000ba8 <__aeabi_d2uiz>
 8001610:	4602      	mov	r2, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	67da      	str	r2, [r3, #124]	; 0x7c
	int i;
	for (i = 0; i < 3; i++)
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e021      	b.n	8001660 <MPU9250_init+0xc0>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3320      	adds	r3, #32
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3304      	adds	r3, #4
 8001632:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	332a      	adds	r3, #42	; 0x2a
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3304      	adds	r3, #4
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	3326      	adds	r3, #38	; 0x26
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b02      	cmp	r3, #2
 8001664:	ddda      	ble.n	800161c <MPU9250_init+0x7c>
	}
	inst->q[0] = 1.0f;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800166c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if (MPU9250_present(inst, 5))
 8001670:	2105      	movs	r1, #5
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff5c 	bl	8001530 <MPU9250_present>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03c      	beq.n	80016f8 <MPU9250_init+0x158>
	{
		delay(100);
 800167e:	2064      	movs	r0, #100	; 0x64
 8001680:	f002 f9a4 	bl	80039cc <HAL_Delay>
		MPU9250_SelfTest(inst);					// Start by performing self test
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fc4b 	bl	8001f20 <MPU9250_SelfTest>
		delay(1000);
 800168a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168e:	f002 f99d 	bl	80039cc <HAL_Delay>
		MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fdbd 	bl	8001214 <MPU9250_getRes>

		if (config->calibrate)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	7c1b      	ldrb	r3, [r3, #16]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <MPU9250_init+0x10a>
		{
			MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f9c8 	bl	8001a38 <MPU9250_calibrate>
 80016a8:	e022      	b.n	80016f0 <MPU9250_init+0x150>
		}
		else
		{										// Or load biases from config
			for (i = 0; i < 3; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e01c      	b.n	80016ea <MPU9250_init+0x14a>
			{
				inst->accelBias[i] = config->accelBias[i];
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	330a      	adds	r3, #10
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3318      	adds	r3, #24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3304      	adds	r3, #4
 80016ca:	601a      	str	r2, [r3, #0]
				inst->gyroBias[i] = config->gyroBias[i];
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3308      	adds	r3, #8
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3316      	adds	r3, #22
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 3; i++)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	dddf      	ble.n	80016b0 <MPU9250_init+0x110>
			}
			// magBias?
		}
		delay(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f002 f96a 	bl	80039cc <HAL_Delay>
	}
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 80016f8:	2200      	movs	r2, #0
 80016fa:	216b      	movs	r1, #107	; 0x6b
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fcaf 	bl	8001060 <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f002 f962 	bl	80039cc <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001708:	2201      	movs	r2, #1
 800170a:	216b      	movs	r1, #107	; 0x6b
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fca7 	bl	8001060 <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 8001712:	2064      	movs	r0, #100	; 0x64
 8001714:	f002 f95a 	bl	80039cc <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 8001718:	2203      	movs	r2, #3
 800171a:	211a      	movs	r1, #26
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fc9f 	bl	8001060 <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 8001722:	2064      	movs	r0, #100	; 0x64
 8001724:	f002 f952 	bl	80039cc <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 8001728:	2204      	movs	r2, #4
 800172a:	2119      	movs	r1, #25
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fc97 	bl	8001060 <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 8001732:	211b      	movs	r1, #27
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fcaf 	bl	8001098 <MPU9250_readByte>
 800173a:	4603      	mov	r3, r0
 800173c:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 800173e:	7afb      	ldrb	r3, [r7, #11]
 8001740:	f023 0303 	bic.w	r3, r3, #3
 8001744:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	f023 0318 	bic.w	r3, r3, #24
 800174c:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7b5b      	ldrb	r3, [r3, #13]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	b25a      	sxtb	r2, r3
 8001756:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800175a:	4313      	orrs	r3, r2
 800175c:	b25b      	sxtb	r3, r3
 800175e:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	461a      	mov	r2, r3
 8001764:	211b      	movs	r1, #27
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fc7a 	bl	8001060 <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 800176c:	211c      	movs	r1, #28
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fc92 	bl	8001098 <MPU9250_readByte>
 8001774:	4603      	mov	r3, r0
 8001776:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	f023 0318 	bic.w	r3, r3, #24
 800177e:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7b1b      	ldrb	r3, [r3, #12]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	b25a      	sxtb	r2, r3
 8001788:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800178c:	4313      	orrs	r3, r2
 800178e:	b25b      	sxtb	r3, r3
 8001790:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	461a      	mov	r2, r3
 8001796:	211c      	movs	r1, #28
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc61 	bl	8001060 <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 800179e:	211d      	movs	r1, #29
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fc79 	bl	8001098 <MPU9250_readByte>
 80017a6:	4603      	mov	r3, r0
 80017a8:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	f043 0303 	orr.w	r3, r3, #3
 80017b8:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	461a      	mov	r2, r3
 80017be:	211d      	movs	r1, #29
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fc4d 	bl	8001060 <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 80017c6:	2222      	movs	r2, #34	; 0x22
 80017c8:	2137      	movs	r1, #55	; 0x37
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fc48 	bl	8001060 <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 80017d0:	2201      	movs	r2, #1
 80017d2:	2138      	movs	r1, #56	; 0x38
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fc43 	bl	8001060 <MPU9250_writeByte>
	if (!config->calibrate && false)						// [SKIPPED] Do this step immidiately only if not calibrating
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}

	inst->mpu_active = true;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	799b      	ldrb	r3, [r3, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <MPU9250_init+0x254>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	79db      	ldrb	r3, [r3, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MPU9250_init+0x254>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <MPU9250_init+0x256>
 80017f4:	2300      	movs	r3, #0
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	721a      	strb	r2, [r3, #8]
	return true;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	412e8480 	.word	0x412e8480

08001818 <AK8963_init>:
bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
	delay(1000);
 8001822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001826:	f002 f8d1 	bl	80039cc <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 800182a:	2200      	movs	r2, #0
 800182c:	210a      	movs	r1, #10
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fc83 	bl	800113a <AK8963_writeByte>
	delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f002 f8c9 	bl	80039cc <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 800183a:	220f      	movs	r2, #15
 800183c:	210a      	movs	r1, #10
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fc7b 	bl	800113a <AK8963_writeByte>
	delay(10);
 8001844:	200a      	movs	r0, #10
 8001846:	f002 f8c1 	bl	80039cc <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2203      	movs	r2, #3
 8001850:	2110      	movs	r1, #16
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fca9 	bl	80011aa <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 8001858:	7a3b      	ldrb	r3, [r7, #8]
 800185a:	3b80      	subs	r3, #128	; 0x80
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001960 <AK8963_init+0x148>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 800187a:	7a7b      	ldrb	r3, [r7, #9]
 800187c:	3b80      	subs	r3, #128	; 0x80
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001886:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001960 <AK8963_init+0x148>
 800188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800188e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 800189c:	7abb      	ldrb	r3, [r7, #10]
 800189e:	3b80      	subs	r3, #128	; 0x80
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001960 <AK8963_init+0x148>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 80018be:	2200      	movs	r2, #0
 80018c0:	210a      	movs	r1, #10
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fc39 	bl	800113a <AK8963_writeByte>
	delay(10);
 80018c8:	200a      	movs	r0, #10
 80018ca:	f002 f87f 	bl	80039cc <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	7b9b      	ldrb	r3, [r3, #14]
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	b25a      	sxtb	r2, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	7bdb      	ldrb	r3, [r3, #15]
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	210a      	movs	r1, #10
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fc27 	bl	800113a <AK8963_writeByte>
	delay(10);
 80018ec:	200a      	movs	r0, #10
 80018ee:	f002 f86d 	bl	80039cc <HAL_Delay>

	if (config->calibrate)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7c1b      	ldrb	r3, [r3, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fe12 	bl	8002524 <AK8963_calibrate>
 8001900:	e016      	b.n	8001930 <AK8963_init+0x118>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e010      	b.n	800192a <AK8963_init+0x112>
		{
			inst->magBias[i] = config->magBias[i];
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3304      	adds	r3, #4
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3304      	adds	r3, #4
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3312      	adds	r3, #18
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3304      	adds	r3, #4
 8001922:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3301      	adds	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b02      	cmp	r3, #2
 800192e:	ddeb      	ble.n	8001908 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	799b      	ldrb	r3, [r3, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <AK8963_init+0x132>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	79db      	ldrb	r3, [r3, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <AK8963_init+0x132>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <AK8963_init+0x134>
 800194a:	2300      	movs	r3, #0
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	721a      	strb	r2, [r3, #8]
	return true;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	43800000 	.word	0x43800000

08001964 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 800196c:	213a      	movs	r1, #58	; 0x3a
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fb92 	bl	8001098 <MPU9250_readByte>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fcb2 	bl	80012e8 <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fd06 	bl	8001396 <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fd5a 	bl	8001444 <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8001990:	f7ff fafa 	bl	8000f88 <micros>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a14 <MPU9250_update+0xb0>
 80019aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	if (inst->alg_deltat >= inst->alg_delay)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80019c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	db1e      	blt.n	8001a08 <MPU9250_update+0xa4>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 f834 	bl	8002a38 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80019d0:	f7ff fada 	bl	8000f88 <micros>
 80019d4:	4602      	mov	r2, r0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80019dc:	f7ff fad4 	bl	8000f88 <micros>
 80019e0:	4602      	mov	r2, r0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e8:	1ad2      	subs	r2, r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d30a      	bcc.n	8001a08 <MPU9250_update+0xa4>
		{
			MPU9250_updateEuler(inst);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fea8 	bl	8002748 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80019f8:	f7ff fac6 	bl	8000f88 <micros>
 80019fc:	4602      	mov	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return true;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <MPU9250_update+0xa6>
		}
	}
	return false;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	49742400 	.word	0x49742400

08001a18 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	216b      	movs	r1, #107	; 0x6b
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fb1b 	bl	8001060 <MPU9250_writeByte>
	delay(100);
 8001a2a:	2064      	movs	r0, #100	; 0x64
 8001a2c:	f001 ffce 	bl	80039cc <HAL_Delay>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	; 0x60
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001a40:	2300      	movs	r3, #0
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a50:	2300      	movs	r3, #0
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a54:	2300      	movs	r3, #0
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffdd 	bl	8001a18 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 8001a5e:	2201      	movs	r2, #1
 8001a60:	216b      	movs	r1, #107	; 0x6b
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fafc 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001a68:	2200      	movs	r2, #0
 8001a6a:	216c      	movs	r1, #108	; 0x6c
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff faf7 	bl	8001060 <MPU9250_writeByte>
	delay(200);
 8001a72:	20c8      	movs	r0, #200	; 0xc8
 8001a74:	f001 ffaa 	bl	80039cc <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2138      	movs	r1, #56	; 0x38
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff faef 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8001a82:	2200      	movs	r2, #0
 8001a84:	2123      	movs	r1, #35	; 0x23
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff faea 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	216b      	movs	r1, #107	; 0x6b
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fae5 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8001a96:	2200      	movs	r2, #0
 8001a98:	2124      	movs	r1, #36	; 0x24
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fae0 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	216a      	movs	r1, #106	; 0x6a
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fadb 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 8001aaa:	220c      	movs	r2, #12
 8001aac:	216a      	movs	r1, #106	; 0x6a
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fad6 	bl	8001060 <MPU9250_writeByte>
	delay(15);
 8001ab4:	200f      	movs	r0, #15
 8001ab6:	f001 ff89 	bl	80039cc <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001aba:	2201      	movs	r2, #1
 8001abc:	211a      	movs	r1, #26
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff face 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2119      	movs	r1, #25
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fac9 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001ace:	2200      	movs	r2, #0
 8001ad0:	211b      	movs	r1, #27
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fac4 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8001ad8:	2200      	movs	r2, #0
 8001ada:	211c      	movs	r1, #28
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fabf 	bl	8001060 <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 8001ae2:	2383      	movs	r3, #131	; 0x83
 8001ae4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	216a      	movs	r1, #106	; 0x6a
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fab3 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001afa:	2278      	movs	r2, #120	; 0x78
 8001afc:	2123      	movs	r1, #35	; 0x23
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff faae 	bl	8001060 <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 8001b04:	2028      	movs	r0, #40	; 0x28
 8001b06:	f001 ff61 	bl	80039cc <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2123      	movs	r1, #35	; 0x23
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff faa6 	bl	8001060 <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	2172      	movs	r1, #114	; 0x72
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fad7 	bl	80010d0 <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001b22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8001b38:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001b3c:	4aa8      	ldr	r2, [pc, #672]	; (8001de0 <MPU9250_calibrate+0x3a8>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	08db      	lsrs	r3, r3, #3
 8001b44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (i = 0; i < packet_count; i++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b4e:	e071      	b.n	8001c34 <MPU9250_calibrate+0x1fc>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};	// [!!!] strange, cannot get rid of those arrays, conversion is screwed then
 8001b50:	2300      	movs	r3, #0
 8001b52:	82bb      	strh	r3, [r7, #20]
 8001b54:	2300      	movs	r3, #0
 8001b56:	82fb      	strh	r3, [r7, #22]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	833b      	strh	r3, [r7, #24]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	81bb      	strh	r3, [r7, #12]
 8001b60:	2300      	movs	r3, #0
 8001b62:	81fb      	strh	r3, [r7, #14]
 8001b64:	2300      	movs	r3, #0
 8001b66:	823b      	strh	r3, [r7, #16]
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]); // read data for averaging
 8001b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	2174      	movs	r1, #116	; 0x74
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff faad 	bl	80010d0 <MPU9250_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001b8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001b9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001bb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001bc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001bda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
		accel_bias[1] += (int32_t) accel_temp[1];
 8001bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bfe:	4413      	add	r3, r2
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
		accel_bias[2] += (int32_t) accel_temp[2];
 8001c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c08:	4413      	add	r3, r2
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (i = 0; i < packet_count; i++)
 8001c2a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001c34:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001c38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d387      	bcc.n	8001b50 <MPU9250_calibrate+0x118>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001c46:	e077      	b.n	8001d38 <MPU9250_calibrate+0x300>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8001c48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c52:	4413      	add	r3, r2
 8001c54:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001c58:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001c5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c60:	fb91 f2f2 	sdiv	r2, r1, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8001c70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8001c80:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001c84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c88:	fb91 f2f2 	sdiv	r2, r1, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c92:	440b      	add	r3, r1
 8001c94:	f843 2c1c 	str.w	r2, [r3, #-28]
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8001c98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da00      	bge.n	8001cb0 <MPU9250_calibrate+0x278>
 8001cae:	3303      	adds	r3, #3
 8001cb0:	109b      	asrs	r3, r3, #2
 8001cb2:	121a      	asrs	r2, r3, #8
 8001cb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cc0:	440b      	add	r3, r1
 8001cc2:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001cc6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001cd6:	425b      	negs	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da00      	bge.n	8001cde <MPU9250_calibrate+0x2a6>
 8001cdc:	3303      	adds	r3, #3
 8001cde:	109b      	asrs	r3, r3, #2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 8001cf6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d00:	4413      	add	r3, r2
 8001d02:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d0e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	3316      	adds	r3, #22
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8001d2e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001d32:	3301      	adds	r3, #1
 8001d34:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001d38:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d983      	bls.n	8001c48 <MPU9250_calibrate+0x210>
	}

	if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd05      	ble.n	8001d52 <MPU9250_calibrate+0x31a>
 8001d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d48:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001d50:	e004      	b.n	8001d5c <MPU9250_calibrate+0x324>
	else 						accel_bias[2] += (int32_t) accelsensitivity;
 8001d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d54:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001d58:	4413      	add	r3, r2
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 8001d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	2177      	movs	r1, #119	; 0x77
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff f9ad 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001d76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d84:	4313      	orrs	r3, r2
 8001d86:	623b      	str	r3, [r7, #32]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 8001d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	217a      	movs	r1, #122	; 0x7a
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff f99d 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da4:	4313      	orrs	r3, r2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 8001da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dac:	2202      	movs	r2, #2
 8001dae:	217d      	movs	r1, #125	; 0x7d
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff f98d 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001dc8:	2301      	movs	r3, #1
 8001dca:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 8001dcc:	2300      	movs	r3, #0
 8001dce:	773b      	strb	r3, [r7, #28]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	777b      	strb	r3, [r7, #29]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	77bb      	strb	r3, [r7, #30]
	for(i = 0; i < 3; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001dde:	e096      	b.n	8001f0e <MPU9250_calibrate+0x4d6>
 8001de0:	aaaaaaab 	.word	0xaaaaaaab
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 8001de4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dee:	4413      	add	r3, r2
 8001df0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001df4:	461a      	mov	r2, r3
 8001df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <MPU9250_calibrate+0x3d6>
 8001dfe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e06:	4413      	add	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001e0e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e18:	4413      	add	r3, r2
 8001e1a:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001e1e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e28:	440b      	add	r3, r1
 8001e2a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da00      	bge.n	8001e34 <MPU9250_calibrate+0x3fc>
 8001e32:	3307      	adds	r3, #7
 8001e34:	10db      	asrs	r3, r3, #3
 8001e36:	425b      	negs	r3, r3
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e3e:	440a      	add	r2, r1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e46:	440b      	add	r3, r1
 8001e48:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 8001e4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e56:	4413      	add	r3, r2
 8001e58:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001e5c:	121a      	asrs	r2, r3, #8
 8001e5e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8001e70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001e80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	3301      	adds	r3, #1
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e8e:	440b      	add	r3, r1
 8001e90:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8001e94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8001ea6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001eaa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8001eb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	3301      	adds	r3, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 8001eca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ee2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	3318      	adds	r3, #24
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 8001f04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001f0e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	f67f af66 	bls.w	8001de4 <MPU9250_calibrate+0x3ac>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 8001f18:	bf00      	nop
 8001f1a:	3760      	adds	r7, #96	; 0x60
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b0a2      	sub	sp, #136	; 0x88
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8001f28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
	inst->gRes = 1;											//Configuration values (must?) not affect readings
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
	int i = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f7a:	e017      	b.n	8001fac <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f82:	3318      	adds	r3, #24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f96:	3316      	adds	r3, #22
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8001fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	dde3      	ble.n	8001f7c <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2119      	movs	r1, #25
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff f851 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	211a      	movs	r1, #26
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff f84c 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 8001fc8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	211b      	movs	r1, #27
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff f843 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001fda:	2202      	movs	r2, #2
 8001fdc:	211d      	movs	r1, #29
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff f83e 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 8001fe4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	211c      	movs	r1, #28
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff f835 	bl	8001060 <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ffc:	e040      	b.n	8002080 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff f972 	bl	80012e8 <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 8002004:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	edd3 7a07 	vldr	s15, [r3, #28]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8002016:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8002028:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff f9ab 	bl	8001396 <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8002040:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8002052:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800205c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002060:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8002064:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8002076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800207a:	3301      	adds	r3, #1
 800207c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002084:	2bc7      	cmp	r3, #199	; 0xc7
 8002086:	ddba      	ble.n	8001ffe <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800208e:	e030      	b.n	80020f2 <MPU9250_SelfTest+0x1d2>
	{
		aAvg[i] /= 200;
 8002090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800209a:	4413      	add	r3, r2
 800209c:	3b34      	subs	r3, #52	; 0x34
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8002338 <MPU9250_SelfTest+0x418>
 80020a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020b4:	4413      	add	r3, r2
 80020b6:	3b34      	subs	r3, #52	; 0x34
 80020b8:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200;
 80020bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020c6:	4413      	add	r3, r2
 80020c8:	3b28      	subs	r3, #40	; 0x28
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8002338 <MPU9250_SelfTest+0x418>
 80020d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020e0:	4413      	add	r3, r2
 80020e2:	3b28      	subs	r3, #40	; 0x28
 80020e4:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 80020e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ec:	3301      	adds	r3, #1
 80020ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	ddca      	ble.n	8002090 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80020fa:	22e0      	movs	r2, #224	; 0xe0
 80020fc:	211c      	movs	r1, #28
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe ffae 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8002104:	22e0      	movs	r2, #224	; 0xe0
 8002106:	211b      	movs	r1, #27
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe ffa9 	bl	8001060 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 800210e:	2019      	movs	r0, #25
 8002110:	f001 fc5c 	bl	80039cc <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800211a:	e040      	b.n	800219e <MPU9250_SelfTest+0x27e>
	{
		MPU9250_readAccelData(inst);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff f8e3 	bl	80012e8 <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 8002122:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edd3 7a07 	vldr	s15, [r3, #28]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 8002134:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edd3 7a08 	vldr	s15, [r3, #32]
 800213e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002142:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8002146:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff f91c 	bl	8001396 <MPU9250_readGyroData>
		gSTAvg[0] += inst->gx;
 800215e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		gSTAvg[1] += inst->gy;
 8002170:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		gSTAvg[2] += inst->gz;
 8002182:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8002194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002198:	3301      	adds	r3, #1
 800219a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800219e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a2:	2bc7      	cmp	r3, #199	; 0xc7
 80021a4:	ddba      	ble.n	800211c <MPU9250_SelfTest+0x1fc>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021ac:	e030      	b.n	8002210 <MPU9250_SelfTest+0x2f0>
	{
		aSTAvg[i] /= 200;
 80021ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021b8:	4413      	add	r3, r2
 80021ba:	3b40      	subs	r3, #64	; 0x40
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002338 <MPU9250_SelfTest+0x418>
 80021c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021d2:	4413      	add	r3, r2
 80021d4:	3b40      	subs	r3, #64	; 0x40
 80021d6:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 80021da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021e4:	4413      	add	r3, r2
 80021e6:	3b4c      	subs	r3, #76	; 0x4c
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002338 <MPU9250_SelfTest+0x418>
 80021f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021fe:	4413      	add	r3, r2
 8002200:	3b4c      	subs	r3, #76	; 0x4c
 8002202:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8002206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800220a:	3301      	adds	r3, #1
 800220c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002214:	2b02      	cmp	r3, #2
 8002216:	ddca      	ble.n	80021ae <MPU9250_SelfTest+0x28e>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 8002218:	2200      	movs	r2, #0
 800221a:	211c      	movs	r1, #28
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7fe ff1f 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 8002222:	2200      	movs	r2, #0
 8002224:	211b      	movs	r1, #27
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe ff1a 	bl	8001060 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 800222c:	2019      	movs	r0, #25
 800222e:	f001 fbcd 	bl	80039cc <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 8002232:	210d      	movs	r1, #13
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7fe ff2f 	bl	8001098 <MPU9250_readByte>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8002240:	210e      	movs	r1, #14
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe ff28 	bl	8001098 <MPU9250_readByte>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 800224e:	210f      	movs	r1, #15
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe ff21 	bl	8001098 <MPU9250_readByte>
 8002256:	4603      	mov	r3, r0
 8002258:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 800225c:	2100      	movs	r1, #0
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe ff1a 	bl	8001098 <MPU9250_readByte>
 8002264:	4603      	mov	r3, r0
 8002266:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 800226a:	2101      	movs	r1, #1
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe ff13 	bl	8001098 <MPU9250_readByte>
 8002272:	4603      	mov	r3, r0
 8002274:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8002278:	2102      	movs	r1, #2
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe ff0c 	bl	8001098 <MPU9250_readByte>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800228c:	e048      	b.n	8002320 <MPU9250_SelfTest+0x400>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 800228e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002292:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a2:	ee17 0a90 	vmov	r0, s15
 80022a6:	f7fe f94f 	bl	8000548 <__aeabi_f2d>
 80022aa:	4604      	mov	r4, r0
 80022ac:	460d      	mov	r5, r1
 80022ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80022b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7fe f93f 	bl	8000548 <__aeabi_f2d>
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MPU9250_SelfTest+0x41c>)
 80022d0:	f7fd ffda 	bl	8000288 <__aeabi_dsub>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	ec43 2b17 	vmov	d7, r2, r3
 80022dc:	eeb0 1a47 	vmov.f32	s2, s14
 80022e0:	eef0 1a67 	vmov.f32	s3, s15
 80022e4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002330 <MPU9250_SelfTest+0x410>
 80022e8:	f011 f97e 	bl	80135e8 <pow>
 80022ec:	ec53 2b10 	vmov	r2, r3, d0
 80022f0:	4620      	mov	r0, r4
 80022f2:	4629      	mov	r1, r5
 80022f4:	f7fe f980 	bl	80005f8 <__aeabi_dmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	4618      	mov	r0, r3
 80022fe:	4621      	mov	r1, r4
 8002300:	f7fe fc72 	bl	8000be8 <__aeabi_d2f>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002310:	440b      	add	r3, r1
 8002312:	3b64      	subs	r3, #100	; 0x64
 8002314:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8002316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800231a:	3301      	adds	r3, #1
 800231c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002324:	2b05      	cmp	r3, #5
 8002326:	ddb2      	ble.n	800228e <MPU9250_SelfTest+0x36e>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8002328:	2300      	movs	r3, #0
 800232a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800232c:	e09b      	b.n	8002466 <MPU9250_SelfTest+0x546>
 800232e:	bf00      	nop
 8002330:	c28f5c29 	.word	0xc28f5c29
 8002334:	3ff028f5 	.word	0x3ff028f5
 8002338:	43480000 	.word	0x43480000
 800233c:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8002340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002348:	4413      	add	r3, r2
 800234a:	3b40      	subs	r3, #64	; 0x40
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002358:	4413      	add	r3, r2
 800235a:	3b34      	subs	r3, #52	; 0x34
 800235c:	edd3 7a00 	vldr	s15, [r3]
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	ee17 0a90 	vmov	r0, s15
 8002368:	f7fe f8ee 	bl	8000548 <__aeabi_f2d>
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b69      	ldr	r3, [pc, #420]	; (8002518 <MPU9250_SelfTest+0x5f8>)
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_dmul>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	4625      	mov	r5, r4
 800237c:	461c      	mov	r4, r3
 800237e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002386:	4413      	add	r3, r2
 8002388:	3b64      	subs	r3, #100	; 0x64
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f8db 	bl	8000548 <__aeabi_f2d>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fe fa57 	bl	800084c <__aeabi_ddiv>
 800239e:	4603      	mov	r3, r0
 80023a0:	460c      	mov	r4, r1
 80023a2:	4618      	mov	r0, r3
 80023a4:	4621      	mov	r1, r4
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	4b5b      	ldr	r3, [pc, #364]	; (8002518 <MPU9250_SelfTest+0x5f8>)
 80023ac:	f7fd ff6c 	bl	8000288 <__aeabi_dsub>
 80023b0:	4603      	mov	r3, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	4618      	mov	r0, r3
 80023b6:	4621      	mov	r1, r4
 80023b8:	f7fe fc16 	bl	8000be8 <__aeabi_d2f>
 80023bc:	4602      	mov	r2, r0
 80023be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80023c6:	440b      	add	r3, r1
 80023c8:	3b7c      	subs	r3, #124	; 0x7c
 80023ca:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 80023cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023d4:	4413      	add	r3, r2
 80023d6:	3b4c      	subs	r3, #76	; 0x4c
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023e4:	4413      	add	r3, r2
 80023e6:	3b28      	subs	r3, #40	; 0x28
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f0:	ee17 0a90 	vmov	r0, s15
 80023f4:	f7fe f8a8 	bl	8000548 <__aeabi_f2d>
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <MPU9250_SelfTest+0x5f8>)
 80023fe:	f7fe f8fb 	bl	80005f8 <__aeabi_dmul>
 8002402:	4603      	mov	r3, r0
 8002404:	460c      	mov	r4, r1
 8002406:	4625      	mov	r5, r4
 8002408:	461c      	mov	r4, r3
 800240a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800240c:	3303      	adds	r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002414:	4413      	add	r3, r2
 8002416:	3b64      	subs	r3, #100	; 0x64
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f894 	bl	8000548 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fe fa10 	bl	800084c <__aeabi_ddiv>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4618      	mov	r0, r3
 8002432:	4621      	mov	r1, r4
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b37      	ldr	r3, [pc, #220]	; (8002518 <MPU9250_SelfTest+0x5f8>)
 800243a:	f7fd ff25 	bl	8000288 <__aeabi_dsub>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	4619      	mov	r1, r3
 8002444:	4622      	mov	r2, r4
 8002446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002448:	1cdc      	adds	r4, r3, #3
 800244a:	4608      	mov	r0, r1
 800244c:	4611      	mov	r1, r2
 800244e:	f7fe fbcb 	bl	8000be8 <__aeabi_d2f>
 8002452:	4602      	mov	r2, r0
 8002454:	00a3      	lsls	r3, r4, #2
 8002456:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800245a:	440b      	add	r3, r1
 800245c:	3b7c      	subs	r3, #124	; 0x7c
 800245e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8002460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002462:	3301      	adds	r3, #1
 8002464:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002468:	2b02      	cmp	r3, #2
 800246a:	f77f af69 	ble.w	8002340 <MPU9250_SelfTest+0x420>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
 800246e:	482b      	ldr	r0, [pc, #172]	; (800251c <MPU9250_SelfTest+0x5fc>)
 8002470:	f7fe fd94 	bl	8000f9c <println>
	#endif
	bool passed = true;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 800247a:	2300      	movs	r3, #0
 800247c:	677b      	str	r3, [r7, #116]	; 0x74
 800247e:	e042      	b.n	8002506 <MPU9250_SelfTest+0x5e6>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8002480:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002484:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800248c:	440a      	add	r2, r1
 800248e:	3a7c      	subs	r2, #124	; 0x7c
 8002490:	edd2 7a00 	vldr	s15, [r2]
 8002494:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8002498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	bfcc      	ite	gt
 80024a2:	2201      	movgt	r2, #1
 80024a4:	2200      	movle	r2, #0
 80024a6:	b2d1      	uxtb	r1, r2
 80024a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80024b0:	4402      	add	r2, r0
 80024b2:	3a7c      	subs	r2, #124	; 0x7c
 80024b4:	edd2 7a00 	vldr	s15, [r2]
 80024b8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80024bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	bf4c      	ite	mi
 80024c6:	2201      	movmi	r2, #1
 80024c8:	2200      	movpl	r2, #0
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	400a      	ands	r2, r1
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		#if MPU9250_DEBUG
			println("%f%", results[i]);
 80024de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024e6:	4413      	add	r3, r2
 80024e8:	3b7c      	subs	r3, #124	; 0x7c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f82b 	bl	8000548 <__aeabi_f2d>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	4809      	ldr	r0, [pc, #36]	; (8002520 <MPU9250_SelfTest+0x600>)
 80024fc:	f7fe fd4e 	bl	8000f9c <println>
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8002500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002502:	3301      	adds	r3, #1
 8002504:	677b      	str	r3, [r7, #116]	; 0x74
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	2b05      	cmp	r3, #5
 800250a:	ddb9      	ble.n	8002480 <MPU9250_SelfTest+0x560>
		#endif
	}
	return passed;
 800250c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8002510:	4618      	mov	r0, r3
 8002512:	3788      	adds	r7, #136	; 0x88
 8002514:	46bd      	mov	sp, r7
 8002516:	bdb0      	pop	{r4, r5, r7, pc}
 8002518:	40590000 	.word	0x40590000
 800251c:	08015088 	.word	0x08015088
 8002520:	080150a8 	.word	0x080150a8

08002524 <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002530:	2300      	movs	r3, #0
 8002532:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002534:	2300      	movs	r3, #0
 8002536:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8002538:	4a80      	ldr	r2, [pc, #512]	; (800273c <AK8963_calibrate+0x218>)
 800253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002542:	6018      	str	r0, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	8019      	strh	r1, [r3, #0]
 8002548:	4a7d      	ldr	r2, [pc, #500]	; (8002740 <AK8963_calibrate+0x21c>)
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002552:	6018      	str	r0, [r3, #0]
 8002554:	3304      	adds	r3, #4
 8002556:	8019      	strh	r1, [r3, #0]
 8002558:	2300      	movs	r3, #0
 800255a:	82bb      	strh	r3, [r7, #20]
 800255c:	2300      	movs	r3, #0
 800255e:	82fb      	strh	r3, [r7, #22]
 8002560:	2300      	movs	r3, #0
 8002562:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800257a:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002582:	649a      	str	r2, [r3, #72]	; 0x48
	for (i = 0; i < 3; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002588:	e013      	b.n	80025b2 <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 800258a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	3312      	adds	r3, #18
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 800259c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	331c      	adds	r3, #28
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025aa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 80025ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ae:	3301      	adds	r3, #1
 80025b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d9e8      	bls.n	800258a <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 80025b8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80025bc:	f001 fa06 	bl	80039cc <HAL_Delay>

	sample_count = 64;
 80025c0:	2340      	movs	r3, #64	; 0x40
 80025c2:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025c8:	e06a      	b.n	80026a0 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe ff3a 	bl	8001444 <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80025d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025da:	ee17 3a90 	vmov	r3, s15
 80025de:	b21b      	sxth	r3, r3
 80025e0:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ec:	ee17 3a90 	vmov	r3, s15
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	b21b      	sxth	r3, r3
 8002604:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 8002606:	2300      	movs	r3, #0
 8002608:	86bb      	strh	r3, [r7, #52]	; 0x34
 800260a:	e040      	b.n	800268e <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 800260c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002614:	4413      	add	r3, r2
 8002616:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 800261a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002622:	440b      	add	r3, r1
 8002624:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002628:	429a      	cmp	r2, r3
 800262a:	dd0e      	ble.n	800264a <AK8963_calibrate+0x126>
 800262c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800262e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002636:	440b      	add	r3, r1
 8002638:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800263c:	0053      	lsls	r3, r2, #1
 800263e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002642:	4413      	add	r3, r2
 8002644:	460a      	mov	r2, r1
 8002646:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 800264a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8002658:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002660:	440b      	add	r3, r1
 8002662:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8002666:	429a      	cmp	r2, r3
 8002668:	da0e      	bge.n	8002688 <AK8963_calibrate+0x164>
 800266a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800266c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002674:	440b      	add	r3, r1
 8002676:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800267a:	0053      	lsls	r3, r2, #1
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	460a      	mov	r2, r1
 8002684:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8002688:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800268a:	3301      	adds	r3, #1
 800268c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800268e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002690:	2b02      	cmp	r3, #2
 8002692:	d9bb      	bls.n	800260c <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 8002694:	2087      	movs	r0, #135	; 0x87
 8002696:	f001 f999 	bl	80039cc <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 800269a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800269c:	3301      	adds	r3, #1
 800269e:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d390      	bcc.n	80025ca <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ac:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80026ae:	2300      	movs	r3, #0
 80026b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026b2:	e03c      	b.n	800272e <AK8963_calibrate+0x20a>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 80026b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026be:	440a      	add	r2, r1
 80026c0:	3a30      	subs	r2, #48	; 0x30
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	331c      	adds	r3, #28
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 80026ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026d6:	4413      	add	r3, r2
 80026d8:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80026dc:	461a      	mov	r2, r3
 80026de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026e6:	440b      	add	r3, r1
 80026e8:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80026ec:	4413      	add	r3, r2
 80026ee:	0fda      	lsrs	r2, r3, #31
 80026f0:	4413      	add	r3, r2
 80026f2:	105b      	asrs	r3, r3, #1
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	331c      	adds	r3, #28
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	3312      	adds	r3, #18
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 8002728:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800272a:	3301      	adds	r3, #1
 800272c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800272e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002730:	2b02      	cmp	r3, #2
 8002732:	d9bf      	bls.n	80026b4 <AK8963_calibrate+0x190>
	}
}
 8002734:	bf00      	nop
 8002736:	3738      	adds	r7, #56	; 0x38
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	080150ac 	.word	0x080150ac
 8002740:	080150b4 	.word	0x080150b4
 8002744:	00000000 	.word	0x00000000

08002748 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002778:	ee17 0a90 	vmov	r0, s15
 800277c:	f7fd fee4 	bl	8000548 <__aeabi_f2d>
 8002780:	4604      	mov	r4, r0
 8002782:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8002790:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80027a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 80027d0:	ee17 0a90 	vmov	r0, s15
 80027d4:	f7fd feb8 	bl	8000548 <__aeabi_f2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	ec43 2b11 	vmov	d1, r2, r3
 80027e0:	ec45 4b10 	vmov	d0, r4, r5
 80027e4:	f010 fefe 	bl	80135e4 <atan2>
 80027e8:	ec54 3b10 	vmov	r3, r4, d0
 80027ec:	4618      	mov	r0, r3
 80027ee:	4621      	mov	r1, r4
 80027f0:	f7fe f9fa 	bl	8000be8 <__aeabi_d2f>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd fe8f 	bl	8000548 <__aeabi_f2d>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	ec44 3b10 	vmov	d0, r3, r4
 8002832:	f010 fe7f 	bl	8013534 <asin>
 8002836:	ec54 3b10 	vmov	r3, r4, d0
 800283a:	4618      	mov	r0, r3
 800283c:	4621      	mov	r1, r4
 800283e:	f7fe f9d3 	bl	8000be8 <__aeabi_d2f>
 8002842:	4603      	mov	r3, r0
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef1 7a67 	vneg.f32	s15, s15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800285e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 800286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800287a:	ee17 0a90 	vmov	r0, s15
 800287e:	f7fd fe63 	bl	8000548 <__aeabi_f2d>
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8002892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80028a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80028b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 80028d2:	ee17 0a90 	vmov	r0, s15
 80028d6:	f7fd fe37 	bl	8000548 <__aeabi_f2d>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	ec43 2b11 	vmov	d1, r2, r3
 80028e2:	ec45 4b10 	vmov	d0, r4, r5
 80028e6:	f010 fe7d 	bl	80135e4 <atan2>
 80028ea:	ec54 3b10 	vmov	r3, r4, d0
 80028ee:	4618      	mov	r0, r3
 80028f0:	4621      	mov	r1, r4
 80028f2:	f7fe f979 	bl	8000be8 <__aeabi_d2f>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	615a      	str	r2, [r3, #20]
	inst->yaw	*= 180.0f / M_PI;			// Convert to degrees
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe21 	bl	8000548 <__aeabi_f2d>
 8002906:	a349      	add	r3, pc, #292	; (adr r3, 8002a2c <MPU9250_updateEuler+0x2e4>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fe74 	bl	80005f8 <__aeabi_dmul>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	4618      	mov	r0, r3
 8002916:	4621      	mov	r1, r4
 8002918:	f7fe f966 	bl	8000be8 <__aeabi_d2f>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe0e 	bl	8000548 <__aeabi_f2d>
 800292c:	a33f      	add	r3, pc, #252	; (adr r3, 8002a2c <MPU9250_updateEuler+0x2e4>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f7fd fe61 	bl	80005f8 <__aeabi_dmul>
 8002936:	4603      	mov	r3, r0
 8002938:	460c      	mov	r4, r1
 800293a:	4618      	mov	r0, r3
 800293c:	4621      	mov	r1, r4
 800293e:	f7fe f953 	bl	8000be8 <__aeabi_d2f>
 8002942:	4602      	mov	r2, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fdfb 	bl	8000548 <__aeabi_f2d>
 8002952:	a336      	add	r3, pc, #216	; (adr r3, 8002a2c <MPU9250_updateEuler+0x2e4>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fe4e 	bl	80005f8 <__aeabi_dmul>
 800295c:	4603      	mov	r3, r0
 800295e:	460c      	mov	r4, r1
 8002960:	4618      	mov	r0, r3
 8002962:	4621      	mov	r1, r4
 8002964:	f7fe f940 	bl	8000be8 <__aeabi_d2f>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	615a      	str	r2, [r3, #20]
	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	ed93 7a03 	vldr	s14, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800297a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	ed93 7a04 	vldr	s14, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	ed93 7a05 	vldr	s14, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	edc3 7a05 	vstr	s15, [r3, #20]
	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d509      	bpl.n	80029d4 <MPU9250_updateEuler+0x28c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a28 <MPU9250_updateEuler+0x2e0>
 80029ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80029da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e2:	d509      	bpl.n	80029f8 <MPU9250_updateEuler+0x2b0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80029ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a28 <MPU9250_updateEuler+0x2e0>
 80029ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80029fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d400      	bmi.n	8002a0a <MPU9250_updateEuler+0x2c2>
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 8002a08:	e009      	b.n	8002a1e <MPU9250_updateEuler+0x2d6>
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a10:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a28 <MPU9250_updateEuler+0x2e0>
 8002a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	43b40000 	.word	0x43b40000
 8002a2c:	1a63c1f8 	.word	0x1a63c1f8
 8002a30:	404ca5dc 	.word	0x404ca5dc
 8002a34:	00000000 	.word	0x00000000

08002a38 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b0b2      	sub	sp, #200	; 0xc8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a4e:	eef1 7a67 	vneg.f32	s15, s15
 8002a52:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a5c:	eef1 7a67 	vneg.f32	s15, s15
 8002a60:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd6d 	bl	8000548 <__aeabi_f2d>
 8002a6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8002d30 <MadgwickQuaternionUpdate+0x2f8>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdc0 	bl	80005f8 <__aeabi_dmul>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	4621      	mov	r1, r4
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4bac      	ldr	r3, [pc, #688]	; (8002d38 <MadgwickQuaternionUpdate+0x300>)
 8002a86:	f7fd fee1 	bl	800084c <__aeabi_ddiv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	4621      	mov	r1, r4
 8002a92:	f7fe f8a9 	bl	8000be8 <__aeabi_d2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002aa2:	eef1 7a67 	vneg.f32	s15, s15
 8002aa6:	ee17 3a90 	vmov	r3, s15
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_f2d>
 8002ab0:	a39f      	add	r3, pc, #636	; (adr r3, 8002d30 <MadgwickQuaternionUpdate+0x2f8>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fd9f 	bl	80005f8 <__aeabi_dmul>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b9c      	ldr	r3, [pc, #624]	; (8002d38 <MadgwickQuaternionUpdate+0x300>)
 8002ac8:	f7fd fec0 	bl	800084c <__aeabi_ddiv>
 8002acc:	4603      	mov	r3, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	f7fe f888 	bl	8000be8 <__aeabi_d2f>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ae4:	eef1 7a67 	vneg.f32	s15, s15
 8002ae8:	ee17 3a90 	vmov	r3, s15
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd2b 	bl	8000548 <__aeabi_f2d>
 8002af2:	a38f      	add	r3, pc, #572	; (adr r3, 8002d30 <MadgwickQuaternionUpdate+0x2f8>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fd7e 	bl	80005f8 <__aeabi_dmul>
 8002afc:	4603      	mov	r3, r0
 8002afe:	460c      	mov	r4, r1
 8002b00:	4618      	mov	r0, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <MadgwickQuaternionUpdate+0x300>)
 8002b0a:	f7fd fe9f 	bl	800084c <__aeabi_ddiv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	4618      	mov	r0, r3
 8002b14:	4621      	mov	r1, r4
 8002b16:	f7fe f867 	bl	8000be8 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b2e:	eef1 7a67 	vneg.f32	s15, s15
 8002b32:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8002b66:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b6e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 8002b72:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b7a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8002b7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b86:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8002b8a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002b8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b92:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 8002b96:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8002baa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002bae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bb2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8002bbe:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002bc2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 8002bce:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002bd2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bda:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 8002bde:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002be2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 8002bee:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002bf2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 8002bfe:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002c02:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 8002c0e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002c12:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 8002c1e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002c22:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 8002c2e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c32:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 8002c3e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c42:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c4a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 8002c4e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c52:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8002c5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c62:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c6a:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8002c6e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7a:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002c7e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	f010 fe1b 	bl	80138c8 <sqrtf>
 8002c92:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 8002c96:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	f000 8614 	beq.w	80038ce <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 8002ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002caa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 8002cb6:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002cba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 8002cc6:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002cca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 8002cd6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002cda:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8002ce6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002cea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf2:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002cf6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d02:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002d06:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d12:	eeb0 0a67 	vmov.f32	s0, s15
 8002d16:	f010 fdd7 	bl	80138c8 <sqrtf>
 8002d1a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 8002d1e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	f000 85d2 	beq.w	80038d2 <MadgwickQuaternionUpdate+0xe9a>
 8002d2e:	e005      	b.n	8002d3c <MadgwickQuaternionUpdate+0x304>
 8002d30:	54442d18 	.word	0x54442d18
 8002d34:	400921fb 	.word	0x400921fb
 8002d38:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 8002d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d48:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 8002d4c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d50:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 8002d5c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002d60:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d68:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8002d6c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002d70:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d78:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8002d7c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d84:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8002d90:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d98:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 8002da4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002da8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dac:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8002db8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002dbc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dc0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002dcc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002dd0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002ddc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002de8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002dec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002df8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002dfc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002e0c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002e10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e14:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e20:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002e24:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e2c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e38:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002e3c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e48:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002e4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8002e5c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e60:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e68:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e6c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e78:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e7c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e88:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002e8c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e9c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ea8:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002eac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb8:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002ebc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed0:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002ed4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 8002ee4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ee8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002ef4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	eeb0 0a67 	vmov.f32	s0, s15
 8002f04:	f010 fce0 	bl	80138c8 <sqrtf>
 8002f08:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8002f0c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002f10:	eeb1 7a67 	vneg.f32	s14, s15
 8002f14:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002f20:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f2c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f30:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002f40:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f4c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f50:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f5c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002f60:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f68:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f74:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f84:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f88:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8002f98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8002fa4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fa8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002fb0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002fb4:	eeb1 7a67 	vneg.f32	s14, s15
 8002fb8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002fbc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fc0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002fc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fc8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002fcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fd8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fdc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002fe0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fe4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fe8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002ffc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003000:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003004:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003008:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800300c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003010:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003014:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003018:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800301c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003020:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003024:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003028:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800302c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003030:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003034:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003038:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800303c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003048:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800304c:	eef1 6a67 	vneg.f32	s13, s15
 8003050:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003058:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800305c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003060:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003064:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003068:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800306c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003070:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003074:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003078:	ee26 6a27 	vmul.f32	s12, s12, s15
 800307c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003080:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003084:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003088:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800308c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003090:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003094:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003098:	ee76 7a67 	vsub.f32	s15, s12, s15
 800309c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80030a8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80030ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030b0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80030b4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80030b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80030c4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80030c8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80030cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80030d0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80030d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80030d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80030e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80030e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80030f8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80030fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003100:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003104:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003108:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800310c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003110:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003118:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800311c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003120:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003124:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003128:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800312c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003130:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003140:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003144:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003148:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800314c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003150:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003154:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003158:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800315c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003160:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003164:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003168:	ee76 7a67 	vsub.f32	s15, s12, s15
 800316c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003174:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003178:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800317c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003180:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003184:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003188:	ee36 6a67 	vsub.f32	s12, s12, s15
 800318c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003190:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003194:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003198:	ee26 6a27 	vmul.f32	s12, s12, s15
 800319c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80031a0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80031a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80031a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031b4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80031b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80031c8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80031cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031d0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80031d4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80031d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031e0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80031e4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80031e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80031ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031f4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80031f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031fc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003200:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003204:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003208:	ee36 6a27 	vadd.f32	s12, s12, s15
 800320c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003210:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003218:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003220:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003228:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800322c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003230:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003234:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003238:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800323c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003240:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003244:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003248:	ee26 6a27 	vmul.f32	s12, s12, s15
 800324c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003250:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003254:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003258:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800325c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003260:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003264:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003268:	ee36 6a27 	vadd.f32	s12, s12, s15
 800326c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003270:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327c:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003280:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003284:	eeb1 7a67 	vneg.f32	s14, s15
 8003288:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800328c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003290:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003294:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003298:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800329c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80032a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032ac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80032b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032b4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80032b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80032c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032cc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80032d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80032d4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80032d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80032e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032f0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80032f4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003300:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003304:	eef1 6a67 	vneg.f32	s13, s15
 8003308:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800330c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003310:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003314:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003318:	ee66 7a27 	vmul.f32	s15, s12, s15
 800331c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003320:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003324:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003328:	ee36 6a67 	vsub.f32	s12, s12, s15
 800332c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003330:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003338:	ee26 6a27 	vmul.f32	s12, s12, s15
 800333c:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003340:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003344:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003348:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800334c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003350:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003354:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003358:	ee76 7a67 	vsub.f32	s15, s12, s15
 800335c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003364:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003368:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800336c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003370:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003374:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800337c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003380:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8003384:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003388:	ee36 6a67 	vsub.f32	s12, s12, s15
 800338c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003390:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003394:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003398:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800339c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80033a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033ac:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033bc:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80033c0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80033c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033c8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80033cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80033d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033d8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80033dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80033e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033ec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80033f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80033f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80033f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003400:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003404:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003408:	ee36 6a27 	vadd.f32	s12, s12, s15
 800340c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003410:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341c:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003420:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003424:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003428:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800342c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003430:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003438:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800343c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003440:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003444:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003448:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800344c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003450:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003454:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003458:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800345c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003468:	eef1 6a67 	vneg.f32	s13, s15
 800346c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003470:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003474:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003478:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800347c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003480:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003484:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003488:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800348c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003490:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003494:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003498:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800349c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034a0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80034a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80034a8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80034ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80034b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80034b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80034b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80034cc:	eef1 6a67 	vneg.f32	s13, s15
 80034d0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80034d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034d8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80034dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80034e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80034e8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80034ec:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80034f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80034f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80034f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034fc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003500:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003504:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003508:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800350c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003510:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003514:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003518:	ee76 7a67 	vsub.f32	s15, s12, s15
 800351c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003524:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003528:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800352c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003530:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8003534:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003538:	ee36 6a27 	vadd.f32	s12, s12, s15
 800353c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003540:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003544:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003548:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800354c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003550:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003554:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003558:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800355c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003560:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003564:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003568:	ee76 7a67 	vsub.f32	s15, s12, s15
 800356c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003574:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8003578:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800357c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003584:	edd7 6a08 	vldr	s13, [r7, #32]
 8003588:	edd7 7a08 	vldr	s15, [r7, #32]
 800358c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003594:	edd7 6a07 	vldr	s13, [r7, #28]
 8003598:	edd7 7a07 	vldr	s15, [r7, #28]
 800359c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a4:	edd7 6a06 	vldr	s13, [r7, #24]
 80035a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80035ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	eeb0 0a67 	vmov.f32	s0, s15
 80035b8:	f010 f986 	bl	80138c8 <sqrtf>
 80035bc:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 80035c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80035c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035cc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 80035d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80035d4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 80035e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80035e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 80035f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fc:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 8003600:	ed97 7a06 	vldr	s14, [r7, #24]
 8003604:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360c:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 8003610:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003614:	eeb1 7a67 	vneg.f32	s14, s15
 8003618:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800361c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003620:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003624:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800362c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003630:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8003634:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003644:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003648:	ee17 0a90 	vmov	r0, s15
 800364c:	f7fc ff7c 	bl	8000548 <__aeabi_f2d>
 8003650:	4604      	mov	r4, r0
 8003652:	460d      	mov	r5, r1
 8003654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003656:	f7fc ff77 	bl	8000548 <__aeabi_f2d>
 800365a:	a3a1      	add	r3, pc, #644	; (adr r3, 80038e0 <MadgwickQuaternionUpdate+0xea8>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ffca 	bl	80005f8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4620      	mov	r0, r4
 800366a:	4629      	mov	r1, r5
 800366c:	f7fc fe0c 	bl	8000288 <__aeabi_dsub>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	4618      	mov	r0, r3
 8003676:	4621      	mov	r1, r4
 8003678:	f7fd fab6 	bl	8000be8 <__aeabi_d2f>
 800367c:	4603      	mov	r3, r0
 800367e:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8003680:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003684:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800368c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003690:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800369c:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80036a0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80036a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036b4:	ee17 0a90 	vmov	r0, s15
 80036b8:	f7fc ff46 	bl	8000548 <__aeabi_f2d>
 80036bc:	4604      	mov	r4, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	6a38      	ldr	r0, [r7, #32]
 80036c2:	f7fc ff41 	bl	8000548 <__aeabi_f2d>
 80036c6:	a386      	add	r3, pc, #536	; (adr r3, 80038e0 <MadgwickQuaternionUpdate+0xea8>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc ff94 	bl	80005f8 <__aeabi_dmul>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4620      	mov	r0, r4
 80036d6:	4629      	mov	r1, r5
 80036d8:	f7fc fdd6 	bl	8000288 <__aeabi_dsub>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4618      	mov	r0, r3
 80036e2:	4621      	mov	r1, r4
 80036e4:	f7fd fa80 	bl	8000be8 <__aeabi_d2f>
 80036e8:	4603      	mov	r3, r0
 80036ea:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 80036ec:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80036f0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80036f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f8:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80036fc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003708:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800370c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800371c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003720:	ee17 0a90 	vmov	r0, s15
 8003724:	f7fc ff10 	bl	8000548 <__aeabi_f2d>
 8003728:	4604      	mov	r4, r0
 800372a:	460d      	mov	r5, r1
 800372c:	69f8      	ldr	r0, [r7, #28]
 800372e:	f7fc ff0b 	bl	8000548 <__aeabi_f2d>
 8003732:	a36b      	add	r3, pc, #428	; (adr r3, 80038e0 <MadgwickQuaternionUpdate+0xea8>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc ff5e 	bl	80005f8 <__aeabi_dmul>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4620      	mov	r0, r4
 8003742:	4629      	mov	r1, r5
 8003744:	f7fc fda0 	bl	8000288 <__aeabi_dsub>
 8003748:	4603      	mov	r3, r0
 800374a:	460c      	mov	r4, r1
 800374c:	4618      	mov	r0, r3
 800374e:	4621      	mov	r1, r4
 8003750:	f7fd fa4a 	bl	8000be8 <__aeabi_d2f>
 8003754:	4603      	mov	r3, r0
 8003756:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 8003758:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800375c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003764:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8003768:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800376c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003774:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003778:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800377c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003784:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378c:	ee17 0a90 	vmov	r0, s15
 8003790:	f7fc feda 	bl	8000548 <__aeabi_f2d>
 8003794:	4604      	mov	r4, r0
 8003796:	460d      	mov	r5, r1
 8003798:	69b8      	ldr	r0, [r7, #24]
 800379a:	f7fc fed5 	bl	8000548 <__aeabi_f2d>
 800379e:	a350      	add	r3, pc, #320	; (adr r3, 80038e0 <MadgwickQuaternionUpdate+0xea8>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc ff28 	bl	80005f8 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	f7fc fd6a 	bl	8000288 <__aeabi_dsub>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4618      	mov	r0, r3
 80037ba:	4621      	mov	r1, r4
 80037bc:	f7fd fa14 	bl	8000be8 <__aeabi_d2f>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80037f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800380a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8003818:	edd7 7a02 	vldr	s15, [r7, #8]
 800381c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003820:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003828:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800382c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003830:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003838:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800383c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003848:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800384c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003858:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800385c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	f010 f82c 	bl	80138c8 <sqrtf>
 8003870:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8003874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003878:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800387c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003880:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 8003884:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003888:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800388c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	inst->q[1] = q2 * norm;
 8003896:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800389a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800389e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	inst->q[2] = q3 * norm;
 80038a8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80038ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80038b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	inst->q[3] = q4 * norm;
 80038ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80038be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80038c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 80038cc:	e002      	b.n	80038d4 <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 80038d2:	bf00      	nop

}
 80038d4:	37c8      	adds	r7, #200	; 0xc8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	bf00      	nop
 80038dc:	f3af 8000 	nop.w
 80038e0:	89f0ed0f 	.word	0x89f0ed0f
 80038e4:	3fed0552 	.word	0x3fed0552

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f94d 	bl	8003bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	2000      	movs	r0, #0
 8003918:	f000 f808 	bl	800392c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f00a ff96 	bl	800e84c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_InitTick+0x54>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_InitTick+0x58>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4619      	mov	r1, r3
 800393e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003942:	fbb3 f3f1 	udiv	r3, r3, r1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f965 	bl	8003c1a <HAL_SYSTICK_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00e      	b.n	8003978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d80a      	bhi.n	8003976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f000 f92d 	bl	8003bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800396c:	4a06      	ldr	r2, [pc, #24]	; (8003988 <HAL_InitTick+0x5c>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000015c 	.word	0x2000015c
 8003984:	20000004 	.word	0x20000004
 8003988:	20000000 	.word	0x20000000

0800398c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_IncTick+0x20>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_IncTick+0x24>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_IncTick+0x24>)
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000004 	.word	0x20000004
 80039b0:	2000450c 	.word	0x2000450c

080039b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return uwTick;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_GetTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	2000450c 	.word	0x2000450c

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff ffee 	bl	80039b4 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d005      	beq.n	80039f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_Delay+0x40>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039f2:	bf00      	nop
 80039f4:	f7ff ffde 	bl	80039b4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8f7      	bhi.n	80039f4 <HAL_Delay+0x28>
  {
  }
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000004 	.word	0x20000004

08003a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a42:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <__NVIC_SetPriorityGrouping+0x44>)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	60d3      	str	r3, [r2, #12]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <__NVIC_GetPriorityGrouping+0x18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	f003 0307 	and.w	r3, r3, #7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db0b      	blt.n	8003a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	f003 021f 	and.w	r2, r3, #31
 8003a8c:	4907      	ldr	r1, [pc, #28]	; (8003aac <__NVIC_EnableIRQ+0x38>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	2001      	movs	r0, #1
 8003a96:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	; (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b7c:	d301      	bcc.n	8003b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e00f      	b.n	8003ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <SysTick_Config+0x40>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	f7ff ff8e 	bl	8003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <SysTick_Config+0x40>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <SysTick_Config+0x40>)
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	e000e010 	.word	0xe000e010

08003bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff29 	bl	8003a10 <__NVIC_SetPriorityGrouping>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd8:	f7ff ff3e 	bl	8003a58 <__NVIC_GetPriorityGrouping>
 8003bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff ff8e 	bl	8003b04 <NVIC_EncodePriority>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff5d 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b082      	sub	sp, #8
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff31 	bl	8003a74 <__NVIC_EnableIRQ>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffa2 	bl	8003b6c <SysTick_Config>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c40:	f7ff feb8 	bl	80039b4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e099      	b.n	8003d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c70:	e00f      	b.n	8003c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c72:	f7ff fe9f 	bl	80039b4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d908      	bls.n	8003c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e078      	b.n	8003d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e8      	bne.n	8003c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_DMA_Init+0x158>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d107      	bne.n	8003cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0307 	bic.w	r3, r3, #7
 8003d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d117      	bne.n	8003d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00e      	beq.n	8003d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa99 	bl	8004270 <DMA_CheckFifoParam>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2240      	movs	r2, #64	; 0x40
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d52:	2301      	movs	r3, #1
 8003d54:	e016      	b.n	8003d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa50 	bl	8004204 <DMA_CalcBaseAndBitshift>
 8003d64:	4603      	mov	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	223f      	movs	r2, #63	; 0x3f
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	f010803f 	.word	0xf010803f

08003d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_DMA_Start_IT+0x26>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e048      	b.n	8003e48 <HAL_DMA_Start_IT+0xb8>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d137      	bne.n	8003e3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f9e2 	bl	80041a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	223f      	movs	r2, #63	; 0x3f
 8003dea:	409a      	lsls	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0216 	orr.w	r2, r2, #22
 8003dfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e0e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0208 	orr.w	r2, r2, #8
 8003e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	e005      	b.n	8003e46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
 8003e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ea0:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_DMA_IRQHandler+0x258>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a92      	ldr	r2, [pc, #584]	; (80040f0 <HAL_DMA_IRQHandler+0x25c>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01a      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0204 	bic.w	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2208      	movs	r2, #8
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2201      	movs	r2, #1
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2204      	movs	r2, #4
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	2210      	movs	r2, #16
 8003f72:	409a      	lsls	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d043      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03c      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	2210      	movs	r2, #16
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d018      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d024      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e01f      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
 8003fd4:	e016      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0208 	bic.w	r2, r2, #8
 8003ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	2220      	movs	r2, #32
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 808e 	beq.w	8004132 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8086 	beq.w	8004132 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b05      	cmp	r3, #5
 800403c:	d136      	bne.n	80040ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0216 	bic.w	r2, r2, #22
 800404c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800405c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_DMA_IRQHandler+0x1da>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0208 	bic.w	r2, r2, #8
 800407c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	223f      	movs	r2, #63	; 0x3f
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d07d      	beq.n	800419e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
        }
        return;
 80040aa:	e078      	b.n	800419e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01c      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d108      	bne.n	80040da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d030      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e02b      	b.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
 80040ea:	e022      	b.n	8004132 <HAL_DMA_IRQHandler+0x29e>
 80040ec:	2000015c 	.word	0x2000015c
 80040f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0210 	bic.w	r2, r2, #16
 8004110:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	2b00      	cmp	r3, #0
 8004138:	d032      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3301      	adds	r3, #1
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	429a      	cmp	r2, r3
 8004168:	d307      	bcc.n	800417a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f2      	bne.n	800415e <HAL_DMA_IRQHandler+0x2ca>
 8004178:	e000      	b.n	800417c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800417a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
 800419c:	e000      	b.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800419e:	bf00      	nop
    }
  }
}
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop

080041a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b10      	subs	r3, #16
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <DMA_CalcBaseAndBitshift+0x64>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x68>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d909      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	e007      	b.n	8004256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	080151ec 	.word	0x080151ec

08004270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d855      	bhi.n	800433c <DMA_CheckFifoParam+0xcc>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x28>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	0800433d 	.word	0x0800433d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d045      	beq.n	8004340 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e042      	b.n	8004340 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c2:	d13f      	bne.n	8004344 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e03c      	b.n	8004344 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d121      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d836      	bhi.n	8004348 <DMA_CheckFifoParam+0xd8>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e02f      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d024      	beq.n	800434c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e021      	b.n	800434c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004310:	d11e      	bne.n	8004350 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004316:	e01b      	b.n	8004350 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <DMA_CheckFifoParam+0xb4>
 800431e:	2b03      	cmp	r3, #3
 8004320:	d003      	beq.n	800432a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004322:	e018      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e015      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00e      	beq.n	8004354 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
      break;
 800433a:	e00b      	b.n	8004354 <DMA_CheckFifoParam+0xe4>
      break;
 800433c:	bf00      	nop
 800433e:	e00a      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 8004340:	bf00      	nop
 8004342:	e008      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 8004344:	bf00      	nop
 8004346:	e006      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 8004348:	bf00      	nop
 800434a:	e004      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;   
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 8004354:	bf00      	nop
    }
  } 
  
  return status; 
 8004356:	7bfb      	ldrb	r3, [r7, #15]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e16b      	b.n	8004658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	f040 815a 	bne.w	8004652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_Init+0x4a>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b12      	cmp	r3, #18
 80043ac:	d123      	bne.n	80043f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	08da      	lsrs	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3208      	adds	r2, #8
 80043b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	2203      	movs	r2, #3
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0203 	and.w	r2, r3, #3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d00b      	beq.n	800444a <HAL_GPIO_Init+0xe6>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800443e:	2b11      	cmp	r3, #17
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b12      	cmp	r3, #18
 8004448:	d130      	bne.n	80044ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004480:	2201      	movs	r2, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 0201 	and.w	r2, r3, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80b4 	beq.w	8004652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_GPIO_Init+0x308>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	4a5e      	ldr	r2, [pc, #376]	; (800466c <HAL_GPIO_Init+0x308>)
 80044f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f8:	6453      	str	r3, [r2, #68]	; 0x44
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_GPIO_Init+0x308>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004506:	4a5a      	ldr	r2, [pc, #360]	; (8004670 <HAL_GPIO_Init+0x30c>)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	3302      	adds	r3, #2
 800450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	220f      	movs	r2, #15
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a51      	ldr	r2, [pc, #324]	; (8004674 <HAL_GPIO_Init+0x310>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02b      	beq.n	800458a <HAL_GPIO_Init+0x226>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a50      	ldr	r2, [pc, #320]	; (8004678 <HAL_GPIO_Init+0x314>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d025      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4f      	ldr	r2, [pc, #316]	; (800467c <HAL_GPIO_Init+0x318>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4e      	ldr	r2, [pc, #312]	; (8004680 <HAL_GPIO_Init+0x31c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_Init+0x21a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4d      	ldr	r2, [pc, #308]	; (8004684 <HAL_GPIO_Init+0x320>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_Init+0x216>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4c      	ldr	r2, [pc, #304]	; (8004688 <HAL_GPIO_Init+0x324>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_Init+0x212>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <HAL_GPIO_Init+0x328>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x20e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4a      	ldr	r2, [pc, #296]	; (8004690 <HAL_GPIO_Init+0x32c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_Init+0x20a>
 800456a:	2307      	movs	r3, #7
 800456c:	e00e      	b.n	800458c <HAL_GPIO_Init+0x228>
 800456e:	2308      	movs	r3, #8
 8004570:	e00c      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004572:	2306      	movs	r3, #6
 8004574:	e00a      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004576:	2305      	movs	r3, #5
 8004578:	e008      	b.n	800458c <HAL_GPIO_Init+0x228>
 800457a:	2304      	movs	r3, #4
 800457c:	e006      	b.n	800458c <HAL_GPIO_Init+0x228>
 800457e:	2303      	movs	r3, #3
 8004580:	e004      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004582:	2302      	movs	r3, #2
 8004584:	e002      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_GPIO_Init+0x228>
 800458a:	2300      	movs	r3, #0
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f002 0203 	and.w	r2, r2, #3
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	4093      	lsls	r3, r2
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800459c:	4934      	ldr	r1, [pc, #208]	; (8004670 <HAL_GPIO_Init+0x30c>)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	3302      	adds	r3, #2
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <HAL_GPIO_Init+0x330>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045ce:	4a31      	ldr	r2, [pc, #196]	; (8004694 <HAL_GPIO_Init+0x330>)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045d4:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_GPIO_Init+0x330>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045f8:	4a26      	ldr	r2, [pc, #152]	; (8004694 <HAL_GPIO_Init+0x330>)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_GPIO_Init+0x330>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004622:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <HAL_GPIO_Init+0x330>)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <HAL_GPIO_Init+0x330>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <HAL_GPIO_Init+0x330>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	f67f ae90 	bls.w	8004380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004660:	bf00      	nop
 8004662:	3724      	adds	r7, #36	; 0x24
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40023800 	.word	0x40023800
 8004670:	40013800 	.word	0x40013800
 8004674:	40020000 	.word	0x40020000
 8004678:	40020400 	.word	0x40020400
 800467c:	40020800 	.word	0x40020800
 8004680:	40020c00 	.word	0x40020c00
 8004684:	40021000 	.word	0x40021000
 8004688:	40021400 	.word	0x40021400
 800468c:	40021800 	.word	0x40021800
 8004690:	40021c00 	.word	0x40021c00
 8004694:	40013c00 	.word	0x40013c00

08004698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	887b      	ldrh	r3, [r7, #2]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
 80046b4:	e001      	b.n	80046ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	807b      	strh	r3, [r7, #2]
 80046d4:	4613      	mov	r3, r2
 80046d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d8:	787b      	ldrb	r3, [r7, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046e4:	e003      	b.n	80046ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046e6:	887b      	ldrh	r3, [r7, #2]
 80046e8:	041a      	lsls	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	619a      	str	r2, [r3, #24]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e10f      	b.n	800492e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f00a f8ba 	bl	800e89c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004740:	f002 fcc8 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8004744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4a7b      	ldr	r2, [pc, #492]	; (8004938 <HAL_I2C_Init+0x23c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d807      	bhi.n	8004760 <HAL_I2C_Init+0x64>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a7a      	ldr	r2, [pc, #488]	; (800493c <HAL_I2C_Init+0x240>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e006      	b.n	800476e <HAL_I2C_Init+0x72>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a77      	ldr	r2, [pc, #476]	; (8004940 <HAL_I2C_Init+0x244>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0db      	b.n	800492e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a72      	ldr	r2, [pc, #456]	; (8004944 <HAL_I2C_Init+0x248>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a64      	ldr	r2, [pc, #400]	; (8004938 <HAL_I2C_Init+0x23c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d802      	bhi.n	80047b0 <HAL_I2C_Init+0xb4>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3301      	adds	r3, #1
 80047ae:	e009      	b.n	80047c4 <HAL_I2C_Init+0xc8>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	4a63      	ldr	r2, [pc, #396]	; (8004948 <HAL_I2C_Init+0x24c>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	3301      	adds	r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4956      	ldr	r1, [pc, #344]	; (8004938 <HAL_I2C_Init+0x23c>)
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d80d      	bhi.n	8004800 <HAL_I2C_Init+0x104>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e59      	subs	r1, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	bf38      	it	cc
 80047fc:	2304      	movcc	r3, #4
 80047fe:	e04f      	b.n	80048a0 <HAL_I2C_Init+0x1a4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d111      	bne.n	800482c <HAL_I2C_Init+0x130>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	440b      	add	r3, r1
 8004816:	fbb0 f3f3 	udiv	r3, r0, r3
 800481a:	3301      	adds	r3, #1
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e012      	b.n	8004852 <HAL_I2C_Init+0x156>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1e58      	subs	r0, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	0099      	lsls	r1, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004842:	3301      	adds	r3, #1
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x15e>
 8004856:	2301      	movs	r3, #1
 8004858:	e022      	b.n	80048a0 <HAL_I2C_Init+0x1a4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <HAL_I2C_Init+0x184>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1e58      	subs	r0, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	440b      	add	r3, r1
 8004870:	fbb0 f3f3 	udiv	r3, r0, r3
 8004874:	3301      	adds	r3, #1
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	e00f      	b.n	80048a0 <HAL_I2C_Init+0x1a4>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1e58      	subs	r0, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	0099      	lsls	r1, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	fbb0 f3f3 	udiv	r3, r0, r3
 8004896:	3301      	adds	r3, #1
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	6809      	ldr	r1, [r1, #0]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6911      	ldr	r1, [r2, #16]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	000186a0 	.word	0x000186a0
 800493c:	001e847f 	.word	0x001e847f
 8004940:	003d08ff 	.word	0x003d08ff
 8004944:	431bde83 	.word	0x431bde83
 8004948:	10624dd3 	.word	0x10624dd3

0800494c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	460b      	mov	r3, r1
 8004960:	813b      	strh	r3, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004966:	f7ff f825 	bl	80039b4 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b20      	cmp	r3, #32
 8004976:	f040 80d9 	bne.w	8004b2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2319      	movs	r3, #25
 8004980:	2201      	movs	r2, #1
 8004982:	496d      	ldr	r1, [pc, #436]	; (8004b38 <HAL_I2C_Mem_Write+0x1ec>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fc5b 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	e0cc      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_I2C_Mem_Write+0x56>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0c5      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d007      	beq.n	80049c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2221      	movs	r2, #33	; 0x21
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2240      	movs	r2, #64	; 0x40
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4a4d      	ldr	r2, [pc, #308]	; (8004b3c <HAL_I2C_Mem_Write+0x1f0>)
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0a:	88f8      	ldrh	r0, [r7, #6]
 8004a0c:	893a      	ldrh	r2, [r7, #8]
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	9301      	str	r3, [sp, #4]
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4603      	mov	r3, r0
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fab6 	bl	8004f8c <I2C_RequestMemoryWrite>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d052      	beq.n	8004acc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e081      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fcdc 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00d      	beq.n	8004a56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d107      	bne.n	8004a52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06b      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d11b      	bne.n	8004acc <HAL_I2C_Mem_Write+0x180>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d017      	beq.n	8004acc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1aa      	bne.n	8004a2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fcc8 	bl	800546e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d107      	bne.n	8004afc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e016      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	00100002 	.word	0x00100002
 8004b3c:	ffff0000 	.word	0xffff0000

08004b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b5a:	f7fe ff2b 	bl	80039b4 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	f040 8208 	bne.w	8004f7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2319      	movs	r3, #25
 8004b74:	2201      	movs	r2, #1
 8004b76:	497b      	ldr	r1, [pc, #492]	; (8004d64 <HAL_I2C_Mem_Read+0x224>)
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fb61 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
 8004b86:	e1fb      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_I2C_Mem_Read+0x56>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e1f4      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d007      	beq.n	8004bbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2222      	movs	r2, #34	; 0x22
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a5b      	ldr	r2, [pc, #364]	; (8004d68 <HAL_I2C_Mem_Read+0x228>)
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bfe:	88f8      	ldrh	r0, [r7, #6]
 8004c00:	893a      	ldrh	r2, [r7, #8]
 8004c02:	8979      	ldrh	r1, [r7, #10]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fa46 	bl	80050a0 <I2C_RequestMemoryRead>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1b0      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	623b      	str	r3, [r7, #32]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	623b      	str	r3, [r7, #32]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e184      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d11b      	bne.n	8004c8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e164      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d11b      	bne.n	8004cce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	e144      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ce4:	e138      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	f200 80f1 	bhi.w	8004ed2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d123      	bne.n	8004d40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fbf7 	bl	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e139      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d3e:	e10b      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d14e      	bne.n	8004de6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4906      	ldr	r1, [pc, #24]	; (8004d6c <HAL_I2C_Mem_Read+0x22c>)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fa74 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e10e      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
 8004d62:	bf00      	nop
 8004d64:	00100002 	.word	0x00100002
 8004d68:	ffff0000 	.word	0xffff0000
 8004d6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de4:	e0b8      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2200      	movs	r2, #0
 8004dee:	4966      	ldr	r1, [pc, #408]	; (8004f88 <HAL_I2C_Mem_Read+0x448>)
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa25 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0bf      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2200      	movs	r2, #0
 8004e4a:	494f      	ldr	r1, [pc, #316]	; (8004f88 <HAL_I2C_Mem_Read+0x448>)
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f9f7 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e091      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed0:	e042      	b.n	8004f58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fb0a 	bl	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e04c      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d118      	bne.n	8004f58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f47f aec2 	bne.w	8004ce6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3728      	adds	r7, #40	; 0x28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	00010004 	.word	0x00010004

08004f8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 f93c 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e05f      	b.n	8005092 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	492d      	ldr	r1, [pc, #180]	; (800509c <I2C_RequestMemoryWrite+0x110>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f980 	bl	80052ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04c      	b.n	8005092 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f9ea 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e02b      	b.n	8005092 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	e021      	b.n	8005090 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f9c4 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e005      	b.n	8005092 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00010002 	.word	0x00010002

080050a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	460b      	mov	r3, r1
 80050b4:	813b      	strh	r3, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f8aa 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e09e      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f6:	897b      	ldrh	r3, [r7, #10]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	494c      	ldr	r1, [pc, #304]	; (800523c <I2C_RequestMemoryRead+0x19c>)
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f8ee 	bl	80052ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e08b      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	6a39      	ldr	r1, [r7, #32]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f958 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b04      	cmp	r3, #4
 8005148:	d107      	bne.n	800515a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06a      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d105      	bne.n	8005170 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005164:	893b      	ldrh	r3, [r7, #8]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]
 800516e:	e021      	b.n	80051b4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	0a1b      	lsrs	r3, r3, #8
 8005174:	b29b      	uxth	r3, r3
 8005176:	b2da      	uxtb	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005180:	6a39      	ldr	r1, [r7, #32]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f932 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2b04      	cmp	r3, #4
 8005194:	d107      	bne.n	80051a6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e044      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051aa:	893b      	ldrh	r3, [r7, #8]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	6a39      	ldr	r1, [r7, #32]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f917 	bl	80053ec <I2C_WaitOnTXEFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e029      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f81f 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e013      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800520c:	897b      	ldrh	r3, [r7, #10]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	6a3a      	ldr	r2, [r7, #32]
 8005220:	4906      	ldr	r1, [pc, #24]	; (800523c <I2C_RequestMemoryRead+0x19c>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f863 	bl	80052ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	00010002 	.word	0x00010002

08005240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005250:	e025      	b.n	800529e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d021      	beq.n	800529e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7fe fbab 	bl	80039b4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d116      	bne.n	800529e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e023      	b.n	80052e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d10d      	bne.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	43da      	mvns	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	e00c      	b.n	80052de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	43da      	mvns	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4013      	ands	r3, r2
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf0c      	ite	eq
 80052d6:	2301      	moveq	r3, #1
 80052d8:	2300      	movne	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d0b6      	beq.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fc:	e051      	b.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d123      	bne.n	8005356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f043 0204 	orr.w	r2, r3, #4
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e046      	b.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d021      	beq.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fe fb29 	bl	80039b4 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e020      	b.n	80053e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10c      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	e00b      	b.n	80053de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	43da      	mvns	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4013      	ands	r3, r2
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d18d      	bne.n	80052fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f8:	e02d      	b.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8ce 	bl	800559c <I2C_IsAcknowledgeFailed>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e02d      	b.n	8005466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d021      	beq.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fe facf 	bl	80039b4 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d116      	bne.n	8005456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e007      	b.n	8005466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d1ca      	bne.n	80053fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800547a:	e02d      	b.n	80054d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f88d 	bl	800559c <I2C_IsAcknowledgeFailed>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e02d      	b.n	80054e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d021      	beq.n	80054d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005494:	f7fe fa8e 	bl	80039b4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e007      	b.n	80054e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d1ca      	bne.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054fc:	e042      	b.n	8005584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d119      	bne.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0210 	mvn.w	r2, #16
 8005514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e029      	b.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fe fa38 	bl	80039b4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d1b5      	bne.n	80054fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b2:	d11b      	bne.n	80055ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fc:	b08f      	sub	sp, #60	; 0x3c
 80055fe:	af0a      	add	r7, sp, #40	; 0x28
 8005600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e10f      	b.n	800582c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f009 fdba 	bl	800f1a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2203      	movs	r2, #3
 8005630:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f005 faa3 	bl	800ab96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	687e      	ldr	r6, [r7, #4]
 8005658:	466d      	mov	r5, sp
 800565a:	f106 0410 	add.w	r4, r6, #16
 800565e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005666:	e894 0003 	ldmia.w	r4, {r0, r1}
 800566a:	e885 0003 	stmia.w	r5, {r0, r1}
 800566e:	1d33      	adds	r3, r6, #4
 8005670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f005 f97a 	bl	800a96c <USB_CoreInit>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0d0      	b.n	800582c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2100      	movs	r1, #0
 8005690:	4618      	mov	r0, r3
 8005692:	f005 fa91 	bl	800abb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
 800569a:	e04a      	b.n	8005732 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	333d      	adds	r3, #61	; 0x3d
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	333c      	adds	r3, #60	; 0x3c
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	b298      	uxth	r0, r3
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	3342      	adds	r3, #66	; 0x42
 80056d8:	4602      	mov	r2, r0
 80056da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	333f      	adds	r3, #63	; 0x3f
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3344      	adds	r3, #68	; 0x44
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3348      	adds	r3, #72	; 0x48
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	3350      	adds	r3, #80	; 0x50
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	3301      	adds	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d3af      	bcc.n	800569c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e044      	b.n	80057cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005758:	7bfa      	ldrb	r2, [r7, #15]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800576e:	7bfa      	ldrb	r2, [r7, #15]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005784:	7bfa      	ldrb	r2, [r7, #15]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800579a:	7bfa      	ldrb	r2, [r7, #15]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	3301      	adds	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d3b5      	bcc.n	8005742 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	687e      	ldr	r6, [r7, #4]
 80057de:	466d      	mov	r5, sp
 80057e0:	f106 0410 	add.w	r4, r6, #16
 80057e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80057f4:	1d33      	adds	r3, r6, #4
 80057f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057f8:	6838      	ldr	r0, [r7, #0]
 80057fa:	f005 fa07 	bl	800ac0c <USB_DevInit>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e00d      	b.n	800582c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f006 f9fc 	bl	800bc22 <USB_DevDisconnect>

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005834 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_PCD_Start+0x1c>
 800584c:	2302      	movs	r3, #2
 800584e:	e020      	b.n	8005892 <HAL_PCD_Start+0x5e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	2b01      	cmp	r3, #1
 800585e:	d109      	bne.n	8005874 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005864:	2b01      	cmp	r3, #1
 8005866:	d005      	beq.n	8005874 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f006 f9ba 	bl	800bbf2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f005 f976 	bl	800ab74 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800589a:	b590      	push	{r4, r7, lr}
 800589c:	b08d      	sub	sp, #52	; 0x34
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f006 fa61 	bl	800bd78 <USB_GetMode>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 838e 	bne.w	8005fda <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f006 f9c5 	bl	800bc52 <USB_ReadInterrupts>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8384 	beq.w	8005fd8 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f006 f9bc 	bl	800bc52 <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d107      	bne.n	80058f4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f002 0202 	and.w	r2, r2, #2
 80058f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 f9aa 	bl	800bc52 <USB_ReadInterrupts>
 80058fe:	4603      	mov	r3, r0
 8005900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005904:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005908:	d17b      	bne.n	8005a02 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f006 f9b0 	bl	800bc78 <USB_ReadDevAllOutEpInterrupt>
 8005918:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800591a:	e06f      	b.n	80059fc <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d064      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f006 f9d5 	bl	800bce0 <USB_ReadDevOutEPInterrupt>
 8005936:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00c      	beq.n	800595c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	461a      	mov	r2, r3
 8005950:	2301      	movs	r3, #1
 8005952:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fe0e 	bl	8006578 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 ff0d 	bl	8006788 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	2308      	movs	r3, #8
 800597e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	461a      	mov	r2, r3
 8005998:	2310      	movs	r3, #16
 800599a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d015      	beq.n	80059d2 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d108      	bne.n	80059c0 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059b8:	461a      	mov	r2, r3
 80059ba:	2101      	movs	r1, #1
 80059bc:	f006 fa20 	bl	800be00 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	2320      	movs	r3, #32
 80059d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	461a      	mov	r2, r3
 80059ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	3301      	adds	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d18c      	bne.n	800591c <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f006 f923 	bl	800bc52 <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a16:	f040 80c4 	bne.w	8005ba2 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f006 f944 	bl	800bcac <USB_ReadDevAllInEpInterrupt>
 8005a24:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a2a:	e0b6      	b.n	8005b9a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80ab 	beq.w	8005b8e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	4611      	mov	r1, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f006 f96a 	bl	800bd1c <USB_ReadDevInEPInterrupt>
 8005a48:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05b      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69f9      	ldr	r1, [r7, #28]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a74:	4013      	ands	r3, r2
 8005a76:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	461a      	mov	r2, r3
 8005a86:	2301      	movs	r3, #1
 8005a88:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d11b      	bne.n	8005aca <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3348      	adds	r3, #72	; 0x48
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4403      	add	r3, r0
 8005ab2:	3344      	adds	r3, #68	; 0x44
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4419      	add	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4403      	add	r3, r0
 8005ac6:	3348      	adds	r3, #72	; 0x48
 8005ac8:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f009 fbe6 	bl	800f2a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d116      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d113      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x272>
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	3350      	adds	r3, #80	; 0x50
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b04:	461a      	mov	r2, r3
 8005b06:	2101      	movs	r1, #1
 8005b08:	f006 f97a 	bl	800be00 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	461a      	mov	r2, r3
 8005b24:	2308      	movs	r3, #8
 8005b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2310      	movs	r3, #16
 8005b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2340      	movs	r3, #64	; 0x40
 8005b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	461a      	mov	r2, r3
 8005b78:	2302      	movs	r3, #2
 8005b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fc67 	bl	800645c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f47f af45 	bne.w	8005a2c <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f006 f853 	bl	800bc52 <USB_ReadInterrupts>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb6:	d122      	bne.n	8005bfe <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d108      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bde:	2100      	movs	r1, #0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fe89 	bl	80068f8 <HAL_PCDEx_LPM_Callback>
 8005be6:	e002      	b.n	8005bee <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f009 fbd1 	bl	800f390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f006 f825 	bl	800bc52 <USB_ReadInterrupts>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c12:	d112      	bne.n	8005c3a <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f009 fb8d 	bl	800f344 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695a      	ldr	r2, [r3, #20]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f006 f807 	bl	800bc52 <USB_ReadInterrupts>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	f040 80a7 	bne.w	8005da0 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f005 f93f 	bl	800aef0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c72:	2300      	movs	r3, #0
 8005c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c76:	e036      	b.n	8005ce6 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	461a      	mov	r2, r3
 8005c86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005caa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3c3      	bcc.n	8005c78 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d016      	beq.n	8005d3a <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1c:	f043 030b 	orr.w	r3, r3, #11
 8005d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d32:	f043 030b 	orr.w	r3, r3, #11
 8005d36:	6453      	str	r3, [r2, #68]	; 0x44
 8005d38:	e015      	b.n	8005d66 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d60:	f043 030b 	orr.w	r3, r3, #11
 8005d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f006 f838 	bl	800be00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695a      	ldr	r2, [r3, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 ff54 	bl	800bc52 <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	d124      	bne.n	8005e00 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f005 ffea 	bl	800bd94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f005 f8f4 	bl	800afb2 <USB_GetDevSpeed>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681c      	ldr	r4, [r3, #0]
 8005dd6:	f001 f971 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 8005dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	4620      	mov	r0, r4
 8005de6:	f004 fe23 	bl	800aa30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f009 fa81 	bl	800f2f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f005 ff24 	bl	800bc52 <USB_ReadInterrupts>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d161      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0210 	bic.w	r2, r2, #16
 8005e22:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 020f 	and.w	r2, r3, #15
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	0c5b      	lsrs	r3, r3, #17
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d124      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d035      	beq.n	8005ec8 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6a38      	ldr	r0, [r7, #32]
 8005e70:	f005 fd9c 	bl	800b9ac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	091b      	lsrs	r3, r3, #4
 8005e7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e92:	441a      	add	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	619a      	str	r2, [r3, #24]
 8005e98:	e016      	b.n	8005ec8 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	0c5b      	lsrs	r3, r3, #17
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	2b06      	cmp	r3, #6
 8005ea4:	d110      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005eac:	2208      	movs	r2, #8
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6a38      	ldr	r0, [r7, #32]
 8005eb2:	f005 fd7b 	bl	800b9ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0210 	orr.w	r2, r2, #16
 8005ed6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f005 feb8 	bl	800bc52 <USB_ReadInterrupts>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d10a      	bne.n	8005f02 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f009 f9f2 	bl	800f2d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f002 0208 	and.w	r2, r2, #8
 8005f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f005 fea3 	bl	800bc52 <USB_ReadInterrupts>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f16:	d10f      	bne.n	8005f38 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f009 fa54 	bl	800f3d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f005 fe88 	bl	800bc52 <USB_ReadInterrupts>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f4c:	d10f      	bne.n	8005f6e <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f009 fa27 	bl	800f3ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f005 fe6d 	bl	800bc52 <USB_ReadInterrupts>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d10a      	bne.n	8005f9a <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f009 fa35 	bl	800f3f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f005 fe57 	bl	800bc52 <USB_ReadInterrupts>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d115      	bne.n	8005fda <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f009 fa25 	bl	800f410 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	e000      	b.n	8005fda <HAL_PCD_IRQHandler+0x740>
      return;
 8005fd8:	bf00      	nop
    }
  }
}
 8005fda:	3734      	adds	r7, #52	; 0x34
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd90      	pop	{r4, r7, pc}

08005fe0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_PCD_SetAddress+0x1a>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e013      	b.n	8006022 <HAL_PCD_SetAddress+0x42>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	78fa      	ldrb	r2, [r7, #3]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f005 fdc7 	bl	800bba6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	461a      	mov	r2, r3
 8006038:	4603      	mov	r3, r0
 800603a:	70fb      	strb	r3, [r7, #3]
 800603c:	460b      	mov	r3, r1
 800603e:	803b      	strh	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006048:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800604c:	2b00      	cmp	r3, #0
 800604e:	da0f      	bge.n	8006070 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	4613      	mov	r3, r2
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	3338      	adds	r3, #56	; 0x38
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	4413      	add	r3, r2
 8006064:	3304      	adds	r3, #4
 8006066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	705a      	strb	r2, [r3, #1]
 800606e:	e00f      	b.n	8006090 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	4613      	mov	r3, r2
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	b2da      	uxtb	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800609c:	883a      	ldrh	r2, [r7, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	78ba      	ldrb	r2, [r7, #2]
 80060a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d004      	beq.n	80060ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060ba:	78bb      	ldrb	r3, [r7, #2]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d102      	bne.n	80060c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_PCD_EP_Open+0xaa>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e00e      	b.n	80060f2 <HAL_PCD_EP_Open+0xc8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f004 ff8a 	bl	800affc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80060f0:	7afb      	ldrb	r3, [r7, #11]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800610a:	2b00      	cmp	r3, #0
 800610c:	da0f      	bge.n	800612e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	4613      	mov	r3, r2
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	3338      	adds	r3, #56	; 0x38
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	705a      	strb	r2, [r3, #1]
 800612c:	e00f      	b.n	800614e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 020f 	and.w	r2, r3, #15
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4413      	add	r3, r2
 8006144:	3304      	adds	r3, #4
 8006146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_PCD_EP_Close+0x6e>
 8006164:	2302      	movs	r3, #2
 8006166:	e00e      	b.n	8006186 <HAL_PCD_EP_Close+0x8c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	4618      	mov	r0, r3
 8006178:	f004 ffc8 	bl	800b10c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	460b      	mov	r3, r1
 800619c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	4613      	mov	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2200      	movs	r2, #0
 80061c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2200      	movs	r2, #0
 80061ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d102      	bne.n	80061ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	6979      	ldr	r1, [r7, #20]
 8006202:	f005 fa4b 	bl	800b69c <USB_EP0StartXfer>
 8006206:	e008      	b.n	800621a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6818      	ldr	r0, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	f004 fffd 	bl	800b214 <USB_EPStartXfer>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 020f 	and.w	r2, r3, #15
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	460b      	mov	r3, r1
 8006262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2200      	movs	r2, #0
 800628c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	b2da      	uxtb	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	f005 f9e9 	bl	800b69c <USB_EP0StartXfer>
 80062ca:	e008      	b.n	80062de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	f004 ff9b 	bl	800b214 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062f4:	78fb      	ldrb	r3, [r7, #3]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d901      	bls.n	8006306 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e050      	b.n	80063a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da0f      	bge.n	800632e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	f003 020f 	and.w	r2, r3, #15
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	3338      	adds	r3, #56	; 0x38
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	3304      	adds	r3, #4
 8006324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	705a      	strb	r2, [r3, #1]
 800632c:	e00d      	b.n	800634a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_PCD_EP_SetStall+0x82>
 8006366:	2302      	movs	r3, #2
 8006368:	e01e      	b.n	80063a8 <HAL_PCD_EP_SetStall+0xc0>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	4618      	mov	r0, r3
 800637a:	f005 fb40 	bl	800b9fe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 030f 	and.w	r3, r3, #15
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	b2d9      	uxtb	r1, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006398:	461a      	mov	r2, r3
 800639a:	f005 fd31 	bl	800be00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d901      	bls.n	80063ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e042      	b.n	8006454 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da0f      	bge.n	80063f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	4613      	mov	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	3338      	adds	r3, #56	; 0x38
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	3304      	adds	r3, #4
 80063ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	705a      	strb	r2, [r3, #1]
 80063f4:	e00f      	b.n	8006416 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	f003 020f 	and.w	r2, r3, #15
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800641c:	78fb      	ldrb	r3, [r7, #3]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_PCD_EP_ClrStall+0x86>
 8006432:	2302      	movs	r3, #2
 8006434:	e00e      	b.n	8006454 <HAL_PCD_EP_ClrStall+0xa4>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	4618      	mov	r0, r3
 8006446:	f005 fb48 	bl	800bada <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	3338      	adds	r3, #56	; 0x38
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	429a      	cmp	r2, r3
 800648e:	d901      	bls.n	8006494 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e06c      	b.n	800656e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	695a      	ldr	r2, [r3, #20]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d902      	bls.n	80064b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	3303      	adds	r3, #3
 80064b4:	089b      	lsrs	r3, r3, #2
 80064b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064b8:	e02b      	b.n	8006512 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d902      	bls.n	80064d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3303      	adds	r3, #3
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	4603      	mov	r3, r0
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	f005 fa24 	bl	800b942 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	441a      	add	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	b29b      	uxth	r3, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	429a      	cmp	r2, r3
 8006526:	d809      	bhi.n	800653c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	699a      	ldr	r2, [r3, #24]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006530:	429a      	cmp	r2, r3
 8006532:	d203      	bcs.n	800653c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1be      	bne.n	80064ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	429a      	cmp	r2, r3
 8006546:	d811      	bhi.n	800656c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	2201      	movs	r2, #1
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	43db      	mvns	r3, r3
 8006562:	6939      	ldr	r1, [r7, #16]
 8006564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006568:	4013      	ands	r3, r2
 800656a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	333c      	adds	r3, #60	; 0x3c
 8006590:	3304      	adds	r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	f040 80b3 	bne.w	8006716 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d028      	beq.n	800660c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a70      	ldr	r2, [pc, #448]	; (8006780 <PCD_EP_OutXfrComplete_int+0x208>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d90e      	bls.n	80065e0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065de:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f008 fe31 	bl	800f248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065f0:	461a      	mov	r2, r3
 80065f2:	2101      	movs	r1, #1
 80065f4:	f005 fc04 	bl	800be00 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	461a      	mov	r2, r3
 8006606:	2308      	movs	r3, #8
 8006608:	6093      	str	r3, [r2, #8]
 800660a:	e0b3      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	461a      	mov	r2, r3
 8006624:	2320      	movs	r3, #32
 8006626:	6093      	str	r3, [r2, #8]
 8006628:	e0a4      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 809f 	bne.w	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a51      	ldr	r2, [pc, #324]	; (8006780 <PCD_EP_OutXfrComplete_int+0x208>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d90f      	bls.n	800665e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	e08a      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006670:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	0159      	lsls	r1, r3, #5
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	440b      	add	r3, r1
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006684:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	1a9b      	subs	r3, r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4403      	add	r3, r0
 8006694:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006698:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	4613      	mov	r3, r2
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4403      	add	r3, r0
 80066bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4419      	add	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4403      	add	r3, r0
 80066d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066d6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f008 fdc4 	bl	800f26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d144      	bne.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	1a9b      	subs	r3, r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d138      	bne.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800670c:	461a      	mov	r2, r3
 800670e:	2101      	movs	r1, #1
 8006710:	f005 fb76 	bl	800be00 <USB_EP0_OutStart>
 8006714:	e02e      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <PCD_EP_OutXfrComplete_int+0x20c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d124      	bne.n	8006768 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800673a:	6093      	str	r3, [r2, #8]
 800673c:	e01a      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	461a      	mov	r2, r3
 8006756:	2320      	movs	r3, #32
 8006758:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f008 fd83 	bl	800f26c <HAL_PCD_DataOutStageCallback>
 8006766:	e005      	b.n	8006774 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f008 fd7c 	bl	800f26c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	4f54300a 	.word	0x4f54300a
 8006784:	4f54310a 	.word	0x4f54310a

08006788 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	333c      	adds	r3, #60	; 0x3c
 80067a0:	3304      	adds	r3, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d113      	bne.n	80067e6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <PCD_EP_OutSetupPacket_int+0xb8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d922      	bls.n	800680c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01d      	beq.n	800680c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e2:	6093      	str	r3, [r2, #8]
 80067e4:	e012      	b.n	800680c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4a16      	ldr	r2, [pc, #88]	; (8006844 <PCD_EP_OutSetupPacket_int+0xbc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10e      	bne.n	800680c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006804:	461a      	mov	r2, r3
 8006806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f008 fd1b 	bl	800f248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <PCD_EP_OutSetupPacket_int+0xb8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d90c      	bls.n	8006834 <PCD_EP_OutSetupPacket_int+0xac>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d108      	bne.n	8006834 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800682c:	461a      	mov	r2, r3
 800682e:	2101      	movs	r1, #1
 8006830:	f005 fae6 	bl	800be00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	4f54300a 	.word	0x4f54300a
 8006844:	4f54310a 	.word	0x4f54310a

08006848 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
 8006854:	4613      	mov	r3, r2
 8006856:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d107      	bne.n	8006876 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006866:	883b      	ldrh	r3, [r7, #0]
 8006868:	0419      	lsls	r1, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	430a      	orrs	r2, r1
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
 8006874:	e028      	b.n	80068c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
 8006888:	e00d      	b.n	80068a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	3340      	adds	r3, #64	; 0x40
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	4413      	add	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	3301      	adds	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	7bfa      	ldrb	r2, [r7, #15]
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d3ec      	bcc.n	800688a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068b0:	883b      	ldrh	r3, [r7, #0]
 80068b2:	0418      	lsls	r0, r3, #16
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6819      	ldr	r1, [r3, #0]
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	4302      	orrs	r2, r0
 80068c0:	3340      	adds	r3, #64	; 0x40
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	887a      	ldrh	r2, [r7, #2]
 80068e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e22d      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d075      	beq.n	8006a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800692e:	4ba3      	ldr	r3, [pc, #652]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b04      	cmp	r3, #4
 8006938:	d00c      	beq.n	8006954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800693a:	4ba0      	ldr	r3, [pc, #640]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006942:	2b08      	cmp	r3, #8
 8006944:	d112      	bne.n	800696c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006946:	4b9d      	ldr	r3, [pc, #628]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006952:	d10b      	bne.n	800696c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006954:	4b99      	ldr	r3, [pc, #612]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d05b      	beq.n	8006a18 <HAL_RCC_OscConfig+0x108>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d157      	bne.n	8006a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e208      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006974:	d106      	bne.n	8006984 <HAL_RCC_OscConfig+0x74>
 8006976:	4b91      	ldr	r3, [pc, #580]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a90      	ldr	r2, [pc, #576]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 800697c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e01d      	b.n	80069c0 <HAL_RCC_OscConfig+0xb0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800698c:	d10c      	bne.n	80069a8 <HAL_RCC_OscConfig+0x98>
 800698e:	4b8b      	ldr	r3, [pc, #556]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a8a      	ldr	r2, [pc, #552]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	4b88      	ldr	r3, [pc, #544]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a87      	ldr	r2, [pc, #540]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e00b      	b.n	80069c0 <HAL_RCC_OscConfig+0xb0>
 80069a8:	4b84      	ldr	r3, [pc, #528]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a83      	ldr	r2, [pc, #524]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	4b81      	ldr	r3, [pc, #516]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a80      	ldr	r2, [pc, #512]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d013      	beq.n	80069f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c8:	f7fc fff4 	bl	80039b4 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069d0:	f7fc fff0 	bl	80039b4 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b64      	cmp	r3, #100	; 0x64
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e1cd      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e2:	4b76      	ldr	r3, [pc, #472]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0xc0>
 80069ee:	e014      	b.n	8006a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fc ffe0 	bl	80039b4 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069f8:	f7fc ffdc 	bl	80039b4 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b64      	cmp	r3, #100	; 0x64
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e1b9      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a0a:	4b6c      	ldr	r3, [pc, #432]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0xe8>
 8006a16:	e000      	b.n	8006a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d063      	beq.n	8006aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a26:	4b65      	ldr	r3, [pc, #404]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a32:	4b62      	ldr	r3, [pc, #392]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d11c      	bne.n	8006a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a3e:	4b5f      	ldr	r3, [pc, #380]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d116      	bne.n	8006a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a4a:	4b5c      	ldr	r3, [pc, #368]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <HAL_RCC_OscConfig+0x152>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d001      	beq.n	8006a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e18d      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a62:	4b56      	ldr	r3, [pc, #344]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	4952      	ldr	r1, [pc, #328]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a76:	e03a      	b.n	8006aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a80:	4b4f      	ldr	r3, [pc, #316]	; (8006bc0 <HAL_RCC_OscConfig+0x2b0>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a86:	f7fc ff95 	bl	80039b4 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a8e:	f7fc ff91 	bl	80039b4 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e16e      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa0:	4b46      	ldr	r3, [pc, #280]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aac:	4b43      	ldr	r3, [pc, #268]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4940      	ldr	r1, [pc, #256]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	600b      	str	r3, [r1, #0]
 8006ac0:	e015      	b.n	8006aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ac2:	4b3f      	ldr	r3, [pc, #252]	; (8006bc0 <HAL_RCC_OscConfig+0x2b0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac8:	f7fc ff74 	bl	80039b4 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad0:	f7fc ff70 	bl	80039b4 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e14d      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d030      	beq.n	8006b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d016      	beq.n	8006b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b02:	4b30      	ldr	r3, [pc, #192]	; (8006bc4 <HAL_RCC_OscConfig+0x2b4>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b08:	f7fc ff54 	bl	80039b4 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fc ff50 	bl	80039b4 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e12d      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b22:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0x200>
 8006b2e:	e015      	b.n	8006b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b30:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <HAL_RCC_OscConfig+0x2b4>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b36:	f7fc ff3d 	bl	80039b4 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b3e:	f7fc ff39 	bl	80039b4 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e116      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f0      	bne.n	8006b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 80a0 	beq.w	8006caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	4a0e      	ldr	r2, [pc, #56]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b88:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_RCC_OscConfig+0x2b8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d121      	bne.n	8006bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <HAL_RCC_OscConfig+0x2b8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a07      	ldr	r2, [pc, #28]	; (8006bc8 <HAL_RCC_OscConfig+0x2b8>)
 8006bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bb2:	f7fc feff 	bl	80039b4 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb8:	e011      	b.n	8006bde <HAL_RCC_OscConfig+0x2ce>
 8006bba:	bf00      	nop
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	42470000 	.word	0x42470000
 8006bc4:	42470e80 	.word	0x42470e80
 8006bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bcc:	f7fc fef2 	bl	80039b4 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0cf      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bde:	4b6a      	ldr	r3, [pc, #424]	; (8006d88 <HAL_RCC_OscConfig+0x478>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCC_OscConfig+0x2f0>
 8006bf2:	4b66      	ldr	r3, [pc, #408]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4a65      	ldr	r2, [pc, #404]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bfe:	e01c      	b.n	8006c3a <HAL_RCC_OscConfig+0x32a>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d10c      	bne.n	8006c22 <HAL_RCC_OscConfig+0x312>
 8006c08:	4b60      	ldr	r3, [pc, #384]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	4a5f      	ldr	r2, [pc, #380]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c0e:	f043 0304 	orr.w	r3, r3, #4
 8006c12:	6713      	str	r3, [r2, #112]	; 0x70
 8006c14:	4b5d      	ldr	r3, [pc, #372]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	4a5c      	ldr	r2, [pc, #368]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c20:	e00b      	b.n	8006c3a <HAL_RCC_OscConfig+0x32a>
 8006c22:	4b5a      	ldr	r3, [pc, #360]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	4a59      	ldr	r2, [pc, #356]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c2e:	4b57      	ldr	r3, [pc, #348]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	4a56      	ldr	r2, [pc, #344]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d015      	beq.n	8006c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c42:	f7fc feb7 	bl	80039b4 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c48:	e00a      	b.n	8006c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c4a:	f7fc feb3 	bl	80039b4 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e08e      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c60:	4b4a      	ldr	r3, [pc, #296]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ee      	beq.n	8006c4a <HAL_RCC_OscConfig+0x33a>
 8006c6c:	e014      	b.n	8006c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c6e:	f7fc fea1 	bl	80039b4 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fc fe9d 	bl	80039b4 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e078      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c8c:	4b3f      	ldr	r3, [pc, #252]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ee      	bne.n	8006c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c9e:	4b3b      	ldr	r3, [pc, #236]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d064      	beq.n	8006d7c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cb2:	4b36      	ldr	r3, [pc, #216]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d05c      	beq.n	8006d78 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d141      	bne.n	8006d4a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cc6:	4b32      	ldr	r3, [pc, #200]	; (8006d90 <HAL_RCC_OscConfig+0x480>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ccc:	f7fc fe72 	bl	80039b4 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd4:	f7fc fe6e 	bl	80039b4 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e04b      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	491d      	ldr	r1, [pc, #116]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d1c:	4b1c      	ldr	r3, [pc, #112]	; (8006d90 <HAL_RCC_OscConfig+0x480>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d22:	f7fc fe47 	bl	80039b4 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d2a:	f7fc fe43 	bl	80039b4 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e020      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3c:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x41a>
 8006d48:	e018      	b.n	8006d7c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <HAL_RCC_OscConfig+0x480>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fc fe30 	bl	80039b4 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d58:	f7fc fe2c 	bl	80039b4 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e009      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <HAL_RCC_OscConfig+0x47c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f0      	bne.n	8006d58 <HAL_RCC_OscConfig+0x448>
 8006d76:	e001      	b.n	8006d7c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40007000 	.word	0x40007000
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	42470060 	.word	0x42470060

08006d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0ca      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da8:	4b67      	ldr	r3, [pc, #412]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d90c      	bls.n	8006dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b64      	ldr	r3, [pc, #400]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbe:	4b62      	ldr	r3, [pc, #392]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e0b6      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006de8:	4b58      	ldr	r3, [pc, #352]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4a57      	ldr	r2, [pc, #348]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e00:	4b52      	ldr	r3, [pc, #328]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4a51      	ldr	r2, [pc, #324]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	494c      	ldr	r1, [pc, #304]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d044      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e32:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d119      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e07d      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d003      	beq.n	8006e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d107      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e52:	4b3e      	ldr	r3, [pc, #248]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e06d      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e62:	4b3a      	ldr	r3, [pc, #232]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e065      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f023 0203 	bic.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4933      	ldr	r1, [pc, #204]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e84:	f7fc fd96 	bl	80039b4 <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	e00a      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e8c:	f7fc fd92 	bl	80039b4 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e04d      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea2:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 020c 	and.w	r2, r3, #12
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d1eb      	bne.n	8006e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb4:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d20c      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <HAL_RCC_ClockConfig+0x1b4>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d001      	beq.n	8006edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e030      	b.n	8006f3e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ee8:	4b18      	ldr	r3, [pc, #96]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4915      	ldr	r1, [pc, #84]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	490d      	ldr	r1, [pc, #52]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f1a:	f000 f81d 	bl	8006f58 <HAL_RCC_GetSysClockFreq>
 8006f1e:	4601      	mov	r1, r0
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_RCC_ClockConfig+0x1b8>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	091b      	lsrs	r3, r3, #4
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2c:	5cd3      	ldrb	r3, [r2, r3]
 8006f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006f32:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <HAL_RCC_ClockConfig+0x1c0>)
 8006f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8006f36:	2000      	movs	r0, #0
 8006f38:	f7fc fcf8 	bl	800392c <HAL_InitTick>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40023c00 	.word	0x40023c00
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	08015208 	.word	0x08015208
 8006f54:	2000015c 	.word	0x2000015c

08006f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	2300      	movs	r3, #0
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f6e:	4b50      	ldr	r3, [pc, #320]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d007      	beq.n	8006f8a <HAL_RCC_GetSysClockFreq+0x32>
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d008      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0x38>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f040 808d 	bne.w	800709e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f84:	4b4b      	ldr	r3, [pc, #300]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f86:	60bb      	str	r3, [r7, #8]
       break;
 8006f88:	e08c      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f8a:	4b4b      	ldr	r3, [pc, #300]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f8c:	60bb      	str	r3, [r7, #8]
      break;
 8006f8e:	e089      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f90:	4b47      	ldr	r3, [pc, #284]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f9a:	4b45      	ldr	r3, [pc, #276]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d023      	beq.n	8006fee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa6:	4b42      	ldr	r3, [pc, #264]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	099b      	lsrs	r3, r3, #6
 8006fac:	f04f 0400 	mov.w	r4, #0
 8006fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	ea03 0501 	and.w	r5, r3, r1
 8006fbc:	ea04 0602 	and.w	r6, r4, r2
 8006fc0:	4a3d      	ldr	r2, [pc, #244]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fc2:	fb02 f106 	mul.w	r1, r2, r6
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	fb02 f205 	mul.w	r2, r2, r5
 8006fcc:	440a      	add	r2, r1
 8006fce:	493a      	ldr	r1, [pc, #232]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fd0:	fba5 0101 	umull	r0, r1, r5, r1
 8006fd4:	1853      	adds	r3, r2, r1
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f04f 0400 	mov.w	r4, #0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	f7f9 fe51 	bl	8000c88 <__aeabi_uldivmod>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	460c      	mov	r4, r1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e049      	b.n	8007082 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b30      	ldr	r3, [pc, #192]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	f04f 0400 	mov.w	r4, #0
 8006ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	ea03 0501 	and.w	r5, r3, r1
 8007004:	ea04 0602 	and.w	r6, r4, r2
 8007008:	4629      	mov	r1, r5
 800700a:	4632      	mov	r2, r6
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	f04f 0400 	mov.w	r4, #0
 8007014:	0154      	lsls	r4, r2, #5
 8007016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800701a:	014b      	lsls	r3, r1, #5
 800701c:	4619      	mov	r1, r3
 800701e:	4622      	mov	r2, r4
 8007020:	1b49      	subs	r1, r1, r5
 8007022:	eb62 0206 	sbc.w	r2, r2, r6
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	f04f 0400 	mov.w	r4, #0
 800702e:	0194      	lsls	r4, r2, #6
 8007030:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007034:	018b      	lsls	r3, r1, #6
 8007036:	1a5b      	subs	r3, r3, r1
 8007038:	eb64 0402 	sbc.w	r4, r4, r2
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	00e2      	lsls	r2, r4, #3
 8007046:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800704a:	00d9      	lsls	r1, r3, #3
 800704c:	460b      	mov	r3, r1
 800704e:	4614      	mov	r4, r2
 8007050:	195b      	adds	r3, r3, r5
 8007052:	eb44 0406 	adc.w	r4, r4, r6
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	f04f 0200 	mov.w	r2, #0
 800705e:	02a2      	lsls	r2, r4, #10
 8007060:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007064:	0299      	lsls	r1, r3, #10
 8007066:	460b      	mov	r3, r1
 8007068:	4614      	mov	r4, r2
 800706a:	4618      	mov	r0, r3
 800706c:	4621      	mov	r1, r4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f04f 0400 	mov.w	r4, #0
 8007074:	461a      	mov	r2, r3
 8007076:	4623      	mov	r3, r4
 8007078:	f7f9 fe06 	bl	8000c88 <__aeabi_uldivmod>
 800707c:	4603      	mov	r3, r0
 800707e:	460c      	mov	r4, r1
 8007080:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	3301      	adds	r3, #1
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	60bb      	str	r3, [r7, #8]
      break;
 800709c:	e002      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80070a0:	60bb      	str	r3, [r7, #8]
      break;
 80070a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070a4:	68bb      	ldr	r3, [r7, #8]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	00f42400 	.word	0x00f42400
 80070b8:	00b71b00 	.word	0x00b71b00

080070bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070c2:	681b      	ldr	r3, [r3, #0]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	2000015c 	.word	0x2000015c

080070d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070d8:	f7ff fff0 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 80070dc:	4601      	mov	r1, r0
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	0a9b      	lsrs	r3, r3, #10
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4a03      	ldr	r2, [pc, #12]	; (80070f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ea:	5cd3      	ldrb	r3, [r2, r3]
 80070ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40023800 	.word	0x40023800
 80070f8:	08015218 	.word	0x08015218

080070fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007100:	f7ff ffdc 	bl	80070bc <HAL_RCC_GetHCLKFreq>
 8007104:	4601      	mov	r1, r0
 8007106:	4b05      	ldr	r3, [pc, #20]	; (800711c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	0b5b      	lsrs	r3, r3, #13
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	4a03      	ldr	r2, [pc, #12]	; (8007120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007112:	5cd3      	ldrb	r3, [r2, r3]
 8007114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007118:	4618      	mov	r0, r3
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40023800 	.word	0x40023800
 8007120:	08015218 	.word	0x08015218

08007124 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007148:	2b00      	cmp	r3, #0
 800714a:	d035      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800714c:	4b62      	ldr	r3, [pc, #392]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007152:	f7fc fc2f 	bl	80039b4 <HAL_GetTick>
 8007156:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007158:	e008      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800715a:	f7fc fc2b 	bl	80039b4 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e0b0      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800716c:	4b5b      	ldr	r3, [pc, #364]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f0      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	019a      	lsls	r2, r3, #6
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	071b      	lsls	r3, r3, #28
 8007184:	4955      	ldr	r1, [pc, #340]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800718c:	4b52      	ldr	r3, [pc, #328]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007192:	f7fc fc0f 	bl	80039b4 <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007198:	e008      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800719a:	f7fc fc0b 	bl	80039b4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e090      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071ac:	4b4b      	ldr	r3, [pc, #300]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8083 	beq.w	80072cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	4b44      	ldr	r3, [pc, #272]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a43      	ldr	r2, [pc, #268]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
 80071d6:	4b41      	ldr	r3, [pc, #260]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071e2:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3e      	ldr	r2, [pc, #248]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071ee:	f7fc fbe1 	bl	80039b4 <HAL_GetTick>
 80071f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fc fbdd 	bl	80039b4 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e062      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007208:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007214:	4b31      	ldr	r3, [pc, #196]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d02f      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	d028      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007232:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800723c:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007242:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007248:	4a24      	ldr	r2, [pc, #144]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800724e:	4b23      	ldr	r3, [pc, #140]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d114      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800725a:	f7fc fbab 	bl	80039b4 <HAL_GetTick>
 800725e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007260:	e00a      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007262:	f7fc fba7 	bl	80039b4 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	4293      	cmp	r3, r2
 8007272:	d901      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e02a      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007278:	4b18      	ldr	r3, [pc, #96]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ee      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007290:	d10d      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	490d      	ldr	r1, [pc, #52]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	608b      	str	r3, [r1, #8]
 80072ac:	e005      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072b8:	6093      	str	r3, [r2, #8]
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c6:	4905      	ldr	r1, [pc, #20]	; (80072dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	42470068 	.word	0x42470068
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40007000 	.word	0x40007000
 80072e4:	42470e40 	.word	0x42470e40

080072e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e083      	b.n	8007402 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7f5b      	ldrb	r3, [r3, #29]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f007 fb0e 	bl	800e92c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	22ca      	movs	r2, #202	; 0xca
 800731c:	625a      	str	r2, [r3, #36]	; 0x24
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2253      	movs	r2, #83	; 0x53
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f897 	bl	800745a <RTC_EnterInitMode>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	22ff      	movs	r2, #255	; 0xff
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2204      	movs	r2, #4
 800733e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e05e      	b.n	8007402 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6899      	ldr	r1, [r3, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68d2      	ldr	r2, [r2, #12]
 800737e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6919      	ldr	r1, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	041a      	lsls	r2, r3, #16
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10e      	bne.n	80073d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f829 	bl	800740a <HAL_RTC_WaitForSynchro>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	22ff      	movs	r2, #255	; 0xff
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2204      	movs	r2, #4
 80073ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e018      	b.n	8007402 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	22ff      	movs	r2, #255	; 0xff
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007400:	2300      	movs	r3, #0
  }
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007424:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007426:	f7fc fac5 	bl	80039b4 <HAL_GetTick>
 800742a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800742c:	e009      	b.n	8007442 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800742e:	f7fc fac1 	bl	80039b4 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800743c:	d901      	bls.n	8007442 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e007      	b.n	8007452 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0ee      	beq.n	800742e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d119      	bne.n	80074a8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800747e:	f7fc fa99 	bl	80039b4 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007484:	e009      	b.n	800749a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007486:	f7fc fa95 	bl	80039b4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007494:	d901      	bls.n	800749a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e007      	b.n	80074aa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0ee      	beq.n	8007486 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e01d      	b.n	8007500 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d105      	bne.n	80074dc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f007 fa3e 	bl	800e958 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2203      	movs	r2, #3
 80074e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f80f 	bl	8007508 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007508:	b5b0      	push	{r4, r5, r7, lr}
 800750a:	b08e      	sub	sp, #56	; 0x38
 800750c:	af04      	add	r7, sp, #16
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007510:	2300      	movs	r3, #0
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007524:	2300      	movs	r3, #0
 8007526:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007528:	2376      	movs	r3, #118	; 0x76
 800752a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681d      	ldr	r5, [r3, #0]
 8007530:	466c      	mov	r4, sp
 8007532:	f107 0318 	add.w	r3, r7, #24
 8007536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800753a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800753e:	f107 030c 	add.w	r3, r7, #12
 8007542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007544:	4628      	mov	r0, r5
 8007546:	f002 fcb1 	bl	8009eac <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800754a:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <HAL_SD_InitCard+0xb4>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4618      	mov	r0, r3
 8007556:	f002 fcf2 	bl	8009f3e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800755a:	4b18      	ldr	r3, [pc, #96]	; (80075bc <HAL_SD_InitCard+0xb4>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8007560:	2002      	movs	r0, #2
 8007562:	f7fc fa33 	bl	80039cc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fffe 	bl	8008568 <SD_PowerON>
 800756c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e013      	b.n	80075b4 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 ff22 	bl	80083d6 <SD_InitCard>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bdb0      	pop	{r4, r5, r7, pc}
 80075bc:	422580a0 	.word	0x422580a0

080075c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	; 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d107      	bne.n	80075e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0ad      	b.n	8007744 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	f040 80a6 	bne.w	8007742 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	429a      	cmp	r2, r3
 8007608:	d907      	bls.n	800761a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e094      	b.n	8007744 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007638:	f043 0302 	orr.w	r3, r3, #2
 800763c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007642:	4a42      	ldr	r2, [pc, #264]	; (800774c <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007644:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	4a41      	ldr	r2, [pc, #260]	; (8007750 <HAL_SD_ReadBlocks_DMA+0x190>)
 800764c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	2200      	movs	r2, #0
 8007654:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3380      	adds	r3, #128	; 0x80
 8007660:	4619      	mov	r1, r3
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	025b      	lsls	r3, r3, #9
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	f7fc fb91 	bl	8003d90 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800766e:	4b39      	ldr	r3, [pc, #228]	; (8007754 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007670:	2201      	movs	r2, #1
 8007672:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	2b01      	cmp	r3, #1
 800767a:	d002      	beq.n	8007682 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	025b      	lsls	r3, r3, #9
 8007680:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	025b      	lsls	r3, r3, #9
 800768c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800768e:	2390      	movs	r3, #144	; 0x90
 8007690:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007692:	2302      	movs	r3, #2
 8007694:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007696:	2300      	movs	r3, #0
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800769a:	2301      	movs	r3, #1
 800769c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f107 0214 	add.w	r2, r7, #20
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f002 fcb0 	bl	800a00e <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076b6:	4618      	mov	r0, r3
 80076b8:	f002 fcd5 	bl	800a066 <SDMMC_CmdBlockLength>
 80076bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d010      	beq.n	80076e6 <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e02e      	b.n	8007744 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d90a      	bls.n	8007702 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2282      	movs	r2, #130	; 0x82
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f002 fcfc 	bl	800a0f6 <SDMMC_CmdReadMultiBlock>
 80076fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007700:	e009      	b.n	8007716 <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2281      	movs	r2, #129	; 0x81
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4618      	mov	r0, r3
 8007710:	f002 fccd 	bl	800a0ae <SDMMC_CmdReadSingleBlock>
 8007714:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d010      	beq.n	800773e <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007724:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	431a      	orrs	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e002      	b.n	8007744 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3730      	adds	r7, #48	; 0x30
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	080081e7 	.word	0x080081e7
 8007750:	08008255 	.word	0x08008255
 8007754:	4225858c 	.word	0x4225858c

08007758 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08c      	sub	sp, #48	; 0x30
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0ad      	b.n	80078dc <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	f040 80a6 	bne.w	80078da <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779e:	429a      	cmp	r2, r3
 80077a0:	d907      	bls.n	80077b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e094      	b.n	80078dc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	4a42      	ldr	r2, [pc, #264]	; (80078e4 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80077dc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	4a41      	ldr	r2, [pc, #260]	; (80078e8 <HAL_SD_WriteBlocks_DMA+0x190>)
 80077e4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	2200      	movs	r2, #0
 80077ec:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d002      	beq.n	80077fc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	025b      	lsls	r3, r3, #9
 80077fa:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007804:	4618      	mov	r0, r3
 8007806:	f002 fc2e 	bl	800a066 <SDMMC_CmdBlockLength>
 800780a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d010      	beq.n	8007834 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	431a      	orrs	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e053      	b.n	80078dc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d90a      	bls.n	8007850 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	22a0      	movs	r2, #160	; 0xa0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4618      	mov	r0, r3
 8007848:	f002 fc9d 	bl	800a186 <SDMMC_CmdWriteMultiBlock>
 800784c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800784e:	e009      	b.n	8007864 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2290      	movs	r2, #144	; 0x90
 8007854:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4618      	mov	r0, r3
 800785e:	f002 fc6e 	bl	800a13e <SDMMC_CmdWriteSingleBlock>
 8007862:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d010      	beq.n	800788c <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e027      	b.n	80078dc <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800788c:	4b17      	ldr	r3, [pc, #92]	; (80078ec <HAL_SD_WriteBlocks_DMA+0x194>)
 800788e:	2201      	movs	r2, #1
 8007890:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3380      	adds	r3, #128	; 0x80
 800789e:	461a      	mov	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	025b      	lsls	r3, r3, #9
 80078a4:	089b      	lsrs	r3, r3, #2
 80078a6:	f7fc fa73 	bl	8003d90 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078aa:	f04f 33ff 	mov.w	r3, #4294967295
 80078ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	025b      	lsls	r3, r3, #9
 80078b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80078b6:	2390      	movs	r3, #144	; 0x90
 80078b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80078ba:	2300      	movs	r3, #0
 80078bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80078be:	2300      	movs	r3, #0
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80078c2:	2301      	movs	r3, #1
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f107 0214 	add.w	r2, r7, #20
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f002 fb9c 	bl	800a00e <SDIO_ConfigData>
    
    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3730      	adds	r7, #48	; 0x30
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	080081bd 	.word	0x080081bd
 80078e8:	08008255 	.word	0x08008255
 80078ec:	4225858c 	.word	0x4225858c

080078f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 808d 	beq.w	8007a26 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007924:	f023 0302 	bic.w	r3, r3, #2
 8007928:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d03a      	beq.n	80079ac <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <HAL_SD_IRQHandler+0x5e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	d011      	beq.n	8007972 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f002 fc3c 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 8007958:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f925 	bl	8007bbc <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <HAL_SD_IRQHandler+0xac>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f005 fed9 	bl	800d754 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80079a2:	e103      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f005 fecb 	bl	800d740 <HAL_SD_TxCpltCallback>
}
 80079aa:	e0ff      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 80f9 	beq.w	8007bac <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f002 fc00 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 80079d0:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f8e9 	bl	8007bbc <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f040 80da 	bne.w	8007bac <HAL_SD_IRQHandler+0x2bc>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 80d3 	bne.w	8007bac <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0208 	bic.w	r2, r2, #8
 8007a14:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f005 fe8e 	bl	800d740 <HAL_SD_TxCpltCallback>
}
 8007a24:	e0c2      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 ffef 	bl	8008a22 <SD_Write_IT>
}
 8007a44:	e0b2      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d008      	beq.n	8007a66 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 ffb7 	bl	80089d2 <SD_Read_IT>
}
 8007a64:	e0a2      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a6c:	f240 233a 	movw	r3, #570	; 0x23a
 8007a70:	4013      	ands	r3, r2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 809a 	beq.w	8007bac <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	f043 0208 	orr.w	r2, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	f043 0210 	orr.w	r2, r3, #16
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	f043 0208 	orr.w	r2, r3, #8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007b12:	f023 0302 	bic.w	r3, r3, #2
 8007b16:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d036      	beq.n	8007b92 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d011      	beq.n	8007b50 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b30:	4a20      	ldr	r2, [pc, #128]	; (8007bb4 <HAL_SD_IRQHandler+0x2c4>)
 8007b32:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fc f989 	bl	8003e50 <HAL_DMA_Abort_IT>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d033      	beq.n	8007bac <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fbc8 	bl	80082de <SD_DMATxAbort>
}
 8007b4e:	e02d      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	4a16      	ldr	r2, [pc, #88]	; (8007bb8 <HAL_SD_IRQHandler+0x2c8>)
 8007b5e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fc f973 	bl	8003e50 <HAL_DMA_Abort_IT>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01d      	beq.n	8007bac <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fbf0 	bl	800835a <SD_DMARxAbort>
}
 8007b7a:	e017      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f005 fdce 	bl	800d72c <HAL_SD_AbortCallback>
}
 8007b90:	e00c      	b.n	8007bac <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	f003 0308 	and.w	r3, r3, #8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d006      	beq.n	8007bac <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f808 	bl	8007bbc <HAL_SD_ErrorCallback>
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	080082df 	.word	0x080082df
 8007bb8:	0800835b 	.word	0x0800835b

08007bbc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be2:	0e1b      	lsrs	r3, r3, #24
 8007be4:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	099b      	lsrs	r3, r3, #6
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	089b      	lsrs	r3, r3, #2
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c4c:	0e1b      	lsrs	r3, r3, #24
 8007c4e:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	091b      	lsrs	r3, r3, #4
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	09db      	lsrs	r3, r3, #7
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	099b      	lsrs	r3, r3, #6
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	091b      	lsrs	r3, r3, #4
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 8087 	bne.w	8007df6 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	029b      	lsls	r3, r3, #10
 8007cec:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	431a      	orrs	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	099b      	lsrs	r3, r3, #6
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	431a      	orrs	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	089b      	lsrs	r3, r3, #2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0306 	and.w	r3, r3, #6
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	7e1b      	ldrb	r3, [r3, #24]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	09db      	lsrs	r3, r3, #7
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	7e1b      	ldrb	r3, [r3, #24]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	3302      	adds	r3, #2
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007dc0:	fb02 f203 	mul.w	r2, r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	7a1b      	ldrb	r3, [r3, #8]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	fa03 f202 	lsl.w	r2, r3, r2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007de2:	0a52      	lsrs	r2, r2, #9
 8007de4:	fb02 f203 	mul.w	r2, r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df2:	661a      	str	r2, [r3, #96]	; 0x60
 8007df4:	e04d      	b.n	8007e92 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d138      	bne.n	8007e70 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	041b      	lsls	r3, r3, #16
 8007e0a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	431a      	orrs	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	029a      	lsls	r2, r3, #10
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	655a      	str	r2, [r3, #84]	; 0x54
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e64:	659a      	str	r2, [r3, #88]	; 0x58
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	661a      	str	r2, [r3, #96]	; 0x60
 8007e6e:	e010      	b.n	8007e92 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e0c1      	b.n	8008016 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	099b      	lsrs	r3, r3, #6
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	7e9b      	ldrb	r3, [r3, #26]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	09db      	lsrs	r3, r3, #7
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	0e1b      	lsrs	r3, r3, #24
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	09db      	lsrs	r3, r3, #7
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	089b      	lsrs	r3, r3, #2
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 030c 	and.w	r3, r3, #12
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f34:	0c1b      	lsrs	r3, r3, #16
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	7fdb      	ldrb	r3, [r3, #31]
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	099b      	lsrs	r3, r3, #6
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	095b      	lsrs	r3, r3, #5
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	09db      	lsrs	r3, r3, #7
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	099b      	lsrs	r3, r3, #6
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	091b      	lsrs	r3, r3, #4
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	089b      	lsrs	r3, r3, #2
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0303 	and.w	r3, r3, #3
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800807a:	b5b0      	push	{r4, r5, r7, lr}
 800807c:	b08e      	sub	sp, #56	; 0x38
 800807e:	af04      	add	r7, sp, #16
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2203      	movs	r2, #3
 800808c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008094:	2b03      	cmp	r3, #3
 8008096:	d02e      	beq.n	80080f6 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809e:	d106      	bne.n	80080ae <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
 80080ac:	e029      	b.n	8008102 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b4:	d10a      	bne.n	80080cc <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fb28 	bl	800870c <SD_WideBus_Enable>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
 80080ca:	e01a      	b.n	8008102 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fb67 	bl	80087a6 <SD_WideBus_Disable>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
 80080e6:	e00c      	b.n	8008102 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
 80080f4:	e005      	b.n	8008102 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e024      	b.n	800816a <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681d      	ldr	r5, [r3, #0]
 8008146:	466c      	mov	r4, sp
 8008148:	f107 0318 	add.w	r3, r7, #24
 800814c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008154:	f107 030c 	add.w	r3, r7, #12
 8008158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800815a:	4628      	mov	r0, r5
 800815c:	f001 fea6 	bl	8009eac <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3728      	adds	r7, #40	; 0x28
 800816e:	46bd      	mov	sp, r7
 8008170:	bdb0      	pop	{r4, r5, r7, pc}

08008172 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b086      	sub	sp, #24
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800817a:	2304      	movs	r3, #4
 800817c:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa93 	bl	80086b8 <SD_SendStatus>
 8008192:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0a5b      	lsrs	r3, r3, #9
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	2b82      	cmp	r3, #130	; 0x82
 80081fe:	d111      	bne.n	8008224 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4618      	mov	r0, r3
 8008206:	f001 ffe3 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 800820a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d008      	beq.n	8008224 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	431a      	orrs	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff fccc 	bl	8007bbc <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0208 	bic.w	r2, r2, #8
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f005 fa84 	bl	800d754 <HAL_SD_RxCpltCallback>
#endif
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008268:	2b01      	cmp	r3, #1
 800826a:	d004      	beq.n	8008276 <SD_DMAError+0x22>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008272:	2b01      	cmp	r3, #1
 8008274:	d12c      	bne.n	80082d0 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800828e:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff ff68 	bl	8008172 <HAL_SD_GetCardState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d002      	beq.n	80082b2 <SD_DMAError+0x5e>
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d10a      	bne.n	80082c8 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 ff8a 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 80082bc:	4602      	mov	r2, r0
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	431a      	orrs	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fc73 	bl	8007bbc <HAL_SD_ErrorCallback>
#endif
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d127      	bne.n	8008352 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff35 	bl	8008172 <HAL_SD_GetCardState>
 8008308:	4603      	mov	r3, r0
 800830a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	2b06      	cmp	r3, #6
 800831e:	d002      	beq.n	8008326 <SD_DMATxAbort+0x48>
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	2b05      	cmp	r3, #5
 8008324:	d115      	bne.n	8008352 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f001 ff50 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 8008330:	4602      	mov	r2, r0
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	431a      	orrs	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f005 f9f1 	bl	800d72c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800834a:	e002      	b.n	8008352 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7ff fc35 	bl	8007bbc <HAL_SD_ErrorCallback>
}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d002      	beq.n	8008376 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d127      	bne.n	80083ce <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7ff fef7 	bl	8008172 <HAL_SD_GetCardState>
 8008384:	4603      	mov	r3, r0
 8008386:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008396:	7afb      	ldrb	r3, [r7, #11]
 8008398:	2b06      	cmp	r3, #6
 800839a:	d002      	beq.n	80083a2 <SD_DMARxAbort+0x48>
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d115      	bne.n	80083ce <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 ff12 	bl	800a1d0 <SDMMC_CmdStopTransfer>
 80083ac:	4602      	mov	r2, r0
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	431a      	orrs	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f005 f9b3 	bl	800d72c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80083c6:	e002      	b.n	80083ce <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f7ff fbf7 	bl	8007bbc <HAL_SD_ErrorCallback>
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083d6:	b5b0      	push	{r4, r5, r7, lr}
 80083d8:	b094      	sub	sp, #80	; 0x50
 80083da:	af04      	add	r7, sp, #16
 80083dc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80083de:	2300      	movs	r3, #0
 80083e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80083e2:	2301      	movs	r3, #1
 80083e4:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fdb5 	bl	8009f5a <SDIO_GetPowerState>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d102      	bne.n	80083fc <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80083fa:	e0b1      	b.n	8008560 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008400:	2b03      	cmp	r3, #3
 8008402:	d02f      	beq.n	8008464 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fffb 	bl	800a404 <SDMMC_CmdSendCID>
 800840e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <SD_InitCard+0x44>
    {
      return errorstate;
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	e0a2      	b.n	8008560 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fddf 	bl	8009fe4 <SDIO_GetResponse>
 8008426:	4602      	mov	r2, r0
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2104      	movs	r1, #4
 8008432:	4618      	mov	r0, r3
 8008434:	f001 fdd6 	bl	8009fe4 <SDIO_GetResponse>
 8008438:	4602      	mov	r2, r0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2108      	movs	r1, #8
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fdcd 	bl	8009fe4 <SDIO_GetResponse>
 800844a:	4602      	mov	r2, r0
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	210c      	movs	r1, #12
 8008456:	4618      	mov	r0, r3
 8008458:	f001 fdc4 	bl	8009fe4 <SDIO_GetResponse>
 800845c:	4602      	mov	r2, r0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008468:	2b03      	cmp	r3, #3
 800846a:	d00d      	beq.n	8008488 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f107 020e 	add.w	r2, r7, #14
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f002 f805 	bl	800a486 <SDMMC_CmdSetRelAdd>
 800847c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <SD_InitCard+0xb2>
    {
      return errorstate;
 8008484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008486:	e06b      	b.n	8008560 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848c:	2b03      	cmp	r3, #3
 800848e:	d036      	beq.n	80084fe <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008490:	89fb      	ldrh	r3, [r7, #14]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	041b      	lsls	r3, r3, #16
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f001 ffcd 	bl	800a444 <SDMMC_CmdSendCSD>
 80084aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <SD_InitCard+0xe0>
    {
      return errorstate;
 80084b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b4:	e054      	b.n	8008560 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 fd91 	bl	8009fe4 <SDIO_GetResponse>
 80084c2:	4602      	mov	r2, r0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2104      	movs	r1, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fd88 	bl	8009fe4 <SDIO_GetResponse>
 80084d4:	4602      	mov	r2, r0
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2108      	movs	r1, #8
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fd7f 	bl	8009fe4 <SDIO_GetResponse>
 80084e6:	4602      	mov	r2, r0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	210c      	movs	r1, #12
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fd76 	bl	8009fe4 <SDIO_GetResponse>
 80084f8:	4602      	mov	r2, r0
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2104      	movs	r1, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fd6d 	bl	8009fe4 <SDIO_GetResponse>
 800850a:	4603      	mov	r3, r0
 800850c:	0d1a      	lsrs	r2, r3, #20
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fb59 	bl	8007bd0 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6819      	ldr	r1, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008526:	041b      	lsls	r3, r3, #16
 8008528:	f04f 0400 	mov.w	r4, #0
 800852c:	461a      	mov	r2, r3
 800852e:	4623      	mov	r3, r4
 8008530:	4608      	mov	r0, r1
 8008532:	f001 fe71 	bl	800a218 <SDMMC_CmdSelDesel>
 8008536:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <SD_InitCard+0x16c>
  {
    return errorstate;
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	e00e      	b.n	8008560 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681d      	ldr	r5, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	466c      	mov	r4, sp
 800854a:	f103 0210 	add.w	r2, r3, #16
 800854e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008554:	3304      	adds	r3, #4
 8008556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008558:	4628      	mov	r0, r5
 800855a:	f001 fca7 	bl	8009eac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3740      	adds	r7, #64	; 0x40
 8008564:	46bd      	mov	sp, r7
 8008566:	bdb0      	pop	{r4, r5, r7, pc}

08008568 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	2300      	movs	r3, #0
 800857a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fe6c 	bl	800a262 <SDMMC_CmdGoIdleState>
 800858a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <SD_PowerON+0x2e>
  {
    return errorstate;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	e08c      	b.n	80086b0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fe81 	bl	800a2a2 <SDMMC_CmdOperCond>
 80085a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d03d      	beq.n	8008624 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80085ae:	e032      	b.n	8008616 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	60ba      	str	r2, [r7, #8]
 80085b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d102      	bne.n	80085c4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085c2:	e075      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fe8a 	bl	800a2e4 <SDMMC_CmdAppCommand>
 80085d0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085dc:	e068      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fea1 	bl	800a32c <SDMMC_CmdAppOperCommand>
 80085ea:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085f6:	e05b      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2100      	movs	r1, #0
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 fcf0 	bl	8009fe4 <SDIO_GetResponse>
 8008604:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	0fdb      	lsrs	r3, r3, #31
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <SD_PowerON+0xaa>
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <SD_PowerON+0xac>
 8008612:	2300      	movs	r3, #0
 8008614:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0c9      	beq.n	80085b0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	645a      	str	r2, [r3, #68]	; 0x44
 8008622:	e044      	b.n	80086ae <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800862a:	e031      	b.n	8008690 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	60ba      	str	r2, [r7, #8]
 8008632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008636:	4293      	cmp	r3, r2
 8008638:	d102      	bne.n	8008640 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800863a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800863e:	e037      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fe4c 	bl	800a2e4 <SDMMC_CmdAppCommand>
 800864c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SD_PowerON+0xf0>
      {
        return errorstate;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e02b      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008660:	4618      	mov	r0, r3
 8008662:	f001 fe63 	bl	800a32c <SDMMC_CmdAppOperCommand>
 8008666:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <SD_PowerON+0x10a>
      {
        return errorstate;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	e01e      	b.n	80086b0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fcb3 	bl	8009fe4 <SDIO_GetResponse>
 800867e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	0fdb      	lsrs	r3, r3, #31
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <SD_PowerON+0x124>
 8008688:	2301      	movs	r3, #1
 800868a:	e000      	b.n	800868e <SD_PowerON+0x126>
 800868c:	2300      	movs	r3, #0
 800868e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0ca      	beq.n	800862c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	645a      	str	r2, [r3, #68]	; 0x44
 80086a6:	e002      	b.n	80086ae <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d102      	bne.n	80086d2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80086cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086d0:	e018      	b.n	8008704 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f001 fef4 	bl	800a4cc <SDMMC_CmdSendStatus>
 80086e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <SD_SendStatus+0x38>
  {
    return errorstate;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	e009      	b.n	8008704 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fc74 	bl	8009fe4 <SDIO_GetResponse>
 80086fc:	4602      	mov	r2, r0
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	2300      	movs	r3, #0
 800871a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2100      	movs	r1, #0
 8008726:	4618      	mov	r0, r3
 8008728:	f001 fc5c 	bl	8009fe4 <SDIO_GetResponse>
 800872c:	4603      	mov	r3, r0
 800872e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008736:	d102      	bne.n	800873e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800873c:	e02f      	b.n	800879e <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f87b 	bl	8008840 <SD_FindSCR>
 800874a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	e023      	b.n	800879e <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01c      	beq.n	800879a <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008768:	041b      	lsls	r3, r3, #16
 800876a:	4619      	mov	r1, r3
 800876c:	4610      	mov	r0, r2
 800876e:	f001 fdb9 	bl	800a2e4 <SDMMC_CmdAppCommand>
 8008772:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	e00f      	b.n	800879e <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2102      	movs	r1, #2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fdf6 	bl	800a376 <SDMMC_CmdBusWidth>
 800878a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	e003      	b.n	800879e <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	e001      	b.n	800879e <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800879a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b086      	sub	sp, #24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	2300      	movs	r3, #0
 80087b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 fc0f 	bl	8009fe4 <SDIO_GetResponse>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087d0:	d102      	bne.n	80087d8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087d6:	e02f      	b.n	8008838 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f82e 	bl	8008840 <SD_FindSCR>
 80087e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	e023      	b.n	8008838 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d01c      	beq.n	8008834 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008802:	041b      	lsls	r3, r3, #16
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f001 fd6c 	bl	800a2e4 <SDMMC_CmdAppCommand>
 800880c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	e00f      	b.n	8008838 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fda9 	bl	800a376 <SDMMC_CmdBusWidth>
 8008824:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	e003      	b.n	8008838 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008830:	2300      	movs	r3, #0
 8008832:	e001      	b.n	8008838 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008834:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b08f      	sub	sp, #60	; 0x3c
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
 800884c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800884e:	f7fb f8b1 	bl	80039b4 <HAL_GetTick>
 8008852:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2108      	movs	r1, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f001 fbfd 	bl	800a066 <SDMMC_CmdBlockLength>
 800886c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	e0a8      	b.n	80089ca <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008880:	041b      	lsls	r3, r3, #16
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f001 fd2d 	bl	800a2e4 <SDMMC_CmdAppCommand>
 800888a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	e099      	b.n	80089ca <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008896:	f04f 33ff 	mov.w	r3, #4294967295
 800889a:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800889c:	2308      	movs	r3, #8
 800889e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80088a0:	2330      	movs	r3, #48	; 0x30
 80088a2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80088a4:	2302      	movs	r3, #2
 80088a6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80088ac:	2301      	movs	r3, #1
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f107 0214 	add.w	r2, r7, #20
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fba7 	bl	800a00e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fd7a 	bl	800a3be <SDMMC_CmdSendSCR>
 80088ca:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d022      	beq.n	8008918 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	e079      	b.n	80089ca <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00e      	beq.n	8008902 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6819      	ldr	r1, [r3, #0]
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	f107 020c 	add.w	r2, r7, #12
 80088f0:	18d4      	adds	r4, r2, r3
 80088f2:	4608      	mov	r0, r1
 80088f4:	f001 fb05 	bl	8009f02 <SDIO_ReadFIFO>
 80088f8:	4603      	mov	r3, r0
 80088fa:	6023      	str	r3, [r4, #0]
      index++;
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	3301      	adds	r3, #1
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008902:	f7fb f857 	bl	80039b4 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d102      	bne.n	8008918 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008912:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008916:	e058      	b.n	80089ca <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800891e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0d6      	beq.n	80088d6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b00      	cmp	r3, #0
 8008934:	d005      	beq.n	8008942 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2208      	movs	r2, #8
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800893e:	2308      	movs	r3, #8
 8008940:	e043      	b.n	80089ca <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	f003 0302 	and.w	r3, r3, #2
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2202      	movs	r2, #2
 8008956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008958:	2302      	movs	r3, #2
 800895a:	e036      	b.n	80089ca <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2220      	movs	r2, #32
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008972:	2320      	movs	r3, #32
 8008974:	e029      	b.n	80089ca <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	061a      	lsls	r2, r3, #24
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800898c:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008996:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80089a2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80089a4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	061a      	lsls	r2, r3, #24
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089b2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80089bc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	0e1b      	lsrs	r3, r3, #24
 80089c2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	373c      	adds	r7, #60	; 0x3c
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd90      	pop	{r4, r7, pc}

080089d2 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80089d2:	b590      	push	{r4, r7, lr}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e00d      	b.n	8008a06 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	18d4      	adds	r4, r2, r3
 80089f6:	4608      	mov	r0, r1
 80089f8:	f001 fa83 	bl	8009f02 <SDIO_ReadFIFO>
 80089fc:	4603      	mov	r3, r0
 80089fe:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b07      	cmp	r3, #7
 8008a0a:	d9ee      	bls.n	80089ea <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a10:	f103 0220 	add.w	r2, r3, #32
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd90      	pop	{r4, r7, pc}

08008a22 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e00b      	b.n	8008a52 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	4413      	add	r3, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	f001 fa68 	bl	8009f1c <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b07      	cmp	r3, #7
 8008a56:	d9f0      	bls.n	8008a3a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	f103 0220 	add.w	r2, r3, #32
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e056      	b.n	8008b2e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f006 f85c 	bl	800eb58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	ea42 0103 	orr.w	r1, r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	f003 0104 	and.w	r1, r3, #4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e01d      	b.n	8008b84 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f006 f843 	bl	800ebe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f000 f9e1 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d007      	beq.n	8008bbe <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0201 	orr.w	r2, r2, #1
 8008bbc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e01d      	b.n	8008c22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f815 	bl	8008c2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4619      	mov	r1, r3
 8008c12:	4610      	mov	r0, r2
 8008c14:	f000 f992 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e0b4      	b.n	8008dc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b0c      	cmp	r3, #12
 8008c6e:	f200 809f 	bhi.w	8008db0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008cad 	.word	0x08008cad
 8008c7c:	08008db1 	.word	0x08008db1
 8008c80:	08008db1 	.word	0x08008db1
 8008c84:	08008db1 	.word	0x08008db1
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008db1 	.word	0x08008db1
 8008c90:	08008db1 	.word	0x08008db1
 8008c94:	08008db1 	.word	0x08008db1
 8008c98:	08008d2f 	.word	0x08008d2f
 8008c9c:	08008db1 	.word	0x08008db1
 8008ca0:	08008db1 	.word	0x08008db1
 8008ca4:	08008db1 	.word	0x08008db1
 8008ca8:	08008d6f 	.word	0x08008d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f9e2 	bl	800907c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0208 	orr.w	r2, r2, #8
 8008cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0204 	bic.w	r2, r2, #4
 8008cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6999      	ldr	r1, [r3, #24]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	691a      	ldr	r2, [r3, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	619a      	str	r2, [r3, #24]
      break;
 8008cea:	e062      	b.n	8008db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fa32 	bl	800915c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6999      	ldr	r1, [r3, #24]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	021a      	lsls	r2, r3, #8
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	619a      	str	r2, [r3, #24]
      break;
 8008d2c:	e041      	b.n	8008db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fa87 	bl	8009248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f042 0208 	orr.w	r2, r2, #8
 8008d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69da      	ldr	r2, [r3, #28]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 0204 	bic.w	r2, r2, #4
 8008d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69d9      	ldr	r1, [r3, #28]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	61da      	str	r2, [r3, #28]
      break;
 8008d6c:	e021      	b.n	8008db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fadb 	bl	8009330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69da      	ldr	r2, [r3, #28]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	69d9      	ldr	r1, [r3, #28]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	021a      	lsls	r2, r3, #8
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	61da      	str	r2, [r3, #28]
      break;
 8008dae:	e000      	b.n	8008db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008db0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_TIM_ConfigClockSource+0x18>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e0a6      	b.n	8008f32 <HAL_TIM_ConfigClockSource+0x166>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	d067      	beq.n	8008eec <HAL_TIM_ConfigClockSource+0x120>
 8008e1c:	2b40      	cmp	r3, #64	; 0x40
 8008e1e:	d80b      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x6c>
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d073      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x140>
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d802      	bhi.n	8008e2e <HAL_TIM_ConfigClockSource+0x62>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d06f      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008e2c:	e078      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d06c      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x140>
 8008e32:	2b30      	cmp	r3, #48	; 0x30
 8008e34:	d06a      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008e36:	e073      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e38:	2b70      	cmp	r3, #112	; 0x70
 8008e3a:	d00d      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0x8c>
 8008e3c:	2b70      	cmp	r3, #112	; 0x70
 8008e3e:	d804      	bhi.n	8008e4a <HAL_TIM_ConfigClockSource+0x7e>
 8008e40:	2b50      	cmp	r3, #80	; 0x50
 8008e42:	d033      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0xe0>
 8008e44:	2b60      	cmp	r3, #96	; 0x60
 8008e46:	d041      	beq.n	8008ecc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e48:	e06a      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4e:	d066      	beq.n	8008f1e <HAL_TIM_ConfigClockSource+0x152>
 8008e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e54:	d017      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e56:	e063      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f000 fb32 	bl	80094d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	609a      	str	r2, [r3, #8]
      break;
 8008e84:	e04c      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6899      	ldr	r1, [r3, #8]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f000 fb1b 	bl	80094d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ea8:	609a      	str	r2, [r3, #8]
      break;
 8008eaa:	e039      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f000 fa8f 	bl	80093dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2150      	movs	r1, #80	; 0x50
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fae8 	bl	800949a <TIM_ITRx_SetConfig>
      break;
 8008eca:	e029      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6859      	ldr	r1, [r3, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f000 faae 	bl	800943a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2160      	movs	r1, #96	; 0x60
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fad8 	bl	800949a <TIM_ITRx_SetConfig>
      break;
 8008eea:	e019      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f000 fa6f 	bl	80093dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2140      	movs	r1, #64	; 0x40
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fac8 	bl	800949a <TIM_ITRx_SetConfig>
      break;
 8008f0a:	e009      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 fabf 	bl	800949a <TIM_ITRx_SetConfig>
      break;
 8008f1c:	e000      	b.n	8008f20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a40      	ldr	r2, [pc, #256]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d013      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5a:	d00f      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a3d      	ldr	r2, [pc, #244]	; (8009054 <TIM_Base_SetConfig+0x118>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a3c      	ldr	r2, [pc, #240]	; (8009058 <TIM_Base_SetConfig+0x11c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a3b      	ldr	r2, [pc, #236]	; (800905c <TIM_Base_SetConfig+0x120>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_Base_SetConfig+0x40>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a3a      	ldr	r2, [pc, #232]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d108      	bne.n	8008f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2f      	ldr	r2, [pc, #188]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d02b      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9c:	d027      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a2c      	ldr	r2, [pc, #176]	; (8009054 <TIM_Base_SetConfig+0x118>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d023      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a2b      	ldr	r2, [pc, #172]	; (8009058 <TIM_Base_SetConfig+0x11c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d01f      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <TIM_Base_SetConfig+0x120>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01b      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a29      	ldr	r2, [pc, #164]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d017      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a28      	ldr	r2, [pc, #160]	; (8009064 <TIM_Base_SetConfig+0x128>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a27      	ldr	r2, [pc, #156]	; (8009068 <TIM_Base_SetConfig+0x12c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00f      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a26      	ldr	r2, [pc, #152]	; (800906c <TIM_Base_SetConfig+0x130>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00b      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a25      	ldr	r2, [pc, #148]	; (8009070 <TIM_Base_SetConfig+0x134>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d007      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a24      	ldr	r2, [pc, #144]	; (8009074 <TIM_Base_SetConfig+0x138>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d003      	beq.n	8008fee <TIM_Base_SetConfig+0xb2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a23      	ldr	r2, [pc, #140]	; (8009078 <TIM_Base_SetConfig+0x13c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d108      	bne.n	8009000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a0a      	ldr	r2, [pc, #40]	; (8009050 <TIM_Base_SetConfig+0x114>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d003      	beq.n	8009034 <TIM_Base_SetConfig+0xf8>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a0c      	ldr	r2, [pc, #48]	; (8009060 <TIM_Base_SetConfig+0x124>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d103      	bne.n	800903c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	615a      	str	r2, [r3, #20]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40000400 	.word	0x40000400
 8009058:	40000800 	.word	0x40000800
 800905c:	40000c00 	.word	0x40000c00
 8009060:	40010400 	.word	0x40010400
 8009064:	40014000 	.word	0x40014000
 8009068:	40014400 	.word	0x40014400
 800906c:	40014800 	.word	0x40014800
 8009070:	40001800 	.word	0x40001800
 8009074:	40001c00 	.word	0x40001c00
 8009078:	40002000 	.word	0x40002000

0800907c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0201 	bic.w	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 0302 	bic.w	r3, r3, #2
 80090c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a20      	ldr	r2, [pc, #128]	; (8009154 <TIM_OC1_SetConfig+0xd8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d003      	beq.n	80090e0 <TIM_OC1_SetConfig+0x64>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <TIM_OC1_SetConfig+0xdc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10c      	bne.n	80090fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f023 0308 	bic.w	r3, r3, #8
 80090e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f023 0304 	bic.w	r3, r3, #4
 80090f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a15      	ldr	r2, [pc, #84]	; (8009154 <TIM_OC1_SetConfig+0xd8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_OC1_SetConfig+0x8e>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a14      	ldr	r2, [pc, #80]	; (8009158 <TIM_OC1_SetConfig+0xdc>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d111      	bne.n	800912e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	621a      	str	r2, [r3, #32]
}
 8009148:	bf00      	nop
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	40010000 	.word	0x40010000
 8009158:	40010400 	.word	0x40010400

0800915c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f023 0210 	bic.w	r2, r3, #16
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	4313      	orrs	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 0320 	bic.w	r3, r3, #32
 80091a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a22      	ldr	r2, [pc, #136]	; (8009240 <TIM_OC2_SetConfig+0xe4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_OC2_SetConfig+0x68>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a21      	ldr	r2, [pc, #132]	; (8009244 <TIM_OC2_SetConfig+0xe8>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d10d      	bne.n	80091e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a17      	ldr	r2, [pc, #92]	; (8009240 <TIM_OC2_SetConfig+0xe4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d003      	beq.n	80091f0 <TIM_OC2_SetConfig+0x94>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a16      	ldr	r2, [pc, #88]	; (8009244 <TIM_OC2_SetConfig+0xe8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d113      	bne.n	8009218 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685a      	ldr	r2, [r3, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	621a      	str	r2, [r3, #32]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	40010000 	.word	0x40010000
 8009244:	40010400 	.word	0x40010400

08009248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0303 	bic.w	r3, r3, #3
 800927e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a21      	ldr	r2, [pc, #132]	; (8009328 <TIM_OC3_SetConfig+0xe0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d003      	beq.n	80092ae <TIM_OC3_SetConfig+0x66>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a20      	ldr	r2, [pc, #128]	; (800932c <TIM_OC3_SetConfig+0xe4>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d10d      	bne.n	80092ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a16      	ldr	r2, [pc, #88]	; (8009328 <TIM_OC3_SetConfig+0xe0>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d003      	beq.n	80092da <TIM_OC3_SetConfig+0x92>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a15      	ldr	r2, [pc, #84]	; (800932c <TIM_OC3_SetConfig+0xe4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d113      	bne.n	8009302 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	011b      	lsls	r3, r3, #4
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	621a      	str	r2, [r3, #32]
}
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	40010000 	.word	0x40010000
 800932c:	40010400 	.word	0x40010400

08009330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	021b      	lsls	r3, r3, #8
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	4313      	orrs	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800937a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	031b      	lsls	r3, r3, #12
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	4313      	orrs	r3, r2
 8009386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a12      	ldr	r2, [pc, #72]	; (80093d4 <TIM_OC4_SetConfig+0xa4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC4_SetConfig+0x68>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a11      	ldr	r2, [pc, #68]	; (80093d8 <TIM_OC4_SetConfig+0xa8>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d109      	bne.n	80093ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800939e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	019b      	lsls	r3, r3, #6
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40010400 	.word	0x40010400

080093dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093dc:	b480      	push	{r7}
 80093de:	b087      	sub	sp, #28
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f023 0201 	bic.w	r2, r3, #1
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	f023 030a 	bic.w	r3, r3, #10
 8009418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	621a      	str	r2, [r3, #32]
}
 800942e:	bf00      	nop
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800943a:	b480      	push	{r7}
 800943c:	b087      	sub	sp, #28
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0210 	bic.w	r2, r3, #16
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	031b      	lsls	r3, r3, #12
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	697a      	ldr	r2, [r7, #20]
 8009486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f043 0307 	orr.w	r3, r3, #7
 80094bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	609a      	str	r2, [r3, #8]
}
 80094c4:	bf00      	nop
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	021a      	lsls	r2, r3, #8
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	431a      	orrs	r2, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	609a      	str	r2, [r3, #8]
}
 8009504:	bf00      	nop
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009524:	2302      	movs	r3, #2
 8009526:	e032      	b.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009560:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	4313      	orrs	r3, r2
 800956a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e03f      	b.n	800962c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f005 fbbf 	bl	800ed44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2224      	movs	r2, #36	; 0x24
 80095ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fa5a 	bl	8009a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	695a      	ldr	r2, [r3, #20]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009602:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009612:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2220      	movs	r2, #32
 8009626:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10d      	bne.n	8009686 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_UART_IRQHandler+0x52>
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f988 	bl	8009994 <UART_Receive_IT>
      return;
 8009684:	e0cc      	b.n	8009820 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80ab 	beq.w	80097e4 <HAL_UART_IRQHandler+0x1b0>
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d105      	bne.n	80096a4 <HAL_UART_IRQHandler+0x70>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a0 	beq.w	80097e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_UART_IRQHandler+0x90>
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096bc:	f043 0201 	orr.w	r2, r3, #1
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_UART_IRQHandler+0xb0>
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096dc:	f043 0202 	orr.w	r2, r3, #2
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_UART_IRQHandler+0xd0>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fc:	f043 0204 	orr.w	r2, r3, #4
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <HAL_UART_IRQHandler+0xf0>
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971c:	f043 0208 	orr.w	r2, r3, #8
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d078      	beq.n	800981e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f003 0320 	and.w	r3, r3, #32
 8009732:	2b00      	cmp	r3, #0
 8009734:	d007      	beq.n	8009746 <HAL_UART_IRQHandler+0x112>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f927 	bl	8009994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009750:	2b40      	cmp	r3, #64	; 0x40
 8009752:	bf0c      	ite	eq
 8009754:	2301      	moveq	r3, #1
 8009756:	2300      	movne	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <HAL_UART_IRQHandler+0x13a>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d031      	beq.n	80097d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f870 	bl	8009854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977e:	2b40      	cmp	r3, #64	; 0x40
 8009780:	d123      	bne.n	80097ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	695a      	ldr	r2, [r3, #20]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009790:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009796:	2b00      	cmp	r3, #0
 8009798:	d013      	beq.n	80097c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979e:	4a22      	ldr	r2, [pc, #136]	; (8009828 <HAL_UART_IRQHandler+0x1f4>)
 80097a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fa fb52 	bl	8003e50 <HAL_DMA_Abort_IT>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d016      	beq.n	80097e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c0:	e00e      	b.n	80097e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f83c 	bl	8009840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	e00a      	b.n	80097e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f838 	bl	8009840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d0:	e006      	b.n	80097e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f834 	bl	8009840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80097de:	e01e      	b.n	800981e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e0:	bf00      	nop
    return;
 80097e2:	e01c      	b.n	800981e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d008      	beq.n	8009800 <HAL_UART_IRQHandler+0x1cc>
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f85d 	bl	80098b8 <UART_Transmit_IT>
    return;
 80097fe:	e00f      	b.n	8009820 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <HAL_UART_IRQHandler+0x1ec>
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f8a5 	bl	8009964 <UART_EndTransmit_IT>
    return;
 800981a:	bf00      	nop
 800981c:	e000      	b.n	8009820 <HAL_UART_IRQHandler+0x1ec>
    return;
 800981e:	bf00      	nop
  }
}
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	08009891 	.word	0x08009891

0800982c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68da      	ldr	r2, [r3, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800986a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695a      	ldr	r2, [r3, #20]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0201 	bic.w	r2, r2, #1
 800987a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f7ff ffc8 	bl	8009840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b21      	cmp	r3, #33	; 0x21
 80098ca:	d144      	bne.n	8009956 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d4:	d11a      	bne.n	800990c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098ea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d105      	bne.n	8009900 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	1c9a      	adds	r2, r3, #2
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	621a      	str	r2, [r3, #32]
 80098fe:	e00e      	b.n	800991e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	621a      	str	r2, [r3, #32]
 800990a:	e008      	b.n	800991e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	1c59      	adds	r1, r3, #1
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	6211      	str	r1, [r2, #32]
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29b      	uxth	r3, r3
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	4619      	mov	r1, r3
 800992c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10f      	bne.n	8009952 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	e000      	b.n	8009958 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009956:	2302      	movs	r3, #2
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7ff ff51 	bl	800982c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b22      	cmp	r3, #34	; 0x22
 80099a6:	d171      	bne.n	8009a8c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b0:	d123      	bne.n	80099fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10e      	bne.n	80099de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	1c9a      	adds	r2, r3, #2
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
 80099dc:	e029      	b.n	8009a32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	629a      	str	r2, [r3, #40]	; 0x28
 80099f8:	e01b      	b.n	8009a32 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6858      	ldr	r0, [r3, #4]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0c:	1c59      	adds	r1, r3, #1
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6291      	str	r1, [r2, #40]	; 0x28
 8009a12:	b2c2      	uxtb	r2, r0
 8009a14:	701a      	strb	r2, [r3, #0]
 8009a16:	e00c      	b.n	8009a32 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	1c58      	adds	r0, r3, #1
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	6288      	str	r0, [r1, #40]	; 0x28
 8009a2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a2e:	b2d2      	uxtb	r2, r2
 8009a30:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d120      	bne.n	8009a88 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0220 	bic.w	r2, r2, #32
 8009a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68da      	ldr	r2, [r3, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	695a      	ldr	r2, [r3, #20]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0201 	bic.w	r2, r2, #1
 8009a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f004 f88c 	bl	800db9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	e002      	b.n	8009a8e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e000      	b.n	8009a8e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009a8c:	2302      	movs	r3, #2
  }
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a98:	b5b0      	push	{r4, r5, r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009ad8:	f023 030c 	bic.w	r3, r3, #12
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	68f9      	ldr	r1, [r7, #12]
 8009ae2:	430b      	orrs	r3, r1
 8009ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	699a      	ldr	r2, [r3, #24]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b04:	f040 80e4 	bne.w	8009cd0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4aab      	ldr	r2, [pc, #684]	; (8009dbc <UART_SetConfig+0x324>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d004      	beq.n	8009b1c <UART_SetConfig+0x84>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4aaa      	ldr	r2, [pc, #680]	; (8009dc0 <UART_SetConfig+0x328>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d16c      	bne.n	8009bf6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009b1c:	f7fd faee 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009b20:	4602      	mov	r2, r0
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009a      	lsls	r2, r3, #2
 8009b2a:	441a      	add	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b36:	4aa3      	ldr	r2, [pc, #652]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009b38:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3c:	095b      	lsrs	r3, r3, #5
 8009b3e:	011c      	lsls	r4, r3, #4
 8009b40:	f7fd fadc 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009b44:	4602      	mov	r2, r0
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009a      	lsls	r2, r3, #2
 8009b4e:	441a      	add	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	fbb2 f5f3 	udiv	r5, r2, r3
 8009b5a:	f7fd facf 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009a      	lsls	r2, r3, #2
 8009b68:	441a      	add	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b74:	4a93      	ldr	r2, [pc, #588]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009b76:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	2264      	movs	r2, #100	; 0x64
 8009b7e:	fb02 f303 	mul.w	r3, r2, r3
 8009b82:	1aeb      	subs	r3, r5, r3
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	3332      	adds	r3, #50	; 0x32
 8009b88:	4a8e      	ldr	r2, [pc, #568]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b96:	441c      	add	r4, r3
 8009b98:	f7fd fab0 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009a      	lsls	r2, r3, #2
 8009ba6:	441a      	add	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	fbb2 f5f3 	udiv	r5, r2, r3
 8009bb2:	f7fd faa3 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4613      	mov	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	009a      	lsls	r2, r3, #2
 8009bc0:	441a      	add	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bcc:	4a7d      	ldr	r2, [pc, #500]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	2264      	movs	r2, #100	; 0x64
 8009bd6:	fb02 f303 	mul.w	r3, r2, r3
 8009bda:	1aeb      	subs	r3, r5, r3
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	3332      	adds	r3, #50	; 0x32
 8009be0:	4a78      	ldr	r2, [pc, #480]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009be2:	fba2 2303 	umull	r2, r3, r2, r3
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	f003 0207 	and.w	r2, r3, #7
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4422      	add	r2, r4
 8009bf2:	609a      	str	r2, [r3, #8]
 8009bf4:	e154      	b.n	8009ea0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009bf6:	f7fd fa6d 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009a      	lsls	r2, r3, #2
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c10:	4a6c      	ldr	r2, [pc, #432]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009c12:	fba2 2303 	umull	r2, r3, r2, r3
 8009c16:	095b      	lsrs	r3, r3, #5
 8009c18:	011c      	lsls	r4, r3, #4
 8009c1a:	f7fd fa5b 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009a      	lsls	r2, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	fbb2 f5f3 	udiv	r5, r2, r3
 8009c34:	f7fd fa4e 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	009a      	lsls	r2, r3, #2
 8009c42:	441a      	add	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4e:	4a5d      	ldr	r2, [pc, #372]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009c50:	fba2 2303 	umull	r2, r3, r2, r3
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	2264      	movs	r2, #100	; 0x64
 8009c58:	fb02 f303 	mul.w	r3, r2, r3
 8009c5c:	1aeb      	subs	r3, r5, r3
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	3332      	adds	r3, #50	; 0x32
 8009c62:	4a58      	ldr	r2, [pc, #352]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009c64:	fba2 2303 	umull	r2, r3, r2, r3
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c70:	441c      	add	r4, r3
 8009c72:	f7fd fa2f 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009c76:	4602      	mov	r2, r0
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009a      	lsls	r2, r3, #2
 8009c80:	441a      	add	r2, r3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	fbb2 f5f3 	udiv	r5, r2, r3
 8009c8c:	f7fd fa22 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009c90:	4602      	mov	r2, r0
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009a      	lsls	r2, r3, #2
 8009c9a:	441a      	add	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca6:	4a47      	ldr	r2, [pc, #284]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	2264      	movs	r2, #100	; 0x64
 8009cb0:	fb02 f303 	mul.w	r3, r2, r3
 8009cb4:	1aeb      	subs	r3, r5, r3
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	3332      	adds	r3, #50	; 0x32
 8009cba:	4a42      	ldr	r2, [pc, #264]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc0:	095b      	lsrs	r3, r3, #5
 8009cc2:	f003 0207 	and.w	r2, r3, #7
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4422      	add	r2, r4
 8009ccc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8009cce:	e0e7      	b.n	8009ea0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a39      	ldr	r2, [pc, #228]	; (8009dbc <UART_SetConfig+0x324>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d004      	beq.n	8009ce4 <UART_SetConfig+0x24c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a38      	ldr	r2, [pc, #224]	; (8009dc0 <UART_SetConfig+0x328>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d171      	bne.n	8009dc8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009ce4:	f7fd fa0a 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009a      	lsls	r2, r3, #2
 8009cf2:	441a      	add	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfe:	4a31      	ldr	r2, [pc, #196]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009d00:	fba2 2303 	umull	r2, r3, r2, r3
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	011c      	lsls	r4, r3, #4
 8009d08:	f7fd f9f8 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009a      	lsls	r2, r3, #2
 8009d16:	441a      	add	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8009d22:	f7fd f9eb 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009a      	lsls	r2, r3, #2
 8009d30:	441a      	add	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3c:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	2264      	movs	r2, #100	; 0x64
 8009d46:	fb02 f303 	mul.w	r3, r2, r3
 8009d4a:	1aeb      	subs	r3, r5, r3
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	3332      	adds	r3, #50	; 0x32
 8009d50:	4a1c      	ldr	r2, [pc, #112]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009d52:	fba2 2303 	umull	r2, r3, r2, r3
 8009d56:	095b      	lsrs	r3, r3, #5
 8009d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d5c:	441c      	add	r4, r3
 8009d5e:	f7fd f9cd 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009a      	lsls	r2, r3, #2
 8009d6c:	441a      	add	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	fbb2 f5f3 	udiv	r5, r2, r3
 8009d78:	f7fd f9c0 	bl	80070fc <HAL_RCC_GetPCLK2Freq>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009a      	lsls	r2, r3, #2
 8009d86:	441a      	add	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	4a0c      	ldr	r2, [pc, #48]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009d94:	fba2 2303 	umull	r2, r3, r2, r3
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	2264      	movs	r2, #100	; 0x64
 8009d9c:	fb02 f303 	mul.w	r3, r2, r3
 8009da0:	1aeb      	subs	r3, r5, r3
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	3332      	adds	r3, #50	; 0x32
 8009da6:	4a07      	ldr	r2, [pc, #28]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009da8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dac:	095b      	lsrs	r3, r3, #5
 8009dae:	f003 020f 	and.w	r2, r3, #15
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4422      	add	r2, r4
 8009db8:	609a      	str	r2, [r3, #8]
 8009dba:	e071      	b.n	8009ea0 <UART_SetConfig+0x408>
 8009dbc:	40011000 	.word	0x40011000
 8009dc0:	40011400 	.word	0x40011400
 8009dc4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009dc8:	f7fd f984 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009a      	lsls	r2, r3, #2
 8009dd6:	441a      	add	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de2:	4a31      	ldr	r2, [pc, #196]	; (8009ea8 <UART_SetConfig+0x410>)
 8009de4:	fba2 2303 	umull	r2, r3, r2, r3
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	011c      	lsls	r4, r3, #4
 8009dec:	f7fd f972 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009df0:	4602      	mov	r2, r0
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009a      	lsls	r2, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	fbb2 f5f3 	udiv	r5, r2, r3
 8009e06:	f7fd f965 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009a      	lsls	r2, r3, #2
 8009e14:	441a      	add	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e20:	4a21      	ldr	r2, [pc, #132]	; (8009ea8 <UART_SetConfig+0x410>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	095b      	lsrs	r3, r3, #5
 8009e28:	2264      	movs	r2, #100	; 0x64
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	1aeb      	subs	r3, r5, r3
 8009e30:	011b      	lsls	r3, r3, #4
 8009e32:	3332      	adds	r3, #50	; 0x32
 8009e34:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <UART_SetConfig+0x410>)
 8009e36:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e40:	441c      	add	r4, r3
 8009e42:	f7fd f947 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009a      	lsls	r2, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	fbb2 f5f3 	udiv	r5, r2, r3
 8009e5c:	f7fd f93a 	bl	80070d4 <HAL_RCC_GetPCLK1Freq>
 8009e60:	4602      	mov	r2, r0
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009a      	lsls	r2, r3, #2
 8009e6a:	441a      	add	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e76:	4a0c      	ldr	r2, [pc, #48]	; (8009ea8 <UART_SetConfig+0x410>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	2264      	movs	r2, #100	; 0x64
 8009e80:	fb02 f303 	mul.w	r3, r2, r3
 8009e84:	1aeb      	subs	r3, r5, r3
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	3332      	adds	r3, #50	; 0x32
 8009e8a:	4a07      	ldr	r2, [pc, #28]	; (8009ea8 <UART_SetConfig+0x410>)
 8009e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e90:	095b      	lsrs	r3, r3, #5
 8009e92:	f003 020f 	and.w	r2, r3, #15
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4422      	add	r2, r4
 8009e9c:	609a      	str	r2, [r3, #8]
}
 8009e9e:	e7ff      	b.n	8009ea0 <UART_SetConfig+0x408>
 8009ea0:	bf00      	nop
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ea8:	51eb851f 	.word	0x51eb851f

08009eac <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009eac:	b084      	sub	sp, #16
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	f107 001c 	add.w	r0, r7, #28
 8009eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009ec2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009ec6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009eca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009ece:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009ed2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009ed6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	b004      	add	sp, #16
 8009f00:	4770      	bx	lr

08009f02 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f3e:	b480      	push	{r7}
 8009f40:	b083      	sub	sp, #12
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2203      	movs	r2, #3
 8009f4a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b083      	sub	sp, #12
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0303 	and.w	r3, r3, #3
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f94:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f9a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009fa0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009fb0:	f023 030f 	bic.w	r3, r3, #15
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	b2db      	uxtb	r3, r3
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
}  
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a034:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a03a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a040:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a058:	2300      	movs	r3, #0

}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3714      	adds	r7, #20
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b088      	sub	sp, #32
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a070:	2300      	movs	r3, #0
 800a072:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a078:	2310      	movs	r3, #16
 800a07a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a07c:	2340      	movs	r3, #64	; 0x40
 800a07e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a088:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff ff70 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a096:	f241 3288 	movw	r2, #5000	; 0x1388
 800a09a:	2110      	movs	r1, #16
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa63 	bl	800a568 <SDMMC_GetCmdResp1>
 800a0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b088      	sub	sp, #32
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a0c0:	2311      	movs	r3, #17
 800a0c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d2:	f107 0308 	add.w	r3, r7, #8
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff4c 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e2:	2111      	movs	r1, #17
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fa3f 	bl	800a568 <SDMMC_GetCmdResp1>
 800a0ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ec:	69fb      	ldr	r3, [r7, #28]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b088      	sub	sp, #32
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a100:	2300      	movs	r3, #0
 800a102:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a108:	2312      	movs	r3, #18
 800a10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ff28 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a126:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12a:	2112      	movs	r1, #18
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fa1b 	bl	800a568 <SDMMC_GetCmdResp1>
 800a132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a134:	69fb      	ldr	r3, [r7, #28]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a148:	2300      	movs	r3, #0
 800a14a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a150:	2318      	movs	r3, #24
 800a152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a158:	2300      	movs	r3, #0
 800a15a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a160:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a162:	f107 0308 	add.w	r3, r7, #8
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff ff04 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a16e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a172:	2118      	movs	r1, #24
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f9f7 	bl	800a568 <SDMMC_GetCmdResp1>
 800a17a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17c:	69fb      	ldr	r3, [r7, #28]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3720      	adds	r7, #32
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b088      	sub	sp, #32
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a190:	2300      	movs	r3, #0
 800a192:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a198:	2319      	movs	r3, #25
 800a19a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1aa:	f107 0308 	add.w	r3, r7, #8
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fee0 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a1b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ba:	2119      	movs	r1, #25
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f9d3 	bl	800a568 <SDMMC_GetCmdResp1>
 800a1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1f0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff febc 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800a1fe:	4a05      	ldr	r2, [pc, #20]	; (800a214 <SDMMC_CmdStopTransfer+0x44>)
 800a200:	210c      	movs	r1, #12
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f9b0 	bl	800a568 <SDMMC_GetCmdResp1>
 800a208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a20a:	69fb      	ldr	r3, [r7, #28]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	05f5e100 	.word	0x05f5e100

0800a218 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	; 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a224:	2300      	movs	r3, #0
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a22c:	2307      	movs	r3, #7
 800a22e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a234:	2300      	movs	r3, #0
 800a236:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a23c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a23e:	f107 0310 	add.w	r3, r7, #16
 800a242:	4619      	mov	r1, r3
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7ff fe96 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24e:	2107      	movs	r1, #7
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f989 	bl	800a568 <SDMMC_GetCmdResp1>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3728      	adds	r7, #40	; 0x28
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b088      	sub	sp, #32
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a282:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff fe73 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f93f 	bl	800a514 <SDMMC_GetCmdError>
 800a296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a298:	69fb      	ldr	r3, [r7, #28]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3720      	adds	r7, #32
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b088      	sub	sp, #32
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a2ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2b8:	2340      	movs	r3, #64	; 0x40
 800a2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff fe52 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fb10 	bl	800a8f8 <SDMMC_GetCmdResp7>
 800a2d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2da:	69fb      	ldr	r3, [r7, #28]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2f6:	2337      	movs	r3, #55	; 0x37
 800a2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a306:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7ff fe31 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a314:	f241 3288 	movw	r2, #5000	; 0x1388
 800a318:	2137      	movs	r1, #55	; 0x37
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f924 	bl	800a568 <SDMMC_GetCmdResp1>
 800a320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a322:	69fb      	ldr	r3, [r7, #28]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3720      	adds	r7, #32
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b088      	sub	sp, #32
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a346:	2329      	movs	r3, #41	; 0x29
 800a348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a34e:	2300      	movs	r3, #0
 800a350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a356:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fe09 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fa25 	bl	800a7b4 <SDMMC_GetCmdResp3>
 800a36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a36c:	69fb      	ldr	r3, [r7, #28]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3720      	adds	r7, #32
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b088      	sub	sp, #32
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a380:	2300      	movs	r3, #0
 800a382:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a388:	2306      	movs	r3, #6
 800a38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a38c:	2340      	movs	r3, #64	; 0x40
 800a38e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a390:	2300      	movs	r3, #0
 800a392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a398:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a39a:	f107 0308 	add.w	r3, r7, #8
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff fde8 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3aa:	2106      	movs	r1, #6
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8db 	bl	800a568 <SDMMC_GetCmdResp1>
 800a3b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3720      	adds	r7, #32
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b088      	sub	sp, #32
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a3ce:	2333      	movs	r3, #51	; 0x33
 800a3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3d2:	2340      	movs	r3, #64	; 0x40
 800a3d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3de:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3e0:	f107 0308 	add.w	r3, r7, #8
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fdc5 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	2133      	movs	r1, #51	; 0x33
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8b8 	bl	800a568 <SDMMC_GetCmdResp1>
 800a3f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3720      	adds	r7, #32
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a414:	2302      	movs	r3, #2
 800a416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a418:	23c0      	movs	r3, #192	; 0xc0
 800a41a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a424:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff fda2 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f97e 	bl	800a734 <SDMMC_GetCmdResp2>
 800a438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a43a:	69fb      	ldr	r3, [r7, #28]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a456:	2309      	movs	r3, #9
 800a458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a45a:	23c0      	movs	r3, #192	; 0xc0
 800a45c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a45e:	2300      	movs	r3, #0
 800a460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a466:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a468:	f107 0308 	add.w	r3, r7, #8
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff fd81 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f95d 	bl	800a734 <SDMMC_GetCmdResp2>
 800a47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3720      	adds	r7, #32
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b088      	sub	sp, #32
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a498:	2303      	movs	r3, #3
 800a49a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4aa:	f107 0308 	add.w	r3, r7, #8
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff fd60 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	2103      	movs	r1, #3
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f9ae 	bl	800a81c <SDMMC_GetCmdResp6>
 800a4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4de:	230d      	movs	r3, #13
 800a4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4e2:	2340      	movs	r3, #64	; 0x40
 800a4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ee:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4f0:	f107 0308 	add.w	r3, r7, #8
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff fd3d 	bl	8009f76 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a500:	210d      	movs	r1, #13
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f830 	bl	800a568 <SDMMC_GetCmdResp1>
 800a508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a50a:	69fb      	ldr	r3, [r7, #28]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3720      	adds	r7, #32
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a514:	b490      	push	{r4, r7}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a51c:	4b10      	ldr	r3, [pc, #64]	; (800a560 <SDMMC_GetCmdError+0x4c>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a10      	ldr	r2, [pc, #64]	; (800a564 <SDMMC_GetCmdError+0x50>)
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	0a5b      	lsrs	r3, r3, #9
 800a528:	f241 3288 	movw	r2, #5000	; 0x1388
 800a52c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a530:	4623      	mov	r3, r4
 800a532:	1e5c      	subs	r4, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a53c:	e00a      	b.n	800a554 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0f2      	beq.n	800a530 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a550:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bc90      	pop	{r4, r7}
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	2000015c 	.word	0x2000015c
 800a564:	10624dd3 	.word	0x10624dd3

0800a568 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a568:	b590      	push	{r4, r7, lr}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	460b      	mov	r3, r1
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a576:	4b6c      	ldr	r3, [pc, #432]	; (800a728 <SDMMC_GetCmdResp1+0x1c0>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a6c      	ldr	r2, [pc, #432]	; (800a72c <SDMMC_GetCmdResp1+0x1c4>)
 800a57c:	fba2 2303 	umull	r2, r3, r2, r3
 800a580:	0a5b      	lsrs	r3, r3, #9
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a588:	4623      	mov	r3, r4
 800a58a:	1e5c      	subs	r4, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a594:	e0c3      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f2      	beq.n	800a588 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a6:	f003 0304 	and.w	r3, r3, #4
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d004      	beq.n	800a5b8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2204      	movs	r2, #4
 800a5b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	e0b2      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e0a7      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fcfb 	bl	8009fca <SDIO_GetCommandResponse>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d001      	beq.n	800a5e2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e09d      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f7ff fcf9 	bl	8009fe4 <SDIO_GetResponse>
 800a5f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	4b4e      	ldr	r3, [pc, #312]	; (800a730 <SDMMC_GetCmdResp1+0x1c8>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e08d      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	da02      	bge.n	800a60e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a608:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a60c:	e087      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a618:	2340      	movs	r3, #64	; 0x40
 800a61a:	e080      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a626:	2380      	movs	r3, #128	; 0x80
 800a628:	e079      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a634:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a638:	e071      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a644:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a648:	e069      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a658:	e061      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a668:	e059      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a678:	e051      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a688:	e049      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a698:	e041      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a8:	e039      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a6b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6b8:	e031      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d002      	beq.n	800a6ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a6c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a6c8:	e029      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a6d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6d8:	e021      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6e8:	e019      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6f8:	e011      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a704:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a708:	e009      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a714:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a718:	e001      	b.n	800a71e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a71a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a71e:	4618      	mov	r0, r3
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd90      	pop	{r4, r7, pc}
 800a726:	bf00      	nop
 800a728:	2000015c 	.word	0x2000015c
 800a72c:	10624dd3 	.word	0x10624dd3
 800a730:	fdffe008 	.word	0xfdffe008

0800a734 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a734:	b490      	push	{r4, r7}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a73c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <SDMMC_GetCmdResp2+0x78>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <SDMMC_GetCmdResp2+0x7c>)
 800a742:	fba2 2303 	umull	r2, r3, r2, r3
 800a746:	0a5b      	lsrs	r3, r3, #9
 800a748:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a750:	4623      	mov	r3, r4
 800a752:	1e5c      	subs	r4, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a75c:	e020      	b.n	800a7a0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a762:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f2      	beq.n	800a750 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76e:	f003 0304 	and.w	r3, r3, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2204      	movs	r2, #4
 800a77a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a77c:	2304      	movs	r3, #4
 800a77e:	e00f      	b.n	800a7a0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a792:	2301      	movs	r3, #1
 800a794:	e004      	b.n	800a7a0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc90      	pop	{r4, r7}
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	2000015c 	.word	0x2000015c
 800a7b0:	10624dd3 	.word	0x10624dd3

0800a7b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a7b4:	b490      	push	{r4, r7}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7bc:	4b15      	ldr	r3, [pc, #84]	; (800a814 <SDMMC_GetCmdResp3+0x60>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a15      	ldr	r2, [pc, #84]	; (800a818 <SDMMC_GetCmdResp3+0x64>)
 800a7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c6:	0a5b      	lsrs	r3, r3, #9
 800a7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	1e5c      	subs	r4, r3, #1
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7dc:	e015      	b.n	800a80a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f2      	beq.n	800a7d0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	e004      	b.n	800a80a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a806:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc90      	pop	{r4, r7}
 800a812:	4770      	bx	lr
 800a814:	2000015c 	.word	0x2000015c
 800a818:	10624dd3 	.word	0x10624dd3

0800a81c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a81c:	b590      	push	{r4, r7, lr}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	460b      	mov	r3, r1
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <SDMMC_GetCmdResp6+0xd4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a31      	ldr	r2, [pc, #196]	; (800a8f4 <SDMMC_GetCmdResp6+0xd8>)
 800a830:	fba2 2303 	umull	r2, r3, r2, r3
 800a834:	0a5b      	lsrs	r3, r3, #9
 800a836:	f241 3288 	movw	r2, #5000	; 0x1388
 800a83a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a83e:	4623      	mov	r3, r4
 800a840:	1e5c      	subs	r4, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a846:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a84a:	e04c      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a850:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0f2      	beq.n	800a83e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2204      	movs	r2, #4
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a86a:	2304      	movs	r3, #4
 800a86c:	e03b      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d004      	beq.n	800a884 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a880:	2301      	movs	r3, #1
 800a882:	e030      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f7ff fba0 	bl	8009fca <SDIO_GetCommandResponse>
 800a88a:	4603      	mov	r3, r0
 800a88c:	461a      	mov	r2, r3
 800a88e:	7afb      	ldrb	r3, [r7, #11]
 800a890:	4293      	cmp	r3, r2
 800a892:	d001      	beq.n	800a898 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a894:	2301      	movs	r3, #1
 800a896:	e026      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff fb9e 	bl	8009fe4 <SDIO_GetResponse>
 800a8a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	0c1b      	lsrs	r3, r3, #16
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e011      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8d0:	e009      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e0:	e001      	b.n	800a8e6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd90      	pop	{r4, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	2000015c 	.word	0x2000015c
 800a8f4:	10624dd3 	.word	0x10624dd3

0800a8f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a8f8:	b490      	push	{r4, r7}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a900:	4b18      	ldr	r3, [pc, #96]	; (800a964 <SDMMC_GetCmdResp7+0x6c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a18      	ldr	r2, [pc, #96]	; (800a968 <SDMMC_GetCmdResp7+0x70>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	0a5b      	lsrs	r3, r3, #9
 800a90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a910:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a914:	4623      	mov	r3, r4
 800a916:	1e5c      	subs	r4, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a91c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a920:	e01a      	b.n	800a958 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a926:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0f2      	beq.n	800a914 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	f003 0304 	and.w	r3, r3, #4
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2240      	movs	r2, #64	; 0x40
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a940:	2304      	movs	r3, #4
 800a942:	e009      	b.n	800a958 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2240      	movs	r2, #64	; 0x40
 800a954:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a956:	2300      	movs	r3, #0
  
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bc90      	pop	{r4, r7}
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	2000015c 	.word	0x2000015c
 800a968:	10624dd3 	.word	0x10624dd3

0800a96c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a96c:	b084      	sub	sp, #16
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	f107 001c 	add.w	r0, r7, #28
 800a97a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	2b01      	cmp	r3, #1
 800a982:	d122      	bne.n	800a9ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d105      	bne.n	800a9be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f001 fa7c 	bl	800bebc <USB_CoreReset>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]
 800a9c8:	e01a      	b.n	800aa00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 fa70 	bl	800bebc <USB_CoreReset>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d106      	bne.n	800a9f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	639a      	str	r2, [r3, #56]	; 0x38
 800a9f2:	e005      	b.n	800aa00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d10b      	bne.n	800aa1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f043 0206 	orr.w	r2, r3, #6
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa2a:	b004      	add	sp, #16
 800aa2c:	4770      	bx	lr
	...

0800aa30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d165      	bne.n	800ab10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4a41      	ldr	r2, [pc, #260]	; (800ab4c <USB_SetTurnaroundTime+0x11c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d906      	bls.n	800aa5a <USB_SetTurnaroundTime+0x2a>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	4a40      	ldr	r2, [pc, #256]	; (800ab50 <USB_SetTurnaroundTime+0x120>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d802      	bhi.n	800aa5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aa54:	230f      	movs	r3, #15
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	e062      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4a3c      	ldr	r2, [pc, #240]	; (800ab50 <USB_SetTurnaroundTime+0x120>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d906      	bls.n	800aa70 <USB_SetTurnaroundTime+0x40>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4a3b      	ldr	r2, [pc, #236]	; (800ab54 <USB_SetTurnaroundTime+0x124>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d802      	bhi.n	800aa70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aa6a:	230e      	movs	r3, #14
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	e057      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	4a38      	ldr	r2, [pc, #224]	; (800ab54 <USB_SetTurnaroundTime+0x124>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d906      	bls.n	800aa86 <USB_SetTurnaroundTime+0x56>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	4a37      	ldr	r2, [pc, #220]	; (800ab58 <USB_SetTurnaroundTime+0x128>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d802      	bhi.n	800aa86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa80:	230d      	movs	r3, #13
 800aa82:	617b      	str	r3, [r7, #20]
 800aa84:	e04c      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4a33      	ldr	r2, [pc, #204]	; (800ab58 <USB_SetTurnaroundTime+0x128>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d906      	bls.n	800aa9c <USB_SetTurnaroundTime+0x6c>
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4a32      	ldr	r2, [pc, #200]	; (800ab5c <USB_SetTurnaroundTime+0x12c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d802      	bhi.n	800aa9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa96:	230c      	movs	r3, #12
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e041      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	4a2f      	ldr	r2, [pc, #188]	; (800ab5c <USB_SetTurnaroundTime+0x12c>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d906      	bls.n	800aab2 <USB_SetTurnaroundTime+0x82>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4a2e      	ldr	r2, [pc, #184]	; (800ab60 <USB_SetTurnaroundTime+0x130>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d802      	bhi.n	800aab2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aaac:	230b      	movs	r3, #11
 800aaae:	617b      	str	r3, [r7, #20]
 800aab0:	e036      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	4a2a      	ldr	r2, [pc, #168]	; (800ab60 <USB_SetTurnaroundTime+0x130>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d906      	bls.n	800aac8 <USB_SetTurnaroundTime+0x98>
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	4a29      	ldr	r2, [pc, #164]	; (800ab64 <USB_SetTurnaroundTime+0x134>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d802      	bhi.n	800aac8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aac2:	230a      	movs	r3, #10
 800aac4:	617b      	str	r3, [r7, #20]
 800aac6:	e02b      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	4a26      	ldr	r2, [pc, #152]	; (800ab64 <USB_SetTurnaroundTime+0x134>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d906      	bls.n	800aade <USB_SetTurnaroundTime+0xae>
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	4a25      	ldr	r2, [pc, #148]	; (800ab68 <USB_SetTurnaroundTime+0x138>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d802      	bhi.n	800aade <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aad8:	2309      	movs	r3, #9
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	e020      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4a21      	ldr	r2, [pc, #132]	; (800ab68 <USB_SetTurnaroundTime+0x138>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d906      	bls.n	800aaf4 <USB_SetTurnaroundTime+0xc4>
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	4a20      	ldr	r2, [pc, #128]	; (800ab6c <USB_SetTurnaroundTime+0x13c>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d802      	bhi.n	800aaf4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aaee:	2308      	movs	r3, #8
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e015      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4a1d      	ldr	r2, [pc, #116]	; (800ab6c <USB_SetTurnaroundTime+0x13c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d906      	bls.n	800ab0a <USB_SetTurnaroundTime+0xda>
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4a1c      	ldr	r2, [pc, #112]	; (800ab70 <USB_SetTurnaroundTime+0x140>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d802      	bhi.n	800ab0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab04:	2307      	movs	r3, #7
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e00a      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab0a:	2306      	movs	r3, #6
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e007      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab10:	79fb      	ldrb	r3, [r7, #7]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d102      	bne.n	800ab1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab16:	2309      	movs	r3, #9
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	e001      	b.n	800ab20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ab1c:	2309      	movs	r3, #9
 800ab1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	029b      	lsls	r3, r3, #10
 800ab34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	371c      	adds	r7, #28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	00d8acbf 	.word	0x00d8acbf
 800ab50:	00e4e1bf 	.word	0x00e4e1bf
 800ab54:	00f423ff 	.word	0x00f423ff
 800ab58:	0106737f 	.word	0x0106737f
 800ab5c:	011a499f 	.word	0x011a499f
 800ab60:	01312cff 	.word	0x01312cff
 800ab64:	014ca43f 	.word	0x014ca43f
 800ab68:	016e35ff 	.word	0x016e35ff
 800ab6c:	01a6ab1f 	.word	0x01a6ab1f
 800ab70:	01e847ff 	.word	0x01e847ff

0800ab74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f043 0201 	orr.w	r2, r3, #1
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	f023 0201 	bic.w	r2, r3, #1
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d106      	bne.n	800abe4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60da      	str	r2, [r3, #12]
 800abe2:	e00b      	b.n	800abfc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d106      	bne.n	800abf8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]
 800abf6:	e001      	b.n	800abfc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e003      	b.n	800ac04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800abfc:	2032      	movs	r0, #50	; 0x32
 800abfe:	f7f8 fee5 	bl	80039cc <HAL_Delay>

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
 800ac2a:	e009      	b.n	800ac40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3340      	adds	r3, #64	; 0x40
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	2200      	movs	r2, #0
 800ac38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	2b0e      	cmp	r3, #14
 800ac44:	d9f2      	bls.n	800ac2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d112      	bne.n	800ac72 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38
 800ac70:	e00b      	b.n	800ac8a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac90:	461a      	mov	r2, r3
 800ac92:	2300      	movs	r3, #0
 800ac94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca4:	461a      	mov	r2, r3
 800aca6:	680b      	ldr	r3, [r1, #0]
 800aca8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	2b01      	cmp	r3, #1
 800acae:	d10c      	bne.n	800acca <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d104      	bne.n	800acc0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800acb6:	2100      	movs	r1, #0
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f961 	bl	800af80 <USB_SetDevSpeed>
 800acbe:	e008      	b.n	800acd2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800acc0:	2101      	movs	r1, #1
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f95c 	bl	800af80 <USB_SetDevSpeed>
 800acc8:	e003      	b.n	800acd2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800acca:	2103      	movs	r1, #3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f957 	bl	800af80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800acd2:	2110      	movs	r1, #16
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f90b 	bl	800aef0 <USB_FlushTxFifo>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f929 	bl	800af3c <USB_FlushRxFifo>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acfa:	461a      	mov	r2, r3
 800acfc:	2300      	movs	r3, #0
 800acfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad06:	461a      	mov	r2, r3
 800ad08:	2300      	movs	r3, #0
 800ad0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad12:	461a      	mov	r2, r3
 800ad14:	2300      	movs	r3, #0
 800ad16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	e043      	b.n	800ada6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad34:	d118      	bne.n	800ad68 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad4e:	6013      	str	r3, [r2, #0]
 800ad50:	e013      	b.n	800ad7a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	e008      	b.n	800ad7a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad74:	461a      	mov	r2, r3
 800ad76:	2300      	movs	r3, #0
 800ad78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad86:	461a      	mov	r2, r3
 800ad88:	2300      	movs	r3, #0
 800ad8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3301      	adds	r3, #1
 800ada4:	613b      	str	r3, [r7, #16]
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d3b7      	bcc.n	800ad1e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adae:	2300      	movs	r3, #0
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	e043      	b.n	800ae3c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adca:	d118      	bne.n	800adfe <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	461a      	mov	r2, r3
 800ade0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	e013      	b.n	800ae10 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf4:	461a      	mov	r2, r3
 800adf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	e008      	b.n	800ae10 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2e:	461a      	mov	r2, r3
 800ae30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d3b7      	bcc.n	800adb4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae56:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d111      	bne.n	800ae82 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b20      	ldr	r3, [pc, #128]	; (800aee8 <USB_DevInit+0x2dc>)
 800ae68:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae7c:	f043 0303 	orr.w	r3, r3, #3
 800ae80:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d105      	bne.n	800aea2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	f043 0210 	orr.w	r2, r3, #16
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	699a      	ldr	r2, [r3, #24]
 800aea6:	4b11      	ldr	r3, [pc, #68]	; (800aeec <USB_DevInit+0x2e0>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d005      	beq.n	800aec0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	f043 0208 	orr.w	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d107      	bne.n	800aed6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aece:	f043 0304 	orr.w	r3, r3, #4
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aee2:	b004      	add	sp, #16
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	00800100 	.word	0x00800100
 800aeec:	803c3800 	.word	0x803c3800

0800aef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	019b      	lsls	r3, r3, #6
 800af02:	f043 0220 	orr.w	r2, r3, #32
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a09      	ldr	r2, [pc, #36]	; (800af38 <USB_FlushTxFifo+0x48>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d901      	bls.n	800af1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e006      	b.n	800af2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b20      	cmp	r3, #32
 800af26:	d0f0      	beq.n	800af0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	00030d40 	.word	0x00030d40

0800af3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2210      	movs	r2, #16
 800af4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3301      	adds	r3, #1
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4a09      	ldr	r2, [pc, #36]	; (800af7c <USB_FlushRxFifo+0x40>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d901      	bls.n	800af60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e006      	b.n	800af6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	f003 0310 	and.w	r3, r3, #16
 800af68:	2b10      	cmp	r3, #16
 800af6a:	d0f0      	beq.n	800af4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	00030d40 	.word	0x00030d40

0800af80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afa0:	4313      	orrs	r3, r2
 800afa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b087      	sub	sp, #28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f003 0306 	and.w	r3, r3, #6
 800afca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d102      	bne.n	800afd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800afd2:	2300      	movs	r3, #0
 800afd4:	75fb      	strb	r3, [r7, #23]
 800afd6:	e00a      	b.n	800afee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d002      	beq.n	800afe4 <USB_GetDevSpeed+0x32>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b06      	cmp	r3, #6
 800afe2:	d102      	bne.n	800afea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afe4:	2302      	movs	r3, #2
 800afe6:	75fb      	strb	r3, [r7, #23]
 800afe8:	e001      	b.n	800afee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afea:	230f      	movs	r3, #15
 800afec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	371c      	adds	r7, #28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d13a      	bne.n	800b08e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01e:	69da      	ldr	r2, [r3, #28]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	f003 030f 	and.w	r3, r3, #15
 800b028:	2101      	movs	r1, #1
 800b02a:	fa01 f303 	lsl.w	r3, r1, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	68f9      	ldr	r1, [r7, #12]
 800b032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b036:	4313      	orrs	r3, r2
 800b038:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d155      	bne.n	800b0fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	78db      	ldrb	r3, [r3, #3]
 800b06a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b06c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	059b      	lsls	r3, r3, #22
 800b072:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b074:	4313      	orrs	r3, r2
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b08a:	6013      	str	r3, [r2, #0]
 800b08c:	e036      	b.n	800b0fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b094:	69da      	ldr	r2, [r3, #28]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	f003 030f 	and.w	r3, r3, #15
 800b09e:	2101      	movs	r1, #1
 800b0a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d11a      	bne.n	800b0fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	78db      	ldrb	r3, [r3, #3]
 800b0e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0e2:	430b      	orrs	r3, r1
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	0151      	lsls	r1, r2, #5
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	440a      	add	r2, r1
 800b0ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
	...

0800b10c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d135      	bne.n	800b194 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	f003 030f 	and.w	r3, r3, #15
 800b138:	2101      	movs	r1, #1
 800b13a:	fa01 f303 	lsl.w	r3, r1, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	43db      	mvns	r3, r3
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b148:	4013      	ands	r3, r2
 800b14a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b152:	69da      	ldr	r2, [r3, #28]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	f003 030f 	and.w	r3, r3, #15
 800b15c:	2101      	movs	r1, #1
 800b15e:	fa01 f303 	lsl.w	r3, r1, r3
 800b162:	b29b      	uxth	r3, r3
 800b164:	43db      	mvns	r3, r3
 800b166:	68f9      	ldr	r1, [r7, #12]
 800b168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b16c:	4013      	ands	r3, r2
 800b16e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	0159      	lsls	r1, r3, #5
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	440b      	add	r3, r1
 800b186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18a:	4619      	mov	r1, r3
 800b18c:	4b1f      	ldr	r3, [pc, #124]	; (800b20c <USB_DeactivateEndpoint+0x100>)
 800b18e:	4013      	ands	r3, r2
 800b190:	600b      	str	r3, [r1, #0]
 800b192:	e034      	b.n	800b1fe <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b19a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 030f 	and.w	r3, r3, #15
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1aa:	041b      	lsls	r3, r3, #16
 800b1ac:	43db      	mvns	r3, r3
 800b1ae:	68f9      	ldr	r1, [r7, #12]
 800b1b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1be:	69da      	ldr	r2, [r3, #28]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	68f9      	ldr	r1, [r7, #12]
 800b1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1d8:	4013      	ands	r3, r2
 800b1da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	0159      	lsls	r1, r3, #5
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	440b      	add	r3, r1
 800b1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4b05      	ldr	r3, [pc, #20]	; (800b210 <USB_DeactivateEndpoint+0x104>)
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	ec337800 	.word	0xec337800
 800b210:	eff37800 	.word	0xeff37800

0800b214 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	; 0x28
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	2b01      	cmp	r3, #1
 800b232:	f040 815c 	bne.w	800b4ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d132      	bne.n	800b2a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	015a      	lsls	r2, r3, #5
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	4413      	add	r3, r2
 800b246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	69ba      	ldr	r2, [r7, #24]
 800b24e:	0151      	lsls	r1, r2, #5
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	440a      	add	r2, r1
 800b254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b25c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	0151      	lsls	r1, r2, #5
 800b274:	69fa      	ldr	r2, [r7, #28]
 800b276:	440a      	add	r2, r1
 800b278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	0151      	lsls	r1, r2, #5
 800b294:	69fa      	ldr	r2, [r7, #28]
 800b296:	440a      	add	r2, r1
 800b298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b29c:	0cdb      	lsrs	r3, r3, #19
 800b29e:	04db      	lsls	r3, r3, #19
 800b2a0:	6113      	str	r3, [r2, #16]
 800b2a2:	e074      	b.n	800b38e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	0151      	lsls	r1, r2, #5
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	440a      	add	r2, r1
 800b2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2be:	0cdb      	lsrs	r3, r3, #19
 800b2c0:	04db      	lsls	r3, r3, #19
 800b2c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	015a      	lsls	r2, r3, #5
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	69ba      	ldr	r2, [r7, #24]
 800b2d4:	0151      	lsls	r1, r2, #5
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	440a      	add	r2, r1
 800b2da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	6959      	ldr	r1, [r3, #20]
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	440b      	add	r3, r1
 800b300:	1e59      	subs	r1, r3, #1
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	fbb1 f3f3 	udiv	r3, r1, r3
 800b30a:	04d9      	lsls	r1, r3, #19
 800b30c:	4b9d      	ldr	r3, [pc, #628]	; (800b584 <USB_EPStartXfer+0x370>)
 800b30e:	400b      	ands	r3, r1
 800b310:	69b9      	ldr	r1, [r7, #24]
 800b312:	0148      	lsls	r0, r1, #5
 800b314:	69f9      	ldr	r1, [r7, #28]
 800b316:	4401      	add	r1, r0
 800b318:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b31c:	4313      	orrs	r3, r2
 800b31e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b336:	69b9      	ldr	r1, [r7, #24]
 800b338:	0148      	lsls	r0, r1, #5
 800b33a:	69f9      	ldr	r1, [r7, #28]
 800b33c:	4401      	add	r1, r0
 800b33e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b342:	4313      	orrs	r3, r2
 800b344:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	78db      	ldrb	r3, [r3, #3]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d11f      	bne.n	800b38e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	015a      	lsls	r2, r3, #5
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	4413      	add	r3, r2
 800b356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	0151      	lsls	r1, r2, #5
 800b360:	69fa      	ldr	r2, [r7, #28]
 800b362:	440a      	add	r2, r1
 800b364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b368:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b36c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	69ba      	ldr	r2, [r7, #24]
 800b37e:	0151      	lsls	r1, r2, #5
 800b380:	69fa      	ldr	r2, [r7, #28]
 800b382:	440a      	add	r2, r1
 800b384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b38c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d14b      	bne.n	800b42c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d009      	beq.n	800b3b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	78db      	ldrb	r3, [r3, #3]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d128      	bne.n	800b40a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d110      	bne.n	800b3ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	0151      	lsls	r1, r2, #5
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	440a      	add	r2, r1
 800b3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	e00f      	b.n	800b40a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	69ba      	ldr	r2, [r7, #24]
 800b3fa:	0151      	lsls	r1, r2, #5
 800b3fc:	69fa      	ldr	r2, [r7, #28]
 800b3fe:	440a      	add	r2, r1
 800b400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b408:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	0151      	lsls	r1, r2, #5
 800b41c:	69fa      	ldr	r2, [r7, #28]
 800b41e:	440a      	add	r2, r1
 800b420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	e12f      	b.n	800b68c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	0151      	lsls	r1, r2, #5
 800b43e:	69fa      	ldr	r2, [r7, #28]
 800b440:	440a      	add	r2, r1
 800b442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b446:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b44a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	78db      	ldrb	r3, [r3, #3]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d015      	beq.n	800b480 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 8117 	beq.w	800b68c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	2101      	movs	r1, #1
 800b470:	fa01 f303 	lsl.w	r3, r1, r3
 800b474:	69f9      	ldr	r1, [r7, #28]
 800b476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b47a:	4313      	orrs	r3, r2
 800b47c:	634b      	str	r3, [r1, #52]	; 0x34
 800b47e:	e105      	b.n	800b68c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d110      	bne.n	800b4b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	0151      	lsls	r1, r2, #5
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	440a      	add	r2, r1
 800b4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	e00f      	b.n	800b4d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	0151      	lsls	r1, r2, #5
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	68d9      	ldr	r1, [r3, #12]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	781a      	ldrb	r2, [r3, #0]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	b298      	uxth	r0, r3
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 fa2b 	bl	800b942 <USB_WritePacket>
 800b4ec:	e0ce      	b.n	800b68c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b508:	0cdb      	lsrs	r3, r3, #19
 800b50a:	04db      	lsls	r3, r3, #19
 800b50c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	0151      	lsls	r1, r2, #5
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	440a      	add	r2, r1
 800b524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b52c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b530:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	695b      	ldr	r3, [r3, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d126      	bne.n	800b588 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	4413      	add	r3, r2
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	691a      	ldr	r2, [r3, #16]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b550:	69b9      	ldr	r1, [r7, #24]
 800b552:	0148      	lsls	r0, r1, #5
 800b554:	69f9      	ldr	r1, [r7, #28]
 800b556:	4401      	add	r1, r0
 800b558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b55c:	4313      	orrs	r3, r2
 800b55e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	0151      	lsls	r1, r2, #5
 800b572:	69fa      	ldr	r2, [r7, #28]
 800b574:	440a      	add	r2, r1
 800b576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b57a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b57e:	6113      	str	r3, [r2, #16]
 800b580:	e036      	b.n	800b5f0 <USB_EPStartXfer+0x3dc>
 800b582:	bf00      	nop
 800b584:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	695a      	ldr	r2, [r3, #20]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	4413      	add	r3, r2
 800b592:	1e5a      	subs	r2, r3, #1
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	fbb2 f3f3 	udiv	r3, r2, r3
 800b59c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	015a      	lsls	r2, r3, #5
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5aa:	691a      	ldr	r2, [r3, #16]
 800b5ac:	8afb      	ldrh	r3, [r7, #22]
 800b5ae:	04d9      	lsls	r1, r3, #19
 800b5b0:	4b39      	ldr	r3, [pc, #228]	; (800b698 <USB_EPStartXfer+0x484>)
 800b5b2:	400b      	ands	r3, r1
 800b5b4:	69b9      	ldr	r1, [r7, #24]
 800b5b6:	0148      	lsls	r0, r1, #5
 800b5b8:	69f9      	ldr	r1, [r7, #28]
 800b5ba:	4401      	add	r1, r0
 800b5bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	015a      	lsls	r2, r3, #5
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d0:	691a      	ldr	r2, [r3, #16]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	8af9      	ldrh	r1, [r7, #22]
 800b5d8:	fb01 f303 	mul.w	r3, r1, r3
 800b5dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5e0:	69b9      	ldr	r1, [r7, #24]
 800b5e2:	0148      	lsls	r0, r1, #5
 800b5e4:	69f9      	ldr	r1, [r7, #28]
 800b5e6:	4401      	add	r1, r0
 800b5e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10d      	bne.n	800b612 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d009      	beq.n	800b612 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	68d9      	ldr	r1, [r3, #12]
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	460a      	mov	r2, r1
 800b610:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	78db      	ldrb	r3, [r3, #3]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d128      	bne.n	800b66c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b626:	2b00      	cmp	r3, #0
 800b628:	d110      	bne.n	800b64c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	4413      	add	r3, r2
 800b632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	69ba      	ldr	r2, [r7, #24]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	69fa      	ldr	r2, [r7, #28]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b644:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	e00f      	b.n	800b66c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	015a      	lsls	r2, r3, #5
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	4413      	add	r3, r2
 800b654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69ba      	ldr	r2, [r7, #24]
 800b65c:	0151      	lsls	r1, r2, #5
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	440a      	add	r2, r1
 800b662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b66a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69ba      	ldr	r2, [r7, #24]
 800b67c:	0151      	lsls	r1, r2, #5
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	440a      	add	r2, r1
 800b682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b68a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3720      	adds	r7, #32
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	1ff80000 	.word	0x1ff80000

0800b69c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	785b      	ldrb	r3, [r3, #1]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	f040 80cd 	bne.w	800b858 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d132      	bne.n	800b72c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	0151      	lsls	r1, r2, #5
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	440a      	add	r2, r1
 800b6dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	015a      	lsls	r2, r3, #5
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	4413      	add	r3, r2
 800b712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	0151      	lsls	r1, r2, #5
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	440a      	add	r2, r1
 800b720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b724:	0cdb      	lsrs	r3, r3, #19
 800b726:	04db      	lsls	r3, r3, #19
 800b728:	6113      	str	r3, [r2, #16]
 800b72a:	e04e      	b.n	800b7ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	440a      	add	r2, r1
 800b742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b746:	0cdb      	lsrs	r3, r3, #19
 800b748:	04db      	lsls	r3, r3, #19
 800b74a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	0151      	lsls	r1, r2, #5
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	440a      	add	r2, r1
 800b762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b766:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b76a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b76e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	695a      	ldr	r2, [r3, #20]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d903      	bls.n	800b784 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	0151      	lsls	r1, r2, #5
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	440a      	add	r2, r1
 800b79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b0:	691a      	ldr	r2, [r3, #16]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7ba:	6939      	ldr	r1, [r7, #16]
 800b7bc:	0148      	lsls	r0, r1, #5
 800b7be:	6979      	ldr	r1, [r7, #20]
 800b7c0:	4401      	add	r1, r0
 800b7c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d11e      	bne.n	800b80e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d009      	beq.n	800b7ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	015a      	lsls	r2, r3, #5
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	e092      	b.n	800b934 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	0151      	lsls	r1, r2, #5
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	440a      	add	r2, r1
 800b824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b82c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d07e      	beq.n	800b934 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	f003 030f 	and.w	r3, r3, #15
 800b846:	2101      	movs	r1, #1
 800b848:	fa01 f303 	lsl.w	r3, r1, r3
 800b84c:	6979      	ldr	r1, [r7, #20]
 800b84e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b852:	4313      	orrs	r3, r2
 800b854:	634b      	str	r3, [r1, #52]	; 0x34
 800b856:	e06d      	b.n	800b934 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	0151      	lsls	r1, r2, #5
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	440a      	add	r2, r1
 800b86e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b872:	0cdb      	lsrs	r3, r3, #19
 800b874:	04db      	lsls	r3, r3, #19
 800b876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	0151      	lsls	r1, r2, #5
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	440a      	add	r2, r1
 800b88e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b89a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	695b      	ldr	r3, [r3, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	0151      	lsls	r1, r2, #5
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	440a      	add	r2, r1
 800b8c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	691a      	ldr	r2, [r3, #16]
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8e2:	6939      	ldr	r1, [r7, #16]
 800b8e4:	0148      	lsls	r0, r1, #5
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	4401      	add	r1, r0
 800b8ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d10d      	bne.n	800b914 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d009      	beq.n	800b914 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	68d9      	ldr	r1, [r3, #12]
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b910:	460a      	mov	r2, r1
 800b912:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	0151      	lsls	r1, r2, #5
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	440a      	add	r2, r1
 800b92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b92e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b942:	b480      	push	{r7}
 800b944:	b089      	sub	sp, #36	; 0x24
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	4611      	mov	r1, r2
 800b94e:	461a      	mov	r2, r3
 800b950:	460b      	mov	r3, r1
 800b952:	71fb      	strb	r3, [r7, #7]
 800b954:	4613      	mov	r3, r2
 800b956:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b960:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b964:	2b00      	cmp	r3, #0
 800b966:	d11a      	bne.n	800b99e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b968:	88bb      	ldrh	r3, [r7, #4]
 800b96a:	3303      	adds	r3, #3
 800b96c:	089b      	lsrs	r3, r3, #2
 800b96e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b970:	2300      	movs	r3, #0
 800b972:	61bb      	str	r3, [r7, #24]
 800b974:	e00f      	b.n	800b996 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	031a      	lsls	r2, r3, #12
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b982:	461a      	mov	r2, r3
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	3304      	adds	r3, #4
 800b98e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	3301      	adds	r3, #1
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	69ba      	ldr	r2, [r7, #24]
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d3eb      	bcc.n	800b976 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3724      	adds	r7, #36	; 0x24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b089      	sub	sp, #36	; 0x24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b9c2:	88fb      	ldrh	r3, [r7, #6]
 800b9c4:	3303      	adds	r3, #3
 800b9c6:	089b      	lsrs	r3, r3, #2
 800b9c8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61bb      	str	r3, [r7, #24]
 800b9ce:	e00b      	b.n	800b9e8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	61bb      	str	r3, [r7, #24]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d3ef      	bcc.n	800b9d0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3724      	adds	r7, #36	; 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d12c      	bne.n	800ba74 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	db12      	blt.n	800ba52 <USB_EPSetStall+0x54>
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00f      	beq.n	800ba52 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	0151      	lsls	r1, r2, #5
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	440a      	add	r2, r1
 800ba48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba50:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	015a      	lsls	r2, r3, #5
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	0151      	lsls	r1, r2, #5
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	440a      	add	r2, r1
 800ba68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	e02b      	b.n	800bacc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db12      	blt.n	800baac <USB_EPSetStall+0xae>
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00f      	beq.n	800baac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800baaa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	785b      	ldrb	r3, [r3, #1]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d128      	bne.n	800bb48 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	0151      	lsls	r1, r2, #5
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	440a      	add	r2, r1
 800bb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	78db      	ldrb	r3, [r3, #3]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d003      	beq.n	800bb26 <USB_EPClearStall+0x4c>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	78db      	ldrb	r3, [r3, #3]
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d138      	bne.n	800bb98 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	0151      	lsls	r1, r2, #5
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	440a      	add	r2, r1
 800bb3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	e027      	b.n	800bb98 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	0151      	lsls	r1, r2, #5
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	440a      	add	r2, r1
 800bb5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	78db      	ldrb	r3, [r3, #3]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d003      	beq.n	800bb78 <USB_EPClearStall+0x9e>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	78db      	ldrb	r3, [r3, #3]
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d10f      	bne.n	800bb98 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	0151      	lsls	r1, r2, #5
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	440a      	add	r2, r1
 800bb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb96:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbc8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	011b      	lsls	r3, r3, #4
 800bbd6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc0c:	f023 0302 	bic.w	r3, r3, #2
 800bc10:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bc12:	2003      	movs	r0, #3
 800bc14:	f7f7 feda 	bl	80039cc <HAL_Delay>

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b084      	sub	sp, #16
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc3c:	f043 0302 	orr.w	r3, r3, #2
 800bc40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bc42:	2003      	movs	r0, #3
 800bc44:	f7f7 fec2 	bl	80039cc <HAL_Delay>

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b085      	sub	sp, #20
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4013      	ands	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	4013      	ands	r3, r2
 800bc9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	0c1b      	lsrs	r3, r3, #16
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc8:	69db      	ldr	r3, [r3, #28]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	4013      	ands	r3, r2
 800bcce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	b29b      	uxth	r3, r3
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	460b      	mov	r3, r1
 800bd26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	fa22 f303 	lsr.w	r3, r2, r3
 800bd4c:	01db      	lsls	r3, r3, #7
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd56:	78fb      	ldrb	r3, [r7, #3]
 800bd58:	015a      	lsls	r2, r3, #5
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	4013      	ands	r3, r2
 800bd68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	371c      	adds	r7, #28
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	f003 0301 	and.w	r3, r3, #1
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bdb2:	f023 0307 	bic.w	r3, r3, #7
 800bdb6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f003 0306 	and.w	r3, r3, #6
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d109      	bne.n	800bddc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdd6:	f043 0303 	orr.w	r3, r3, #3
 800bdda:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
	...

0800be00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	460b      	mov	r3, r1
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	333c      	adds	r3, #60	; 0x3c
 800be16:	3304      	adds	r3, #4
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	4a26      	ldr	r2, [pc, #152]	; (800beb8 <USB_EP0_OutStart+0xb8>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d90a      	bls.n	800be3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be34:	d101      	bne.n	800be3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	e037      	b.n	800beaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	461a      	mov	r2, r3
 800be42:	2300      	movs	r3, #0
 800be44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be68:	f043 0318 	orr.w	r3, r3, #24
 800be6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d10f      	bne.n	800bea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	371c      	adds	r7, #28
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	4f54300a 	.word	0x4f54300a

0800bebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bec4:	2300      	movs	r3, #0
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	4a13      	ldr	r2, [pc, #76]	; (800bf20 <USB_CoreReset+0x64>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d901      	bls.n	800beda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e01b      	b.n	800bf12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	daf2      	bge.n	800bec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	f043 0201 	orr.w	r2, r3, #1
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3301      	adds	r3, #1
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4a09      	ldr	r2, [pc, #36]	; (800bf20 <USB_CoreReset+0x64>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d901      	bls.n	800bf04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf00:	2303      	movs	r3, #3
 800bf02:	e006      	b.n	800bf12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d0f0      	beq.n	800bef2 <USB_CoreReset+0x36>

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	00030d40 	.word	0x00030d40

0800bf24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7c1b      	ldrb	r3, [r3, #16]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d115      	bne.n	800bf68 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf40:	2202      	movs	r2, #2
 800bf42:	2181      	movs	r1, #129	; 0x81
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f003 fad8 	bl	800f4fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf54:	2202      	movs	r2, #2
 800bf56:	2101      	movs	r1, #1
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f003 face 	bl	800f4fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bf66:	e012      	b.n	800bf8e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf68:	2340      	movs	r3, #64	; 0x40
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	2181      	movs	r1, #129	; 0x81
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f003 fac3 	bl	800f4fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf7a:	2340      	movs	r3, #64	; 0x40
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	2101      	movs	r1, #1
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f003 faba 	bl	800f4fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf8e:	2308      	movs	r3, #8
 800bf90:	2203      	movs	r2, #3
 800bf92:	2182      	movs	r1, #130	; 0x82
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f003 fab0 	bl	800f4fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bfa0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bfa4:	f003 fd5e 	bl	800fa64 <malloc>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	461a      	mov	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
 800bfc0:	e026      	b.n	800c010 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bfc8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7c1b      	ldrb	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d109      	bne.n	800c000 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff6:	2101      	movs	r1, #1
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f003 fb6f 	bl	800f6dc <USBD_LL_PrepareReceive>
 800bffe:	e007      	b.n	800c010 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c006:	2340      	movs	r3, #64	; 0x40
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f003 fb66 	bl	800f6dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	460b      	mov	r3, r1
 800c024:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c02a:	2181      	movs	r1, #129	; 0x81
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f003 fa8a 	bl	800f546 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c038:	2101      	movs	r1, #1
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f003 fa83 	bl	800f546 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c048:	2182      	movs	r1, #130	; 0x82
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f003 fa7b 	bl	800f546 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00e      	beq.n	800c07e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c070:	4618      	mov	r0, r3
 800c072:	f003 fcff 	bl	800fa74 <free>
    pdev->pClassData = NULL;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c098:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d039      	beq.n	800c126 <USBD_CDC_Setup+0x9e>
 800c0b2:	2b20      	cmp	r3, #32
 800c0b4:	d17c      	bne.n	800c1b0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	88db      	ldrh	r3, [r3, #6]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d029      	beq.n	800c112 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b25b      	sxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	da11      	bge.n	800c0ec <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c0d4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	88d2      	ldrh	r2, [r2, #6]
 800c0da:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0dc:	6939      	ldr	r1, [r7, #16]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	88db      	ldrh	r3, [r3, #6]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f9c9 	bl	800d47c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c0ea:	e068      	b.n	800c1be <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	785a      	ldrb	r2, [r3, #1]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	88db      	ldrh	r3, [r3, #6]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c102:	6939      	ldr	r1, [r7, #16]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	88db      	ldrh	r3, [r3, #6]
 800c108:	461a      	mov	r2, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 f9e4 	bl	800d4d8 <USBD_CtlPrepareRx>
    break;
 800c110:	e055      	b.n	800c1be <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	7850      	ldrb	r0, [r2, #1]
 800c11e:	2200      	movs	r2, #0
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	4798      	blx	r3
    break;
 800c124:	e04b      	b.n	800c1be <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	785b      	ldrb	r3, [r3, #1]
 800c12a:	2b0a      	cmp	r3, #10
 800c12c:	d017      	beq.n	800c15e <USBD_CDC_Setup+0xd6>
 800c12e:	2b0b      	cmp	r3, #11
 800c130:	d029      	beq.n	800c186 <USBD_CDC_Setup+0xfe>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d133      	bne.n	800c19e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d107      	bne.n	800c150 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c140:	f107 030c 	add.w	r3, r7, #12
 800c144:	2202      	movs	r2, #2
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 f997 	bl	800d47c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c14e:	e02e      	b.n	800c1ae <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f001 f927 	bl	800d3a6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c158:	2302      	movs	r3, #2
 800c15a:	75fb      	strb	r3, [r7, #23]
      break;
 800c15c:	e027      	b.n	800c1ae <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c164:	2b03      	cmp	r3, #3
 800c166:	d107      	bne.n	800c178 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c168:	f107 030f 	add.w	r3, r7, #15
 800c16c:	2201      	movs	r2, #1
 800c16e:	4619      	mov	r1, r3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f001 f983 	bl	800d47c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c176:	e01a      	b.n	800c1ae <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f913 	bl	800d3a6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c180:	2302      	movs	r3, #2
 800c182:	75fb      	strb	r3, [r7, #23]
      break;
 800c184:	e013      	b.n	800c1ae <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d00d      	beq.n	800c1ac <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f001 f907 	bl	800d3a6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c198:	2302      	movs	r3, #2
 800c19a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c19c:	e006      	b.n	800c1ac <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 f900 	bl	800d3a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1aa:	e000      	b.n	800c1ae <USBD_CDC_Setup+0x126>
      break;
 800c1ac:	bf00      	nop
    }
    break;
 800c1ae:	e006      	b.n	800c1be <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f001 f8f7 	bl	800d3a6 <USBD_CtlError>
    ret = USBD_FAIL;
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	75fb      	strb	r3, [r7, #23]
    break;
 800c1bc:	bf00      	nop
  }

  return ret;
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3718      	adds	r7, #24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1e2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d03a      	beq.n	800c264 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c1ee:	78fa      	ldrb	r2, [r7, #3]
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	331c      	adds	r3, #28
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d029      	beq.n	800c258 <USBD_CDC_DataIn+0x90>
 800c204:	78fa      	ldrb	r2, [r7, #3]
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4613      	mov	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	440b      	add	r3, r1
 800c212:	331c      	adds	r3, #28
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	78f9      	ldrb	r1, [r7, #3]
 800c218:	68b8      	ldr	r0, [r7, #8]
 800c21a:	460b      	mov	r3, r1
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	1a5b      	subs	r3, r3, r1
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4403      	add	r3, r0
 800c224:	3344      	adds	r3, #68	; 0x44
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	fbb2 f1f3 	udiv	r1, r2, r3
 800c22c:	fb03 f301 	mul.w	r3, r3, r1
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	d110      	bne.n	800c258 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	440b      	add	r3, r1
 800c244:	331c      	adds	r3, #28
 800c246:	2200      	movs	r2, #0
 800c248:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c24a:	78f9      	ldrb	r1, [r7, #3]
 800c24c:	2300      	movs	r3, #0
 800c24e:	2200      	movs	r2, #0
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f003 fa20 	bl	800f696 <USBD_LL_Transmit>
 800c256:	e003      	b.n	800c260 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	e000      	b.n	800c266 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c264:	2302      	movs	r3, #2
  }
}
 800c266:	4618      	mov	r0, r3
 800c268:	3710      	adds	r7, #16
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c280:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f003 fa4b 	bl	800f722 <USBD_LL_GetRxDataSize>
 800c28c:	4602      	mov	r2, r0
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00d      	beq.n	800c2ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	4798      	blx	r3

    return USBD_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e000      	b.n	800c2bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c2ba:	2302      	movs	r3, #2
  }
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c2d2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d015      	beq.n	800c30a <USBD_CDC_EP0_RxReady+0x46>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2e4:	2bff      	cmp	r3, #255	; 0xff
 800c2e6:	d010      	beq.n	800c30a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c2f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2fe:	b292      	uxth	r2, r2
 800c300:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	22ff      	movs	r2, #255	; 0xff
 800c306:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2243      	movs	r2, #67	; 0x43
 800c320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c322:	4b03      	ldr	r3, [pc, #12]	; (800c330 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c324:	4618      	mov	r0, r3
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	20000090 	.word	0x20000090

0800c334 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2243      	movs	r2, #67	; 0x43
 800c340:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c342:	4b03      	ldr	r3, [pc, #12]	; (800c350 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c344:	4618      	mov	r0, r3
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	2000004c 	.word	0x2000004c

0800c354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2243      	movs	r2, #67	; 0x43
 800c360:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c362:	4b03      	ldr	r3, [pc, #12]	; (800c370 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c364:	4618      	mov	r0, r3
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	200000d4 	.word	0x200000d4

0800c374 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	220a      	movs	r2, #10
 800c380:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c382:	4b03      	ldr	r3, [pc, #12]	; (800c390 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	20000008 	.word	0x20000008

0800c394 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c39e:	2302      	movs	r3, #2
 800c3a0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d005      	beq.n	800c3b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c3c2:	b480      	push	{r7}
 800c3c4:	b087      	sub	sp, #28
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3d6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3e0:	88fa      	ldrh	r2, [r7, #6]
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b085      	sub	sp, #20
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c406:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c42c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01c      	beq.n	800c472 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d115      	bne.n	800c46e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c460:	b29b      	uxth	r3, r3
 800c462:	2181      	movs	r1, #129	; 0x81
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f003 f916 	bl	800f696 <USBD_LL_Transmit>

      return USBD_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	e002      	b.n	800c474 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c46e:	2301      	movs	r3, #1
 800c470:	e000      	b.n	800c474 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c472:	2302      	movs	r3, #2
  }
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c492:	2b00      	cmp	r3, #0
 800c494:	d017      	beq.n	800c4c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7c1b      	ldrb	r3, [r3, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4a8:	2101      	movs	r1, #1
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f003 f916 	bl	800f6dc <USBD_LL_PrepareReceive>
 800c4b0:	e007      	b.n	800c4c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4b8:	2340      	movs	r3, #64	; 0x40
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f003 f90d 	bl	800f6dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e000      	b.n	800c4c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c4c6:	2302      	movs	r3, #2
  }
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	e01a      	b.n	800c51e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d003      	beq.n	800c508 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	79fa      	ldrb	r2, [r7, #7]
 800c514:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f002 ff88 	bl	800f42c <USBD_LL_Init>

  return USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d006      	beq.n	800c548 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]
 800c546:	e001      	b.n	800c54c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c548:	2302      	movs	r3, #2
 800c54a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f002 ffae 	bl	800f4c4 <USBD_LL_Start>

  return USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c594:	2302      	movs	r3, #2
 800c596:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00c      	beq.n	800c5bc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	78fa      	ldrb	r2, [r7, #3]
 800c5dc:	4611      	mov	r1, r2
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	4798      	blx	r3
  return USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fe94 	bl	800d32c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c612:	461a      	mov	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c620:	f003 031f 	and.w	r3, r3, #31
 800c624:	2b01      	cmp	r3, #1
 800c626:	d00c      	beq.n	800c642 <USBD_LL_SetupStage+0x56>
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d302      	bcc.n	800c632 <USBD_LL_SetupStage+0x46>
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d010      	beq.n	800c652 <USBD_LL_SetupStage+0x66>
 800c630:	e017      	b.n	800c662 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa04 	bl	800ca48 <USBD_StdDevReq>
    break;
 800c640:	e01a      	b.n	800c678 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa66 	bl	800cb1c <USBD_StdItfReq>
    break;
 800c650:	e012      	b.n	800c678 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 faa4 	bl	800cba8 <USBD_StdEPReq>
    break;
 800c660:	e00a      	b.n	800c678 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c668:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f002 ff87 	bl	800f584 <USBD_LL_StallEP>
    break;
 800c676:	bf00      	nop
  }

  return USBD_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	460b      	mov	r3, r1
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d14b      	bne.n	800c72e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c69c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d134      	bne.n	800c712 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d919      	bls.n	800c6e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	68da      	ldr	r2, [r3, #12]
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	1ad2      	subs	r2, r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d203      	bcs.n	800c6d6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	e002      	b.n	800c6dc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	461a      	mov	r2, r3
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 ff17 	bl	800d514 <USBD_CtlContinueRx>
 800c6e6:	e038      	b.n	800c75a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00a      	beq.n	800c70a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	d105      	bne.n	800c70a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 ff14 	bl	800d538 <USBD_CtlSendStatus>
 800c710:	e023      	b.n	800c75a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c718:	2b05      	cmp	r3, #5
 800c71a:	d11e      	bne.n	800c75a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c724:	2100      	movs	r1, #0
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f002 ff2c 	bl	800f584 <USBD_LL_StallEP>
 800c72c:	e015      	b.n	800c75a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00d      	beq.n	800c756 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c740:	2b03      	cmp	r3, #3
 800c742:	d108      	bne.n	800c756 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	7afa      	ldrb	r2, [r7, #11]
 800c74e:	4611      	mov	r1, r2
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	4798      	blx	r3
 800c754:	e001      	b.n	800c75a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c756:	2302      	movs	r3, #2
 800c758:	e000      	b.n	800c75c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	460b      	mov	r3, r1
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c772:	7afb      	ldrb	r3, [r7, #11]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d17f      	bne.n	800c878 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3314      	adds	r3, #20
 800c77c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c784:	2b02      	cmp	r3, #2
 800c786:	d15c      	bne.n	800c842 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	68da      	ldr	r2, [r3, #12]
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	429a      	cmp	r2, r3
 800c792:	d915      	bls.n	800c7c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	68da      	ldr	r2, [r3, #12]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	1ad2      	subs	r2, r2, r3
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f000 fe81 	bl	800d4b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f002 ff8f 	bl	800f6dc <USBD_LL_PrepareReceive>
 800c7be:	e04e      	b.n	800c85e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	6912      	ldr	r2, [r2, #16]
 800c7c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7cc:	fb02 f201 	mul.w	r2, r2, r1
 800c7d0:	1a9b      	subs	r3, r3, r2
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d11c      	bne.n	800c810 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d316      	bcc.n	800c810 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	689a      	ldr	r2, [r3, #8]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d20f      	bcs.n	800c810 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	2100      	movs	r1, #0
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 fe5d 	bl	800d4b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c802:	2300      	movs	r3, #0
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f002 ff67 	bl	800f6dc <USBD_LL_PrepareReceive>
 800c80e:	e026      	b.n	800c85e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00a      	beq.n	800c832 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c822:	2b03      	cmp	r3, #3
 800c824:	d105      	bne.n	800c832 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c832:	2180      	movs	r1, #128	; 0x80
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f002 fea5 	bl	800f584 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f000 fe8f 	bl	800d55e <USBD_CtlReceiveStatus>
 800c840:	e00d      	b.n	800c85e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d004      	beq.n	800c856 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c852:	2b00      	cmp	r3, #0
 800c854:	d103      	bne.n	800c85e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f002 fe93 	bl	800f584 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c864:	2b01      	cmp	r3, #1
 800c866:	d11d      	bne.n	800c8a4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7ff fe82 	bl	800c572 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c876:	e015      	b.n	800c8a4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00d      	beq.n	800c8a0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d108      	bne.n	800c8a0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	7afa      	ldrb	r2, [r7, #11]
 800c898:	4611      	mov	r1, r2
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	4798      	blx	r3
 800c89e:	e001      	b.n	800c8a4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	e000      	b.n	800c8a6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f002 fe1c 	bl	800f4fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2240      	movs	r2, #64	; 0x40
 800c8ce:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f002 fe0e 	bl	800f4fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2240      	movs	r2, #64	; 0x40
 800c8e8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	6852      	ldr	r2, [r2, #4]
 800c91e:	b2d2      	uxtb	r2, r2
 800c920:	4611      	mov	r1, r2
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	4798      	blx	r3
  }

  return USBD_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2204      	movs	r2, #4
 800c968:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d10b      	bne.n	800c9c6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	460b      	mov	r3, r1
 800c9da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	6852      	ldr	r2, [r2, #4]
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	4611      	mov	r1, r2
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	4798      	blx	r3

  return USBD_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	d004      	beq.n	800ca6c <USBD_StdDevReq+0x24>
 800ca62:	2b40      	cmp	r3, #64	; 0x40
 800ca64:	d002      	beq.n	800ca6c <USBD_StdDevReq+0x24>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d008      	beq.n	800ca7c <USBD_StdDevReq+0x34>
 800ca6a:	e04c      	b.n	800cb06 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
    break;
 800ca7a:	e049      	b.n	800cb10 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	785b      	ldrb	r3, [r3, #1]
 800ca80:	2b09      	cmp	r3, #9
 800ca82:	d83a      	bhi.n	800cafa <USBD_StdDevReq+0xb2>
 800ca84:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <USBD_StdDevReq+0x44>)
 800ca86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cadd 	.word	0x0800cadd
 800ca90:	0800caf1 	.word	0x0800caf1
 800ca94:	0800cafb 	.word	0x0800cafb
 800ca98:	0800cae7 	.word	0x0800cae7
 800ca9c:	0800cafb 	.word	0x0800cafb
 800caa0:	0800cabf 	.word	0x0800cabf
 800caa4:	0800cab5 	.word	0x0800cab5
 800caa8:	0800cafb 	.word	0x0800cafb
 800caac:	0800cad3 	.word	0x0800cad3
 800cab0:	0800cac9 	.word	0x0800cac9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f9d2 	bl	800ce60 <USBD_GetDescriptor>
      break;
 800cabc:	e022      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fac7 	bl	800d054 <USBD_SetAddress>
      break;
 800cac6:	e01d      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fb04 	bl	800d0d8 <USBD_SetConfig>
      break;
 800cad0:	e018      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fb8d 	bl	800d1f4 <USBD_GetConfig>
      break;
 800cada:	e013      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fbbc 	bl	800d25c <USBD_GetStatus>
      break;
 800cae4:	e00e      	b.n	800cb04 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fbea 	bl	800d2c2 <USBD_SetFeature>
      break;
 800caee:	e009      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fbf9 	bl	800d2ea <USBD_ClrFeature>
      break;
 800caf8:	e004      	b.n	800cb04 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fc52 	bl	800d3a6 <USBD_CtlError>
      break;
 800cb02:	bf00      	nop
    }
    break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fc4c 	bl	800d3a6 <USBD_CtlError>
    break;
 800cb0e:	bf00      	nop
  }

  return ret;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop

0800cb1c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb32:	2b20      	cmp	r3, #32
 800cb34:	d003      	beq.n	800cb3e <USBD_StdItfReq+0x22>
 800cb36:	2b40      	cmp	r3, #64	; 0x40
 800cb38:	d001      	beq.n	800cb3e <USBD_StdItfReq+0x22>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d12a      	bne.n	800cb94 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb44:	3b01      	subs	r3, #1
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d81d      	bhi.n	800cb86 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	889b      	ldrh	r3, [r3, #4]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d813      	bhi.n	800cb7c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	4798      	blx	r3
 800cb62:	4603      	mov	r3, r0
 800cb64:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	88db      	ldrh	r3, [r3, #6]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d110      	bne.n	800cb90 <USBD_StdItfReq+0x74>
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10d      	bne.n	800cb90 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fcdf 	bl	800d538 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cb7a:	e009      	b.n	800cb90 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 fc11 	bl	800d3a6 <USBD_CtlError>
      break;
 800cb84:	e004      	b.n	800cb90 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fc0c 	bl	800d3a6 <USBD_CtlError>
      break;
 800cb8e:	e000      	b.n	800cb92 <USBD_StdItfReq+0x76>
      break;
 800cb90:	bf00      	nop
    }
    break;
 800cb92:	e004      	b.n	800cb9e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fc05 	bl	800d3a6 <USBD_CtlError>
    break;
 800cb9c:	bf00      	nop
  }

  return USBD_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	889b      	ldrh	r3, [r3, #4]
 800cbba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	d004      	beq.n	800cbd2 <USBD_StdEPReq+0x2a>
 800cbc8:	2b40      	cmp	r3, #64	; 0x40
 800cbca:	d002      	beq.n	800cbd2 <USBD_StdEPReq+0x2a>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d008      	beq.n	800cbe2 <USBD_StdEPReq+0x3a>
 800cbd0:	e13b      	b.n	800ce4a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	4798      	blx	r3
    break;
 800cbe0:	e138      	b.n	800ce54 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	d10a      	bne.n	800cc04 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbf4:	689b      	ldr	r3, [r3, #8]
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	4798      	blx	r3
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	e128      	b.n	800ce56 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	785b      	ldrb	r3, [r3, #1]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d03e      	beq.n	800cc8a <USBD_StdEPReq+0xe2>
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d002      	beq.n	800cc16 <USBD_StdEPReq+0x6e>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d070      	beq.n	800ccf6 <USBD_StdEPReq+0x14e>
 800cc14:	e113      	b.n	800ce3e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d002      	beq.n	800cc26 <USBD_StdEPReq+0x7e>
 800cc20:	2b03      	cmp	r3, #3
 800cc22:	d015      	beq.n	800cc50 <USBD_StdEPReq+0xa8>
 800cc24:	e02b      	b.n	800cc7e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00c      	beq.n	800cc46 <USBD_StdEPReq+0x9e>
 800cc2c:	7bbb      	ldrb	r3, [r7, #14]
 800cc2e:	2b80      	cmp	r3, #128	; 0x80
 800cc30:	d009      	beq.n	800cc46 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f002 fca4 	bl	800f584 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc3c:	2180      	movs	r1, #128	; 0x80
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f002 fca0 	bl	800f584 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cc44:	e020      	b.n	800cc88 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fbac 	bl	800d3a6 <USBD_CtlError>
        break;
 800cc4e:	e01b      	b.n	800cc88 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	885b      	ldrh	r3, [r3, #2]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10e      	bne.n	800cc76 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc58:	7bbb      	ldrb	r3, [r7, #14]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <USBD_StdEPReq+0xce>
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	2b80      	cmp	r3, #128	; 0x80
 800cc62:	d008      	beq.n	800cc76 <USBD_StdEPReq+0xce>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	88db      	ldrh	r3, [r3, #6]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d104      	bne.n	800cc76 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f002 fc87 	bl	800f584 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fc5e 	bl	800d538 <USBD_CtlSendStatus>

        break;
 800cc7c:	e004      	b.n	800cc88 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800cc7e:	6839      	ldr	r1, [r7, #0]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fb90 	bl	800d3a6 <USBD_CtlError>
        break;
 800cc86:	bf00      	nop
      }
      break;
 800cc88:	e0de      	b.n	800ce48 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d002      	beq.n	800cc9a <USBD_StdEPReq+0xf2>
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d015      	beq.n	800ccc4 <USBD_StdEPReq+0x11c>
 800cc98:	e026      	b.n	800cce8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00c      	beq.n	800ccba <USBD_StdEPReq+0x112>
 800cca0:	7bbb      	ldrb	r3, [r7, #14]
 800cca2:	2b80      	cmp	r3, #128	; 0x80
 800cca4:	d009      	beq.n	800ccba <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f002 fc6a 	bl	800f584 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ccb0:	2180      	movs	r1, #128	; 0x80
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f002 fc66 	bl	800f584 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ccb8:	e01c      	b.n	800ccf4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fb72 	bl	800d3a6 <USBD_CtlError>
        break;
 800ccc2:	e017      	b.n	800ccf4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	885b      	ldrh	r3, [r3, #2]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d112      	bne.n	800ccf2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d004      	beq.n	800cce0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ccd6:	7bbb      	ldrb	r3, [r7, #14]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f002 fc71 	bl	800f5c2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fc29 	bl	800d538 <USBD_CtlSendStatus>
        }
        break;
 800cce6:	e004      	b.n	800ccf2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fb5b 	bl	800d3a6 <USBD_CtlError>
        break;
 800ccf0:	e000      	b.n	800ccf4 <USBD_StdEPReq+0x14c>
        break;
 800ccf2:	bf00      	nop
      }
      break;
 800ccf4:	e0a8      	b.n	800ce48 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d002      	beq.n	800cd06 <USBD_StdEPReq+0x15e>
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d031      	beq.n	800cd68 <USBD_StdEPReq+0x1c0>
 800cd04:	e095      	b.n	800ce32 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d007      	beq.n	800cd1c <USBD_StdEPReq+0x174>
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	2b80      	cmp	r3, #128	; 0x80
 800cd10:	d004      	beq.n	800cd1c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fb46 	bl	800d3a6 <USBD_CtlError>
          break;
 800cd1a:	e08f      	b.n	800ce3c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da0b      	bge.n	800cd3c <USBD_StdEPReq+0x194>
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4413      	add	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	3310      	adds	r3, #16
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	4413      	add	r3, r2
 800cd38:	3304      	adds	r3, #4
 800cd3a:	e00a      	b.n	800cd52 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd42:	4613      	mov	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fb8b 	bl	800d47c <USBD_CtlSendData>
          break;
 800cd66:	e069      	b.n	800ce3c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	da11      	bge.n	800cd94 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	f003 020f 	and.w	r2, r3, #15
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	440b      	add	r3, r1
 800cd82:	3318      	adds	r3, #24
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d117      	bne.n	800cdba <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fb0a 	bl	800d3a6 <USBD_CtlError>
            break;
 800cd92:	e053      	b.n	800ce3c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd94:	7bbb      	ldrb	r3, [r7, #14]
 800cd96:	f003 020f 	and.w	r2, r3, #15
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d104      	bne.n	800cdba <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 faf7 	bl	800d3a6 <USBD_CtlError>
            break;
 800cdb8:	e040      	b.n	800ce3c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cdba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	da0b      	bge.n	800cdda <USBD_StdEPReq+0x232>
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	3310      	adds	r3, #16
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	e00a      	b.n	800cdf0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cde0:	4613      	mov	r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	4413      	add	r3, r2
 800cdf0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <USBD_StdEPReq+0x256>
 800cdf8:	7bbb      	ldrb	r3, [r7, #14]
 800cdfa:	2b80      	cmp	r3, #128	; 0x80
 800cdfc:	d103      	bne.n	800ce06 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	e00e      	b.n	800ce24 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f002 fbf8 	bl	800f600 <USBD_LL_IsStallEP>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d003      	beq.n	800ce1e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	e002      	b.n	800ce24 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2202      	movs	r2, #2
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fb26 	bl	800d47c <USBD_CtlSendData>
          break;
 800ce30:	e004      	b.n	800ce3c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 fab6 	bl	800d3a6 <USBD_CtlError>
        break;
 800ce3a:	bf00      	nop
      }
      break;
 800ce3c:	e004      	b.n	800ce48 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fab0 	bl	800d3a6 <USBD_CtlError>
      break;
 800ce46:	bf00      	nop
    }
    break;
 800ce48:	e004      	b.n	800ce54 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ce4a:	6839      	ldr	r1, [r7, #0]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 faaa 	bl	800d3a6 <USBD_CtlError>
    break;
 800ce52:	bf00      	nop
  }

  return ret;
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	885b      	ldrh	r3, [r3, #2]
 800ce6e:	0a1b      	lsrs	r3, r3, #8
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	3b01      	subs	r3, #1
 800ce74:	2b06      	cmp	r3, #6
 800ce76:	f200 80c9 	bhi.w	800d00c <USBD_GetDescriptor+0x1ac>
 800ce7a:	a201      	add	r2, pc, #4	; (adr r2, 800ce80 <USBD_GetDescriptor+0x20>)
 800ce7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce80:	0800ce9d 	.word	0x0800ce9d
 800ce84:	0800ceb5 	.word	0x0800ceb5
 800ce88:	0800cef5 	.word	0x0800cef5
 800ce8c:	0800d00d 	.word	0x0800d00d
 800ce90:	0800d00d 	.word	0x0800d00d
 800ce94:	0800cfb9 	.word	0x0800cfb9
 800ce98:	0800cfdf 	.word	0x0800cfdf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	7c12      	ldrb	r2, [r2, #16]
 800cea8:	f107 010a 	add.w	r1, r7, #10
 800ceac:	4610      	mov	r0, r2
 800ceae:	4798      	blx	r3
 800ceb0:	60f8      	str	r0, [r7, #12]
    break;
 800ceb2:	e0b0      	b.n	800d016 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7c1b      	ldrb	r3, [r3, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10d      	bne.n	800ced8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	f107 020a 	add.w	r2, r7, #10
 800cec8:	4610      	mov	r0, r2
 800ceca:	4798      	blx	r3
 800cecc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3301      	adds	r3, #1
 800ced2:	2202      	movs	r2, #2
 800ced4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ced6:	e09e      	b.n	800d016 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	f107 020a 	add.w	r2, r7, #10
 800cee4:	4610      	mov	r0, r2
 800cee6:	4798      	blx	r3
 800cee8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3301      	adds	r3, #1
 800ceee:	2202      	movs	r2, #2
 800cef0:	701a      	strb	r2, [r3, #0]
    break;
 800cef2:	e090      	b.n	800d016 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	885b      	ldrh	r3, [r3, #2]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b05      	cmp	r3, #5
 800cefc:	d856      	bhi.n	800cfac <USBD_GetDescriptor+0x14c>
 800cefe:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <USBD_GetDescriptor+0xa4>)
 800cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf04:	0800cf1d 	.word	0x0800cf1d
 800cf08:	0800cf35 	.word	0x0800cf35
 800cf0c:	0800cf4d 	.word	0x0800cf4d
 800cf10:	0800cf65 	.word	0x0800cf65
 800cf14:	0800cf7d 	.word	0x0800cf7d
 800cf18:	0800cf95 	.word	0x0800cf95
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	7c12      	ldrb	r2, [r2, #16]
 800cf28:	f107 010a 	add.w	r1, r7, #10
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	4798      	blx	r3
 800cf30:	60f8      	str	r0, [r7, #12]
      break;
 800cf32:	e040      	b.n	800cfb6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	7c12      	ldrb	r2, [r2, #16]
 800cf40:	f107 010a 	add.w	r1, r7, #10
 800cf44:	4610      	mov	r0, r2
 800cf46:	4798      	blx	r3
 800cf48:	60f8      	str	r0, [r7, #12]
      break;
 800cf4a:	e034      	b.n	800cfb6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	f107 010a 	add.w	r1, r7, #10
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	60f8      	str	r0, [r7, #12]
      break;
 800cf62:	e028      	b.n	800cfb6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
 800cf70:	f107 010a 	add.w	r1, r7, #10
 800cf74:	4610      	mov	r0, r2
 800cf76:	4798      	blx	r3
 800cf78:	60f8      	str	r0, [r7, #12]
      break;
 800cf7a:	e01c      	b.n	800cfb6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	7c12      	ldrb	r2, [r2, #16]
 800cf88:	f107 010a 	add.w	r1, r7, #10
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4798      	blx	r3
 800cf90:	60f8      	str	r0, [r7, #12]
      break;
 800cf92:	e010      	b.n	800cfb6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	7c12      	ldrb	r2, [r2, #16]
 800cfa0:	f107 010a 	add.w	r1, r7, #10
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	4798      	blx	r3
 800cfa8:	60f8      	str	r0, [r7, #12]
      break;
 800cfaa:	e004      	b.n	800cfb6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cfac:	6839      	ldr	r1, [r7, #0]
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f9f9 	bl	800d3a6 <USBD_CtlError>
      return;
 800cfb4:	e04b      	b.n	800d04e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cfb6:	e02e      	b.n	800d016 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	7c1b      	ldrb	r3, [r3, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d109      	bne.n	800cfd4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc8:	f107 020a 	add.w	r2, r7, #10
 800cfcc:	4610      	mov	r0, r2
 800cfce:	4798      	blx	r3
 800cfd0:	60f8      	str	r0, [r7, #12]
      break;
 800cfd2:	e020      	b.n	800d016 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f9e5 	bl	800d3a6 <USBD_CtlError>
      return;
 800cfdc:	e037      	b.n	800d04e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7c1b      	ldrb	r3, [r3, #16]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10d      	bne.n	800d002 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfee:	f107 020a 	add.w	r2, r7, #10
 800cff2:	4610      	mov	r0, r2
 800cff4:	4798      	blx	r3
 800cff6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3301      	adds	r3, #1
 800cffc:	2207      	movs	r2, #7
 800cffe:	701a      	strb	r2, [r3, #0]
      break;
 800d000:	e009      	b.n	800d016 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 f9ce 	bl	800d3a6 <USBD_CtlError>
      return;
 800d00a:	e020      	b.n	800d04e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f9c9 	bl	800d3a6 <USBD_CtlError>
    return;
 800d014:	e01b      	b.n	800d04e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d016:	897b      	ldrh	r3, [r7, #10]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d011      	beq.n	800d040 <USBD_GetDescriptor+0x1e0>
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	88db      	ldrh	r3, [r3, #6]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00d      	beq.n	800d040 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	88da      	ldrh	r2, [r3, #6]
 800d028:	897b      	ldrh	r3, [r7, #10]
 800d02a:	4293      	cmp	r3, r2
 800d02c:	bf28      	it	cs
 800d02e:	4613      	movcs	r3, r2
 800d030:	b29b      	uxth	r3, r3
 800d032:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d034:	897b      	ldrh	r3, [r7, #10]
 800d036:	461a      	mov	r2, r3
 800d038:	68f9      	ldr	r1, [r7, #12]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fa1e 	bl	800d47c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	88db      	ldrh	r3, [r3, #6]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d102      	bne.n	800d04e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fa75 	bl	800d538 <USBD_CtlSendStatus>
  }
}
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	889b      	ldrh	r3, [r3, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d130      	bne.n	800d0c8 <USBD_SetAddress+0x74>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d12c      	bne.n	800d0c8 <USBD_SetAddress+0x74>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	885b      	ldrh	r3, [r3, #2]
 800d072:	2b7f      	cmp	r3, #127	; 0x7f
 800d074:	d828      	bhi.n	800d0c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	885b      	ldrh	r3, [r3, #2]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d104      	bne.n	800d096 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f989 	bl	800d3a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d094:	e01c      	b.n	800d0d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7bfa      	ldrb	r2, [r7, #15]
 800d09a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f002 fad8 	bl	800f658 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fa45 	bl	800d538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d004      	beq.n	800d0be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0bc:	e008      	b.n	800d0d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c6:	e003      	b.n	800d0d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f96b 	bl	800d3a6 <USBD_CtlError>
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	885b      	ldrh	r3, [r3, #2]
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	4b41      	ldr	r3, [pc, #260]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d0ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0ec:	4b40      	ldr	r3, [pc, #256]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d904      	bls.n	800d0fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f955 	bl	800d3a6 <USBD_CtlError>
 800d0fc:	e075      	b.n	800d1ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d104:	2b02      	cmp	r3, #2
 800d106:	d002      	beq.n	800d10e <USBD_SetConfig+0x36>
 800d108:	2b03      	cmp	r3, #3
 800d10a:	d023      	beq.n	800d154 <USBD_SetConfig+0x7c>
 800d10c:	e062      	b.n	800d1d4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d10e:	4b38      	ldr	r3, [pc, #224]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d01a      	beq.n	800d14c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d116:	4b36      	ldr	r3, [pc, #216]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2203      	movs	r2, #3
 800d124:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d128:	4b31      	ldr	r3, [pc, #196]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7ff fa2a 	bl	800c588 <USBD_SetClassConfig>
 800d134:	4603      	mov	r3, r0
 800d136:	2b02      	cmp	r3, #2
 800d138:	d104      	bne.n	800d144 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f932 	bl	800d3a6 <USBD_CtlError>
          return;
 800d142:	e052      	b.n	800d1ea <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f9f7 	bl	800d538 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d14a:	e04e      	b.n	800d1ea <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f9f3 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d152:	e04a      	b.n	800d1ea <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d154:	4b26      	ldr	r3, [pc, #152]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d112      	bne.n	800d182 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d164:	4b22      	ldr	r3, [pc, #136]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	461a      	mov	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d16e:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff fa26 	bl	800c5c6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9dc 	bl	800d538 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d180:	e033      	b.n	800d1ea <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d182:	4b1b      	ldr	r3, [pc, #108]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d01d      	beq.n	800d1cc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	b2db      	uxtb	r3, r3
 800d196:	4619      	mov	r1, r3
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff fa14 	bl	800c5c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d19e:	4b14      	ldr	r3, [pc, #80]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1a8:	4b11      	ldr	r3, [pc, #68]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff f9ea 	bl	800c588 <USBD_SetClassConfig>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d104      	bne.n	800d1c4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f8f2 	bl	800d3a6 <USBD_CtlError>
          return;
 800d1c2:	e012      	b.n	800d1ea <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f9b7 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d1ca:	e00e      	b.n	800d1ea <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f9b3 	bl	800d538 <USBD_CtlSendStatus>
      break;
 800d1d2:	e00a      	b.n	800d1ea <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f8e5 	bl	800d3a6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d1dc:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <USBD_SetConfig+0x118>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7ff f9ef 	bl	800c5c6 <USBD_ClrClassConfig>
      break;
 800d1e8:	bf00      	nop
    }
  }
}
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	200005b4 	.word	0x200005b4

0800d1f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	88db      	ldrh	r3, [r3, #6]
 800d202:	2b01      	cmp	r3, #1
 800d204:	d004      	beq.n	800d210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f8cc 	bl	800d3a6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d20e:	e021      	b.n	800d254 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d216:	2b01      	cmp	r3, #1
 800d218:	db17      	blt.n	800d24a <USBD_GetConfig+0x56>
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	dd02      	ble.n	800d224 <USBD_GetConfig+0x30>
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d00b      	beq.n	800d23a <USBD_GetConfig+0x46>
 800d222:	e012      	b.n	800d24a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3308      	adds	r3, #8
 800d22e:	2201      	movs	r2, #1
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 f922 	bl	800d47c <USBD_CtlSendData>
      break;
 800d238:	e00c      	b.n	800d254 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3304      	adds	r3, #4
 800d23e:	2201      	movs	r2, #1
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f91a 	bl	800d47c <USBD_CtlSendData>
      break;
 800d248:	e004      	b.n	800d254 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f8aa 	bl	800d3a6 <USBD_CtlError>
      break;
 800d252:	bf00      	nop
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d26c:	3b01      	subs	r3, #1
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d81e      	bhi.n	800d2b0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	88db      	ldrh	r3, [r3, #6]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d004      	beq.n	800d284 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f892 	bl	800d3a6 <USBD_CtlError>
      break;
 800d282:	e01a      	b.n	800d2ba <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d290:	2b00      	cmp	r3, #0
 800d292:	d005      	beq.n	800d2a0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	f043 0202 	orr.w	r2, r3, #2
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	330c      	adds	r3, #12
 800d2a4:	2202      	movs	r2, #2
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 f8e7 	bl	800d47c <USBD_CtlSendData>
    break;
 800d2ae:	e004      	b.n	800d2ba <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f877 	bl	800d3a6 <USBD_CtlError>
    break;
 800d2b8:	bf00      	nop
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}

0800d2c2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b082      	sub	sp, #8
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
 800d2ca:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	885b      	ldrh	r3, [r3, #2]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d106      	bne.n	800d2e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f92b 	bl	800d538 <USBD_CtlSendStatus>
  }

}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d80b      	bhi.n	800d318 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	885b      	ldrh	r3, [r3, #2]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d10c      	bne.n	800d322 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f911 	bl	800d538 <USBD_CtlSendStatus>
    }
    break;
 800d316:	e004      	b.n	800d322 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d318:	6839      	ldr	r1, [r7, #0]
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f843 	bl	800d3a6 <USBD_CtlError>
    break;
 800d320:	e000      	b.n	800d324 <USBD_ClrFeature+0x3a>
    break;
 800d322:	bf00      	nop
  }
}
 800d324:	bf00      	nop
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	781a      	ldrb	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	785a      	ldrb	r2, [r3, #1]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	3302      	adds	r3, #2
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	3303      	adds	r3, #3
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	b29b      	uxth	r3, r3
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4413      	add	r3, r2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	3304      	adds	r3, #4
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	b29a      	uxth	r2, r3
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	3305      	adds	r3, #5
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	b29b      	uxth	r3, r3
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	b29b      	uxth	r3, r3
 800d376:	4413      	add	r3, r2
 800d378:	b29a      	uxth	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	3306      	adds	r3, #6
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	b29a      	uxth	r2, r3
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	3307      	adds	r3, #7
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	021b      	lsls	r3, r3, #8
 800d390:	b29b      	uxth	r3, r3
 800d392:	4413      	add	r3, r2
 800d394:	b29a      	uxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	80da      	strh	r2, [r3, #6]

}
 800d39a:	bf00      	nop
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d3b0:	2180      	movs	r1, #128	; 0x80
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f002 f8e6 	bl	800f584 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f002 f8e2 	bl	800f584 <USBD_LL_StallEP>
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d032      	beq.n	800d444 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f000 f834 	bl	800d44c <USBD_GetLen>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d3f2:	7dfb      	ldrb	r3, [r7, #23]
 800d3f4:	1c5a      	adds	r2, r3, #1
 800d3f6:	75fa      	strb	r2, [r7, #23]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	7812      	ldrb	r2, [r2, #0]
 800d402:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	75fa      	strb	r2, [r7, #23]
 800d40a:	461a      	mov	r2, r3
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	4413      	add	r3, r2
 800d410:	2203      	movs	r2, #3
 800d412:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d414:	e012      	b.n	800d43c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	1c5a      	adds	r2, r3, #1
 800d41a:	60fa      	str	r2, [r7, #12]
 800d41c:	7dfa      	ldrb	r2, [r7, #23]
 800d41e:	1c51      	adds	r1, r2, #1
 800d420:	75f9      	strb	r1, [r7, #23]
 800d422:	4611      	mov	r1, r2
 800d424:	68ba      	ldr	r2, [r7, #8]
 800d426:	440a      	add	r2, r1
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d42c:	7dfb      	ldrb	r3, [r7, #23]
 800d42e:	1c5a      	adds	r2, r3, #1
 800d430:	75fa      	strb	r2, [r7, #23]
 800d432:	461a      	mov	r2, r3
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4413      	add	r3, r2
 800d438:	2200      	movs	r2, #0
 800d43a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1e8      	bne.n	800d416 <USBD_GetString+0x4e>
    }
  }
}
 800d444:	bf00      	nop
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d454:	2300      	movs	r3, #0
 800d456:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d458:	e005      	b.n	800d466 <USBD_GetLen+0x1a>
    {
        len++;
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	3301      	adds	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3301      	adds	r3, #1
 800d464:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1f5      	bne.n	800d45a <USBD_GetLen+0xe>
    }

    return len;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2202      	movs	r2, #2
 800d48e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d492:	88fa      	ldrh	r2, [r7, #6]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d498:	88fa      	ldrh	r2, [r7, #6]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d49e:	88fb      	ldrh	r3, [r7, #6]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f002 f8f6 	bl	800f696 <USBD_LL_Transmit>

  return USBD_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3710      	adds	r7, #16
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	4613      	mov	r3, r2
 800d4c0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d4c2:	88fb      	ldrh	r3, [r7, #6]
 800d4c4:	68ba      	ldr	r2, [r7, #8]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	f002 f8e4 	bl	800f696 <USBD_LL_Transmit>

  return USBD_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2203      	movs	r2, #3
 800d4ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d4ee:	88fa      	ldrh	r2, [r7, #6]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d4f6:	88fa      	ldrh	r2, [r7, #6]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d4fe:	88fb      	ldrh	r3, [r7, #6]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	2100      	movs	r1, #0
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f002 f8e9 	bl	800f6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	4613      	mov	r3, r2
 800d520:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d522:	88fb      	ldrh	r3, [r7, #6]
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	2100      	movs	r1, #0
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f002 f8d7 	bl	800f6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2204      	movs	r2, #4
 800d544:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d548:	2300      	movs	r3, #0
 800d54a:	2200      	movs	r2, #0
 800d54c:	2100      	movs	r1, #0
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f002 f8a1 	bl	800f696 <USBD_LL_Transmit>

  return USBD_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2205      	movs	r2, #5
 800d56a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d56e:	2300      	movs	r3, #0
 800d570:	2200      	movs	r2, #0
 800d572:	2100      	movs	r1, #0
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f002 f8b1 	bl	800f6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d57a:	2300      	movs	r3, #0
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d584:	b480      	push	{r7}
 800d586:	b087      	sub	sp, #28
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d592:	2301      	movs	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d59a:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d59c:	7a5b      	ldrb	r3, [r3, #9]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d131      	bne.n	800d608 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5a4:	4b1c      	ldr	r3, [pc, #112]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5a6:	7a5b      	ldrb	r3, [r3, #9]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	4b1a      	ldr	r3, [pc, #104]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d5b2:	4b19      	ldr	r3, [pc, #100]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5b4:	7a5b      	ldrb	r3, [r3, #9]
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	4a17      	ldr	r2, [pc, #92]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d5c2:	4b15      	ldr	r3, [pc, #84]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5c4:	7a5b      	ldrb	r3, [r3, #9]
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	4b13      	ldr	r3, [pc, #76]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5cc:	4413      	add	r3, r2
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d5d2:	4b11      	ldr	r3, [pc, #68]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5d4:	7a5b      	ldrb	r3, [r3, #9]
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	b2d1      	uxtb	r1, r2
 800d5dc:	4a0e      	ldr	r2, [pc, #56]	; (800d618 <FATFS_LinkDriverEx+0x94>)
 800d5de:	7251      	strb	r1, [r2, #9]
 800d5e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5e2:	7dbb      	ldrb	r3, [r7, #22]
 800d5e4:	3330      	adds	r3, #48	; 0x30
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	223a      	movs	r2, #58	; 0x3a
 800d5f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	222f      	movs	r2, #47	; 0x2f
 800d5fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	3303      	adds	r3, #3
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d604:	2300      	movs	r3, #0
 800d606:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	200005b8 	.word	0x200005b8

0800d61c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d626:	2200      	movs	r2, #0
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ffaa 	bl	800d584 <FATFS_LinkDriverEx>
 800d630:	4603      	mov	r3, r0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d646:	f000 f896 	bl	800d776 <BSP_SD_IsDetected>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d001      	beq.n	800d654 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e012      	b.n	800d67a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d654:	480b      	ldr	r0, [pc, #44]	; (800d684 <BSP_SD_Init+0x48>)
 800d656:	f7f9 ff2c 	bl	80074b2 <HAL_SD_Init>
 800d65a:	4603      	mov	r3, r0
 800d65c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d109      	bne.n	800d678 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d668:	4806      	ldr	r0, [pc, #24]	; (800d684 <BSP_SD_Init+0x48>)
 800d66a:	f7fa fd06 	bl	800807a <HAL_SD_ConfigWideBusOperation>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d678:	79fb      	ldrb	r3, [r7, #7]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20006770 	.word	0x20006770

0800d688 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	4806      	ldr	r0, [pc, #24]	; (800d6b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d6a0:	f7f9 ff8e 	bl	80075c0 <HAL_SD_ReadBlocks_DMA>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20006770 	.word	0x20006770

0800d6bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68ba      	ldr	r2, [r7, #8]
 800d6d0:	68f9      	ldr	r1, [r7, #12]
 800d6d2:	4806      	ldr	r0, [pc, #24]	; (800d6ec <BSP_SD_WriteBlocks_DMA+0x30>)
 800d6d4:	f7fa f840 	bl	8007758 <HAL_SD_WriteBlocks_DMA>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20006770 	.word	0x20006770

0800d6f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6f4:	4805      	ldr	r0, [pc, #20]	; (800d70c <BSP_SD_GetCardState+0x1c>)
 800d6f6:	f7fa fd3c 	bl	8008172 <HAL_SD_GetCardState>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b04      	cmp	r3, #4
 800d6fe:	bf14      	ite	ne
 800d700:	2301      	movne	r3, #1
 800d702:	2300      	moveq	r3, #0
 800d704:	b2db      	uxtb	r3, r3
}
 800d706:	4618      	mov	r0, r3
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20006770 	.word	0x20006770

0800d710 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	4803      	ldr	r0, [pc, #12]	; (800d728 <BSP_SD_GetCardInfo+0x18>)
 800d71c:	f7fa fc81 	bl	8008022 <HAL_SD_GetCardInfo>
}
 800d720:	bf00      	nop
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	20006770 	.word	0x20006770

0800d72c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d734:	f000 f818 	bl	800d768 <BSP_SD_AbortCallback>
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d748:	f001 f868 	bl	800e81c <BSP_SD_WriteCpltCallback>
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d75c:	f001 f86a 	bl	800e834 <BSP_SD_ReadCpltCallback>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d768:	b480      	push	{r7}
 800d76a:	af00      	add	r7, sp, #0

}
 800d76c:	bf00      	nop
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b082      	sub	sp, #8
 800d77a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d77c:	2301      	movs	r3, #1
 800d77e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d780:	f000 f81e 	bl	800d7c0 <BSP_PlatformIsDetected>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d78a:	2300      	movs	r3, #0
 800d78c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	b2db      	uxtb	r3, r3
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
	...

0800d79c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d7a0:	4904      	ldr	r1, [pc, #16]	; (800d7b4 <MX_FATFS_Init+0x18>)
 800d7a2:	4805      	ldr	r0, [pc, #20]	; (800d7b8 <MX_FATFS_Init+0x1c>)
 800d7a4:	f7ff ff3a 	bl	800d61c <FATFS_LinkDriver>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4b03      	ldr	r3, [pc, #12]	; (800d7bc <MX_FATFS_Init+0x20>)
 800d7ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d7b0:	bf00      	nop
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	20004514 	.word	0x20004514
 800d7b8:	080151f4 	.word	0x080151f4
 800d7bc:	20004510 	.word	0x20004510

0800d7c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d7ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7ce:	4806      	ldr	r0, [pc, #24]	; (800d7e8 <BSP_PlatformIsDetected+0x28>)
 800d7d0:	f7f6 ff62 	bl	8004698 <HAL_GPIO_ReadPin>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d7de:	79fb      	ldrb	r3, [r7, #7]
}  
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	40020000 	.word	0x40020000

0800d7ec <micros>:
 800d7ec:	b480      	push	{r7}
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800d800:	b480      	push	{r7}
 800d802:	af00      	add	r7, sp, #0
 800d804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80a:	4a04      	ldr	r2, [pc, #16]	; (800d81c <millis+0x1c>)
 800d80c:	fba2 2303 	umull	r2, r3, r2, r3
 800d810:	099b      	lsrs	r3, r3, #6
 800d812:	4618      	mov	r0, r3
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	10624dd3 	.word	0x10624dd3

0800d820 <println>:
{
 800d820:	b40f      	push	{r0, r1, r2, r3}
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
	if (usbPresent)
 800d828:	4b2a      	ldr	r3, [pc, #168]	; (800d8d4 <println+0xb4>)
 800d82a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d82e:	2b03      	cmp	r3, #3
 800d830:	d147      	bne.n	800d8c2 <println+0xa2>
		writePin(LEDD, HIGH);
 800d832:	2201      	movs	r2, #1
 800d834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d838:	4827      	ldr	r0, [pc, #156]	; (800d8d8 <println+0xb8>)
 800d83a:	f7f6 ff45 	bl	80046c8 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800d83e:	f107 031c 	add.w	r3, r7, #28
 800d842:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	69b9      	ldr	r1, [r7, #24]
 800d848:	4824      	ldr	r0, [pc, #144]	; (800d8dc <println+0xbc>)
 800d84a:	f003 ff21 	bl	8011690 <vsiprintf>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	4b23      	ldr	r3, [pc, #140]	; (800d8e0 <println+0xc0>)
 800d854:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 800d856:	4b22      	ldr	r3, [pc, #136]	; (800d8e0 <println+0xc0>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a20      	ldr	r2, [pc, #128]	; (800d8dc <println+0xbc>)
 800d85c:	210d      	movs	r1, #13
 800d85e:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800d860:	4b1f      	ldr	r3, [pc, #124]	; (800d8e0 <println+0xc0>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3301      	adds	r3, #1
 800d866:	4a1d      	ldr	r2, [pc, #116]	; (800d8dc <println+0xbc>)
 800d868:	210a      	movs	r1, #10
 800d86a:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800d86c:	4b1c      	ldr	r3, [pc, #112]	; (800d8e0 <println+0xc0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3302      	adds	r3, #2
 800d872:	4a1a      	ldr	r2, [pc, #104]	; (800d8dc <println+0xbc>)
 800d874:	2100      	movs	r1, #0
 800d876:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800d878:	4b19      	ldr	r3, [pc, #100]	; (800d8e0 <println+0xc0>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3303      	adds	r3, #3
 800d87e:	4a18      	ldr	r2, [pc, #96]	; (800d8e0 <println+0xc0>)
 800d880:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800d882:	f7ff ffb3 	bl	800d7ec <micros>
 800d886:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 800d888:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <println+0xc0>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	4613      	mov	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	3346      	adds	r3, #70	; 0x46
 800d896:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800d898:	e001      	b.n	800d89e <println+0x7e>
			if (micros() - printStart > timeout && false)
 800d89a:	f7ff ffa7 	bl	800d7ec <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800d89e:	4b10      	ldr	r3, [pc, #64]	; (800d8e0 <println+0xc0>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	480d      	ldr	r0, [pc, #52]	; (800d8dc <println+0xbc>)
 800d8a8:	f001 fc54 	bl	800f154 <CDC_Transmit_FS>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d0f3      	beq.n	800d89a <println+0x7a>
		writePin(LEDD, LOW);
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d8b8:	4807      	ldr	r0, [pc, #28]	; (800d8d8 <println+0xb8>)
 800d8ba:	f7f6 ff05 	bl	80046c8 <HAL_GPIO_WritePin>
		return true;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e000      	b.n	800d8c4 <println+0xa4>
	return false;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8ce:	b004      	add	sp, #16
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	200009dc 	.word	0x200009dc
 800d8d8:	40020400 	.word	0x40020400
 800d8dc:	200005c8 	.word	0x200005c8
 800d8e0:	200005c4 	.word	0x200005c4

0800d8e4 <imuTest_printData>:

MPU9250 mpu;
uint32_t lastPrint;

static void imuTest_printData(void)
{
 800d8e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8e8:	b086      	sub	sp, #24
 800d8ea:	af06      	add	r7, sp, #24
	if (millis() - lastPrint > 20)
 800d8ec:	f7ff ff88 	bl	800d800 <millis>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	4b1c      	ldr	r3, [pc, #112]	; (800d964 <imuTest_printData+0x80>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	2b14      	cmp	r3, #20
 800d8fa:	d92f      	bls.n	800d95c <imuTest_printData+0x78>
		#if IMUTEST_PRINT_EULER
		println("Y %f P %f R %f", mpu.yaw, mpu.pitch, mpu.roll);
		#endif

		#if IMUTEST_PRINT_3DPLOT
		println("w%fwa%fab%fbc%fc", mpu.q[0], mpu.q[1], mpu.q[2], mpu.q[3]);
 800d8fc:	4b1a      	ldr	r3, [pc, #104]	; (800d968 <imuTest_printData+0x84>)
 800d8fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d902:	4618      	mov	r0, r3
 800d904:	f7f2 fe20 	bl	8000548 <__aeabi_f2d>
 800d908:	4682      	mov	sl, r0
 800d90a:	468b      	mov	fp, r1
 800d90c:	4b16      	ldr	r3, [pc, #88]	; (800d968 <imuTest_printData+0x84>)
 800d90e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d912:	4618      	mov	r0, r3
 800d914:	f7f2 fe18 	bl	8000548 <__aeabi_f2d>
 800d918:	4604      	mov	r4, r0
 800d91a:	460d      	mov	r5, r1
 800d91c:	4b12      	ldr	r3, [pc, #72]	; (800d968 <imuTest_printData+0x84>)
 800d91e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d922:	4618      	mov	r0, r3
 800d924:	f7f2 fe10 	bl	8000548 <__aeabi_f2d>
 800d928:	4680      	mov	r8, r0
 800d92a:	4689      	mov	r9, r1
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <imuTest_printData+0x84>)
 800d92e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d932:	4618      	mov	r0, r3
 800d934:	f7f2 fe08 	bl	8000548 <__aeabi_f2d>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d940:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d944:	e9cd 4500 	strd	r4, r5, [sp]
 800d948:	4652      	mov	r2, sl
 800d94a:	465b      	mov	r3, fp
 800d94c:	4807      	ldr	r0, [pc, #28]	; (800d96c <imuTest_printData+0x88>)
 800d94e:	f7ff ff67 	bl	800d820 <println>
		#endif

		lastPrint = millis();
 800d952:	f7ff ff55 	bl	800d800 <millis>
 800d956:	4602      	mov	r2, r0
 800d958:	4b02      	ldr	r3, [pc, #8]	; (800d964 <imuTest_printData+0x80>)
 800d95a:	601a      	str	r2, [r3, #0]
	}
}
 800d95c:	bf00      	nop
 800d95e:	46bd      	mov	sp, r7
 800d960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d964:	200040f4 	.word	0x200040f4
 800d968:	20004024 	.word	0x20004024
 800d96c:	080150bc 	.word	0x080150bc

0800d970 <imuTest_printBiases>:


static void imuTest_printBiases(void)
{
 800d970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d974:	b084      	sub	sp, #16
 800d976:	af04      	add	r7, sp, #16
	println("accel biases [ms]:\t%f\t%f\t%f", 1000.0 * mpu.accelBias[0], 1000.0 * mpu.accelBias[1], 1000.0 * mpu.accelBias[2]);
 800d978:	4b3a      	ldr	r3, [pc, #232]	; (800da64 <imuTest_printBiases+0xf4>)
 800d97a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7f2 fde3 	bl	8000548 <__aeabi_f2d>
 800d982:	f04f 0200 	mov.w	r2, #0
 800d986:	4b38      	ldr	r3, [pc, #224]	; (800da68 <imuTest_printBiases+0xf8>)
 800d988:	f7f2 fe36 	bl	80005f8 <__aeabi_dmul>
 800d98c:	4603      	mov	r3, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	4698      	mov	r8, r3
 800d992:	46a1      	mov	r9, r4
 800d994:	4b33      	ldr	r3, [pc, #204]	; (800da64 <imuTest_printBiases+0xf4>)
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	4618      	mov	r0, r3
 800d99a:	f7f2 fdd5 	bl	8000548 <__aeabi_f2d>
 800d99e:	f04f 0200 	mov.w	r2, #0
 800d9a2:	4b31      	ldr	r3, [pc, #196]	; (800da68 <imuTest_printBiases+0xf8>)
 800d9a4:	f7f2 fe28 	bl	80005f8 <__aeabi_dmul>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	4625      	mov	r5, r4
 800d9ae:	461c      	mov	r4, r3
 800d9b0:	4b2c      	ldr	r3, [pc, #176]	; (800da64 <imuTest_printBiases+0xf4>)
 800d9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7f2 fdc7 	bl	8000548 <__aeabi_f2d>
 800d9ba:	f04f 0200 	mov.w	r2, #0
 800d9be:	4b2a      	ldr	r3, [pc, #168]	; (800da68 <imuTest_printBiases+0xf8>)
 800d9c0:	f7f2 fe1a 	bl	80005f8 <__aeabi_dmul>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9cc:	e9cd 4500 	strd	r4, r5, [sp]
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	4825      	ldr	r0, [pc, #148]	; (800da6c <imuTest_printBiases+0xfc>)
 800d9d6:	f7ff ff23 	bl	800d820 <println>
	println("gyro biases [dps]:\t%f\t%f\t%f", mpu.gyroBias[0], mpu.gyroBias[1], mpu.gyroBias[2]);
 800d9da:	4b22      	ldr	r3, [pc, #136]	; (800da64 <imuTest_printBiases+0xf4>)
 800d9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7f2 fdb2 	bl	8000548 <__aeabi_f2d>
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	4689      	mov	r9, r1
 800d9e8:	4b1e      	ldr	r3, [pc, #120]	; (800da64 <imuTest_printBiases+0xf4>)
 800d9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7f2 fdab 	bl	8000548 <__aeabi_f2d>
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	460d      	mov	r5, r1
 800d9f6:	4b1b      	ldr	r3, [pc, #108]	; (800da64 <imuTest_printBiases+0xf4>)
 800d9f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7f2 fda4 	bl	8000548 <__aeabi_f2d>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da08:	e9cd 4500 	strd	r4, r5, [sp]
 800da0c:	4642      	mov	r2, r8
 800da0e:	464b      	mov	r3, r9
 800da10:	4817      	ldr	r0, [pc, #92]	; (800da70 <imuTest_printBiases+0x100>)
 800da12:	f7ff ff05 	bl	800d820 <println>
	println("mag biases [mG]:\t%f\t%f\t%f", mpu.magBias[0], mpu.magBias[1], mpu.magBias[2]);
 800da16:	4b13      	ldr	r3, [pc, #76]	; (800da64 <imuTest_printBiases+0xf4>)
 800da18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f2 fd94 	bl	8000548 <__aeabi_f2d>
 800da20:	4680      	mov	r8, r0
 800da22:	4689      	mov	r9, r1
 800da24:	4b0f      	ldr	r3, [pc, #60]	; (800da64 <imuTest_printBiases+0xf4>)
 800da26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da28:	4618      	mov	r0, r3
 800da2a:	f7f2 fd8d 	bl	8000548 <__aeabi_f2d>
 800da2e:	4604      	mov	r4, r0
 800da30:	460d      	mov	r5, r1
 800da32:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <imuTest_printBiases+0xf4>)
 800da34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da36:	4618      	mov	r0, r3
 800da38:	f7f2 fd86 	bl	8000548 <__aeabi_f2d>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da44:	e9cd 4500 	strd	r4, r5, [sp]
 800da48:	4642      	mov	r2, r8
 800da4a:	464b      	mov	r3, r9
 800da4c:	4809      	ldr	r0, [pc, #36]	; (800da74 <imuTest_printBiases+0x104>)
 800da4e:	f7ff fee7 	bl	800d820 <println>
	delay(2000);
 800da52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800da56:	f7f5 ffb9 	bl	80039cc <HAL_Delay>
	/*
accel biases (mg): [3935.302734, 2100.402832, 97.839355]
gyro biases (dps): [88.206108, 3.259542, 312.610687]
mag biases [mG]:        -42.451466      -15.919300      -899.914856
	 */
}
 800da5a:	bf00      	nop
 800da5c:	46bd      	mov	sp, r7
 800da5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800da62:	bf00      	nop
 800da64:	20004024 	.word	0x20004024
 800da68:	408f4000 	.word	0x408f4000
 800da6c:	080150d0 	.word	0x080150d0
 800da70:	080150ec 	.word	0x080150ec
 800da74:	08015108 	.word	0x08015108

0800da78 <imuTest_begin>:

static bool imuTest_begin(void)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	af00      	add	r7, sp, #0
	mpu.i2c = Get_I2C1_Instance();
 800da7c:	f000 fcb0 	bl	800e3e0 <Get_I2C1_Instance>
 800da80:	4602      	mov	r2, r0
 800da82:	4b14      	ldr	r3, [pc, #80]	; (800dad4 <imuTest_begin+0x5c>)
 800da84:	601a      	str	r2, [r3, #0]
	mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 800da86:	4b13      	ldr	r3, [pc, #76]	; (800dad4 <imuTest_begin+0x5c>)
 800da88:	22d2      	movs	r2, #210	; 0xd2
 800da8a:	711a      	strb	r2, [r3, #4]
	mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 800da8c:	4b11      	ldr	r3, [pc, #68]	; (800dad4 <imuTest_begin+0x5c>)
 800da8e:	2218      	movs	r2, #24
 800da90:	715a      	strb	r2, [r3, #5]

	writePin(LEDB, HIGH);
 800da92:	2201      	movs	r2, #1
 800da94:	2140      	movs	r1, #64	; 0x40
 800da96:	4810      	ldr	r0, [pc, #64]	; (800dad8 <imuTest_begin+0x60>)
 800da98:	f7f6 fe16 	bl	80046c8 <HAL_GPIO_WritePin>
	MPU9250_init(&mpu, &mpu9250_default_config);
 800da9c:	490f      	ldr	r1, [pc, #60]	; (800dadc <imuTest_begin+0x64>)
 800da9e:	480d      	ldr	r0, [pc, #52]	; (800dad4 <imuTest_begin+0x5c>)
 800daa0:	f7f3 fd7e 	bl	80015a0 <MPU9250_init>
	writePin(LEDB, LOW);
 800daa4:	2200      	movs	r2, #0
 800daa6:	2140      	movs	r1, #64	; 0x40
 800daa8:	480b      	ldr	r0, [pc, #44]	; (800dad8 <imuTest_begin+0x60>)
 800daaa:	f7f6 fe0d 	bl	80046c8 <HAL_GPIO_WritePin>
	writePin(LEDA, HIGH);
 800daae:	2201      	movs	r2, #1
 800dab0:	2180      	movs	r1, #128	; 0x80
 800dab2:	4809      	ldr	r0, [pc, #36]	; (800dad8 <imuTest_begin+0x60>)
 800dab4:	f7f6 fe08 	bl	80046c8 <HAL_GPIO_WritePin>
	AK8963_init(&mpu, &mpu9250_default_config);
 800dab8:	4908      	ldr	r1, [pc, #32]	; (800dadc <imuTest_begin+0x64>)
 800daba:	4806      	ldr	r0, [pc, #24]	; (800dad4 <imuTest_begin+0x5c>)
 800dabc:	f7f3 feac 	bl	8001818 <AK8963_init>
	writePin(LEDA, LOW);
 800dac0:	2200      	movs	r2, #0
 800dac2:	2180      	movs	r1, #128	; 0x80
 800dac4:	4804      	ldr	r0, [pc, #16]	; (800dad8 <imuTest_begin+0x60>)
 800dac6:	f7f6 fdff 	bl	80046c8 <HAL_GPIO_WritePin>
	imuTest_printBiases();
 800daca:	f7ff ff51 	bl	800d970 <imuTest_printBiases>
	return false;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20004024 	.word	0x20004024
 800dad8:	40020800 	.word	0x40020800
 800dadc:	20000118 	.word	0x20000118

0800dae0 <imuTest_loop>:
static bool imuTest_loop(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
	if (MPU9250_update(&mpu))
 800dae4:	4814      	ldr	r0, [pc, #80]	; (800db38 <imuTest_loop+0x58>)
 800dae6:	f7f3 ff3d 	bl	8001964 <MPU9250_update>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d020      	beq.n	800db32 <imuTest_loop+0x52>
	{
		imuTest_printData();
 800daf0:	f7ff fef8 	bl	800d8e4 <imuTest_printData>
		if (mpu.yaw >= 178.0 && mpu.yaw <= 182.0) writePin(LEDA, HIGH);
 800daf4:	4b10      	ldr	r3, [pc, #64]	; (800db38 <imuTest_loop+0x58>)
 800daf6:	edd3 7a03 	vldr	s15, [r3, #12]
 800dafa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800db3c <imuTest_loop+0x5c>
 800dafe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	db0f      	blt.n	800db28 <imuTest_loop+0x48>
 800db08:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <imuTest_loop+0x58>)
 800db0a:	edd3 7a03 	vldr	s15, [r3, #12]
 800db0e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800db40 <imuTest_loop+0x60>
 800db12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1a:	d805      	bhi.n	800db28 <imuTest_loop+0x48>
 800db1c:	2201      	movs	r2, #1
 800db1e:	2180      	movs	r1, #128	; 0x80
 800db20:	4808      	ldr	r0, [pc, #32]	; (800db44 <imuTest_loop+0x64>)
 800db22:	f7f6 fdd1 	bl	80046c8 <HAL_GPIO_WritePin>
 800db26:	e004      	b.n	800db32 <imuTest_loop+0x52>
		else writePin(LEDA, LOW);
 800db28:	2200      	movs	r2, #0
 800db2a:	2180      	movs	r1, #128	; 0x80
 800db2c:	4805      	ldr	r0, [pc, #20]	; (800db44 <imuTest_loop+0x64>)
 800db2e:	f7f6 fdcb 	bl	80046c8 <HAL_GPIO_WritePin>
	}
}
 800db32:	bf00      	nop
 800db34:	4618      	mov	r0, r3
 800db36:	bd80      	pop	{r7, pc}
 800db38:	20004024 	.word	0x20004024
 800db3c:	43320000 	.word	0x43320000
 800db40:	43360000 	.word	0x43360000
 800db44:	40020800 	.word	0x40020800

0800db48 <setup>:
*/

#include "Scripts/Peripherials/imuTest.c"

static void setup(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	af00      	add	r7, sp, #0
	writePin(LEDD, HIGH);	while (readPin(BTN_USR) == HIGH);	writePin(LEDD, LOW);
 800db4c:	2201      	movs	r2, #1
 800db4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800db52:	480c      	ldr	r0, [pc, #48]	; (800db84 <setup+0x3c>)
 800db54:	f7f6 fdb8 	bl	80046c8 <HAL_GPIO_WritePin>
 800db58:	bf00      	nop
 800db5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db5e:	480a      	ldr	r0, [pc, #40]	; (800db88 <setup+0x40>)
 800db60:	f7f6 fd9a 	bl	8004698 <HAL_GPIO_ReadPin>
 800db64:	4603      	mov	r3, r0
 800db66:	2b01      	cmp	r3, #1
 800db68:	d0f7      	beq.n	800db5a <setup+0x12>
 800db6a:	2200      	movs	r2, #0
 800db6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800db70:	4804      	ldr	r0, [pc, #16]	; (800db84 <setup+0x3c>)
 800db72:	f7f6 fda9 	bl	80046c8 <HAL_GPIO_WritePin>
	println("Hello world");
 800db76:	4805      	ldr	r0, [pc, #20]	; (800db8c <setup+0x44>)
 800db78:	f7ff fe52 	bl	800d820 <println>
	
	imuTest_begin();
 800db7c:	f7ff ff7c 	bl	800da78 <imuTest_begin>
}
 800db80:	bf00      	nop
 800db82:	bd80      	pop	{r7, pc}
 800db84:	40020400 	.word	0x40020400
 800db88:	40020000 	.word	0x40020000
 800db8c:	080151a4 	.word	0x080151a4

0800db90 <loop>:

static void loop(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	af00      	add	r7, sp, #0
	imuTest_loop();
 800db94:	f7ff ffa4 	bl	800dae0 <imuTest_loop>
}
 800db98:	bf00      	nop
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
	//GPS_read(&gps);
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dbb4:	f7f5 fe98 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dbb8:	f000 f862 	bl	800dc80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800dbbc:	f000 fb32 	bl	800e224 <MX_GPIO_Init>
  MX_DMA_Init();
 800dbc0:	f000 fb08 	bl	800e1d4 <MX_DMA_Init>
  MX_I2C1_Init();
 800dbc4:	f000 f8de 	bl	800dd84 <MX_I2C1_Init>
  MX_RTC_Init();
 800dbc8:	f000 f90a 	bl	800dde0 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800dbcc:	f000 f92e 	bl	800de2c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800dbd0:	f000 f94c 	bl	800de6c <MX_SPI1_Init>
  MX_TIM2_Init();
 800dbd4:	f000 f980 	bl	800ded8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800dbd8:	f000 f9cc 	bl	800df74 <MX_TIM3_Init>
  MX_TIM5_Init();
 800dbdc:	f000 fa4c 	bl	800e078 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800dbe0:	f000 face 	bl	800e180 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800dbe4:	f7ff fdda 	bl	800d79c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800dbe8:	f001 f9be 	bl	800ef68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800dbec:	4820      	ldr	r0, [pc, #128]	; (800dc70 <main+0xc0>)
 800dbee:	f7fa ffcd 	bl	8008b8c <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	2180      	movs	r1, #128	; 0x80
 800dbf6:	481f      	ldr	r0, [pc, #124]	; (800dc74 <main+0xc4>)
 800dbf8:	f7f6 fd66 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2140      	movs	r1, #64	; 0x40
 800dc00:	481c      	ldr	r0, [pc, #112]	; (800dc74 <main+0xc4>)
 800dc02:	f7f6 fd61 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800dc06:	2200      	movs	r2, #0
 800dc08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dc0c:	481a      	ldr	r0, [pc, #104]	; (800dc78 <main+0xc8>)
 800dc0e:	f7f6 fd5b 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800dc12:	2200      	movs	r2, #0
 800dc14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dc18:	4817      	ldr	r0, [pc, #92]	; (800dc78 <main+0xc8>)
 800dc1a:	f7f6 fd55 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800dc1e:	2200      	movs	r2, #0
 800dc20:	2101      	movs	r1, #1
 800dc22:	4816      	ldr	r0, [pc, #88]	; (800dc7c <main+0xcc>)
 800dc24:	f7f6 fd50 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800dc28:	2200      	movs	r2, #0
 800dc2a:	2104      	movs	r1, #4
 800dc2c:	4813      	ldr	r0, [pc, #76]	; (800dc7c <main+0xcc>)
 800dc2e:	f7f6 fd4b 	bl	80046c8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800dc32:	2200      	movs	r2, #0
 800dc34:	2101      	movs	r1, #1
 800dc36:	480f      	ldr	r0, [pc, #60]	; (800dc74 <main+0xc4>)
 800dc38:	f7f6 fd46 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	2104      	movs	r1, #4
 800dc40:	480c      	ldr	r0, [pc, #48]	; (800dc74 <main+0xc4>)
 800dc42:	f7f6 fd41 	bl	80046c8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800dc46:	2200      	movs	r2, #0
 800dc48:	2102      	movs	r1, #2
 800dc4a:	480a      	ldr	r0, [pc, #40]	; (800dc74 <main+0xc4>)
 800dc4c:	f7f6 fd3c 	bl	80046c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800dc50:	2201      	movs	r2, #1
 800dc52:	2108      	movs	r1, #8
 800dc54:	4807      	ldr	r0, [pc, #28]	; (800dc74 <main+0xc4>)
 800dc56:	f7f6 fd37 	bl	80046c8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2110      	movs	r1, #16
 800dc5e:	4807      	ldr	r0, [pc, #28]	; (800dc7c <main+0xcc>)
 800dc60:	f7f6 fd32 	bl	80046c8 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800dc64:	f7ff ff70 	bl	800db48 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800dc68:	f7ff ff92 	bl	800db90 <loop>
 800dc6c:	e7fc      	b.n	800dc68 <main+0xb8>
 800dc6e:	bf00      	nop
 800dc70:	2000684c 	.word	0x2000684c
 800dc74:	40020800 	.word	0x40020800
 800dc78:	40020400 	.word	0x40020400
 800dc7c:	40020000 	.word	0x40020000

0800dc80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b098      	sub	sp, #96	; 0x60
 800dc84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dc86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc8a:	2230      	movs	r2, #48	; 0x30
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f001 ff03 	bl	800fa9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dc94:	f107 031c 	add.w	r3, r7, #28
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	605a      	str	r2, [r3, #4]
 800dc9e:	609a      	str	r2, [r3, #8]
 800dca0:	60da      	str	r2, [r3, #12]
 800dca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dca4:	f107 030c 	add.w	r3, r7, #12
 800dca8:	2200      	movs	r2, #0
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	605a      	str	r2, [r3, #4]
 800dcae:	609a      	str	r2, [r3, #8]
 800dcb0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	60bb      	str	r3, [r7, #8]
 800dcb6:	4b31      	ldr	r3, [pc, #196]	; (800dd7c <SystemClock_Config+0xfc>)
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	4a30      	ldr	r2, [pc, #192]	; (800dd7c <SystemClock_Config+0xfc>)
 800dcbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dcc0:	6413      	str	r3, [r2, #64]	; 0x40
 800dcc2:	4b2e      	ldr	r3, [pc, #184]	; (800dd7c <SystemClock_Config+0xfc>)
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dcca:	60bb      	str	r3, [r7, #8]
 800dccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dcce:	2300      	movs	r3, #0
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	4b2b      	ldr	r3, [pc, #172]	; (800dd80 <SystemClock_Config+0x100>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a2a      	ldr	r2, [pc, #168]	; (800dd80 <SystemClock_Config+0x100>)
 800dcd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dcdc:	6013      	str	r3, [r2, #0]
 800dcde:	4b28      	ldr	r3, [pc, #160]	; (800dd80 <SystemClock_Config+0x100>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dce6:	607b      	str	r3, [r7, #4]
 800dce8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800dcea:	2305      	movs	r3, #5
 800dcec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dcee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dcf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dcfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800dd02:	2306      	movs	r3, #6
 800dd04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800dd06:	23a8      	movs	r3, #168	; 0xa8
 800dd08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800dd0e:	2307      	movs	r3, #7
 800dd10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dd12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7f8 fdfa 	bl	8006910 <HAL_RCC_OscConfig>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800dd22:	f000 fb67 	bl	800e3f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dd26:	230f      	movs	r3, #15
 800dd28:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dd32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dd38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dd3e:	f107 031c 	add.w	r3, r7, #28
 800dd42:	2105      	movs	r1, #5
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f9 f825 	bl	8006d94 <HAL_RCC_ClockConfig>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800dd50:	f000 fb50 	bl	800e3f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800dd54:	2302      	movs	r3, #2
 800dd56:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800dd58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd5c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dd5e:	f107 030c 	add.w	r3, r7, #12
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f9 f9de 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800dd6e:	f000 fb41 	bl	800e3f4 <Error_Handler>
  }
}
 800dd72:	bf00      	nop
 800dd74:	3760      	adds	r7, #96	; 0x60
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	40023800 	.word	0x40023800
 800dd80:	40007000 	.word	0x40007000

0800dd84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800dd88:	4b12      	ldr	r3, [pc, #72]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800dd8a:	4a13      	ldr	r2, [pc, #76]	; (800ddd8 <MX_I2C1_Init+0x54>)
 800dd8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800dd8e:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800dd90:	4a12      	ldr	r2, [pc, #72]	; (800dddc <MX_I2C1_Init+0x58>)
 800dd92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800dd9a:	4b0e      	ldr	r3, [pc, #56]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dda0:	4b0c      	ldr	r3, [pc, #48]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800dda2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dda6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dda8:	4b0a      	ldr	r3, [pc, #40]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ddae:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ddb4:	4b07      	ldr	r3, [pc, #28]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ddba:	4b06      	ldr	r3, [pc, #24]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ddc0:	4804      	ldr	r0, [pc, #16]	; (800ddd4 <MX_I2C1_Init+0x50>)
 800ddc2:	f7f6 fc9b 	bl	80046fc <HAL_I2C_Init>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800ddcc:	f000 fb12 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800ddd0:	bf00      	nop
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	2000661c 	.word	0x2000661c
 800ddd8:	40005400 	.word	0x40005400
 800dddc:	00061a80 	.word	0x00061a80

0800dde0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800dde4:	4b0f      	ldr	r3, [pc, #60]	; (800de24 <MX_RTC_Init+0x44>)
 800dde6:	4a10      	ldr	r2, [pc, #64]	; (800de28 <MX_RTC_Init+0x48>)
 800dde8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ddea:	4b0e      	ldr	r3, [pc, #56]	; (800de24 <MX_RTC_Init+0x44>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ddf0:	4b0c      	ldr	r3, [pc, #48]	; (800de24 <MX_RTC_Init+0x44>)
 800ddf2:	227f      	movs	r2, #127	; 0x7f
 800ddf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ddf6:	4b0b      	ldr	r3, [pc, #44]	; (800de24 <MX_RTC_Init+0x44>)
 800ddf8:	22ff      	movs	r2, #255	; 0xff
 800ddfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ddfc:	4b09      	ldr	r3, [pc, #36]	; (800de24 <MX_RTC_Init+0x44>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800de02:	4b08      	ldr	r3, [pc, #32]	; (800de24 <MX_RTC_Init+0x44>)
 800de04:	2200      	movs	r2, #0
 800de06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800de08:	4b06      	ldr	r3, [pc, #24]	; (800de24 <MX_RTC_Init+0x44>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800de0e:	4805      	ldr	r0, [pc, #20]	; (800de24 <MX_RTC_Init+0x44>)
 800de10:	f7f9 fa6a 	bl	80072e8 <HAL_RTC_Init>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d001      	beq.n	800de1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800de1a:	f000 faeb 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800de1e:	bf00      	nop
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	200066f0 	.word	0x200066f0
 800de28:	40002800 	.word	0x40002800

0800de2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800de30:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de32:	4a0d      	ldr	r2, [pc, #52]	; (800de68 <MX_SDIO_SD_Init+0x3c>)
 800de34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800de36:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de38:	2200      	movs	r2, #0
 800de3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800de3c:	4b09      	ldr	r3, [pc, #36]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de3e:	2200      	movs	r2, #0
 800de40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800de42:	4b08      	ldr	r3, [pc, #32]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de44:	2200      	movs	r2, #0
 800de46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800de48:	4b06      	ldr	r3, [pc, #24]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800de4e:	4b05      	ldr	r3, [pc, #20]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de50:	2200      	movs	r2, #0
 800de52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800de54:	4b03      	ldr	r3, [pc, #12]	; (800de64 <MX_SDIO_SD_Init+0x38>)
 800de56:	2200      	movs	r2, #0
 800de58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800de5a:	bf00      	nop
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	20006770 	.word	0x20006770
 800de68:	40012c00 	.word	0x40012c00

0800de6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800de70:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de72:	4a18      	ldr	r2, [pc, #96]	; (800ded4 <MX_SPI1_Init+0x68>)
 800de74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800de76:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de78:	f44f 7282 	mov.w	r2, #260	; 0x104
 800de7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800de7e:	4b14      	ldr	r3, [pc, #80]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de80:	2200      	movs	r2, #0
 800de82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800de84:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de86:	2200      	movs	r2, #0
 800de88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800de8a:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800de90:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de92:	2200      	movs	r2, #0
 800de94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800de96:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <MX_SPI1_Init+0x64>)
 800de98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <MX_SPI1_Init+0x64>)
 800dea0:	2218      	movs	r2, #24
 800dea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dea4:	4b0a      	ldr	r3, [pc, #40]	; (800ded0 <MX_SPI1_Init+0x64>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <MX_SPI1_Init+0x64>)
 800deac:	2200      	movs	r2, #0
 800deae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800deb0:	4b07      	ldr	r3, [pc, #28]	; (800ded0 <MX_SPI1_Init+0x64>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800deb6:	4b06      	ldr	r3, [pc, #24]	; (800ded0 <MX_SPI1_Init+0x64>)
 800deb8:	220a      	movs	r2, #10
 800deba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800debc:	4804      	ldr	r0, [pc, #16]	; (800ded0 <MX_SPI1_Init+0x64>)
 800debe:	f7fa fdd6 	bl	8008a6e <HAL_SPI_Init>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800dec8:	f000 fa94 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800decc:	bf00      	nop
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	200067f4 	.word	0x200067f4
 800ded4:	40013000 	.word	0x40013000

0800ded8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dede:	f107 0308 	add.w	r3, r7, #8
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	605a      	str	r2, [r3, #4]
 800dee8:	609a      	str	r2, [r3, #8]
 800deea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800deec:	463b      	mov	r3, r7
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800def4:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <MX_TIM2_Init+0x94>)
 800def6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800defa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800defc:	4b1b      	ldr	r3, [pc, #108]	; (800df6c <MX_TIM2_Init+0x94>)
 800defe:	2253      	movs	r2, #83	; 0x53
 800df00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df02:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <MX_TIM2_Init+0x94>)
 800df04:	2200      	movs	r2, #0
 800df06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800df08:	4b18      	ldr	r3, [pc, #96]	; (800df6c <MX_TIM2_Init+0x94>)
 800df0a:	4a19      	ldr	r2, [pc, #100]	; (800df70 <MX_TIM2_Init+0x98>)
 800df0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df0e:	4b17      	ldr	r3, [pc, #92]	; (800df6c <MX_TIM2_Init+0x94>)
 800df10:	2200      	movs	r2, #0
 800df12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df14:	4b15      	ldr	r3, [pc, #84]	; (800df6c <MX_TIM2_Init+0x94>)
 800df16:	2200      	movs	r2, #0
 800df18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800df1a:	4814      	ldr	r0, [pc, #80]	; (800df6c <MX_TIM2_Init+0x94>)
 800df1c:	f7fa fe0b 	bl	8008b36 <HAL_TIM_Base_Init>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800df26:	f000 fa65 	bl	800e3f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800df2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800df30:	f107 0308 	add.w	r3, r7, #8
 800df34:	4619      	mov	r1, r3
 800df36:	480d      	ldr	r0, [pc, #52]	; (800df6c <MX_TIM2_Init+0x94>)
 800df38:	f7fa ff48 	bl	8008dcc <HAL_TIM_ConfigClockSource>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d001      	beq.n	800df46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800df42:	f000 fa57 	bl	800e3f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df46:	2300      	movs	r3, #0
 800df48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df4a:	2300      	movs	r3, #0
 800df4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800df4e:	463b      	mov	r3, r7
 800df50:	4619      	mov	r1, r3
 800df52:	4806      	ldr	r0, [pc, #24]	; (800df6c <MX_TIM2_Init+0x94>)
 800df54:	f7fb fadc 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800df5e:	f000 fa49 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800df62:	bf00      	nop
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	2000684c 	.word	0x2000684c
 800df70:	fa56ea00 	.word	0xfa56ea00

0800df74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08e      	sub	sp, #56	; 0x38
 800df78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	605a      	str	r2, [r3, #4]
 800df84:	609a      	str	r2, [r3, #8]
 800df86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df88:	f107 0320 	add.w	r3, r7, #32
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
 800df90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df92:	1d3b      	adds	r3, r7, #4
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	605a      	str	r2, [r3, #4]
 800df9a:	609a      	str	r2, [r3, #8]
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	611a      	str	r2, [r3, #16]
 800dfa0:	615a      	str	r2, [r3, #20]
 800dfa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dfa4:	4b32      	ldr	r3, [pc, #200]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfa6:	4a33      	ldr	r2, [pc, #204]	; (800e074 <MX_TIM3_Init+0x100>)
 800dfa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800dfaa:	4b31      	ldr	r3, [pc, #196]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfac:	22a7      	movs	r2, #167	; 0xa7
 800dfae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dfb0:	4b2f      	ldr	r3, [pc, #188]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800dfb6:	4b2e      	ldr	r3, [pc, #184]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfb8:	f242 7210 	movw	r2, #10000	; 0x2710
 800dfbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dfbe:	4b2c      	ldr	r3, [pc, #176]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dfc4:	4b2a      	ldr	r3, [pc, #168]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800dfca:	4829      	ldr	r0, [pc, #164]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfcc:	f7fa fdb3 	bl	8008b36 <HAL_TIM_Base_Init>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800dfd6:	f000 fa0d 	bl	800e3f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dfda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800dfe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	4822      	ldr	r0, [pc, #136]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dfe8:	f7fa fef0 	bl	8008dcc <HAL_TIM_ConfigClockSource>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800dff2:	f000 f9ff 	bl	800e3f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dff6:	481e      	ldr	r0, [pc, #120]	; (800e070 <MX_TIM3_Init+0xfc>)
 800dff8:	f7fa fdec 	bl	8008bd4 <HAL_TIM_PWM_Init>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800e002:	f000 f9f7 	bl	800e3f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e006:	2300      	movs	r3, #0
 800e008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e00e:	f107 0320 	add.w	r3, r7, #32
 800e012:	4619      	mov	r1, r3
 800e014:	4816      	ldr	r0, [pc, #88]	; (800e070 <MX_TIM3_Init+0xfc>)
 800e016:	f7fb fa7b 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800e020:	f000 f9e8 	bl	800e3f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e024:	2360      	movs	r3, #96	; 0x60
 800e026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800e028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e02c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e02e:	2300      	movs	r3, #0
 800e030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e036:	1d3b      	adds	r3, r7, #4
 800e038:	2208      	movs	r2, #8
 800e03a:	4619      	mov	r1, r3
 800e03c:	480c      	ldr	r0, [pc, #48]	; (800e070 <MX_TIM3_Init+0xfc>)
 800e03e:	f7fa fdff 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 800e042:	4603      	mov	r3, r0
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800e048:	f000 f9d4 	bl	800e3f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e04c:	1d3b      	adds	r3, r7, #4
 800e04e:	220c      	movs	r2, #12
 800e050:	4619      	mov	r1, r3
 800e052:	4807      	ldr	r0, [pc, #28]	; (800e070 <MX_TIM3_Init+0xfc>)
 800e054:	f7fa fdf4 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800e05e:	f000 f9c9 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e062:	4803      	ldr	r0, [pc, #12]	; (800e070 <MX_TIM3_Init+0xfc>)
 800e064:	f000 fe0c 	bl	800ec80 <HAL_TIM_MspPostInit>

}
 800e068:	bf00      	nop
 800e06a:	3738      	adds	r7, #56	; 0x38
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	200066b0 	.word	0x200066b0
 800e074:	40000400 	.word	0x40000400

0800e078 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b08e      	sub	sp, #56	; 0x38
 800e07c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e07e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
 800e086:	605a      	str	r2, [r3, #4]
 800e088:	609a      	str	r2, [r3, #8]
 800e08a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e08c:	f107 0320 	add.w	r3, r7, #32
 800e090:	2200      	movs	r2, #0
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e096:	1d3b      	adds	r3, r7, #4
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	605a      	str	r2, [r3, #4]
 800e09e:	609a      	str	r2, [r3, #8]
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	611a      	str	r2, [r3, #16]
 800e0a4:	615a      	str	r2, [r3, #20]
 800e0a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e0a8:	4b33      	ldr	r3, [pc, #204]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0aa:	4a34      	ldr	r2, [pc, #208]	; (800e17c <MX_TIM5_Init+0x104>)
 800e0ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800e0ae:	4b32      	ldr	r3, [pc, #200]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0b4:	4b30      	ldr	r3, [pc, #192]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800e0ba:	4b2f      	ldr	r3, [pc, #188]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e0c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e0c2:	4b2d      	ldr	r3, [pc, #180]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0c8:	4b2b      	ldr	r3, [pc, #172]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e0ce:	482a      	ldr	r0, [pc, #168]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0d0:	f7fa fd31 	bl	8008b36 <HAL_TIM_Base_Init>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800e0da:	f000 f98b 	bl	800e3f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e0e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	4823      	ldr	r0, [pc, #140]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0ec:	f7fa fe6e 	bl	8008dcc <HAL_TIM_ConfigClockSource>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800e0f6:	f000 f97d 	bl	800e3f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e0fa:	481f      	ldr	r0, [pc, #124]	; (800e178 <MX_TIM5_Init+0x100>)
 800e0fc:	f7fa fd6a 	bl	8008bd4 <HAL_TIM_PWM_Init>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800e106:	f000 f975 	bl	800e3f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e10a:	2300      	movs	r3, #0
 800e10c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e10e:	2300      	movs	r3, #0
 800e110:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e112:	f107 0320 	add.w	r3, r7, #32
 800e116:	4619      	mov	r1, r3
 800e118:	4817      	ldr	r0, [pc, #92]	; (800e178 <MX_TIM5_Init+0x100>)
 800e11a:	f7fb f9f9 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800e124:	f000 f966 	bl	800e3f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800e128:	2370      	movs	r3, #112	; 0x70
 800e12a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800e12c:	2364      	movs	r3, #100	; 0x64
 800e12e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e130:	2300      	movs	r3, #0
 800e132:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e138:	1d3b      	adds	r3, r7, #4
 800e13a:	2204      	movs	r2, #4
 800e13c:	4619      	mov	r1, r3
 800e13e:	480e      	ldr	r0, [pc, #56]	; (800e178 <MX_TIM5_Init+0x100>)
 800e140:	f7fa fd7e 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800e14a:	f000 f953 	bl	800e3f4 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800e14e:	2304      	movs	r3, #4
 800e150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e152:	1d3b      	adds	r3, r7, #4
 800e154:	220c      	movs	r2, #12
 800e156:	4619      	mov	r1, r3
 800e158:	4807      	ldr	r0, [pc, #28]	; (800e178 <MX_TIM5_Init+0x100>)
 800e15a:	f7fa fd71 	bl	8008c40 <HAL_TIM_PWM_ConfigChannel>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800e164:	f000 f946 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e168:	4803      	ldr	r0, [pc, #12]	; (800e178 <MX_TIM5_Init+0x100>)
 800e16a:	f000 fd89 	bl	800ec80 <HAL_TIM_MspPostInit>

}
 800e16e:	bf00      	nop
 800e170:	3738      	adds	r7, #56	; 0x38
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20006670 	.word	0x20006670
 800e17c:	40000c00 	.word	0x40000c00

0800e180 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800e184:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e186:	4a12      	ldr	r2, [pc, #72]	; (800e1d0 <MX_USART3_UART_Init+0x50>)
 800e188:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800e18a:	4b10      	ldr	r3, [pc, #64]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e18c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e190:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e192:	4b0e      	ldr	r3, [pc, #56]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e194:	2200      	movs	r2, #0
 800e196:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e198:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e19e:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e1a4:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e1a6:	220c      	movs	r2, #12
 800e1a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e1b0:	4b06      	ldr	r3, [pc, #24]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e1b6:	4805      	ldr	r0, [pc, #20]	; (800e1cc <MX_USART3_UART_Init+0x4c>)
 800e1b8:	f7fb f9ef 	bl	800959a <HAL_UART_Init>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800e1c2:	f000 f917 	bl	800e3f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800e1c6:	bf00      	nop
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200065dc 	.word	0x200065dc
 800e1d0:	40004800 	.word	0x40004800

0800e1d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e1da:	2300      	movs	r3, #0
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	4b10      	ldr	r3, [pc, #64]	; (800e220 <MX_DMA_Init+0x4c>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e2:	4a0f      	ldr	r2, [pc, #60]	; (800e220 <MX_DMA_Init+0x4c>)
 800e1e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e1e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <MX_DMA_Init+0x4c>)
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1f2:	607b      	str	r3, [r7, #4]
 800e1f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	203b      	movs	r0, #59	; 0x3b
 800e1fc:	f7f5 fce3 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800e200:	203b      	movs	r0, #59	; 0x3b
 800e202:	f7f5 fcfc 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800e206:	2200      	movs	r2, #0
 800e208:	2100      	movs	r1, #0
 800e20a:	2045      	movs	r0, #69	; 0x45
 800e20c:	f7f5 fcdb 	bl	8003bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800e210:	2045      	movs	r0, #69	; 0x45
 800e212:	f7f5 fcf4 	bl	8003bfe <HAL_NVIC_EnableIRQ>

}
 800e216:	bf00      	nop
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	40023800 	.word	0x40023800

0800e224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08a      	sub	sp, #40	; 0x28
 800e228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e22a:	f107 0314 	add.w	r3, r7, #20
 800e22e:	2200      	movs	r2, #0
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	605a      	str	r2, [r3, #4]
 800e234:	609a      	str	r2, [r3, #8]
 800e236:	60da      	str	r2, [r3, #12]
 800e238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e23a:	2300      	movs	r3, #0
 800e23c:	613b      	str	r3, [r7, #16]
 800e23e:	4b63      	ldr	r3, [pc, #396]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e242:	4a62      	ldr	r2, [pc, #392]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e244:	f043 0304 	orr.w	r3, r3, #4
 800e248:	6313      	str	r3, [r2, #48]	; 0x30
 800e24a:	4b60      	ldr	r3, [pc, #384]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24e:	f003 0304 	and.w	r3, r3, #4
 800e252:	613b      	str	r3, [r7, #16]
 800e254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e256:	2300      	movs	r3, #0
 800e258:	60fb      	str	r3, [r7, #12]
 800e25a:	4b5c      	ldr	r3, [pc, #368]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25e:	4a5b      	ldr	r2, [pc, #364]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e264:	6313      	str	r3, [r2, #48]	; 0x30
 800e266:	4b59      	ldr	r3, [pc, #356]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e272:	2300      	movs	r3, #0
 800e274:	60bb      	str	r3, [r7, #8]
 800e276:	4b55      	ldr	r3, [pc, #340]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27a:	4a54      	ldr	r2, [pc, #336]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e27c:	f043 0301 	orr.w	r3, r3, #1
 800e280:	6313      	str	r3, [r2, #48]	; 0x30
 800e282:	4b52      	ldr	r3, [pc, #328]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	60bb      	str	r3, [r7, #8]
 800e28c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e28e:	2300      	movs	r3, #0
 800e290:	607b      	str	r3, [r7, #4]
 800e292:	4b4e      	ldr	r3, [pc, #312]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e296:	4a4d      	ldr	r2, [pc, #308]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e298:	f043 0302 	orr.w	r3, r3, #2
 800e29c:	6313      	str	r3, [r2, #48]	; 0x30
 800e29e:	4b4b      	ldr	r3, [pc, #300]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a2:	f003 0302 	and.w	r3, r3, #2
 800e2a6:	607b      	str	r3, [r7, #4]
 800e2a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	603b      	str	r3, [r7, #0]
 800e2ae:	4b47      	ldr	r3, [pc, #284]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b2:	4a46      	ldr	r2, [pc, #280]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e2b4:	f043 0308 	orr.w	r3, r3, #8
 800e2b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ba:	4b44      	ldr	r3, [pc, #272]	; (800e3cc <MX_GPIO_Init+0x1a8>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	f003 0308 	and.w	r3, r3, #8
 800e2c2:	603b      	str	r3, [r7, #0]
 800e2c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	21ef      	movs	r1, #239	; 0xef
 800e2ca:	4841      	ldr	r0, [pc, #260]	; (800e3d0 <MX_GPIO_Init+0x1ac>)
 800e2cc:	f7f6 f9fc 	bl	80046c8 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2115      	movs	r1, #21
 800e2d4:	483f      	ldr	r0, [pc, #252]	; (800e3d4 <MX_GPIO_Init+0x1b0>)
 800e2d6:	f7f6 f9f7 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800e2e0:	483d      	ldr	r0, [pc, #244]	; (800e3d8 <MX_GPIO_Init+0x1b4>)
 800e2e2:	f7f6 f9f1 	bl	80046c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800e2e6:	23cf      	movs	r3, #207	; 0xcf
 800e2e8:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e2f6:	f107 0314 	add.w	r3, r7, #20
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4834      	ldr	r0, [pc, #208]	; (800e3d0 <MX_GPIO_Init+0x1ac>)
 800e2fe:	f7f6 f831 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800e302:	2305      	movs	r3, #5
 800e304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e306:	2301      	movs	r3, #1
 800e308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e30a:	2302      	movs	r3, #2
 800e30c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e30e:	2300      	movs	r3, #0
 800e310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e312:	f107 0314 	add.w	r3, r7, #20
 800e316:	4619      	mov	r1, r3
 800e318:	482e      	ldr	r0, [pc, #184]	; (800e3d4 <MX_GPIO_Init+0x1b0>)
 800e31a:	f7f6 f823 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800e31e:	2310      	movs	r3, #16
 800e320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e322:	2301      	movs	r3, #1
 800e324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e326:	2300      	movs	r3, #0
 800e328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e32a:	2300      	movs	r3, #0
 800e32c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800e32e:	f107 0314 	add.w	r3, r7, #20
 800e332:	4619      	mov	r1, r3
 800e334:	4827      	ldr	r0, [pc, #156]	; (800e3d4 <MX_GPIO_Init+0x1b0>)
 800e336:	f7f6 f815 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800e33a:	23c0      	movs	r3, #192	; 0xc0
 800e33c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e33e:	4b27      	ldr	r3, [pc, #156]	; (800e3dc <MX_GPIO_Init+0x1b8>)
 800e340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e342:	2300      	movs	r3, #0
 800e344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e346:	f107 0314 	add.w	r3, r7, #20
 800e34a:	4619      	mov	r1, r3
 800e34c:	4821      	ldr	r0, [pc, #132]	; (800e3d4 <MX_GPIO_Init+0x1b0>)
 800e34e:	f7f6 f809 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800e352:	2320      	movs	r3, #32
 800e354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e356:	2301      	movs	r3, #1
 800e358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e35a:	2302      	movs	r3, #2
 800e35c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e35e:	2300      	movs	r3, #0
 800e360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800e362:	f107 0314 	add.w	r3, r7, #20
 800e366:	4619      	mov	r1, r3
 800e368:	4819      	ldr	r0, [pc, #100]	; (800e3d0 <MX_GPIO_Init+0x1ac>)
 800e36a:	f7f5 fffb 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800e36e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e374:	2301      	movs	r3, #1
 800e376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e37c:	2300      	movs	r3, #0
 800e37e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e380:	f107 0314 	add.w	r3, r7, #20
 800e384:	4619      	mov	r1, r3
 800e386:	4814      	ldr	r0, [pc, #80]	; (800e3d8 <MX_GPIO_Init+0x1b4>)
 800e388:	f7f5 ffec 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800e38c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800e390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e396:	2301      	movs	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e39a:	f107 0314 	add.w	r3, r7, #20
 800e39e:	4619      	mov	r1, r3
 800e3a0:	480c      	ldr	r0, [pc, #48]	; (800e3d4 <MX_GPIO_Init+0x1b0>)
 800e3a2:	f7f5 ffdf 	bl	8004364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800e3a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800e3b8:	f107 0314 	add.w	r3, r7, #20
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4806      	ldr	r0, [pc, #24]	; (800e3d8 <MX_GPIO_Init+0x1b4>)
 800e3c0:	f7f5 ffd0 	bl	8004364 <HAL_GPIO_Init>

}
 800e3c4:	bf00      	nop
 800e3c6:	3728      	adds	r7, #40	; 0x28
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	40023800 	.word	0x40023800
 800e3d0:	40020800 	.word	0x40020800
 800e3d4:	40020000 	.word	0x40020000
 800e3d8:	40020400 	.word	0x40020400
 800e3dc:	10110000 	.word	0x10110000

0800e3e0 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 800e3e0:	b480      	push	{r7}
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	4b02      	ldr	r3, [pc, #8]	; (800e3f0 <Get_I2C1_Instance+0x10>)
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	2000661c 	.word	0x2000661c

0800e3f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e3f8:	bf00      	nop
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b084      	sub	sp, #16
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e40a:	f7f5 fad3 	bl	80039b4 <HAL_GetTick>
 800e40e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e410:	e006      	b.n	800e420 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e412:	f7ff f96d 	bl	800d6f0 <BSP_SD_GetCardState>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e009      	b.n	800e434 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e420:	f7f5 fac8 	bl	80039b4 <HAL_GetTick>
 800e424:	4602      	mov	r2, r0
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d8f0      	bhi.n	800e412 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e430:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	4603      	mov	r3, r0
 800e444:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e446:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <SD_CheckStatus+0x38>)
 800e448:	2201      	movs	r2, #1
 800e44a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e44c:	f7ff f950 	bl	800d6f0 <BSP_SD_GetCardState>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d107      	bne.n	800e466 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e456:	4b07      	ldr	r3, [pc, #28]	; (800e474 <SD_CheckStatus+0x38>)
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	f023 0301 	bic.w	r3, r3, #1
 800e460:	b2da      	uxtb	r2, r3
 800e462:	4b04      	ldr	r3, [pc, #16]	; (800e474 <SD_CheckStatus+0x38>)
 800e464:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e466:	4b03      	ldr	r3, [pc, #12]	; (800e474 <SD_CheckStatus+0x38>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	b2db      	uxtb	r3, r3
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20000158 	.word	0x20000158

0800e478 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	4603      	mov	r3, r0
 800e480:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e482:	f7ff f8db 	bl	800d63c <BSP_SD_Init>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d107      	bne.n	800e49c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e48c:	79fb      	ldrb	r3, [r7, #7]
 800e48e:	4618      	mov	r0, r3
 800e490:	f7ff ffd4 	bl	800e43c <SD_CheckStatus>
 800e494:	4603      	mov	r3, r0
 800e496:	461a      	mov	r2, r3
 800e498:	4b04      	ldr	r3, [pc, #16]	; (800e4ac <SD_initialize+0x34>)
 800e49a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e49c:	4b03      	ldr	r3, [pc, #12]	; (800e4ac <SD_initialize+0x34>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	b2db      	uxtb	r3, r3
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20000158 	.word	0x20000158

0800e4b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7ff ffbd 	bl	800e43c <SD_CheckStatus>
 800e4c2:	4603      	mov	r3, r0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3708      	adds	r7, #8
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60b9      	str	r1, [r7, #8]
 800e4d4:	607a      	str	r2, [r7, #4]
 800e4d6:	603b      	str	r3, [r7, #0]
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4e0:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4e4:	f7ff ff8d 	bl	800e402 <SD_CheckStatusWithTimeout>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	da01      	bge.n	800e4f2 <SD_read+0x26>
  {
    return res;
 800e4ee:	7ffb      	ldrb	r3, [r7, #31]
 800e4f0:	e08b      	b.n	800e60a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	f003 0303 	and.w	r3, r3, #3
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f040 8085 	bne.w	800e608 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	68b8      	ldr	r0, [r7, #8]
 800e504:	f7ff f8c0 	bl	800d688 <BSP_SD_ReadBlocks_DMA>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d133      	bne.n	800e576 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e50e:	4b41      	ldr	r3, [pc, #260]	; (800e614 <SD_read+0x148>)
 800e510:	2200      	movs	r2, #0
 800e512:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e514:	f7f5 fa4e 	bl	80039b4 <HAL_GetTick>
 800e518:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e51a:	bf00      	nop
 800e51c:	4b3d      	ldr	r3, [pc, #244]	; (800e614 <SD_read+0x148>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d108      	bne.n	800e536 <SD_read+0x6a>
 800e524:	f7f5 fa46 	bl	80039b4 <HAL_GetTick>
 800e528:	4602      	mov	r2, r0
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	1ad3      	subs	r3, r2, r3
 800e52e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e532:	4293      	cmp	r3, r2
 800e534:	d9f2      	bls.n	800e51c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e536:	4b37      	ldr	r3, [pc, #220]	; (800e614 <SD_read+0x148>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d102      	bne.n	800e544 <SD_read+0x78>
      {
        res = RES_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	77fb      	strb	r3, [r7, #31]
 800e542:	e061      	b.n	800e608 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800e544:	4b33      	ldr	r3, [pc, #204]	; (800e614 <SD_read+0x148>)
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e54a:	f7f5 fa33 	bl	80039b4 <HAL_GetTick>
 800e54e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e550:	e007      	b.n	800e562 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e552:	f7ff f8cd 	bl	800d6f0 <BSP_SD_GetCardState>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <SD_read+0x96>
          {
            res = RES_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e560:	e052      	b.n	800e608 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e562:	f7f5 fa27 	bl	80039b4 <HAL_GetTick>
 800e566:	4602      	mov	r2, r0
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e570:	4293      	cmp	r3, r2
 800e572:	d9ee      	bls.n	800e552 <SD_read+0x86>
 800e574:	e048      	b.n	800e608 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800e576:	2300      	movs	r3, #0
 800e578:	61bb      	str	r3, [r7, #24]
 800e57a:	e034      	b.n	800e5e6 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	607a      	str	r2, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	4619      	mov	r1, r3
 800e586:	4824      	ldr	r0, [pc, #144]	; (800e618 <SD_read+0x14c>)
 800e588:	f7ff f87e 	bl	800d688 <BSP_SD_ReadBlocks_DMA>
 800e58c:	4603      	mov	r3, r0
 800e58e:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e590:	7fbb      	ldrb	r3, [r7, #30]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d12c      	bne.n	800e5f0 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800e596:	4b1f      	ldr	r3, [pc, #124]	; (800e614 <SD_read+0x148>)
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800e59c:	f7f5 fa0a 	bl	80039b4 <HAL_GetTick>
 800e5a0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5a2:	bf00      	nop
 800e5a4:	4b1b      	ldr	r3, [pc, #108]	; (800e614 <SD_read+0x148>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d108      	bne.n	800e5be <SD_read+0xf2>
 800e5ac:	f7f5 fa02 	bl	80039b4 <HAL_GetTick>
 800e5b0:	4602      	mov	r2, r0
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d9f2      	bls.n	800e5a4 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800e5be:	4b15      	ldr	r3, [pc, #84]	; (800e614 <SD_read+0x148>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d016      	beq.n	800e5f4 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	4a13      	ldr	r2, [pc, #76]	; (800e618 <SD_read+0x14c>)
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	f001 fa56 	bl	800fa84 <memcpy>
          buff += BLOCKSIZE;
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e5de:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	61bb      	str	r3, [r7, #24]
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d8c6      	bhi.n	800e57c <SD_read+0xb0>
 800e5ee:	e002      	b.n	800e5f6 <SD_read+0x12a>
        }
        else
        {
          break;
 800e5f0:	bf00      	nop
 800e5f2:	e000      	b.n	800e5f6 <SD_read+0x12a>
            break;
 800e5f4:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d104      	bne.n	800e608 <SD_read+0x13c>
 800e5fe:	7fbb      	ldrb	r3, [r7, #30]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d101      	bne.n	800e608 <SD_read+0x13c>
        res = RES_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800e608:	7ffb      	ldrb	r3, [r7, #31]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3720      	adds	r7, #32
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	200009cc 	.word	0x200009cc
 800e618:	200007c8 	.word	0x200007c8

0800e61c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af00      	add	r7, sp, #0
 800e622:	60b9      	str	r1, [r7, #8]
 800e624:	607a      	str	r2, [r7, #4]
 800e626:	603b      	str	r3, [r7, #0]
 800e628:	4603      	mov	r3, r0
 800e62a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e62c:	2301      	movs	r3, #1
 800e62e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800e630:	4b4c      	ldr	r3, [pc, #304]	; (800e764 <SD_write+0x148>)
 800e632:	2200      	movs	r2, #0
 800e634:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e636:	f247 5030 	movw	r0, #30000	; 0x7530
 800e63a:	f7ff fee2 	bl	800e402 <SD_CheckStatusWithTimeout>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	da01      	bge.n	800e648 <SD_write+0x2c>
  {
    return res;
 800e644:	7ffb      	ldrb	r3, [r7, #31]
 800e646:	e088      	b.n	800e75a <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	f003 0303 	and.w	r3, r3, #3
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f040 8082 	bne.w	800e758 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	6879      	ldr	r1, [r7, #4]
 800e658:	68b8      	ldr	r0, [r7, #8]
 800e65a:	f7ff f82f 	bl	800d6bc <BSP_SD_WriteBlocks_DMA>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d130      	bne.n	800e6c6 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e664:	f7f5 f9a6 	bl	80039b4 <HAL_GetTick>
 800e668:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e66a:	bf00      	nop
 800e66c:	4b3d      	ldr	r3, [pc, #244]	; (800e764 <SD_write+0x148>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d108      	bne.n	800e686 <SD_write+0x6a>
 800e674:	f7f5 f99e 	bl	80039b4 <HAL_GetTick>
 800e678:	4602      	mov	r2, r0
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e682:	4293      	cmp	r3, r2
 800e684:	d9f2      	bls.n	800e66c <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e686:	4b37      	ldr	r3, [pc, #220]	; (800e764 <SD_write+0x148>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d102      	bne.n	800e694 <SD_write+0x78>
      {
        res = RES_ERROR;
 800e68e:	2301      	movs	r3, #1
 800e690:	77fb      	strb	r3, [r7, #31]
 800e692:	e061      	b.n	800e758 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800e694:	4b33      	ldr	r3, [pc, #204]	; (800e764 <SD_write+0x148>)
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e69a:	f7f5 f98b 	bl	80039b4 <HAL_GetTick>
 800e69e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6a0:	e007      	b.n	800e6b2 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6a2:	f7ff f825 	bl	800d6f0 <BSP_SD_GetCardState>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <SD_write+0x96>
          {
            res = RES_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	77fb      	strb	r3, [r7, #31]
            break;
 800e6b0:	e052      	b.n	800e758 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6b2:	f7f5 f97f 	bl	80039b4 <HAL_GetTick>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d9ee      	bls.n	800e6a2 <SD_write+0x86>
 800e6c4:	e048      	b.n	800e758 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	61bb      	str	r3, [r7, #24]
 800e6ca:	e034      	b.n	800e736 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800e6cc:	4b25      	ldr	r3, [pc, #148]	; (800e764 <SD_write+0x148>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4822      	ldr	r0, [pc, #136]	; (800e768 <SD_write+0x14c>)
 800e6de:	f7fe ffed 	bl	800d6bc <BSP_SD_WriteBlocks_DMA>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e6e6:	7fbb      	ldrb	r3, [r7, #30]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d129      	bne.n	800e740 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800e6ec:	f7f5 f962 	bl	80039b4 <HAL_GetTick>
 800e6f0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e6f2:	bf00      	nop
 800e6f4:	4b1b      	ldr	r3, [pc, #108]	; (800e764 <SD_write+0x148>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d108      	bne.n	800e70e <SD_write+0xf2>
 800e6fc:	f7f5 f95a 	bl	80039b4 <HAL_GetTick>
 800e700:	4602      	mov	r2, r0
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	f247 522f 	movw	r2, #29999	; 0x752f
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d9f2      	bls.n	800e6f4 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800e70e:	4b15      	ldr	r3, [pc, #84]	; (800e764 <SD_write+0x148>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d016      	beq.n	800e744 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	4a13      	ldr	r2, [pc, #76]	; (800e768 <SD_write+0x14c>)
 800e71a:	4618      	mov	r0, r3
 800e71c:	4611      	mov	r1, r2
 800e71e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e722:	461a      	mov	r2, r3
 800e724:	f001 f9ae 	bl	800fa84 <memcpy>
          buff += BLOCKSIZE;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e72e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	3301      	adds	r3, #1
 800e734:	61bb      	str	r3, [r7, #24]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d8c6      	bhi.n	800e6cc <SD_write+0xb0>
 800e73e:	e002      	b.n	800e746 <SD_write+0x12a>
        }
        else
        {
          break;
 800e740:	bf00      	nop
 800e742:	e000      	b.n	800e746 <SD_write+0x12a>
            break;
 800e744:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d104      	bne.n	800e758 <SD_write+0x13c>
 800e74e:	7fbb      	ldrb	r3, [r7, #30]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d101      	bne.n	800e758 <SD_write+0x13c>
        res = RES_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800e758:	7ffb      	ldrb	r3, [r7, #31]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3720      	adds	r7, #32
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	200009c8 	.word	0x200009c8
 800e768:	200007c8 	.word	0x200007c8

0800e76c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08c      	sub	sp, #48	; 0x30
 800e770:	af00      	add	r7, sp, #0
 800e772:	4603      	mov	r3, r0
 800e774:	603a      	str	r2, [r7, #0]
 800e776:	71fb      	strb	r3, [r7, #7]
 800e778:	460b      	mov	r3, r1
 800e77a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e77c:	2301      	movs	r3, #1
 800e77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e782:	4b25      	ldr	r3, [pc, #148]	; (800e818 <SD_ioctl+0xac>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	b2db      	uxtb	r3, r3
 800e788:	f003 0301 	and.w	r3, r3, #1
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d001      	beq.n	800e794 <SD_ioctl+0x28>
 800e790:	2303      	movs	r3, #3
 800e792:	e03c      	b.n	800e80e <SD_ioctl+0xa2>

  switch (cmd)
 800e794:	79bb      	ldrb	r3, [r7, #6]
 800e796:	2b03      	cmp	r3, #3
 800e798:	d834      	bhi.n	800e804 <SD_ioctl+0x98>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <SD_ioctl+0x34>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e7b1 	.word	0x0800e7b1
 800e7a4:	0800e7b9 	.word	0x0800e7b9
 800e7a8:	0800e7d1 	.word	0x0800e7d1
 800e7ac:	0800e7eb 	.word	0x0800e7eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7b6:	e028      	b.n	800e80a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7b8:	f107 030c 	add.w	r3, r7, #12
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fe ffa7 	bl	800d710 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7ce:	e01c      	b.n	800e80a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7d0:	f107 030c 	add.w	r3, r7, #12
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe ff9b 	bl	800d710 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e7e8:	e00f      	b.n	800e80a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e7ea:	f107 030c 	add.w	r3, r7, #12
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe ff8e 	bl	800d710 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	0a5a      	lsrs	r2, r3, #9
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e802:	e002      	b.n	800e80a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e804:	2304      	movs	r3, #4
 800e806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e80a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3730      	adds	r7, #48	; 0x30
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	20000158 	.word	0x20000158

0800e81c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800e820:	4b03      	ldr	r3, [pc, #12]	; (800e830 <BSP_SD_WriteCpltCallback+0x14>)
 800e822:	2201      	movs	r2, #1
 800e824:	601a      	str	r2, [r3, #0]
}
 800e826:	bf00      	nop
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr
 800e830:	200009c8 	.word	0x200009c8

0800e834 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e834:	b480      	push	{r7}
 800e836:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e838:	4b03      	ldr	r3, [pc, #12]	; (800e848 <BSP_SD_ReadCpltCallback+0x14>)
 800e83a:	2201      	movs	r2, #1
 800e83c:	601a      	str	r2, [r3, #0]
}
 800e83e:	bf00      	nop
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	200009cc 	.word	0x200009cc

0800e84c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e852:	2300      	movs	r3, #0
 800e854:	607b      	str	r3, [r7, #4]
 800e856:	4b10      	ldr	r3, [pc, #64]	; (800e898 <HAL_MspInit+0x4c>)
 800e858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e85a:	4a0f      	ldr	r2, [pc, #60]	; (800e898 <HAL_MspInit+0x4c>)
 800e85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e860:	6453      	str	r3, [r2, #68]	; 0x44
 800e862:	4b0d      	ldr	r3, [pc, #52]	; (800e898 <HAL_MspInit+0x4c>)
 800e864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e86a:	607b      	str	r3, [r7, #4]
 800e86c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e86e:	2300      	movs	r3, #0
 800e870:	603b      	str	r3, [r7, #0]
 800e872:	4b09      	ldr	r3, [pc, #36]	; (800e898 <HAL_MspInit+0x4c>)
 800e874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e876:	4a08      	ldr	r2, [pc, #32]	; (800e898 <HAL_MspInit+0x4c>)
 800e878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e87c:	6413      	str	r3, [r2, #64]	; 0x40
 800e87e:	4b06      	ldr	r3, [pc, #24]	; (800e898 <HAL_MspInit+0x4c>)
 800e880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e886:	603b      	str	r3, [r7, #0]
 800e888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e88a:	bf00      	nop
 800e88c:	370c      	adds	r7, #12
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	40023800 	.word	0x40023800

0800e89c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08a      	sub	sp, #40	; 0x28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8a4:	f107 0314 	add.w	r3, r7, #20
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	605a      	str	r2, [r3, #4]
 800e8ae:	609a      	str	r2, [r3, #8]
 800e8b0:	60da      	str	r2, [r3, #12]
 800e8b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a19      	ldr	r2, [pc, #100]	; (800e920 <HAL_I2C_MspInit+0x84>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d12b      	bne.n	800e916 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8be:	2300      	movs	r3, #0
 800e8c0:	613b      	str	r3, [r7, #16]
 800e8c2:	4b18      	ldr	r3, [pc, #96]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	4a17      	ldr	r2, [pc, #92]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e8c8:	f043 0302 	orr.w	r3, r3, #2
 800e8cc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8ce:	4b15      	ldr	r3, [pc, #84]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	613b      	str	r3, [r7, #16]
 800e8d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800e8da:	23c0      	movs	r3, #192	; 0xc0
 800e8dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e8de:	2312      	movs	r3, #18
 800e8e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8e6:	2303      	movs	r3, #3
 800e8e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e8ea:	2304      	movs	r3, #4
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8ee:	f107 0314 	add.w	r3, r7, #20
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	480c      	ldr	r0, [pc, #48]	; (800e928 <HAL_I2C_MspInit+0x8c>)
 800e8f6:	f7f5 fd35 	bl	8004364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	4b09      	ldr	r3, [pc, #36]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e902:	4a08      	ldr	r2, [pc, #32]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e908:	6413      	str	r3, [r2, #64]	; 0x40
 800e90a:	4b06      	ldr	r3, [pc, #24]	; (800e924 <HAL_I2C_MspInit+0x88>)
 800e90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e916:	bf00      	nop
 800e918:	3728      	adds	r7, #40	; 0x28
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	40005400 	.word	0x40005400
 800e924:	40023800 	.word	0x40023800
 800e928:	40020400 	.word	0x40020400

0800e92c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a05      	ldr	r2, [pc, #20]	; (800e950 <HAL_RTC_MspInit+0x24>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d102      	bne.n	800e944 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e93e:	4b05      	ldr	r3, [pc, #20]	; (800e954 <HAL_RTC_MspInit+0x28>)
 800e940:	2201      	movs	r2, #1
 800e942:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	40002800 	.word	0x40002800
 800e954:	42470e3c 	.word	0x42470e3c

0800e958 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e960:	f107 0314 	add.w	r3, r7, #20
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	605a      	str	r2, [r3, #4]
 800e96a:	609a      	str	r2, [r3, #8]
 800e96c:	60da      	str	r2, [r3, #12]
 800e96e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a70      	ldr	r2, [pc, #448]	; (800eb38 <HAL_SD_MspInit+0x1e0>)
 800e976:	4293      	cmp	r3, r2
 800e978:	f040 80da 	bne.w	800eb30 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e97c:	2300      	movs	r3, #0
 800e97e:	613b      	str	r3, [r7, #16]
 800e980:	4b6e      	ldr	r3, [pc, #440]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e984:	4a6d      	ldr	r2, [pc, #436]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e986:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e98a:	6453      	str	r3, [r2, #68]	; 0x44
 800e98c:	4b6b      	ldr	r3, [pc, #428]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e994:	613b      	str	r3, [r7, #16]
 800e996:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	4b67      	ldr	r3, [pc, #412]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a0:	4a66      	ldr	r2, [pc, #408]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e9a2:	f043 0304 	orr.w	r3, r3, #4
 800e9a6:	6313      	str	r3, [r2, #48]	; 0x30
 800e9a8:	4b64      	ldr	r3, [pc, #400]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ac:	f003 0304 	and.w	r3, r3, #4
 800e9b0:	60fb      	str	r3, [r7, #12]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	4b60      	ldr	r3, [pc, #384]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9bc:	4a5f      	ldr	r2, [pc, #380]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e9be:	f043 0308 	orr.w	r3, r3, #8
 800e9c2:	6313      	str	r3, [r2, #48]	; 0x30
 800e9c4:	4b5d      	ldr	r3, [pc, #372]	; (800eb3c <HAL_SD_MspInit+0x1e4>)
 800e9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9c8:	f003 0308 	and.w	r3, r3, #8
 800e9cc:	60bb      	str	r3, [r7, #8]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800e9d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e9d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9e6:	f107 0314 	add.w	r3, r7, #20
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	4854      	ldr	r0, [pc, #336]	; (800eb40 <HAL_SD_MspInit+0x1e8>)
 800e9ee:	f7f5 fcb9 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e9f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e9f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea00:	2303      	movs	r3, #3
 800ea02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800ea04:	230c      	movs	r3, #12
 800ea06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea08:	f107 0314 	add.w	r3, r7, #20
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	484c      	ldr	r0, [pc, #304]	; (800eb40 <HAL_SD_MspInit+0x1e8>)
 800ea10:	f7f5 fca8 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ea14:	2304      	movs	r3, #4
 800ea16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea18:	2302      	movs	r3, #2
 800ea1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea20:	2303      	movs	r3, #3
 800ea22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800ea24:	230c      	movs	r3, #12
 800ea26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ea28:	f107 0314 	add.w	r3, r7, #20
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	4845      	ldr	r0, [pc, #276]	; (800eb44 <HAL_SD_MspInit+0x1ec>)
 800ea30:	f7f5 fc98 	bl	8004364 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800ea34:	4b44      	ldr	r3, [pc, #272]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea36:	4a45      	ldr	r2, [pc, #276]	; (800eb4c <HAL_SD_MspInit+0x1f4>)
 800ea38:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800ea3a:	4b43      	ldr	r3, [pc, #268]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ea40:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ea42:	4b41      	ldr	r3, [pc, #260]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ea48:	4b3f      	ldr	r3, [pc, #252]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ea4e:	4b3e      	ldr	r3, [pc, #248]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea54:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ea56:	4b3c      	ldr	r3, [pc, #240]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea5c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ea5e:	4b3a      	ldr	r3, [pc, #232]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ea64:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800ea66:	4b38      	ldr	r3, [pc, #224]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea68:	2220      	movs	r2, #32
 800ea6a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ea6c:	4b36      	ldr	r3, [pc, #216]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea6e:	2200      	movs	r2, #0
 800ea70:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ea72:	4b35      	ldr	r3, [pc, #212]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea74:	2204      	movs	r2, #4
 800ea76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800ea78:	4b33      	ldr	r3, [pc, #204]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea7a:	2203      	movs	r2, #3
 800ea7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800ea7e:	4b32      	ldr	r3, [pc, #200]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ea84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800ea86:	4b30      	ldr	r3, [pc, #192]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ea8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800ea8e:	482e      	ldr	r0, [pc, #184]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800ea90:	f7f5 f8d0 	bl	8003c34 <HAL_DMA_Init>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800ea9a:	f7ff fcab 	bl	800e3f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800eaa2:	63da      	str	r2, [r3, #60]	; 0x3c
 800eaa4:	4a28      	ldr	r2, [pc, #160]	; (800eb48 <HAL_SD_MspInit+0x1f0>)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800eaaa:	4b29      	ldr	r3, [pc, #164]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eaac:	4a29      	ldr	r2, [pc, #164]	; (800eb54 <HAL_SD_MspInit+0x1fc>)
 800eaae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800eab0:	4b27      	ldr	r3, [pc, #156]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eab2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eab6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eab8:	4b25      	ldr	r3, [pc, #148]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eaba:	2240      	movs	r2, #64	; 0x40
 800eabc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eabe:	4b24      	ldr	r3, [pc, #144]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eac4:	4b22      	ldr	r3, [pc, #136]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eaca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800eacc:	4b20      	ldr	r3, [pc, #128]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eace:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ead2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ead4:	4b1e      	ldr	r3, [pc, #120]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800ead6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800eada:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800eadc:	4b1c      	ldr	r3, [pc, #112]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eade:	2220      	movs	r2, #32
 800eae0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800eae2:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800eae8:	4b19      	ldr	r3, [pc, #100]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eaea:	2204      	movs	r2, #4
 800eaec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800eaee:	4b18      	ldr	r3, [pc, #96]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eaf0:	2203      	movs	r2, #3
 800eaf2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800eaf4:	4b16      	ldr	r3, [pc, #88]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eaf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800eafa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800eafc:	4b14      	ldr	r3, [pc, #80]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eafe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eb02:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800eb04:	4812      	ldr	r0, [pc, #72]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eb06:	f7f5 f895 	bl	8003c34 <HAL_DMA_Init>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d001      	beq.n	800eb14 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800eb10:	f7ff fc70 	bl	800e3f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a0e      	ldr	r2, [pc, #56]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eb18:	641a      	str	r2, [r3, #64]	; 0x40
 800eb1a:	4a0d      	ldr	r2, [pc, #52]	; (800eb50 <HAL_SD_MspInit+0x1f8>)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800eb20:	2200      	movs	r2, #0
 800eb22:	2100      	movs	r1, #0
 800eb24:	2031      	movs	r0, #49	; 0x31
 800eb26:	f7f5 f84e 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800eb2a:	2031      	movs	r0, #49	; 0x31
 800eb2c:	f7f5 f867 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800eb30:	bf00      	nop
 800eb32:	3728      	adds	r7, #40	; 0x28
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	40012c00 	.word	0x40012c00
 800eb3c:	40023800 	.word	0x40023800
 800eb40:	40020800 	.word	0x40020800
 800eb44:	40020c00 	.word	0x40020c00
 800eb48:	2000657c 	.word	0x2000657c
 800eb4c:	40026458 	.word	0x40026458
 800eb50:	20006710 	.word	0x20006710
 800eb54:	400264a0 	.word	0x400264a0

0800eb58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08a      	sub	sp, #40	; 0x28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb60:	f107 0314 	add.w	r3, r7, #20
 800eb64:	2200      	movs	r2, #0
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	605a      	str	r2, [r3, #4]
 800eb6a:	609a      	str	r2, [r3, #8]
 800eb6c:	60da      	str	r2, [r3, #12]
 800eb6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a19      	ldr	r2, [pc, #100]	; (800ebdc <HAL_SPI_MspInit+0x84>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d12b      	bne.n	800ebd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	613b      	str	r3, [r7, #16]
 800eb7e:	4b18      	ldr	r3, [pc, #96]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb82:	4a17      	ldr	r2, [pc, #92]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eb84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eb88:	6453      	str	r3, [r2, #68]	; 0x44
 800eb8a:	4b15      	ldr	r3, [pc, #84]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800eb92:	613b      	str	r3, [r7, #16]
 800eb94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb96:	2300      	movs	r3, #0
 800eb98:	60fb      	str	r3, [r7, #12]
 800eb9a:	4b11      	ldr	r3, [pc, #68]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9e:	4a10      	ldr	r2, [pc, #64]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eba0:	f043 0302 	orr.w	r3, r3, #2
 800eba4:	6313      	str	r3, [r2, #48]	; 0x30
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <HAL_SPI_MspInit+0x88>)
 800eba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebaa:	f003 0302 	and.w	r3, r3, #2
 800ebae:	60fb      	str	r3, [r7, #12]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800ebb2:	2338      	movs	r3, #56	; 0x38
 800ebb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ebc2:	2305      	movs	r3, #5
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ebc6:	f107 0314 	add.w	r3, r7, #20
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <HAL_SPI_MspInit+0x8c>)
 800ebce:	f7f5 fbc9 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ebd2:	bf00      	nop
 800ebd4:	3728      	adds	r7, #40	; 0x28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	40013000 	.word	0x40013000
 800ebe0:	40023800 	.word	0x40023800
 800ebe4:	40020400 	.word	0x40020400

0800ebe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b087      	sub	sp, #28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebf8:	d10e      	bne.n	800ec18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	617b      	str	r3, [r7, #20]
 800ebfe:	4b1d      	ldr	r3, [pc, #116]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec02:	4a1c      	ldr	r2, [pc, #112]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec04:	f043 0301 	orr.w	r3, r3, #1
 800ec08:	6413      	str	r3, [r2, #64]	; 0x40
 800ec0a:	4b1a      	ldr	r3, [pc, #104]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec0e:	f003 0301 	and.w	r3, r3, #1
 800ec12:	617b      	str	r3, [r7, #20]
 800ec14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800ec16:	e026      	b.n	800ec66 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a16      	ldr	r2, [pc, #88]	; (800ec78 <HAL_TIM_Base_MspInit+0x90>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d10e      	bne.n	800ec40 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ec22:	2300      	movs	r3, #0
 800ec24:	613b      	str	r3, [r7, #16]
 800ec26:	4b13      	ldr	r3, [pc, #76]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2a:	4a12      	ldr	r2, [pc, #72]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec2c:	f043 0302 	orr.w	r3, r3, #2
 800ec30:	6413      	str	r3, [r2, #64]	; 0x40
 800ec32:	4b10      	ldr	r3, [pc, #64]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec36:	f003 0302 	and.w	r3, r3, #2
 800ec3a:	613b      	str	r3, [r7, #16]
 800ec3c:	693b      	ldr	r3, [r7, #16]
}
 800ec3e:	e012      	b.n	800ec66 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <HAL_TIM_Base_MspInit+0x94>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d10d      	bne.n	800ec66 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	4b09      	ldr	r3, [pc, #36]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec52:	4a08      	ldr	r2, [pc, #32]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec54:	f043 0308 	orr.w	r3, r3, #8
 800ec58:	6413      	str	r3, [r2, #64]	; 0x40
 800ec5a:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <HAL_TIM_Base_MspInit+0x8c>)
 800ec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5e:	f003 0308 	and.w	r3, r3, #8
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	68fb      	ldr	r3, [r7, #12]
}
 800ec66:	bf00      	nop
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	40023800 	.word	0x40023800
 800ec78:	40000400 	.word	0x40000400
 800ec7c:	40000c00 	.word	0x40000c00

0800ec80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08a      	sub	sp, #40	; 0x28
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec88:	f107 0314 	add.w	r3, r7, #20
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	601a      	str	r2, [r3, #0]
 800ec90:	605a      	str	r2, [r3, #4]
 800ec92:	609a      	str	r2, [r3, #8]
 800ec94:	60da      	str	r2, [r3, #12]
 800ec96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a24      	ldr	r2, [pc, #144]	; (800ed30 <HAL_TIM_MspPostInit+0xb0>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d11e      	bne.n	800ece0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eca2:	2300      	movs	r3, #0
 800eca4:	613b      	str	r3, [r7, #16]
 800eca6:	4b23      	ldr	r3, [pc, #140]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800eca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecaa:	4a22      	ldr	r2, [pc, #136]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800ecac:	f043 0302 	orr.w	r3, r3, #2
 800ecb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb2:	4b20      	ldr	r3, [pc, #128]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800ecb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb6:	f003 0302 	and.w	r3, r3, #2
 800ecba:	613b      	str	r3, [r7, #16]
 800ecbc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 800ecbe:	2303      	movs	r3, #3
 800ecc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecc2:	2302      	movs	r3, #2
 800ecc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ecca:	2300      	movs	r3, #0
 800eccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ecce:	2302      	movs	r3, #2
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ecd2:	f107 0314 	add.w	r3, r7, #20
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	4817      	ldr	r0, [pc, #92]	; (800ed38 <HAL_TIM_MspPostInit+0xb8>)
 800ecda:	f7f5 fb43 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800ecde:	e022      	b.n	800ed26 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	4a15      	ldr	r2, [pc, #84]	; (800ed3c <HAL_TIM_MspPostInit+0xbc>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d11d      	bne.n	800ed26 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecea:	2300      	movs	r3, #0
 800ecec:	60fb      	str	r3, [r7, #12]
 800ecee:	4b11      	ldr	r3, [pc, #68]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800ecf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf2:	4a10      	ldr	r2, [pc, #64]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800ecf4:	f043 0301 	orr.w	r3, r3, #1
 800ecf8:	6313      	str	r3, [r2, #48]	; 0x30
 800ecfa:	4b0e      	ldr	r3, [pc, #56]	; (800ed34 <HAL_TIM_MspPostInit+0xb4>)
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800ed06:	230a      	movs	r3, #10
 800ed08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed12:	2300      	movs	r3, #0
 800ed14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ed16:	2302      	movs	r3, #2
 800ed18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed1a:	f107 0314 	add.w	r3, r7, #20
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4807      	ldr	r0, [pc, #28]	; (800ed40 <HAL_TIM_MspPostInit+0xc0>)
 800ed22:	f7f5 fb1f 	bl	8004364 <HAL_GPIO_Init>
}
 800ed26:	bf00      	nop
 800ed28:	3728      	adds	r7, #40	; 0x28
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	40000400 	.word	0x40000400
 800ed34:	40023800 	.word	0x40023800
 800ed38:	40020400 	.word	0x40020400
 800ed3c:	40000c00 	.word	0x40000c00
 800ed40:	40020000 	.word	0x40020000

0800ed44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08a      	sub	sp, #40	; 0x28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed4c:	f107 0314 	add.w	r3, r7, #20
 800ed50:	2200      	movs	r2, #0
 800ed52:	601a      	str	r2, [r3, #0]
 800ed54:	605a      	str	r2, [r3, #4]
 800ed56:	609a      	str	r2, [r3, #8]
 800ed58:	60da      	str	r2, [r3, #12]
 800ed5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a1d      	ldr	r2, [pc, #116]	; (800edd8 <HAL_UART_MspInit+0x94>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d134      	bne.n	800edd0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ed66:	2300      	movs	r3, #0
 800ed68:	613b      	str	r3, [r7, #16]
 800ed6a:	4b1c      	ldr	r3, [pc, #112]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6e:	4a1b      	ldr	r2, [pc, #108]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ed74:	6413      	str	r3, [r2, #64]	; 0x40
 800ed76:	4b19      	ldr	r3, [pc, #100]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed82:	2300      	movs	r3, #0
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	4b15      	ldr	r3, [pc, #84]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8a:	4a14      	ldr	r2, [pc, #80]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed8c:	f043 0302 	orr.w	r3, r3, #2
 800ed90:	6313      	str	r3, [r2, #48]	; 0x30
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <HAL_UART_MspInit+0x98>)
 800ed94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed96:	f003 0302 	and.w	r3, r3, #2
 800ed9a:	60fb      	str	r3, [r7, #12]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800ed9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800eda2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda4:	2302      	movs	r3, #2
 800eda6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eda8:	2301      	movs	r3, #1
 800edaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edac:	2303      	movs	r3, #3
 800edae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800edb0:	2307      	movs	r3, #7
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edb4:	f107 0314 	add.w	r3, r7, #20
 800edb8:	4619      	mov	r1, r3
 800edba:	4809      	ldr	r0, [pc, #36]	; (800ede0 <HAL_UART_MspInit+0x9c>)
 800edbc:	f7f5 fad2 	bl	8004364 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800edc0:	2200      	movs	r2, #0
 800edc2:	2100      	movs	r1, #0
 800edc4:	2027      	movs	r0, #39	; 0x27
 800edc6:	f7f4 fefe 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800edca:	2027      	movs	r0, #39	; 0x27
 800edcc:	f7f4 ff17 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800edd0:	bf00      	nop
 800edd2:	3728      	adds	r7, #40	; 0x28
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	40004800 	.word	0x40004800
 800eddc:	40023800 	.word	0x40023800
 800ede0:	40020400 	.word	0x40020400

0800ede4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ede4:	b480      	push	{r7}
 800ede6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ede8:	bf00      	nop
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800edf2:	b480      	push	{r7}
 800edf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800edf6:	e7fe      	b.n	800edf6 <HardFault_Handler+0x4>

0800edf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800edf8:	b480      	push	{r7}
 800edfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800edfc:	e7fe      	b.n	800edfc <MemManage_Handler+0x4>

0800edfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800edfe:	b480      	push	{r7}
 800ee00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ee02:	e7fe      	b.n	800ee02 <BusFault_Handler+0x4>

0800ee04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ee04:	b480      	push	{r7}
 800ee06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ee08:	e7fe      	b.n	800ee08 <UsageFault_Handler+0x4>

0800ee0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ee0e:	bf00      	nop
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ee1c:	bf00      	nop
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr

0800ee26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ee26:	b480      	push	{r7}
 800ee28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ee2a:	bf00      	nop
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ee38:	f7f4 fda8 	bl	800398c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ee3c:	bf00      	nop
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ee44:	4802      	ldr	r0, [pc, #8]	; (800ee50 <USART3_IRQHandler+0x10>)
 800ee46:	f7fa fbf5 	bl	8009634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ee4a:	bf00      	nop
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	200065dc 	.word	0x200065dc

0800ee54 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800ee58:	4802      	ldr	r0, [pc, #8]	; (800ee64 <SDIO_IRQHandler+0x10>)
 800ee5a:	f7f8 fd49 	bl	80078f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800ee5e:	bf00      	nop
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20006770 	.word	0x20006770

0800ee68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800ee6c:	4802      	ldr	r0, [pc, #8]	; (800ee78 <DMA2_Stream3_IRQHandler+0x10>)
 800ee6e:	f7f5 f811 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800ee72:	bf00      	nop
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	2000657c 	.word	0x2000657c

0800ee7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ee80:	4802      	ldr	r0, [pc, #8]	; (800ee8c <OTG_FS_IRQHandler+0x10>)
 800ee82:	f7f6 fd0a 	bl	800589a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ee86:	bf00      	nop
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	2000788c 	.word	0x2000788c

0800ee90 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800ee94:	4802      	ldr	r0, [pc, #8]	; (800eea0 <DMA2_Stream6_IRQHandler+0x10>)
 800ee96:	f7f4 fffd 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ee9a:	bf00      	nop
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	20006710 	.word	0x20006710

0800eea4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800eeac:	4b11      	ldr	r3, [pc, #68]	; (800eef4 <_sbrk+0x50>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <_sbrk+0x16>
		heap_end = &end;
 800eeb4:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <_sbrk+0x50>)
 800eeb6:	4a10      	ldr	r2, [pc, #64]	; (800eef8 <_sbrk+0x54>)
 800eeb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800eeba:	4b0e      	ldr	r3, [pc, #56]	; (800eef4 <_sbrk+0x50>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800eec0:	4b0c      	ldr	r3, [pc, #48]	; (800eef4 <_sbrk+0x50>)
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4413      	add	r3, r2
 800eec8:	466a      	mov	r2, sp
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d907      	bls.n	800eede <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800eece:	f000 fd9f 	bl	800fa10 <__errno>
 800eed2:	4602      	mov	r2, r0
 800eed4:	230c      	movs	r3, #12
 800eed6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800eed8:	f04f 33ff 	mov.w	r3, #4294967295
 800eedc:	e006      	b.n	800eeec <_sbrk+0x48>
	}

	heap_end += incr;
 800eede:	4b05      	ldr	r3, [pc, #20]	; (800eef4 <_sbrk+0x50>)
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4413      	add	r3, r2
 800eee6:	4a03      	ldr	r2, [pc, #12]	; (800eef4 <_sbrk+0x50>)
 800eee8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800eeea:	68fb      	ldr	r3, [r7, #12]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	200009d0 	.word	0x200009d0
 800eef8:	20007e98 	.word	0x20007e98

0800eefc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ef00:	4b16      	ldr	r3, [pc, #88]	; (800ef5c <SystemInit+0x60>)
 800ef02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef06:	4a15      	ldr	r2, [pc, #84]	; (800ef5c <SystemInit+0x60>)
 800ef08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ef10:	4b13      	ldr	r3, [pc, #76]	; (800ef60 <SystemInit+0x64>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a12      	ldr	r2, [pc, #72]	; (800ef60 <SystemInit+0x64>)
 800ef16:	f043 0301 	orr.w	r3, r3, #1
 800ef1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ef1c:	4b10      	ldr	r3, [pc, #64]	; (800ef60 <SystemInit+0x64>)
 800ef1e:	2200      	movs	r2, #0
 800ef20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ef22:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <SystemInit+0x64>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a0e      	ldr	r2, [pc, #56]	; (800ef60 <SystemInit+0x64>)
 800ef28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ef2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ef32:	4b0b      	ldr	r3, [pc, #44]	; (800ef60 <SystemInit+0x64>)
 800ef34:	4a0b      	ldr	r2, [pc, #44]	; (800ef64 <SystemInit+0x68>)
 800ef36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ef38:	4b09      	ldr	r3, [pc, #36]	; (800ef60 <SystemInit+0x64>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a08      	ldr	r2, [pc, #32]	; (800ef60 <SystemInit+0x64>)
 800ef3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ef42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ef44:	4b06      	ldr	r3, [pc, #24]	; (800ef60 <SystemInit+0x64>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef4a:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <SystemInit+0x60>)
 800ef4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef50:	609a      	str	r2, [r3, #8]
#endif
}
 800ef52:	bf00      	nop
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	e000ed00 	.word	0xe000ed00
 800ef60:	40023800 	.word	0x40023800
 800ef64:	24003010 	.word	0x24003010

0800ef68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4912      	ldr	r1, [pc, #72]	; (800efb8 <MX_USB_DEVICE_Init+0x50>)
 800ef70:	4812      	ldr	r0, [pc, #72]	; (800efbc <MX_USB_DEVICE_Init+0x54>)
 800ef72:	f7fd faad 	bl	800c4d0 <USBD_Init>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef7c:	f7ff fa3a 	bl	800e3f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef80:	490f      	ldr	r1, [pc, #60]	; (800efc0 <MX_USB_DEVICE_Init+0x58>)
 800ef82:	480e      	ldr	r0, [pc, #56]	; (800efbc <MX_USB_DEVICE_Init+0x54>)
 800ef84:	f7fd facf 	bl	800c526 <USBD_RegisterClass>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef8e:	f7ff fa31 	bl	800e3f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef92:	490c      	ldr	r1, [pc, #48]	; (800efc4 <MX_USB_DEVICE_Init+0x5c>)
 800ef94:	4809      	ldr	r0, [pc, #36]	; (800efbc <MX_USB_DEVICE_Init+0x54>)
 800ef96:	f7fd f9fd 	bl	800c394 <USBD_CDC_RegisterInterface>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800efa0:	f7ff fa28 	bl	800e3f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800efa4:	4805      	ldr	r0, [pc, #20]	; (800efbc <MX_USB_DEVICE_Init+0x54>)
 800efa6:	f7fd fad8 	bl	800c55a <USBD_Start>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800efb0:	f7ff fa20 	bl	800e3f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800efb4:	bf00      	nop
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	20000170 	.word	0x20000170
 800efbc:	200009dc 	.word	0x200009dc
 800efc0:	20000014 	.word	0x20000014
 800efc4:	20000160 	.word	0x20000160

0800efc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efcc:	2200      	movs	r2, #0
 800efce:	4905      	ldr	r1, [pc, #20]	; (800efe4 <CDC_Init_FS+0x1c>)
 800efd0:	4805      	ldr	r0, [pc, #20]	; (800efe8 <CDC_Init_FS+0x20>)
 800efd2:	f7fd f9f6 	bl	800c3c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800efd6:	4905      	ldr	r1, [pc, #20]	; (800efec <CDC_Init_FS+0x24>)
 800efd8:	4803      	ldr	r0, [pc, #12]	; (800efe8 <CDC_Init_FS+0x20>)
 800efda:	f7fd fa0c 	bl	800c3f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800efde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	2000708c 	.word	0x2000708c
 800efe8:	200009dc 	.word	0x200009dc
 800efec:	2000688c 	.word	0x2000688c

0800eff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eff0:	b480      	push	{r7}
 800eff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	6039      	str	r1, [r7, #0]
 800f00a:	71fb      	strb	r3, [r7, #7]
 800f00c:	4613      	mov	r3, r2
 800f00e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800f010:	f107 0308 	add.w	r3, r7, #8
 800f014:	2200      	movs	r2, #0
 800f016:	601a      	str	r2, [r3, #0]
 800f018:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	2b23      	cmp	r3, #35	; 0x23
 800f020:	d87c      	bhi.n	800f11c <CDC_Control_FS+0x11c>
 800f022:	a201      	add	r2, pc, #4	; (adr r2, 800f028 <CDC_Control_FS+0x28>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f11d 	.word	0x0800f11d
 800f02c:	0800f11d 	.word	0x0800f11d
 800f030:	0800f11d 	.word	0x0800f11d
 800f034:	0800f11d 	.word	0x0800f11d
 800f038:	0800f11d 	.word	0x0800f11d
 800f03c:	0800f11d 	.word	0x0800f11d
 800f040:	0800f11d 	.word	0x0800f11d
 800f044:	0800f11d 	.word	0x0800f11d
 800f048:	0800f11d 	.word	0x0800f11d
 800f04c:	0800f11d 	.word	0x0800f11d
 800f050:	0800f11d 	.word	0x0800f11d
 800f054:	0800f11d 	.word	0x0800f11d
 800f058:	0800f11d 	.word	0x0800f11d
 800f05c:	0800f11d 	.word	0x0800f11d
 800f060:	0800f11d 	.word	0x0800f11d
 800f064:	0800f11d 	.word	0x0800f11d
 800f068:	0800f11d 	.word	0x0800f11d
 800f06c:	0800f11d 	.word	0x0800f11d
 800f070:	0800f11d 	.word	0x0800f11d
 800f074:	0800f11d 	.word	0x0800f11d
 800f078:	0800f11d 	.word	0x0800f11d
 800f07c:	0800f11d 	.word	0x0800f11d
 800f080:	0800f11d 	.word	0x0800f11d
 800f084:	0800f11d 	.word	0x0800f11d
 800f088:	0800f11d 	.word	0x0800f11d
 800f08c:	0800f11d 	.word	0x0800f11d
 800f090:	0800f11d 	.word	0x0800f11d
 800f094:	0800f11d 	.word	0x0800f11d
 800f098:	0800f11d 	.word	0x0800f11d
 800f09c:	0800f11d 	.word	0x0800f11d
 800f0a0:	0800f11d 	.word	0x0800f11d
 800f0a4:	0800f11d 	.word	0x0800f11d
 800f0a8:	0800f0b9 	.word	0x0800f0b9
 800f0ac:	0800f0e5 	.word	0x0800f0e5
 800f0b0:	0800f11d 	.word	0x0800f11d
 800f0b4:	0800f11d 	.word	0x0800f11d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	785b      	ldrb	r3, [r3, #1]
 800f0c2:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	789b      	ldrb	r3, [r3, #2]
 800f0c8:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	78db      	ldrb	r3, [r3, #3]
 800f0ce:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	791b      	ldrb	r3, [r3, #4]
 800f0d4:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	795b      	ldrb	r3, [r3, #5]
 800f0da:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	799b      	ldrb	r3, [r3, #6]
 800f0e0:	73bb      	strb	r3, [r7, #14]
        	break;
 800f0e2:	e01c      	b.n	800f11e <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800f0e4:	7a3a      	ldrb	r2, [r7, #8]
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	7a7a      	ldrb	r2, [r7, #9]
 800f0f0:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	3302      	adds	r3, #2
 800f0f6:	7aba      	ldrb	r2, [r7, #10]
 800f0f8:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	3303      	adds	r3, #3
 800f0fe:	7afa      	ldrb	r2, [r7, #11]
 800f100:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	3304      	adds	r3, #4
 800f106:	7b3a      	ldrb	r2, [r7, #12]
 800f108:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	3305      	adds	r3, #5
 800f10e:	7b7a      	ldrb	r2, [r7, #13]
 800f110:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	3306      	adds	r3, #6
 800f116:	7bba      	ldrb	r2, [r7, #14]
 800f118:	701a      	strb	r2, [r3, #0]
        	break;
 800f11a:	e000      	b.n	800f11e <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f11c:	bf00      	nop
  }

  return (USBD_OK);
 800f11e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f120:	4618      	mov	r0, r3
 800f122:	3714      	adds	r7, #20
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f136:	6879      	ldr	r1, [r7, #4]
 800f138:	4805      	ldr	r0, [pc, #20]	; (800f150 <CDC_Receive_FS+0x24>)
 800f13a:	f7fd f95c 	bl	800c3f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f13e:	4804      	ldr	r0, [pc, #16]	; (800f150 <CDC_Receive_FS+0x24>)
 800f140:	f7fd f99c 	bl	800c47c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f144:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	200009dc 	.word	0x200009dc

0800f154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f160:	2300      	movs	r3, #0
 800f162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f164:	4b0d      	ldr	r3, [pc, #52]	; (800f19c <CDC_Transmit_FS+0x48>)
 800f166:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f16a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f172:	2b00      	cmp	r3, #0
 800f174:	d001      	beq.n	800f17a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f176:	2301      	movs	r3, #1
 800f178:	e00b      	b.n	800f192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f17a:	887b      	ldrh	r3, [r7, #2]
 800f17c:	461a      	mov	r2, r3
 800f17e:	6879      	ldr	r1, [r7, #4]
 800f180:	4806      	ldr	r0, [pc, #24]	; (800f19c <CDC_Transmit_FS+0x48>)
 800f182:	f7fd f91e 	bl	800c3c2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f186:	4805      	ldr	r0, [pc, #20]	; (800f19c <CDC_Transmit_FS+0x48>)
 800f188:	f7fd f949 	bl	800c41e <USBD_CDC_TransmitPacket>
 800f18c:	4603      	mov	r3, r0
 800f18e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f190:	7bfb      	ldrb	r3, [r7, #15]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	200009dc 	.word	0x200009dc

0800f1a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b08a      	sub	sp, #40	; 0x28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1a8:	f107 0314 	add.w	r3, r7, #20
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	605a      	str	r2, [r3, #4]
 800f1b2:	609a      	str	r2, [r3, #8]
 800f1b4:	60da      	str	r2, [r3, #12]
 800f1b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1c0:	d13a      	bne.n	800f238 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	4b1e      	ldr	r3, [pc, #120]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ca:	4a1d      	ldr	r2, [pc, #116]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f1cc:	f043 0301 	orr.w	r3, r3, #1
 800f1d0:	6313      	str	r3, [r2, #48]	; 0x30
 800f1d2:	4b1b      	ldr	r3, [pc, #108]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	613b      	str	r3, [r7, #16]
 800f1dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800f1de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f1e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f1ec:	2303      	movs	r3, #3
 800f1ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f1f0:	230a      	movs	r3, #10
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1f4:	f107 0314 	add.w	r3, r7, #20
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	4812      	ldr	r0, [pc, #72]	; (800f244 <HAL_PCD_MspInit+0xa4>)
 800f1fc:	f7f5 f8b2 	bl	8004364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f200:	4b0f      	ldr	r3, [pc, #60]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f204:	4a0e      	ldr	r2, [pc, #56]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f20a:	6353      	str	r3, [r2, #52]	; 0x34
 800f20c:	2300      	movs	r3, #0
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f214:	4a0a      	ldr	r2, [pc, #40]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f21a:	6453      	str	r3, [r2, #68]	; 0x44
 800f21c:	4b08      	ldr	r3, [pc, #32]	; (800f240 <HAL_PCD_MspInit+0xa0>)
 800f21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f228:	2200      	movs	r2, #0
 800f22a:	2100      	movs	r1, #0
 800f22c:	2043      	movs	r0, #67	; 0x43
 800f22e:	f7f4 fcca 	bl	8003bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f232:	2043      	movs	r0, #67	; 0x43
 800f234:	f7f4 fce3 	bl	8003bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f238:	bf00      	nop
 800f23a:	3728      	adds	r7, #40	; 0x28
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	40023800 	.word	0x40023800
 800f244:	40020000 	.word	0x40020000

0800f248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f25c:	4619      	mov	r1, r3
 800f25e:	4610      	mov	r0, r2
 800f260:	f7fd f9c4 	bl	800c5ec <USBD_LL_SetupStage>
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f27e:	78fa      	ldrb	r2, [r7, #3]
 800f280:	6879      	ldr	r1, [r7, #4]
 800f282:	4613      	mov	r3, r2
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	1a9b      	subs	r3, r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	440b      	add	r3, r1
 800f28c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	78fb      	ldrb	r3, [r7, #3]
 800f294:	4619      	mov	r1, r3
 800f296:	f7fd f9f4 	bl	800c682 <USBD_LL_DataOutStage>
}
 800f29a:	bf00      	nop
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b082      	sub	sp, #8
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f2b4:	78fa      	ldrb	r2, [r7, #3]
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	1a9b      	subs	r3, r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	440b      	add	r3, r1
 800f2c2:	3348      	adds	r3, #72	; 0x48
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7fd fa4b 	bl	800c764 <USBD_LL_DataInStage>
}
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b082      	sub	sp, #8
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fd fb59 	bl	800c99c <USBD_LL_SOF>
}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d102      	bne.n	800f30c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f306:	2300      	movs	r3, #0
 800f308:	73fb      	strb	r3, [r7, #15]
 800f30a:	e008      	b.n	800f31e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	2b02      	cmp	r3, #2
 800f312:	d102      	bne.n	800f31a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f314:	2301      	movs	r3, #1
 800f316:	73fb      	strb	r3, [r7, #15]
 800f318:	e001      	b.n	800f31e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f31a:	f7ff f86b 	bl	800e3f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f324:	7bfa      	ldrb	r2, [r7, #15]
 800f326:	4611      	mov	r1, r2
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fd fb01 	bl	800c930 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f334:	4618      	mov	r0, r3
 800f336:	f7fd faba 	bl	800c8ae <USBD_LL_Reset>
}
 800f33a:	bf00      	nop
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f352:	4618      	mov	r0, r3
 800f354:	f7fd fafc 	bl	800c950 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	6812      	ldr	r2, [r2, #0]
 800f366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f36a:	f043 0301 	orr.w	r3, r3, #1
 800f36e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d005      	beq.n	800f384 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f378:	4b04      	ldr	r3, [pc, #16]	; (800f38c <HAL_PCD_SuspendCallback+0x48>)
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	4a03      	ldr	r2, [pc, #12]	; (800f38c <HAL_PCD_SuspendCallback+0x48>)
 800f37e:	f043 0306 	orr.w	r3, r3, #6
 800f382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f384:	bf00      	nop
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	e000ed00 	.word	0xe000ed00

0800f390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fd faeb 	bl	800c97a <USBD_LL_Resume>
}
 800f3a4:	bf00      	nop
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f3be:	78fa      	ldrb	r2, [r7, #3]
 800f3c0:	4611      	mov	r1, r2
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fd fb11 	bl	800c9ea <USBD_LL_IsoOUTIncomplete>
}
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f3e2:	78fa      	ldrb	r2, [r7, #3]
 800f3e4:	4611      	mov	r1, r2
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fd faf2 	bl	800c9d0 <USBD_LL_IsoINIncomplete>
}
 800f3ec:	bf00      	nop
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f402:	4618      	mov	r0, r3
 800f404:	f7fd fafe 	bl	800ca04 <USBD_LL_DevConnected>
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fd fafb 	bl	800ca1a <USBD_LL_DevDisconnected>
}
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d13c      	bne.n	800f4b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f43c:	4a20      	ldr	r2, [pc, #128]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a1e      	ldr	r2, [pc, #120]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f448:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f44c:	4b1c      	ldr	r3, [pc, #112]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f44e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f452:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f454:	4b1a      	ldr	r3, [pc, #104]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f456:	2204      	movs	r2, #4
 800f458:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f45a:	4b19      	ldr	r3, [pc, #100]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f45c:	2202      	movs	r2, #2
 800f45e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f460:	4b17      	ldr	r3, [pc, #92]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f462:	2200      	movs	r2, #0
 800f464:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f466:	4b16      	ldr	r3, [pc, #88]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f468:	2202      	movs	r2, #2
 800f46a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f46c:	4b14      	ldr	r3, [pc, #80]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f46e:	2200      	movs	r2, #0
 800f470:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f472:	4b13      	ldr	r3, [pc, #76]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f474:	2200      	movs	r2, #0
 800f476:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f478:	4b11      	ldr	r3, [pc, #68]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f47e:	4b10      	ldr	r3, [pc, #64]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f480:	2200      	movs	r2, #0
 800f482:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f484:	4b0e      	ldr	r3, [pc, #56]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f486:	2200      	movs	r2, #0
 800f488:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f48a:	480d      	ldr	r0, [pc, #52]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f48c:	f7f6 f8b5 	bl	80055fa <HAL_PCD_Init>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f496:	f7fe ffad 	bl	800e3f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f49a:	2180      	movs	r1, #128	; 0x80
 800f49c:	4808      	ldr	r0, [pc, #32]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f49e:	f7f7 fa1a 	bl	80068d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f4a2:	2240      	movs	r2, #64	; 0x40
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	4806      	ldr	r0, [pc, #24]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f4a8:	f7f7 f9ce 	bl	8006848 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f4ac:	2280      	movs	r2, #128	; 0x80
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	4803      	ldr	r0, [pc, #12]	; (800f4c0 <USBD_LL_Init+0x94>)
 800f4b2:	f7f7 f9c9 	bl	8006848 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	2000788c 	.word	0x2000788c

0800f4c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7f6 f9aa 	bl	8005834 <HAL_PCD_Start>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 f92e 	bl	800f748 <USBD_Get_USB_Status>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b084      	sub	sp, #16
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	4608      	mov	r0, r1
 800f504:	4611      	mov	r1, r2
 800f506:	461a      	mov	r2, r3
 800f508:	4603      	mov	r3, r0
 800f50a:	70fb      	strb	r3, [r7, #3]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70bb      	strb	r3, [r7, #2]
 800f510:	4613      	mov	r3, r2
 800f512:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f522:	78bb      	ldrb	r3, [r7, #2]
 800f524:	883a      	ldrh	r2, [r7, #0]
 800f526:	78f9      	ldrb	r1, [r7, #3]
 800f528:	f7f6 fd7f 	bl	800602a <HAL_PCD_EP_Open>
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	4618      	mov	r0, r3
 800f534:	f000 f908 	bl	800f748 <USBD_Get_USB_Status>
 800f538:	4603      	mov	r3, r0
 800f53a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}

0800f546 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b084      	sub	sp, #16
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	460b      	mov	r3, r1
 800f550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f560:	78fa      	ldrb	r2, [r7, #3]
 800f562:	4611      	mov	r1, r2
 800f564:	4618      	mov	r0, r3
 800f566:	f7f6 fdc8 	bl	80060fa <HAL_PCD_EP_Close>
 800f56a:	4603      	mov	r3, r0
 800f56c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
 800f570:	4618      	mov	r0, r3
 800f572:	f000 f8e9 	bl	800f748 <USBD_Get_USB_Status>
 800f576:	4603      	mov	r3, r0
 800f578:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f594:	2300      	movs	r3, #0
 800f596:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f59e:	78fa      	ldrb	r2, [r7, #3]
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7f6 fea0 	bl	80062e8 <HAL_PCD_EP_SetStall>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 f8ca 	bl	800f748 <USBD_Get_USB_Status>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5c2:	b580      	push	{r7, lr}
 800f5c4:	b084      	sub	sp, #16
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f5dc:	78fa      	ldrb	r2, [r7, #3]
 800f5de:	4611      	mov	r1, r2
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7f6 fee5 	bl	80063b0 <HAL_PCD_EP_ClrStall>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800f5ea:	7bfb      	ldrb	r3, [r7, #15]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f8ab 	bl	800f748 <USBD_Get_USB_Status>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800f5f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f600:	b480      	push	{r7}
 800f602:	b085      	sub	sp, #20
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	460b      	mov	r3, r1
 800f60a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f612:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	da0b      	bge.n	800f634 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f61c:	78fb      	ldrb	r3, [r7, #3]
 800f61e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f622:	68f9      	ldr	r1, [r7, #12]
 800f624:	4613      	mov	r3, r2
 800f626:	00db      	lsls	r3, r3, #3
 800f628:	1a9b      	subs	r3, r3, r2
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	440b      	add	r3, r1
 800f62e:	333e      	adds	r3, #62	; 0x3e
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	e00b      	b.n	800f64c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f634:	78fb      	ldrb	r3, [r7, #3]
 800f636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f63a:	68f9      	ldr	r1, [r7, #12]
 800f63c:	4613      	mov	r3, r2
 800f63e:	00db      	lsls	r3, r3, #3
 800f640:	1a9b      	subs	r3, r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	440b      	add	r3, r1
 800f646:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f64a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	460b      	mov	r3, r1
 800f662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f664:	2300      	movs	r3, #0
 800f666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f672:	78fa      	ldrb	r2, [r7, #3]
 800f674:	4611      	mov	r1, r2
 800f676:	4618      	mov	r0, r3
 800f678:	f7f6 fcb2 	bl	8005fe0 <HAL_PCD_SetAddress>
 800f67c:	4603      	mov	r3, r0
 800f67e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f680:	7bfb      	ldrb	r3, [r7, #15]
 800f682:	4618      	mov	r0, r3
 800f684:	f000 f860 	bl	800f748 <USBD_Get_USB_Status>
 800f688:	4603      	mov	r3, r0
 800f68a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f68c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f696:	b580      	push	{r7, lr}
 800f698:	b086      	sub	sp, #24
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	60f8      	str	r0, [r7, #12]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	72fb      	strb	r3, [r7, #11]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f6b8:	893b      	ldrh	r3, [r7, #8]
 800f6ba:	7af9      	ldrb	r1, [r7, #11]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	f7f6 fdc9 	bl	8006254 <HAL_PCD_EP_Transmit>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 f83d 	bl	800f748 <USBD_Get_USB_Status>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f6d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3718      	adds	r7, #24
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b086      	sub	sp, #24
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	607a      	str	r2, [r7, #4]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	72fb      	strb	r3, [r7, #11]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f6fe:	893b      	ldrh	r3, [r7, #8]
 800f700:	7af9      	ldrb	r1, [r7, #11]
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	f7f6 fd43 	bl	800618e <HAL_PCD_EP_Receive>
 800f708:	4603      	mov	r3, r0
 800f70a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800f70c:	7dfb      	ldrb	r3, [r7, #23]
 800f70e:	4618      	mov	r0, r3
 800f710:	f000 f81a 	bl	800f748 <USBD_Get_USB_Status>
 800f714:	4603      	mov	r3, r0
 800f716:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800f718:	7dbb      	ldrb	r3, [r7, #22]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3718      	adds	r7, #24
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b082      	sub	sp, #8
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
 800f72a:	460b      	mov	r3, r1
 800f72c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f734:	78fa      	ldrb	r2, [r7, #3]
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f7f6 fd73 	bl	8006224 <HAL_PCD_EP_GetRxCount>
 800f73e:	4603      	mov	r3, r0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d817      	bhi.n	800f78c <USBD_Get_USB_Status+0x44>
 800f75c:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <USBD_Get_USB_Status+0x1c>)
 800f75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f762:	bf00      	nop
 800f764:	0800f775 	.word	0x0800f775
 800f768:	0800f77b 	.word	0x0800f77b
 800f76c:	0800f781 	.word	0x0800f781
 800f770:	0800f787 	.word	0x0800f787
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	73fb      	strb	r3, [r7, #15]
    break;
 800f778:	e00b      	b.n	800f792 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f77a:	2302      	movs	r3, #2
 800f77c:	73fb      	strb	r3, [r7, #15]
    break;
 800f77e:	e008      	b.n	800f792 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f780:	2301      	movs	r3, #1
 800f782:	73fb      	strb	r3, [r7, #15]
    break;
 800f784:	e005      	b.n	800f792 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f786:	2302      	movs	r3, #2
 800f788:	73fb      	strb	r3, [r7, #15]
    break;
 800f78a:	e002      	b.n	800f792 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f78c:	2302      	movs	r3, #2
 800f78e:	73fb      	strb	r3, [r7, #15]
    break;
 800f790:	bf00      	nop
  }
  return usb_status;
 800f792:	7bfb      	ldrb	r3, [r7, #15]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	6039      	str	r1, [r7, #0]
 800f7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	2212      	movs	r2, #18
 800f7b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f7b2:	4b03      	ldr	r3, [pc, #12]	; (800f7c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	2000018c 	.word	0x2000018c

0800f7c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	6039      	str	r1, [r7, #0]
 800f7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	2204      	movs	r2, #4
 800f7d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f7d6:	4b03      	ldr	r3, [pc, #12]	; (800f7e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr
 800f7e4:	200001a0 	.word	0x200001a0

0800f7e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	6039      	str	r1, [r7, #0]
 800f7f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f7f4:	79fb      	ldrb	r3, [r7, #7]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d105      	bne.n	800f806 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	4907      	ldr	r1, [pc, #28]	; (800f81c <USBD_FS_ProductStrDescriptor+0x34>)
 800f7fe:	4808      	ldr	r0, [pc, #32]	; (800f820 <USBD_FS_ProductStrDescriptor+0x38>)
 800f800:	f7fd fde2 	bl	800d3c8 <USBD_GetString>
 800f804:	e004      	b.n	800f810 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f806:	683a      	ldr	r2, [r7, #0]
 800f808:	4904      	ldr	r1, [pc, #16]	; (800f81c <USBD_FS_ProductStrDescriptor+0x34>)
 800f80a:	4805      	ldr	r0, [pc, #20]	; (800f820 <USBD_FS_ProductStrDescriptor+0x38>)
 800f80c:	f7fd fddc 	bl	800d3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f810:	4b02      	ldr	r3, [pc, #8]	; (800f81c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f812:	4618      	mov	r0, r3
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	20007c94 	.word	0x20007c94
 800f820:	080151b0 	.word	0x080151b0

0800f824 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	4603      	mov	r3, r0
 800f82c:	6039      	str	r1, [r7, #0]
 800f82e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	4904      	ldr	r1, [pc, #16]	; (800f844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f834:	4804      	ldr	r0, [pc, #16]	; (800f848 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f836:	f7fd fdc7 	bl	800d3c8 <USBD_GetString>
  return USBD_StrDesc;
 800f83a:	4b02      	ldr	r3, [pc, #8]	; (800f844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	20007c94 	.word	0x20007c94
 800f848:	080151bc 	.word	0x080151bc

0800f84c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	6039      	str	r1, [r7, #0]
 800f856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	221a      	movs	r2, #26
 800f85c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f85e:	f000 f843 	bl	800f8e8 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800f862:	4b02      	ldr	r3, [pc, #8]	; (800f86c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}
 800f86c:	200001a4 	.word	0x200001a4

0800f870 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	6039      	str	r1, [r7, #0]
 800f87a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f87c:	79fb      	ldrb	r3, [r7, #7]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d105      	bne.n	800f88e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f882:	683a      	ldr	r2, [r7, #0]
 800f884:	4907      	ldr	r1, [pc, #28]	; (800f8a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f886:	4808      	ldr	r0, [pc, #32]	; (800f8a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f888:	f7fd fd9e 	bl	800d3c8 <USBD_GetString>
 800f88c:	e004      	b.n	800f898 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	4904      	ldr	r1, [pc, #16]	; (800f8a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f892:	4805      	ldr	r0, [pc, #20]	; (800f8a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f894:	f7fd fd98 	bl	800d3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f898:	4b02      	ldr	r3, [pc, #8]	; (800f8a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	20007c94 	.word	0x20007c94
 800f8a8:	080151d0 	.word	0x080151d0

0800f8ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	6039      	str	r1, [r7, #0]
 800f8b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d105      	bne.n	800f8ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	4907      	ldr	r1, [pc, #28]	; (800f8e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f8c2:	4808      	ldr	r0, [pc, #32]	; (800f8e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f8c4:	f7fd fd80 	bl	800d3c8 <USBD_GetString>
 800f8c8:	e004      	b.n	800f8d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f8ca:	683a      	ldr	r2, [r7, #0]
 800f8cc:	4904      	ldr	r1, [pc, #16]	; (800f8e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f8ce:	4805      	ldr	r0, [pc, #20]	; (800f8e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f8d0:	f7fd fd7a 	bl	800d3c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20007c94 	.word	0x20007c94
 800f8e4:	080151dc 	.word	0x080151dc

0800f8e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f8ee:	4b0f      	ldr	r3, [pc, #60]	; (800f92c <Get_SerialNum+0x44>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f8f4:	4b0e      	ldr	r3, [pc, #56]	; (800f930 <Get_SerialNum+0x48>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f8fa:	4b0e      	ldr	r3, [pc, #56]	; (800f934 <Get_SerialNum+0x4c>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4413      	add	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d009      	beq.n	800f922 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f90e:	2208      	movs	r2, #8
 800f910:	4909      	ldr	r1, [pc, #36]	; (800f938 <Get_SerialNum+0x50>)
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f000 f814 	bl	800f940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f918:	2204      	movs	r2, #4
 800f91a:	4908      	ldr	r1, [pc, #32]	; (800f93c <Get_SerialNum+0x54>)
 800f91c:	68b8      	ldr	r0, [r7, #8]
 800f91e:	f000 f80f 	bl	800f940 <IntToUnicode>
  }
}
 800f922:	bf00      	nop
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	1fff7a10 	.word	0x1fff7a10
 800f930:	1fff7a14 	.word	0x1fff7a14
 800f934:	1fff7a18 	.word	0x1fff7a18
 800f938:	200001a6 	.word	0x200001a6
 800f93c:	200001b6 	.word	0x200001b6

0800f940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f940:	b480      	push	{r7}
 800f942:	b087      	sub	sp, #28
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	4613      	mov	r3, r2
 800f94c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f952:	2300      	movs	r3, #0
 800f954:	75fb      	strb	r3, [r7, #23]
 800f956:	e027      	b.n	800f9a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	0f1b      	lsrs	r3, r3, #28
 800f95c:	2b09      	cmp	r3, #9
 800f95e:	d80b      	bhi.n	800f978 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	0f1b      	lsrs	r3, r3, #28
 800f964:	b2da      	uxtb	r2, r3
 800f966:	7dfb      	ldrb	r3, [r7, #23]
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	4619      	mov	r1, r3
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	440b      	add	r3, r1
 800f970:	3230      	adds	r2, #48	; 0x30
 800f972:	b2d2      	uxtb	r2, r2
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	e00a      	b.n	800f98e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	0f1b      	lsrs	r3, r3, #28
 800f97c:	b2da      	uxtb	r2, r3
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	4619      	mov	r1, r3
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	440b      	add	r3, r1
 800f988:	3237      	adds	r2, #55	; 0x37
 800f98a:	b2d2      	uxtb	r2, r2
 800f98c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	011b      	lsls	r3, r3, #4
 800f992:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f994:	7dfb      	ldrb	r3, [r7, #23]
 800f996:	005b      	lsls	r3, r3, #1
 800f998:	3301      	adds	r3, #1
 800f99a:	68ba      	ldr	r2, [r7, #8]
 800f99c:	4413      	add	r3, r2
 800f99e:	2200      	movs	r2, #0
 800f9a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f9a2:	7dfb      	ldrb	r3, [r7, #23]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	75fb      	strb	r3, [r7, #23]
 800f9a8:	7dfa      	ldrb	r2, [r7, #23]
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d3d3      	bcc.n	800f958 <IntToUnicode+0x18>
  }
}
 800f9b0:	bf00      	nop
 800f9b2:	371c      	adds	r7, #28
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f9bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f9f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f9c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f9c2:	e003      	b.n	800f9cc <LoopCopyDataInit>

0800f9c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f9c4:	4b0c      	ldr	r3, [pc, #48]	; (800f9f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f9c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f9c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f9ca:	3104      	adds	r1, #4

0800f9cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f9cc:	480b      	ldr	r0, [pc, #44]	; (800f9fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f9d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f9d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f9d4:	d3f6      	bcc.n	800f9c4 <CopyDataInit>
  ldr  r2, =_sbss
 800f9d6:	4a0b      	ldr	r2, [pc, #44]	; (800fa04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f9d8:	e002      	b.n	800f9e0 <LoopFillZerobss>

0800f9da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f9da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f9dc:	f842 3b04 	str.w	r3, [r2], #4

0800f9e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f9e0:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f9e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f9e4:	d3f9      	bcc.n	800f9da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f9e6:	f7ff fa89 	bl	800eefc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f9ea:	f000 f817 	bl	800fa1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f9ee:	f7fe f8df 	bl	800dbb0 <main>
  bx  lr    
 800f9f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f9f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f9f8:	08015578 	.word	0x08015578
  ldr  r0, =_sdata
 800f9fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800fa00:	20000394 	.word	0x20000394
  ldr  r2, =_sbss
 800fa04:	20000394 	.word	0x20000394
  ldr  r3, = _ebss
 800fa08:	20007e98 	.word	0x20007e98

0800fa0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fa0c:	e7fe      	b.n	800fa0c <ADC_IRQHandler>
	...

0800fa10 <__errno>:
 800fa10:	4b01      	ldr	r3, [pc, #4]	; (800fa18 <__errno+0x8>)
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	200001c0 	.word	0x200001c0

0800fa1c <__libc_init_array>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	4e0d      	ldr	r6, [pc, #52]	; (800fa54 <__libc_init_array+0x38>)
 800fa20:	4c0d      	ldr	r4, [pc, #52]	; (800fa58 <__libc_init_array+0x3c>)
 800fa22:	1ba4      	subs	r4, r4, r6
 800fa24:	10a4      	asrs	r4, r4, #2
 800fa26:	2500      	movs	r5, #0
 800fa28:	42a5      	cmp	r5, r4
 800fa2a:	d109      	bne.n	800fa40 <__libc_init_array+0x24>
 800fa2c:	4e0b      	ldr	r6, [pc, #44]	; (800fa5c <__libc_init_array+0x40>)
 800fa2e:	4c0c      	ldr	r4, [pc, #48]	; (800fa60 <__libc_init_array+0x44>)
 800fa30:	f005 fb14 	bl	801505c <_init>
 800fa34:	1ba4      	subs	r4, r4, r6
 800fa36:	10a4      	asrs	r4, r4, #2
 800fa38:	2500      	movs	r5, #0
 800fa3a:	42a5      	cmp	r5, r4
 800fa3c:	d105      	bne.n	800fa4a <__libc_init_array+0x2e>
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
 800fa40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa44:	4798      	blx	r3
 800fa46:	3501      	adds	r5, #1
 800fa48:	e7ee      	b.n	800fa28 <__libc_init_array+0xc>
 800fa4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa4e:	4798      	blx	r3
 800fa50:	3501      	adds	r5, #1
 800fa52:	e7f2      	b.n	800fa3a <__libc_init_array+0x1e>
 800fa54:	08015570 	.word	0x08015570
 800fa58:	08015570 	.word	0x08015570
 800fa5c:	08015570 	.word	0x08015570
 800fa60:	08015574 	.word	0x08015574

0800fa64 <malloc>:
 800fa64:	4b02      	ldr	r3, [pc, #8]	; (800fa70 <malloc+0xc>)
 800fa66:	4601      	mov	r1, r0
 800fa68:	6818      	ldr	r0, [r3, #0]
 800fa6a:	f000 b86d 	b.w	800fb48 <_malloc_r>
 800fa6e:	bf00      	nop
 800fa70:	200001c0 	.word	0x200001c0

0800fa74 <free>:
 800fa74:	4b02      	ldr	r3, [pc, #8]	; (800fa80 <free+0xc>)
 800fa76:	4601      	mov	r1, r0
 800fa78:	6818      	ldr	r0, [r3, #0]
 800fa7a:	f000 b817 	b.w	800faac <_free_r>
 800fa7e:	bf00      	nop
 800fa80:	200001c0 	.word	0x200001c0

0800fa84 <memcpy>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	1e43      	subs	r3, r0, #1
 800fa88:	440a      	add	r2, r1
 800fa8a:	4291      	cmp	r1, r2
 800fa8c:	d100      	bne.n	800fa90 <memcpy+0xc>
 800fa8e:	bd10      	pop	{r4, pc}
 800fa90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa98:	e7f7      	b.n	800fa8a <memcpy+0x6>

0800fa9a <memset>:
 800fa9a:	4402      	add	r2, r0
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d100      	bne.n	800faa4 <memset+0xa>
 800faa2:	4770      	bx	lr
 800faa4:	f803 1b01 	strb.w	r1, [r3], #1
 800faa8:	e7f9      	b.n	800fa9e <memset+0x4>
	...

0800faac <_free_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4605      	mov	r5, r0
 800fab0:	2900      	cmp	r1, #0
 800fab2:	d045      	beq.n	800fb40 <_free_r+0x94>
 800fab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fab8:	1f0c      	subs	r4, r1, #4
 800faba:	2b00      	cmp	r3, #0
 800fabc:	bfb8      	it	lt
 800fabe:	18e4      	addlt	r4, r4, r3
 800fac0:	f002 ff82 	bl	80129c8 <__malloc_lock>
 800fac4:	4a1f      	ldr	r2, [pc, #124]	; (800fb44 <_free_r+0x98>)
 800fac6:	6813      	ldr	r3, [r2, #0]
 800fac8:	4610      	mov	r0, r2
 800faca:	b933      	cbnz	r3, 800fada <_free_r+0x2e>
 800facc:	6063      	str	r3, [r4, #4]
 800face:	6014      	str	r4, [r2, #0]
 800fad0:	4628      	mov	r0, r5
 800fad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad6:	f002 bf78 	b.w	80129ca <__malloc_unlock>
 800fada:	42a3      	cmp	r3, r4
 800fadc:	d90c      	bls.n	800faf8 <_free_r+0x4c>
 800fade:	6821      	ldr	r1, [r4, #0]
 800fae0:	1862      	adds	r2, r4, r1
 800fae2:	4293      	cmp	r3, r2
 800fae4:	bf04      	itt	eq
 800fae6:	681a      	ldreq	r2, [r3, #0]
 800fae8:	685b      	ldreq	r3, [r3, #4]
 800faea:	6063      	str	r3, [r4, #4]
 800faec:	bf04      	itt	eq
 800faee:	1852      	addeq	r2, r2, r1
 800faf0:	6022      	streq	r2, [r4, #0]
 800faf2:	6004      	str	r4, [r0, #0]
 800faf4:	e7ec      	b.n	800fad0 <_free_r+0x24>
 800faf6:	4613      	mov	r3, r2
 800faf8:	685a      	ldr	r2, [r3, #4]
 800fafa:	b10a      	cbz	r2, 800fb00 <_free_r+0x54>
 800fafc:	42a2      	cmp	r2, r4
 800fafe:	d9fa      	bls.n	800faf6 <_free_r+0x4a>
 800fb00:	6819      	ldr	r1, [r3, #0]
 800fb02:	1858      	adds	r0, r3, r1
 800fb04:	42a0      	cmp	r0, r4
 800fb06:	d10b      	bne.n	800fb20 <_free_r+0x74>
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	4401      	add	r1, r0
 800fb0c:	1858      	adds	r0, r3, r1
 800fb0e:	4282      	cmp	r2, r0
 800fb10:	6019      	str	r1, [r3, #0]
 800fb12:	d1dd      	bne.n	800fad0 <_free_r+0x24>
 800fb14:	6810      	ldr	r0, [r2, #0]
 800fb16:	6852      	ldr	r2, [r2, #4]
 800fb18:	605a      	str	r2, [r3, #4]
 800fb1a:	4401      	add	r1, r0
 800fb1c:	6019      	str	r1, [r3, #0]
 800fb1e:	e7d7      	b.n	800fad0 <_free_r+0x24>
 800fb20:	d902      	bls.n	800fb28 <_free_r+0x7c>
 800fb22:	230c      	movs	r3, #12
 800fb24:	602b      	str	r3, [r5, #0]
 800fb26:	e7d3      	b.n	800fad0 <_free_r+0x24>
 800fb28:	6820      	ldr	r0, [r4, #0]
 800fb2a:	1821      	adds	r1, r4, r0
 800fb2c:	428a      	cmp	r2, r1
 800fb2e:	bf04      	itt	eq
 800fb30:	6811      	ldreq	r1, [r2, #0]
 800fb32:	6852      	ldreq	r2, [r2, #4]
 800fb34:	6062      	str	r2, [r4, #4]
 800fb36:	bf04      	itt	eq
 800fb38:	1809      	addeq	r1, r1, r0
 800fb3a:	6021      	streq	r1, [r4, #0]
 800fb3c:	605c      	str	r4, [r3, #4]
 800fb3e:	e7c7      	b.n	800fad0 <_free_r+0x24>
 800fb40:	bd38      	pop	{r3, r4, r5, pc}
 800fb42:	bf00      	nop
 800fb44:	200009d4 	.word	0x200009d4

0800fb48 <_malloc_r>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	1ccd      	adds	r5, r1, #3
 800fb4c:	f025 0503 	bic.w	r5, r5, #3
 800fb50:	3508      	adds	r5, #8
 800fb52:	2d0c      	cmp	r5, #12
 800fb54:	bf38      	it	cc
 800fb56:	250c      	movcc	r5, #12
 800fb58:	2d00      	cmp	r5, #0
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	db01      	blt.n	800fb62 <_malloc_r+0x1a>
 800fb5e:	42a9      	cmp	r1, r5
 800fb60:	d903      	bls.n	800fb6a <_malloc_r+0x22>
 800fb62:	230c      	movs	r3, #12
 800fb64:	6033      	str	r3, [r6, #0]
 800fb66:	2000      	movs	r0, #0
 800fb68:	bd70      	pop	{r4, r5, r6, pc}
 800fb6a:	f002 ff2d 	bl	80129c8 <__malloc_lock>
 800fb6e:	4a21      	ldr	r2, [pc, #132]	; (800fbf4 <_malloc_r+0xac>)
 800fb70:	6814      	ldr	r4, [r2, #0]
 800fb72:	4621      	mov	r1, r4
 800fb74:	b991      	cbnz	r1, 800fb9c <_malloc_r+0x54>
 800fb76:	4c20      	ldr	r4, [pc, #128]	; (800fbf8 <_malloc_r+0xb0>)
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	b91b      	cbnz	r3, 800fb84 <_malloc_r+0x3c>
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f000 fe7b 	bl	8010878 <_sbrk_r>
 800fb82:	6020      	str	r0, [r4, #0]
 800fb84:	4629      	mov	r1, r5
 800fb86:	4630      	mov	r0, r6
 800fb88:	f000 fe76 	bl	8010878 <_sbrk_r>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	d124      	bne.n	800fbda <_malloc_r+0x92>
 800fb90:	230c      	movs	r3, #12
 800fb92:	6033      	str	r3, [r6, #0]
 800fb94:	4630      	mov	r0, r6
 800fb96:	f002 ff18 	bl	80129ca <__malloc_unlock>
 800fb9a:	e7e4      	b.n	800fb66 <_malloc_r+0x1e>
 800fb9c:	680b      	ldr	r3, [r1, #0]
 800fb9e:	1b5b      	subs	r3, r3, r5
 800fba0:	d418      	bmi.n	800fbd4 <_malloc_r+0x8c>
 800fba2:	2b0b      	cmp	r3, #11
 800fba4:	d90f      	bls.n	800fbc6 <_malloc_r+0x7e>
 800fba6:	600b      	str	r3, [r1, #0]
 800fba8:	50cd      	str	r5, [r1, r3]
 800fbaa:	18cc      	adds	r4, r1, r3
 800fbac:	4630      	mov	r0, r6
 800fbae:	f002 ff0c 	bl	80129ca <__malloc_unlock>
 800fbb2:	f104 000b 	add.w	r0, r4, #11
 800fbb6:	1d23      	adds	r3, r4, #4
 800fbb8:	f020 0007 	bic.w	r0, r0, #7
 800fbbc:	1ac3      	subs	r3, r0, r3
 800fbbe:	d0d3      	beq.n	800fb68 <_malloc_r+0x20>
 800fbc0:	425a      	negs	r2, r3
 800fbc2:	50e2      	str	r2, [r4, r3]
 800fbc4:	e7d0      	b.n	800fb68 <_malloc_r+0x20>
 800fbc6:	428c      	cmp	r4, r1
 800fbc8:	684b      	ldr	r3, [r1, #4]
 800fbca:	bf16      	itet	ne
 800fbcc:	6063      	strne	r3, [r4, #4]
 800fbce:	6013      	streq	r3, [r2, #0]
 800fbd0:	460c      	movne	r4, r1
 800fbd2:	e7eb      	b.n	800fbac <_malloc_r+0x64>
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	6849      	ldr	r1, [r1, #4]
 800fbd8:	e7cc      	b.n	800fb74 <_malloc_r+0x2c>
 800fbda:	1cc4      	adds	r4, r0, #3
 800fbdc:	f024 0403 	bic.w	r4, r4, #3
 800fbe0:	42a0      	cmp	r0, r4
 800fbe2:	d005      	beq.n	800fbf0 <_malloc_r+0xa8>
 800fbe4:	1a21      	subs	r1, r4, r0
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f000 fe46 	bl	8010878 <_sbrk_r>
 800fbec:	3001      	adds	r0, #1
 800fbee:	d0cf      	beq.n	800fb90 <_malloc_r+0x48>
 800fbf0:	6025      	str	r5, [r4, #0]
 800fbf2:	e7db      	b.n	800fbac <_malloc_r+0x64>
 800fbf4:	200009d4 	.word	0x200009d4
 800fbf8:	200009d8 	.word	0x200009d8

0800fbfc <__cvt>:
 800fbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	ec55 4b10 	vmov	r4, r5, d0
 800fc04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fc06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc0a:	2d00      	cmp	r5, #0
 800fc0c:	460e      	mov	r6, r1
 800fc0e:	4691      	mov	r9, r2
 800fc10:	4619      	mov	r1, r3
 800fc12:	bfb8      	it	lt
 800fc14:	4622      	movlt	r2, r4
 800fc16:	462b      	mov	r3, r5
 800fc18:	f027 0720 	bic.w	r7, r7, #32
 800fc1c:	bfbb      	ittet	lt
 800fc1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc22:	461d      	movlt	r5, r3
 800fc24:	2300      	movge	r3, #0
 800fc26:	232d      	movlt	r3, #45	; 0x2d
 800fc28:	bfb8      	it	lt
 800fc2a:	4614      	movlt	r4, r2
 800fc2c:	2f46      	cmp	r7, #70	; 0x46
 800fc2e:	700b      	strb	r3, [r1, #0]
 800fc30:	d004      	beq.n	800fc3c <__cvt+0x40>
 800fc32:	2f45      	cmp	r7, #69	; 0x45
 800fc34:	d100      	bne.n	800fc38 <__cvt+0x3c>
 800fc36:	3601      	adds	r6, #1
 800fc38:	2102      	movs	r1, #2
 800fc3a:	e000      	b.n	800fc3e <__cvt+0x42>
 800fc3c:	2103      	movs	r1, #3
 800fc3e:	ab03      	add	r3, sp, #12
 800fc40:	9301      	str	r3, [sp, #4]
 800fc42:	ab02      	add	r3, sp, #8
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4632      	mov	r2, r6
 800fc48:	4653      	mov	r3, sl
 800fc4a:	ec45 4b10 	vmov	d0, r4, r5
 800fc4e:	f001 fdb7 	bl	80117c0 <_dtoa_r>
 800fc52:	2f47      	cmp	r7, #71	; 0x47
 800fc54:	4680      	mov	r8, r0
 800fc56:	d102      	bne.n	800fc5e <__cvt+0x62>
 800fc58:	f019 0f01 	tst.w	r9, #1
 800fc5c:	d026      	beq.n	800fcac <__cvt+0xb0>
 800fc5e:	2f46      	cmp	r7, #70	; 0x46
 800fc60:	eb08 0906 	add.w	r9, r8, r6
 800fc64:	d111      	bne.n	800fc8a <__cvt+0x8e>
 800fc66:	f898 3000 	ldrb.w	r3, [r8]
 800fc6a:	2b30      	cmp	r3, #48	; 0x30
 800fc6c:	d10a      	bne.n	800fc84 <__cvt+0x88>
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2300      	movs	r3, #0
 800fc72:	4620      	mov	r0, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	f7f0 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc7a:	b918      	cbnz	r0, 800fc84 <__cvt+0x88>
 800fc7c:	f1c6 0601 	rsb	r6, r6, #1
 800fc80:	f8ca 6000 	str.w	r6, [sl]
 800fc84:	f8da 3000 	ldr.w	r3, [sl]
 800fc88:	4499      	add	r9, r3
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc96:	b938      	cbnz	r0, 800fca8 <__cvt+0xac>
 800fc98:	2230      	movs	r2, #48	; 0x30
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	454b      	cmp	r3, r9
 800fc9e:	d205      	bcs.n	800fcac <__cvt+0xb0>
 800fca0:	1c59      	adds	r1, r3, #1
 800fca2:	9103      	str	r1, [sp, #12]
 800fca4:	701a      	strb	r2, [r3, #0]
 800fca6:	e7f8      	b.n	800fc9a <__cvt+0x9e>
 800fca8:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcac:	9b03      	ldr	r3, [sp, #12]
 800fcae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcb0:	eba3 0308 	sub.w	r3, r3, r8
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	6013      	str	r3, [r2, #0]
 800fcb8:	b004      	add	sp, #16
 800fcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fcbe <__exponent>:
 800fcbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcc0:	2900      	cmp	r1, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	bfba      	itte	lt
 800fcc6:	4249      	neglt	r1, r1
 800fcc8:	232d      	movlt	r3, #45	; 0x2d
 800fcca:	232b      	movge	r3, #43	; 0x2b
 800fccc:	2909      	cmp	r1, #9
 800fcce:	f804 2b02 	strb.w	r2, [r4], #2
 800fcd2:	7043      	strb	r3, [r0, #1]
 800fcd4:	dd20      	ble.n	800fd18 <__exponent+0x5a>
 800fcd6:	f10d 0307 	add.w	r3, sp, #7
 800fcda:	461f      	mov	r7, r3
 800fcdc:	260a      	movs	r6, #10
 800fcde:	fb91 f5f6 	sdiv	r5, r1, r6
 800fce2:	fb06 1115 	mls	r1, r6, r5, r1
 800fce6:	3130      	adds	r1, #48	; 0x30
 800fce8:	2d09      	cmp	r5, #9
 800fcea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fcee:	f103 32ff 	add.w	r2, r3, #4294967295
 800fcf2:	4629      	mov	r1, r5
 800fcf4:	dc09      	bgt.n	800fd0a <__exponent+0x4c>
 800fcf6:	3130      	adds	r1, #48	; 0x30
 800fcf8:	3b02      	subs	r3, #2
 800fcfa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fcfe:	42bb      	cmp	r3, r7
 800fd00:	4622      	mov	r2, r4
 800fd02:	d304      	bcc.n	800fd0e <__exponent+0x50>
 800fd04:	1a10      	subs	r0, r2, r0
 800fd06:	b003      	add	sp, #12
 800fd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	e7e7      	b.n	800fcde <__exponent+0x20>
 800fd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd12:	f804 2b01 	strb.w	r2, [r4], #1
 800fd16:	e7f2      	b.n	800fcfe <__exponent+0x40>
 800fd18:	2330      	movs	r3, #48	; 0x30
 800fd1a:	4419      	add	r1, r3
 800fd1c:	7083      	strb	r3, [r0, #2]
 800fd1e:	1d02      	adds	r2, r0, #4
 800fd20:	70c1      	strb	r1, [r0, #3]
 800fd22:	e7ef      	b.n	800fd04 <__exponent+0x46>

0800fd24 <_printf_float>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	b08d      	sub	sp, #52	; 0x34
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fd30:	4616      	mov	r6, r2
 800fd32:	461f      	mov	r7, r3
 800fd34:	4605      	mov	r5, r0
 800fd36:	f002 fe27 	bl	8012988 <_localeconv_r>
 800fd3a:	6803      	ldr	r3, [r0, #0]
 800fd3c:	9304      	str	r3, [sp, #16]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f0 fa46 	bl	80001d0 <strlen>
 800fd44:	2300      	movs	r3, #0
 800fd46:	930a      	str	r3, [sp, #40]	; 0x28
 800fd48:	f8d8 3000 	ldr.w	r3, [r8]
 800fd4c:	9005      	str	r0, [sp, #20]
 800fd4e:	3307      	adds	r3, #7
 800fd50:	f023 0307 	bic.w	r3, r3, #7
 800fd54:	f103 0208 	add.w	r2, r3, #8
 800fd58:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fd5c:	f8d4 b000 	ldr.w	fp, [r4]
 800fd60:	f8c8 2000 	str.w	r2, [r8]
 800fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd74:	9307      	str	r3, [sp, #28]
 800fd76:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd7a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd7e:	4ba7      	ldr	r3, [pc, #668]	; (801001c <_printf_float+0x2f8>)
 800fd80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd84:	f7f0 fed2 	bl	8000b2c <__aeabi_dcmpun>
 800fd88:	bb70      	cbnz	r0, 800fde8 <_printf_float+0xc4>
 800fd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fd8e:	4ba3      	ldr	r3, [pc, #652]	; (801001c <_printf_float+0x2f8>)
 800fd90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd94:	f7f0 feac 	bl	8000af0 <__aeabi_dcmple>
 800fd98:	bb30      	cbnz	r0, 800fde8 <_printf_float+0xc4>
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4640      	mov	r0, r8
 800fda0:	4649      	mov	r1, r9
 800fda2:	f7f0 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800fda6:	b110      	cbz	r0, 800fdae <_printf_float+0x8a>
 800fda8:	232d      	movs	r3, #45	; 0x2d
 800fdaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdae:	4a9c      	ldr	r2, [pc, #624]	; (8010020 <_printf_float+0x2fc>)
 800fdb0:	4b9c      	ldr	r3, [pc, #624]	; (8010024 <_printf_float+0x300>)
 800fdb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fdb6:	bf8c      	ite	hi
 800fdb8:	4690      	movhi	r8, r2
 800fdba:	4698      	movls	r8, r3
 800fdbc:	2303      	movs	r3, #3
 800fdbe:	f02b 0204 	bic.w	r2, fp, #4
 800fdc2:	6123      	str	r3, [r4, #16]
 800fdc4:	6022      	str	r2, [r4, #0]
 800fdc6:	f04f 0900 	mov.w	r9, #0
 800fdca:	9700      	str	r7, [sp, #0]
 800fdcc:	4633      	mov	r3, r6
 800fdce:	aa0b      	add	r2, sp, #44	; 0x2c
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	f000 f9e6 	bl	80101a4 <_printf_common>
 800fdd8:	3001      	adds	r0, #1
 800fdda:	f040 808d 	bne.w	800fef8 <_printf_float+0x1d4>
 800fdde:	f04f 30ff 	mov.w	r0, #4294967295
 800fde2:	b00d      	add	sp, #52	; 0x34
 800fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde8:	4642      	mov	r2, r8
 800fdea:	464b      	mov	r3, r9
 800fdec:	4640      	mov	r0, r8
 800fdee:	4649      	mov	r1, r9
 800fdf0:	f7f0 fe9c 	bl	8000b2c <__aeabi_dcmpun>
 800fdf4:	b110      	cbz	r0, 800fdfc <_printf_float+0xd8>
 800fdf6:	4a8c      	ldr	r2, [pc, #560]	; (8010028 <_printf_float+0x304>)
 800fdf8:	4b8c      	ldr	r3, [pc, #560]	; (801002c <_printf_float+0x308>)
 800fdfa:	e7da      	b.n	800fdb2 <_printf_float+0x8e>
 800fdfc:	6861      	ldr	r1, [r4, #4]
 800fdfe:	1c4b      	adds	r3, r1, #1
 800fe00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fe04:	a80a      	add	r0, sp, #40	; 0x28
 800fe06:	d13e      	bne.n	800fe86 <_printf_float+0x162>
 800fe08:	2306      	movs	r3, #6
 800fe0a:	6063      	str	r3, [r4, #4]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fe12:	ab09      	add	r3, sp, #36	; 0x24
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	ec49 8b10 	vmov	d0, r8, r9
 800fe1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe1e:	6022      	str	r2, [r4, #0]
 800fe20:	f8cd a004 	str.w	sl, [sp, #4]
 800fe24:	6861      	ldr	r1, [r4, #4]
 800fe26:	4628      	mov	r0, r5
 800fe28:	f7ff fee8 	bl	800fbfc <__cvt>
 800fe2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fe30:	2b47      	cmp	r3, #71	; 0x47
 800fe32:	4680      	mov	r8, r0
 800fe34:	d109      	bne.n	800fe4a <_printf_float+0x126>
 800fe36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe38:	1cd8      	adds	r0, r3, #3
 800fe3a:	db02      	blt.n	800fe42 <_printf_float+0x11e>
 800fe3c:	6862      	ldr	r2, [r4, #4]
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	dd47      	ble.n	800fed2 <_printf_float+0x1ae>
 800fe42:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe46:	fa5f fa8a 	uxtb.w	sl, sl
 800fe4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fe4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe50:	d824      	bhi.n	800fe9c <_printf_float+0x178>
 800fe52:	3901      	subs	r1, #1
 800fe54:	4652      	mov	r2, sl
 800fe56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe5a:	9109      	str	r1, [sp, #36]	; 0x24
 800fe5c:	f7ff ff2f 	bl	800fcbe <__exponent>
 800fe60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe62:	1813      	adds	r3, r2, r0
 800fe64:	2a01      	cmp	r2, #1
 800fe66:	4681      	mov	r9, r0
 800fe68:	6123      	str	r3, [r4, #16]
 800fe6a:	dc02      	bgt.n	800fe72 <_printf_float+0x14e>
 800fe6c:	6822      	ldr	r2, [r4, #0]
 800fe6e:	07d1      	lsls	r1, r2, #31
 800fe70:	d501      	bpl.n	800fe76 <_printf_float+0x152>
 800fe72:	3301      	adds	r3, #1
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d0a5      	beq.n	800fdca <_printf_float+0xa6>
 800fe7e:	232d      	movs	r3, #45	; 0x2d
 800fe80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe84:	e7a1      	b.n	800fdca <_printf_float+0xa6>
 800fe86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fe8a:	f000 8177 	beq.w	801017c <_printf_float+0x458>
 800fe8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fe92:	d1bb      	bne.n	800fe0c <_printf_float+0xe8>
 800fe94:	2900      	cmp	r1, #0
 800fe96:	d1b9      	bne.n	800fe0c <_printf_float+0xe8>
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e7b6      	b.n	800fe0a <_printf_float+0xe6>
 800fe9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fea0:	d119      	bne.n	800fed6 <_printf_float+0x1b2>
 800fea2:	2900      	cmp	r1, #0
 800fea4:	6863      	ldr	r3, [r4, #4]
 800fea6:	dd0c      	ble.n	800fec2 <_printf_float+0x19e>
 800fea8:	6121      	str	r1, [r4, #16]
 800feaa:	b913      	cbnz	r3, 800feb2 <_printf_float+0x18e>
 800feac:	6822      	ldr	r2, [r4, #0]
 800feae:	07d2      	lsls	r2, r2, #31
 800feb0:	d502      	bpl.n	800feb8 <_printf_float+0x194>
 800feb2:	3301      	adds	r3, #1
 800feb4:	440b      	add	r3, r1
 800feb6:	6123      	str	r3, [r4, #16]
 800feb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feba:	65a3      	str	r3, [r4, #88]	; 0x58
 800febc:	f04f 0900 	mov.w	r9, #0
 800fec0:	e7d9      	b.n	800fe76 <_printf_float+0x152>
 800fec2:	b913      	cbnz	r3, 800feca <_printf_float+0x1a6>
 800fec4:	6822      	ldr	r2, [r4, #0]
 800fec6:	07d0      	lsls	r0, r2, #31
 800fec8:	d501      	bpl.n	800fece <_printf_float+0x1aa>
 800feca:	3302      	adds	r3, #2
 800fecc:	e7f3      	b.n	800feb6 <_printf_float+0x192>
 800fece:	2301      	movs	r3, #1
 800fed0:	e7f1      	b.n	800feb6 <_printf_float+0x192>
 800fed2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fed6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800feda:	4293      	cmp	r3, r2
 800fedc:	db05      	blt.n	800feea <_printf_float+0x1c6>
 800fede:	6822      	ldr	r2, [r4, #0]
 800fee0:	6123      	str	r3, [r4, #16]
 800fee2:	07d1      	lsls	r1, r2, #31
 800fee4:	d5e8      	bpl.n	800feb8 <_printf_float+0x194>
 800fee6:	3301      	adds	r3, #1
 800fee8:	e7e5      	b.n	800feb6 <_printf_float+0x192>
 800feea:	2b00      	cmp	r3, #0
 800feec:	bfd4      	ite	le
 800feee:	f1c3 0302 	rsble	r3, r3, #2
 800fef2:	2301      	movgt	r3, #1
 800fef4:	4413      	add	r3, r2
 800fef6:	e7de      	b.n	800feb6 <_printf_float+0x192>
 800fef8:	6823      	ldr	r3, [r4, #0]
 800fefa:	055a      	lsls	r2, r3, #21
 800fefc:	d407      	bmi.n	800ff0e <_printf_float+0x1ea>
 800fefe:	6923      	ldr	r3, [r4, #16]
 800ff00:	4642      	mov	r2, r8
 800ff02:	4631      	mov	r1, r6
 800ff04:	4628      	mov	r0, r5
 800ff06:	47b8      	blx	r7
 800ff08:	3001      	adds	r0, #1
 800ff0a:	d12b      	bne.n	800ff64 <_printf_float+0x240>
 800ff0c:	e767      	b.n	800fdde <_printf_float+0xba>
 800ff0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ff12:	f240 80dc 	bls.w	80100ce <_printf_float+0x3aa>
 800ff16:	2200      	movs	r2, #0
 800ff18:	2300      	movs	r3, #0
 800ff1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff1e:	f7f0 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d033      	beq.n	800ff8e <_printf_float+0x26a>
 800ff26:	2301      	movs	r3, #1
 800ff28:	4a41      	ldr	r2, [pc, #260]	; (8010030 <_printf_float+0x30c>)
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	47b8      	blx	r7
 800ff30:	3001      	adds	r0, #1
 800ff32:	f43f af54 	beq.w	800fdde <_printf_float+0xba>
 800ff36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	db02      	blt.n	800ff44 <_printf_float+0x220>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	07d8      	lsls	r0, r3, #31
 800ff42:	d50f      	bpl.n	800ff64 <_printf_float+0x240>
 800ff44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff48:	4631      	mov	r1, r6
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	47b8      	blx	r7
 800ff4e:	3001      	adds	r0, #1
 800ff50:	f43f af45 	beq.w	800fdde <_printf_float+0xba>
 800ff54:	f04f 0800 	mov.w	r8, #0
 800ff58:	f104 091a 	add.w	r9, r4, #26
 800ff5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	4543      	cmp	r3, r8
 800ff62:	dc09      	bgt.n	800ff78 <_printf_float+0x254>
 800ff64:	6823      	ldr	r3, [r4, #0]
 800ff66:	079b      	lsls	r3, r3, #30
 800ff68:	f100 8103 	bmi.w	8010172 <_printf_float+0x44e>
 800ff6c:	68e0      	ldr	r0, [r4, #12]
 800ff6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff70:	4298      	cmp	r0, r3
 800ff72:	bfb8      	it	lt
 800ff74:	4618      	movlt	r0, r3
 800ff76:	e734      	b.n	800fde2 <_printf_float+0xbe>
 800ff78:	2301      	movs	r3, #1
 800ff7a:	464a      	mov	r2, r9
 800ff7c:	4631      	mov	r1, r6
 800ff7e:	4628      	mov	r0, r5
 800ff80:	47b8      	blx	r7
 800ff82:	3001      	adds	r0, #1
 800ff84:	f43f af2b 	beq.w	800fdde <_printf_float+0xba>
 800ff88:	f108 0801 	add.w	r8, r8, #1
 800ff8c:	e7e6      	b.n	800ff5c <_printf_float+0x238>
 800ff8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	dc2b      	bgt.n	800ffec <_printf_float+0x2c8>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4a26      	ldr	r2, [pc, #152]	; (8010030 <_printf_float+0x30c>)
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	47b8      	blx	r7
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	f43f af1d 	beq.w	800fdde <_printf_float+0xba>
 800ffa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa6:	b923      	cbnz	r3, 800ffb2 <_printf_float+0x28e>
 800ffa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffaa:	b913      	cbnz	r3, 800ffb2 <_printf_float+0x28e>
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	07d9      	lsls	r1, r3, #31
 800ffb0:	d5d8      	bpl.n	800ff64 <_printf_float+0x240>
 800ffb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffb6:	4631      	mov	r1, r6
 800ffb8:	4628      	mov	r0, r5
 800ffba:	47b8      	blx	r7
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	f43f af0e 	beq.w	800fdde <_printf_float+0xba>
 800ffc2:	f04f 0900 	mov.w	r9, #0
 800ffc6:	f104 0a1a 	add.w	sl, r4, #26
 800ffca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffcc:	425b      	negs	r3, r3
 800ffce:	454b      	cmp	r3, r9
 800ffd0:	dc01      	bgt.n	800ffd6 <_printf_float+0x2b2>
 800ffd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffd4:	e794      	b.n	800ff00 <_printf_float+0x1dc>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	4652      	mov	r2, sl
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4628      	mov	r0, r5
 800ffde:	47b8      	blx	r7
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	f43f aefc 	beq.w	800fdde <_printf_float+0xba>
 800ffe6:	f109 0901 	add.w	r9, r9, #1
 800ffea:	e7ee      	b.n	800ffca <_printf_float+0x2a6>
 800ffec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fff0:	429a      	cmp	r2, r3
 800fff2:	bfa8      	it	ge
 800fff4:	461a      	movge	r2, r3
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	4691      	mov	r9, r2
 800fffa:	dd07      	ble.n	801000c <_printf_float+0x2e8>
 800fffc:	4613      	mov	r3, r2
 800fffe:	4631      	mov	r1, r6
 8010000:	4642      	mov	r2, r8
 8010002:	4628      	mov	r0, r5
 8010004:	47b8      	blx	r7
 8010006:	3001      	adds	r0, #1
 8010008:	f43f aee9 	beq.w	800fdde <_printf_float+0xba>
 801000c:	f104 031a 	add.w	r3, r4, #26
 8010010:	f04f 0b00 	mov.w	fp, #0
 8010014:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010018:	9306      	str	r3, [sp, #24]
 801001a:	e015      	b.n	8010048 <_printf_float+0x324>
 801001c:	7fefffff 	.word	0x7fefffff
 8010020:	08015224 	.word	0x08015224
 8010024:	08015220 	.word	0x08015220
 8010028:	0801522c 	.word	0x0801522c
 801002c:	08015228 	.word	0x08015228
 8010030:	08015230 	.word	0x08015230
 8010034:	2301      	movs	r3, #1
 8010036:	9a06      	ldr	r2, [sp, #24]
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	f43f aecd 	beq.w	800fdde <_printf_float+0xba>
 8010044:	f10b 0b01 	add.w	fp, fp, #1
 8010048:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801004c:	ebaa 0309 	sub.w	r3, sl, r9
 8010050:	455b      	cmp	r3, fp
 8010052:	dcef      	bgt.n	8010034 <_printf_float+0x310>
 8010054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010058:	429a      	cmp	r2, r3
 801005a:	44d0      	add	r8, sl
 801005c:	db15      	blt.n	801008a <_printf_float+0x366>
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	07da      	lsls	r2, r3, #31
 8010062:	d412      	bmi.n	801008a <_printf_float+0x366>
 8010064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010066:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010068:	eba3 020a 	sub.w	r2, r3, sl
 801006c:	eba3 0a01 	sub.w	sl, r3, r1
 8010070:	4592      	cmp	sl, r2
 8010072:	bfa8      	it	ge
 8010074:	4692      	movge	sl, r2
 8010076:	f1ba 0f00 	cmp.w	sl, #0
 801007a:	dc0e      	bgt.n	801009a <_printf_float+0x376>
 801007c:	f04f 0800 	mov.w	r8, #0
 8010080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010084:	f104 091a 	add.w	r9, r4, #26
 8010088:	e019      	b.n	80100be <_printf_float+0x39a>
 801008a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801008e:	4631      	mov	r1, r6
 8010090:	4628      	mov	r0, r5
 8010092:	47b8      	blx	r7
 8010094:	3001      	adds	r0, #1
 8010096:	d1e5      	bne.n	8010064 <_printf_float+0x340>
 8010098:	e6a1      	b.n	800fdde <_printf_float+0xba>
 801009a:	4653      	mov	r3, sl
 801009c:	4642      	mov	r2, r8
 801009e:	4631      	mov	r1, r6
 80100a0:	4628      	mov	r0, r5
 80100a2:	47b8      	blx	r7
 80100a4:	3001      	adds	r0, #1
 80100a6:	d1e9      	bne.n	801007c <_printf_float+0x358>
 80100a8:	e699      	b.n	800fdde <_printf_float+0xba>
 80100aa:	2301      	movs	r3, #1
 80100ac:	464a      	mov	r2, r9
 80100ae:	4631      	mov	r1, r6
 80100b0:	4628      	mov	r0, r5
 80100b2:	47b8      	blx	r7
 80100b4:	3001      	adds	r0, #1
 80100b6:	f43f ae92 	beq.w	800fdde <_printf_float+0xba>
 80100ba:	f108 0801 	add.w	r8, r8, #1
 80100be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100c2:	1a9b      	subs	r3, r3, r2
 80100c4:	eba3 030a 	sub.w	r3, r3, sl
 80100c8:	4543      	cmp	r3, r8
 80100ca:	dcee      	bgt.n	80100aa <_printf_float+0x386>
 80100cc:	e74a      	b.n	800ff64 <_printf_float+0x240>
 80100ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100d0:	2a01      	cmp	r2, #1
 80100d2:	dc01      	bgt.n	80100d8 <_printf_float+0x3b4>
 80100d4:	07db      	lsls	r3, r3, #31
 80100d6:	d53a      	bpl.n	801014e <_printf_float+0x42a>
 80100d8:	2301      	movs	r3, #1
 80100da:	4642      	mov	r2, r8
 80100dc:	4631      	mov	r1, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	47b8      	blx	r7
 80100e2:	3001      	adds	r0, #1
 80100e4:	f43f ae7b 	beq.w	800fdde <_printf_float+0xba>
 80100e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100ec:	4631      	mov	r1, r6
 80100ee:	4628      	mov	r0, r5
 80100f0:	47b8      	blx	r7
 80100f2:	3001      	adds	r0, #1
 80100f4:	f108 0801 	add.w	r8, r8, #1
 80100f8:	f43f ae71 	beq.w	800fdde <_printf_float+0xba>
 80100fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100fe:	2200      	movs	r2, #0
 8010100:	f103 3aff 	add.w	sl, r3, #4294967295
 8010104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010108:	2300      	movs	r3, #0
 801010a:	f7f0 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801010e:	b9c8      	cbnz	r0, 8010144 <_printf_float+0x420>
 8010110:	4653      	mov	r3, sl
 8010112:	4642      	mov	r2, r8
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	d10e      	bne.n	801013c <_printf_float+0x418>
 801011e:	e65e      	b.n	800fdde <_printf_float+0xba>
 8010120:	2301      	movs	r3, #1
 8010122:	4652      	mov	r2, sl
 8010124:	4631      	mov	r1, r6
 8010126:	4628      	mov	r0, r5
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f ae57 	beq.w	800fdde <_printf_float+0xba>
 8010130:	f108 0801 	add.w	r8, r8, #1
 8010134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010136:	3b01      	subs	r3, #1
 8010138:	4543      	cmp	r3, r8
 801013a:	dcf1      	bgt.n	8010120 <_printf_float+0x3fc>
 801013c:	464b      	mov	r3, r9
 801013e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010142:	e6de      	b.n	800ff02 <_printf_float+0x1de>
 8010144:	f04f 0800 	mov.w	r8, #0
 8010148:	f104 0a1a 	add.w	sl, r4, #26
 801014c:	e7f2      	b.n	8010134 <_printf_float+0x410>
 801014e:	2301      	movs	r3, #1
 8010150:	e7df      	b.n	8010112 <_printf_float+0x3ee>
 8010152:	2301      	movs	r3, #1
 8010154:	464a      	mov	r2, r9
 8010156:	4631      	mov	r1, r6
 8010158:	4628      	mov	r0, r5
 801015a:	47b8      	blx	r7
 801015c:	3001      	adds	r0, #1
 801015e:	f43f ae3e 	beq.w	800fdde <_printf_float+0xba>
 8010162:	f108 0801 	add.w	r8, r8, #1
 8010166:	68e3      	ldr	r3, [r4, #12]
 8010168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801016a:	1a9b      	subs	r3, r3, r2
 801016c:	4543      	cmp	r3, r8
 801016e:	dcf0      	bgt.n	8010152 <_printf_float+0x42e>
 8010170:	e6fc      	b.n	800ff6c <_printf_float+0x248>
 8010172:	f04f 0800 	mov.w	r8, #0
 8010176:	f104 0919 	add.w	r9, r4, #25
 801017a:	e7f4      	b.n	8010166 <_printf_float+0x442>
 801017c:	2900      	cmp	r1, #0
 801017e:	f43f ae8b 	beq.w	800fe98 <_printf_float+0x174>
 8010182:	2300      	movs	r3, #0
 8010184:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010188:	ab09      	add	r3, sp, #36	; 0x24
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	ec49 8b10 	vmov	d0, r8, r9
 8010190:	6022      	str	r2, [r4, #0]
 8010192:	f8cd a004 	str.w	sl, [sp, #4]
 8010196:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801019a:	4628      	mov	r0, r5
 801019c:	f7ff fd2e 	bl	800fbfc <__cvt>
 80101a0:	4680      	mov	r8, r0
 80101a2:	e648      	b.n	800fe36 <_printf_float+0x112>

080101a4 <_printf_common>:
 80101a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a8:	4691      	mov	r9, r2
 80101aa:	461f      	mov	r7, r3
 80101ac:	688a      	ldr	r2, [r1, #8]
 80101ae:	690b      	ldr	r3, [r1, #16]
 80101b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101b4:	4293      	cmp	r3, r2
 80101b6:	bfb8      	it	lt
 80101b8:	4613      	movlt	r3, r2
 80101ba:	f8c9 3000 	str.w	r3, [r9]
 80101be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101c2:	4606      	mov	r6, r0
 80101c4:	460c      	mov	r4, r1
 80101c6:	b112      	cbz	r2, 80101ce <_printf_common+0x2a>
 80101c8:	3301      	adds	r3, #1
 80101ca:	f8c9 3000 	str.w	r3, [r9]
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	0699      	lsls	r1, r3, #26
 80101d2:	bf42      	ittt	mi
 80101d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80101d8:	3302      	addmi	r3, #2
 80101da:	f8c9 3000 	strmi.w	r3, [r9]
 80101de:	6825      	ldr	r5, [r4, #0]
 80101e0:	f015 0506 	ands.w	r5, r5, #6
 80101e4:	d107      	bne.n	80101f6 <_printf_common+0x52>
 80101e6:	f104 0a19 	add.w	sl, r4, #25
 80101ea:	68e3      	ldr	r3, [r4, #12]
 80101ec:	f8d9 2000 	ldr.w	r2, [r9]
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	42ab      	cmp	r3, r5
 80101f4:	dc28      	bgt.n	8010248 <_printf_common+0xa4>
 80101f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80101fa:	6822      	ldr	r2, [r4, #0]
 80101fc:	3300      	adds	r3, #0
 80101fe:	bf18      	it	ne
 8010200:	2301      	movne	r3, #1
 8010202:	0692      	lsls	r2, r2, #26
 8010204:	d42d      	bmi.n	8010262 <_printf_common+0xbe>
 8010206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801020a:	4639      	mov	r1, r7
 801020c:	4630      	mov	r0, r6
 801020e:	47c0      	blx	r8
 8010210:	3001      	adds	r0, #1
 8010212:	d020      	beq.n	8010256 <_printf_common+0xb2>
 8010214:	6823      	ldr	r3, [r4, #0]
 8010216:	68e5      	ldr	r5, [r4, #12]
 8010218:	f8d9 2000 	ldr.w	r2, [r9]
 801021c:	f003 0306 	and.w	r3, r3, #6
 8010220:	2b04      	cmp	r3, #4
 8010222:	bf08      	it	eq
 8010224:	1aad      	subeq	r5, r5, r2
 8010226:	68a3      	ldr	r3, [r4, #8]
 8010228:	6922      	ldr	r2, [r4, #16]
 801022a:	bf0c      	ite	eq
 801022c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010230:	2500      	movne	r5, #0
 8010232:	4293      	cmp	r3, r2
 8010234:	bfc4      	itt	gt
 8010236:	1a9b      	subgt	r3, r3, r2
 8010238:	18ed      	addgt	r5, r5, r3
 801023a:	f04f 0900 	mov.w	r9, #0
 801023e:	341a      	adds	r4, #26
 8010240:	454d      	cmp	r5, r9
 8010242:	d11a      	bne.n	801027a <_printf_common+0xd6>
 8010244:	2000      	movs	r0, #0
 8010246:	e008      	b.n	801025a <_printf_common+0xb6>
 8010248:	2301      	movs	r3, #1
 801024a:	4652      	mov	r2, sl
 801024c:	4639      	mov	r1, r7
 801024e:	4630      	mov	r0, r6
 8010250:	47c0      	blx	r8
 8010252:	3001      	adds	r0, #1
 8010254:	d103      	bne.n	801025e <_printf_common+0xba>
 8010256:	f04f 30ff 	mov.w	r0, #4294967295
 801025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025e:	3501      	adds	r5, #1
 8010260:	e7c3      	b.n	80101ea <_printf_common+0x46>
 8010262:	18e1      	adds	r1, r4, r3
 8010264:	1c5a      	adds	r2, r3, #1
 8010266:	2030      	movs	r0, #48	; 0x30
 8010268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801026c:	4422      	add	r2, r4
 801026e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010276:	3302      	adds	r3, #2
 8010278:	e7c5      	b.n	8010206 <_printf_common+0x62>
 801027a:	2301      	movs	r3, #1
 801027c:	4622      	mov	r2, r4
 801027e:	4639      	mov	r1, r7
 8010280:	4630      	mov	r0, r6
 8010282:	47c0      	blx	r8
 8010284:	3001      	adds	r0, #1
 8010286:	d0e6      	beq.n	8010256 <_printf_common+0xb2>
 8010288:	f109 0901 	add.w	r9, r9, #1
 801028c:	e7d8      	b.n	8010240 <_printf_common+0x9c>
	...

08010290 <_printf_i>:
 8010290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010294:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010298:	460c      	mov	r4, r1
 801029a:	7e09      	ldrb	r1, [r1, #24]
 801029c:	b085      	sub	sp, #20
 801029e:	296e      	cmp	r1, #110	; 0x6e
 80102a0:	4617      	mov	r7, r2
 80102a2:	4606      	mov	r6, r0
 80102a4:	4698      	mov	r8, r3
 80102a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102a8:	f000 80b3 	beq.w	8010412 <_printf_i+0x182>
 80102ac:	d822      	bhi.n	80102f4 <_printf_i+0x64>
 80102ae:	2963      	cmp	r1, #99	; 0x63
 80102b0:	d036      	beq.n	8010320 <_printf_i+0x90>
 80102b2:	d80a      	bhi.n	80102ca <_printf_i+0x3a>
 80102b4:	2900      	cmp	r1, #0
 80102b6:	f000 80b9 	beq.w	801042c <_printf_i+0x19c>
 80102ba:	2958      	cmp	r1, #88	; 0x58
 80102bc:	f000 8083 	beq.w	80103c6 <_printf_i+0x136>
 80102c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80102c8:	e032      	b.n	8010330 <_printf_i+0xa0>
 80102ca:	2964      	cmp	r1, #100	; 0x64
 80102cc:	d001      	beq.n	80102d2 <_printf_i+0x42>
 80102ce:	2969      	cmp	r1, #105	; 0x69
 80102d0:	d1f6      	bne.n	80102c0 <_printf_i+0x30>
 80102d2:	6820      	ldr	r0, [r4, #0]
 80102d4:	6813      	ldr	r3, [r2, #0]
 80102d6:	0605      	lsls	r5, r0, #24
 80102d8:	f103 0104 	add.w	r1, r3, #4
 80102dc:	d52a      	bpl.n	8010334 <_printf_i+0xa4>
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6011      	str	r1, [r2, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	da03      	bge.n	80102ee <_printf_i+0x5e>
 80102e6:	222d      	movs	r2, #45	; 0x2d
 80102e8:	425b      	negs	r3, r3
 80102ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80102ee:	486f      	ldr	r0, [pc, #444]	; (80104ac <_printf_i+0x21c>)
 80102f0:	220a      	movs	r2, #10
 80102f2:	e039      	b.n	8010368 <_printf_i+0xd8>
 80102f4:	2973      	cmp	r1, #115	; 0x73
 80102f6:	f000 809d 	beq.w	8010434 <_printf_i+0x1a4>
 80102fa:	d808      	bhi.n	801030e <_printf_i+0x7e>
 80102fc:	296f      	cmp	r1, #111	; 0x6f
 80102fe:	d020      	beq.n	8010342 <_printf_i+0xb2>
 8010300:	2970      	cmp	r1, #112	; 0x70
 8010302:	d1dd      	bne.n	80102c0 <_printf_i+0x30>
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	f043 0320 	orr.w	r3, r3, #32
 801030a:	6023      	str	r3, [r4, #0]
 801030c:	e003      	b.n	8010316 <_printf_i+0x86>
 801030e:	2975      	cmp	r1, #117	; 0x75
 8010310:	d017      	beq.n	8010342 <_printf_i+0xb2>
 8010312:	2978      	cmp	r1, #120	; 0x78
 8010314:	d1d4      	bne.n	80102c0 <_printf_i+0x30>
 8010316:	2378      	movs	r3, #120	; 0x78
 8010318:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801031c:	4864      	ldr	r0, [pc, #400]	; (80104b0 <_printf_i+0x220>)
 801031e:	e055      	b.n	80103cc <_printf_i+0x13c>
 8010320:	6813      	ldr	r3, [r2, #0]
 8010322:	1d19      	adds	r1, r3, #4
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	6011      	str	r1, [r2, #0]
 8010328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801032c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010330:	2301      	movs	r3, #1
 8010332:	e08c      	b.n	801044e <_printf_i+0x1be>
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6011      	str	r1, [r2, #0]
 8010338:	f010 0f40 	tst.w	r0, #64	; 0x40
 801033c:	bf18      	it	ne
 801033e:	b21b      	sxthne	r3, r3
 8010340:	e7cf      	b.n	80102e2 <_printf_i+0x52>
 8010342:	6813      	ldr	r3, [r2, #0]
 8010344:	6825      	ldr	r5, [r4, #0]
 8010346:	1d18      	adds	r0, r3, #4
 8010348:	6010      	str	r0, [r2, #0]
 801034a:	0628      	lsls	r0, r5, #24
 801034c:	d501      	bpl.n	8010352 <_printf_i+0xc2>
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	e002      	b.n	8010358 <_printf_i+0xc8>
 8010352:	0668      	lsls	r0, r5, #25
 8010354:	d5fb      	bpl.n	801034e <_printf_i+0xbe>
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	4854      	ldr	r0, [pc, #336]	; (80104ac <_printf_i+0x21c>)
 801035a:	296f      	cmp	r1, #111	; 0x6f
 801035c:	bf14      	ite	ne
 801035e:	220a      	movne	r2, #10
 8010360:	2208      	moveq	r2, #8
 8010362:	2100      	movs	r1, #0
 8010364:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010368:	6865      	ldr	r5, [r4, #4]
 801036a:	60a5      	str	r5, [r4, #8]
 801036c:	2d00      	cmp	r5, #0
 801036e:	f2c0 8095 	blt.w	801049c <_printf_i+0x20c>
 8010372:	6821      	ldr	r1, [r4, #0]
 8010374:	f021 0104 	bic.w	r1, r1, #4
 8010378:	6021      	str	r1, [r4, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d13d      	bne.n	80103fa <_printf_i+0x16a>
 801037e:	2d00      	cmp	r5, #0
 8010380:	f040 808e 	bne.w	80104a0 <_printf_i+0x210>
 8010384:	4665      	mov	r5, ip
 8010386:	2a08      	cmp	r2, #8
 8010388:	d10b      	bne.n	80103a2 <_printf_i+0x112>
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	07db      	lsls	r3, r3, #31
 801038e:	d508      	bpl.n	80103a2 <_printf_i+0x112>
 8010390:	6923      	ldr	r3, [r4, #16]
 8010392:	6862      	ldr	r2, [r4, #4]
 8010394:	429a      	cmp	r2, r3
 8010396:	bfde      	ittt	le
 8010398:	2330      	movle	r3, #48	; 0x30
 801039a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801039e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103a2:	ebac 0305 	sub.w	r3, ip, r5
 80103a6:	6123      	str	r3, [r4, #16]
 80103a8:	f8cd 8000 	str.w	r8, [sp]
 80103ac:	463b      	mov	r3, r7
 80103ae:	aa03      	add	r2, sp, #12
 80103b0:	4621      	mov	r1, r4
 80103b2:	4630      	mov	r0, r6
 80103b4:	f7ff fef6 	bl	80101a4 <_printf_common>
 80103b8:	3001      	adds	r0, #1
 80103ba:	d14d      	bne.n	8010458 <_printf_i+0x1c8>
 80103bc:	f04f 30ff 	mov.w	r0, #4294967295
 80103c0:	b005      	add	sp, #20
 80103c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c6:	4839      	ldr	r0, [pc, #228]	; (80104ac <_printf_i+0x21c>)
 80103c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80103cc:	6813      	ldr	r3, [r2, #0]
 80103ce:	6821      	ldr	r1, [r4, #0]
 80103d0:	1d1d      	adds	r5, r3, #4
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6015      	str	r5, [r2, #0]
 80103d6:	060a      	lsls	r2, r1, #24
 80103d8:	d50b      	bpl.n	80103f2 <_printf_i+0x162>
 80103da:	07ca      	lsls	r2, r1, #31
 80103dc:	bf44      	itt	mi
 80103de:	f041 0120 	orrmi.w	r1, r1, #32
 80103e2:	6021      	strmi	r1, [r4, #0]
 80103e4:	b91b      	cbnz	r3, 80103ee <_printf_i+0x15e>
 80103e6:	6822      	ldr	r2, [r4, #0]
 80103e8:	f022 0220 	bic.w	r2, r2, #32
 80103ec:	6022      	str	r2, [r4, #0]
 80103ee:	2210      	movs	r2, #16
 80103f0:	e7b7      	b.n	8010362 <_printf_i+0xd2>
 80103f2:	064d      	lsls	r5, r1, #25
 80103f4:	bf48      	it	mi
 80103f6:	b29b      	uxthmi	r3, r3
 80103f8:	e7ef      	b.n	80103da <_printf_i+0x14a>
 80103fa:	4665      	mov	r5, ip
 80103fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010400:	fb02 3311 	mls	r3, r2, r1, r3
 8010404:	5cc3      	ldrb	r3, [r0, r3]
 8010406:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801040a:	460b      	mov	r3, r1
 801040c:	2900      	cmp	r1, #0
 801040e:	d1f5      	bne.n	80103fc <_printf_i+0x16c>
 8010410:	e7b9      	b.n	8010386 <_printf_i+0xf6>
 8010412:	6813      	ldr	r3, [r2, #0]
 8010414:	6825      	ldr	r5, [r4, #0]
 8010416:	6961      	ldr	r1, [r4, #20]
 8010418:	1d18      	adds	r0, r3, #4
 801041a:	6010      	str	r0, [r2, #0]
 801041c:	0628      	lsls	r0, r5, #24
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	d501      	bpl.n	8010426 <_printf_i+0x196>
 8010422:	6019      	str	r1, [r3, #0]
 8010424:	e002      	b.n	801042c <_printf_i+0x19c>
 8010426:	066a      	lsls	r2, r5, #25
 8010428:	d5fb      	bpl.n	8010422 <_printf_i+0x192>
 801042a:	8019      	strh	r1, [r3, #0]
 801042c:	2300      	movs	r3, #0
 801042e:	6123      	str	r3, [r4, #16]
 8010430:	4665      	mov	r5, ip
 8010432:	e7b9      	b.n	80103a8 <_printf_i+0x118>
 8010434:	6813      	ldr	r3, [r2, #0]
 8010436:	1d19      	adds	r1, r3, #4
 8010438:	6011      	str	r1, [r2, #0]
 801043a:	681d      	ldr	r5, [r3, #0]
 801043c:	6862      	ldr	r2, [r4, #4]
 801043e:	2100      	movs	r1, #0
 8010440:	4628      	mov	r0, r5
 8010442:	f7ef fecd 	bl	80001e0 <memchr>
 8010446:	b108      	cbz	r0, 801044c <_printf_i+0x1bc>
 8010448:	1b40      	subs	r0, r0, r5
 801044a:	6060      	str	r0, [r4, #4]
 801044c:	6863      	ldr	r3, [r4, #4]
 801044e:	6123      	str	r3, [r4, #16]
 8010450:	2300      	movs	r3, #0
 8010452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010456:	e7a7      	b.n	80103a8 <_printf_i+0x118>
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	462a      	mov	r2, r5
 801045c:	4639      	mov	r1, r7
 801045e:	4630      	mov	r0, r6
 8010460:	47c0      	blx	r8
 8010462:	3001      	adds	r0, #1
 8010464:	d0aa      	beq.n	80103bc <_printf_i+0x12c>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	079b      	lsls	r3, r3, #30
 801046a:	d413      	bmi.n	8010494 <_printf_i+0x204>
 801046c:	68e0      	ldr	r0, [r4, #12]
 801046e:	9b03      	ldr	r3, [sp, #12]
 8010470:	4298      	cmp	r0, r3
 8010472:	bfb8      	it	lt
 8010474:	4618      	movlt	r0, r3
 8010476:	e7a3      	b.n	80103c0 <_printf_i+0x130>
 8010478:	2301      	movs	r3, #1
 801047a:	464a      	mov	r2, r9
 801047c:	4639      	mov	r1, r7
 801047e:	4630      	mov	r0, r6
 8010480:	47c0      	blx	r8
 8010482:	3001      	adds	r0, #1
 8010484:	d09a      	beq.n	80103bc <_printf_i+0x12c>
 8010486:	3501      	adds	r5, #1
 8010488:	68e3      	ldr	r3, [r4, #12]
 801048a:	9a03      	ldr	r2, [sp, #12]
 801048c:	1a9b      	subs	r3, r3, r2
 801048e:	42ab      	cmp	r3, r5
 8010490:	dcf2      	bgt.n	8010478 <_printf_i+0x1e8>
 8010492:	e7eb      	b.n	801046c <_printf_i+0x1dc>
 8010494:	2500      	movs	r5, #0
 8010496:	f104 0919 	add.w	r9, r4, #25
 801049a:	e7f5      	b.n	8010488 <_printf_i+0x1f8>
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1ac      	bne.n	80103fa <_printf_i+0x16a>
 80104a0:	7803      	ldrb	r3, [r0, #0]
 80104a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104aa:	e76c      	b.n	8010386 <_printf_i+0xf6>
 80104ac:	08015232 	.word	0x08015232
 80104b0:	08015243 	.word	0x08015243

080104b4 <_scanf_float>:
 80104b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	469a      	mov	sl, r3
 80104ba:	688b      	ldr	r3, [r1, #8]
 80104bc:	4616      	mov	r6, r2
 80104be:	1e5a      	subs	r2, r3, #1
 80104c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80104c4:	b087      	sub	sp, #28
 80104c6:	bf83      	ittte	hi
 80104c8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80104cc:	189b      	addhi	r3, r3, r2
 80104ce:	9301      	strhi	r3, [sp, #4]
 80104d0:	2300      	movls	r3, #0
 80104d2:	bf86      	itte	hi
 80104d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80104d8:	608b      	strhi	r3, [r1, #8]
 80104da:	9301      	strls	r3, [sp, #4]
 80104dc:	680b      	ldr	r3, [r1, #0]
 80104de:	4688      	mov	r8, r1
 80104e0:	f04f 0b00 	mov.w	fp, #0
 80104e4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80104e8:	f848 3b1c 	str.w	r3, [r8], #28
 80104ec:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80104f0:	4607      	mov	r7, r0
 80104f2:	460c      	mov	r4, r1
 80104f4:	4645      	mov	r5, r8
 80104f6:	465a      	mov	r2, fp
 80104f8:	46d9      	mov	r9, fp
 80104fa:	f8cd b008 	str.w	fp, [sp, #8]
 80104fe:	68a1      	ldr	r1, [r4, #8]
 8010500:	b181      	cbz	r1, 8010524 <_scanf_float+0x70>
 8010502:	6833      	ldr	r3, [r6, #0]
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	2b49      	cmp	r3, #73	; 0x49
 8010508:	d071      	beq.n	80105ee <_scanf_float+0x13a>
 801050a:	d84d      	bhi.n	80105a8 <_scanf_float+0xf4>
 801050c:	2b39      	cmp	r3, #57	; 0x39
 801050e:	d840      	bhi.n	8010592 <_scanf_float+0xde>
 8010510:	2b31      	cmp	r3, #49	; 0x31
 8010512:	f080 8088 	bcs.w	8010626 <_scanf_float+0x172>
 8010516:	2b2d      	cmp	r3, #45	; 0x2d
 8010518:	f000 8090 	beq.w	801063c <_scanf_float+0x188>
 801051c:	d815      	bhi.n	801054a <_scanf_float+0x96>
 801051e:	2b2b      	cmp	r3, #43	; 0x2b
 8010520:	f000 808c 	beq.w	801063c <_scanf_float+0x188>
 8010524:	f1b9 0f00 	cmp.w	r9, #0
 8010528:	d003      	beq.n	8010532 <_scanf_float+0x7e>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010530:	6023      	str	r3, [r4, #0]
 8010532:	3a01      	subs	r2, #1
 8010534:	2a01      	cmp	r2, #1
 8010536:	f200 80ea 	bhi.w	801070e <_scanf_float+0x25a>
 801053a:	4545      	cmp	r5, r8
 801053c:	f200 80dc 	bhi.w	80106f8 <_scanf_float+0x244>
 8010540:	2601      	movs	r6, #1
 8010542:	4630      	mov	r0, r6
 8010544:	b007      	add	sp, #28
 8010546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801054a:	2b2e      	cmp	r3, #46	; 0x2e
 801054c:	f000 809f 	beq.w	801068e <_scanf_float+0x1da>
 8010550:	2b30      	cmp	r3, #48	; 0x30
 8010552:	d1e7      	bne.n	8010524 <_scanf_float+0x70>
 8010554:	6820      	ldr	r0, [r4, #0]
 8010556:	f410 7f80 	tst.w	r0, #256	; 0x100
 801055a:	d064      	beq.n	8010626 <_scanf_float+0x172>
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8010562:	6020      	str	r0, [r4, #0]
 8010564:	f109 0901 	add.w	r9, r9, #1
 8010568:	b11b      	cbz	r3, 8010572 <_scanf_float+0xbe>
 801056a:	3b01      	subs	r3, #1
 801056c:	3101      	adds	r1, #1
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	60a1      	str	r1, [r4, #8]
 8010572:	68a3      	ldr	r3, [r4, #8]
 8010574:	3b01      	subs	r3, #1
 8010576:	60a3      	str	r3, [r4, #8]
 8010578:	6923      	ldr	r3, [r4, #16]
 801057a:	3301      	adds	r3, #1
 801057c:	6123      	str	r3, [r4, #16]
 801057e:	6873      	ldr	r3, [r6, #4]
 8010580:	3b01      	subs	r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	6073      	str	r3, [r6, #4]
 8010586:	f340 80ac 	ble.w	80106e2 <_scanf_float+0x22e>
 801058a:	6833      	ldr	r3, [r6, #0]
 801058c:	3301      	adds	r3, #1
 801058e:	6033      	str	r3, [r6, #0]
 8010590:	e7b5      	b.n	80104fe <_scanf_float+0x4a>
 8010592:	2b45      	cmp	r3, #69	; 0x45
 8010594:	f000 8085 	beq.w	80106a2 <_scanf_float+0x1ee>
 8010598:	2b46      	cmp	r3, #70	; 0x46
 801059a:	d06a      	beq.n	8010672 <_scanf_float+0x1be>
 801059c:	2b41      	cmp	r3, #65	; 0x41
 801059e:	d1c1      	bne.n	8010524 <_scanf_float+0x70>
 80105a0:	2a01      	cmp	r2, #1
 80105a2:	d1bf      	bne.n	8010524 <_scanf_float+0x70>
 80105a4:	2202      	movs	r2, #2
 80105a6:	e046      	b.n	8010636 <_scanf_float+0x182>
 80105a8:	2b65      	cmp	r3, #101	; 0x65
 80105aa:	d07a      	beq.n	80106a2 <_scanf_float+0x1ee>
 80105ac:	d818      	bhi.n	80105e0 <_scanf_float+0x12c>
 80105ae:	2b54      	cmp	r3, #84	; 0x54
 80105b0:	d066      	beq.n	8010680 <_scanf_float+0x1cc>
 80105b2:	d811      	bhi.n	80105d8 <_scanf_float+0x124>
 80105b4:	2b4e      	cmp	r3, #78	; 0x4e
 80105b6:	d1b5      	bne.n	8010524 <_scanf_float+0x70>
 80105b8:	2a00      	cmp	r2, #0
 80105ba:	d146      	bne.n	801064a <_scanf_float+0x196>
 80105bc:	f1b9 0f00 	cmp.w	r9, #0
 80105c0:	d145      	bne.n	801064e <_scanf_float+0x19a>
 80105c2:	6821      	ldr	r1, [r4, #0]
 80105c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80105c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80105cc:	d13f      	bne.n	801064e <_scanf_float+0x19a>
 80105ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80105d2:	6021      	str	r1, [r4, #0]
 80105d4:	2201      	movs	r2, #1
 80105d6:	e02e      	b.n	8010636 <_scanf_float+0x182>
 80105d8:	2b59      	cmp	r3, #89	; 0x59
 80105da:	d01e      	beq.n	801061a <_scanf_float+0x166>
 80105dc:	2b61      	cmp	r3, #97	; 0x61
 80105de:	e7de      	b.n	801059e <_scanf_float+0xea>
 80105e0:	2b6e      	cmp	r3, #110	; 0x6e
 80105e2:	d0e9      	beq.n	80105b8 <_scanf_float+0x104>
 80105e4:	d815      	bhi.n	8010612 <_scanf_float+0x15e>
 80105e6:	2b66      	cmp	r3, #102	; 0x66
 80105e8:	d043      	beq.n	8010672 <_scanf_float+0x1be>
 80105ea:	2b69      	cmp	r3, #105	; 0x69
 80105ec:	d19a      	bne.n	8010524 <_scanf_float+0x70>
 80105ee:	f1bb 0f00 	cmp.w	fp, #0
 80105f2:	d138      	bne.n	8010666 <_scanf_float+0x1b2>
 80105f4:	f1b9 0f00 	cmp.w	r9, #0
 80105f8:	d197      	bne.n	801052a <_scanf_float+0x76>
 80105fa:	6821      	ldr	r1, [r4, #0]
 80105fc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010600:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010604:	d195      	bne.n	8010532 <_scanf_float+0x7e>
 8010606:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801060a:	6021      	str	r1, [r4, #0]
 801060c:	f04f 0b01 	mov.w	fp, #1
 8010610:	e011      	b.n	8010636 <_scanf_float+0x182>
 8010612:	2b74      	cmp	r3, #116	; 0x74
 8010614:	d034      	beq.n	8010680 <_scanf_float+0x1cc>
 8010616:	2b79      	cmp	r3, #121	; 0x79
 8010618:	d184      	bne.n	8010524 <_scanf_float+0x70>
 801061a:	f1bb 0f07 	cmp.w	fp, #7
 801061e:	d181      	bne.n	8010524 <_scanf_float+0x70>
 8010620:	f04f 0b08 	mov.w	fp, #8
 8010624:	e007      	b.n	8010636 <_scanf_float+0x182>
 8010626:	eb12 0f0b 	cmn.w	r2, fp
 801062a:	f47f af7b 	bne.w	8010524 <_scanf_float+0x70>
 801062e:	6821      	ldr	r1, [r4, #0]
 8010630:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8010634:	6021      	str	r1, [r4, #0]
 8010636:	702b      	strb	r3, [r5, #0]
 8010638:	3501      	adds	r5, #1
 801063a:	e79a      	b.n	8010572 <_scanf_float+0xbe>
 801063c:	6821      	ldr	r1, [r4, #0]
 801063e:	0608      	lsls	r0, r1, #24
 8010640:	f57f af70 	bpl.w	8010524 <_scanf_float+0x70>
 8010644:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010648:	e7f4      	b.n	8010634 <_scanf_float+0x180>
 801064a:	2a02      	cmp	r2, #2
 801064c:	d047      	beq.n	80106de <_scanf_float+0x22a>
 801064e:	f1bb 0f01 	cmp.w	fp, #1
 8010652:	d003      	beq.n	801065c <_scanf_float+0x1a8>
 8010654:	f1bb 0f04 	cmp.w	fp, #4
 8010658:	f47f af64 	bne.w	8010524 <_scanf_float+0x70>
 801065c:	f10b 0b01 	add.w	fp, fp, #1
 8010660:	fa5f fb8b 	uxtb.w	fp, fp
 8010664:	e7e7      	b.n	8010636 <_scanf_float+0x182>
 8010666:	f1bb 0f03 	cmp.w	fp, #3
 801066a:	d0f7      	beq.n	801065c <_scanf_float+0x1a8>
 801066c:	f1bb 0f05 	cmp.w	fp, #5
 8010670:	e7f2      	b.n	8010658 <_scanf_float+0x1a4>
 8010672:	f1bb 0f02 	cmp.w	fp, #2
 8010676:	f47f af55 	bne.w	8010524 <_scanf_float+0x70>
 801067a:	f04f 0b03 	mov.w	fp, #3
 801067e:	e7da      	b.n	8010636 <_scanf_float+0x182>
 8010680:	f1bb 0f06 	cmp.w	fp, #6
 8010684:	f47f af4e 	bne.w	8010524 <_scanf_float+0x70>
 8010688:	f04f 0b07 	mov.w	fp, #7
 801068c:	e7d3      	b.n	8010636 <_scanf_float+0x182>
 801068e:	6821      	ldr	r1, [r4, #0]
 8010690:	0588      	lsls	r0, r1, #22
 8010692:	f57f af47 	bpl.w	8010524 <_scanf_float+0x70>
 8010696:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801069a:	6021      	str	r1, [r4, #0]
 801069c:	f8cd 9008 	str.w	r9, [sp, #8]
 80106a0:	e7c9      	b.n	8010636 <_scanf_float+0x182>
 80106a2:	6821      	ldr	r1, [r4, #0]
 80106a4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80106a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80106ac:	d006      	beq.n	80106bc <_scanf_float+0x208>
 80106ae:	0548      	lsls	r0, r1, #21
 80106b0:	f57f af38 	bpl.w	8010524 <_scanf_float+0x70>
 80106b4:	f1b9 0f00 	cmp.w	r9, #0
 80106b8:	f43f af3b 	beq.w	8010532 <_scanf_float+0x7e>
 80106bc:	0588      	lsls	r0, r1, #22
 80106be:	bf58      	it	pl
 80106c0:	9802      	ldrpl	r0, [sp, #8]
 80106c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80106c6:	bf58      	it	pl
 80106c8:	eba9 0000 	subpl.w	r0, r9, r0
 80106cc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80106d0:	bf58      	it	pl
 80106d2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80106d6:	6021      	str	r1, [r4, #0]
 80106d8:	f04f 0900 	mov.w	r9, #0
 80106dc:	e7ab      	b.n	8010636 <_scanf_float+0x182>
 80106de:	2203      	movs	r2, #3
 80106e0:	e7a9      	b.n	8010636 <_scanf_float+0x182>
 80106e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80106e6:	9205      	str	r2, [sp, #20]
 80106e8:	4631      	mov	r1, r6
 80106ea:	4638      	mov	r0, r7
 80106ec:	4798      	blx	r3
 80106ee:	9a05      	ldr	r2, [sp, #20]
 80106f0:	2800      	cmp	r0, #0
 80106f2:	f43f af04 	beq.w	80104fe <_scanf_float+0x4a>
 80106f6:	e715      	b.n	8010524 <_scanf_float+0x70>
 80106f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80106fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010700:	4632      	mov	r2, r6
 8010702:	4638      	mov	r0, r7
 8010704:	4798      	blx	r3
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	3b01      	subs	r3, #1
 801070a:	6123      	str	r3, [r4, #16]
 801070c:	e715      	b.n	801053a <_scanf_float+0x86>
 801070e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010712:	2b06      	cmp	r3, #6
 8010714:	d80a      	bhi.n	801072c <_scanf_float+0x278>
 8010716:	f1bb 0f02 	cmp.w	fp, #2
 801071a:	d968      	bls.n	80107ee <_scanf_float+0x33a>
 801071c:	f1ab 0b03 	sub.w	fp, fp, #3
 8010720:	fa5f fb8b 	uxtb.w	fp, fp
 8010724:	eba5 0b0b 	sub.w	fp, r5, fp
 8010728:	455d      	cmp	r5, fp
 801072a:	d14b      	bne.n	80107c4 <_scanf_float+0x310>
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	05da      	lsls	r2, r3, #23
 8010730:	d51f      	bpl.n	8010772 <_scanf_float+0x2be>
 8010732:	055b      	lsls	r3, r3, #21
 8010734:	d468      	bmi.n	8010808 <_scanf_float+0x354>
 8010736:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801073a:	6923      	ldr	r3, [r4, #16]
 801073c:	2965      	cmp	r1, #101	; 0x65
 801073e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010742:	f105 3bff 	add.w	fp, r5, #4294967295
 8010746:	6123      	str	r3, [r4, #16]
 8010748:	d00d      	beq.n	8010766 <_scanf_float+0x2b2>
 801074a:	2945      	cmp	r1, #69	; 0x45
 801074c:	d00b      	beq.n	8010766 <_scanf_float+0x2b2>
 801074e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010752:	4632      	mov	r2, r6
 8010754:	4638      	mov	r0, r7
 8010756:	4798      	blx	r3
 8010758:	6923      	ldr	r3, [r4, #16]
 801075a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801075e:	3b01      	subs	r3, #1
 8010760:	f1a5 0b02 	sub.w	fp, r5, #2
 8010764:	6123      	str	r3, [r4, #16]
 8010766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801076a:	4632      	mov	r2, r6
 801076c:	4638      	mov	r0, r7
 801076e:	4798      	blx	r3
 8010770:	465d      	mov	r5, fp
 8010772:	6826      	ldr	r6, [r4, #0]
 8010774:	f016 0610 	ands.w	r6, r6, #16
 8010778:	d17a      	bne.n	8010870 <_scanf_float+0x3bc>
 801077a:	702e      	strb	r6, [r5, #0]
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010786:	d142      	bne.n	801080e <_scanf_float+0x35a>
 8010788:	9b02      	ldr	r3, [sp, #8]
 801078a:	eba9 0303 	sub.w	r3, r9, r3
 801078e:	425a      	negs	r2, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	d149      	bne.n	8010828 <_scanf_float+0x374>
 8010794:	2200      	movs	r2, #0
 8010796:	4641      	mov	r1, r8
 8010798:	4638      	mov	r0, r7
 801079a:	f000 fec5 	bl	8011528 <_strtod_r>
 801079e:	6825      	ldr	r5, [r4, #0]
 80107a0:	f8da 3000 	ldr.w	r3, [sl]
 80107a4:	f015 0f02 	tst.w	r5, #2
 80107a8:	f103 0204 	add.w	r2, r3, #4
 80107ac:	ec59 8b10 	vmov	r8, r9, d0
 80107b0:	f8ca 2000 	str.w	r2, [sl]
 80107b4:	d043      	beq.n	801083e <_scanf_float+0x38a>
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	e9c3 8900 	strd	r8, r9, [r3]
 80107bc:	68e3      	ldr	r3, [r4, #12]
 80107be:	3301      	adds	r3, #1
 80107c0:	60e3      	str	r3, [r4, #12]
 80107c2:	e6be      	b.n	8010542 <_scanf_float+0x8e>
 80107c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80107cc:	4632      	mov	r2, r6
 80107ce:	4638      	mov	r0, r7
 80107d0:	4798      	blx	r3
 80107d2:	6923      	ldr	r3, [r4, #16]
 80107d4:	3b01      	subs	r3, #1
 80107d6:	6123      	str	r3, [r4, #16]
 80107d8:	e7a6      	b.n	8010728 <_scanf_float+0x274>
 80107da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80107e2:	4632      	mov	r2, r6
 80107e4:	4638      	mov	r0, r7
 80107e6:	4798      	blx	r3
 80107e8:	6923      	ldr	r3, [r4, #16]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	4545      	cmp	r5, r8
 80107f0:	d8f3      	bhi.n	80107da <_scanf_float+0x326>
 80107f2:	e6a5      	b.n	8010540 <_scanf_float+0x8c>
 80107f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80107f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80107fc:	4632      	mov	r2, r6
 80107fe:	4638      	mov	r0, r7
 8010800:	4798      	blx	r3
 8010802:	6923      	ldr	r3, [r4, #16]
 8010804:	3b01      	subs	r3, #1
 8010806:	6123      	str	r3, [r4, #16]
 8010808:	4545      	cmp	r5, r8
 801080a:	d8f3      	bhi.n	80107f4 <_scanf_float+0x340>
 801080c:	e698      	b.n	8010540 <_scanf_float+0x8c>
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d0bf      	beq.n	8010794 <_scanf_float+0x2e0>
 8010814:	9904      	ldr	r1, [sp, #16]
 8010816:	230a      	movs	r3, #10
 8010818:	4632      	mov	r2, r6
 801081a:	3101      	adds	r1, #1
 801081c:	4638      	mov	r0, r7
 801081e:	f000 ff0f 	bl	8011640 <_strtol_r>
 8010822:	9b03      	ldr	r3, [sp, #12]
 8010824:	9d04      	ldr	r5, [sp, #16]
 8010826:	1ac2      	subs	r2, r0, r3
 8010828:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801082c:	429d      	cmp	r5, r3
 801082e:	bf28      	it	cs
 8010830:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010834:	490f      	ldr	r1, [pc, #60]	; (8010874 <_scanf_float+0x3c0>)
 8010836:	4628      	mov	r0, r5
 8010838:	f000 f834 	bl	80108a4 <siprintf>
 801083c:	e7aa      	b.n	8010794 <_scanf_float+0x2e0>
 801083e:	f015 0504 	ands.w	r5, r5, #4
 8010842:	d1b8      	bne.n	80107b6 <_scanf_float+0x302>
 8010844:	681f      	ldr	r7, [r3, #0]
 8010846:	ee10 2a10 	vmov	r2, s0
 801084a:	464b      	mov	r3, r9
 801084c:	ee10 0a10 	vmov	r0, s0
 8010850:	4649      	mov	r1, r9
 8010852:	f7f0 f96b 	bl	8000b2c <__aeabi_dcmpun>
 8010856:	b128      	cbz	r0, 8010864 <_scanf_float+0x3b0>
 8010858:	4628      	mov	r0, r5
 801085a:	f000 f81d 	bl	8010898 <nanf>
 801085e:	ed87 0a00 	vstr	s0, [r7]
 8010862:	e7ab      	b.n	80107bc <_scanf_float+0x308>
 8010864:	4640      	mov	r0, r8
 8010866:	4649      	mov	r1, r9
 8010868:	f7f0 f9be 	bl	8000be8 <__aeabi_d2f>
 801086c:	6038      	str	r0, [r7, #0]
 801086e:	e7a5      	b.n	80107bc <_scanf_float+0x308>
 8010870:	2600      	movs	r6, #0
 8010872:	e666      	b.n	8010542 <_scanf_float+0x8e>
 8010874:	08015254 	.word	0x08015254

08010878 <_sbrk_r>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	4c06      	ldr	r4, [pc, #24]	; (8010894 <_sbrk_r+0x1c>)
 801087c:	2300      	movs	r3, #0
 801087e:	4605      	mov	r5, r0
 8010880:	4608      	mov	r0, r1
 8010882:	6023      	str	r3, [r4, #0]
 8010884:	f7fe fb0e 	bl	800eea4 <_sbrk>
 8010888:	1c43      	adds	r3, r0, #1
 801088a:	d102      	bne.n	8010892 <_sbrk_r+0x1a>
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	b103      	cbz	r3, 8010892 <_sbrk_r+0x1a>
 8010890:	602b      	str	r3, [r5, #0]
 8010892:	bd38      	pop	{r3, r4, r5, pc}
 8010894:	20007e94 	.word	0x20007e94

08010898 <nanf>:
 8010898:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80108a0 <nanf+0x8>
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	7fc00000 	.word	0x7fc00000

080108a4 <siprintf>:
 80108a4:	b40e      	push	{r1, r2, r3}
 80108a6:	b500      	push	{lr}
 80108a8:	b09c      	sub	sp, #112	; 0x70
 80108aa:	ab1d      	add	r3, sp, #116	; 0x74
 80108ac:	9002      	str	r0, [sp, #8]
 80108ae:	9006      	str	r0, [sp, #24]
 80108b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108b4:	4809      	ldr	r0, [pc, #36]	; (80108dc <siprintf+0x38>)
 80108b6:	9107      	str	r1, [sp, #28]
 80108b8:	9104      	str	r1, [sp, #16]
 80108ba:	4909      	ldr	r1, [pc, #36]	; (80108e0 <siprintf+0x3c>)
 80108bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80108c0:	9105      	str	r1, [sp, #20]
 80108c2:	6800      	ldr	r0, [r0, #0]
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	a902      	add	r1, sp, #8
 80108c8:	f002 fce8 	bl	801329c <_svfiprintf_r>
 80108cc:	9b02      	ldr	r3, [sp, #8]
 80108ce:	2200      	movs	r2, #0
 80108d0:	701a      	strb	r2, [r3, #0]
 80108d2:	b01c      	add	sp, #112	; 0x70
 80108d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108d8:	b003      	add	sp, #12
 80108da:	4770      	bx	lr
 80108dc:	200001c0 	.word	0x200001c0
 80108e0:	ffff0208 	.word	0xffff0208

080108e4 <strncmp>:
 80108e4:	b510      	push	{r4, lr}
 80108e6:	b16a      	cbz	r2, 8010904 <strncmp+0x20>
 80108e8:	3901      	subs	r1, #1
 80108ea:	1884      	adds	r4, r0, r2
 80108ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80108f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d103      	bne.n	8010900 <strncmp+0x1c>
 80108f8:	42a0      	cmp	r0, r4
 80108fa:	d001      	beq.n	8010900 <strncmp+0x1c>
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d1f5      	bne.n	80108ec <strncmp+0x8>
 8010900:	1a98      	subs	r0, r3, r2
 8010902:	bd10      	pop	{r4, pc}
 8010904:	4610      	mov	r0, r2
 8010906:	e7fc      	b.n	8010902 <strncmp+0x1e>

08010908 <sulp>:
 8010908:	b570      	push	{r4, r5, r6, lr}
 801090a:	4604      	mov	r4, r0
 801090c:	460d      	mov	r5, r1
 801090e:	ec45 4b10 	vmov	d0, r4, r5
 8010912:	4616      	mov	r6, r2
 8010914:	f002 fb26 	bl	8012f64 <__ulp>
 8010918:	ec51 0b10 	vmov	r0, r1, d0
 801091c:	b17e      	cbz	r6, 801093e <sulp+0x36>
 801091e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010926:	2b00      	cmp	r3, #0
 8010928:	dd09      	ble.n	801093e <sulp+0x36>
 801092a:	051b      	lsls	r3, r3, #20
 801092c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010930:	2400      	movs	r4, #0
 8010932:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010936:	4622      	mov	r2, r4
 8010938:	462b      	mov	r3, r5
 801093a:	f7ef fe5d 	bl	80005f8 <__aeabi_dmul>
 801093e:	bd70      	pop	{r4, r5, r6, pc}

08010940 <_strtod_l>:
 8010940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010944:	461f      	mov	r7, r3
 8010946:	b0a1      	sub	sp, #132	; 0x84
 8010948:	2300      	movs	r3, #0
 801094a:	4681      	mov	r9, r0
 801094c:	4638      	mov	r0, r7
 801094e:	460e      	mov	r6, r1
 8010950:	9217      	str	r2, [sp, #92]	; 0x5c
 8010952:	931c      	str	r3, [sp, #112]	; 0x70
 8010954:	f002 f815 	bl	8012982 <__localeconv_l>
 8010958:	4680      	mov	r8, r0
 801095a:	6800      	ldr	r0, [r0, #0]
 801095c:	f7ef fc38 	bl	80001d0 <strlen>
 8010960:	f04f 0a00 	mov.w	sl, #0
 8010964:	4604      	mov	r4, r0
 8010966:	f04f 0b00 	mov.w	fp, #0
 801096a:	961b      	str	r6, [sp, #108]	; 0x6c
 801096c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801096e:	781a      	ldrb	r2, [r3, #0]
 8010970:	2a0d      	cmp	r2, #13
 8010972:	d832      	bhi.n	80109da <_strtod_l+0x9a>
 8010974:	2a09      	cmp	r2, #9
 8010976:	d236      	bcs.n	80109e6 <_strtod_l+0xa6>
 8010978:	2a00      	cmp	r2, #0
 801097a:	d03e      	beq.n	80109fa <_strtod_l+0xba>
 801097c:	2300      	movs	r3, #0
 801097e:	930d      	str	r3, [sp, #52]	; 0x34
 8010980:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010982:	782b      	ldrb	r3, [r5, #0]
 8010984:	2b30      	cmp	r3, #48	; 0x30
 8010986:	f040 80ac 	bne.w	8010ae2 <_strtod_l+0x1a2>
 801098a:	786b      	ldrb	r3, [r5, #1]
 801098c:	2b58      	cmp	r3, #88	; 0x58
 801098e:	d001      	beq.n	8010994 <_strtod_l+0x54>
 8010990:	2b78      	cmp	r3, #120	; 0x78
 8010992:	d167      	bne.n	8010a64 <_strtod_l+0x124>
 8010994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010996:	9301      	str	r3, [sp, #4]
 8010998:	ab1c      	add	r3, sp, #112	; 0x70
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	9702      	str	r7, [sp, #8]
 801099e:	ab1d      	add	r3, sp, #116	; 0x74
 80109a0:	4a88      	ldr	r2, [pc, #544]	; (8010bc4 <_strtod_l+0x284>)
 80109a2:	a91b      	add	r1, sp, #108	; 0x6c
 80109a4:	4648      	mov	r0, r9
 80109a6:	f001 fd12 	bl	80123ce <__gethex>
 80109aa:	f010 0407 	ands.w	r4, r0, #7
 80109ae:	4606      	mov	r6, r0
 80109b0:	d005      	beq.n	80109be <_strtod_l+0x7e>
 80109b2:	2c06      	cmp	r4, #6
 80109b4:	d12b      	bne.n	8010a0e <_strtod_l+0xce>
 80109b6:	3501      	adds	r5, #1
 80109b8:	2300      	movs	r3, #0
 80109ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80109bc:	930d      	str	r3, [sp, #52]	; 0x34
 80109be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f040 859a 	bne.w	80114fa <_strtod_l+0xbba>
 80109c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109c8:	b1e3      	cbz	r3, 8010a04 <_strtod_l+0xc4>
 80109ca:	4652      	mov	r2, sl
 80109cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80109d0:	ec43 2b10 	vmov	d0, r2, r3
 80109d4:	b021      	add	sp, #132	; 0x84
 80109d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109da:	2a2b      	cmp	r2, #43	; 0x2b
 80109dc:	d015      	beq.n	8010a0a <_strtod_l+0xca>
 80109de:	2a2d      	cmp	r2, #45	; 0x2d
 80109e0:	d004      	beq.n	80109ec <_strtod_l+0xac>
 80109e2:	2a20      	cmp	r2, #32
 80109e4:	d1ca      	bne.n	801097c <_strtod_l+0x3c>
 80109e6:	3301      	adds	r3, #1
 80109e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80109ea:	e7bf      	b.n	801096c <_strtod_l+0x2c>
 80109ec:	2201      	movs	r2, #1
 80109ee:	920d      	str	r2, [sp, #52]	; 0x34
 80109f0:	1c5a      	adds	r2, r3, #1
 80109f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d1c2      	bne.n	8010980 <_strtod_l+0x40>
 80109fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f040 8579 	bne.w	80114f6 <_strtod_l+0xbb6>
 8010a04:	4652      	mov	r2, sl
 8010a06:	465b      	mov	r3, fp
 8010a08:	e7e2      	b.n	80109d0 <_strtod_l+0x90>
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	e7ef      	b.n	80109ee <_strtod_l+0xae>
 8010a0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010a10:	b13a      	cbz	r2, 8010a22 <_strtod_l+0xe2>
 8010a12:	2135      	movs	r1, #53	; 0x35
 8010a14:	a81e      	add	r0, sp, #120	; 0x78
 8010a16:	f002 fb9d 	bl	8013154 <__copybits>
 8010a1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010a1c:	4648      	mov	r0, r9
 8010a1e:	f002 f809 	bl	8012a34 <_Bfree>
 8010a22:	3c01      	subs	r4, #1
 8010a24:	2c04      	cmp	r4, #4
 8010a26:	d806      	bhi.n	8010a36 <_strtod_l+0xf6>
 8010a28:	e8df f004 	tbb	[pc, r4]
 8010a2c:	1714030a 	.word	0x1714030a
 8010a30:	0a          	.byte	0x0a
 8010a31:	00          	.byte	0x00
 8010a32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8010a36:	0730      	lsls	r0, r6, #28
 8010a38:	d5c1      	bpl.n	80109be <_strtod_l+0x7e>
 8010a3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010a3e:	e7be      	b.n	80109be <_strtod_l+0x7e>
 8010a40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8010a44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010a46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010a4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010a4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010a52:	e7f0      	b.n	8010a36 <_strtod_l+0xf6>
 8010a54:	f8df b170 	ldr.w	fp, [pc, #368]	; 8010bc8 <_strtod_l+0x288>
 8010a58:	e7ed      	b.n	8010a36 <_strtod_l+0xf6>
 8010a5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8010a62:	e7e8      	b.n	8010a36 <_strtod_l+0xf6>
 8010a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a66:	1c5a      	adds	r2, r3, #1
 8010a68:	921b      	str	r2, [sp, #108]	; 0x6c
 8010a6a:	785b      	ldrb	r3, [r3, #1]
 8010a6c:	2b30      	cmp	r3, #48	; 0x30
 8010a6e:	d0f9      	beq.n	8010a64 <_strtod_l+0x124>
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d0a4      	beq.n	80109be <_strtod_l+0x7e>
 8010a74:	2301      	movs	r3, #1
 8010a76:	2500      	movs	r5, #0
 8010a78:	9306      	str	r3, [sp, #24]
 8010a7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a7c:	9308      	str	r3, [sp, #32]
 8010a7e:	9507      	str	r5, [sp, #28]
 8010a80:	9505      	str	r5, [sp, #20]
 8010a82:	220a      	movs	r2, #10
 8010a84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010a86:	7807      	ldrb	r7, [r0, #0]
 8010a88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010a8c:	b2d9      	uxtb	r1, r3
 8010a8e:	2909      	cmp	r1, #9
 8010a90:	d929      	bls.n	8010ae6 <_strtod_l+0x1a6>
 8010a92:	4622      	mov	r2, r4
 8010a94:	f8d8 1000 	ldr.w	r1, [r8]
 8010a98:	f7ff ff24 	bl	80108e4 <strncmp>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d031      	beq.n	8010b04 <_strtod_l+0x1c4>
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	9c05      	ldr	r4, [sp, #20]
 8010aa4:	9004      	str	r0, [sp, #16]
 8010aa6:	463b      	mov	r3, r7
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	2b65      	cmp	r3, #101	; 0x65
 8010aac:	d001      	beq.n	8010ab2 <_strtod_l+0x172>
 8010aae:	2b45      	cmp	r3, #69	; 0x45
 8010ab0:	d114      	bne.n	8010adc <_strtod_l+0x19c>
 8010ab2:	b924      	cbnz	r4, 8010abe <_strtod_l+0x17e>
 8010ab4:	b910      	cbnz	r0, 8010abc <_strtod_l+0x17c>
 8010ab6:	9b06      	ldr	r3, [sp, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d09e      	beq.n	80109fa <_strtod_l+0xba>
 8010abc:	2400      	movs	r4, #0
 8010abe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010ac0:	1c73      	adds	r3, r6, #1
 8010ac2:	931b      	str	r3, [sp, #108]	; 0x6c
 8010ac4:	7873      	ldrb	r3, [r6, #1]
 8010ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8010ac8:	d078      	beq.n	8010bbc <_strtod_l+0x27c>
 8010aca:	2b2d      	cmp	r3, #45	; 0x2d
 8010acc:	d070      	beq.n	8010bb0 <_strtod_l+0x270>
 8010ace:	f04f 0c00 	mov.w	ip, #0
 8010ad2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8010ad6:	2f09      	cmp	r7, #9
 8010ad8:	d97c      	bls.n	8010bd4 <_strtod_l+0x294>
 8010ada:	961b      	str	r6, [sp, #108]	; 0x6c
 8010adc:	f04f 0e00 	mov.w	lr, #0
 8010ae0:	e09a      	b.n	8010c18 <_strtod_l+0x2d8>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e7c7      	b.n	8010a76 <_strtod_l+0x136>
 8010ae6:	9905      	ldr	r1, [sp, #20]
 8010ae8:	2908      	cmp	r1, #8
 8010aea:	bfdd      	ittte	le
 8010aec:	9907      	ldrle	r1, [sp, #28]
 8010aee:	fb02 3301 	mlale	r3, r2, r1, r3
 8010af2:	9307      	strle	r3, [sp, #28]
 8010af4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8010af8:	9b05      	ldr	r3, [sp, #20]
 8010afa:	3001      	adds	r0, #1
 8010afc:	3301      	adds	r3, #1
 8010afe:	9305      	str	r3, [sp, #20]
 8010b00:	901b      	str	r0, [sp, #108]	; 0x6c
 8010b02:	e7bf      	b.n	8010a84 <_strtod_l+0x144>
 8010b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b06:	191a      	adds	r2, r3, r4
 8010b08:	921b      	str	r2, [sp, #108]	; 0x6c
 8010b0a:	9a05      	ldr	r2, [sp, #20]
 8010b0c:	5d1b      	ldrb	r3, [r3, r4]
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	d037      	beq.n	8010b82 <_strtod_l+0x242>
 8010b12:	9c05      	ldr	r4, [sp, #20]
 8010b14:	4602      	mov	r2, r0
 8010b16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010b1a:	2909      	cmp	r1, #9
 8010b1c:	d913      	bls.n	8010b46 <_strtod_l+0x206>
 8010b1e:	2101      	movs	r1, #1
 8010b20:	9104      	str	r1, [sp, #16]
 8010b22:	e7c2      	b.n	8010aaa <_strtod_l+0x16a>
 8010b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b26:	1c5a      	adds	r2, r3, #1
 8010b28:	921b      	str	r2, [sp, #108]	; 0x6c
 8010b2a:	785b      	ldrb	r3, [r3, #1]
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	2b30      	cmp	r3, #48	; 0x30
 8010b30:	d0f8      	beq.n	8010b24 <_strtod_l+0x1e4>
 8010b32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010b36:	2a08      	cmp	r2, #8
 8010b38:	f200 84e4 	bhi.w	8011504 <_strtod_l+0xbc4>
 8010b3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010b3e:	9208      	str	r2, [sp, #32]
 8010b40:	4602      	mov	r2, r0
 8010b42:	2000      	movs	r0, #0
 8010b44:	4604      	mov	r4, r0
 8010b46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8010b4a:	f100 0101 	add.w	r1, r0, #1
 8010b4e:	d012      	beq.n	8010b76 <_strtod_l+0x236>
 8010b50:	440a      	add	r2, r1
 8010b52:	eb00 0c04 	add.w	ip, r0, r4
 8010b56:	4621      	mov	r1, r4
 8010b58:	270a      	movs	r7, #10
 8010b5a:	458c      	cmp	ip, r1
 8010b5c:	d113      	bne.n	8010b86 <_strtod_l+0x246>
 8010b5e:	1821      	adds	r1, r4, r0
 8010b60:	2908      	cmp	r1, #8
 8010b62:	f104 0401 	add.w	r4, r4, #1
 8010b66:	4404      	add	r4, r0
 8010b68:	dc19      	bgt.n	8010b9e <_strtod_l+0x25e>
 8010b6a:	9b07      	ldr	r3, [sp, #28]
 8010b6c:	210a      	movs	r1, #10
 8010b6e:	fb01 e303 	mla	r3, r1, r3, lr
 8010b72:	9307      	str	r3, [sp, #28]
 8010b74:	2100      	movs	r1, #0
 8010b76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b78:	1c58      	adds	r0, r3, #1
 8010b7a:	901b      	str	r0, [sp, #108]	; 0x6c
 8010b7c:	785b      	ldrb	r3, [r3, #1]
 8010b7e:	4608      	mov	r0, r1
 8010b80:	e7c9      	b.n	8010b16 <_strtod_l+0x1d6>
 8010b82:	9805      	ldr	r0, [sp, #20]
 8010b84:	e7d3      	b.n	8010b2e <_strtod_l+0x1ee>
 8010b86:	2908      	cmp	r1, #8
 8010b88:	f101 0101 	add.w	r1, r1, #1
 8010b8c:	dc03      	bgt.n	8010b96 <_strtod_l+0x256>
 8010b8e:	9b07      	ldr	r3, [sp, #28]
 8010b90:	437b      	muls	r3, r7
 8010b92:	9307      	str	r3, [sp, #28]
 8010b94:	e7e1      	b.n	8010b5a <_strtod_l+0x21a>
 8010b96:	2910      	cmp	r1, #16
 8010b98:	bfd8      	it	le
 8010b9a:	437d      	mulle	r5, r7
 8010b9c:	e7dd      	b.n	8010b5a <_strtod_l+0x21a>
 8010b9e:	2c10      	cmp	r4, #16
 8010ba0:	bfdc      	itt	le
 8010ba2:	210a      	movle	r1, #10
 8010ba4:	fb01 e505 	mlale	r5, r1, r5, lr
 8010ba8:	e7e4      	b.n	8010b74 <_strtod_l+0x234>
 8010baa:	2301      	movs	r3, #1
 8010bac:	9304      	str	r3, [sp, #16]
 8010bae:	e781      	b.n	8010ab4 <_strtod_l+0x174>
 8010bb0:	f04f 0c01 	mov.w	ip, #1
 8010bb4:	1cb3      	adds	r3, r6, #2
 8010bb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8010bb8:	78b3      	ldrb	r3, [r6, #2]
 8010bba:	e78a      	b.n	8010ad2 <_strtod_l+0x192>
 8010bbc:	f04f 0c00 	mov.w	ip, #0
 8010bc0:	e7f8      	b.n	8010bb4 <_strtod_l+0x274>
 8010bc2:	bf00      	nop
 8010bc4:	0801525c 	.word	0x0801525c
 8010bc8:	7ff00000 	.word	0x7ff00000
 8010bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010bce:	1c5f      	adds	r7, r3, #1
 8010bd0:	971b      	str	r7, [sp, #108]	; 0x6c
 8010bd2:	785b      	ldrb	r3, [r3, #1]
 8010bd4:	2b30      	cmp	r3, #48	; 0x30
 8010bd6:	d0f9      	beq.n	8010bcc <_strtod_l+0x28c>
 8010bd8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8010bdc:	2f08      	cmp	r7, #8
 8010bde:	f63f af7d 	bhi.w	8010adc <_strtod_l+0x19c>
 8010be2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010be8:	930a      	str	r3, [sp, #40]	; 0x28
 8010bea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010bec:	1c5f      	adds	r7, r3, #1
 8010bee:	971b      	str	r7, [sp, #108]	; 0x6c
 8010bf0:	785b      	ldrb	r3, [r3, #1]
 8010bf2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8010bf6:	f1b8 0f09 	cmp.w	r8, #9
 8010bfa:	d937      	bls.n	8010c6c <_strtod_l+0x32c>
 8010bfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010bfe:	1a7f      	subs	r7, r7, r1
 8010c00:	2f08      	cmp	r7, #8
 8010c02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010c06:	dc37      	bgt.n	8010c78 <_strtod_l+0x338>
 8010c08:	45be      	cmp	lr, r7
 8010c0a:	bfa8      	it	ge
 8010c0c:	46be      	movge	lr, r7
 8010c0e:	f1bc 0f00 	cmp.w	ip, #0
 8010c12:	d001      	beq.n	8010c18 <_strtod_l+0x2d8>
 8010c14:	f1ce 0e00 	rsb	lr, lr, #0
 8010c18:	2c00      	cmp	r4, #0
 8010c1a:	d151      	bne.n	8010cc0 <_strtod_l+0x380>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	f47f aece 	bne.w	80109be <_strtod_l+0x7e>
 8010c22:	9a06      	ldr	r2, [sp, #24]
 8010c24:	2a00      	cmp	r2, #0
 8010c26:	f47f aeca 	bne.w	80109be <_strtod_l+0x7e>
 8010c2a:	9a04      	ldr	r2, [sp, #16]
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	f47f aee4 	bne.w	80109fa <_strtod_l+0xba>
 8010c32:	2b4e      	cmp	r3, #78	; 0x4e
 8010c34:	d027      	beq.n	8010c86 <_strtod_l+0x346>
 8010c36:	dc21      	bgt.n	8010c7c <_strtod_l+0x33c>
 8010c38:	2b49      	cmp	r3, #73	; 0x49
 8010c3a:	f47f aede 	bne.w	80109fa <_strtod_l+0xba>
 8010c3e:	49a0      	ldr	r1, [pc, #640]	; (8010ec0 <_strtod_l+0x580>)
 8010c40:	a81b      	add	r0, sp, #108	; 0x6c
 8010c42:	f001 fdf7 	bl	8012834 <__match>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	f43f aed7 	beq.w	80109fa <_strtod_l+0xba>
 8010c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c4e:	499d      	ldr	r1, [pc, #628]	; (8010ec4 <_strtod_l+0x584>)
 8010c50:	3b01      	subs	r3, #1
 8010c52:	a81b      	add	r0, sp, #108	; 0x6c
 8010c54:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c56:	f001 fded 	bl	8012834 <__match>
 8010c5a:	b910      	cbnz	r0, 8010c62 <_strtod_l+0x322>
 8010c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c5e:	3301      	adds	r3, #1
 8010c60:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c62:	f8df b274 	ldr.w	fp, [pc, #628]	; 8010ed8 <_strtod_l+0x598>
 8010c66:	f04f 0a00 	mov.w	sl, #0
 8010c6a:	e6a8      	b.n	80109be <_strtod_l+0x7e>
 8010c6c:	210a      	movs	r1, #10
 8010c6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010c72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010c76:	e7b8      	b.n	8010bea <_strtod_l+0x2aa>
 8010c78:	46be      	mov	lr, r7
 8010c7a:	e7c8      	b.n	8010c0e <_strtod_l+0x2ce>
 8010c7c:	2b69      	cmp	r3, #105	; 0x69
 8010c7e:	d0de      	beq.n	8010c3e <_strtod_l+0x2fe>
 8010c80:	2b6e      	cmp	r3, #110	; 0x6e
 8010c82:	f47f aeba 	bne.w	80109fa <_strtod_l+0xba>
 8010c86:	4990      	ldr	r1, [pc, #576]	; (8010ec8 <_strtod_l+0x588>)
 8010c88:	a81b      	add	r0, sp, #108	; 0x6c
 8010c8a:	f001 fdd3 	bl	8012834 <__match>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	f43f aeb3 	beq.w	80109fa <_strtod_l+0xba>
 8010c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b28      	cmp	r3, #40	; 0x28
 8010c9a:	d10e      	bne.n	8010cba <_strtod_l+0x37a>
 8010c9c:	aa1e      	add	r2, sp, #120	; 0x78
 8010c9e:	498b      	ldr	r1, [pc, #556]	; (8010ecc <_strtod_l+0x58c>)
 8010ca0:	a81b      	add	r0, sp, #108	; 0x6c
 8010ca2:	f001 fddb 	bl	801285c <__hexnan>
 8010ca6:	2805      	cmp	r0, #5
 8010ca8:	d107      	bne.n	8010cba <_strtod_l+0x37a>
 8010caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010cac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010cb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010cb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010cb8:	e681      	b.n	80109be <_strtod_l+0x7e>
 8010cba:	f8df b224 	ldr.w	fp, [pc, #548]	; 8010ee0 <_strtod_l+0x5a0>
 8010cbe:	e7d2      	b.n	8010c66 <_strtod_l+0x326>
 8010cc0:	ebae 0302 	sub.w	r3, lr, r2
 8010cc4:	9306      	str	r3, [sp, #24]
 8010cc6:	9b05      	ldr	r3, [sp, #20]
 8010cc8:	9807      	ldr	r0, [sp, #28]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	bf08      	it	eq
 8010cce:	4623      	moveq	r3, r4
 8010cd0:	2c10      	cmp	r4, #16
 8010cd2:	9305      	str	r3, [sp, #20]
 8010cd4:	46a0      	mov	r8, r4
 8010cd6:	bfa8      	it	ge
 8010cd8:	f04f 0810 	movge.w	r8, #16
 8010cdc:	f7ef fc12 	bl	8000504 <__aeabi_ui2d>
 8010ce0:	2c09      	cmp	r4, #9
 8010ce2:	4682      	mov	sl, r0
 8010ce4:	468b      	mov	fp, r1
 8010ce6:	dc13      	bgt.n	8010d10 <_strtod_l+0x3d0>
 8010ce8:	9b06      	ldr	r3, [sp, #24]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f43f ae67 	beq.w	80109be <_strtod_l+0x7e>
 8010cf0:	9b06      	ldr	r3, [sp, #24]
 8010cf2:	dd7a      	ble.n	8010dea <_strtod_l+0x4aa>
 8010cf4:	2b16      	cmp	r3, #22
 8010cf6:	dc61      	bgt.n	8010dbc <_strtod_l+0x47c>
 8010cf8:	4a75      	ldr	r2, [pc, #468]	; (8010ed0 <_strtod_l+0x590>)
 8010cfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8010cfe:	e9de 0100 	ldrd	r0, r1, [lr]
 8010d02:	4652      	mov	r2, sl
 8010d04:	465b      	mov	r3, fp
 8010d06:	f7ef fc77 	bl	80005f8 <__aeabi_dmul>
 8010d0a:	4682      	mov	sl, r0
 8010d0c:	468b      	mov	fp, r1
 8010d0e:	e656      	b.n	80109be <_strtod_l+0x7e>
 8010d10:	4b6f      	ldr	r3, [pc, #444]	; (8010ed0 <_strtod_l+0x590>)
 8010d12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010d16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010d1a:	f7ef fc6d 	bl	80005f8 <__aeabi_dmul>
 8010d1e:	4606      	mov	r6, r0
 8010d20:	4628      	mov	r0, r5
 8010d22:	460f      	mov	r7, r1
 8010d24:	f7ef fbee 	bl	8000504 <__aeabi_ui2d>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	4639      	mov	r1, r7
 8010d30:	f7ef faac 	bl	800028c <__adddf3>
 8010d34:	2c0f      	cmp	r4, #15
 8010d36:	4682      	mov	sl, r0
 8010d38:	468b      	mov	fp, r1
 8010d3a:	ddd5      	ble.n	8010ce8 <_strtod_l+0x3a8>
 8010d3c:	9b06      	ldr	r3, [sp, #24]
 8010d3e:	eba4 0808 	sub.w	r8, r4, r8
 8010d42:	4498      	add	r8, r3
 8010d44:	f1b8 0f00 	cmp.w	r8, #0
 8010d48:	f340 8096 	ble.w	8010e78 <_strtod_l+0x538>
 8010d4c:	f018 030f 	ands.w	r3, r8, #15
 8010d50:	d00a      	beq.n	8010d68 <_strtod_l+0x428>
 8010d52:	495f      	ldr	r1, [pc, #380]	; (8010ed0 <_strtod_l+0x590>)
 8010d54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010d58:	4652      	mov	r2, sl
 8010d5a:	465b      	mov	r3, fp
 8010d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d60:	f7ef fc4a 	bl	80005f8 <__aeabi_dmul>
 8010d64:	4682      	mov	sl, r0
 8010d66:	468b      	mov	fp, r1
 8010d68:	f038 080f 	bics.w	r8, r8, #15
 8010d6c:	d073      	beq.n	8010e56 <_strtod_l+0x516>
 8010d6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010d72:	dd47      	ble.n	8010e04 <_strtod_l+0x4c4>
 8010d74:	2400      	movs	r4, #0
 8010d76:	46a0      	mov	r8, r4
 8010d78:	9407      	str	r4, [sp, #28]
 8010d7a:	9405      	str	r4, [sp, #20]
 8010d7c:	2322      	movs	r3, #34	; 0x22
 8010d7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8010ed8 <_strtod_l+0x598>
 8010d82:	f8c9 3000 	str.w	r3, [r9]
 8010d86:	f04f 0a00 	mov.w	sl, #0
 8010d8a:	9b07      	ldr	r3, [sp, #28]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f43f ae16 	beq.w	80109be <_strtod_l+0x7e>
 8010d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010d94:	4648      	mov	r0, r9
 8010d96:	f001 fe4d 	bl	8012a34 <_Bfree>
 8010d9a:	9905      	ldr	r1, [sp, #20]
 8010d9c:	4648      	mov	r0, r9
 8010d9e:	f001 fe49 	bl	8012a34 <_Bfree>
 8010da2:	4641      	mov	r1, r8
 8010da4:	4648      	mov	r0, r9
 8010da6:	f001 fe45 	bl	8012a34 <_Bfree>
 8010daa:	9907      	ldr	r1, [sp, #28]
 8010dac:	4648      	mov	r0, r9
 8010dae:	f001 fe41 	bl	8012a34 <_Bfree>
 8010db2:	4621      	mov	r1, r4
 8010db4:	4648      	mov	r0, r9
 8010db6:	f001 fe3d 	bl	8012a34 <_Bfree>
 8010dba:	e600      	b.n	80109be <_strtod_l+0x7e>
 8010dbc:	9a06      	ldr	r2, [sp, #24]
 8010dbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	dbba      	blt.n	8010d3c <_strtod_l+0x3fc>
 8010dc6:	4d42      	ldr	r5, [pc, #264]	; (8010ed0 <_strtod_l+0x590>)
 8010dc8:	f1c4 040f 	rsb	r4, r4, #15
 8010dcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8010dd0:	4652      	mov	r2, sl
 8010dd2:	465b      	mov	r3, fp
 8010dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010dd8:	f7ef fc0e 	bl	80005f8 <__aeabi_dmul>
 8010ddc:	9b06      	ldr	r3, [sp, #24]
 8010dde:	1b1c      	subs	r4, r3, r4
 8010de0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8010de4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010de8:	e78d      	b.n	8010d06 <_strtod_l+0x3c6>
 8010dea:	f113 0f16 	cmn.w	r3, #22
 8010dee:	dba5      	blt.n	8010d3c <_strtod_l+0x3fc>
 8010df0:	4a37      	ldr	r2, [pc, #220]	; (8010ed0 <_strtod_l+0x590>)
 8010df2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8010df6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010dfa:	4650      	mov	r0, sl
 8010dfc:	4659      	mov	r1, fp
 8010dfe:	f7ef fd25 	bl	800084c <__aeabi_ddiv>
 8010e02:	e782      	b.n	8010d0a <_strtod_l+0x3ca>
 8010e04:	2300      	movs	r3, #0
 8010e06:	4e33      	ldr	r6, [pc, #204]	; (8010ed4 <_strtod_l+0x594>)
 8010e08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010e0c:	4650      	mov	r0, sl
 8010e0e:	4659      	mov	r1, fp
 8010e10:	461d      	mov	r5, r3
 8010e12:	f1b8 0f01 	cmp.w	r8, #1
 8010e16:	dc21      	bgt.n	8010e5c <_strtod_l+0x51c>
 8010e18:	b10b      	cbz	r3, 8010e1e <_strtod_l+0x4de>
 8010e1a:	4682      	mov	sl, r0
 8010e1c:	468b      	mov	fp, r1
 8010e1e:	4b2d      	ldr	r3, [pc, #180]	; (8010ed4 <_strtod_l+0x594>)
 8010e20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010e24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010e28:	4652      	mov	r2, sl
 8010e2a:	465b      	mov	r3, fp
 8010e2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010e30:	f7ef fbe2 	bl	80005f8 <__aeabi_dmul>
 8010e34:	4b28      	ldr	r3, [pc, #160]	; (8010ed8 <_strtod_l+0x598>)
 8010e36:	460a      	mov	r2, r1
 8010e38:	400b      	ands	r3, r1
 8010e3a:	4928      	ldr	r1, [pc, #160]	; (8010edc <_strtod_l+0x59c>)
 8010e3c:	428b      	cmp	r3, r1
 8010e3e:	4682      	mov	sl, r0
 8010e40:	d898      	bhi.n	8010d74 <_strtod_l+0x434>
 8010e42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010e46:	428b      	cmp	r3, r1
 8010e48:	bf86      	itte	hi
 8010e4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010ee4 <_strtod_l+0x5a4>
 8010e4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010e52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010e56:	2300      	movs	r3, #0
 8010e58:	9304      	str	r3, [sp, #16]
 8010e5a:	e077      	b.n	8010f4c <_strtod_l+0x60c>
 8010e5c:	f018 0f01 	tst.w	r8, #1
 8010e60:	d006      	beq.n	8010e70 <_strtod_l+0x530>
 8010e62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8010e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6a:	f7ef fbc5 	bl	80005f8 <__aeabi_dmul>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	3501      	adds	r5, #1
 8010e72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010e76:	e7cc      	b.n	8010e12 <_strtod_l+0x4d2>
 8010e78:	d0ed      	beq.n	8010e56 <_strtod_l+0x516>
 8010e7a:	f1c8 0800 	rsb	r8, r8, #0
 8010e7e:	f018 020f 	ands.w	r2, r8, #15
 8010e82:	d00a      	beq.n	8010e9a <_strtod_l+0x55a>
 8010e84:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <_strtod_l+0x590>)
 8010e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e8a:	4650      	mov	r0, sl
 8010e8c:	4659      	mov	r1, fp
 8010e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e92:	f7ef fcdb 	bl	800084c <__aeabi_ddiv>
 8010e96:	4682      	mov	sl, r0
 8010e98:	468b      	mov	fp, r1
 8010e9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010e9e:	d0da      	beq.n	8010e56 <_strtod_l+0x516>
 8010ea0:	f1b8 0f1f 	cmp.w	r8, #31
 8010ea4:	dd20      	ble.n	8010ee8 <_strtod_l+0x5a8>
 8010ea6:	2400      	movs	r4, #0
 8010ea8:	46a0      	mov	r8, r4
 8010eaa:	9407      	str	r4, [sp, #28]
 8010eac:	9405      	str	r4, [sp, #20]
 8010eae:	2322      	movs	r3, #34	; 0x22
 8010eb0:	f04f 0a00 	mov.w	sl, #0
 8010eb4:	f04f 0b00 	mov.w	fp, #0
 8010eb8:	f8c9 3000 	str.w	r3, [r9]
 8010ebc:	e765      	b.n	8010d8a <_strtod_l+0x44a>
 8010ebe:	bf00      	nop
 8010ec0:	08015225 	.word	0x08015225
 8010ec4:	080152b3 	.word	0x080152b3
 8010ec8:	0801522d 	.word	0x0801522d
 8010ecc:	08015270 	.word	0x08015270
 8010ed0:	080152f0 	.word	0x080152f0
 8010ed4:	080152c8 	.word	0x080152c8
 8010ed8:	7ff00000 	.word	0x7ff00000
 8010edc:	7ca00000 	.word	0x7ca00000
 8010ee0:	fff80000 	.word	0xfff80000
 8010ee4:	7fefffff 	.word	0x7fefffff
 8010ee8:	f018 0310 	ands.w	r3, r8, #16
 8010eec:	bf18      	it	ne
 8010eee:	236a      	movne	r3, #106	; 0x6a
 8010ef0:	4da0      	ldr	r5, [pc, #640]	; (8011174 <_strtod_l+0x834>)
 8010ef2:	9304      	str	r3, [sp, #16]
 8010ef4:	4650      	mov	r0, sl
 8010ef6:	4659      	mov	r1, fp
 8010ef8:	2300      	movs	r3, #0
 8010efa:	f1b8 0f00 	cmp.w	r8, #0
 8010efe:	f300 810a 	bgt.w	8011116 <_strtod_l+0x7d6>
 8010f02:	b10b      	cbz	r3, 8010f08 <_strtod_l+0x5c8>
 8010f04:	4682      	mov	sl, r0
 8010f06:	468b      	mov	fp, r1
 8010f08:	9b04      	ldr	r3, [sp, #16]
 8010f0a:	b1bb      	cbz	r3, 8010f3c <_strtod_l+0x5fc>
 8010f0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010f10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	4659      	mov	r1, fp
 8010f18:	dd10      	ble.n	8010f3c <_strtod_l+0x5fc>
 8010f1a:	2b1f      	cmp	r3, #31
 8010f1c:	f340 8107 	ble.w	801112e <_strtod_l+0x7ee>
 8010f20:	2b34      	cmp	r3, #52	; 0x34
 8010f22:	bfde      	ittt	le
 8010f24:	3b20      	suble	r3, #32
 8010f26:	f04f 32ff 	movle.w	r2, #4294967295
 8010f2a:	fa02 f303 	lslle.w	r3, r2, r3
 8010f2e:	f04f 0a00 	mov.w	sl, #0
 8010f32:	bfcc      	ite	gt
 8010f34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010f38:	ea03 0b01 	andle.w	fp, r3, r1
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	2300      	movs	r3, #0
 8010f40:	4650      	mov	r0, sl
 8010f42:	4659      	mov	r1, fp
 8010f44:	f7ef fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	d1ac      	bne.n	8010ea6 <_strtod_l+0x566>
 8010f4c:	9b07      	ldr	r3, [sp, #28]
 8010f4e:	9300      	str	r3, [sp, #0]
 8010f50:	9a05      	ldr	r2, [sp, #20]
 8010f52:	9908      	ldr	r1, [sp, #32]
 8010f54:	4623      	mov	r3, r4
 8010f56:	4648      	mov	r0, r9
 8010f58:	f001 fdbe 	bl	8012ad8 <__s2b>
 8010f5c:	9007      	str	r0, [sp, #28]
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	f43f af08 	beq.w	8010d74 <_strtod_l+0x434>
 8010f64:	9a06      	ldr	r2, [sp, #24]
 8010f66:	9b06      	ldr	r3, [sp, #24]
 8010f68:	2a00      	cmp	r2, #0
 8010f6a:	f1c3 0300 	rsb	r3, r3, #0
 8010f6e:	bfa8      	it	ge
 8010f70:	2300      	movge	r3, #0
 8010f72:	930e      	str	r3, [sp, #56]	; 0x38
 8010f74:	2400      	movs	r4, #0
 8010f76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8010f7c:	46a0      	mov	r8, r4
 8010f7e:	9b07      	ldr	r3, [sp, #28]
 8010f80:	4648      	mov	r0, r9
 8010f82:	6859      	ldr	r1, [r3, #4]
 8010f84:	f001 fd22 	bl	80129cc <_Balloc>
 8010f88:	9005      	str	r0, [sp, #20]
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f43f aef6 	beq.w	8010d7c <_strtod_l+0x43c>
 8010f90:	9b07      	ldr	r3, [sp, #28]
 8010f92:	691a      	ldr	r2, [r3, #16]
 8010f94:	3202      	adds	r2, #2
 8010f96:	f103 010c 	add.w	r1, r3, #12
 8010f9a:	0092      	lsls	r2, r2, #2
 8010f9c:	300c      	adds	r0, #12
 8010f9e:	f7fe fd71 	bl	800fa84 <memcpy>
 8010fa2:	aa1e      	add	r2, sp, #120	; 0x78
 8010fa4:	a91d      	add	r1, sp, #116	; 0x74
 8010fa6:	ec4b ab10 	vmov	d0, sl, fp
 8010faa:	4648      	mov	r0, r9
 8010fac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010fb0:	f002 f84e 	bl	8013050 <__d2b>
 8010fb4:	901c      	str	r0, [sp, #112]	; 0x70
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	f43f aee0 	beq.w	8010d7c <_strtod_l+0x43c>
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	4648      	mov	r0, r9
 8010fc0:	f001 fe16 	bl	8012bf0 <__i2b>
 8010fc4:	4680      	mov	r8, r0
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	f43f aed8 	beq.w	8010d7c <_strtod_l+0x43c>
 8010fcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010fce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010fd0:	2e00      	cmp	r6, #0
 8010fd2:	bfab      	itete	ge
 8010fd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8010fd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8010fd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8010fda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8010fdc:	bfac      	ite	ge
 8010fde:	18f7      	addge	r7, r6, r3
 8010fe0:	1b9d      	sublt	r5, r3, r6
 8010fe2:	9b04      	ldr	r3, [sp, #16]
 8010fe4:	1af6      	subs	r6, r6, r3
 8010fe6:	4416      	add	r6, r2
 8010fe8:	4b63      	ldr	r3, [pc, #396]	; (8011178 <_strtod_l+0x838>)
 8010fea:	3e01      	subs	r6, #1
 8010fec:	429e      	cmp	r6, r3
 8010fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010ff2:	f280 80af 	bge.w	8011154 <_strtod_l+0x814>
 8010ff6:	1b9b      	subs	r3, r3, r6
 8010ff8:	2b1f      	cmp	r3, #31
 8010ffa:	eba2 0203 	sub.w	r2, r2, r3
 8010ffe:	f04f 0101 	mov.w	r1, #1
 8011002:	f300 809b 	bgt.w	801113c <_strtod_l+0x7fc>
 8011006:	fa01 f303 	lsl.w	r3, r1, r3
 801100a:	930f      	str	r3, [sp, #60]	; 0x3c
 801100c:	2300      	movs	r3, #0
 801100e:	930a      	str	r3, [sp, #40]	; 0x28
 8011010:	18be      	adds	r6, r7, r2
 8011012:	9b04      	ldr	r3, [sp, #16]
 8011014:	42b7      	cmp	r7, r6
 8011016:	4415      	add	r5, r2
 8011018:	441d      	add	r5, r3
 801101a:	463b      	mov	r3, r7
 801101c:	bfa8      	it	ge
 801101e:	4633      	movge	r3, r6
 8011020:	42ab      	cmp	r3, r5
 8011022:	bfa8      	it	ge
 8011024:	462b      	movge	r3, r5
 8011026:	2b00      	cmp	r3, #0
 8011028:	bfc2      	ittt	gt
 801102a:	1af6      	subgt	r6, r6, r3
 801102c:	1aed      	subgt	r5, r5, r3
 801102e:	1aff      	subgt	r7, r7, r3
 8011030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011032:	b1bb      	cbz	r3, 8011064 <_strtod_l+0x724>
 8011034:	4641      	mov	r1, r8
 8011036:	461a      	mov	r2, r3
 8011038:	4648      	mov	r0, r9
 801103a:	f001 fe79 	bl	8012d30 <__pow5mult>
 801103e:	4680      	mov	r8, r0
 8011040:	2800      	cmp	r0, #0
 8011042:	f43f ae9b 	beq.w	8010d7c <_strtod_l+0x43c>
 8011046:	4601      	mov	r1, r0
 8011048:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801104a:	4648      	mov	r0, r9
 801104c:	f001 fdd9 	bl	8012c02 <__multiply>
 8011050:	900c      	str	r0, [sp, #48]	; 0x30
 8011052:	2800      	cmp	r0, #0
 8011054:	f43f ae92 	beq.w	8010d7c <_strtod_l+0x43c>
 8011058:	991c      	ldr	r1, [sp, #112]	; 0x70
 801105a:	4648      	mov	r0, r9
 801105c:	f001 fcea 	bl	8012a34 <_Bfree>
 8011060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011062:	931c      	str	r3, [sp, #112]	; 0x70
 8011064:	2e00      	cmp	r6, #0
 8011066:	dc7a      	bgt.n	801115e <_strtod_l+0x81e>
 8011068:	9b06      	ldr	r3, [sp, #24]
 801106a:	2b00      	cmp	r3, #0
 801106c:	dd08      	ble.n	8011080 <_strtod_l+0x740>
 801106e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011070:	9905      	ldr	r1, [sp, #20]
 8011072:	4648      	mov	r0, r9
 8011074:	f001 fe5c 	bl	8012d30 <__pow5mult>
 8011078:	9005      	str	r0, [sp, #20]
 801107a:	2800      	cmp	r0, #0
 801107c:	f43f ae7e 	beq.w	8010d7c <_strtod_l+0x43c>
 8011080:	2d00      	cmp	r5, #0
 8011082:	dd08      	ble.n	8011096 <_strtod_l+0x756>
 8011084:	462a      	mov	r2, r5
 8011086:	9905      	ldr	r1, [sp, #20]
 8011088:	4648      	mov	r0, r9
 801108a:	f001 fe9f 	bl	8012dcc <__lshift>
 801108e:	9005      	str	r0, [sp, #20]
 8011090:	2800      	cmp	r0, #0
 8011092:	f43f ae73 	beq.w	8010d7c <_strtod_l+0x43c>
 8011096:	2f00      	cmp	r7, #0
 8011098:	dd08      	ble.n	80110ac <_strtod_l+0x76c>
 801109a:	4641      	mov	r1, r8
 801109c:	463a      	mov	r2, r7
 801109e:	4648      	mov	r0, r9
 80110a0:	f001 fe94 	bl	8012dcc <__lshift>
 80110a4:	4680      	mov	r8, r0
 80110a6:	2800      	cmp	r0, #0
 80110a8:	f43f ae68 	beq.w	8010d7c <_strtod_l+0x43c>
 80110ac:	9a05      	ldr	r2, [sp, #20]
 80110ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80110b0:	4648      	mov	r0, r9
 80110b2:	f001 fef9 	bl	8012ea8 <__mdiff>
 80110b6:	4604      	mov	r4, r0
 80110b8:	2800      	cmp	r0, #0
 80110ba:	f43f ae5f 	beq.w	8010d7c <_strtod_l+0x43c>
 80110be:	68c3      	ldr	r3, [r0, #12]
 80110c0:	930c      	str	r3, [sp, #48]	; 0x30
 80110c2:	2300      	movs	r3, #0
 80110c4:	60c3      	str	r3, [r0, #12]
 80110c6:	4641      	mov	r1, r8
 80110c8:	f001 fed4 	bl	8012e74 <__mcmp>
 80110cc:	2800      	cmp	r0, #0
 80110ce:	da55      	bge.n	801117c <_strtod_l+0x83c>
 80110d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110d2:	b9e3      	cbnz	r3, 801110e <_strtod_l+0x7ce>
 80110d4:	f1ba 0f00 	cmp.w	sl, #0
 80110d8:	d119      	bne.n	801110e <_strtod_l+0x7ce>
 80110da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110de:	b9b3      	cbnz	r3, 801110e <_strtod_l+0x7ce>
 80110e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80110e4:	0d1b      	lsrs	r3, r3, #20
 80110e6:	051b      	lsls	r3, r3, #20
 80110e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80110ec:	d90f      	bls.n	801110e <_strtod_l+0x7ce>
 80110ee:	6963      	ldr	r3, [r4, #20]
 80110f0:	b913      	cbnz	r3, 80110f8 <_strtod_l+0x7b8>
 80110f2:	6923      	ldr	r3, [r4, #16]
 80110f4:	2b01      	cmp	r3, #1
 80110f6:	dd0a      	ble.n	801110e <_strtod_l+0x7ce>
 80110f8:	4621      	mov	r1, r4
 80110fa:	2201      	movs	r2, #1
 80110fc:	4648      	mov	r0, r9
 80110fe:	f001 fe65 	bl	8012dcc <__lshift>
 8011102:	4641      	mov	r1, r8
 8011104:	4604      	mov	r4, r0
 8011106:	f001 feb5 	bl	8012e74 <__mcmp>
 801110a:	2800      	cmp	r0, #0
 801110c:	dc67      	bgt.n	80111de <_strtod_l+0x89e>
 801110e:	9b04      	ldr	r3, [sp, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d171      	bne.n	80111f8 <_strtod_l+0x8b8>
 8011114:	e63d      	b.n	8010d92 <_strtod_l+0x452>
 8011116:	f018 0f01 	tst.w	r8, #1
 801111a:	d004      	beq.n	8011126 <_strtod_l+0x7e6>
 801111c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011120:	f7ef fa6a 	bl	80005f8 <__aeabi_dmul>
 8011124:	2301      	movs	r3, #1
 8011126:	ea4f 0868 	mov.w	r8, r8, asr #1
 801112a:	3508      	adds	r5, #8
 801112c:	e6e5      	b.n	8010efa <_strtod_l+0x5ba>
 801112e:	f04f 32ff 	mov.w	r2, #4294967295
 8011132:	fa02 f303 	lsl.w	r3, r2, r3
 8011136:	ea03 0a0a 	and.w	sl, r3, sl
 801113a:	e6ff      	b.n	8010f3c <_strtod_l+0x5fc>
 801113c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011140:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011144:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011148:	36e2      	adds	r6, #226	; 0xe2
 801114a:	fa01 f306 	lsl.w	r3, r1, r6
 801114e:	930a      	str	r3, [sp, #40]	; 0x28
 8011150:	910f      	str	r1, [sp, #60]	; 0x3c
 8011152:	e75d      	b.n	8011010 <_strtod_l+0x6d0>
 8011154:	2300      	movs	r3, #0
 8011156:	930a      	str	r3, [sp, #40]	; 0x28
 8011158:	2301      	movs	r3, #1
 801115a:	930f      	str	r3, [sp, #60]	; 0x3c
 801115c:	e758      	b.n	8011010 <_strtod_l+0x6d0>
 801115e:	4632      	mov	r2, r6
 8011160:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011162:	4648      	mov	r0, r9
 8011164:	f001 fe32 	bl	8012dcc <__lshift>
 8011168:	901c      	str	r0, [sp, #112]	; 0x70
 801116a:	2800      	cmp	r0, #0
 801116c:	f47f af7c 	bne.w	8011068 <_strtod_l+0x728>
 8011170:	e604      	b.n	8010d7c <_strtod_l+0x43c>
 8011172:	bf00      	nop
 8011174:	08015288 	.word	0x08015288
 8011178:	fffffc02 	.word	0xfffffc02
 801117c:	465d      	mov	r5, fp
 801117e:	f040 8086 	bne.w	801128e <_strtod_l+0x94e>
 8011182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011188:	b32a      	cbz	r2, 80111d6 <_strtod_l+0x896>
 801118a:	4aaf      	ldr	r2, [pc, #700]	; (8011448 <_strtod_l+0xb08>)
 801118c:	4293      	cmp	r3, r2
 801118e:	d153      	bne.n	8011238 <_strtod_l+0x8f8>
 8011190:	9b04      	ldr	r3, [sp, #16]
 8011192:	4650      	mov	r0, sl
 8011194:	b1d3      	cbz	r3, 80111cc <_strtod_l+0x88c>
 8011196:	4aad      	ldr	r2, [pc, #692]	; (801144c <_strtod_l+0xb0c>)
 8011198:	402a      	ands	r2, r5
 801119a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801119e:	f04f 31ff 	mov.w	r1, #4294967295
 80111a2:	d816      	bhi.n	80111d2 <_strtod_l+0x892>
 80111a4:	0d12      	lsrs	r2, r2, #20
 80111a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80111aa:	fa01 f303 	lsl.w	r3, r1, r3
 80111ae:	4298      	cmp	r0, r3
 80111b0:	d142      	bne.n	8011238 <_strtod_l+0x8f8>
 80111b2:	4ba7      	ldr	r3, [pc, #668]	; (8011450 <_strtod_l+0xb10>)
 80111b4:	429d      	cmp	r5, r3
 80111b6:	d102      	bne.n	80111be <_strtod_l+0x87e>
 80111b8:	3001      	adds	r0, #1
 80111ba:	f43f addf 	beq.w	8010d7c <_strtod_l+0x43c>
 80111be:	4ba3      	ldr	r3, [pc, #652]	; (801144c <_strtod_l+0xb0c>)
 80111c0:	402b      	ands	r3, r5
 80111c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80111c6:	f04f 0a00 	mov.w	sl, #0
 80111ca:	e7a0      	b.n	801110e <_strtod_l+0x7ce>
 80111cc:	f04f 33ff 	mov.w	r3, #4294967295
 80111d0:	e7ed      	b.n	80111ae <_strtod_l+0x86e>
 80111d2:	460b      	mov	r3, r1
 80111d4:	e7eb      	b.n	80111ae <_strtod_l+0x86e>
 80111d6:	bb7b      	cbnz	r3, 8011238 <_strtod_l+0x8f8>
 80111d8:	f1ba 0f00 	cmp.w	sl, #0
 80111dc:	d12c      	bne.n	8011238 <_strtod_l+0x8f8>
 80111de:	9904      	ldr	r1, [sp, #16]
 80111e0:	4a9a      	ldr	r2, [pc, #616]	; (801144c <_strtod_l+0xb0c>)
 80111e2:	465b      	mov	r3, fp
 80111e4:	b1f1      	cbz	r1, 8011224 <_strtod_l+0x8e4>
 80111e6:	ea02 010b 	and.w	r1, r2, fp
 80111ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80111ee:	dc19      	bgt.n	8011224 <_strtod_l+0x8e4>
 80111f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80111f4:	f77f ae5b 	ble.w	8010eae <_strtod_l+0x56e>
 80111f8:	4a96      	ldr	r2, [pc, #600]	; (8011454 <_strtod_l+0xb14>)
 80111fa:	2300      	movs	r3, #0
 80111fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011200:	4650      	mov	r0, sl
 8011202:	4659      	mov	r1, fp
 8011204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011208:	f7ef f9f6 	bl	80005f8 <__aeabi_dmul>
 801120c:	4682      	mov	sl, r0
 801120e:	468b      	mov	fp, r1
 8011210:	2900      	cmp	r1, #0
 8011212:	f47f adbe 	bne.w	8010d92 <_strtod_l+0x452>
 8011216:	2800      	cmp	r0, #0
 8011218:	f47f adbb 	bne.w	8010d92 <_strtod_l+0x452>
 801121c:	2322      	movs	r3, #34	; 0x22
 801121e:	f8c9 3000 	str.w	r3, [r9]
 8011222:	e5b6      	b.n	8010d92 <_strtod_l+0x452>
 8011224:	4013      	ands	r3, r2
 8011226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801122a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801122e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011232:	f04f 3aff 	mov.w	sl, #4294967295
 8011236:	e76a      	b.n	801110e <_strtod_l+0x7ce>
 8011238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801123a:	b193      	cbz	r3, 8011262 <_strtod_l+0x922>
 801123c:	422b      	tst	r3, r5
 801123e:	f43f af66 	beq.w	801110e <_strtod_l+0x7ce>
 8011242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011244:	9a04      	ldr	r2, [sp, #16]
 8011246:	4650      	mov	r0, sl
 8011248:	4659      	mov	r1, fp
 801124a:	b173      	cbz	r3, 801126a <_strtod_l+0x92a>
 801124c:	f7ff fb5c 	bl	8010908 <sulp>
 8011250:	4602      	mov	r2, r0
 8011252:	460b      	mov	r3, r1
 8011254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011258:	f7ef f818 	bl	800028c <__adddf3>
 801125c:	4682      	mov	sl, r0
 801125e:	468b      	mov	fp, r1
 8011260:	e755      	b.n	801110e <_strtod_l+0x7ce>
 8011262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011264:	ea13 0f0a 	tst.w	r3, sl
 8011268:	e7e9      	b.n	801123e <_strtod_l+0x8fe>
 801126a:	f7ff fb4d 	bl	8010908 <sulp>
 801126e:	4602      	mov	r2, r0
 8011270:	460b      	mov	r3, r1
 8011272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011276:	f7ef f807 	bl	8000288 <__aeabi_dsub>
 801127a:	2200      	movs	r2, #0
 801127c:	2300      	movs	r3, #0
 801127e:	4682      	mov	sl, r0
 8011280:	468b      	mov	fp, r1
 8011282:	f7ef fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8011286:	2800      	cmp	r0, #0
 8011288:	f47f ae11 	bne.w	8010eae <_strtod_l+0x56e>
 801128c:	e73f      	b.n	801110e <_strtod_l+0x7ce>
 801128e:	4641      	mov	r1, r8
 8011290:	4620      	mov	r0, r4
 8011292:	f001 ff2c 	bl	80130ee <__ratio>
 8011296:	ec57 6b10 	vmov	r6, r7, d0
 801129a:	2200      	movs	r2, #0
 801129c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80112a0:	ee10 0a10 	vmov	r0, s0
 80112a4:	4639      	mov	r1, r7
 80112a6:	f7ef fc23 	bl	8000af0 <__aeabi_dcmple>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d077      	beq.n	801139e <_strtod_l+0xa5e>
 80112ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d04a      	beq.n	801134a <_strtod_l+0xa0a>
 80112b4:	4b68      	ldr	r3, [pc, #416]	; (8011458 <_strtod_l+0xb18>)
 80112b6:	2200      	movs	r2, #0
 80112b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80112bc:	4f66      	ldr	r7, [pc, #408]	; (8011458 <_strtod_l+0xb18>)
 80112be:	2600      	movs	r6, #0
 80112c0:	4b62      	ldr	r3, [pc, #392]	; (801144c <_strtod_l+0xb0c>)
 80112c2:	402b      	ands	r3, r5
 80112c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80112c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80112c8:	4b64      	ldr	r3, [pc, #400]	; (801145c <_strtod_l+0xb1c>)
 80112ca:	429a      	cmp	r2, r3
 80112cc:	f040 80ce 	bne.w	801146c <_strtod_l+0xb2c>
 80112d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80112d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80112d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80112dc:	ec4b ab10 	vmov	d0, sl, fp
 80112e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80112e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80112e8:	f001 fe3c 	bl	8012f64 <__ulp>
 80112ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80112f0:	ec53 2b10 	vmov	r2, r3, d0
 80112f4:	f7ef f980 	bl	80005f8 <__aeabi_dmul>
 80112f8:	4652      	mov	r2, sl
 80112fa:	465b      	mov	r3, fp
 80112fc:	f7ee ffc6 	bl	800028c <__adddf3>
 8011300:	460b      	mov	r3, r1
 8011302:	4952      	ldr	r1, [pc, #328]	; (801144c <_strtod_l+0xb0c>)
 8011304:	4a56      	ldr	r2, [pc, #344]	; (8011460 <_strtod_l+0xb20>)
 8011306:	4019      	ands	r1, r3
 8011308:	4291      	cmp	r1, r2
 801130a:	4682      	mov	sl, r0
 801130c:	d95b      	bls.n	80113c6 <_strtod_l+0xa86>
 801130e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011310:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011314:	4293      	cmp	r3, r2
 8011316:	d103      	bne.n	8011320 <_strtod_l+0x9e0>
 8011318:	9b08      	ldr	r3, [sp, #32]
 801131a:	3301      	adds	r3, #1
 801131c:	f43f ad2e 	beq.w	8010d7c <_strtod_l+0x43c>
 8011320:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011450 <_strtod_l+0xb10>
 8011324:	f04f 3aff 	mov.w	sl, #4294967295
 8011328:	991c      	ldr	r1, [sp, #112]	; 0x70
 801132a:	4648      	mov	r0, r9
 801132c:	f001 fb82 	bl	8012a34 <_Bfree>
 8011330:	9905      	ldr	r1, [sp, #20]
 8011332:	4648      	mov	r0, r9
 8011334:	f001 fb7e 	bl	8012a34 <_Bfree>
 8011338:	4641      	mov	r1, r8
 801133a:	4648      	mov	r0, r9
 801133c:	f001 fb7a 	bl	8012a34 <_Bfree>
 8011340:	4621      	mov	r1, r4
 8011342:	4648      	mov	r0, r9
 8011344:	f001 fb76 	bl	8012a34 <_Bfree>
 8011348:	e619      	b.n	8010f7e <_strtod_l+0x63e>
 801134a:	f1ba 0f00 	cmp.w	sl, #0
 801134e:	d11a      	bne.n	8011386 <_strtod_l+0xa46>
 8011350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011354:	b9eb      	cbnz	r3, 8011392 <_strtod_l+0xa52>
 8011356:	2200      	movs	r2, #0
 8011358:	4b3f      	ldr	r3, [pc, #252]	; (8011458 <_strtod_l+0xb18>)
 801135a:	4630      	mov	r0, r6
 801135c:	4639      	mov	r1, r7
 801135e:	f7ef fbbd 	bl	8000adc <__aeabi_dcmplt>
 8011362:	b9c8      	cbnz	r0, 8011398 <_strtod_l+0xa58>
 8011364:	4630      	mov	r0, r6
 8011366:	4639      	mov	r1, r7
 8011368:	2200      	movs	r2, #0
 801136a:	4b3e      	ldr	r3, [pc, #248]	; (8011464 <_strtod_l+0xb24>)
 801136c:	f7ef f944 	bl	80005f8 <__aeabi_dmul>
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011378:	9618      	str	r6, [sp, #96]	; 0x60
 801137a:	9319      	str	r3, [sp, #100]	; 0x64
 801137c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011380:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011384:	e79c      	b.n	80112c0 <_strtod_l+0x980>
 8011386:	f1ba 0f01 	cmp.w	sl, #1
 801138a:	d102      	bne.n	8011392 <_strtod_l+0xa52>
 801138c:	2d00      	cmp	r5, #0
 801138e:	f43f ad8e 	beq.w	8010eae <_strtod_l+0x56e>
 8011392:	2200      	movs	r2, #0
 8011394:	4b34      	ldr	r3, [pc, #208]	; (8011468 <_strtod_l+0xb28>)
 8011396:	e78f      	b.n	80112b8 <_strtod_l+0x978>
 8011398:	2600      	movs	r6, #0
 801139a:	4f32      	ldr	r7, [pc, #200]	; (8011464 <_strtod_l+0xb24>)
 801139c:	e7ea      	b.n	8011374 <_strtod_l+0xa34>
 801139e:	4b31      	ldr	r3, [pc, #196]	; (8011464 <_strtod_l+0xb24>)
 80113a0:	4630      	mov	r0, r6
 80113a2:	4639      	mov	r1, r7
 80113a4:	2200      	movs	r2, #0
 80113a6:	f7ef f927 	bl	80005f8 <__aeabi_dmul>
 80113aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113ac:	4606      	mov	r6, r0
 80113ae:	460f      	mov	r7, r1
 80113b0:	b933      	cbnz	r3, 80113c0 <_strtod_l+0xa80>
 80113b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113b6:	9010      	str	r0, [sp, #64]	; 0x40
 80113b8:	9311      	str	r3, [sp, #68]	; 0x44
 80113ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80113be:	e7df      	b.n	8011380 <_strtod_l+0xa40>
 80113c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80113c4:	e7f9      	b.n	80113ba <_strtod_l+0xa7a>
 80113c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80113ca:	9b04      	ldr	r3, [sp, #16]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1ab      	bne.n	8011328 <_strtod_l+0x9e8>
 80113d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113d4:	0d1b      	lsrs	r3, r3, #20
 80113d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80113d8:	051b      	lsls	r3, r3, #20
 80113da:	429a      	cmp	r2, r3
 80113dc:	465d      	mov	r5, fp
 80113de:	d1a3      	bne.n	8011328 <_strtod_l+0x9e8>
 80113e0:	4639      	mov	r1, r7
 80113e2:	4630      	mov	r0, r6
 80113e4:	f7ef fbb8 	bl	8000b58 <__aeabi_d2iz>
 80113e8:	f7ef f89c 	bl	8000524 <__aeabi_i2d>
 80113ec:	460b      	mov	r3, r1
 80113ee:	4602      	mov	r2, r0
 80113f0:	4639      	mov	r1, r7
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ee ff48 	bl	8000288 <__aeabi_dsub>
 80113f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113fa:	4606      	mov	r6, r0
 80113fc:	460f      	mov	r7, r1
 80113fe:	b933      	cbnz	r3, 801140e <_strtod_l+0xace>
 8011400:	f1ba 0f00 	cmp.w	sl, #0
 8011404:	d103      	bne.n	801140e <_strtod_l+0xace>
 8011406:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801140a:	2d00      	cmp	r5, #0
 801140c:	d06d      	beq.n	80114ea <_strtod_l+0xbaa>
 801140e:	a30a      	add	r3, pc, #40	; (adr r3, 8011438 <_strtod_l+0xaf8>)
 8011410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011414:	4630      	mov	r0, r6
 8011416:	4639      	mov	r1, r7
 8011418:	f7ef fb60 	bl	8000adc <__aeabi_dcmplt>
 801141c:	2800      	cmp	r0, #0
 801141e:	f47f acb8 	bne.w	8010d92 <_strtod_l+0x452>
 8011422:	a307      	add	r3, pc, #28	; (adr r3, 8011440 <_strtod_l+0xb00>)
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	4630      	mov	r0, r6
 801142a:	4639      	mov	r1, r7
 801142c:	f7ef fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8011430:	2800      	cmp	r0, #0
 8011432:	f43f af79 	beq.w	8011328 <_strtod_l+0x9e8>
 8011436:	e4ac      	b.n	8010d92 <_strtod_l+0x452>
 8011438:	94a03595 	.word	0x94a03595
 801143c:	3fdfffff 	.word	0x3fdfffff
 8011440:	35afe535 	.word	0x35afe535
 8011444:	3fe00000 	.word	0x3fe00000
 8011448:	000fffff 	.word	0x000fffff
 801144c:	7ff00000 	.word	0x7ff00000
 8011450:	7fefffff 	.word	0x7fefffff
 8011454:	39500000 	.word	0x39500000
 8011458:	3ff00000 	.word	0x3ff00000
 801145c:	7fe00000 	.word	0x7fe00000
 8011460:	7c9fffff 	.word	0x7c9fffff
 8011464:	3fe00000 	.word	0x3fe00000
 8011468:	bff00000 	.word	0xbff00000
 801146c:	9b04      	ldr	r3, [sp, #16]
 801146e:	b333      	cbz	r3, 80114be <_strtod_l+0xb7e>
 8011470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011472:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011476:	d822      	bhi.n	80114be <_strtod_l+0xb7e>
 8011478:	a327      	add	r3, pc, #156	; (adr r3, 8011518 <_strtod_l+0xbd8>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	4630      	mov	r0, r6
 8011480:	4639      	mov	r1, r7
 8011482:	f7ef fb35 	bl	8000af0 <__aeabi_dcmple>
 8011486:	b1a0      	cbz	r0, 80114b2 <_strtod_l+0xb72>
 8011488:	4639      	mov	r1, r7
 801148a:	4630      	mov	r0, r6
 801148c:	f7ef fb8c 	bl	8000ba8 <__aeabi_d2uiz>
 8011490:	2800      	cmp	r0, #0
 8011492:	bf08      	it	eq
 8011494:	2001      	moveq	r0, #1
 8011496:	f7ef f835 	bl	8000504 <__aeabi_ui2d>
 801149a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801149c:	4606      	mov	r6, r0
 801149e:	460f      	mov	r7, r1
 80114a0:	bb03      	cbnz	r3, 80114e4 <_strtod_l+0xba4>
 80114a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114a6:	9012      	str	r0, [sp, #72]	; 0x48
 80114a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80114aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80114ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80114b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80114ba:	1a9b      	subs	r3, r3, r2
 80114bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80114be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80114c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80114c6:	f001 fd4d 	bl	8012f64 <__ulp>
 80114ca:	4650      	mov	r0, sl
 80114cc:	ec53 2b10 	vmov	r2, r3, d0
 80114d0:	4659      	mov	r1, fp
 80114d2:	f7ef f891 	bl	80005f8 <__aeabi_dmul>
 80114d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114da:	f7ee fed7 	bl	800028c <__adddf3>
 80114de:	4682      	mov	sl, r0
 80114e0:	468b      	mov	fp, r1
 80114e2:	e772      	b.n	80113ca <_strtod_l+0xa8a>
 80114e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80114e8:	e7df      	b.n	80114aa <_strtod_l+0xb6a>
 80114ea:	a30d      	add	r3, pc, #52	; (adr r3, 8011520 <_strtod_l+0xbe0>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	f7ef faf4 	bl	8000adc <__aeabi_dcmplt>
 80114f4:	e79c      	b.n	8011430 <_strtod_l+0xaf0>
 80114f6:	2300      	movs	r3, #0
 80114f8:	930d      	str	r3, [sp, #52]	; 0x34
 80114fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	f7ff ba61 	b.w	80109c6 <_strtod_l+0x86>
 8011504:	2b65      	cmp	r3, #101	; 0x65
 8011506:	f04f 0200 	mov.w	r2, #0
 801150a:	f43f ab4e 	beq.w	8010baa <_strtod_l+0x26a>
 801150e:	2101      	movs	r1, #1
 8011510:	4614      	mov	r4, r2
 8011512:	9104      	str	r1, [sp, #16]
 8011514:	f7ff bacb 	b.w	8010aae <_strtod_l+0x16e>
 8011518:	ffc00000 	.word	0xffc00000
 801151c:	41dfffff 	.word	0x41dfffff
 8011520:	94a03595 	.word	0x94a03595
 8011524:	3fcfffff 	.word	0x3fcfffff

08011528 <_strtod_r>:
 8011528:	4b05      	ldr	r3, [pc, #20]	; (8011540 <_strtod_r+0x18>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	b410      	push	{r4}
 801152e:	6a1b      	ldr	r3, [r3, #32]
 8011530:	4c04      	ldr	r4, [pc, #16]	; (8011544 <_strtod_r+0x1c>)
 8011532:	2b00      	cmp	r3, #0
 8011534:	bf08      	it	eq
 8011536:	4623      	moveq	r3, r4
 8011538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801153c:	f7ff ba00 	b.w	8010940 <_strtod_l>
 8011540:	200001c0 	.word	0x200001c0
 8011544:	20000224 	.word	0x20000224

08011548 <_strtol_l.isra.0>:
 8011548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801154c:	4680      	mov	r8, r0
 801154e:	4689      	mov	r9, r1
 8011550:	4692      	mov	sl, r2
 8011552:	461e      	mov	r6, r3
 8011554:	460f      	mov	r7, r1
 8011556:	463d      	mov	r5, r7
 8011558:	9808      	ldr	r0, [sp, #32]
 801155a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801155e:	f001 fa0d 	bl	801297c <__locale_ctype_ptr_l>
 8011562:	4420      	add	r0, r4
 8011564:	7843      	ldrb	r3, [r0, #1]
 8011566:	f013 0308 	ands.w	r3, r3, #8
 801156a:	d132      	bne.n	80115d2 <_strtol_l.isra.0+0x8a>
 801156c:	2c2d      	cmp	r4, #45	; 0x2d
 801156e:	d132      	bne.n	80115d6 <_strtol_l.isra.0+0x8e>
 8011570:	787c      	ldrb	r4, [r7, #1]
 8011572:	1cbd      	adds	r5, r7, #2
 8011574:	2201      	movs	r2, #1
 8011576:	2e00      	cmp	r6, #0
 8011578:	d05d      	beq.n	8011636 <_strtol_l.isra.0+0xee>
 801157a:	2e10      	cmp	r6, #16
 801157c:	d109      	bne.n	8011592 <_strtol_l.isra.0+0x4a>
 801157e:	2c30      	cmp	r4, #48	; 0x30
 8011580:	d107      	bne.n	8011592 <_strtol_l.isra.0+0x4a>
 8011582:	782b      	ldrb	r3, [r5, #0]
 8011584:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011588:	2b58      	cmp	r3, #88	; 0x58
 801158a:	d14f      	bne.n	801162c <_strtol_l.isra.0+0xe4>
 801158c:	786c      	ldrb	r4, [r5, #1]
 801158e:	2610      	movs	r6, #16
 8011590:	3502      	adds	r5, #2
 8011592:	2a00      	cmp	r2, #0
 8011594:	bf14      	ite	ne
 8011596:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801159a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801159e:	2700      	movs	r7, #0
 80115a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80115a4:	4638      	mov	r0, r7
 80115a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80115aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80115ae:	2b09      	cmp	r3, #9
 80115b0:	d817      	bhi.n	80115e2 <_strtol_l.isra.0+0x9a>
 80115b2:	461c      	mov	r4, r3
 80115b4:	42a6      	cmp	r6, r4
 80115b6:	dd23      	ble.n	8011600 <_strtol_l.isra.0+0xb8>
 80115b8:	1c7b      	adds	r3, r7, #1
 80115ba:	d007      	beq.n	80115cc <_strtol_l.isra.0+0x84>
 80115bc:	4584      	cmp	ip, r0
 80115be:	d31c      	bcc.n	80115fa <_strtol_l.isra.0+0xb2>
 80115c0:	d101      	bne.n	80115c6 <_strtol_l.isra.0+0x7e>
 80115c2:	45a6      	cmp	lr, r4
 80115c4:	db19      	blt.n	80115fa <_strtol_l.isra.0+0xb2>
 80115c6:	fb00 4006 	mla	r0, r0, r6, r4
 80115ca:	2701      	movs	r7, #1
 80115cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115d0:	e7eb      	b.n	80115aa <_strtol_l.isra.0+0x62>
 80115d2:	462f      	mov	r7, r5
 80115d4:	e7bf      	b.n	8011556 <_strtol_l.isra.0+0xe>
 80115d6:	2c2b      	cmp	r4, #43	; 0x2b
 80115d8:	bf04      	itt	eq
 80115da:	1cbd      	addeq	r5, r7, #2
 80115dc:	787c      	ldrbeq	r4, [r7, #1]
 80115de:	461a      	mov	r2, r3
 80115e0:	e7c9      	b.n	8011576 <_strtol_l.isra.0+0x2e>
 80115e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80115e6:	2b19      	cmp	r3, #25
 80115e8:	d801      	bhi.n	80115ee <_strtol_l.isra.0+0xa6>
 80115ea:	3c37      	subs	r4, #55	; 0x37
 80115ec:	e7e2      	b.n	80115b4 <_strtol_l.isra.0+0x6c>
 80115ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80115f2:	2b19      	cmp	r3, #25
 80115f4:	d804      	bhi.n	8011600 <_strtol_l.isra.0+0xb8>
 80115f6:	3c57      	subs	r4, #87	; 0x57
 80115f8:	e7dc      	b.n	80115b4 <_strtol_l.isra.0+0x6c>
 80115fa:	f04f 37ff 	mov.w	r7, #4294967295
 80115fe:	e7e5      	b.n	80115cc <_strtol_l.isra.0+0x84>
 8011600:	1c7b      	adds	r3, r7, #1
 8011602:	d108      	bne.n	8011616 <_strtol_l.isra.0+0xce>
 8011604:	2322      	movs	r3, #34	; 0x22
 8011606:	f8c8 3000 	str.w	r3, [r8]
 801160a:	4608      	mov	r0, r1
 801160c:	f1ba 0f00 	cmp.w	sl, #0
 8011610:	d107      	bne.n	8011622 <_strtol_l.isra.0+0xda>
 8011612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011616:	b102      	cbz	r2, 801161a <_strtol_l.isra.0+0xd2>
 8011618:	4240      	negs	r0, r0
 801161a:	f1ba 0f00 	cmp.w	sl, #0
 801161e:	d0f8      	beq.n	8011612 <_strtol_l.isra.0+0xca>
 8011620:	b10f      	cbz	r7, 8011626 <_strtol_l.isra.0+0xde>
 8011622:	f105 39ff 	add.w	r9, r5, #4294967295
 8011626:	f8ca 9000 	str.w	r9, [sl]
 801162a:	e7f2      	b.n	8011612 <_strtol_l.isra.0+0xca>
 801162c:	2430      	movs	r4, #48	; 0x30
 801162e:	2e00      	cmp	r6, #0
 8011630:	d1af      	bne.n	8011592 <_strtol_l.isra.0+0x4a>
 8011632:	2608      	movs	r6, #8
 8011634:	e7ad      	b.n	8011592 <_strtol_l.isra.0+0x4a>
 8011636:	2c30      	cmp	r4, #48	; 0x30
 8011638:	d0a3      	beq.n	8011582 <_strtol_l.isra.0+0x3a>
 801163a:	260a      	movs	r6, #10
 801163c:	e7a9      	b.n	8011592 <_strtol_l.isra.0+0x4a>
	...

08011640 <_strtol_r>:
 8011640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011642:	4c06      	ldr	r4, [pc, #24]	; (801165c <_strtol_r+0x1c>)
 8011644:	4d06      	ldr	r5, [pc, #24]	; (8011660 <_strtol_r+0x20>)
 8011646:	6824      	ldr	r4, [r4, #0]
 8011648:	6a24      	ldr	r4, [r4, #32]
 801164a:	2c00      	cmp	r4, #0
 801164c:	bf08      	it	eq
 801164e:	462c      	moveq	r4, r5
 8011650:	9400      	str	r4, [sp, #0]
 8011652:	f7ff ff79 	bl	8011548 <_strtol_l.isra.0>
 8011656:	b003      	add	sp, #12
 8011658:	bd30      	pop	{r4, r5, pc}
 801165a:	bf00      	nop
 801165c:	200001c0 	.word	0x200001c0
 8011660:	20000224 	.word	0x20000224

08011664 <_vsiprintf_r>:
 8011664:	b500      	push	{lr}
 8011666:	b09b      	sub	sp, #108	; 0x6c
 8011668:	9100      	str	r1, [sp, #0]
 801166a:	9104      	str	r1, [sp, #16]
 801166c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011670:	9105      	str	r1, [sp, #20]
 8011672:	9102      	str	r1, [sp, #8]
 8011674:	4905      	ldr	r1, [pc, #20]	; (801168c <_vsiprintf_r+0x28>)
 8011676:	9103      	str	r1, [sp, #12]
 8011678:	4669      	mov	r1, sp
 801167a:	f001 fe0f 	bl	801329c <_svfiprintf_r>
 801167e:	9b00      	ldr	r3, [sp, #0]
 8011680:	2200      	movs	r2, #0
 8011682:	701a      	strb	r2, [r3, #0]
 8011684:	b01b      	add	sp, #108	; 0x6c
 8011686:	f85d fb04 	ldr.w	pc, [sp], #4
 801168a:	bf00      	nop
 801168c:	ffff0208 	.word	0xffff0208

08011690 <vsiprintf>:
 8011690:	4613      	mov	r3, r2
 8011692:	460a      	mov	r2, r1
 8011694:	4601      	mov	r1, r0
 8011696:	4802      	ldr	r0, [pc, #8]	; (80116a0 <vsiprintf+0x10>)
 8011698:	6800      	ldr	r0, [r0, #0]
 801169a:	f7ff bfe3 	b.w	8011664 <_vsiprintf_r>
 801169e:	bf00      	nop
 80116a0:	200001c0 	.word	0x200001c0

080116a4 <quorem>:
 80116a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a8:	6903      	ldr	r3, [r0, #16]
 80116aa:	690c      	ldr	r4, [r1, #16]
 80116ac:	42a3      	cmp	r3, r4
 80116ae:	4680      	mov	r8, r0
 80116b0:	f2c0 8082 	blt.w	80117b8 <quorem+0x114>
 80116b4:	3c01      	subs	r4, #1
 80116b6:	f101 0714 	add.w	r7, r1, #20
 80116ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80116be:	f100 0614 	add.w	r6, r0, #20
 80116c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80116c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80116ca:	eb06 030c 	add.w	r3, r6, ip
 80116ce:	3501      	adds	r5, #1
 80116d0:	eb07 090c 	add.w	r9, r7, ip
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80116da:	b395      	cbz	r5, 8011742 <quorem+0x9e>
 80116dc:	f04f 0a00 	mov.w	sl, #0
 80116e0:	4638      	mov	r0, r7
 80116e2:	46b6      	mov	lr, r6
 80116e4:	46d3      	mov	fp, sl
 80116e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80116ea:	b293      	uxth	r3, r2
 80116ec:	fb05 a303 	mla	r3, r5, r3, sl
 80116f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	ebab 0303 	sub.w	r3, fp, r3
 80116fa:	0c12      	lsrs	r2, r2, #16
 80116fc:	f8de b000 	ldr.w	fp, [lr]
 8011700:	fb05 a202 	mla	r2, r5, r2, sl
 8011704:	fa13 f38b 	uxtah	r3, r3, fp
 8011708:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801170c:	fa1f fb82 	uxth.w	fp, r2
 8011710:	f8de 2000 	ldr.w	r2, [lr]
 8011714:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801171c:	b29b      	uxth	r3, r3
 801171e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011722:	4581      	cmp	r9, r0
 8011724:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011728:	f84e 3b04 	str.w	r3, [lr], #4
 801172c:	d2db      	bcs.n	80116e6 <quorem+0x42>
 801172e:	f856 300c 	ldr.w	r3, [r6, ip]
 8011732:	b933      	cbnz	r3, 8011742 <quorem+0x9e>
 8011734:	9b01      	ldr	r3, [sp, #4]
 8011736:	3b04      	subs	r3, #4
 8011738:	429e      	cmp	r6, r3
 801173a:	461a      	mov	r2, r3
 801173c:	d330      	bcc.n	80117a0 <quorem+0xfc>
 801173e:	f8c8 4010 	str.w	r4, [r8, #16]
 8011742:	4640      	mov	r0, r8
 8011744:	f001 fb96 	bl	8012e74 <__mcmp>
 8011748:	2800      	cmp	r0, #0
 801174a:	db25      	blt.n	8011798 <quorem+0xf4>
 801174c:	3501      	adds	r5, #1
 801174e:	4630      	mov	r0, r6
 8011750:	f04f 0c00 	mov.w	ip, #0
 8011754:	f857 2b04 	ldr.w	r2, [r7], #4
 8011758:	f8d0 e000 	ldr.w	lr, [r0]
 801175c:	b293      	uxth	r3, r2
 801175e:	ebac 0303 	sub.w	r3, ip, r3
 8011762:	0c12      	lsrs	r2, r2, #16
 8011764:	fa13 f38e 	uxtah	r3, r3, lr
 8011768:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801176c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011770:	b29b      	uxth	r3, r3
 8011772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011776:	45b9      	cmp	r9, r7
 8011778:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801177c:	f840 3b04 	str.w	r3, [r0], #4
 8011780:	d2e8      	bcs.n	8011754 <quorem+0xb0>
 8011782:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011786:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801178a:	b92a      	cbnz	r2, 8011798 <quorem+0xf4>
 801178c:	3b04      	subs	r3, #4
 801178e:	429e      	cmp	r6, r3
 8011790:	461a      	mov	r2, r3
 8011792:	d30b      	bcc.n	80117ac <quorem+0x108>
 8011794:	f8c8 4010 	str.w	r4, [r8, #16]
 8011798:	4628      	mov	r0, r5
 801179a:	b003      	add	sp, #12
 801179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a0:	6812      	ldr	r2, [r2, #0]
 80117a2:	3b04      	subs	r3, #4
 80117a4:	2a00      	cmp	r2, #0
 80117a6:	d1ca      	bne.n	801173e <quorem+0x9a>
 80117a8:	3c01      	subs	r4, #1
 80117aa:	e7c5      	b.n	8011738 <quorem+0x94>
 80117ac:	6812      	ldr	r2, [r2, #0]
 80117ae:	3b04      	subs	r3, #4
 80117b0:	2a00      	cmp	r2, #0
 80117b2:	d1ef      	bne.n	8011794 <quorem+0xf0>
 80117b4:	3c01      	subs	r4, #1
 80117b6:	e7ea      	b.n	801178e <quorem+0xea>
 80117b8:	2000      	movs	r0, #0
 80117ba:	e7ee      	b.n	801179a <quorem+0xf6>
 80117bc:	0000      	movs	r0, r0
	...

080117c0 <_dtoa_r>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	ec57 6b10 	vmov	r6, r7, d0
 80117c8:	b097      	sub	sp, #92	; 0x5c
 80117ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117cc:	9106      	str	r1, [sp, #24]
 80117ce:	4604      	mov	r4, r0
 80117d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80117d2:	9312      	str	r3, [sp, #72]	; 0x48
 80117d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80117d8:	e9cd 6700 	strd	r6, r7, [sp]
 80117dc:	b93d      	cbnz	r5, 80117ee <_dtoa_r+0x2e>
 80117de:	2010      	movs	r0, #16
 80117e0:	f7fe f940 	bl	800fa64 <malloc>
 80117e4:	6260      	str	r0, [r4, #36]	; 0x24
 80117e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117ea:	6005      	str	r5, [r0, #0]
 80117ec:	60c5      	str	r5, [r0, #12]
 80117ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117f0:	6819      	ldr	r1, [r3, #0]
 80117f2:	b151      	cbz	r1, 801180a <_dtoa_r+0x4a>
 80117f4:	685a      	ldr	r2, [r3, #4]
 80117f6:	604a      	str	r2, [r1, #4]
 80117f8:	2301      	movs	r3, #1
 80117fa:	4093      	lsls	r3, r2
 80117fc:	608b      	str	r3, [r1, #8]
 80117fe:	4620      	mov	r0, r4
 8011800:	f001 f918 	bl	8012a34 <_Bfree>
 8011804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011806:	2200      	movs	r2, #0
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	1e3b      	subs	r3, r7, #0
 801180c:	bfbb      	ittet	lt
 801180e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011812:	9301      	strlt	r3, [sp, #4]
 8011814:	2300      	movge	r3, #0
 8011816:	2201      	movlt	r2, #1
 8011818:	bfac      	ite	ge
 801181a:	f8c8 3000 	strge.w	r3, [r8]
 801181e:	f8c8 2000 	strlt.w	r2, [r8]
 8011822:	4baf      	ldr	r3, [pc, #700]	; (8011ae0 <_dtoa_r+0x320>)
 8011824:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011828:	ea33 0308 	bics.w	r3, r3, r8
 801182c:	d114      	bne.n	8011858 <_dtoa_r+0x98>
 801182e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011830:	f242 730f 	movw	r3, #9999	; 0x270f
 8011834:	6013      	str	r3, [r2, #0]
 8011836:	9b00      	ldr	r3, [sp, #0]
 8011838:	b923      	cbnz	r3, 8011844 <_dtoa_r+0x84>
 801183a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801183e:	2800      	cmp	r0, #0
 8011840:	f000 8542 	beq.w	80122c8 <_dtoa_r+0xb08>
 8011844:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011846:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011af4 <_dtoa_r+0x334>
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 8544 	beq.w	80122d8 <_dtoa_r+0xb18>
 8011850:	f10b 0303 	add.w	r3, fp, #3
 8011854:	f000 bd3e 	b.w	80122d4 <_dtoa_r+0xb14>
 8011858:	e9dd 6700 	ldrd	r6, r7, [sp]
 801185c:	2200      	movs	r2, #0
 801185e:	2300      	movs	r3, #0
 8011860:	4630      	mov	r0, r6
 8011862:	4639      	mov	r1, r7
 8011864:	f7ef f930 	bl	8000ac8 <__aeabi_dcmpeq>
 8011868:	4681      	mov	r9, r0
 801186a:	b168      	cbz	r0, 8011888 <_dtoa_r+0xc8>
 801186c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801186e:	2301      	movs	r3, #1
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 8524 	beq.w	80122c2 <_dtoa_r+0xb02>
 801187a:	4b9a      	ldr	r3, [pc, #616]	; (8011ae4 <_dtoa_r+0x324>)
 801187c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801187e:	f103 3bff 	add.w	fp, r3, #4294967295
 8011882:	6013      	str	r3, [r2, #0]
 8011884:	f000 bd28 	b.w	80122d8 <_dtoa_r+0xb18>
 8011888:	aa14      	add	r2, sp, #80	; 0x50
 801188a:	a915      	add	r1, sp, #84	; 0x54
 801188c:	ec47 6b10 	vmov	d0, r6, r7
 8011890:	4620      	mov	r0, r4
 8011892:	f001 fbdd 	bl	8013050 <__d2b>
 8011896:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801189a:	9004      	str	r0, [sp, #16]
 801189c:	2d00      	cmp	r5, #0
 801189e:	d07c      	beq.n	801199a <_dtoa_r+0x1da>
 80118a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80118a8:	46b2      	mov	sl, r6
 80118aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80118ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80118b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80118b6:	2200      	movs	r2, #0
 80118b8:	4b8b      	ldr	r3, [pc, #556]	; (8011ae8 <_dtoa_r+0x328>)
 80118ba:	4650      	mov	r0, sl
 80118bc:	4659      	mov	r1, fp
 80118be:	f7ee fce3 	bl	8000288 <__aeabi_dsub>
 80118c2:	a381      	add	r3, pc, #516	; (adr r3, 8011ac8 <_dtoa_r+0x308>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f7ee fe96 	bl	80005f8 <__aeabi_dmul>
 80118cc:	a380      	add	r3, pc, #512	; (adr r3, 8011ad0 <_dtoa_r+0x310>)
 80118ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d2:	f7ee fcdb 	bl	800028c <__adddf3>
 80118d6:	4606      	mov	r6, r0
 80118d8:	4628      	mov	r0, r5
 80118da:	460f      	mov	r7, r1
 80118dc:	f7ee fe22 	bl	8000524 <__aeabi_i2d>
 80118e0:	a37d      	add	r3, pc, #500	; (adr r3, 8011ad8 <_dtoa_r+0x318>)
 80118e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e6:	f7ee fe87 	bl	80005f8 <__aeabi_dmul>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	4630      	mov	r0, r6
 80118f0:	4639      	mov	r1, r7
 80118f2:	f7ee fccb 	bl	800028c <__adddf3>
 80118f6:	4606      	mov	r6, r0
 80118f8:	460f      	mov	r7, r1
 80118fa:	f7ef f92d 	bl	8000b58 <__aeabi_d2iz>
 80118fe:	2200      	movs	r2, #0
 8011900:	4682      	mov	sl, r0
 8011902:	2300      	movs	r3, #0
 8011904:	4630      	mov	r0, r6
 8011906:	4639      	mov	r1, r7
 8011908:	f7ef f8e8 	bl	8000adc <__aeabi_dcmplt>
 801190c:	b148      	cbz	r0, 8011922 <_dtoa_r+0x162>
 801190e:	4650      	mov	r0, sl
 8011910:	f7ee fe08 	bl	8000524 <__aeabi_i2d>
 8011914:	4632      	mov	r2, r6
 8011916:	463b      	mov	r3, r7
 8011918:	f7ef f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 801191c:	b908      	cbnz	r0, 8011922 <_dtoa_r+0x162>
 801191e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011922:	f1ba 0f16 	cmp.w	sl, #22
 8011926:	d859      	bhi.n	80119dc <_dtoa_r+0x21c>
 8011928:	4970      	ldr	r1, [pc, #448]	; (8011aec <_dtoa_r+0x32c>)
 801192a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801192e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011936:	f7ef f8ef 	bl	8000b18 <__aeabi_dcmpgt>
 801193a:	2800      	cmp	r0, #0
 801193c:	d050      	beq.n	80119e0 <_dtoa_r+0x220>
 801193e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011942:	2300      	movs	r3, #0
 8011944:	930f      	str	r3, [sp, #60]	; 0x3c
 8011946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011948:	1b5d      	subs	r5, r3, r5
 801194a:	f1b5 0801 	subs.w	r8, r5, #1
 801194e:	bf49      	itett	mi
 8011950:	f1c5 0301 	rsbmi	r3, r5, #1
 8011954:	2300      	movpl	r3, #0
 8011956:	9305      	strmi	r3, [sp, #20]
 8011958:	f04f 0800 	movmi.w	r8, #0
 801195c:	bf58      	it	pl
 801195e:	9305      	strpl	r3, [sp, #20]
 8011960:	f1ba 0f00 	cmp.w	sl, #0
 8011964:	db3e      	blt.n	80119e4 <_dtoa_r+0x224>
 8011966:	2300      	movs	r3, #0
 8011968:	44d0      	add	r8, sl
 801196a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801196e:	9307      	str	r3, [sp, #28]
 8011970:	9b06      	ldr	r3, [sp, #24]
 8011972:	2b09      	cmp	r3, #9
 8011974:	f200 8090 	bhi.w	8011a98 <_dtoa_r+0x2d8>
 8011978:	2b05      	cmp	r3, #5
 801197a:	bfc4      	itt	gt
 801197c:	3b04      	subgt	r3, #4
 801197e:	9306      	strgt	r3, [sp, #24]
 8011980:	9b06      	ldr	r3, [sp, #24]
 8011982:	f1a3 0302 	sub.w	r3, r3, #2
 8011986:	bfcc      	ite	gt
 8011988:	2500      	movgt	r5, #0
 801198a:	2501      	movle	r5, #1
 801198c:	2b03      	cmp	r3, #3
 801198e:	f200 808f 	bhi.w	8011ab0 <_dtoa_r+0x2f0>
 8011992:	e8df f003 	tbb	[pc, r3]
 8011996:	7f7d      	.short	0x7f7d
 8011998:	7131      	.short	0x7131
 801199a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801199e:	441d      	add	r5, r3
 80119a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80119a4:	2820      	cmp	r0, #32
 80119a6:	dd13      	ble.n	80119d0 <_dtoa_r+0x210>
 80119a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80119ac:	9b00      	ldr	r3, [sp, #0]
 80119ae:	fa08 f800 	lsl.w	r8, r8, r0
 80119b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80119b6:	fa23 f000 	lsr.w	r0, r3, r0
 80119ba:	ea48 0000 	orr.w	r0, r8, r0
 80119be:	f7ee fda1 	bl	8000504 <__aeabi_ui2d>
 80119c2:	2301      	movs	r3, #1
 80119c4:	4682      	mov	sl, r0
 80119c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80119ca:	3d01      	subs	r5, #1
 80119cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80119ce:	e772      	b.n	80118b6 <_dtoa_r+0xf6>
 80119d0:	9b00      	ldr	r3, [sp, #0]
 80119d2:	f1c0 0020 	rsb	r0, r0, #32
 80119d6:	fa03 f000 	lsl.w	r0, r3, r0
 80119da:	e7f0      	b.n	80119be <_dtoa_r+0x1fe>
 80119dc:	2301      	movs	r3, #1
 80119de:	e7b1      	b.n	8011944 <_dtoa_r+0x184>
 80119e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80119e2:	e7b0      	b.n	8011946 <_dtoa_r+0x186>
 80119e4:	9b05      	ldr	r3, [sp, #20]
 80119e6:	eba3 030a 	sub.w	r3, r3, sl
 80119ea:	9305      	str	r3, [sp, #20]
 80119ec:	f1ca 0300 	rsb	r3, sl, #0
 80119f0:	9307      	str	r3, [sp, #28]
 80119f2:	2300      	movs	r3, #0
 80119f4:	930e      	str	r3, [sp, #56]	; 0x38
 80119f6:	e7bb      	b.n	8011970 <_dtoa_r+0x1b0>
 80119f8:	2301      	movs	r3, #1
 80119fa:	930a      	str	r3, [sp, #40]	; 0x28
 80119fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd59      	ble.n	8011ab6 <_dtoa_r+0x2f6>
 8011a02:	9302      	str	r3, [sp, #8]
 8011a04:	4699      	mov	r9, r3
 8011a06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a08:	2200      	movs	r2, #0
 8011a0a:	6072      	str	r2, [r6, #4]
 8011a0c:	2204      	movs	r2, #4
 8011a0e:	f102 0014 	add.w	r0, r2, #20
 8011a12:	4298      	cmp	r0, r3
 8011a14:	6871      	ldr	r1, [r6, #4]
 8011a16:	d953      	bls.n	8011ac0 <_dtoa_r+0x300>
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 ffd7 	bl	80129cc <_Balloc>
 8011a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a20:	6030      	str	r0, [r6, #0]
 8011a22:	f1b9 0f0e 	cmp.w	r9, #14
 8011a26:	f8d3 b000 	ldr.w	fp, [r3]
 8011a2a:	f200 80e6 	bhi.w	8011bfa <_dtoa_r+0x43a>
 8011a2e:	2d00      	cmp	r5, #0
 8011a30:	f000 80e3 	beq.w	8011bfa <_dtoa_r+0x43a>
 8011a34:	ed9d 7b00 	vldr	d7, [sp]
 8011a38:	f1ba 0f00 	cmp.w	sl, #0
 8011a3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011a40:	dd74      	ble.n	8011b2c <_dtoa_r+0x36c>
 8011a42:	4a2a      	ldr	r2, [pc, #168]	; (8011aec <_dtoa_r+0x32c>)
 8011a44:	f00a 030f 	and.w	r3, sl, #15
 8011a48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011a4c:	ed93 7b00 	vldr	d7, [r3]
 8011a50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011a54:	06f0      	lsls	r0, r6, #27
 8011a56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011a5a:	d565      	bpl.n	8011b28 <_dtoa_r+0x368>
 8011a5c:	4b24      	ldr	r3, [pc, #144]	; (8011af0 <_dtoa_r+0x330>)
 8011a5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011a62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a66:	f7ee fef1 	bl	800084c <__aeabi_ddiv>
 8011a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8011a6e:	f006 060f 	and.w	r6, r6, #15
 8011a72:	2503      	movs	r5, #3
 8011a74:	4f1e      	ldr	r7, [pc, #120]	; (8011af0 <_dtoa_r+0x330>)
 8011a76:	e04c      	b.n	8011b12 <_dtoa_r+0x352>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8011a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a7e:	4453      	add	r3, sl
 8011a80:	f103 0901 	add.w	r9, r3, #1
 8011a84:	9302      	str	r3, [sp, #8]
 8011a86:	464b      	mov	r3, r9
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	bfb8      	it	lt
 8011a8c:	2301      	movlt	r3, #1
 8011a8e:	e7ba      	b.n	8011a06 <_dtoa_r+0x246>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e7b2      	b.n	80119fa <_dtoa_r+0x23a>
 8011a94:	2300      	movs	r3, #0
 8011a96:	e7f0      	b.n	8011a7a <_dtoa_r+0x2ba>
 8011a98:	2501      	movs	r5, #1
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	9306      	str	r3, [sp, #24]
 8011a9e:	950a      	str	r5, [sp, #40]	; 0x28
 8011aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa4:	9302      	str	r3, [sp, #8]
 8011aa6:	4699      	mov	r9, r3
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	2312      	movs	r3, #18
 8011aac:	920b      	str	r2, [sp, #44]	; 0x2c
 8011aae:	e7aa      	b.n	8011a06 <_dtoa_r+0x246>
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ab4:	e7f4      	b.n	8011aa0 <_dtoa_r+0x2e0>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	9302      	str	r3, [sp, #8]
 8011aba:	4699      	mov	r9, r3
 8011abc:	461a      	mov	r2, r3
 8011abe:	e7f5      	b.n	8011aac <_dtoa_r+0x2ec>
 8011ac0:	3101      	adds	r1, #1
 8011ac2:	6071      	str	r1, [r6, #4]
 8011ac4:	0052      	lsls	r2, r2, #1
 8011ac6:	e7a2      	b.n	8011a0e <_dtoa_r+0x24e>
 8011ac8:	636f4361 	.word	0x636f4361
 8011acc:	3fd287a7 	.word	0x3fd287a7
 8011ad0:	8b60c8b3 	.word	0x8b60c8b3
 8011ad4:	3fc68a28 	.word	0x3fc68a28
 8011ad8:	509f79fb 	.word	0x509f79fb
 8011adc:	3fd34413 	.word	0x3fd34413
 8011ae0:	7ff00000 	.word	0x7ff00000
 8011ae4:	08015231 	.word	0x08015231
 8011ae8:	3ff80000 	.word	0x3ff80000
 8011aec:	080152f0 	.word	0x080152f0
 8011af0:	080152c8 	.word	0x080152c8
 8011af4:	080152b9 	.word	0x080152b9
 8011af8:	07f1      	lsls	r1, r6, #31
 8011afa:	d508      	bpl.n	8011b0e <_dtoa_r+0x34e>
 8011afc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b04:	f7ee fd78 	bl	80005f8 <__aeabi_dmul>
 8011b08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	1076      	asrs	r6, r6, #1
 8011b10:	3708      	adds	r7, #8
 8011b12:	2e00      	cmp	r6, #0
 8011b14:	d1f0      	bne.n	8011af8 <_dtoa_r+0x338>
 8011b16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b1e:	f7ee fe95 	bl	800084c <__aeabi_ddiv>
 8011b22:	e9cd 0100 	strd	r0, r1, [sp]
 8011b26:	e01a      	b.n	8011b5e <_dtoa_r+0x39e>
 8011b28:	2502      	movs	r5, #2
 8011b2a:	e7a3      	b.n	8011a74 <_dtoa_r+0x2b4>
 8011b2c:	f000 80a0 	beq.w	8011c70 <_dtoa_r+0x4b0>
 8011b30:	f1ca 0600 	rsb	r6, sl, #0
 8011b34:	4b9f      	ldr	r3, [pc, #636]	; (8011db4 <_dtoa_r+0x5f4>)
 8011b36:	4fa0      	ldr	r7, [pc, #640]	; (8011db8 <_dtoa_r+0x5f8>)
 8011b38:	f006 020f 	and.w	r2, r6, #15
 8011b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011b48:	f7ee fd56 	bl	80005f8 <__aeabi_dmul>
 8011b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8011b50:	1136      	asrs	r6, r6, #4
 8011b52:	2300      	movs	r3, #0
 8011b54:	2502      	movs	r5, #2
 8011b56:	2e00      	cmp	r6, #0
 8011b58:	d17f      	bne.n	8011c5a <_dtoa_r+0x49a>
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d1e1      	bne.n	8011b22 <_dtoa_r+0x362>
 8011b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f000 8087 	beq.w	8011c74 <_dtoa_r+0x4b4>
 8011b66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4b93      	ldr	r3, [pc, #588]	; (8011dbc <_dtoa_r+0x5fc>)
 8011b6e:	4630      	mov	r0, r6
 8011b70:	4639      	mov	r1, r7
 8011b72:	f7ee ffb3 	bl	8000adc <__aeabi_dcmplt>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	d07c      	beq.n	8011c74 <_dtoa_r+0x4b4>
 8011b7a:	f1b9 0f00 	cmp.w	r9, #0
 8011b7e:	d079      	beq.n	8011c74 <_dtoa_r+0x4b4>
 8011b80:	9b02      	ldr	r3, [sp, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	dd35      	ble.n	8011bf2 <_dtoa_r+0x432>
 8011b86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011b8a:	9308      	str	r3, [sp, #32]
 8011b8c:	4639      	mov	r1, r7
 8011b8e:	2200      	movs	r2, #0
 8011b90:	4b8b      	ldr	r3, [pc, #556]	; (8011dc0 <_dtoa_r+0x600>)
 8011b92:	4630      	mov	r0, r6
 8011b94:	f7ee fd30 	bl	80005f8 <__aeabi_dmul>
 8011b98:	e9cd 0100 	strd	r0, r1, [sp]
 8011b9c:	9f02      	ldr	r7, [sp, #8]
 8011b9e:	3501      	adds	r5, #1
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	f7ee fcbf 	bl	8000524 <__aeabi_i2d>
 8011ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011baa:	f7ee fd25 	bl	80005f8 <__aeabi_dmul>
 8011bae:	2200      	movs	r2, #0
 8011bb0:	4b84      	ldr	r3, [pc, #528]	; (8011dc4 <_dtoa_r+0x604>)
 8011bb2:	f7ee fb6b 	bl	800028c <__adddf3>
 8011bb6:	4605      	mov	r5, r0
 8011bb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011bbc:	2f00      	cmp	r7, #0
 8011bbe:	d15d      	bne.n	8011c7c <_dtoa_r+0x4bc>
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	4b81      	ldr	r3, [pc, #516]	; (8011dc8 <_dtoa_r+0x608>)
 8011bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bc8:	f7ee fb5e 	bl	8000288 <__aeabi_dsub>
 8011bcc:	462a      	mov	r2, r5
 8011bce:	4633      	mov	r3, r6
 8011bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8011bd4:	f7ee ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	f040 8288 	bne.w	80120ee <_dtoa_r+0x92e>
 8011bde:	462a      	mov	r2, r5
 8011be0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011be4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011be8:	f7ee ff78 	bl	8000adc <__aeabi_dcmplt>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	f040 827c 	bne.w	80120ea <_dtoa_r+0x92a>
 8011bf2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011bf6:	e9cd 2300 	strd	r2, r3, [sp]
 8011bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f2c0 8150 	blt.w	8011ea2 <_dtoa_r+0x6e2>
 8011c02:	f1ba 0f0e 	cmp.w	sl, #14
 8011c06:	f300 814c 	bgt.w	8011ea2 <_dtoa_r+0x6e2>
 8011c0a:	4b6a      	ldr	r3, [pc, #424]	; (8011db4 <_dtoa_r+0x5f4>)
 8011c0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c10:	ed93 7b00 	vldr	d7, [r3]
 8011c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c1c:	f280 80d8 	bge.w	8011dd0 <_dtoa_r+0x610>
 8011c20:	f1b9 0f00 	cmp.w	r9, #0
 8011c24:	f300 80d4 	bgt.w	8011dd0 <_dtoa_r+0x610>
 8011c28:	f040 825e 	bne.w	80120e8 <_dtoa_r+0x928>
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	4b66      	ldr	r3, [pc, #408]	; (8011dc8 <_dtoa_r+0x608>)
 8011c30:	ec51 0b17 	vmov	r0, r1, d7
 8011c34:	f7ee fce0 	bl	80005f8 <__aeabi_dmul>
 8011c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c3c:	f7ee ff62 	bl	8000b04 <__aeabi_dcmpge>
 8011c40:	464f      	mov	r7, r9
 8011c42:	464e      	mov	r6, r9
 8011c44:	2800      	cmp	r0, #0
 8011c46:	f040 8234 	bne.w	80120b2 <_dtoa_r+0x8f2>
 8011c4a:	2331      	movs	r3, #49	; 0x31
 8011c4c:	f10b 0501 	add.w	r5, fp, #1
 8011c50:	f88b 3000 	strb.w	r3, [fp]
 8011c54:	f10a 0a01 	add.w	sl, sl, #1
 8011c58:	e22f      	b.n	80120ba <_dtoa_r+0x8fa>
 8011c5a:	07f2      	lsls	r2, r6, #31
 8011c5c:	d505      	bpl.n	8011c6a <_dtoa_r+0x4aa>
 8011c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c62:	f7ee fcc9 	bl	80005f8 <__aeabi_dmul>
 8011c66:	3501      	adds	r5, #1
 8011c68:	2301      	movs	r3, #1
 8011c6a:	1076      	asrs	r6, r6, #1
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	e772      	b.n	8011b56 <_dtoa_r+0x396>
 8011c70:	2502      	movs	r5, #2
 8011c72:	e774      	b.n	8011b5e <_dtoa_r+0x39e>
 8011c74:	f8cd a020 	str.w	sl, [sp, #32]
 8011c78:	464f      	mov	r7, r9
 8011c7a:	e791      	b.n	8011ba0 <_dtoa_r+0x3e0>
 8011c7c:	4b4d      	ldr	r3, [pc, #308]	; (8011db4 <_dtoa_r+0x5f4>)
 8011c7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011c82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d047      	beq.n	8011d1c <_dtoa_r+0x55c>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	460b      	mov	r3, r1
 8011c90:	2000      	movs	r0, #0
 8011c92:	494e      	ldr	r1, [pc, #312]	; (8011dcc <_dtoa_r+0x60c>)
 8011c94:	f7ee fdda 	bl	800084c <__aeabi_ddiv>
 8011c98:	462a      	mov	r2, r5
 8011c9a:	4633      	mov	r3, r6
 8011c9c:	f7ee faf4 	bl	8000288 <__aeabi_dsub>
 8011ca0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011ca4:	465d      	mov	r5, fp
 8011ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011caa:	f7ee ff55 	bl	8000b58 <__aeabi_d2iz>
 8011cae:	4606      	mov	r6, r0
 8011cb0:	f7ee fc38 	bl	8000524 <__aeabi_i2d>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cbc:	f7ee fae4 	bl	8000288 <__aeabi_dsub>
 8011cc0:	3630      	adds	r6, #48	; 0x30
 8011cc2:	f805 6b01 	strb.w	r6, [r5], #1
 8011cc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011cca:	e9cd 0100 	strd	r0, r1, [sp]
 8011cce:	f7ee ff05 	bl	8000adc <__aeabi_dcmplt>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d163      	bne.n	8011d9e <_dtoa_r+0x5de>
 8011cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cda:	2000      	movs	r0, #0
 8011cdc:	4937      	ldr	r1, [pc, #220]	; (8011dbc <_dtoa_r+0x5fc>)
 8011cde:	f7ee fad3 	bl	8000288 <__aeabi_dsub>
 8011ce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011ce6:	f7ee fef9 	bl	8000adc <__aeabi_dcmplt>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	f040 80b7 	bne.w	8011e5e <_dtoa_r+0x69e>
 8011cf0:	eba5 030b 	sub.w	r3, r5, fp
 8011cf4:	429f      	cmp	r7, r3
 8011cf6:	f77f af7c 	ble.w	8011bf2 <_dtoa_r+0x432>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	4b30      	ldr	r3, [pc, #192]	; (8011dc0 <_dtoa_r+0x600>)
 8011cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d02:	f7ee fc79 	bl	80005f8 <__aeabi_dmul>
 8011d06:	2200      	movs	r2, #0
 8011d08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011d0c:	4b2c      	ldr	r3, [pc, #176]	; (8011dc0 <_dtoa_r+0x600>)
 8011d0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d12:	f7ee fc71 	bl	80005f8 <__aeabi_dmul>
 8011d16:	e9cd 0100 	strd	r0, r1, [sp]
 8011d1a:	e7c4      	b.n	8011ca6 <_dtoa_r+0x4e6>
 8011d1c:	462a      	mov	r2, r5
 8011d1e:	4633      	mov	r3, r6
 8011d20:	f7ee fc6a 	bl	80005f8 <__aeabi_dmul>
 8011d24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011d28:	eb0b 0507 	add.w	r5, fp, r7
 8011d2c:	465e      	mov	r6, fp
 8011d2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d32:	f7ee ff11 	bl	8000b58 <__aeabi_d2iz>
 8011d36:	4607      	mov	r7, r0
 8011d38:	f7ee fbf4 	bl	8000524 <__aeabi_i2d>
 8011d3c:	3730      	adds	r7, #48	; 0x30
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d46:	f7ee fa9f 	bl	8000288 <__aeabi_dsub>
 8011d4a:	f806 7b01 	strb.w	r7, [r6], #1
 8011d4e:	42ae      	cmp	r6, r5
 8011d50:	e9cd 0100 	strd	r0, r1, [sp]
 8011d54:	f04f 0200 	mov.w	r2, #0
 8011d58:	d126      	bne.n	8011da8 <_dtoa_r+0x5e8>
 8011d5a:	4b1c      	ldr	r3, [pc, #112]	; (8011dcc <_dtoa_r+0x60c>)
 8011d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d60:	f7ee fa94 	bl	800028c <__adddf3>
 8011d64:	4602      	mov	r2, r0
 8011d66:	460b      	mov	r3, r1
 8011d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d6c:	f7ee fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d174      	bne.n	8011e5e <_dtoa_r+0x69e>
 8011d74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011d78:	2000      	movs	r0, #0
 8011d7a:	4914      	ldr	r1, [pc, #80]	; (8011dcc <_dtoa_r+0x60c>)
 8011d7c:	f7ee fa84 	bl	8000288 <__aeabi_dsub>
 8011d80:	4602      	mov	r2, r0
 8011d82:	460b      	mov	r3, r1
 8011d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d88:	f7ee fea8 	bl	8000adc <__aeabi_dcmplt>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	f43f af30 	beq.w	8011bf2 <_dtoa_r+0x432>
 8011d92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d96:	2b30      	cmp	r3, #48	; 0x30
 8011d98:	f105 32ff 	add.w	r2, r5, #4294967295
 8011d9c:	d002      	beq.n	8011da4 <_dtoa_r+0x5e4>
 8011d9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011da2:	e04a      	b.n	8011e3a <_dtoa_r+0x67a>
 8011da4:	4615      	mov	r5, r2
 8011da6:	e7f4      	b.n	8011d92 <_dtoa_r+0x5d2>
 8011da8:	4b05      	ldr	r3, [pc, #20]	; (8011dc0 <_dtoa_r+0x600>)
 8011daa:	f7ee fc25 	bl	80005f8 <__aeabi_dmul>
 8011dae:	e9cd 0100 	strd	r0, r1, [sp]
 8011db2:	e7bc      	b.n	8011d2e <_dtoa_r+0x56e>
 8011db4:	080152f0 	.word	0x080152f0
 8011db8:	080152c8 	.word	0x080152c8
 8011dbc:	3ff00000 	.word	0x3ff00000
 8011dc0:	40240000 	.word	0x40240000
 8011dc4:	401c0000 	.word	0x401c0000
 8011dc8:	40140000 	.word	0x40140000
 8011dcc:	3fe00000 	.word	0x3fe00000
 8011dd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011dd4:	465d      	mov	r5, fp
 8011dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011dda:	4630      	mov	r0, r6
 8011ddc:	4639      	mov	r1, r7
 8011dde:	f7ee fd35 	bl	800084c <__aeabi_ddiv>
 8011de2:	f7ee feb9 	bl	8000b58 <__aeabi_d2iz>
 8011de6:	4680      	mov	r8, r0
 8011de8:	f7ee fb9c 	bl	8000524 <__aeabi_i2d>
 8011dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011df0:	f7ee fc02 	bl	80005f8 <__aeabi_dmul>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	4630      	mov	r0, r6
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011e00:	f7ee fa42 	bl	8000288 <__aeabi_dsub>
 8011e04:	f805 6b01 	strb.w	r6, [r5], #1
 8011e08:	eba5 060b 	sub.w	r6, r5, fp
 8011e0c:	45b1      	cmp	r9, r6
 8011e0e:	4602      	mov	r2, r0
 8011e10:	460b      	mov	r3, r1
 8011e12:	d139      	bne.n	8011e88 <_dtoa_r+0x6c8>
 8011e14:	f7ee fa3a 	bl	800028c <__adddf3>
 8011e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	460f      	mov	r7, r1
 8011e20:	f7ee fe7a 	bl	8000b18 <__aeabi_dcmpgt>
 8011e24:	b9c8      	cbnz	r0, 8011e5a <_dtoa_r+0x69a>
 8011e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	4639      	mov	r1, r7
 8011e2e:	f7ee fe4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e32:	b110      	cbz	r0, 8011e3a <_dtoa_r+0x67a>
 8011e34:	f018 0f01 	tst.w	r8, #1
 8011e38:	d10f      	bne.n	8011e5a <_dtoa_r+0x69a>
 8011e3a:	9904      	ldr	r1, [sp, #16]
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f000 fdf9 	bl	8012a34 <_Bfree>
 8011e42:	2300      	movs	r3, #0
 8011e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011e46:	702b      	strb	r3, [r5, #0]
 8011e48:	f10a 0301 	add.w	r3, sl, #1
 8011e4c:	6013      	str	r3, [r2, #0]
 8011e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f000 8241 	beq.w	80122d8 <_dtoa_r+0xb18>
 8011e56:	601d      	str	r5, [r3, #0]
 8011e58:	e23e      	b.n	80122d8 <_dtoa_r+0xb18>
 8011e5a:	f8cd a020 	str.w	sl, [sp, #32]
 8011e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011e62:	2a39      	cmp	r2, #57	; 0x39
 8011e64:	f105 33ff 	add.w	r3, r5, #4294967295
 8011e68:	d108      	bne.n	8011e7c <_dtoa_r+0x6bc>
 8011e6a:	459b      	cmp	fp, r3
 8011e6c:	d10a      	bne.n	8011e84 <_dtoa_r+0x6c4>
 8011e6e:	9b08      	ldr	r3, [sp, #32]
 8011e70:	3301      	adds	r3, #1
 8011e72:	9308      	str	r3, [sp, #32]
 8011e74:	2330      	movs	r3, #48	; 0x30
 8011e76:	f88b 3000 	strb.w	r3, [fp]
 8011e7a:	465b      	mov	r3, fp
 8011e7c:	781a      	ldrb	r2, [r3, #0]
 8011e7e:	3201      	adds	r2, #1
 8011e80:	701a      	strb	r2, [r3, #0]
 8011e82:	e78c      	b.n	8011d9e <_dtoa_r+0x5de>
 8011e84:	461d      	mov	r5, r3
 8011e86:	e7ea      	b.n	8011e5e <_dtoa_r+0x69e>
 8011e88:	2200      	movs	r2, #0
 8011e8a:	4b9b      	ldr	r3, [pc, #620]	; (80120f8 <_dtoa_r+0x938>)
 8011e8c:	f7ee fbb4 	bl	80005f8 <__aeabi_dmul>
 8011e90:	2200      	movs	r2, #0
 8011e92:	2300      	movs	r3, #0
 8011e94:	4606      	mov	r6, r0
 8011e96:	460f      	mov	r7, r1
 8011e98:	f7ee fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d09a      	beq.n	8011dd6 <_dtoa_r+0x616>
 8011ea0:	e7cb      	b.n	8011e3a <_dtoa_r+0x67a>
 8011ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ea4:	2a00      	cmp	r2, #0
 8011ea6:	f000 808b 	beq.w	8011fc0 <_dtoa_r+0x800>
 8011eaa:	9a06      	ldr	r2, [sp, #24]
 8011eac:	2a01      	cmp	r2, #1
 8011eae:	dc6e      	bgt.n	8011f8e <_dtoa_r+0x7ce>
 8011eb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011eb2:	2a00      	cmp	r2, #0
 8011eb4:	d067      	beq.n	8011f86 <_dtoa_r+0x7c6>
 8011eb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011eba:	9f07      	ldr	r7, [sp, #28]
 8011ebc:	9d05      	ldr	r5, [sp, #20]
 8011ebe:	9a05      	ldr	r2, [sp, #20]
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	441a      	add	r2, r3
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	9205      	str	r2, [sp, #20]
 8011ec8:	4498      	add	r8, r3
 8011eca:	f000 fe91 	bl	8012bf0 <__i2b>
 8011ece:	4606      	mov	r6, r0
 8011ed0:	2d00      	cmp	r5, #0
 8011ed2:	dd0c      	ble.n	8011eee <_dtoa_r+0x72e>
 8011ed4:	f1b8 0f00 	cmp.w	r8, #0
 8011ed8:	dd09      	ble.n	8011eee <_dtoa_r+0x72e>
 8011eda:	4545      	cmp	r5, r8
 8011edc:	9a05      	ldr	r2, [sp, #20]
 8011ede:	462b      	mov	r3, r5
 8011ee0:	bfa8      	it	ge
 8011ee2:	4643      	movge	r3, r8
 8011ee4:	1ad2      	subs	r2, r2, r3
 8011ee6:	9205      	str	r2, [sp, #20]
 8011ee8:	1aed      	subs	r5, r5, r3
 8011eea:	eba8 0803 	sub.w	r8, r8, r3
 8011eee:	9b07      	ldr	r3, [sp, #28]
 8011ef0:	b1eb      	cbz	r3, 8011f2e <_dtoa_r+0x76e>
 8011ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d067      	beq.n	8011fc8 <_dtoa_r+0x808>
 8011ef8:	b18f      	cbz	r7, 8011f1e <_dtoa_r+0x75e>
 8011efa:	4631      	mov	r1, r6
 8011efc:	463a      	mov	r2, r7
 8011efe:	4620      	mov	r0, r4
 8011f00:	f000 ff16 	bl	8012d30 <__pow5mult>
 8011f04:	9a04      	ldr	r2, [sp, #16]
 8011f06:	4601      	mov	r1, r0
 8011f08:	4606      	mov	r6, r0
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f000 fe79 	bl	8012c02 <__multiply>
 8011f10:	9904      	ldr	r1, [sp, #16]
 8011f12:	9008      	str	r0, [sp, #32]
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 fd8d 	bl	8012a34 <_Bfree>
 8011f1a:	9b08      	ldr	r3, [sp, #32]
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	9b07      	ldr	r3, [sp, #28]
 8011f20:	1bda      	subs	r2, r3, r7
 8011f22:	d004      	beq.n	8011f2e <_dtoa_r+0x76e>
 8011f24:	9904      	ldr	r1, [sp, #16]
 8011f26:	4620      	mov	r0, r4
 8011f28:	f000 ff02 	bl	8012d30 <__pow5mult>
 8011f2c:	9004      	str	r0, [sp, #16]
 8011f2e:	2101      	movs	r1, #1
 8011f30:	4620      	mov	r0, r4
 8011f32:	f000 fe5d 	bl	8012bf0 <__i2b>
 8011f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f38:	4607      	mov	r7, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f000 81d0 	beq.w	80122e0 <_dtoa_r+0xb20>
 8011f40:	461a      	mov	r2, r3
 8011f42:	4601      	mov	r1, r0
 8011f44:	4620      	mov	r0, r4
 8011f46:	f000 fef3 	bl	8012d30 <__pow5mult>
 8011f4a:	9b06      	ldr	r3, [sp, #24]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	4607      	mov	r7, r0
 8011f50:	dc40      	bgt.n	8011fd4 <_dtoa_r+0x814>
 8011f52:	9b00      	ldr	r3, [sp, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d139      	bne.n	8011fcc <_dtoa_r+0x80c>
 8011f58:	9b01      	ldr	r3, [sp, #4]
 8011f5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d136      	bne.n	8011fd0 <_dtoa_r+0x810>
 8011f62:	9b01      	ldr	r3, [sp, #4]
 8011f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f68:	0d1b      	lsrs	r3, r3, #20
 8011f6a:	051b      	lsls	r3, r3, #20
 8011f6c:	b12b      	cbz	r3, 8011f7a <_dtoa_r+0x7ba>
 8011f6e:	9b05      	ldr	r3, [sp, #20]
 8011f70:	3301      	adds	r3, #1
 8011f72:	9305      	str	r3, [sp, #20]
 8011f74:	f108 0801 	add.w	r8, r8, #1
 8011f78:	2301      	movs	r3, #1
 8011f7a:	9307      	str	r3, [sp, #28]
 8011f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d12a      	bne.n	8011fd8 <_dtoa_r+0x818>
 8011f82:	2001      	movs	r0, #1
 8011f84:	e030      	b.n	8011fe8 <_dtoa_r+0x828>
 8011f86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011f8c:	e795      	b.n	8011eba <_dtoa_r+0x6fa>
 8011f8e:	9b07      	ldr	r3, [sp, #28]
 8011f90:	f109 37ff 	add.w	r7, r9, #4294967295
 8011f94:	42bb      	cmp	r3, r7
 8011f96:	bfbf      	itttt	lt
 8011f98:	9b07      	ldrlt	r3, [sp, #28]
 8011f9a:	9707      	strlt	r7, [sp, #28]
 8011f9c:	1afa      	sublt	r2, r7, r3
 8011f9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011fa0:	bfbb      	ittet	lt
 8011fa2:	189b      	addlt	r3, r3, r2
 8011fa4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011fa6:	1bdf      	subge	r7, r3, r7
 8011fa8:	2700      	movlt	r7, #0
 8011faa:	f1b9 0f00 	cmp.w	r9, #0
 8011fae:	bfb5      	itete	lt
 8011fb0:	9b05      	ldrlt	r3, [sp, #20]
 8011fb2:	9d05      	ldrge	r5, [sp, #20]
 8011fb4:	eba3 0509 	sublt.w	r5, r3, r9
 8011fb8:	464b      	movge	r3, r9
 8011fba:	bfb8      	it	lt
 8011fbc:	2300      	movlt	r3, #0
 8011fbe:	e77e      	b.n	8011ebe <_dtoa_r+0x6fe>
 8011fc0:	9f07      	ldr	r7, [sp, #28]
 8011fc2:	9d05      	ldr	r5, [sp, #20]
 8011fc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011fc6:	e783      	b.n	8011ed0 <_dtoa_r+0x710>
 8011fc8:	9a07      	ldr	r2, [sp, #28]
 8011fca:	e7ab      	b.n	8011f24 <_dtoa_r+0x764>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	e7d4      	b.n	8011f7a <_dtoa_r+0x7ba>
 8011fd0:	9b00      	ldr	r3, [sp, #0]
 8011fd2:	e7d2      	b.n	8011f7a <_dtoa_r+0x7ba>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	9307      	str	r3, [sp, #28]
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011fde:	6918      	ldr	r0, [r3, #16]
 8011fe0:	f000 fdb8 	bl	8012b54 <__hi0bits>
 8011fe4:	f1c0 0020 	rsb	r0, r0, #32
 8011fe8:	4440      	add	r0, r8
 8011fea:	f010 001f 	ands.w	r0, r0, #31
 8011fee:	d047      	beq.n	8012080 <_dtoa_r+0x8c0>
 8011ff0:	f1c0 0320 	rsb	r3, r0, #32
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	dd3b      	ble.n	8012070 <_dtoa_r+0x8b0>
 8011ff8:	9b05      	ldr	r3, [sp, #20]
 8011ffa:	f1c0 001c 	rsb	r0, r0, #28
 8011ffe:	4403      	add	r3, r0
 8012000:	9305      	str	r3, [sp, #20]
 8012002:	4405      	add	r5, r0
 8012004:	4480      	add	r8, r0
 8012006:	9b05      	ldr	r3, [sp, #20]
 8012008:	2b00      	cmp	r3, #0
 801200a:	dd05      	ble.n	8012018 <_dtoa_r+0x858>
 801200c:	461a      	mov	r2, r3
 801200e:	9904      	ldr	r1, [sp, #16]
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fedb 	bl	8012dcc <__lshift>
 8012016:	9004      	str	r0, [sp, #16]
 8012018:	f1b8 0f00 	cmp.w	r8, #0
 801201c:	dd05      	ble.n	801202a <_dtoa_r+0x86a>
 801201e:	4639      	mov	r1, r7
 8012020:	4642      	mov	r2, r8
 8012022:	4620      	mov	r0, r4
 8012024:	f000 fed2 	bl	8012dcc <__lshift>
 8012028:	4607      	mov	r7, r0
 801202a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801202c:	b353      	cbz	r3, 8012084 <_dtoa_r+0x8c4>
 801202e:	4639      	mov	r1, r7
 8012030:	9804      	ldr	r0, [sp, #16]
 8012032:	f000 ff1f 	bl	8012e74 <__mcmp>
 8012036:	2800      	cmp	r0, #0
 8012038:	da24      	bge.n	8012084 <_dtoa_r+0x8c4>
 801203a:	2300      	movs	r3, #0
 801203c:	220a      	movs	r2, #10
 801203e:	9904      	ldr	r1, [sp, #16]
 8012040:	4620      	mov	r0, r4
 8012042:	f000 fd0e 	bl	8012a62 <__multadd>
 8012046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012048:	9004      	str	r0, [sp, #16]
 801204a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801204e:	2b00      	cmp	r3, #0
 8012050:	f000 814d 	beq.w	80122ee <_dtoa_r+0xb2e>
 8012054:	2300      	movs	r3, #0
 8012056:	4631      	mov	r1, r6
 8012058:	220a      	movs	r2, #10
 801205a:	4620      	mov	r0, r4
 801205c:	f000 fd01 	bl	8012a62 <__multadd>
 8012060:	9b02      	ldr	r3, [sp, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	4606      	mov	r6, r0
 8012066:	dc4f      	bgt.n	8012108 <_dtoa_r+0x948>
 8012068:	9b06      	ldr	r3, [sp, #24]
 801206a:	2b02      	cmp	r3, #2
 801206c:	dd4c      	ble.n	8012108 <_dtoa_r+0x948>
 801206e:	e011      	b.n	8012094 <_dtoa_r+0x8d4>
 8012070:	d0c9      	beq.n	8012006 <_dtoa_r+0x846>
 8012072:	9a05      	ldr	r2, [sp, #20]
 8012074:	331c      	adds	r3, #28
 8012076:	441a      	add	r2, r3
 8012078:	9205      	str	r2, [sp, #20]
 801207a:	441d      	add	r5, r3
 801207c:	4498      	add	r8, r3
 801207e:	e7c2      	b.n	8012006 <_dtoa_r+0x846>
 8012080:	4603      	mov	r3, r0
 8012082:	e7f6      	b.n	8012072 <_dtoa_r+0x8b2>
 8012084:	f1b9 0f00 	cmp.w	r9, #0
 8012088:	dc38      	bgt.n	80120fc <_dtoa_r+0x93c>
 801208a:	9b06      	ldr	r3, [sp, #24]
 801208c:	2b02      	cmp	r3, #2
 801208e:	dd35      	ble.n	80120fc <_dtoa_r+0x93c>
 8012090:	f8cd 9008 	str.w	r9, [sp, #8]
 8012094:	9b02      	ldr	r3, [sp, #8]
 8012096:	b963      	cbnz	r3, 80120b2 <_dtoa_r+0x8f2>
 8012098:	4639      	mov	r1, r7
 801209a:	2205      	movs	r2, #5
 801209c:	4620      	mov	r0, r4
 801209e:	f000 fce0 	bl	8012a62 <__multadd>
 80120a2:	4601      	mov	r1, r0
 80120a4:	4607      	mov	r7, r0
 80120a6:	9804      	ldr	r0, [sp, #16]
 80120a8:	f000 fee4 	bl	8012e74 <__mcmp>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	f73f adcc 	bgt.w	8011c4a <_dtoa_r+0x48a>
 80120b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b4:	465d      	mov	r5, fp
 80120b6:	ea6f 0a03 	mvn.w	sl, r3
 80120ba:	f04f 0900 	mov.w	r9, #0
 80120be:	4639      	mov	r1, r7
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 fcb7 	bl	8012a34 <_Bfree>
 80120c6:	2e00      	cmp	r6, #0
 80120c8:	f43f aeb7 	beq.w	8011e3a <_dtoa_r+0x67a>
 80120cc:	f1b9 0f00 	cmp.w	r9, #0
 80120d0:	d005      	beq.n	80120de <_dtoa_r+0x91e>
 80120d2:	45b1      	cmp	r9, r6
 80120d4:	d003      	beq.n	80120de <_dtoa_r+0x91e>
 80120d6:	4649      	mov	r1, r9
 80120d8:	4620      	mov	r0, r4
 80120da:	f000 fcab 	bl	8012a34 <_Bfree>
 80120de:	4631      	mov	r1, r6
 80120e0:	4620      	mov	r0, r4
 80120e2:	f000 fca7 	bl	8012a34 <_Bfree>
 80120e6:	e6a8      	b.n	8011e3a <_dtoa_r+0x67a>
 80120e8:	2700      	movs	r7, #0
 80120ea:	463e      	mov	r6, r7
 80120ec:	e7e1      	b.n	80120b2 <_dtoa_r+0x8f2>
 80120ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80120f2:	463e      	mov	r6, r7
 80120f4:	e5a9      	b.n	8011c4a <_dtoa_r+0x48a>
 80120f6:	bf00      	nop
 80120f8:	40240000 	.word	0x40240000
 80120fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8012102:	2b00      	cmp	r3, #0
 8012104:	f000 80fa 	beq.w	80122fc <_dtoa_r+0xb3c>
 8012108:	2d00      	cmp	r5, #0
 801210a:	dd05      	ble.n	8012118 <_dtoa_r+0x958>
 801210c:	4631      	mov	r1, r6
 801210e:	462a      	mov	r2, r5
 8012110:	4620      	mov	r0, r4
 8012112:	f000 fe5b 	bl	8012dcc <__lshift>
 8012116:	4606      	mov	r6, r0
 8012118:	9b07      	ldr	r3, [sp, #28]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d04c      	beq.n	80121b8 <_dtoa_r+0x9f8>
 801211e:	6871      	ldr	r1, [r6, #4]
 8012120:	4620      	mov	r0, r4
 8012122:	f000 fc53 	bl	80129cc <_Balloc>
 8012126:	6932      	ldr	r2, [r6, #16]
 8012128:	3202      	adds	r2, #2
 801212a:	4605      	mov	r5, r0
 801212c:	0092      	lsls	r2, r2, #2
 801212e:	f106 010c 	add.w	r1, r6, #12
 8012132:	300c      	adds	r0, #12
 8012134:	f7fd fca6 	bl	800fa84 <memcpy>
 8012138:	2201      	movs	r2, #1
 801213a:	4629      	mov	r1, r5
 801213c:	4620      	mov	r0, r4
 801213e:	f000 fe45 	bl	8012dcc <__lshift>
 8012142:	9b00      	ldr	r3, [sp, #0]
 8012144:	f8cd b014 	str.w	fp, [sp, #20]
 8012148:	f003 0301 	and.w	r3, r3, #1
 801214c:	46b1      	mov	r9, r6
 801214e:	9307      	str	r3, [sp, #28]
 8012150:	4606      	mov	r6, r0
 8012152:	4639      	mov	r1, r7
 8012154:	9804      	ldr	r0, [sp, #16]
 8012156:	f7ff faa5 	bl	80116a4 <quorem>
 801215a:	4649      	mov	r1, r9
 801215c:	4605      	mov	r5, r0
 801215e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012162:	9804      	ldr	r0, [sp, #16]
 8012164:	f000 fe86 	bl	8012e74 <__mcmp>
 8012168:	4632      	mov	r2, r6
 801216a:	9000      	str	r0, [sp, #0]
 801216c:	4639      	mov	r1, r7
 801216e:	4620      	mov	r0, r4
 8012170:	f000 fe9a 	bl	8012ea8 <__mdiff>
 8012174:	68c3      	ldr	r3, [r0, #12]
 8012176:	4602      	mov	r2, r0
 8012178:	bb03      	cbnz	r3, 80121bc <_dtoa_r+0x9fc>
 801217a:	4601      	mov	r1, r0
 801217c:	9008      	str	r0, [sp, #32]
 801217e:	9804      	ldr	r0, [sp, #16]
 8012180:	f000 fe78 	bl	8012e74 <__mcmp>
 8012184:	9a08      	ldr	r2, [sp, #32]
 8012186:	4603      	mov	r3, r0
 8012188:	4611      	mov	r1, r2
 801218a:	4620      	mov	r0, r4
 801218c:	9308      	str	r3, [sp, #32]
 801218e:	f000 fc51 	bl	8012a34 <_Bfree>
 8012192:	9b08      	ldr	r3, [sp, #32]
 8012194:	b9a3      	cbnz	r3, 80121c0 <_dtoa_r+0xa00>
 8012196:	9a06      	ldr	r2, [sp, #24]
 8012198:	b992      	cbnz	r2, 80121c0 <_dtoa_r+0xa00>
 801219a:	9a07      	ldr	r2, [sp, #28]
 801219c:	b982      	cbnz	r2, 80121c0 <_dtoa_r+0xa00>
 801219e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80121a2:	d029      	beq.n	80121f8 <_dtoa_r+0xa38>
 80121a4:	9b00      	ldr	r3, [sp, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	dd01      	ble.n	80121ae <_dtoa_r+0x9ee>
 80121aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80121ae:	9b05      	ldr	r3, [sp, #20]
 80121b0:	1c5d      	adds	r5, r3, #1
 80121b2:	f883 8000 	strb.w	r8, [r3]
 80121b6:	e782      	b.n	80120be <_dtoa_r+0x8fe>
 80121b8:	4630      	mov	r0, r6
 80121ba:	e7c2      	b.n	8012142 <_dtoa_r+0x982>
 80121bc:	2301      	movs	r3, #1
 80121be:	e7e3      	b.n	8012188 <_dtoa_r+0x9c8>
 80121c0:	9a00      	ldr	r2, [sp, #0]
 80121c2:	2a00      	cmp	r2, #0
 80121c4:	db04      	blt.n	80121d0 <_dtoa_r+0xa10>
 80121c6:	d125      	bne.n	8012214 <_dtoa_r+0xa54>
 80121c8:	9a06      	ldr	r2, [sp, #24]
 80121ca:	bb1a      	cbnz	r2, 8012214 <_dtoa_r+0xa54>
 80121cc:	9a07      	ldr	r2, [sp, #28]
 80121ce:	bb0a      	cbnz	r2, 8012214 <_dtoa_r+0xa54>
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	ddec      	ble.n	80121ae <_dtoa_r+0x9ee>
 80121d4:	2201      	movs	r2, #1
 80121d6:	9904      	ldr	r1, [sp, #16]
 80121d8:	4620      	mov	r0, r4
 80121da:	f000 fdf7 	bl	8012dcc <__lshift>
 80121de:	4639      	mov	r1, r7
 80121e0:	9004      	str	r0, [sp, #16]
 80121e2:	f000 fe47 	bl	8012e74 <__mcmp>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	dc03      	bgt.n	80121f2 <_dtoa_r+0xa32>
 80121ea:	d1e0      	bne.n	80121ae <_dtoa_r+0x9ee>
 80121ec:	f018 0f01 	tst.w	r8, #1
 80121f0:	d0dd      	beq.n	80121ae <_dtoa_r+0x9ee>
 80121f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80121f6:	d1d8      	bne.n	80121aa <_dtoa_r+0x9ea>
 80121f8:	9b05      	ldr	r3, [sp, #20]
 80121fa:	9a05      	ldr	r2, [sp, #20]
 80121fc:	1c5d      	adds	r5, r3, #1
 80121fe:	2339      	movs	r3, #57	; 0x39
 8012200:	7013      	strb	r3, [r2, #0]
 8012202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012206:	2b39      	cmp	r3, #57	; 0x39
 8012208:	f105 32ff 	add.w	r2, r5, #4294967295
 801220c:	d04f      	beq.n	80122ae <_dtoa_r+0xaee>
 801220e:	3301      	adds	r3, #1
 8012210:	7013      	strb	r3, [r2, #0]
 8012212:	e754      	b.n	80120be <_dtoa_r+0x8fe>
 8012214:	9a05      	ldr	r2, [sp, #20]
 8012216:	2b00      	cmp	r3, #0
 8012218:	f102 0501 	add.w	r5, r2, #1
 801221c:	dd06      	ble.n	801222c <_dtoa_r+0xa6c>
 801221e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012222:	d0e9      	beq.n	80121f8 <_dtoa_r+0xa38>
 8012224:	f108 0801 	add.w	r8, r8, #1
 8012228:	9b05      	ldr	r3, [sp, #20]
 801222a:	e7c2      	b.n	80121b2 <_dtoa_r+0x9f2>
 801222c:	9a02      	ldr	r2, [sp, #8]
 801222e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012232:	eba5 030b 	sub.w	r3, r5, fp
 8012236:	4293      	cmp	r3, r2
 8012238:	d021      	beq.n	801227e <_dtoa_r+0xabe>
 801223a:	2300      	movs	r3, #0
 801223c:	220a      	movs	r2, #10
 801223e:	9904      	ldr	r1, [sp, #16]
 8012240:	4620      	mov	r0, r4
 8012242:	f000 fc0e 	bl	8012a62 <__multadd>
 8012246:	45b1      	cmp	r9, r6
 8012248:	9004      	str	r0, [sp, #16]
 801224a:	f04f 0300 	mov.w	r3, #0
 801224e:	f04f 020a 	mov.w	r2, #10
 8012252:	4649      	mov	r1, r9
 8012254:	4620      	mov	r0, r4
 8012256:	d105      	bne.n	8012264 <_dtoa_r+0xaa4>
 8012258:	f000 fc03 	bl	8012a62 <__multadd>
 801225c:	4681      	mov	r9, r0
 801225e:	4606      	mov	r6, r0
 8012260:	9505      	str	r5, [sp, #20]
 8012262:	e776      	b.n	8012152 <_dtoa_r+0x992>
 8012264:	f000 fbfd 	bl	8012a62 <__multadd>
 8012268:	4631      	mov	r1, r6
 801226a:	4681      	mov	r9, r0
 801226c:	2300      	movs	r3, #0
 801226e:	220a      	movs	r2, #10
 8012270:	4620      	mov	r0, r4
 8012272:	f000 fbf6 	bl	8012a62 <__multadd>
 8012276:	4606      	mov	r6, r0
 8012278:	e7f2      	b.n	8012260 <_dtoa_r+0xaa0>
 801227a:	f04f 0900 	mov.w	r9, #0
 801227e:	2201      	movs	r2, #1
 8012280:	9904      	ldr	r1, [sp, #16]
 8012282:	4620      	mov	r0, r4
 8012284:	f000 fda2 	bl	8012dcc <__lshift>
 8012288:	4639      	mov	r1, r7
 801228a:	9004      	str	r0, [sp, #16]
 801228c:	f000 fdf2 	bl	8012e74 <__mcmp>
 8012290:	2800      	cmp	r0, #0
 8012292:	dcb6      	bgt.n	8012202 <_dtoa_r+0xa42>
 8012294:	d102      	bne.n	801229c <_dtoa_r+0xadc>
 8012296:	f018 0f01 	tst.w	r8, #1
 801229a:	d1b2      	bne.n	8012202 <_dtoa_r+0xa42>
 801229c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80122a0:	2b30      	cmp	r3, #48	; 0x30
 80122a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80122a6:	f47f af0a 	bne.w	80120be <_dtoa_r+0x8fe>
 80122aa:	4615      	mov	r5, r2
 80122ac:	e7f6      	b.n	801229c <_dtoa_r+0xadc>
 80122ae:	4593      	cmp	fp, r2
 80122b0:	d105      	bne.n	80122be <_dtoa_r+0xafe>
 80122b2:	2331      	movs	r3, #49	; 0x31
 80122b4:	f10a 0a01 	add.w	sl, sl, #1
 80122b8:	f88b 3000 	strb.w	r3, [fp]
 80122bc:	e6ff      	b.n	80120be <_dtoa_r+0x8fe>
 80122be:	4615      	mov	r5, r2
 80122c0:	e79f      	b.n	8012202 <_dtoa_r+0xa42>
 80122c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012328 <_dtoa_r+0xb68>
 80122c6:	e007      	b.n	80122d8 <_dtoa_r+0xb18>
 80122c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 801232c <_dtoa_r+0xb6c>
 80122ce:	b11b      	cbz	r3, 80122d8 <_dtoa_r+0xb18>
 80122d0:	f10b 0308 	add.w	r3, fp, #8
 80122d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	4658      	mov	r0, fp
 80122da:	b017      	add	sp, #92	; 0x5c
 80122dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122e0:	9b06      	ldr	r3, [sp, #24]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	f77f ae35 	ble.w	8011f52 <_dtoa_r+0x792>
 80122e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122ea:	9307      	str	r3, [sp, #28]
 80122ec:	e649      	b.n	8011f82 <_dtoa_r+0x7c2>
 80122ee:	9b02      	ldr	r3, [sp, #8]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	dc03      	bgt.n	80122fc <_dtoa_r+0xb3c>
 80122f4:	9b06      	ldr	r3, [sp, #24]
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	f73f aecc 	bgt.w	8012094 <_dtoa_r+0x8d4>
 80122fc:	465d      	mov	r5, fp
 80122fe:	4639      	mov	r1, r7
 8012300:	9804      	ldr	r0, [sp, #16]
 8012302:	f7ff f9cf 	bl	80116a4 <quorem>
 8012306:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801230a:	f805 8b01 	strb.w	r8, [r5], #1
 801230e:	9a02      	ldr	r2, [sp, #8]
 8012310:	eba5 030b 	sub.w	r3, r5, fp
 8012314:	429a      	cmp	r2, r3
 8012316:	ddb0      	ble.n	801227a <_dtoa_r+0xaba>
 8012318:	2300      	movs	r3, #0
 801231a:	220a      	movs	r2, #10
 801231c:	9904      	ldr	r1, [sp, #16]
 801231e:	4620      	mov	r0, r4
 8012320:	f000 fb9f 	bl	8012a62 <__multadd>
 8012324:	9004      	str	r0, [sp, #16]
 8012326:	e7ea      	b.n	80122fe <_dtoa_r+0xb3e>
 8012328:	08015230 	.word	0x08015230
 801232c:	080152b0 	.word	0x080152b0

08012330 <rshift>:
 8012330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012332:	6906      	ldr	r6, [r0, #16]
 8012334:	114b      	asrs	r3, r1, #5
 8012336:	429e      	cmp	r6, r3
 8012338:	f100 0414 	add.w	r4, r0, #20
 801233c:	dd30      	ble.n	80123a0 <rshift+0x70>
 801233e:	f011 011f 	ands.w	r1, r1, #31
 8012342:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012346:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801234a:	d108      	bne.n	801235e <rshift+0x2e>
 801234c:	4621      	mov	r1, r4
 801234e:	42b2      	cmp	r2, r6
 8012350:	460b      	mov	r3, r1
 8012352:	d211      	bcs.n	8012378 <rshift+0x48>
 8012354:	f852 3b04 	ldr.w	r3, [r2], #4
 8012358:	f841 3b04 	str.w	r3, [r1], #4
 801235c:	e7f7      	b.n	801234e <rshift+0x1e>
 801235e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012362:	f1c1 0c20 	rsb	ip, r1, #32
 8012366:	40cd      	lsrs	r5, r1
 8012368:	3204      	adds	r2, #4
 801236a:	4623      	mov	r3, r4
 801236c:	42b2      	cmp	r2, r6
 801236e:	4617      	mov	r7, r2
 8012370:	d30c      	bcc.n	801238c <rshift+0x5c>
 8012372:	601d      	str	r5, [r3, #0]
 8012374:	b105      	cbz	r5, 8012378 <rshift+0x48>
 8012376:	3304      	adds	r3, #4
 8012378:	1b1a      	subs	r2, r3, r4
 801237a:	42a3      	cmp	r3, r4
 801237c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012380:	bf08      	it	eq
 8012382:	2300      	moveq	r3, #0
 8012384:	6102      	str	r2, [r0, #16]
 8012386:	bf08      	it	eq
 8012388:	6143      	streq	r3, [r0, #20]
 801238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238c:	683f      	ldr	r7, [r7, #0]
 801238e:	fa07 f70c 	lsl.w	r7, r7, ip
 8012392:	433d      	orrs	r5, r7
 8012394:	f843 5b04 	str.w	r5, [r3], #4
 8012398:	f852 5b04 	ldr.w	r5, [r2], #4
 801239c:	40cd      	lsrs	r5, r1
 801239e:	e7e5      	b.n	801236c <rshift+0x3c>
 80123a0:	4623      	mov	r3, r4
 80123a2:	e7e9      	b.n	8012378 <rshift+0x48>

080123a4 <__hexdig_fun>:
 80123a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80123a8:	2b09      	cmp	r3, #9
 80123aa:	d802      	bhi.n	80123b2 <__hexdig_fun+0xe>
 80123ac:	3820      	subs	r0, #32
 80123ae:	b2c0      	uxtb	r0, r0
 80123b0:	4770      	bx	lr
 80123b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80123b6:	2b05      	cmp	r3, #5
 80123b8:	d801      	bhi.n	80123be <__hexdig_fun+0x1a>
 80123ba:	3847      	subs	r0, #71	; 0x47
 80123bc:	e7f7      	b.n	80123ae <__hexdig_fun+0xa>
 80123be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80123c2:	2b05      	cmp	r3, #5
 80123c4:	d801      	bhi.n	80123ca <__hexdig_fun+0x26>
 80123c6:	3827      	subs	r0, #39	; 0x27
 80123c8:	e7f1      	b.n	80123ae <__hexdig_fun+0xa>
 80123ca:	2000      	movs	r0, #0
 80123cc:	4770      	bx	lr

080123ce <__gethex>:
 80123ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d2:	b08b      	sub	sp, #44	; 0x2c
 80123d4:	468a      	mov	sl, r1
 80123d6:	9002      	str	r0, [sp, #8]
 80123d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80123da:	9306      	str	r3, [sp, #24]
 80123dc:	4690      	mov	r8, r2
 80123de:	f000 fad0 	bl	8012982 <__localeconv_l>
 80123e2:	6803      	ldr	r3, [r0, #0]
 80123e4:	9303      	str	r3, [sp, #12]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7ed fef2 	bl	80001d0 <strlen>
 80123ec:	9b03      	ldr	r3, [sp, #12]
 80123ee:	9001      	str	r0, [sp, #4]
 80123f0:	4403      	add	r3, r0
 80123f2:	f04f 0b00 	mov.w	fp, #0
 80123f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80123fa:	9307      	str	r3, [sp, #28]
 80123fc:	f8da 3000 	ldr.w	r3, [sl]
 8012400:	3302      	adds	r3, #2
 8012402:	461f      	mov	r7, r3
 8012404:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012408:	2830      	cmp	r0, #48	; 0x30
 801240a:	d06c      	beq.n	80124e6 <__gethex+0x118>
 801240c:	f7ff ffca 	bl	80123a4 <__hexdig_fun>
 8012410:	4604      	mov	r4, r0
 8012412:	2800      	cmp	r0, #0
 8012414:	d16a      	bne.n	80124ec <__gethex+0x11e>
 8012416:	9a01      	ldr	r2, [sp, #4]
 8012418:	9903      	ldr	r1, [sp, #12]
 801241a:	4638      	mov	r0, r7
 801241c:	f7fe fa62 	bl	80108e4 <strncmp>
 8012420:	2800      	cmp	r0, #0
 8012422:	d166      	bne.n	80124f2 <__gethex+0x124>
 8012424:	9b01      	ldr	r3, [sp, #4]
 8012426:	5cf8      	ldrb	r0, [r7, r3]
 8012428:	18fe      	adds	r6, r7, r3
 801242a:	f7ff ffbb 	bl	80123a4 <__hexdig_fun>
 801242e:	2800      	cmp	r0, #0
 8012430:	d062      	beq.n	80124f8 <__gethex+0x12a>
 8012432:	4633      	mov	r3, r6
 8012434:	7818      	ldrb	r0, [r3, #0]
 8012436:	2830      	cmp	r0, #48	; 0x30
 8012438:	461f      	mov	r7, r3
 801243a:	f103 0301 	add.w	r3, r3, #1
 801243e:	d0f9      	beq.n	8012434 <__gethex+0x66>
 8012440:	f7ff ffb0 	bl	80123a4 <__hexdig_fun>
 8012444:	fab0 f580 	clz	r5, r0
 8012448:	096d      	lsrs	r5, r5, #5
 801244a:	4634      	mov	r4, r6
 801244c:	f04f 0b01 	mov.w	fp, #1
 8012450:	463a      	mov	r2, r7
 8012452:	4616      	mov	r6, r2
 8012454:	3201      	adds	r2, #1
 8012456:	7830      	ldrb	r0, [r6, #0]
 8012458:	f7ff ffa4 	bl	80123a4 <__hexdig_fun>
 801245c:	2800      	cmp	r0, #0
 801245e:	d1f8      	bne.n	8012452 <__gethex+0x84>
 8012460:	9a01      	ldr	r2, [sp, #4]
 8012462:	9903      	ldr	r1, [sp, #12]
 8012464:	4630      	mov	r0, r6
 8012466:	f7fe fa3d 	bl	80108e4 <strncmp>
 801246a:	b950      	cbnz	r0, 8012482 <__gethex+0xb4>
 801246c:	b954      	cbnz	r4, 8012484 <__gethex+0xb6>
 801246e:	9b01      	ldr	r3, [sp, #4]
 8012470:	18f4      	adds	r4, r6, r3
 8012472:	4622      	mov	r2, r4
 8012474:	4616      	mov	r6, r2
 8012476:	3201      	adds	r2, #1
 8012478:	7830      	ldrb	r0, [r6, #0]
 801247a:	f7ff ff93 	bl	80123a4 <__hexdig_fun>
 801247e:	2800      	cmp	r0, #0
 8012480:	d1f8      	bne.n	8012474 <__gethex+0xa6>
 8012482:	b10c      	cbz	r4, 8012488 <__gethex+0xba>
 8012484:	1ba4      	subs	r4, r4, r6
 8012486:	00a4      	lsls	r4, r4, #2
 8012488:	7833      	ldrb	r3, [r6, #0]
 801248a:	2b50      	cmp	r3, #80	; 0x50
 801248c:	d001      	beq.n	8012492 <__gethex+0xc4>
 801248e:	2b70      	cmp	r3, #112	; 0x70
 8012490:	d140      	bne.n	8012514 <__gethex+0x146>
 8012492:	7873      	ldrb	r3, [r6, #1]
 8012494:	2b2b      	cmp	r3, #43	; 0x2b
 8012496:	d031      	beq.n	80124fc <__gethex+0x12e>
 8012498:	2b2d      	cmp	r3, #45	; 0x2d
 801249a:	d033      	beq.n	8012504 <__gethex+0x136>
 801249c:	1c71      	adds	r1, r6, #1
 801249e:	f04f 0900 	mov.w	r9, #0
 80124a2:	7808      	ldrb	r0, [r1, #0]
 80124a4:	f7ff ff7e 	bl	80123a4 <__hexdig_fun>
 80124a8:	1e43      	subs	r3, r0, #1
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b18      	cmp	r3, #24
 80124ae:	d831      	bhi.n	8012514 <__gethex+0x146>
 80124b0:	f1a0 0210 	sub.w	r2, r0, #16
 80124b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80124b8:	f7ff ff74 	bl	80123a4 <__hexdig_fun>
 80124bc:	1e43      	subs	r3, r0, #1
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	2b18      	cmp	r3, #24
 80124c2:	d922      	bls.n	801250a <__gethex+0x13c>
 80124c4:	f1b9 0f00 	cmp.w	r9, #0
 80124c8:	d000      	beq.n	80124cc <__gethex+0xfe>
 80124ca:	4252      	negs	r2, r2
 80124cc:	4414      	add	r4, r2
 80124ce:	f8ca 1000 	str.w	r1, [sl]
 80124d2:	b30d      	cbz	r5, 8012518 <__gethex+0x14a>
 80124d4:	f1bb 0f00 	cmp.w	fp, #0
 80124d8:	bf0c      	ite	eq
 80124da:	2706      	moveq	r7, #6
 80124dc:	2700      	movne	r7, #0
 80124de:	4638      	mov	r0, r7
 80124e0:	b00b      	add	sp, #44	; 0x2c
 80124e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e6:	f10b 0b01 	add.w	fp, fp, #1
 80124ea:	e78a      	b.n	8012402 <__gethex+0x34>
 80124ec:	2500      	movs	r5, #0
 80124ee:	462c      	mov	r4, r5
 80124f0:	e7ae      	b.n	8012450 <__gethex+0x82>
 80124f2:	463e      	mov	r6, r7
 80124f4:	2501      	movs	r5, #1
 80124f6:	e7c7      	b.n	8012488 <__gethex+0xba>
 80124f8:	4604      	mov	r4, r0
 80124fa:	e7fb      	b.n	80124f4 <__gethex+0x126>
 80124fc:	f04f 0900 	mov.w	r9, #0
 8012500:	1cb1      	adds	r1, r6, #2
 8012502:	e7ce      	b.n	80124a2 <__gethex+0xd4>
 8012504:	f04f 0901 	mov.w	r9, #1
 8012508:	e7fa      	b.n	8012500 <__gethex+0x132>
 801250a:	230a      	movs	r3, #10
 801250c:	fb03 0202 	mla	r2, r3, r2, r0
 8012510:	3a10      	subs	r2, #16
 8012512:	e7cf      	b.n	80124b4 <__gethex+0xe6>
 8012514:	4631      	mov	r1, r6
 8012516:	e7da      	b.n	80124ce <__gethex+0x100>
 8012518:	1bf3      	subs	r3, r6, r7
 801251a:	3b01      	subs	r3, #1
 801251c:	4629      	mov	r1, r5
 801251e:	2b07      	cmp	r3, #7
 8012520:	dc49      	bgt.n	80125b6 <__gethex+0x1e8>
 8012522:	9802      	ldr	r0, [sp, #8]
 8012524:	f000 fa52 	bl	80129cc <_Balloc>
 8012528:	9b01      	ldr	r3, [sp, #4]
 801252a:	f100 0914 	add.w	r9, r0, #20
 801252e:	f04f 0b00 	mov.w	fp, #0
 8012532:	f1c3 0301 	rsb	r3, r3, #1
 8012536:	4605      	mov	r5, r0
 8012538:	f8cd 9010 	str.w	r9, [sp, #16]
 801253c:	46da      	mov	sl, fp
 801253e:	9308      	str	r3, [sp, #32]
 8012540:	42b7      	cmp	r7, r6
 8012542:	d33b      	bcc.n	80125bc <__gethex+0x1ee>
 8012544:	9804      	ldr	r0, [sp, #16]
 8012546:	f840 ab04 	str.w	sl, [r0], #4
 801254a:	eba0 0009 	sub.w	r0, r0, r9
 801254e:	1080      	asrs	r0, r0, #2
 8012550:	6128      	str	r0, [r5, #16]
 8012552:	0147      	lsls	r7, r0, #5
 8012554:	4650      	mov	r0, sl
 8012556:	f000 fafd 	bl	8012b54 <__hi0bits>
 801255a:	f8d8 6000 	ldr.w	r6, [r8]
 801255e:	1a3f      	subs	r7, r7, r0
 8012560:	42b7      	cmp	r7, r6
 8012562:	dd64      	ble.n	801262e <__gethex+0x260>
 8012564:	1bbf      	subs	r7, r7, r6
 8012566:	4639      	mov	r1, r7
 8012568:	4628      	mov	r0, r5
 801256a:	f000 fe0d 	bl	8013188 <__any_on>
 801256e:	4682      	mov	sl, r0
 8012570:	b178      	cbz	r0, 8012592 <__gethex+0x1c4>
 8012572:	1e7b      	subs	r3, r7, #1
 8012574:	1159      	asrs	r1, r3, #5
 8012576:	f003 021f 	and.w	r2, r3, #31
 801257a:	f04f 0a01 	mov.w	sl, #1
 801257e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012582:	fa0a f202 	lsl.w	r2, sl, r2
 8012586:	420a      	tst	r2, r1
 8012588:	d003      	beq.n	8012592 <__gethex+0x1c4>
 801258a:	4553      	cmp	r3, sl
 801258c:	dc46      	bgt.n	801261c <__gethex+0x24e>
 801258e:	f04f 0a02 	mov.w	sl, #2
 8012592:	4639      	mov	r1, r7
 8012594:	4628      	mov	r0, r5
 8012596:	f7ff fecb 	bl	8012330 <rshift>
 801259a:	443c      	add	r4, r7
 801259c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	da52      	bge.n	801264a <__gethex+0x27c>
 80125a4:	4629      	mov	r1, r5
 80125a6:	9802      	ldr	r0, [sp, #8]
 80125a8:	f000 fa44 	bl	8012a34 <_Bfree>
 80125ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80125ae:	2300      	movs	r3, #0
 80125b0:	6013      	str	r3, [r2, #0]
 80125b2:	27a3      	movs	r7, #163	; 0xa3
 80125b4:	e793      	b.n	80124de <__gethex+0x110>
 80125b6:	3101      	adds	r1, #1
 80125b8:	105b      	asrs	r3, r3, #1
 80125ba:	e7b0      	b.n	801251e <__gethex+0x150>
 80125bc:	1e73      	subs	r3, r6, #1
 80125be:	9305      	str	r3, [sp, #20]
 80125c0:	9a07      	ldr	r2, [sp, #28]
 80125c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80125c6:	4293      	cmp	r3, r2
 80125c8:	d018      	beq.n	80125fc <__gethex+0x22e>
 80125ca:	f1bb 0f20 	cmp.w	fp, #32
 80125ce:	d107      	bne.n	80125e0 <__gethex+0x212>
 80125d0:	9b04      	ldr	r3, [sp, #16]
 80125d2:	f8c3 a000 	str.w	sl, [r3]
 80125d6:	3304      	adds	r3, #4
 80125d8:	f04f 0a00 	mov.w	sl, #0
 80125dc:	9304      	str	r3, [sp, #16]
 80125de:	46d3      	mov	fp, sl
 80125e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80125e4:	f7ff fede 	bl	80123a4 <__hexdig_fun>
 80125e8:	f000 000f 	and.w	r0, r0, #15
 80125ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80125f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80125f4:	f10b 0b04 	add.w	fp, fp, #4
 80125f8:	9b05      	ldr	r3, [sp, #20]
 80125fa:	e00d      	b.n	8012618 <__gethex+0x24a>
 80125fc:	9b05      	ldr	r3, [sp, #20]
 80125fe:	9a08      	ldr	r2, [sp, #32]
 8012600:	4413      	add	r3, r2
 8012602:	42bb      	cmp	r3, r7
 8012604:	d3e1      	bcc.n	80125ca <__gethex+0x1fc>
 8012606:	4618      	mov	r0, r3
 8012608:	9a01      	ldr	r2, [sp, #4]
 801260a:	9903      	ldr	r1, [sp, #12]
 801260c:	9309      	str	r3, [sp, #36]	; 0x24
 801260e:	f7fe f969 	bl	80108e4 <strncmp>
 8012612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012614:	2800      	cmp	r0, #0
 8012616:	d1d8      	bne.n	80125ca <__gethex+0x1fc>
 8012618:	461e      	mov	r6, r3
 801261a:	e791      	b.n	8012540 <__gethex+0x172>
 801261c:	1eb9      	subs	r1, r7, #2
 801261e:	4628      	mov	r0, r5
 8012620:	f000 fdb2 	bl	8013188 <__any_on>
 8012624:	2800      	cmp	r0, #0
 8012626:	d0b2      	beq.n	801258e <__gethex+0x1c0>
 8012628:	f04f 0a03 	mov.w	sl, #3
 801262c:	e7b1      	b.n	8012592 <__gethex+0x1c4>
 801262e:	da09      	bge.n	8012644 <__gethex+0x276>
 8012630:	1bf7      	subs	r7, r6, r7
 8012632:	4629      	mov	r1, r5
 8012634:	463a      	mov	r2, r7
 8012636:	9802      	ldr	r0, [sp, #8]
 8012638:	f000 fbc8 	bl	8012dcc <__lshift>
 801263c:	1be4      	subs	r4, r4, r7
 801263e:	4605      	mov	r5, r0
 8012640:	f100 0914 	add.w	r9, r0, #20
 8012644:	f04f 0a00 	mov.w	sl, #0
 8012648:	e7a8      	b.n	801259c <__gethex+0x1ce>
 801264a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801264e:	42a0      	cmp	r0, r4
 8012650:	dd6a      	ble.n	8012728 <__gethex+0x35a>
 8012652:	1b04      	subs	r4, r0, r4
 8012654:	42a6      	cmp	r6, r4
 8012656:	dc2e      	bgt.n	80126b6 <__gethex+0x2e8>
 8012658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801265c:	2b02      	cmp	r3, #2
 801265e:	d022      	beq.n	80126a6 <__gethex+0x2d8>
 8012660:	2b03      	cmp	r3, #3
 8012662:	d024      	beq.n	80126ae <__gethex+0x2e0>
 8012664:	2b01      	cmp	r3, #1
 8012666:	d115      	bne.n	8012694 <__gethex+0x2c6>
 8012668:	42a6      	cmp	r6, r4
 801266a:	d113      	bne.n	8012694 <__gethex+0x2c6>
 801266c:	2e01      	cmp	r6, #1
 801266e:	dc0b      	bgt.n	8012688 <__gethex+0x2ba>
 8012670:	9a06      	ldr	r2, [sp, #24]
 8012672:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012676:	6013      	str	r3, [r2, #0]
 8012678:	2301      	movs	r3, #1
 801267a:	612b      	str	r3, [r5, #16]
 801267c:	f8c9 3000 	str.w	r3, [r9]
 8012680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012682:	2762      	movs	r7, #98	; 0x62
 8012684:	601d      	str	r5, [r3, #0]
 8012686:	e72a      	b.n	80124de <__gethex+0x110>
 8012688:	1e71      	subs	r1, r6, #1
 801268a:	4628      	mov	r0, r5
 801268c:	f000 fd7c 	bl	8013188 <__any_on>
 8012690:	2800      	cmp	r0, #0
 8012692:	d1ed      	bne.n	8012670 <__gethex+0x2a2>
 8012694:	4629      	mov	r1, r5
 8012696:	9802      	ldr	r0, [sp, #8]
 8012698:	f000 f9cc 	bl	8012a34 <_Bfree>
 801269c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801269e:	2300      	movs	r3, #0
 80126a0:	6013      	str	r3, [r2, #0]
 80126a2:	2750      	movs	r7, #80	; 0x50
 80126a4:	e71b      	b.n	80124de <__gethex+0x110>
 80126a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d0e1      	beq.n	8012670 <__gethex+0x2a2>
 80126ac:	e7f2      	b.n	8012694 <__gethex+0x2c6>
 80126ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d1dd      	bne.n	8012670 <__gethex+0x2a2>
 80126b4:	e7ee      	b.n	8012694 <__gethex+0x2c6>
 80126b6:	1e67      	subs	r7, r4, #1
 80126b8:	f1ba 0f00 	cmp.w	sl, #0
 80126bc:	d131      	bne.n	8012722 <__gethex+0x354>
 80126be:	b127      	cbz	r7, 80126ca <__gethex+0x2fc>
 80126c0:	4639      	mov	r1, r7
 80126c2:	4628      	mov	r0, r5
 80126c4:	f000 fd60 	bl	8013188 <__any_on>
 80126c8:	4682      	mov	sl, r0
 80126ca:	117a      	asrs	r2, r7, #5
 80126cc:	2301      	movs	r3, #1
 80126ce:	f007 071f 	and.w	r7, r7, #31
 80126d2:	fa03 f707 	lsl.w	r7, r3, r7
 80126d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80126da:	4621      	mov	r1, r4
 80126dc:	421f      	tst	r7, r3
 80126de:	4628      	mov	r0, r5
 80126e0:	bf18      	it	ne
 80126e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80126e6:	1b36      	subs	r6, r6, r4
 80126e8:	f7ff fe22 	bl	8012330 <rshift>
 80126ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80126f0:	2702      	movs	r7, #2
 80126f2:	f1ba 0f00 	cmp.w	sl, #0
 80126f6:	d048      	beq.n	801278a <__gethex+0x3bc>
 80126f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	d015      	beq.n	801272c <__gethex+0x35e>
 8012700:	2b03      	cmp	r3, #3
 8012702:	d017      	beq.n	8012734 <__gethex+0x366>
 8012704:	2b01      	cmp	r3, #1
 8012706:	d109      	bne.n	801271c <__gethex+0x34e>
 8012708:	f01a 0f02 	tst.w	sl, #2
 801270c:	d006      	beq.n	801271c <__gethex+0x34e>
 801270e:	f8d9 3000 	ldr.w	r3, [r9]
 8012712:	ea4a 0a03 	orr.w	sl, sl, r3
 8012716:	f01a 0f01 	tst.w	sl, #1
 801271a:	d10e      	bne.n	801273a <__gethex+0x36c>
 801271c:	f047 0710 	orr.w	r7, r7, #16
 8012720:	e033      	b.n	801278a <__gethex+0x3bc>
 8012722:	f04f 0a01 	mov.w	sl, #1
 8012726:	e7d0      	b.n	80126ca <__gethex+0x2fc>
 8012728:	2701      	movs	r7, #1
 801272a:	e7e2      	b.n	80126f2 <__gethex+0x324>
 801272c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801272e:	f1c3 0301 	rsb	r3, r3, #1
 8012732:	9315      	str	r3, [sp, #84]	; 0x54
 8012734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012736:	2b00      	cmp	r3, #0
 8012738:	d0f0      	beq.n	801271c <__gethex+0x34e>
 801273a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801273e:	f105 0314 	add.w	r3, r5, #20
 8012742:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012746:	eb03 010a 	add.w	r1, r3, sl
 801274a:	f04f 0c00 	mov.w	ip, #0
 801274e:	4618      	mov	r0, r3
 8012750:	f853 2b04 	ldr.w	r2, [r3], #4
 8012754:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012758:	d01c      	beq.n	8012794 <__gethex+0x3c6>
 801275a:	3201      	adds	r2, #1
 801275c:	6002      	str	r2, [r0, #0]
 801275e:	2f02      	cmp	r7, #2
 8012760:	f105 0314 	add.w	r3, r5, #20
 8012764:	d138      	bne.n	80127d8 <__gethex+0x40a>
 8012766:	f8d8 2000 	ldr.w	r2, [r8]
 801276a:	3a01      	subs	r2, #1
 801276c:	42b2      	cmp	r2, r6
 801276e:	d10a      	bne.n	8012786 <__gethex+0x3b8>
 8012770:	1171      	asrs	r1, r6, #5
 8012772:	2201      	movs	r2, #1
 8012774:	f006 061f 	and.w	r6, r6, #31
 8012778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801277c:	fa02 f606 	lsl.w	r6, r2, r6
 8012780:	421e      	tst	r6, r3
 8012782:	bf18      	it	ne
 8012784:	4617      	movne	r7, r2
 8012786:	f047 0720 	orr.w	r7, r7, #32
 801278a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801278c:	601d      	str	r5, [r3, #0]
 801278e:	9b06      	ldr	r3, [sp, #24]
 8012790:	601c      	str	r4, [r3, #0]
 8012792:	e6a4      	b.n	80124de <__gethex+0x110>
 8012794:	4299      	cmp	r1, r3
 8012796:	f843 cc04 	str.w	ip, [r3, #-4]
 801279a:	d8d8      	bhi.n	801274e <__gethex+0x380>
 801279c:	68ab      	ldr	r3, [r5, #8]
 801279e:	4599      	cmp	r9, r3
 80127a0:	db12      	blt.n	80127c8 <__gethex+0x3fa>
 80127a2:	6869      	ldr	r1, [r5, #4]
 80127a4:	9802      	ldr	r0, [sp, #8]
 80127a6:	3101      	adds	r1, #1
 80127a8:	f000 f910 	bl	80129cc <_Balloc>
 80127ac:	692a      	ldr	r2, [r5, #16]
 80127ae:	3202      	adds	r2, #2
 80127b0:	f105 010c 	add.w	r1, r5, #12
 80127b4:	4683      	mov	fp, r0
 80127b6:	0092      	lsls	r2, r2, #2
 80127b8:	300c      	adds	r0, #12
 80127ba:	f7fd f963 	bl	800fa84 <memcpy>
 80127be:	4629      	mov	r1, r5
 80127c0:	9802      	ldr	r0, [sp, #8]
 80127c2:	f000 f937 	bl	8012a34 <_Bfree>
 80127c6:	465d      	mov	r5, fp
 80127c8:	692b      	ldr	r3, [r5, #16]
 80127ca:	1c5a      	adds	r2, r3, #1
 80127cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80127d0:	612a      	str	r2, [r5, #16]
 80127d2:	2201      	movs	r2, #1
 80127d4:	615a      	str	r2, [r3, #20]
 80127d6:	e7c2      	b.n	801275e <__gethex+0x390>
 80127d8:	692a      	ldr	r2, [r5, #16]
 80127da:	454a      	cmp	r2, r9
 80127dc:	dd0b      	ble.n	80127f6 <__gethex+0x428>
 80127de:	2101      	movs	r1, #1
 80127e0:	4628      	mov	r0, r5
 80127e2:	f7ff fda5 	bl	8012330 <rshift>
 80127e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127ea:	3401      	adds	r4, #1
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	f6ff aed9 	blt.w	80125a4 <__gethex+0x1d6>
 80127f2:	2701      	movs	r7, #1
 80127f4:	e7c7      	b.n	8012786 <__gethex+0x3b8>
 80127f6:	f016 061f 	ands.w	r6, r6, #31
 80127fa:	d0fa      	beq.n	80127f2 <__gethex+0x424>
 80127fc:	449a      	add	sl, r3
 80127fe:	f1c6 0620 	rsb	r6, r6, #32
 8012802:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012806:	f000 f9a5 	bl	8012b54 <__hi0bits>
 801280a:	42b0      	cmp	r0, r6
 801280c:	dbe7      	blt.n	80127de <__gethex+0x410>
 801280e:	e7f0      	b.n	80127f2 <__gethex+0x424>

08012810 <L_shift>:
 8012810:	f1c2 0208 	rsb	r2, r2, #8
 8012814:	0092      	lsls	r2, r2, #2
 8012816:	b570      	push	{r4, r5, r6, lr}
 8012818:	f1c2 0620 	rsb	r6, r2, #32
 801281c:	6843      	ldr	r3, [r0, #4]
 801281e:	6804      	ldr	r4, [r0, #0]
 8012820:	fa03 f506 	lsl.w	r5, r3, r6
 8012824:	432c      	orrs	r4, r5
 8012826:	40d3      	lsrs	r3, r2
 8012828:	6004      	str	r4, [r0, #0]
 801282a:	f840 3f04 	str.w	r3, [r0, #4]!
 801282e:	4288      	cmp	r0, r1
 8012830:	d3f4      	bcc.n	801281c <L_shift+0xc>
 8012832:	bd70      	pop	{r4, r5, r6, pc}

08012834 <__match>:
 8012834:	b530      	push	{r4, r5, lr}
 8012836:	6803      	ldr	r3, [r0, #0]
 8012838:	3301      	adds	r3, #1
 801283a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801283e:	b914      	cbnz	r4, 8012846 <__match+0x12>
 8012840:	6003      	str	r3, [r0, #0]
 8012842:	2001      	movs	r0, #1
 8012844:	bd30      	pop	{r4, r5, pc}
 8012846:	f813 2b01 	ldrb.w	r2, [r3], #1
 801284a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801284e:	2d19      	cmp	r5, #25
 8012850:	bf98      	it	ls
 8012852:	3220      	addls	r2, #32
 8012854:	42a2      	cmp	r2, r4
 8012856:	d0f0      	beq.n	801283a <__match+0x6>
 8012858:	2000      	movs	r0, #0
 801285a:	e7f3      	b.n	8012844 <__match+0x10>

0801285c <__hexnan>:
 801285c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012860:	680b      	ldr	r3, [r1, #0]
 8012862:	6801      	ldr	r1, [r0, #0]
 8012864:	115f      	asrs	r7, r3, #5
 8012866:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801286a:	f013 031f 	ands.w	r3, r3, #31
 801286e:	b087      	sub	sp, #28
 8012870:	bf18      	it	ne
 8012872:	3704      	addne	r7, #4
 8012874:	2500      	movs	r5, #0
 8012876:	1f3e      	subs	r6, r7, #4
 8012878:	4682      	mov	sl, r0
 801287a:	4690      	mov	r8, r2
 801287c:	9301      	str	r3, [sp, #4]
 801287e:	f847 5c04 	str.w	r5, [r7, #-4]
 8012882:	46b1      	mov	r9, r6
 8012884:	4634      	mov	r4, r6
 8012886:	9502      	str	r5, [sp, #8]
 8012888:	46ab      	mov	fp, r5
 801288a:	784a      	ldrb	r2, [r1, #1]
 801288c:	1c4b      	adds	r3, r1, #1
 801288e:	9303      	str	r3, [sp, #12]
 8012890:	b342      	cbz	r2, 80128e4 <__hexnan+0x88>
 8012892:	4610      	mov	r0, r2
 8012894:	9105      	str	r1, [sp, #20]
 8012896:	9204      	str	r2, [sp, #16]
 8012898:	f7ff fd84 	bl	80123a4 <__hexdig_fun>
 801289c:	2800      	cmp	r0, #0
 801289e:	d143      	bne.n	8012928 <__hexnan+0xcc>
 80128a0:	9a04      	ldr	r2, [sp, #16]
 80128a2:	9905      	ldr	r1, [sp, #20]
 80128a4:	2a20      	cmp	r2, #32
 80128a6:	d818      	bhi.n	80128da <__hexnan+0x7e>
 80128a8:	9b02      	ldr	r3, [sp, #8]
 80128aa:	459b      	cmp	fp, r3
 80128ac:	dd13      	ble.n	80128d6 <__hexnan+0x7a>
 80128ae:	454c      	cmp	r4, r9
 80128b0:	d206      	bcs.n	80128c0 <__hexnan+0x64>
 80128b2:	2d07      	cmp	r5, #7
 80128b4:	dc04      	bgt.n	80128c0 <__hexnan+0x64>
 80128b6:	462a      	mov	r2, r5
 80128b8:	4649      	mov	r1, r9
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7ff ffa8 	bl	8012810 <L_shift>
 80128c0:	4544      	cmp	r4, r8
 80128c2:	d944      	bls.n	801294e <__hexnan+0xf2>
 80128c4:	2300      	movs	r3, #0
 80128c6:	f1a4 0904 	sub.w	r9, r4, #4
 80128ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80128ce:	f8cd b008 	str.w	fp, [sp, #8]
 80128d2:	464c      	mov	r4, r9
 80128d4:	461d      	mov	r5, r3
 80128d6:	9903      	ldr	r1, [sp, #12]
 80128d8:	e7d7      	b.n	801288a <__hexnan+0x2e>
 80128da:	2a29      	cmp	r2, #41	; 0x29
 80128dc:	d14a      	bne.n	8012974 <__hexnan+0x118>
 80128de:	3102      	adds	r1, #2
 80128e0:	f8ca 1000 	str.w	r1, [sl]
 80128e4:	f1bb 0f00 	cmp.w	fp, #0
 80128e8:	d044      	beq.n	8012974 <__hexnan+0x118>
 80128ea:	454c      	cmp	r4, r9
 80128ec:	d206      	bcs.n	80128fc <__hexnan+0xa0>
 80128ee:	2d07      	cmp	r5, #7
 80128f0:	dc04      	bgt.n	80128fc <__hexnan+0xa0>
 80128f2:	462a      	mov	r2, r5
 80128f4:	4649      	mov	r1, r9
 80128f6:	4620      	mov	r0, r4
 80128f8:	f7ff ff8a 	bl	8012810 <L_shift>
 80128fc:	4544      	cmp	r4, r8
 80128fe:	d928      	bls.n	8012952 <__hexnan+0xf6>
 8012900:	4643      	mov	r3, r8
 8012902:	f854 2b04 	ldr.w	r2, [r4], #4
 8012906:	f843 2b04 	str.w	r2, [r3], #4
 801290a:	42a6      	cmp	r6, r4
 801290c:	d2f9      	bcs.n	8012902 <__hexnan+0xa6>
 801290e:	2200      	movs	r2, #0
 8012910:	f843 2b04 	str.w	r2, [r3], #4
 8012914:	429e      	cmp	r6, r3
 8012916:	d2fb      	bcs.n	8012910 <__hexnan+0xb4>
 8012918:	6833      	ldr	r3, [r6, #0]
 801291a:	b91b      	cbnz	r3, 8012924 <__hexnan+0xc8>
 801291c:	4546      	cmp	r6, r8
 801291e:	d127      	bne.n	8012970 <__hexnan+0x114>
 8012920:	2301      	movs	r3, #1
 8012922:	6033      	str	r3, [r6, #0]
 8012924:	2005      	movs	r0, #5
 8012926:	e026      	b.n	8012976 <__hexnan+0x11a>
 8012928:	3501      	adds	r5, #1
 801292a:	2d08      	cmp	r5, #8
 801292c:	f10b 0b01 	add.w	fp, fp, #1
 8012930:	dd06      	ble.n	8012940 <__hexnan+0xe4>
 8012932:	4544      	cmp	r4, r8
 8012934:	d9cf      	bls.n	80128d6 <__hexnan+0x7a>
 8012936:	2300      	movs	r3, #0
 8012938:	f844 3c04 	str.w	r3, [r4, #-4]
 801293c:	2501      	movs	r5, #1
 801293e:	3c04      	subs	r4, #4
 8012940:	6822      	ldr	r2, [r4, #0]
 8012942:	f000 000f 	and.w	r0, r0, #15
 8012946:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801294a:	6020      	str	r0, [r4, #0]
 801294c:	e7c3      	b.n	80128d6 <__hexnan+0x7a>
 801294e:	2508      	movs	r5, #8
 8012950:	e7c1      	b.n	80128d6 <__hexnan+0x7a>
 8012952:	9b01      	ldr	r3, [sp, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d0df      	beq.n	8012918 <__hexnan+0xbc>
 8012958:	f04f 32ff 	mov.w	r2, #4294967295
 801295c:	f1c3 0320 	rsb	r3, r3, #32
 8012960:	fa22 f303 	lsr.w	r3, r2, r3
 8012964:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012968:	401a      	ands	r2, r3
 801296a:	f847 2c04 	str.w	r2, [r7, #-4]
 801296e:	e7d3      	b.n	8012918 <__hexnan+0xbc>
 8012970:	3e04      	subs	r6, #4
 8012972:	e7d1      	b.n	8012918 <__hexnan+0xbc>
 8012974:	2004      	movs	r0, #4
 8012976:	b007      	add	sp, #28
 8012978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801297c <__locale_ctype_ptr_l>:
 801297c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012980:	4770      	bx	lr

08012982 <__localeconv_l>:
 8012982:	30f0      	adds	r0, #240	; 0xf0
 8012984:	4770      	bx	lr
	...

08012988 <_localeconv_r>:
 8012988:	4b04      	ldr	r3, [pc, #16]	; (801299c <_localeconv_r+0x14>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	6a18      	ldr	r0, [r3, #32]
 801298e:	4b04      	ldr	r3, [pc, #16]	; (80129a0 <_localeconv_r+0x18>)
 8012990:	2800      	cmp	r0, #0
 8012992:	bf08      	it	eq
 8012994:	4618      	moveq	r0, r3
 8012996:	30f0      	adds	r0, #240	; 0xf0
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	200001c0 	.word	0x200001c0
 80129a0:	20000224 	.word	0x20000224

080129a4 <__ascii_mbtowc>:
 80129a4:	b082      	sub	sp, #8
 80129a6:	b901      	cbnz	r1, 80129aa <__ascii_mbtowc+0x6>
 80129a8:	a901      	add	r1, sp, #4
 80129aa:	b142      	cbz	r2, 80129be <__ascii_mbtowc+0x1a>
 80129ac:	b14b      	cbz	r3, 80129c2 <__ascii_mbtowc+0x1e>
 80129ae:	7813      	ldrb	r3, [r2, #0]
 80129b0:	600b      	str	r3, [r1, #0]
 80129b2:	7812      	ldrb	r2, [r2, #0]
 80129b4:	1c10      	adds	r0, r2, #0
 80129b6:	bf18      	it	ne
 80129b8:	2001      	movne	r0, #1
 80129ba:	b002      	add	sp, #8
 80129bc:	4770      	bx	lr
 80129be:	4610      	mov	r0, r2
 80129c0:	e7fb      	b.n	80129ba <__ascii_mbtowc+0x16>
 80129c2:	f06f 0001 	mvn.w	r0, #1
 80129c6:	e7f8      	b.n	80129ba <__ascii_mbtowc+0x16>

080129c8 <__malloc_lock>:
 80129c8:	4770      	bx	lr

080129ca <__malloc_unlock>:
 80129ca:	4770      	bx	lr

080129cc <_Balloc>:
 80129cc:	b570      	push	{r4, r5, r6, lr}
 80129ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80129d0:	4604      	mov	r4, r0
 80129d2:	460e      	mov	r6, r1
 80129d4:	b93d      	cbnz	r5, 80129e6 <_Balloc+0x1a>
 80129d6:	2010      	movs	r0, #16
 80129d8:	f7fd f844 	bl	800fa64 <malloc>
 80129dc:	6260      	str	r0, [r4, #36]	; 0x24
 80129de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129e2:	6005      	str	r5, [r0, #0]
 80129e4:	60c5      	str	r5, [r0, #12]
 80129e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80129e8:	68eb      	ldr	r3, [r5, #12]
 80129ea:	b183      	cbz	r3, 8012a0e <_Balloc+0x42>
 80129ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80129f4:	b9b8      	cbnz	r0, 8012a26 <_Balloc+0x5a>
 80129f6:	2101      	movs	r1, #1
 80129f8:	fa01 f506 	lsl.w	r5, r1, r6
 80129fc:	1d6a      	adds	r2, r5, #5
 80129fe:	0092      	lsls	r2, r2, #2
 8012a00:	4620      	mov	r0, r4
 8012a02:	f000 fbe2 	bl	80131ca <_calloc_r>
 8012a06:	b160      	cbz	r0, 8012a22 <_Balloc+0x56>
 8012a08:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012a0c:	e00e      	b.n	8012a2c <_Balloc+0x60>
 8012a0e:	2221      	movs	r2, #33	; 0x21
 8012a10:	2104      	movs	r1, #4
 8012a12:	4620      	mov	r0, r4
 8012a14:	f000 fbd9 	bl	80131ca <_calloc_r>
 8012a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a1a:	60e8      	str	r0, [r5, #12]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1e4      	bne.n	80129ec <_Balloc+0x20>
 8012a22:	2000      	movs	r0, #0
 8012a24:	bd70      	pop	{r4, r5, r6, pc}
 8012a26:	6802      	ldr	r2, [r0, #0]
 8012a28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a32:	e7f7      	b.n	8012a24 <_Balloc+0x58>

08012a34 <_Bfree>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012a38:	4606      	mov	r6, r0
 8012a3a:	460d      	mov	r5, r1
 8012a3c:	b93c      	cbnz	r4, 8012a4e <_Bfree+0x1a>
 8012a3e:	2010      	movs	r0, #16
 8012a40:	f7fd f810 	bl	800fa64 <malloc>
 8012a44:	6270      	str	r0, [r6, #36]	; 0x24
 8012a46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a4a:	6004      	str	r4, [r0, #0]
 8012a4c:	60c4      	str	r4, [r0, #12]
 8012a4e:	b13d      	cbz	r5, 8012a60 <_Bfree+0x2c>
 8012a50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012a52:	686a      	ldr	r2, [r5, #4]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a5a:	6029      	str	r1, [r5, #0]
 8012a5c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012a60:	bd70      	pop	{r4, r5, r6, pc}

08012a62 <__multadd>:
 8012a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a66:	690d      	ldr	r5, [r1, #16]
 8012a68:	461f      	mov	r7, r3
 8012a6a:	4606      	mov	r6, r0
 8012a6c:	460c      	mov	r4, r1
 8012a6e:	f101 0c14 	add.w	ip, r1, #20
 8012a72:	2300      	movs	r3, #0
 8012a74:	f8dc 0000 	ldr.w	r0, [ip]
 8012a78:	b281      	uxth	r1, r0
 8012a7a:	fb02 7101 	mla	r1, r2, r1, r7
 8012a7e:	0c0f      	lsrs	r7, r1, #16
 8012a80:	0c00      	lsrs	r0, r0, #16
 8012a82:	fb02 7000 	mla	r0, r2, r0, r7
 8012a86:	b289      	uxth	r1, r1
 8012a88:	3301      	adds	r3, #1
 8012a8a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012a8e:	429d      	cmp	r5, r3
 8012a90:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012a94:	f84c 1b04 	str.w	r1, [ip], #4
 8012a98:	dcec      	bgt.n	8012a74 <__multadd+0x12>
 8012a9a:	b1d7      	cbz	r7, 8012ad2 <__multadd+0x70>
 8012a9c:	68a3      	ldr	r3, [r4, #8]
 8012a9e:	42ab      	cmp	r3, r5
 8012aa0:	dc12      	bgt.n	8012ac8 <__multadd+0x66>
 8012aa2:	6861      	ldr	r1, [r4, #4]
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	3101      	adds	r1, #1
 8012aa8:	f7ff ff90 	bl	80129cc <_Balloc>
 8012aac:	6922      	ldr	r2, [r4, #16]
 8012aae:	3202      	adds	r2, #2
 8012ab0:	f104 010c 	add.w	r1, r4, #12
 8012ab4:	4680      	mov	r8, r0
 8012ab6:	0092      	lsls	r2, r2, #2
 8012ab8:	300c      	adds	r0, #12
 8012aba:	f7fc ffe3 	bl	800fa84 <memcpy>
 8012abe:	4621      	mov	r1, r4
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	f7ff ffb7 	bl	8012a34 <_Bfree>
 8012ac6:	4644      	mov	r4, r8
 8012ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012acc:	3501      	adds	r5, #1
 8012ace:	615f      	str	r7, [r3, #20]
 8012ad0:	6125      	str	r5, [r4, #16]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ad8 <__s2b>:
 8012ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012adc:	460c      	mov	r4, r1
 8012ade:	4615      	mov	r5, r2
 8012ae0:	461f      	mov	r7, r3
 8012ae2:	2209      	movs	r2, #9
 8012ae4:	3308      	adds	r3, #8
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012aec:	2100      	movs	r1, #0
 8012aee:	2201      	movs	r2, #1
 8012af0:	429a      	cmp	r2, r3
 8012af2:	db20      	blt.n	8012b36 <__s2b+0x5e>
 8012af4:	4630      	mov	r0, r6
 8012af6:	f7ff ff69 	bl	80129cc <_Balloc>
 8012afa:	9b08      	ldr	r3, [sp, #32]
 8012afc:	6143      	str	r3, [r0, #20]
 8012afe:	2d09      	cmp	r5, #9
 8012b00:	f04f 0301 	mov.w	r3, #1
 8012b04:	6103      	str	r3, [r0, #16]
 8012b06:	dd19      	ble.n	8012b3c <__s2b+0x64>
 8012b08:	f104 0809 	add.w	r8, r4, #9
 8012b0c:	46c1      	mov	r9, r8
 8012b0e:	442c      	add	r4, r5
 8012b10:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012b14:	4601      	mov	r1, r0
 8012b16:	3b30      	subs	r3, #48	; 0x30
 8012b18:	220a      	movs	r2, #10
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f7ff ffa1 	bl	8012a62 <__multadd>
 8012b20:	45a1      	cmp	r9, r4
 8012b22:	d1f5      	bne.n	8012b10 <__s2b+0x38>
 8012b24:	eb08 0405 	add.w	r4, r8, r5
 8012b28:	3c08      	subs	r4, #8
 8012b2a:	1b2d      	subs	r5, r5, r4
 8012b2c:	1963      	adds	r3, r4, r5
 8012b2e:	42bb      	cmp	r3, r7
 8012b30:	db07      	blt.n	8012b42 <__s2b+0x6a>
 8012b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b36:	0052      	lsls	r2, r2, #1
 8012b38:	3101      	adds	r1, #1
 8012b3a:	e7d9      	b.n	8012af0 <__s2b+0x18>
 8012b3c:	340a      	adds	r4, #10
 8012b3e:	2509      	movs	r5, #9
 8012b40:	e7f3      	b.n	8012b2a <__s2b+0x52>
 8012b42:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012b46:	4601      	mov	r1, r0
 8012b48:	3b30      	subs	r3, #48	; 0x30
 8012b4a:	220a      	movs	r2, #10
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	f7ff ff88 	bl	8012a62 <__multadd>
 8012b52:	e7eb      	b.n	8012b2c <__s2b+0x54>

08012b54 <__hi0bits>:
 8012b54:	0c02      	lsrs	r2, r0, #16
 8012b56:	0412      	lsls	r2, r2, #16
 8012b58:	4603      	mov	r3, r0
 8012b5a:	b9b2      	cbnz	r2, 8012b8a <__hi0bits+0x36>
 8012b5c:	0403      	lsls	r3, r0, #16
 8012b5e:	2010      	movs	r0, #16
 8012b60:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012b64:	bf04      	itt	eq
 8012b66:	021b      	lsleq	r3, r3, #8
 8012b68:	3008      	addeq	r0, #8
 8012b6a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012b6e:	bf04      	itt	eq
 8012b70:	011b      	lsleq	r3, r3, #4
 8012b72:	3004      	addeq	r0, #4
 8012b74:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012b78:	bf04      	itt	eq
 8012b7a:	009b      	lsleq	r3, r3, #2
 8012b7c:	3002      	addeq	r0, #2
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	db06      	blt.n	8012b90 <__hi0bits+0x3c>
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	d503      	bpl.n	8012b8e <__hi0bits+0x3a>
 8012b86:	3001      	adds	r0, #1
 8012b88:	4770      	bx	lr
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	e7e8      	b.n	8012b60 <__hi0bits+0xc>
 8012b8e:	2020      	movs	r0, #32
 8012b90:	4770      	bx	lr

08012b92 <__lo0bits>:
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	f013 0207 	ands.w	r2, r3, #7
 8012b98:	4601      	mov	r1, r0
 8012b9a:	d00b      	beq.n	8012bb4 <__lo0bits+0x22>
 8012b9c:	07da      	lsls	r2, r3, #31
 8012b9e:	d423      	bmi.n	8012be8 <__lo0bits+0x56>
 8012ba0:	0798      	lsls	r0, r3, #30
 8012ba2:	bf49      	itett	mi
 8012ba4:	085b      	lsrmi	r3, r3, #1
 8012ba6:	089b      	lsrpl	r3, r3, #2
 8012ba8:	2001      	movmi	r0, #1
 8012baa:	600b      	strmi	r3, [r1, #0]
 8012bac:	bf5c      	itt	pl
 8012bae:	600b      	strpl	r3, [r1, #0]
 8012bb0:	2002      	movpl	r0, #2
 8012bb2:	4770      	bx	lr
 8012bb4:	b298      	uxth	r0, r3
 8012bb6:	b9a8      	cbnz	r0, 8012be4 <__lo0bits+0x52>
 8012bb8:	0c1b      	lsrs	r3, r3, #16
 8012bba:	2010      	movs	r0, #16
 8012bbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012bc0:	bf04      	itt	eq
 8012bc2:	0a1b      	lsreq	r3, r3, #8
 8012bc4:	3008      	addeq	r0, #8
 8012bc6:	071a      	lsls	r2, r3, #28
 8012bc8:	bf04      	itt	eq
 8012bca:	091b      	lsreq	r3, r3, #4
 8012bcc:	3004      	addeq	r0, #4
 8012bce:	079a      	lsls	r2, r3, #30
 8012bd0:	bf04      	itt	eq
 8012bd2:	089b      	lsreq	r3, r3, #2
 8012bd4:	3002      	addeq	r0, #2
 8012bd6:	07da      	lsls	r2, r3, #31
 8012bd8:	d402      	bmi.n	8012be0 <__lo0bits+0x4e>
 8012bda:	085b      	lsrs	r3, r3, #1
 8012bdc:	d006      	beq.n	8012bec <__lo0bits+0x5a>
 8012bde:	3001      	adds	r0, #1
 8012be0:	600b      	str	r3, [r1, #0]
 8012be2:	4770      	bx	lr
 8012be4:	4610      	mov	r0, r2
 8012be6:	e7e9      	b.n	8012bbc <__lo0bits+0x2a>
 8012be8:	2000      	movs	r0, #0
 8012bea:	4770      	bx	lr
 8012bec:	2020      	movs	r0, #32
 8012bee:	4770      	bx	lr

08012bf0 <__i2b>:
 8012bf0:	b510      	push	{r4, lr}
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	f7ff fee9 	bl	80129cc <_Balloc>
 8012bfa:	2201      	movs	r2, #1
 8012bfc:	6144      	str	r4, [r0, #20]
 8012bfe:	6102      	str	r2, [r0, #16]
 8012c00:	bd10      	pop	{r4, pc}

08012c02 <__multiply>:
 8012c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c06:	4614      	mov	r4, r2
 8012c08:	690a      	ldr	r2, [r1, #16]
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	bfb8      	it	lt
 8012c10:	460b      	movlt	r3, r1
 8012c12:	4688      	mov	r8, r1
 8012c14:	bfbc      	itt	lt
 8012c16:	46a0      	movlt	r8, r4
 8012c18:	461c      	movlt	r4, r3
 8012c1a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012c1e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c26:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012c2a:	eb07 0609 	add.w	r6, r7, r9
 8012c2e:	42b3      	cmp	r3, r6
 8012c30:	bfb8      	it	lt
 8012c32:	3101      	addlt	r1, #1
 8012c34:	f7ff feca 	bl	80129cc <_Balloc>
 8012c38:	f100 0514 	add.w	r5, r0, #20
 8012c3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012c40:	462b      	mov	r3, r5
 8012c42:	2200      	movs	r2, #0
 8012c44:	4573      	cmp	r3, lr
 8012c46:	d316      	bcc.n	8012c76 <__multiply+0x74>
 8012c48:	f104 0214 	add.w	r2, r4, #20
 8012c4c:	f108 0114 	add.w	r1, r8, #20
 8012c50:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012c54:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	9b00      	ldr	r3, [sp, #0]
 8012c5c:	9201      	str	r2, [sp, #4]
 8012c5e:	4293      	cmp	r3, r2
 8012c60:	d80c      	bhi.n	8012c7c <__multiply+0x7a>
 8012c62:	2e00      	cmp	r6, #0
 8012c64:	dd03      	ble.n	8012c6e <__multiply+0x6c>
 8012c66:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d05d      	beq.n	8012d2a <__multiply+0x128>
 8012c6e:	6106      	str	r6, [r0, #16]
 8012c70:	b003      	add	sp, #12
 8012c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c76:	f843 2b04 	str.w	r2, [r3], #4
 8012c7a:	e7e3      	b.n	8012c44 <__multiply+0x42>
 8012c7c:	f8b2 b000 	ldrh.w	fp, [r2]
 8012c80:	f1bb 0f00 	cmp.w	fp, #0
 8012c84:	d023      	beq.n	8012cce <__multiply+0xcc>
 8012c86:	4689      	mov	r9, r1
 8012c88:	46ac      	mov	ip, r5
 8012c8a:	f04f 0800 	mov.w	r8, #0
 8012c8e:	f859 4b04 	ldr.w	r4, [r9], #4
 8012c92:	f8dc a000 	ldr.w	sl, [ip]
 8012c96:	b2a3      	uxth	r3, r4
 8012c98:	fa1f fa8a 	uxth.w	sl, sl
 8012c9c:	fb0b a303 	mla	r3, fp, r3, sl
 8012ca0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012ca4:	f8dc 4000 	ldr.w	r4, [ip]
 8012ca8:	4443      	add	r3, r8
 8012caa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012cae:	fb0b 840a 	mla	r4, fp, sl, r8
 8012cb2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012cb6:	46e2      	mov	sl, ip
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012cbe:	454f      	cmp	r7, r9
 8012cc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012cc4:	f84a 3b04 	str.w	r3, [sl], #4
 8012cc8:	d82b      	bhi.n	8012d22 <__multiply+0x120>
 8012cca:	f8cc 8004 	str.w	r8, [ip, #4]
 8012cce:	9b01      	ldr	r3, [sp, #4]
 8012cd0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012cd4:	3204      	adds	r2, #4
 8012cd6:	f1ba 0f00 	cmp.w	sl, #0
 8012cda:	d020      	beq.n	8012d1e <__multiply+0x11c>
 8012cdc:	682b      	ldr	r3, [r5, #0]
 8012cde:	4689      	mov	r9, r1
 8012ce0:	46a8      	mov	r8, r5
 8012ce2:	f04f 0b00 	mov.w	fp, #0
 8012ce6:	f8b9 c000 	ldrh.w	ip, [r9]
 8012cea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012cee:	fb0a 440c 	mla	r4, sl, ip, r4
 8012cf2:	445c      	add	r4, fp
 8012cf4:	46c4      	mov	ip, r8
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012cfc:	f84c 3b04 	str.w	r3, [ip], #4
 8012d00:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d04:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012d08:	0c1b      	lsrs	r3, r3, #16
 8012d0a:	fb0a b303 	mla	r3, sl, r3, fp
 8012d0e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012d12:	454f      	cmp	r7, r9
 8012d14:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012d18:	d805      	bhi.n	8012d26 <__multiply+0x124>
 8012d1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8012d1e:	3504      	adds	r5, #4
 8012d20:	e79b      	b.n	8012c5a <__multiply+0x58>
 8012d22:	46d4      	mov	ip, sl
 8012d24:	e7b3      	b.n	8012c8e <__multiply+0x8c>
 8012d26:	46e0      	mov	r8, ip
 8012d28:	e7dd      	b.n	8012ce6 <__multiply+0xe4>
 8012d2a:	3e01      	subs	r6, #1
 8012d2c:	e799      	b.n	8012c62 <__multiply+0x60>
	...

08012d30 <__pow5mult>:
 8012d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d34:	4615      	mov	r5, r2
 8012d36:	f012 0203 	ands.w	r2, r2, #3
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	460f      	mov	r7, r1
 8012d3e:	d007      	beq.n	8012d50 <__pow5mult+0x20>
 8012d40:	3a01      	subs	r2, #1
 8012d42:	4c21      	ldr	r4, [pc, #132]	; (8012dc8 <__pow5mult+0x98>)
 8012d44:	2300      	movs	r3, #0
 8012d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d4a:	f7ff fe8a 	bl	8012a62 <__multadd>
 8012d4e:	4607      	mov	r7, r0
 8012d50:	10ad      	asrs	r5, r5, #2
 8012d52:	d035      	beq.n	8012dc0 <__pow5mult+0x90>
 8012d54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012d56:	b93c      	cbnz	r4, 8012d68 <__pow5mult+0x38>
 8012d58:	2010      	movs	r0, #16
 8012d5a:	f7fc fe83 	bl	800fa64 <malloc>
 8012d5e:	6270      	str	r0, [r6, #36]	; 0x24
 8012d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d64:	6004      	str	r4, [r0, #0]
 8012d66:	60c4      	str	r4, [r0, #12]
 8012d68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d70:	b94c      	cbnz	r4, 8012d86 <__pow5mult+0x56>
 8012d72:	f240 2171 	movw	r1, #625	; 0x271
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7ff ff3a 	bl	8012bf0 <__i2b>
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d82:	4604      	mov	r4, r0
 8012d84:	6003      	str	r3, [r0, #0]
 8012d86:	f04f 0800 	mov.w	r8, #0
 8012d8a:	07eb      	lsls	r3, r5, #31
 8012d8c:	d50a      	bpl.n	8012da4 <__pow5mult+0x74>
 8012d8e:	4639      	mov	r1, r7
 8012d90:	4622      	mov	r2, r4
 8012d92:	4630      	mov	r0, r6
 8012d94:	f7ff ff35 	bl	8012c02 <__multiply>
 8012d98:	4639      	mov	r1, r7
 8012d9a:	4681      	mov	r9, r0
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f7ff fe49 	bl	8012a34 <_Bfree>
 8012da2:	464f      	mov	r7, r9
 8012da4:	106d      	asrs	r5, r5, #1
 8012da6:	d00b      	beq.n	8012dc0 <__pow5mult+0x90>
 8012da8:	6820      	ldr	r0, [r4, #0]
 8012daa:	b938      	cbnz	r0, 8012dbc <__pow5mult+0x8c>
 8012dac:	4622      	mov	r2, r4
 8012dae:	4621      	mov	r1, r4
 8012db0:	4630      	mov	r0, r6
 8012db2:	f7ff ff26 	bl	8012c02 <__multiply>
 8012db6:	6020      	str	r0, [r4, #0]
 8012db8:	f8c0 8000 	str.w	r8, [r0]
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	e7e4      	b.n	8012d8a <__pow5mult+0x5a>
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dc6:	bf00      	nop
 8012dc8:	080153b8 	.word	0x080153b8

08012dcc <__lshift>:
 8012dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dd0:	460c      	mov	r4, r1
 8012dd2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012dd6:	6923      	ldr	r3, [r4, #16]
 8012dd8:	6849      	ldr	r1, [r1, #4]
 8012dda:	eb0a 0903 	add.w	r9, sl, r3
 8012dde:	68a3      	ldr	r3, [r4, #8]
 8012de0:	4607      	mov	r7, r0
 8012de2:	4616      	mov	r6, r2
 8012de4:	f109 0501 	add.w	r5, r9, #1
 8012de8:	42ab      	cmp	r3, r5
 8012dea:	db32      	blt.n	8012e52 <__lshift+0x86>
 8012dec:	4638      	mov	r0, r7
 8012dee:	f7ff fded 	bl	80129cc <_Balloc>
 8012df2:	2300      	movs	r3, #0
 8012df4:	4680      	mov	r8, r0
 8012df6:	f100 0114 	add.w	r1, r0, #20
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	4553      	cmp	r3, sl
 8012dfe:	db2b      	blt.n	8012e58 <__lshift+0x8c>
 8012e00:	6920      	ldr	r0, [r4, #16]
 8012e02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012e06:	f104 0314 	add.w	r3, r4, #20
 8012e0a:	f016 021f 	ands.w	r2, r6, #31
 8012e0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012e16:	d025      	beq.n	8012e64 <__lshift+0x98>
 8012e18:	f1c2 0e20 	rsb	lr, r2, #32
 8012e1c:	2000      	movs	r0, #0
 8012e1e:	681e      	ldr	r6, [r3, #0]
 8012e20:	468a      	mov	sl, r1
 8012e22:	4096      	lsls	r6, r2
 8012e24:	4330      	orrs	r0, r6
 8012e26:	f84a 0b04 	str.w	r0, [sl], #4
 8012e2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8012e2e:	459c      	cmp	ip, r3
 8012e30:	fa20 f00e 	lsr.w	r0, r0, lr
 8012e34:	d814      	bhi.n	8012e60 <__lshift+0x94>
 8012e36:	6048      	str	r0, [r1, #4]
 8012e38:	b108      	cbz	r0, 8012e3e <__lshift+0x72>
 8012e3a:	f109 0502 	add.w	r5, r9, #2
 8012e3e:	3d01      	subs	r5, #1
 8012e40:	4638      	mov	r0, r7
 8012e42:	f8c8 5010 	str.w	r5, [r8, #16]
 8012e46:	4621      	mov	r1, r4
 8012e48:	f7ff fdf4 	bl	8012a34 <_Bfree>
 8012e4c:	4640      	mov	r0, r8
 8012e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e52:	3101      	adds	r1, #1
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	e7c7      	b.n	8012de8 <__lshift+0x1c>
 8012e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	e7cd      	b.n	8012dfc <__lshift+0x30>
 8012e60:	4651      	mov	r1, sl
 8012e62:	e7dc      	b.n	8012e1e <__lshift+0x52>
 8012e64:	3904      	subs	r1, #4
 8012e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e6e:	459c      	cmp	ip, r3
 8012e70:	d8f9      	bhi.n	8012e66 <__lshift+0x9a>
 8012e72:	e7e4      	b.n	8012e3e <__lshift+0x72>

08012e74 <__mcmp>:
 8012e74:	6903      	ldr	r3, [r0, #16]
 8012e76:	690a      	ldr	r2, [r1, #16]
 8012e78:	1a9b      	subs	r3, r3, r2
 8012e7a:	b530      	push	{r4, r5, lr}
 8012e7c:	d10c      	bne.n	8012e98 <__mcmp+0x24>
 8012e7e:	0092      	lsls	r2, r2, #2
 8012e80:	3014      	adds	r0, #20
 8012e82:	3114      	adds	r1, #20
 8012e84:	1884      	adds	r4, r0, r2
 8012e86:	4411      	add	r1, r2
 8012e88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012e8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012e90:	4295      	cmp	r5, r2
 8012e92:	d003      	beq.n	8012e9c <__mcmp+0x28>
 8012e94:	d305      	bcc.n	8012ea2 <__mcmp+0x2e>
 8012e96:	2301      	movs	r3, #1
 8012e98:	4618      	mov	r0, r3
 8012e9a:	bd30      	pop	{r4, r5, pc}
 8012e9c:	42a0      	cmp	r0, r4
 8012e9e:	d3f3      	bcc.n	8012e88 <__mcmp+0x14>
 8012ea0:	e7fa      	b.n	8012e98 <__mcmp+0x24>
 8012ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea6:	e7f7      	b.n	8012e98 <__mcmp+0x24>

08012ea8 <__mdiff>:
 8012ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eac:	460d      	mov	r5, r1
 8012eae:	4607      	mov	r7, r0
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	4614      	mov	r4, r2
 8012eb6:	f7ff ffdd 	bl	8012e74 <__mcmp>
 8012eba:	1e06      	subs	r6, r0, #0
 8012ebc:	d108      	bne.n	8012ed0 <__mdiff+0x28>
 8012ebe:	4631      	mov	r1, r6
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f7ff fd83 	bl	80129cc <_Balloc>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ed0:	bfa4      	itt	ge
 8012ed2:	4623      	movge	r3, r4
 8012ed4:	462c      	movge	r4, r5
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	6861      	ldr	r1, [r4, #4]
 8012eda:	bfa6      	itte	ge
 8012edc:	461d      	movge	r5, r3
 8012ede:	2600      	movge	r6, #0
 8012ee0:	2601      	movlt	r6, #1
 8012ee2:	f7ff fd73 	bl	80129cc <_Balloc>
 8012ee6:	692b      	ldr	r3, [r5, #16]
 8012ee8:	60c6      	str	r6, [r0, #12]
 8012eea:	6926      	ldr	r6, [r4, #16]
 8012eec:	f105 0914 	add.w	r9, r5, #20
 8012ef0:	f104 0214 	add.w	r2, r4, #20
 8012ef4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012ef8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012efc:	f100 0514 	add.w	r5, r0, #20
 8012f00:	f04f 0e00 	mov.w	lr, #0
 8012f04:	f852 ab04 	ldr.w	sl, [r2], #4
 8012f08:	f859 4b04 	ldr.w	r4, [r9], #4
 8012f0c:	fa1e f18a 	uxtah	r1, lr, sl
 8012f10:	b2a3      	uxth	r3, r4
 8012f12:	1ac9      	subs	r1, r1, r3
 8012f14:	0c23      	lsrs	r3, r4, #16
 8012f16:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012f1a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012f1e:	b289      	uxth	r1, r1
 8012f20:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012f24:	45c8      	cmp	r8, r9
 8012f26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012f2a:	4694      	mov	ip, r2
 8012f2c:	f845 3b04 	str.w	r3, [r5], #4
 8012f30:	d8e8      	bhi.n	8012f04 <__mdiff+0x5c>
 8012f32:	45bc      	cmp	ip, r7
 8012f34:	d304      	bcc.n	8012f40 <__mdiff+0x98>
 8012f36:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012f3a:	b183      	cbz	r3, 8012f5e <__mdiff+0xb6>
 8012f3c:	6106      	str	r6, [r0, #16]
 8012f3e:	e7c5      	b.n	8012ecc <__mdiff+0x24>
 8012f40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012f44:	fa1e f381 	uxtah	r3, lr, r1
 8012f48:	141a      	asrs	r2, r3, #16
 8012f4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012f54:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012f58:	f845 3b04 	str.w	r3, [r5], #4
 8012f5c:	e7e9      	b.n	8012f32 <__mdiff+0x8a>
 8012f5e:	3e01      	subs	r6, #1
 8012f60:	e7e9      	b.n	8012f36 <__mdiff+0x8e>
	...

08012f64 <__ulp>:
 8012f64:	4b12      	ldr	r3, [pc, #72]	; (8012fb0 <__ulp+0x4c>)
 8012f66:	ee10 2a90 	vmov	r2, s1
 8012f6a:	401a      	ands	r2, r3
 8012f6c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	dd04      	ble.n	8012f7e <__ulp+0x1a>
 8012f74:	2000      	movs	r0, #0
 8012f76:	4619      	mov	r1, r3
 8012f78:	ec41 0b10 	vmov	d0, r0, r1
 8012f7c:	4770      	bx	lr
 8012f7e:	425b      	negs	r3, r3
 8012f80:	151b      	asrs	r3, r3, #20
 8012f82:	2b13      	cmp	r3, #19
 8012f84:	f04f 0000 	mov.w	r0, #0
 8012f88:	f04f 0100 	mov.w	r1, #0
 8012f8c:	dc04      	bgt.n	8012f98 <__ulp+0x34>
 8012f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012f92:	fa42 f103 	asr.w	r1, r2, r3
 8012f96:	e7ef      	b.n	8012f78 <__ulp+0x14>
 8012f98:	3b14      	subs	r3, #20
 8012f9a:	2b1e      	cmp	r3, #30
 8012f9c:	f04f 0201 	mov.w	r2, #1
 8012fa0:	bfda      	itte	le
 8012fa2:	f1c3 031f 	rsble	r3, r3, #31
 8012fa6:	fa02 f303 	lslle.w	r3, r2, r3
 8012faa:	4613      	movgt	r3, r2
 8012fac:	4618      	mov	r0, r3
 8012fae:	e7e3      	b.n	8012f78 <__ulp+0x14>
 8012fb0:	7ff00000 	.word	0x7ff00000

08012fb4 <__b2d>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	6905      	ldr	r5, [r0, #16]
 8012fb8:	f100 0714 	add.w	r7, r0, #20
 8012fbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012fc0:	1f2e      	subs	r6, r5, #4
 8012fc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f7ff fdc4 	bl	8012b54 <__hi0bits>
 8012fcc:	f1c0 0320 	rsb	r3, r0, #32
 8012fd0:	280a      	cmp	r0, #10
 8012fd2:	600b      	str	r3, [r1, #0]
 8012fd4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801304c <__b2d+0x98>
 8012fd8:	dc14      	bgt.n	8013004 <__b2d+0x50>
 8012fda:	f1c0 0e0b 	rsb	lr, r0, #11
 8012fde:	fa24 f10e 	lsr.w	r1, r4, lr
 8012fe2:	42b7      	cmp	r7, r6
 8012fe4:	ea41 030c 	orr.w	r3, r1, ip
 8012fe8:	bf34      	ite	cc
 8012fea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012fee:	2100      	movcs	r1, #0
 8012ff0:	3015      	adds	r0, #21
 8012ff2:	fa04 f000 	lsl.w	r0, r4, r0
 8012ff6:	fa21 f10e 	lsr.w	r1, r1, lr
 8012ffa:	ea40 0201 	orr.w	r2, r0, r1
 8012ffe:	ec43 2b10 	vmov	d0, r2, r3
 8013002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013004:	42b7      	cmp	r7, r6
 8013006:	bf3a      	itte	cc
 8013008:	f1a5 0608 	subcc.w	r6, r5, #8
 801300c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013010:	2100      	movcs	r1, #0
 8013012:	380b      	subs	r0, #11
 8013014:	d015      	beq.n	8013042 <__b2d+0x8e>
 8013016:	4084      	lsls	r4, r0
 8013018:	f1c0 0520 	rsb	r5, r0, #32
 801301c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013020:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013024:	42be      	cmp	r6, r7
 8013026:	fa21 fc05 	lsr.w	ip, r1, r5
 801302a:	ea44 030c 	orr.w	r3, r4, ip
 801302e:	bf8c      	ite	hi
 8013030:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013034:	2400      	movls	r4, #0
 8013036:	fa01 f000 	lsl.w	r0, r1, r0
 801303a:	40ec      	lsrs	r4, r5
 801303c:	ea40 0204 	orr.w	r2, r0, r4
 8013040:	e7dd      	b.n	8012ffe <__b2d+0x4a>
 8013042:	ea44 030c 	orr.w	r3, r4, ip
 8013046:	460a      	mov	r2, r1
 8013048:	e7d9      	b.n	8012ffe <__b2d+0x4a>
 801304a:	bf00      	nop
 801304c:	3ff00000 	.word	0x3ff00000

08013050 <__d2b>:
 8013050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013054:	460e      	mov	r6, r1
 8013056:	2101      	movs	r1, #1
 8013058:	ec59 8b10 	vmov	r8, r9, d0
 801305c:	4615      	mov	r5, r2
 801305e:	f7ff fcb5 	bl	80129cc <_Balloc>
 8013062:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013066:	4607      	mov	r7, r0
 8013068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801306c:	bb34      	cbnz	r4, 80130bc <__d2b+0x6c>
 801306e:	9301      	str	r3, [sp, #4]
 8013070:	f1b8 0300 	subs.w	r3, r8, #0
 8013074:	d027      	beq.n	80130c6 <__d2b+0x76>
 8013076:	a802      	add	r0, sp, #8
 8013078:	f840 3d08 	str.w	r3, [r0, #-8]!
 801307c:	f7ff fd89 	bl	8012b92 <__lo0bits>
 8013080:	9900      	ldr	r1, [sp, #0]
 8013082:	b1f0      	cbz	r0, 80130c2 <__d2b+0x72>
 8013084:	9a01      	ldr	r2, [sp, #4]
 8013086:	f1c0 0320 	rsb	r3, r0, #32
 801308a:	fa02 f303 	lsl.w	r3, r2, r3
 801308e:	430b      	orrs	r3, r1
 8013090:	40c2      	lsrs	r2, r0
 8013092:	617b      	str	r3, [r7, #20]
 8013094:	9201      	str	r2, [sp, #4]
 8013096:	9b01      	ldr	r3, [sp, #4]
 8013098:	61bb      	str	r3, [r7, #24]
 801309a:	2b00      	cmp	r3, #0
 801309c:	bf14      	ite	ne
 801309e:	2102      	movne	r1, #2
 80130a0:	2101      	moveq	r1, #1
 80130a2:	6139      	str	r1, [r7, #16]
 80130a4:	b1c4      	cbz	r4, 80130d8 <__d2b+0x88>
 80130a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80130aa:	4404      	add	r4, r0
 80130ac:	6034      	str	r4, [r6, #0]
 80130ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80130b2:	6028      	str	r0, [r5, #0]
 80130b4:	4638      	mov	r0, r7
 80130b6:	b003      	add	sp, #12
 80130b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80130c0:	e7d5      	b.n	801306e <__d2b+0x1e>
 80130c2:	6179      	str	r1, [r7, #20]
 80130c4:	e7e7      	b.n	8013096 <__d2b+0x46>
 80130c6:	a801      	add	r0, sp, #4
 80130c8:	f7ff fd63 	bl	8012b92 <__lo0bits>
 80130cc:	9b01      	ldr	r3, [sp, #4]
 80130ce:	617b      	str	r3, [r7, #20]
 80130d0:	2101      	movs	r1, #1
 80130d2:	6139      	str	r1, [r7, #16]
 80130d4:	3020      	adds	r0, #32
 80130d6:	e7e5      	b.n	80130a4 <__d2b+0x54>
 80130d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80130dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80130e0:	6030      	str	r0, [r6, #0]
 80130e2:	6918      	ldr	r0, [r3, #16]
 80130e4:	f7ff fd36 	bl	8012b54 <__hi0bits>
 80130e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80130ec:	e7e1      	b.n	80130b2 <__d2b+0x62>

080130ee <__ratio>:
 80130ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f2:	4688      	mov	r8, r1
 80130f4:	4669      	mov	r1, sp
 80130f6:	4681      	mov	r9, r0
 80130f8:	f7ff ff5c 	bl	8012fb4 <__b2d>
 80130fc:	a901      	add	r1, sp, #4
 80130fe:	4640      	mov	r0, r8
 8013100:	ec57 6b10 	vmov	r6, r7, d0
 8013104:	f7ff ff56 	bl	8012fb4 <__b2d>
 8013108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801310c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013110:	eba3 0c02 	sub.w	ip, r3, r2
 8013114:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013118:	1a9b      	subs	r3, r3, r2
 801311a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801311e:	ec5b ab10 	vmov	sl, fp, d0
 8013122:	2b00      	cmp	r3, #0
 8013124:	bfce      	itee	gt
 8013126:	463a      	movgt	r2, r7
 8013128:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801312c:	465a      	movle	r2, fp
 801312e:	4659      	mov	r1, fp
 8013130:	463d      	mov	r5, r7
 8013132:	bfd4      	ite	le
 8013134:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013138:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801313c:	4630      	mov	r0, r6
 801313e:	ee10 2a10 	vmov	r2, s0
 8013142:	460b      	mov	r3, r1
 8013144:	4629      	mov	r1, r5
 8013146:	f7ed fb81 	bl	800084c <__aeabi_ddiv>
 801314a:	ec41 0b10 	vmov	d0, r0, r1
 801314e:	b003      	add	sp, #12
 8013150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013154 <__copybits>:
 8013154:	3901      	subs	r1, #1
 8013156:	b510      	push	{r4, lr}
 8013158:	1149      	asrs	r1, r1, #5
 801315a:	6914      	ldr	r4, [r2, #16]
 801315c:	3101      	adds	r1, #1
 801315e:	f102 0314 	add.w	r3, r2, #20
 8013162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801316a:	42a3      	cmp	r3, r4
 801316c:	4602      	mov	r2, r0
 801316e:	d303      	bcc.n	8013178 <__copybits+0x24>
 8013170:	2300      	movs	r3, #0
 8013172:	428a      	cmp	r2, r1
 8013174:	d305      	bcc.n	8013182 <__copybits+0x2e>
 8013176:	bd10      	pop	{r4, pc}
 8013178:	f853 2b04 	ldr.w	r2, [r3], #4
 801317c:	f840 2b04 	str.w	r2, [r0], #4
 8013180:	e7f3      	b.n	801316a <__copybits+0x16>
 8013182:	f842 3b04 	str.w	r3, [r2], #4
 8013186:	e7f4      	b.n	8013172 <__copybits+0x1e>

08013188 <__any_on>:
 8013188:	f100 0214 	add.w	r2, r0, #20
 801318c:	6900      	ldr	r0, [r0, #16]
 801318e:	114b      	asrs	r3, r1, #5
 8013190:	4298      	cmp	r0, r3
 8013192:	b510      	push	{r4, lr}
 8013194:	db11      	blt.n	80131ba <__any_on+0x32>
 8013196:	dd0a      	ble.n	80131ae <__any_on+0x26>
 8013198:	f011 011f 	ands.w	r1, r1, #31
 801319c:	d007      	beq.n	80131ae <__any_on+0x26>
 801319e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80131a2:	fa24 f001 	lsr.w	r0, r4, r1
 80131a6:	fa00 f101 	lsl.w	r1, r0, r1
 80131aa:	428c      	cmp	r4, r1
 80131ac:	d10b      	bne.n	80131c6 <__any_on+0x3e>
 80131ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d803      	bhi.n	80131be <__any_on+0x36>
 80131b6:	2000      	movs	r0, #0
 80131b8:	bd10      	pop	{r4, pc}
 80131ba:	4603      	mov	r3, r0
 80131bc:	e7f7      	b.n	80131ae <__any_on+0x26>
 80131be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80131c2:	2900      	cmp	r1, #0
 80131c4:	d0f5      	beq.n	80131b2 <__any_on+0x2a>
 80131c6:	2001      	movs	r0, #1
 80131c8:	e7f6      	b.n	80131b8 <__any_on+0x30>

080131ca <_calloc_r>:
 80131ca:	b538      	push	{r3, r4, r5, lr}
 80131cc:	fb02 f401 	mul.w	r4, r2, r1
 80131d0:	4621      	mov	r1, r4
 80131d2:	f7fc fcb9 	bl	800fb48 <_malloc_r>
 80131d6:	4605      	mov	r5, r0
 80131d8:	b118      	cbz	r0, 80131e2 <_calloc_r+0x18>
 80131da:	4622      	mov	r2, r4
 80131dc:	2100      	movs	r1, #0
 80131de:	f7fc fc5c 	bl	800fa9a <memset>
 80131e2:	4628      	mov	r0, r5
 80131e4:	bd38      	pop	{r3, r4, r5, pc}

080131e6 <__ssputs_r>:
 80131e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131ea:	688e      	ldr	r6, [r1, #8]
 80131ec:	429e      	cmp	r6, r3
 80131ee:	4682      	mov	sl, r0
 80131f0:	460c      	mov	r4, r1
 80131f2:	4690      	mov	r8, r2
 80131f4:	4699      	mov	r9, r3
 80131f6:	d837      	bhi.n	8013268 <__ssputs_r+0x82>
 80131f8:	898a      	ldrh	r2, [r1, #12]
 80131fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80131fe:	d031      	beq.n	8013264 <__ssputs_r+0x7e>
 8013200:	6825      	ldr	r5, [r4, #0]
 8013202:	6909      	ldr	r1, [r1, #16]
 8013204:	1a6f      	subs	r7, r5, r1
 8013206:	6965      	ldr	r5, [r4, #20]
 8013208:	2302      	movs	r3, #2
 801320a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801320e:	fb95 f5f3 	sdiv	r5, r5, r3
 8013212:	f109 0301 	add.w	r3, r9, #1
 8013216:	443b      	add	r3, r7
 8013218:	429d      	cmp	r5, r3
 801321a:	bf38      	it	cc
 801321c:	461d      	movcc	r5, r3
 801321e:	0553      	lsls	r3, r2, #21
 8013220:	d530      	bpl.n	8013284 <__ssputs_r+0x9e>
 8013222:	4629      	mov	r1, r5
 8013224:	f7fc fc90 	bl	800fb48 <_malloc_r>
 8013228:	4606      	mov	r6, r0
 801322a:	b950      	cbnz	r0, 8013242 <__ssputs_r+0x5c>
 801322c:	230c      	movs	r3, #12
 801322e:	f8ca 3000 	str.w	r3, [sl]
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013238:	81a3      	strh	r3, [r4, #12]
 801323a:	f04f 30ff 	mov.w	r0, #4294967295
 801323e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013242:	463a      	mov	r2, r7
 8013244:	6921      	ldr	r1, [r4, #16]
 8013246:	f7fc fc1d 	bl	800fa84 <memcpy>
 801324a:	89a3      	ldrh	r3, [r4, #12]
 801324c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013254:	81a3      	strh	r3, [r4, #12]
 8013256:	6126      	str	r6, [r4, #16]
 8013258:	6165      	str	r5, [r4, #20]
 801325a:	443e      	add	r6, r7
 801325c:	1bed      	subs	r5, r5, r7
 801325e:	6026      	str	r6, [r4, #0]
 8013260:	60a5      	str	r5, [r4, #8]
 8013262:	464e      	mov	r6, r9
 8013264:	454e      	cmp	r6, r9
 8013266:	d900      	bls.n	801326a <__ssputs_r+0x84>
 8013268:	464e      	mov	r6, r9
 801326a:	4632      	mov	r2, r6
 801326c:	4641      	mov	r1, r8
 801326e:	6820      	ldr	r0, [r4, #0]
 8013270:	f000 f919 	bl	80134a6 <memmove>
 8013274:	68a3      	ldr	r3, [r4, #8]
 8013276:	1b9b      	subs	r3, r3, r6
 8013278:	60a3      	str	r3, [r4, #8]
 801327a:	6823      	ldr	r3, [r4, #0]
 801327c:	441e      	add	r6, r3
 801327e:	6026      	str	r6, [r4, #0]
 8013280:	2000      	movs	r0, #0
 8013282:	e7dc      	b.n	801323e <__ssputs_r+0x58>
 8013284:	462a      	mov	r2, r5
 8013286:	f000 f927 	bl	80134d8 <_realloc_r>
 801328a:	4606      	mov	r6, r0
 801328c:	2800      	cmp	r0, #0
 801328e:	d1e2      	bne.n	8013256 <__ssputs_r+0x70>
 8013290:	6921      	ldr	r1, [r4, #16]
 8013292:	4650      	mov	r0, sl
 8013294:	f7fc fc0a 	bl	800faac <_free_r>
 8013298:	e7c8      	b.n	801322c <__ssputs_r+0x46>
	...

0801329c <_svfiprintf_r>:
 801329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a0:	461d      	mov	r5, r3
 80132a2:	898b      	ldrh	r3, [r1, #12]
 80132a4:	061f      	lsls	r7, r3, #24
 80132a6:	b09d      	sub	sp, #116	; 0x74
 80132a8:	4680      	mov	r8, r0
 80132aa:	460c      	mov	r4, r1
 80132ac:	4616      	mov	r6, r2
 80132ae:	d50f      	bpl.n	80132d0 <_svfiprintf_r+0x34>
 80132b0:	690b      	ldr	r3, [r1, #16]
 80132b2:	b96b      	cbnz	r3, 80132d0 <_svfiprintf_r+0x34>
 80132b4:	2140      	movs	r1, #64	; 0x40
 80132b6:	f7fc fc47 	bl	800fb48 <_malloc_r>
 80132ba:	6020      	str	r0, [r4, #0]
 80132bc:	6120      	str	r0, [r4, #16]
 80132be:	b928      	cbnz	r0, 80132cc <_svfiprintf_r+0x30>
 80132c0:	230c      	movs	r3, #12
 80132c2:	f8c8 3000 	str.w	r3, [r8]
 80132c6:	f04f 30ff 	mov.w	r0, #4294967295
 80132ca:	e0c8      	b.n	801345e <_svfiprintf_r+0x1c2>
 80132cc:	2340      	movs	r3, #64	; 0x40
 80132ce:	6163      	str	r3, [r4, #20]
 80132d0:	2300      	movs	r3, #0
 80132d2:	9309      	str	r3, [sp, #36]	; 0x24
 80132d4:	2320      	movs	r3, #32
 80132d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132da:	2330      	movs	r3, #48	; 0x30
 80132dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80132e0:	9503      	str	r5, [sp, #12]
 80132e2:	f04f 0b01 	mov.w	fp, #1
 80132e6:	4637      	mov	r7, r6
 80132e8:	463d      	mov	r5, r7
 80132ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80132ee:	b10b      	cbz	r3, 80132f4 <_svfiprintf_r+0x58>
 80132f0:	2b25      	cmp	r3, #37	; 0x25
 80132f2:	d13e      	bne.n	8013372 <_svfiprintf_r+0xd6>
 80132f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80132f8:	d00b      	beq.n	8013312 <_svfiprintf_r+0x76>
 80132fa:	4653      	mov	r3, sl
 80132fc:	4632      	mov	r2, r6
 80132fe:	4621      	mov	r1, r4
 8013300:	4640      	mov	r0, r8
 8013302:	f7ff ff70 	bl	80131e6 <__ssputs_r>
 8013306:	3001      	adds	r0, #1
 8013308:	f000 80a4 	beq.w	8013454 <_svfiprintf_r+0x1b8>
 801330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801330e:	4453      	add	r3, sl
 8013310:	9309      	str	r3, [sp, #36]	; 0x24
 8013312:	783b      	ldrb	r3, [r7, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	f000 809d 	beq.w	8013454 <_svfiprintf_r+0x1b8>
 801331a:	2300      	movs	r3, #0
 801331c:	f04f 32ff 	mov.w	r2, #4294967295
 8013320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013324:	9304      	str	r3, [sp, #16]
 8013326:	9307      	str	r3, [sp, #28]
 8013328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801332c:	931a      	str	r3, [sp, #104]	; 0x68
 801332e:	462f      	mov	r7, r5
 8013330:	2205      	movs	r2, #5
 8013332:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013336:	4850      	ldr	r0, [pc, #320]	; (8013478 <_svfiprintf_r+0x1dc>)
 8013338:	f7ec ff52 	bl	80001e0 <memchr>
 801333c:	9b04      	ldr	r3, [sp, #16]
 801333e:	b9d0      	cbnz	r0, 8013376 <_svfiprintf_r+0xda>
 8013340:	06d9      	lsls	r1, r3, #27
 8013342:	bf44      	itt	mi
 8013344:	2220      	movmi	r2, #32
 8013346:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801334a:	071a      	lsls	r2, r3, #28
 801334c:	bf44      	itt	mi
 801334e:	222b      	movmi	r2, #43	; 0x2b
 8013350:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013354:	782a      	ldrb	r2, [r5, #0]
 8013356:	2a2a      	cmp	r2, #42	; 0x2a
 8013358:	d015      	beq.n	8013386 <_svfiprintf_r+0xea>
 801335a:	9a07      	ldr	r2, [sp, #28]
 801335c:	462f      	mov	r7, r5
 801335e:	2000      	movs	r0, #0
 8013360:	250a      	movs	r5, #10
 8013362:	4639      	mov	r1, r7
 8013364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013368:	3b30      	subs	r3, #48	; 0x30
 801336a:	2b09      	cmp	r3, #9
 801336c:	d94d      	bls.n	801340a <_svfiprintf_r+0x16e>
 801336e:	b1b8      	cbz	r0, 80133a0 <_svfiprintf_r+0x104>
 8013370:	e00f      	b.n	8013392 <_svfiprintf_r+0xf6>
 8013372:	462f      	mov	r7, r5
 8013374:	e7b8      	b.n	80132e8 <_svfiprintf_r+0x4c>
 8013376:	4a40      	ldr	r2, [pc, #256]	; (8013478 <_svfiprintf_r+0x1dc>)
 8013378:	1a80      	subs	r0, r0, r2
 801337a:	fa0b f000 	lsl.w	r0, fp, r0
 801337e:	4318      	orrs	r0, r3
 8013380:	9004      	str	r0, [sp, #16]
 8013382:	463d      	mov	r5, r7
 8013384:	e7d3      	b.n	801332e <_svfiprintf_r+0x92>
 8013386:	9a03      	ldr	r2, [sp, #12]
 8013388:	1d11      	adds	r1, r2, #4
 801338a:	6812      	ldr	r2, [r2, #0]
 801338c:	9103      	str	r1, [sp, #12]
 801338e:	2a00      	cmp	r2, #0
 8013390:	db01      	blt.n	8013396 <_svfiprintf_r+0xfa>
 8013392:	9207      	str	r2, [sp, #28]
 8013394:	e004      	b.n	80133a0 <_svfiprintf_r+0x104>
 8013396:	4252      	negs	r2, r2
 8013398:	f043 0302 	orr.w	r3, r3, #2
 801339c:	9207      	str	r2, [sp, #28]
 801339e:	9304      	str	r3, [sp, #16]
 80133a0:	783b      	ldrb	r3, [r7, #0]
 80133a2:	2b2e      	cmp	r3, #46	; 0x2e
 80133a4:	d10c      	bne.n	80133c0 <_svfiprintf_r+0x124>
 80133a6:	787b      	ldrb	r3, [r7, #1]
 80133a8:	2b2a      	cmp	r3, #42	; 0x2a
 80133aa:	d133      	bne.n	8013414 <_svfiprintf_r+0x178>
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	1d1a      	adds	r2, r3, #4
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	9203      	str	r2, [sp, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bfb8      	it	lt
 80133b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80133bc:	3702      	adds	r7, #2
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	4d2e      	ldr	r5, [pc, #184]	; (801347c <_svfiprintf_r+0x1e0>)
 80133c2:	7839      	ldrb	r1, [r7, #0]
 80133c4:	2203      	movs	r2, #3
 80133c6:	4628      	mov	r0, r5
 80133c8:	f7ec ff0a 	bl	80001e0 <memchr>
 80133cc:	b138      	cbz	r0, 80133de <_svfiprintf_r+0x142>
 80133ce:	2340      	movs	r3, #64	; 0x40
 80133d0:	1b40      	subs	r0, r0, r5
 80133d2:	fa03 f000 	lsl.w	r0, r3, r0
 80133d6:	9b04      	ldr	r3, [sp, #16]
 80133d8:	4303      	orrs	r3, r0
 80133da:	3701      	adds	r7, #1
 80133dc:	9304      	str	r3, [sp, #16]
 80133de:	7839      	ldrb	r1, [r7, #0]
 80133e0:	4827      	ldr	r0, [pc, #156]	; (8013480 <_svfiprintf_r+0x1e4>)
 80133e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133e6:	2206      	movs	r2, #6
 80133e8:	1c7e      	adds	r6, r7, #1
 80133ea:	f7ec fef9 	bl	80001e0 <memchr>
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d038      	beq.n	8013464 <_svfiprintf_r+0x1c8>
 80133f2:	4b24      	ldr	r3, [pc, #144]	; (8013484 <_svfiprintf_r+0x1e8>)
 80133f4:	bb13      	cbnz	r3, 801343c <_svfiprintf_r+0x1a0>
 80133f6:	9b03      	ldr	r3, [sp, #12]
 80133f8:	3307      	adds	r3, #7
 80133fa:	f023 0307 	bic.w	r3, r3, #7
 80133fe:	3308      	adds	r3, #8
 8013400:	9303      	str	r3, [sp, #12]
 8013402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013404:	444b      	add	r3, r9
 8013406:	9309      	str	r3, [sp, #36]	; 0x24
 8013408:	e76d      	b.n	80132e6 <_svfiprintf_r+0x4a>
 801340a:	fb05 3202 	mla	r2, r5, r2, r3
 801340e:	2001      	movs	r0, #1
 8013410:	460f      	mov	r7, r1
 8013412:	e7a6      	b.n	8013362 <_svfiprintf_r+0xc6>
 8013414:	2300      	movs	r3, #0
 8013416:	3701      	adds	r7, #1
 8013418:	9305      	str	r3, [sp, #20]
 801341a:	4619      	mov	r1, r3
 801341c:	250a      	movs	r5, #10
 801341e:	4638      	mov	r0, r7
 8013420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013424:	3a30      	subs	r2, #48	; 0x30
 8013426:	2a09      	cmp	r2, #9
 8013428:	d903      	bls.n	8013432 <_svfiprintf_r+0x196>
 801342a:	2b00      	cmp	r3, #0
 801342c:	d0c8      	beq.n	80133c0 <_svfiprintf_r+0x124>
 801342e:	9105      	str	r1, [sp, #20]
 8013430:	e7c6      	b.n	80133c0 <_svfiprintf_r+0x124>
 8013432:	fb05 2101 	mla	r1, r5, r1, r2
 8013436:	2301      	movs	r3, #1
 8013438:	4607      	mov	r7, r0
 801343a:	e7f0      	b.n	801341e <_svfiprintf_r+0x182>
 801343c:	ab03      	add	r3, sp, #12
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	4622      	mov	r2, r4
 8013442:	4b11      	ldr	r3, [pc, #68]	; (8013488 <_svfiprintf_r+0x1ec>)
 8013444:	a904      	add	r1, sp, #16
 8013446:	4640      	mov	r0, r8
 8013448:	f7fc fc6c 	bl	800fd24 <_printf_float>
 801344c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013450:	4681      	mov	r9, r0
 8013452:	d1d6      	bne.n	8013402 <_svfiprintf_r+0x166>
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	065b      	lsls	r3, r3, #25
 8013458:	f53f af35 	bmi.w	80132c6 <_svfiprintf_r+0x2a>
 801345c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801345e:	b01d      	add	sp, #116	; 0x74
 8013460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013464:	ab03      	add	r3, sp, #12
 8013466:	9300      	str	r3, [sp, #0]
 8013468:	4622      	mov	r2, r4
 801346a:	4b07      	ldr	r3, [pc, #28]	; (8013488 <_svfiprintf_r+0x1ec>)
 801346c:	a904      	add	r1, sp, #16
 801346e:	4640      	mov	r0, r8
 8013470:	f7fc ff0e 	bl	8010290 <_printf_i>
 8013474:	e7ea      	b.n	801344c <_svfiprintf_r+0x1b0>
 8013476:	bf00      	nop
 8013478:	080153c4 	.word	0x080153c4
 801347c:	080153ca 	.word	0x080153ca
 8013480:	080153ce 	.word	0x080153ce
 8013484:	0800fd25 	.word	0x0800fd25
 8013488:	080131e7 	.word	0x080131e7

0801348c <__ascii_wctomb>:
 801348c:	b149      	cbz	r1, 80134a2 <__ascii_wctomb+0x16>
 801348e:	2aff      	cmp	r2, #255	; 0xff
 8013490:	bf85      	ittet	hi
 8013492:	238a      	movhi	r3, #138	; 0x8a
 8013494:	6003      	strhi	r3, [r0, #0]
 8013496:	700a      	strbls	r2, [r1, #0]
 8013498:	f04f 30ff 	movhi.w	r0, #4294967295
 801349c:	bf98      	it	ls
 801349e:	2001      	movls	r0, #1
 80134a0:	4770      	bx	lr
 80134a2:	4608      	mov	r0, r1
 80134a4:	4770      	bx	lr

080134a6 <memmove>:
 80134a6:	4288      	cmp	r0, r1
 80134a8:	b510      	push	{r4, lr}
 80134aa:	eb01 0302 	add.w	r3, r1, r2
 80134ae:	d807      	bhi.n	80134c0 <memmove+0x1a>
 80134b0:	1e42      	subs	r2, r0, #1
 80134b2:	4299      	cmp	r1, r3
 80134b4:	d00a      	beq.n	80134cc <memmove+0x26>
 80134b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80134be:	e7f8      	b.n	80134b2 <memmove+0xc>
 80134c0:	4283      	cmp	r3, r0
 80134c2:	d9f5      	bls.n	80134b0 <memmove+0xa>
 80134c4:	1881      	adds	r1, r0, r2
 80134c6:	1ad2      	subs	r2, r2, r3
 80134c8:	42d3      	cmn	r3, r2
 80134ca:	d100      	bne.n	80134ce <memmove+0x28>
 80134cc:	bd10      	pop	{r4, pc}
 80134ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80134d6:	e7f7      	b.n	80134c8 <memmove+0x22>

080134d8 <_realloc_r>:
 80134d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134da:	4607      	mov	r7, r0
 80134dc:	4614      	mov	r4, r2
 80134de:	460e      	mov	r6, r1
 80134e0:	b921      	cbnz	r1, 80134ec <_realloc_r+0x14>
 80134e2:	4611      	mov	r1, r2
 80134e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80134e8:	f7fc bb2e 	b.w	800fb48 <_malloc_r>
 80134ec:	b922      	cbnz	r2, 80134f8 <_realloc_r+0x20>
 80134ee:	f7fc fadd 	bl	800faac <_free_r>
 80134f2:	4625      	mov	r5, r4
 80134f4:	4628      	mov	r0, r5
 80134f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f8:	f000 f814 	bl	8013524 <_malloc_usable_size_r>
 80134fc:	42a0      	cmp	r0, r4
 80134fe:	d20f      	bcs.n	8013520 <_realloc_r+0x48>
 8013500:	4621      	mov	r1, r4
 8013502:	4638      	mov	r0, r7
 8013504:	f7fc fb20 	bl	800fb48 <_malloc_r>
 8013508:	4605      	mov	r5, r0
 801350a:	2800      	cmp	r0, #0
 801350c:	d0f2      	beq.n	80134f4 <_realloc_r+0x1c>
 801350e:	4631      	mov	r1, r6
 8013510:	4622      	mov	r2, r4
 8013512:	f7fc fab7 	bl	800fa84 <memcpy>
 8013516:	4631      	mov	r1, r6
 8013518:	4638      	mov	r0, r7
 801351a:	f7fc fac7 	bl	800faac <_free_r>
 801351e:	e7e9      	b.n	80134f4 <_realloc_r+0x1c>
 8013520:	4635      	mov	r5, r6
 8013522:	e7e7      	b.n	80134f4 <_realloc_r+0x1c>

08013524 <_malloc_usable_size_r>:
 8013524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013528:	1f18      	subs	r0, r3, #4
 801352a:	2b00      	cmp	r3, #0
 801352c:	bfbc      	itt	lt
 801352e:	580b      	ldrlt	r3, [r1, r0]
 8013530:	18c0      	addlt	r0, r0, r3
 8013532:	4770      	bx	lr

08013534 <asin>:
 8013534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013536:	ed2d 8b02 	vpush	{d8}
 801353a:	4e26      	ldr	r6, [pc, #152]	; (80135d4 <asin+0xa0>)
 801353c:	b08b      	sub	sp, #44	; 0x2c
 801353e:	ec55 4b10 	vmov	r4, r5, d0
 8013542:	f000 fa11 	bl	8013968 <__ieee754_asin>
 8013546:	f996 3000 	ldrsb.w	r3, [r6]
 801354a:	eeb0 8a40 	vmov.f32	s16, s0
 801354e:	eef0 8a60 	vmov.f32	s17, s1
 8013552:	3301      	adds	r3, #1
 8013554:	d036      	beq.n	80135c4 <asin+0x90>
 8013556:	4622      	mov	r2, r4
 8013558:	462b      	mov	r3, r5
 801355a:	4620      	mov	r0, r4
 801355c:	4629      	mov	r1, r5
 801355e:	f7ed fae5 	bl	8000b2c <__aeabi_dcmpun>
 8013562:	4607      	mov	r7, r0
 8013564:	bb70      	cbnz	r0, 80135c4 <asin+0x90>
 8013566:	ec45 4b10 	vmov	d0, r4, r5
 801356a:	f001 fc51 	bl	8014e10 <fabs>
 801356e:	2200      	movs	r2, #0
 8013570:	4b19      	ldr	r3, [pc, #100]	; (80135d8 <asin+0xa4>)
 8013572:	ec51 0b10 	vmov	r0, r1, d0
 8013576:	f7ed facf 	bl	8000b18 <__aeabi_dcmpgt>
 801357a:	b318      	cbz	r0, 80135c4 <asin+0x90>
 801357c:	2301      	movs	r3, #1
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	4816      	ldr	r0, [pc, #88]	; (80135dc <asin+0xa8>)
 8013582:	4b17      	ldr	r3, [pc, #92]	; (80135e0 <asin+0xac>)
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	9708      	str	r7, [sp, #32]
 8013588:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801358c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013590:	f001 fc52 	bl	8014e38 <nan>
 8013594:	f996 3000 	ldrsb.w	r3, [r6]
 8013598:	2b02      	cmp	r3, #2
 801359a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801359e:	d104      	bne.n	80135aa <asin+0x76>
 80135a0:	f7fc fa36 	bl	800fa10 <__errno>
 80135a4:	2321      	movs	r3, #33	; 0x21
 80135a6:	6003      	str	r3, [r0, #0]
 80135a8:	e004      	b.n	80135b4 <asin+0x80>
 80135aa:	4668      	mov	r0, sp
 80135ac:	f001 fc41 	bl	8014e32 <matherr>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d0f5      	beq.n	80135a0 <asin+0x6c>
 80135b4:	9b08      	ldr	r3, [sp, #32]
 80135b6:	b11b      	cbz	r3, 80135c0 <asin+0x8c>
 80135b8:	f7fc fa2a 	bl	800fa10 <__errno>
 80135bc:	9b08      	ldr	r3, [sp, #32]
 80135be:	6003      	str	r3, [r0, #0]
 80135c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80135c4:	eeb0 0a48 	vmov.f32	s0, s16
 80135c8:	eef0 0a68 	vmov.f32	s1, s17
 80135cc:	b00b      	add	sp, #44	; 0x2c
 80135ce:	ecbd 8b02 	vpop	{d8}
 80135d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d4:	20000390 	.word	0x20000390
 80135d8:	3ff00000 	.word	0x3ff00000
 80135dc:	080153c9 	.word	0x080153c9
 80135e0:	080154d6 	.word	0x080154d6

080135e4 <atan2>:
 80135e4:	f000 bbd0 	b.w	8013d88 <__ieee754_atan2>

080135e8 <pow>:
 80135e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ec:	ed2d 8b04 	vpush	{d8-d9}
 80135f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80138c4 <pow+0x2dc>
 80135f4:	b08d      	sub	sp, #52	; 0x34
 80135f6:	ec57 6b10 	vmov	r6, r7, d0
 80135fa:	ec55 4b11 	vmov	r4, r5, d1
 80135fe:	f000 fca3 	bl	8013f48 <__ieee754_pow>
 8013602:	f999 3000 	ldrsb.w	r3, [r9]
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	3301      	adds	r3, #1
 801360a:	eeb0 8a40 	vmov.f32	s16, s0
 801360e:	eef0 8a60 	vmov.f32	s17, s1
 8013612:	46c8      	mov	r8, r9
 8013614:	d05f      	beq.n	80136d6 <pow+0xee>
 8013616:	4622      	mov	r2, r4
 8013618:	462b      	mov	r3, r5
 801361a:	4620      	mov	r0, r4
 801361c:	4629      	mov	r1, r5
 801361e:	f7ed fa85 	bl	8000b2c <__aeabi_dcmpun>
 8013622:	4683      	mov	fp, r0
 8013624:	2800      	cmp	r0, #0
 8013626:	d156      	bne.n	80136d6 <pow+0xee>
 8013628:	4632      	mov	r2, r6
 801362a:	463b      	mov	r3, r7
 801362c:	4630      	mov	r0, r6
 801362e:	4639      	mov	r1, r7
 8013630:	f7ed fa7c 	bl	8000b2c <__aeabi_dcmpun>
 8013634:	9001      	str	r0, [sp, #4]
 8013636:	b1e8      	cbz	r0, 8013674 <pow+0x8c>
 8013638:	2200      	movs	r2, #0
 801363a:	2300      	movs	r3, #0
 801363c:	4620      	mov	r0, r4
 801363e:	4629      	mov	r1, r5
 8013640:	f7ed fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8013644:	2800      	cmp	r0, #0
 8013646:	d046      	beq.n	80136d6 <pow+0xee>
 8013648:	2301      	movs	r3, #1
 801364a:	9302      	str	r3, [sp, #8]
 801364c:	4b96      	ldr	r3, [pc, #600]	; (80138a8 <pow+0x2c0>)
 801364e:	9303      	str	r3, [sp, #12]
 8013650:	4b96      	ldr	r3, [pc, #600]	; (80138ac <pow+0x2c4>)
 8013652:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013656:	2200      	movs	r2, #0
 8013658:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801365c:	9b00      	ldr	r3, [sp, #0]
 801365e:	2b02      	cmp	r3, #2
 8013660:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013664:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013668:	d033      	beq.n	80136d2 <pow+0xea>
 801366a:	a802      	add	r0, sp, #8
 801366c:	f001 fbe1 	bl	8014e32 <matherr>
 8013670:	bb48      	cbnz	r0, 80136c6 <pow+0xde>
 8013672:	e05d      	b.n	8013730 <pow+0x148>
 8013674:	f04f 0a00 	mov.w	sl, #0
 8013678:	f04f 0b00 	mov.w	fp, #0
 801367c:	4652      	mov	r2, sl
 801367e:	465b      	mov	r3, fp
 8013680:	4630      	mov	r0, r6
 8013682:	4639      	mov	r1, r7
 8013684:	f7ed fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 8013688:	ec4b ab19 	vmov	d9, sl, fp
 801368c:	2800      	cmp	r0, #0
 801368e:	d054      	beq.n	801373a <pow+0x152>
 8013690:	4652      	mov	r2, sl
 8013692:	465b      	mov	r3, fp
 8013694:	4620      	mov	r0, r4
 8013696:	4629      	mov	r1, r5
 8013698:	f7ed fa16 	bl	8000ac8 <__aeabi_dcmpeq>
 801369c:	4680      	mov	r8, r0
 801369e:	b318      	cbz	r0, 80136e8 <pow+0x100>
 80136a0:	2301      	movs	r3, #1
 80136a2:	9302      	str	r3, [sp, #8]
 80136a4:	4b80      	ldr	r3, [pc, #512]	; (80138a8 <pow+0x2c0>)
 80136a6:	9303      	str	r3, [sp, #12]
 80136a8:	9b01      	ldr	r3, [sp, #4]
 80136aa:	930a      	str	r3, [sp, #40]	; 0x28
 80136ac:	9b00      	ldr	r3, [sp, #0]
 80136ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80136b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80136b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d0d5      	beq.n	801366a <pow+0x82>
 80136be:	4b7b      	ldr	r3, [pc, #492]	; (80138ac <pow+0x2c4>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c8:	b11b      	cbz	r3, 80136d2 <pow+0xea>
 80136ca:	f7fc f9a1 	bl	800fa10 <__errno>
 80136ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d0:	6003      	str	r3, [r0, #0]
 80136d2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80136d6:	eeb0 0a48 	vmov.f32	s0, s16
 80136da:	eef0 0a68 	vmov.f32	s1, s17
 80136de:	b00d      	add	sp, #52	; 0x34
 80136e0:	ecbd 8b04 	vpop	{d8-d9}
 80136e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e8:	ec45 4b10 	vmov	d0, r4, r5
 80136ec:	f001 fb99 	bl	8014e22 <finite>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d0f0      	beq.n	80136d6 <pow+0xee>
 80136f4:	4652      	mov	r2, sl
 80136f6:	465b      	mov	r3, fp
 80136f8:	4620      	mov	r0, r4
 80136fa:	4629      	mov	r1, r5
 80136fc:	f7ed f9ee 	bl	8000adc <__aeabi_dcmplt>
 8013700:	2800      	cmp	r0, #0
 8013702:	d0e8      	beq.n	80136d6 <pow+0xee>
 8013704:	2301      	movs	r3, #1
 8013706:	9302      	str	r3, [sp, #8]
 8013708:	4b67      	ldr	r3, [pc, #412]	; (80138a8 <pow+0x2c0>)
 801370a:	9303      	str	r3, [sp, #12]
 801370c:	f999 3000 	ldrsb.w	r3, [r9]
 8013710:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013714:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013718:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801371c:	b913      	cbnz	r3, 8013724 <pow+0x13c>
 801371e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013722:	e7a2      	b.n	801366a <pow+0x82>
 8013724:	4962      	ldr	r1, [pc, #392]	; (80138b0 <pow+0x2c8>)
 8013726:	2000      	movs	r0, #0
 8013728:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801372c:	2b02      	cmp	r3, #2
 801372e:	d19c      	bne.n	801366a <pow+0x82>
 8013730:	f7fc f96e 	bl	800fa10 <__errno>
 8013734:	2321      	movs	r3, #33	; 0x21
 8013736:	6003      	str	r3, [r0, #0]
 8013738:	e7c5      	b.n	80136c6 <pow+0xde>
 801373a:	eeb0 0a48 	vmov.f32	s0, s16
 801373e:	eef0 0a68 	vmov.f32	s1, s17
 8013742:	f001 fb6e 	bl	8014e22 <finite>
 8013746:	9000      	str	r0, [sp, #0]
 8013748:	2800      	cmp	r0, #0
 801374a:	f040 8081 	bne.w	8013850 <pow+0x268>
 801374e:	ec47 6b10 	vmov	d0, r6, r7
 8013752:	f001 fb66 	bl	8014e22 <finite>
 8013756:	2800      	cmp	r0, #0
 8013758:	d07a      	beq.n	8013850 <pow+0x268>
 801375a:	ec45 4b10 	vmov	d0, r4, r5
 801375e:	f001 fb60 	bl	8014e22 <finite>
 8013762:	2800      	cmp	r0, #0
 8013764:	d074      	beq.n	8013850 <pow+0x268>
 8013766:	ec53 2b18 	vmov	r2, r3, d8
 801376a:	ee18 0a10 	vmov	r0, s16
 801376e:	4619      	mov	r1, r3
 8013770:	f7ed f9dc 	bl	8000b2c <__aeabi_dcmpun>
 8013774:	f999 9000 	ldrsb.w	r9, [r9]
 8013778:	4b4b      	ldr	r3, [pc, #300]	; (80138a8 <pow+0x2c0>)
 801377a:	b1b0      	cbz	r0, 80137aa <pow+0x1c2>
 801377c:	2201      	movs	r2, #1
 801377e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013782:	9b00      	ldr	r3, [sp, #0]
 8013784:	930a      	str	r3, [sp, #40]	; 0x28
 8013786:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801378a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801378e:	f1b9 0f00 	cmp.w	r9, #0
 8013792:	d0c4      	beq.n	801371e <pow+0x136>
 8013794:	4652      	mov	r2, sl
 8013796:	465b      	mov	r3, fp
 8013798:	4650      	mov	r0, sl
 801379a:	4659      	mov	r1, fp
 801379c:	f7ed f856 	bl	800084c <__aeabi_ddiv>
 80137a0:	f1b9 0f02 	cmp.w	r9, #2
 80137a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80137a8:	e7c1      	b.n	801372e <pow+0x146>
 80137aa:	2203      	movs	r2, #3
 80137ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80137b0:	900a      	str	r0, [sp, #40]	; 0x28
 80137b2:	4629      	mov	r1, r5
 80137b4:	4620      	mov	r0, r4
 80137b6:	2200      	movs	r2, #0
 80137b8:	4b3e      	ldr	r3, [pc, #248]	; (80138b4 <pow+0x2cc>)
 80137ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80137be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80137c2:	f7ec ff19 	bl	80005f8 <__aeabi_dmul>
 80137c6:	4604      	mov	r4, r0
 80137c8:	460d      	mov	r5, r1
 80137ca:	f1b9 0f00 	cmp.w	r9, #0
 80137ce:	d124      	bne.n	801381a <pow+0x232>
 80137d0:	4b39      	ldr	r3, [pc, #228]	; (80138b8 <pow+0x2d0>)
 80137d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80137d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80137da:	4630      	mov	r0, r6
 80137dc:	4652      	mov	r2, sl
 80137de:	465b      	mov	r3, fp
 80137e0:	4639      	mov	r1, r7
 80137e2:	f7ed f97b 	bl	8000adc <__aeabi_dcmplt>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	d056      	beq.n	8013898 <pow+0x2b0>
 80137ea:	ec45 4b10 	vmov	d0, r4, r5
 80137ee:	f001 fb2b 	bl	8014e48 <rint>
 80137f2:	4622      	mov	r2, r4
 80137f4:	462b      	mov	r3, r5
 80137f6:	ec51 0b10 	vmov	r0, r1, d0
 80137fa:	f7ed f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80137fe:	b920      	cbnz	r0, 801380a <pow+0x222>
 8013800:	4b2e      	ldr	r3, [pc, #184]	; (80138bc <pow+0x2d4>)
 8013802:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013806:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801380a:	f998 3000 	ldrsb.w	r3, [r8]
 801380e:	2b02      	cmp	r3, #2
 8013810:	d142      	bne.n	8013898 <pow+0x2b0>
 8013812:	f7fc f8fd 	bl	800fa10 <__errno>
 8013816:	2322      	movs	r3, #34	; 0x22
 8013818:	e78d      	b.n	8013736 <pow+0x14e>
 801381a:	4b29      	ldr	r3, [pc, #164]	; (80138c0 <pow+0x2d8>)
 801381c:	2200      	movs	r2, #0
 801381e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013822:	4630      	mov	r0, r6
 8013824:	4652      	mov	r2, sl
 8013826:	465b      	mov	r3, fp
 8013828:	4639      	mov	r1, r7
 801382a:	f7ed f957 	bl	8000adc <__aeabi_dcmplt>
 801382e:	2800      	cmp	r0, #0
 8013830:	d0eb      	beq.n	801380a <pow+0x222>
 8013832:	ec45 4b10 	vmov	d0, r4, r5
 8013836:	f001 fb07 	bl	8014e48 <rint>
 801383a:	4622      	mov	r2, r4
 801383c:	462b      	mov	r3, r5
 801383e:	ec51 0b10 	vmov	r0, r1, d0
 8013842:	f7ed f941 	bl	8000ac8 <__aeabi_dcmpeq>
 8013846:	2800      	cmp	r0, #0
 8013848:	d1df      	bne.n	801380a <pow+0x222>
 801384a:	2200      	movs	r2, #0
 801384c:	4b18      	ldr	r3, [pc, #96]	; (80138b0 <pow+0x2c8>)
 801384e:	e7da      	b.n	8013806 <pow+0x21e>
 8013850:	2200      	movs	r2, #0
 8013852:	2300      	movs	r3, #0
 8013854:	ec51 0b18 	vmov	r0, r1, d8
 8013858:	f7ed f936 	bl	8000ac8 <__aeabi_dcmpeq>
 801385c:	2800      	cmp	r0, #0
 801385e:	f43f af3a 	beq.w	80136d6 <pow+0xee>
 8013862:	ec47 6b10 	vmov	d0, r6, r7
 8013866:	f001 fadc 	bl	8014e22 <finite>
 801386a:	2800      	cmp	r0, #0
 801386c:	f43f af33 	beq.w	80136d6 <pow+0xee>
 8013870:	ec45 4b10 	vmov	d0, r4, r5
 8013874:	f001 fad5 	bl	8014e22 <finite>
 8013878:	2800      	cmp	r0, #0
 801387a:	f43f af2c 	beq.w	80136d6 <pow+0xee>
 801387e:	2304      	movs	r3, #4
 8013880:	9302      	str	r3, [sp, #8]
 8013882:	4b09      	ldr	r3, [pc, #36]	; (80138a8 <pow+0x2c0>)
 8013884:	9303      	str	r3, [sp, #12]
 8013886:	2300      	movs	r3, #0
 8013888:	930a      	str	r3, [sp, #40]	; 0x28
 801388a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801388e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013892:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013896:	e7b8      	b.n	801380a <pow+0x222>
 8013898:	a802      	add	r0, sp, #8
 801389a:	f001 faca 	bl	8014e32 <matherr>
 801389e:	2800      	cmp	r0, #0
 80138a0:	f47f af11 	bne.w	80136c6 <pow+0xde>
 80138a4:	e7b5      	b.n	8013812 <pow+0x22a>
 80138a6:	bf00      	nop
 80138a8:	080154db 	.word	0x080154db
 80138ac:	3ff00000 	.word	0x3ff00000
 80138b0:	fff00000 	.word	0xfff00000
 80138b4:	3fe00000 	.word	0x3fe00000
 80138b8:	47efffff 	.word	0x47efffff
 80138bc:	c7efffff 	.word	0xc7efffff
 80138c0:	7ff00000 	.word	0x7ff00000
 80138c4:	20000390 	.word	0x20000390

080138c8 <sqrtf>:
 80138c8:	b510      	push	{r4, lr}
 80138ca:	ed2d 8b02 	vpush	{d8}
 80138ce:	b08a      	sub	sp, #40	; 0x28
 80138d0:	eeb0 8a40 	vmov.f32	s16, s0
 80138d4:	f001 f8f6 	bl	8014ac4 <__ieee754_sqrtf>
 80138d8:	4b21      	ldr	r3, [pc, #132]	; (8013960 <sqrtf+0x98>)
 80138da:	f993 4000 	ldrsb.w	r4, [r3]
 80138de:	1c63      	adds	r3, r4, #1
 80138e0:	d02c      	beq.n	801393c <sqrtf+0x74>
 80138e2:	eeb4 8a48 	vcmp.f32	s16, s16
 80138e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ea:	d627      	bvs.n	801393c <sqrtf+0x74>
 80138ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80138f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f4:	d522      	bpl.n	801393c <sqrtf+0x74>
 80138f6:	2301      	movs	r3, #1
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	4b1a      	ldr	r3, [pc, #104]	; (8013964 <sqrtf+0x9c>)
 80138fc:	9301      	str	r3, [sp, #4]
 80138fe:	ee18 0a10 	vmov	r0, s16
 8013902:	2300      	movs	r3, #0
 8013904:	9308      	str	r3, [sp, #32]
 8013906:	f7ec fe1f 	bl	8000548 <__aeabi_f2d>
 801390a:	2200      	movs	r2, #0
 801390c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013914:	2300      	movs	r3, #0
 8013916:	b9ac      	cbnz	r4, 8013944 <sqrtf+0x7c>
 8013918:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801391c:	4668      	mov	r0, sp
 801391e:	f001 fa88 	bl	8014e32 <matherr>
 8013922:	b1b8      	cbz	r0, 8013954 <sqrtf+0x8c>
 8013924:	9b08      	ldr	r3, [sp, #32]
 8013926:	b11b      	cbz	r3, 8013930 <sqrtf+0x68>
 8013928:	f7fc f872 	bl	800fa10 <__errno>
 801392c:	9b08      	ldr	r3, [sp, #32]
 801392e:	6003      	str	r3, [r0, #0]
 8013930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013934:	f7ed f958 	bl	8000be8 <__aeabi_d2f>
 8013938:	ee00 0a10 	vmov	s0, r0
 801393c:	b00a      	add	sp, #40	; 0x28
 801393e:	ecbd 8b02 	vpop	{d8}
 8013942:	bd10      	pop	{r4, pc}
 8013944:	4610      	mov	r0, r2
 8013946:	4619      	mov	r1, r3
 8013948:	f7ec ff80 	bl	800084c <__aeabi_ddiv>
 801394c:	2c02      	cmp	r4, #2
 801394e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013952:	d1e3      	bne.n	801391c <sqrtf+0x54>
 8013954:	f7fc f85c 	bl	800fa10 <__errno>
 8013958:	2321      	movs	r3, #33	; 0x21
 801395a:	6003      	str	r3, [r0, #0]
 801395c:	e7e2      	b.n	8013924 <sqrtf+0x5c>
 801395e:	bf00      	nop
 8013960:	20000390 	.word	0x20000390
 8013964:	080154df 	.word	0x080154df

08013968 <__ieee754_asin>:
 8013968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396c:	ec55 4b10 	vmov	r4, r5, d0
 8013970:	4bcb      	ldr	r3, [pc, #812]	; (8013ca0 <__ieee754_asin+0x338>)
 8013972:	b087      	sub	sp, #28
 8013974:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013978:	429f      	cmp	r7, r3
 801397a:	9501      	str	r5, [sp, #4]
 801397c:	dd31      	ble.n	80139e2 <__ieee754_asin+0x7a>
 801397e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8013982:	ee10 3a10 	vmov	r3, s0
 8013986:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801398a:	433b      	orrs	r3, r7
 801398c:	d117      	bne.n	80139be <__ieee754_asin+0x56>
 801398e:	a3aa      	add	r3, pc, #680	; (adr r3, 8013c38 <__ieee754_asin+0x2d0>)
 8013990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013994:	ee10 0a10 	vmov	r0, s0
 8013998:	4629      	mov	r1, r5
 801399a:	f7ec fe2d 	bl	80005f8 <__aeabi_dmul>
 801399e:	a3a8      	add	r3, pc, #672	; (adr r3, 8013c40 <__ieee754_asin+0x2d8>)
 80139a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a4:	4606      	mov	r6, r0
 80139a6:	460f      	mov	r7, r1
 80139a8:	4620      	mov	r0, r4
 80139aa:	4629      	mov	r1, r5
 80139ac:	f7ec fe24 	bl	80005f8 <__aeabi_dmul>
 80139b0:	4602      	mov	r2, r0
 80139b2:	460b      	mov	r3, r1
 80139b4:	4630      	mov	r0, r6
 80139b6:	4639      	mov	r1, r7
 80139b8:	f7ec fc68 	bl	800028c <__adddf3>
 80139bc:	e00a      	b.n	80139d4 <__ieee754_asin+0x6c>
 80139be:	ee10 2a10 	vmov	r2, s0
 80139c2:	462b      	mov	r3, r5
 80139c4:	4620      	mov	r0, r4
 80139c6:	4629      	mov	r1, r5
 80139c8:	f7ec fc5e 	bl	8000288 <__aeabi_dsub>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	f7ec ff3c 	bl	800084c <__aeabi_ddiv>
 80139d4:	4604      	mov	r4, r0
 80139d6:	460d      	mov	r5, r1
 80139d8:	ec45 4b10 	vmov	d0, r4, r5
 80139dc:	b007      	add	sp, #28
 80139de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e2:	4bb0      	ldr	r3, [pc, #704]	; (8013ca4 <__ieee754_asin+0x33c>)
 80139e4:	429f      	cmp	r7, r3
 80139e6:	dc11      	bgt.n	8013a0c <__ieee754_asin+0xa4>
 80139e8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80139ec:	f280 80ae 	bge.w	8013b4c <__ieee754_asin+0x1e4>
 80139f0:	a395      	add	r3, pc, #596	; (adr r3, 8013c48 <__ieee754_asin+0x2e0>)
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	ee10 0a10 	vmov	r0, s0
 80139fa:	4629      	mov	r1, r5
 80139fc:	f7ec fc46 	bl	800028c <__adddf3>
 8013a00:	2200      	movs	r2, #0
 8013a02:	4ba9      	ldr	r3, [pc, #676]	; (8013ca8 <__ieee754_asin+0x340>)
 8013a04:	f7ed f888 	bl	8000b18 <__aeabi_dcmpgt>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d1e5      	bne.n	80139d8 <__ieee754_asin+0x70>
 8013a0c:	ec45 4b10 	vmov	d0, r4, r5
 8013a10:	f001 f9fe 	bl	8014e10 <fabs>
 8013a14:	2000      	movs	r0, #0
 8013a16:	ec53 2b10 	vmov	r2, r3, d0
 8013a1a:	49a3      	ldr	r1, [pc, #652]	; (8013ca8 <__ieee754_asin+0x340>)
 8013a1c:	f7ec fc34 	bl	8000288 <__aeabi_dsub>
 8013a20:	2200      	movs	r2, #0
 8013a22:	4ba2      	ldr	r3, [pc, #648]	; (8013cac <__ieee754_asin+0x344>)
 8013a24:	f7ec fde8 	bl	80005f8 <__aeabi_dmul>
 8013a28:	a389      	add	r3, pc, #548	; (adr r3, 8013c50 <__ieee754_asin+0x2e8>)
 8013a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2e:	4604      	mov	r4, r0
 8013a30:	460d      	mov	r5, r1
 8013a32:	f7ec fde1 	bl	80005f8 <__aeabi_dmul>
 8013a36:	a388      	add	r3, pc, #544	; (adr r3, 8013c58 <__ieee754_asin+0x2f0>)
 8013a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3c:	f7ec fc26 	bl	800028c <__adddf3>
 8013a40:	4622      	mov	r2, r4
 8013a42:	462b      	mov	r3, r5
 8013a44:	f7ec fdd8 	bl	80005f8 <__aeabi_dmul>
 8013a48:	a385      	add	r3, pc, #532	; (adr r3, 8013c60 <__ieee754_asin+0x2f8>)
 8013a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4e:	f7ec fc1b 	bl	8000288 <__aeabi_dsub>
 8013a52:	4622      	mov	r2, r4
 8013a54:	462b      	mov	r3, r5
 8013a56:	f7ec fdcf 	bl	80005f8 <__aeabi_dmul>
 8013a5a:	a383      	add	r3, pc, #524	; (adr r3, 8013c68 <__ieee754_asin+0x300>)
 8013a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a60:	f7ec fc14 	bl	800028c <__adddf3>
 8013a64:	4622      	mov	r2, r4
 8013a66:	462b      	mov	r3, r5
 8013a68:	f7ec fdc6 	bl	80005f8 <__aeabi_dmul>
 8013a6c:	a380      	add	r3, pc, #512	; (adr r3, 8013c70 <__ieee754_asin+0x308>)
 8013a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a72:	f7ec fc09 	bl	8000288 <__aeabi_dsub>
 8013a76:	4622      	mov	r2, r4
 8013a78:	462b      	mov	r3, r5
 8013a7a:	f7ec fdbd 	bl	80005f8 <__aeabi_dmul>
 8013a7e:	a37e      	add	r3, pc, #504	; (adr r3, 8013c78 <__ieee754_asin+0x310>)
 8013a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a84:	f7ec fc02 	bl	800028c <__adddf3>
 8013a88:	4622      	mov	r2, r4
 8013a8a:	462b      	mov	r3, r5
 8013a8c:	f7ec fdb4 	bl	80005f8 <__aeabi_dmul>
 8013a90:	a37b      	add	r3, pc, #492	; (adr r3, 8013c80 <__ieee754_asin+0x318>)
 8013a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a96:	4680      	mov	r8, r0
 8013a98:	4689      	mov	r9, r1
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	4629      	mov	r1, r5
 8013a9e:	f7ec fdab 	bl	80005f8 <__aeabi_dmul>
 8013aa2:	a379      	add	r3, pc, #484	; (adr r3, 8013c88 <__ieee754_asin+0x320>)
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	f7ec fbee 	bl	8000288 <__aeabi_dsub>
 8013aac:	4622      	mov	r2, r4
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f7ec fda2 	bl	80005f8 <__aeabi_dmul>
 8013ab4:	a376      	add	r3, pc, #472	; (adr r3, 8013c90 <__ieee754_asin+0x328>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	f7ec fbe7 	bl	800028c <__adddf3>
 8013abe:	4622      	mov	r2, r4
 8013ac0:	462b      	mov	r3, r5
 8013ac2:	f7ec fd99 	bl	80005f8 <__aeabi_dmul>
 8013ac6:	a374      	add	r3, pc, #464	; (adr r3, 8013c98 <__ieee754_asin+0x330>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ec fbdc 	bl	8000288 <__aeabi_dsub>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f7ec fd90 	bl	80005f8 <__aeabi_dmul>
 8013ad8:	4b73      	ldr	r3, [pc, #460]	; (8013ca8 <__ieee754_asin+0x340>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	f7ec fbd6 	bl	800028c <__adddf3>
 8013ae0:	ec45 4b10 	vmov	d0, r4, r5
 8013ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ae8:	f000 ff3c 	bl	8014964 <__ieee754_sqrt>
 8013aec:	4b70      	ldr	r3, [pc, #448]	; (8013cb0 <__ieee754_asin+0x348>)
 8013aee:	429f      	cmp	r7, r3
 8013af0:	ec5b ab10 	vmov	sl, fp, d0
 8013af4:	f340 80de 	ble.w	8013cb4 <__ieee754_asin+0x34c>
 8013af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013afc:	4640      	mov	r0, r8
 8013afe:	4649      	mov	r1, r9
 8013b00:	f7ec fea4 	bl	800084c <__aeabi_ddiv>
 8013b04:	4652      	mov	r2, sl
 8013b06:	465b      	mov	r3, fp
 8013b08:	f7ec fd76 	bl	80005f8 <__aeabi_dmul>
 8013b0c:	4652      	mov	r2, sl
 8013b0e:	465b      	mov	r3, fp
 8013b10:	f7ec fbbc 	bl	800028c <__adddf3>
 8013b14:	4602      	mov	r2, r0
 8013b16:	460b      	mov	r3, r1
 8013b18:	f7ec fbb8 	bl	800028c <__adddf3>
 8013b1c:	a348      	add	r3, pc, #288	; (adr r3, 8013c40 <__ieee754_asin+0x2d8>)
 8013b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b22:	f7ec fbb1 	bl	8000288 <__aeabi_dsub>
 8013b26:	4602      	mov	r2, r0
 8013b28:	460b      	mov	r3, r1
 8013b2a:	a143      	add	r1, pc, #268	; (adr r1, 8013c38 <__ieee754_asin+0x2d0>)
 8013b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b30:	f7ec fbaa 	bl	8000288 <__aeabi_dsub>
 8013b34:	9b01      	ldr	r3, [sp, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	bfdc      	itt	le
 8013b3a:	4602      	movle	r2, r0
 8013b3c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8013b40:	4604      	mov	r4, r0
 8013b42:	460d      	mov	r5, r1
 8013b44:	bfdc      	itt	le
 8013b46:	4614      	movle	r4, r2
 8013b48:	461d      	movle	r5, r3
 8013b4a:	e745      	b.n	80139d8 <__ieee754_asin+0x70>
 8013b4c:	ee10 2a10 	vmov	r2, s0
 8013b50:	ee10 0a10 	vmov	r0, s0
 8013b54:	462b      	mov	r3, r5
 8013b56:	4629      	mov	r1, r5
 8013b58:	f7ec fd4e 	bl	80005f8 <__aeabi_dmul>
 8013b5c:	a33c      	add	r3, pc, #240	; (adr r3, 8013c50 <__ieee754_asin+0x2e8>)
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	4606      	mov	r6, r0
 8013b64:	460f      	mov	r7, r1
 8013b66:	f7ec fd47 	bl	80005f8 <__aeabi_dmul>
 8013b6a:	a33b      	add	r3, pc, #236	; (adr r3, 8013c58 <__ieee754_asin+0x2f0>)
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	f7ec fb8c 	bl	800028c <__adddf3>
 8013b74:	4632      	mov	r2, r6
 8013b76:	463b      	mov	r3, r7
 8013b78:	f7ec fd3e 	bl	80005f8 <__aeabi_dmul>
 8013b7c:	a338      	add	r3, pc, #224	; (adr r3, 8013c60 <__ieee754_asin+0x2f8>)
 8013b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b82:	f7ec fb81 	bl	8000288 <__aeabi_dsub>
 8013b86:	4632      	mov	r2, r6
 8013b88:	463b      	mov	r3, r7
 8013b8a:	f7ec fd35 	bl	80005f8 <__aeabi_dmul>
 8013b8e:	a336      	add	r3, pc, #216	; (adr r3, 8013c68 <__ieee754_asin+0x300>)
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	f7ec fb7a 	bl	800028c <__adddf3>
 8013b98:	4632      	mov	r2, r6
 8013b9a:	463b      	mov	r3, r7
 8013b9c:	f7ec fd2c 	bl	80005f8 <__aeabi_dmul>
 8013ba0:	a333      	add	r3, pc, #204	; (adr r3, 8013c70 <__ieee754_asin+0x308>)
 8013ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba6:	f7ec fb6f 	bl	8000288 <__aeabi_dsub>
 8013baa:	4632      	mov	r2, r6
 8013bac:	463b      	mov	r3, r7
 8013bae:	f7ec fd23 	bl	80005f8 <__aeabi_dmul>
 8013bb2:	a331      	add	r3, pc, #196	; (adr r3, 8013c78 <__ieee754_asin+0x310>)
 8013bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb8:	f7ec fb68 	bl	800028c <__adddf3>
 8013bbc:	4632      	mov	r2, r6
 8013bbe:	463b      	mov	r3, r7
 8013bc0:	f7ec fd1a 	bl	80005f8 <__aeabi_dmul>
 8013bc4:	a32e      	add	r3, pc, #184	; (adr r3, 8013c80 <__ieee754_asin+0x318>)
 8013bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bca:	4680      	mov	r8, r0
 8013bcc:	4689      	mov	r9, r1
 8013bce:	4630      	mov	r0, r6
 8013bd0:	4639      	mov	r1, r7
 8013bd2:	f7ec fd11 	bl	80005f8 <__aeabi_dmul>
 8013bd6:	a32c      	add	r3, pc, #176	; (adr r3, 8013c88 <__ieee754_asin+0x320>)
 8013bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bdc:	f7ec fb54 	bl	8000288 <__aeabi_dsub>
 8013be0:	4632      	mov	r2, r6
 8013be2:	463b      	mov	r3, r7
 8013be4:	f7ec fd08 	bl	80005f8 <__aeabi_dmul>
 8013be8:	a329      	add	r3, pc, #164	; (adr r3, 8013c90 <__ieee754_asin+0x328>)
 8013bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bee:	f7ec fb4d 	bl	800028c <__adddf3>
 8013bf2:	4632      	mov	r2, r6
 8013bf4:	463b      	mov	r3, r7
 8013bf6:	f7ec fcff 	bl	80005f8 <__aeabi_dmul>
 8013bfa:	a327      	add	r3, pc, #156	; (adr r3, 8013c98 <__ieee754_asin+0x330>)
 8013bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c00:	f7ec fb42 	bl	8000288 <__aeabi_dsub>
 8013c04:	4632      	mov	r2, r6
 8013c06:	463b      	mov	r3, r7
 8013c08:	f7ec fcf6 	bl	80005f8 <__aeabi_dmul>
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	4b26      	ldr	r3, [pc, #152]	; (8013ca8 <__ieee754_asin+0x340>)
 8013c10:	f7ec fb3c 	bl	800028c <__adddf3>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	4640      	mov	r0, r8
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	f7ec fe16 	bl	800084c <__aeabi_ddiv>
 8013c20:	4622      	mov	r2, r4
 8013c22:	462b      	mov	r3, r5
 8013c24:	f7ec fce8 	bl	80005f8 <__aeabi_dmul>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	460b      	mov	r3, r1
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	4629      	mov	r1, r5
 8013c30:	e6c2      	b.n	80139b8 <__ieee754_asin+0x50>
 8013c32:	bf00      	nop
 8013c34:	f3af 8000 	nop.w
 8013c38:	54442d18 	.word	0x54442d18
 8013c3c:	3ff921fb 	.word	0x3ff921fb
 8013c40:	33145c07 	.word	0x33145c07
 8013c44:	3c91a626 	.word	0x3c91a626
 8013c48:	8800759c 	.word	0x8800759c
 8013c4c:	7e37e43c 	.word	0x7e37e43c
 8013c50:	0dfdf709 	.word	0x0dfdf709
 8013c54:	3f023de1 	.word	0x3f023de1
 8013c58:	7501b288 	.word	0x7501b288
 8013c5c:	3f49efe0 	.word	0x3f49efe0
 8013c60:	b5688f3b 	.word	0xb5688f3b
 8013c64:	3fa48228 	.word	0x3fa48228
 8013c68:	0e884455 	.word	0x0e884455
 8013c6c:	3fc9c155 	.word	0x3fc9c155
 8013c70:	03eb6f7d 	.word	0x03eb6f7d
 8013c74:	3fd4d612 	.word	0x3fd4d612
 8013c78:	55555555 	.word	0x55555555
 8013c7c:	3fc55555 	.word	0x3fc55555
 8013c80:	b12e9282 	.word	0xb12e9282
 8013c84:	3fb3b8c5 	.word	0x3fb3b8c5
 8013c88:	1b8d0159 	.word	0x1b8d0159
 8013c8c:	3fe6066c 	.word	0x3fe6066c
 8013c90:	9c598ac8 	.word	0x9c598ac8
 8013c94:	40002ae5 	.word	0x40002ae5
 8013c98:	1c8a2d4b 	.word	0x1c8a2d4b
 8013c9c:	40033a27 	.word	0x40033a27
 8013ca0:	3fefffff 	.word	0x3fefffff
 8013ca4:	3fdfffff 	.word	0x3fdfffff
 8013ca8:	3ff00000 	.word	0x3ff00000
 8013cac:	3fe00000 	.word	0x3fe00000
 8013cb0:	3fef3332 	.word	0x3fef3332
 8013cb4:	ee10 2a10 	vmov	r2, s0
 8013cb8:	ee10 0a10 	vmov	r0, s0
 8013cbc:	465b      	mov	r3, fp
 8013cbe:	4659      	mov	r1, fp
 8013cc0:	f7ec fae4 	bl	800028c <__adddf3>
 8013cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ccc:	4640      	mov	r0, r8
 8013cce:	4649      	mov	r1, r9
 8013cd0:	f7ec fdbc 	bl	800084c <__aeabi_ddiv>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	460b      	mov	r3, r1
 8013cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013cdc:	f7ec fc8c 	bl	80005f8 <__aeabi_dmul>
 8013ce0:	2600      	movs	r6, #0
 8013ce2:	4680      	mov	r8, r0
 8013ce4:	4689      	mov	r9, r1
 8013ce6:	4632      	mov	r2, r6
 8013ce8:	465b      	mov	r3, fp
 8013cea:	4630      	mov	r0, r6
 8013cec:	4659      	mov	r1, fp
 8013cee:	f7ec fc83 	bl	80005f8 <__aeabi_dmul>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	460b      	mov	r3, r1
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	4629      	mov	r1, r5
 8013cfa:	f7ec fac5 	bl	8000288 <__aeabi_dsub>
 8013cfe:	4632      	mov	r2, r6
 8013d00:	4604      	mov	r4, r0
 8013d02:	460d      	mov	r5, r1
 8013d04:	465b      	mov	r3, fp
 8013d06:	4650      	mov	r0, sl
 8013d08:	4659      	mov	r1, fp
 8013d0a:	f7ec fabf 	bl	800028c <__adddf3>
 8013d0e:	4602      	mov	r2, r0
 8013d10:	460b      	mov	r3, r1
 8013d12:	4620      	mov	r0, r4
 8013d14:	4629      	mov	r1, r5
 8013d16:	f7ec fd99 	bl	800084c <__aeabi_ddiv>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	f7ec fab5 	bl	800028c <__adddf3>
 8013d22:	4602      	mov	r2, r0
 8013d24:	460b      	mov	r3, r1
 8013d26:	a114      	add	r1, pc, #80	; (adr r1, 8013d78 <__ieee754_asin+0x410>)
 8013d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d2c:	f7ec faac 	bl	8000288 <__aeabi_dsub>
 8013d30:	4602      	mov	r2, r0
 8013d32:	460b      	mov	r3, r1
 8013d34:	4640      	mov	r0, r8
 8013d36:	4649      	mov	r1, r9
 8013d38:	f7ec faa6 	bl	8000288 <__aeabi_dsub>
 8013d3c:	465f      	mov	r7, fp
 8013d3e:	4604      	mov	r4, r0
 8013d40:	460d      	mov	r5, r1
 8013d42:	4632      	mov	r2, r6
 8013d44:	465b      	mov	r3, fp
 8013d46:	4630      	mov	r0, r6
 8013d48:	4639      	mov	r1, r7
 8013d4a:	f7ec fa9f 	bl	800028c <__adddf3>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	a10b      	add	r1, pc, #44	; (adr r1, 8013d80 <__ieee754_asin+0x418>)
 8013d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d58:	f7ec fa96 	bl	8000288 <__aeabi_dsub>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	4620      	mov	r0, r4
 8013d62:	4629      	mov	r1, r5
 8013d64:	f7ec fa90 	bl	8000288 <__aeabi_dsub>
 8013d68:	4602      	mov	r2, r0
 8013d6a:	460b      	mov	r3, r1
 8013d6c:	a104      	add	r1, pc, #16	; (adr r1, 8013d80 <__ieee754_asin+0x418>)
 8013d6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d72:	e6dd      	b.n	8013b30 <__ieee754_asin+0x1c8>
 8013d74:	f3af 8000 	nop.w
 8013d78:	33145c07 	.word	0x33145c07
 8013d7c:	3c91a626 	.word	0x3c91a626
 8013d80:	54442d18 	.word	0x54442d18
 8013d84:	3fe921fb 	.word	0x3fe921fb

08013d88 <__ieee754_atan2>:
 8013d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d8c:	ec57 6b11 	vmov	r6, r7, d1
 8013d90:	4273      	negs	r3, r6
 8013d92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8013d96:	4333      	orrs	r3, r6
 8013d98:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8013f40 <__ieee754_atan2+0x1b8>
 8013d9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013da0:	4573      	cmp	r3, lr
 8013da2:	ec51 0b10 	vmov	r0, r1, d0
 8013da6:	ee11 8a10 	vmov	r8, s2
 8013daa:	d80a      	bhi.n	8013dc2 <__ieee754_atan2+0x3a>
 8013dac:	4244      	negs	r4, r0
 8013dae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013db2:	4304      	orrs	r4, r0
 8013db4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013db8:	4574      	cmp	r4, lr
 8013dba:	468c      	mov	ip, r1
 8013dbc:	ee10 9a10 	vmov	r9, s0
 8013dc0:	d907      	bls.n	8013dd2 <__ieee754_atan2+0x4a>
 8013dc2:	4632      	mov	r2, r6
 8013dc4:	463b      	mov	r3, r7
 8013dc6:	f7ec fa61 	bl	800028c <__adddf3>
 8013dca:	ec41 0b10 	vmov	d0, r0, r1
 8013dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013dd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013dda:	4334      	orrs	r4, r6
 8013ddc:	d103      	bne.n	8013de6 <__ieee754_atan2+0x5e>
 8013dde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013de2:	f000 be75 	b.w	8014ad0 <atan>
 8013de6:	17bc      	asrs	r4, r7, #30
 8013de8:	f004 0402 	and.w	r4, r4, #2
 8013dec:	ea53 0909 	orrs.w	r9, r3, r9
 8013df0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013df4:	d107      	bne.n	8013e06 <__ieee754_atan2+0x7e>
 8013df6:	2c02      	cmp	r4, #2
 8013df8:	d073      	beq.n	8013ee2 <__ieee754_atan2+0x15a>
 8013dfa:	2c03      	cmp	r4, #3
 8013dfc:	d1e5      	bne.n	8013dca <__ieee754_atan2+0x42>
 8013dfe:	a13e      	add	r1, pc, #248	; (adr r1, 8013ef8 <__ieee754_atan2+0x170>)
 8013e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e04:	e7e1      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e06:	ea52 0808 	orrs.w	r8, r2, r8
 8013e0a:	d106      	bne.n	8013e1a <__ieee754_atan2+0x92>
 8013e0c:	f1bc 0f00 	cmp.w	ip, #0
 8013e10:	da6b      	bge.n	8013eea <__ieee754_atan2+0x162>
 8013e12:	a13b      	add	r1, pc, #236	; (adr r1, 8013f00 <__ieee754_atan2+0x178>)
 8013e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e18:	e7d7      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e1a:	4572      	cmp	r2, lr
 8013e1c:	d120      	bne.n	8013e60 <__ieee754_atan2+0xd8>
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d111      	bne.n	8013e46 <__ieee754_atan2+0xbe>
 8013e22:	2c02      	cmp	r4, #2
 8013e24:	d007      	beq.n	8013e36 <__ieee754_atan2+0xae>
 8013e26:	2c03      	cmp	r4, #3
 8013e28:	d009      	beq.n	8013e3e <__ieee754_atan2+0xb6>
 8013e2a:	2c01      	cmp	r4, #1
 8013e2c:	d155      	bne.n	8013eda <__ieee754_atan2+0x152>
 8013e2e:	a136      	add	r1, pc, #216	; (adr r1, 8013f08 <__ieee754_atan2+0x180>)
 8013e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e34:	e7c9      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e36:	a136      	add	r1, pc, #216	; (adr r1, 8013f10 <__ieee754_atan2+0x188>)
 8013e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e3c:	e7c5      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e3e:	a136      	add	r1, pc, #216	; (adr r1, 8013f18 <__ieee754_atan2+0x190>)
 8013e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e44:	e7c1      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e46:	2c02      	cmp	r4, #2
 8013e48:	d04b      	beq.n	8013ee2 <__ieee754_atan2+0x15a>
 8013e4a:	2c03      	cmp	r4, #3
 8013e4c:	d0d7      	beq.n	8013dfe <__ieee754_atan2+0x76>
 8013e4e:	2c01      	cmp	r4, #1
 8013e50:	f04f 0000 	mov.w	r0, #0
 8013e54:	d102      	bne.n	8013e5c <__ieee754_atan2+0xd4>
 8013e56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013e5a:	e7b6      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e5c:	2100      	movs	r1, #0
 8013e5e:	e7b4      	b.n	8013dca <__ieee754_atan2+0x42>
 8013e60:	4573      	cmp	r3, lr
 8013e62:	d0d3      	beq.n	8013e0c <__ieee754_atan2+0x84>
 8013e64:	1a9b      	subs	r3, r3, r2
 8013e66:	151b      	asrs	r3, r3, #20
 8013e68:	2b3c      	cmp	r3, #60	; 0x3c
 8013e6a:	dc1e      	bgt.n	8013eaa <__ieee754_atan2+0x122>
 8013e6c:	2f00      	cmp	r7, #0
 8013e6e:	da01      	bge.n	8013e74 <__ieee754_atan2+0xec>
 8013e70:	333c      	adds	r3, #60	; 0x3c
 8013e72:	db1e      	blt.n	8013eb2 <__ieee754_atan2+0x12a>
 8013e74:	4632      	mov	r2, r6
 8013e76:	463b      	mov	r3, r7
 8013e78:	f7ec fce8 	bl	800084c <__aeabi_ddiv>
 8013e7c:	ec41 0b10 	vmov	d0, r0, r1
 8013e80:	f000 ffc6 	bl	8014e10 <fabs>
 8013e84:	f000 fe24 	bl	8014ad0 <atan>
 8013e88:	ec51 0b10 	vmov	r0, r1, d0
 8013e8c:	2c01      	cmp	r4, #1
 8013e8e:	d013      	beq.n	8013eb8 <__ieee754_atan2+0x130>
 8013e90:	2c02      	cmp	r4, #2
 8013e92:	d015      	beq.n	8013ec0 <__ieee754_atan2+0x138>
 8013e94:	2c00      	cmp	r4, #0
 8013e96:	d098      	beq.n	8013dca <__ieee754_atan2+0x42>
 8013e98:	a321      	add	r3, pc, #132	; (adr r3, 8013f20 <__ieee754_atan2+0x198>)
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	f7ec f9f3 	bl	8000288 <__aeabi_dsub>
 8013ea2:	a321      	add	r3, pc, #132	; (adr r3, 8013f28 <__ieee754_atan2+0x1a0>)
 8013ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea8:	e014      	b.n	8013ed4 <__ieee754_atan2+0x14c>
 8013eaa:	a121      	add	r1, pc, #132	; (adr r1, 8013f30 <__ieee754_atan2+0x1a8>)
 8013eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013eb0:	e7ec      	b.n	8013e8c <__ieee754_atan2+0x104>
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	e7e9      	b.n	8013e8c <__ieee754_atan2+0x104>
 8013eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	e784      	b.n	8013dca <__ieee754_atan2+0x42>
 8013ec0:	a317      	add	r3, pc, #92	; (adr r3, 8013f20 <__ieee754_atan2+0x198>)
 8013ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec6:	f7ec f9df 	bl	8000288 <__aeabi_dsub>
 8013eca:	4602      	mov	r2, r0
 8013ecc:	460b      	mov	r3, r1
 8013ece:	a116      	add	r1, pc, #88	; (adr r1, 8013f28 <__ieee754_atan2+0x1a0>)
 8013ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ed4:	f7ec f9d8 	bl	8000288 <__aeabi_dsub>
 8013ed8:	e777      	b.n	8013dca <__ieee754_atan2+0x42>
 8013eda:	a117      	add	r1, pc, #92	; (adr r1, 8013f38 <__ieee754_atan2+0x1b0>)
 8013edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ee0:	e773      	b.n	8013dca <__ieee754_atan2+0x42>
 8013ee2:	a111      	add	r1, pc, #68	; (adr r1, 8013f28 <__ieee754_atan2+0x1a0>)
 8013ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ee8:	e76f      	b.n	8013dca <__ieee754_atan2+0x42>
 8013eea:	a111      	add	r1, pc, #68	; (adr r1, 8013f30 <__ieee754_atan2+0x1a8>)
 8013eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ef0:	e76b      	b.n	8013dca <__ieee754_atan2+0x42>
 8013ef2:	bf00      	nop
 8013ef4:	f3af 8000 	nop.w
 8013ef8:	54442d18 	.word	0x54442d18
 8013efc:	c00921fb 	.word	0xc00921fb
 8013f00:	54442d18 	.word	0x54442d18
 8013f04:	bff921fb 	.word	0xbff921fb
 8013f08:	54442d18 	.word	0x54442d18
 8013f0c:	bfe921fb 	.word	0xbfe921fb
 8013f10:	7f3321d2 	.word	0x7f3321d2
 8013f14:	4002d97c 	.word	0x4002d97c
 8013f18:	7f3321d2 	.word	0x7f3321d2
 8013f1c:	c002d97c 	.word	0xc002d97c
 8013f20:	33145c07 	.word	0x33145c07
 8013f24:	3ca1a626 	.word	0x3ca1a626
 8013f28:	54442d18 	.word	0x54442d18
 8013f2c:	400921fb 	.word	0x400921fb
 8013f30:	54442d18 	.word	0x54442d18
 8013f34:	3ff921fb 	.word	0x3ff921fb
 8013f38:	54442d18 	.word	0x54442d18
 8013f3c:	3fe921fb 	.word	0x3fe921fb
 8013f40:	7ff00000 	.word	0x7ff00000
 8013f44:	00000000 	.word	0x00000000

08013f48 <__ieee754_pow>:
 8013f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f4c:	b091      	sub	sp, #68	; 0x44
 8013f4e:	ed8d 1b00 	vstr	d1, [sp]
 8013f52:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013f56:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013f5a:	ea58 0302 	orrs.w	r3, r8, r2
 8013f5e:	ec57 6b10 	vmov	r6, r7, d0
 8013f62:	f000 84be 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013f66:	4b7a      	ldr	r3, [pc, #488]	; (8014150 <__ieee754_pow+0x208>)
 8013f68:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013f6c:	429c      	cmp	r4, r3
 8013f6e:	463d      	mov	r5, r7
 8013f70:	ee10 aa10 	vmov	sl, s0
 8013f74:	dc09      	bgt.n	8013f8a <__ieee754_pow+0x42>
 8013f76:	d103      	bne.n	8013f80 <__ieee754_pow+0x38>
 8013f78:	b93e      	cbnz	r6, 8013f8a <__ieee754_pow+0x42>
 8013f7a:	45a0      	cmp	r8, r4
 8013f7c:	dc0d      	bgt.n	8013f9a <__ieee754_pow+0x52>
 8013f7e:	e001      	b.n	8013f84 <__ieee754_pow+0x3c>
 8013f80:	4598      	cmp	r8, r3
 8013f82:	dc02      	bgt.n	8013f8a <__ieee754_pow+0x42>
 8013f84:	4598      	cmp	r8, r3
 8013f86:	d10e      	bne.n	8013fa6 <__ieee754_pow+0x5e>
 8013f88:	b16a      	cbz	r2, 8013fa6 <__ieee754_pow+0x5e>
 8013f8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013f8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f92:	ea54 030a 	orrs.w	r3, r4, sl
 8013f96:	f000 84a4 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013f9a:	486e      	ldr	r0, [pc, #440]	; (8014154 <__ieee754_pow+0x20c>)
 8013f9c:	b011      	add	sp, #68	; 0x44
 8013f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa2:	f000 bf49 	b.w	8014e38 <nan>
 8013fa6:	2d00      	cmp	r5, #0
 8013fa8:	da53      	bge.n	8014052 <__ieee754_pow+0x10a>
 8013faa:	4b6b      	ldr	r3, [pc, #428]	; (8014158 <__ieee754_pow+0x210>)
 8013fac:	4598      	cmp	r8, r3
 8013fae:	dc4d      	bgt.n	801404c <__ieee754_pow+0x104>
 8013fb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013fb4:	4598      	cmp	r8, r3
 8013fb6:	dd4c      	ble.n	8014052 <__ieee754_pow+0x10a>
 8013fb8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013fbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013fc0:	2b14      	cmp	r3, #20
 8013fc2:	dd26      	ble.n	8014012 <__ieee754_pow+0xca>
 8013fc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013fc8:	fa22 f103 	lsr.w	r1, r2, r3
 8013fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd0:	4293      	cmp	r3, r2
 8013fd2:	d13e      	bne.n	8014052 <__ieee754_pow+0x10a>
 8013fd4:	f001 0101 	and.w	r1, r1, #1
 8013fd8:	f1c1 0b02 	rsb	fp, r1, #2
 8013fdc:	2a00      	cmp	r2, #0
 8013fde:	d15b      	bne.n	8014098 <__ieee754_pow+0x150>
 8013fe0:	4b5b      	ldr	r3, [pc, #364]	; (8014150 <__ieee754_pow+0x208>)
 8013fe2:	4598      	cmp	r8, r3
 8013fe4:	d124      	bne.n	8014030 <__ieee754_pow+0xe8>
 8013fe6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013fea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013fee:	ea53 030a 	orrs.w	r3, r3, sl
 8013ff2:	f000 8476 	beq.w	80148e2 <__ieee754_pow+0x99a>
 8013ff6:	4b59      	ldr	r3, [pc, #356]	; (801415c <__ieee754_pow+0x214>)
 8013ff8:	429c      	cmp	r4, r3
 8013ffa:	dd2d      	ble.n	8014058 <__ieee754_pow+0x110>
 8013ffc:	f1b9 0f00 	cmp.w	r9, #0
 8014000:	f280 8473 	bge.w	80148ea <__ieee754_pow+0x9a2>
 8014004:	2000      	movs	r0, #0
 8014006:	2100      	movs	r1, #0
 8014008:	ec41 0b10 	vmov	d0, r0, r1
 801400c:	b011      	add	sp, #68	; 0x44
 801400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014012:	2a00      	cmp	r2, #0
 8014014:	d13e      	bne.n	8014094 <__ieee754_pow+0x14c>
 8014016:	f1c3 0314 	rsb	r3, r3, #20
 801401a:	fa48 f103 	asr.w	r1, r8, r3
 801401e:	fa01 f303 	lsl.w	r3, r1, r3
 8014022:	4543      	cmp	r3, r8
 8014024:	f040 8469 	bne.w	80148fa <__ieee754_pow+0x9b2>
 8014028:	f001 0101 	and.w	r1, r1, #1
 801402c:	f1c1 0b02 	rsb	fp, r1, #2
 8014030:	4b4b      	ldr	r3, [pc, #300]	; (8014160 <__ieee754_pow+0x218>)
 8014032:	4598      	cmp	r8, r3
 8014034:	d118      	bne.n	8014068 <__ieee754_pow+0x120>
 8014036:	f1b9 0f00 	cmp.w	r9, #0
 801403a:	f280 845a 	bge.w	80148f2 <__ieee754_pow+0x9aa>
 801403e:	4948      	ldr	r1, [pc, #288]	; (8014160 <__ieee754_pow+0x218>)
 8014040:	4632      	mov	r2, r6
 8014042:	463b      	mov	r3, r7
 8014044:	2000      	movs	r0, #0
 8014046:	f7ec fc01 	bl	800084c <__aeabi_ddiv>
 801404a:	e7dd      	b.n	8014008 <__ieee754_pow+0xc0>
 801404c:	f04f 0b02 	mov.w	fp, #2
 8014050:	e7c4      	b.n	8013fdc <__ieee754_pow+0x94>
 8014052:	f04f 0b00 	mov.w	fp, #0
 8014056:	e7c1      	b.n	8013fdc <__ieee754_pow+0x94>
 8014058:	f1b9 0f00 	cmp.w	r9, #0
 801405c:	dad2      	bge.n	8014004 <__ieee754_pow+0xbc>
 801405e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014066:	e7cf      	b.n	8014008 <__ieee754_pow+0xc0>
 8014068:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801406c:	d106      	bne.n	801407c <__ieee754_pow+0x134>
 801406e:	4632      	mov	r2, r6
 8014070:	463b      	mov	r3, r7
 8014072:	4610      	mov	r0, r2
 8014074:	4619      	mov	r1, r3
 8014076:	f7ec fabf 	bl	80005f8 <__aeabi_dmul>
 801407a:	e7c5      	b.n	8014008 <__ieee754_pow+0xc0>
 801407c:	4b39      	ldr	r3, [pc, #228]	; (8014164 <__ieee754_pow+0x21c>)
 801407e:	4599      	cmp	r9, r3
 8014080:	d10a      	bne.n	8014098 <__ieee754_pow+0x150>
 8014082:	2d00      	cmp	r5, #0
 8014084:	db08      	blt.n	8014098 <__ieee754_pow+0x150>
 8014086:	ec47 6b10 	vmov	d0, r6, r7
 801408a:	b011      	add	sp, #68	; 0x44
 801408c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014090:	f000 bc68 	b.w	8014964 <__ieee754_sqrt>
 8014094:	f04f 0b00 	mov.w	fp, #0
 8014098:	ec47 6b10 	vmov	d0, r6, r7
 801409c:	f000 feb8 	bl	8014e10 <fabs>
 80140a0:	ec51 0b10 	vmov	r0, r1, d0
 80140a4:	f1ba 0f00 	cmp.w	sl, #0
 80140a8:	d127      	bne.n	80140fa <__ieee754_pow+0x1b2>
 80140aa:	b124      	cbz	r4, 80140b6 <__ieee754_pow+0x16e>
 80140ac:	4b2c      	ldr	r3, [pc, #176]	; (8014160 <__ieee754_pow+0x218>)
 80140ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d121      	bne.n	80140fa <__ieee754_pow+0x1b2>
 80140b6:	f1b9 0f00 	cmp.w	r9, #0
 80140ba:	da05      	bge.n	80140c8 <__ieee754_pow+0x180>
 80140bc:	4602      	mov	r2, r0
 80140be:	460b      	mov	r3, r1
 80140c0:	2000      	movs	r0, #0
 80140c2:	4927      	ldr	r1, [pc, #156]	; (8014160 <__ieee754_pow+0x218>)
 80140c4:	f7ec fbc2 	bl	800084c <__aeabi_ddiv>
 80140c8:	2d00      	cmp	r5, #0
 80140ca:	da9d      	bge.n	8014008 <__ieee754_pow+0xc0>
 80140cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140d4:	ea54 030b 	orrs.w	r3, r4, fp
 80140d8:	d108      	bne.n	80140ec <__ieee754_pow+0x1a4>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	4610      	mov	r0, r2
 80140e0:	4619      	mov	r1, r3
 80140e2:	f7ec f8d1 	bl	8000288 <__aeabi_dsub>
 80140e6:	4602      	mov	r2, r0
 80140e8:	460b      	mov	r3, r1
 80140ea:	e7ac      	b.n	8014046 <__ieee754_pow+0xfe>
 80140ec:	f1bb 0f01 	cmp.w	fp, #1
 80140f0:	d18a      	bne.n	8014008 <__ieee754_pow+0xc0>
 80140f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80140f6:	4619      	mov	r1, r3
 80140f8:	e786      	b.n	8014008 <__ieee754_pow+0xc0>
 80140fa:	0fed      	lsrs	r5, r5, #31
 80140fc:	1e6b      	subs	r3, r5, #1
 80140fe:	930d      	str	r3, [sp, #52]	; 0x34
 8014100:	ea5b 0303 	orrs.w	r3, fp, r3
 8014104:	d102      	bne.n	801410c <__ieee754_pow+0x1c4>
 8014106:	4632      	mov	r2, r6
 8014108:	463b      	mov	r3, r7
 801410a:	e7e8      	b.n	80140de <__ieee754_pow+0x196>
 801410c:	4b16      	ldr	r3, [pc, #88]	; (8014168 <__ieee754_pow+0x220>)
 801410e:	4598      	cmp	r8, r3
 8014110:	f340 80fe 	ble.w	8014310 <__ieee754_pow+0x3c8>
 8014114:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014118:	4598      	cmp	r8, r3
 801411a:	dd0a      	ble.n	8014132 <__ieee754_pow+0x1ea>
 801411c:	4b0f      	ldr	r3, [pc, #60]	; (801415c <__ieee754_pow+0x214>)
 801411e:	429c      	cmp	r4, r3
 8014120:	dc0d      	bgt.n	801413e <__ieee754_pow+0x1f6>
 8014122:	f1b9 0f00 	cmp.w	r9, #0
 8014126:	f6bf af6d 	bge.w	8014004 <__ieee754_pow+0xbc>
 801412a:	a307      	add	r3, pc, #28	; (adr r3, 8014148 <__ieee754_pow+0x200>)
 801412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014130:	e79f      	b.n	8014072 <__ieee754_pow+0x12a>
 8014132:	4b0e      	ldr	r3, [pc, #56]	; (801416c <__ieee754_pow+0x224>)
 8014134:	429c      	cmp	r4, r3
 8014136:	ddf4      	ble.n	8014122 <__ieee754_pow+0x1da>
 8014138:	4b09      	ldr	r3, [pc, #36]	; (8014160 <__ieee754_pow+0x218>)
 801413a:	429c      	cmp	r4, r3
 801413c:	dd18      	ble.n	8014170 <__ieee754_pow+0x228>
 801413e:	f1b9 0f00 	cmp.w	r9, #0
 8014142:	dcf2      	bgt.n	801412a <__ieee754_pow+0x1e2>
 8014144:	e75e      	b.n	8014004 <__ieee754_pow+0xbc>
 8014146:	bf00      	nop
 8014148:	8800759c 	.word	0x8800759c
 801414c:	7e37e43c 	.word	0x7e37e43c
 8014150:	7ff00000 	.word	0x7ff00000
 8014154:	080153c9 	.word	0x080153c9
 8014158:	433fffff 	.word	0x433fffff
 801415c:	3fefffff 	.word	0x3fefffff
 8014160:	3ff00000 	.word	0x3ff00000
 8014164:	3fe00000 	.word	0x3fe00000
 8014168:	41e00000 	.word	0x41e00000
 801416c:	3feffffe 	.word	0x3feffffe
 8014170:	2200      	movs	r2, #0
 8014172:	4b63      	ldr	r3, [pc, #396]	; (8014300 <__ieee754_pow+0x3b8>)
 8014174:	f7ec f888 	bl	8000288 <__aeabi_dsub>
 8014178:	a355      	add	r3, pc, #340	; (adr r3, 80142d0 <__ieee754_pow+0x388>)
 801417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417e:	4604      	mov	r4, r0
 8014180:	460d      	mov	r5, r1
 8014182:	f7ec fa39 	bl	80005f8 <__aeabi_dmul>
 8014186:	a354      	add	r3, pc, #336	; (adr r3, 80142d8 <__ieee754_pow+0x390>)
 8014188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418c:	4606      	mov	r6, r0
 801418e:	460f      	mov	r7, r1
 8014190:	4620      	mov	r0, r4
 8014192:	4629      	mov	r1, r5
 8014194:	f7ec fa30 	bl	80005f8 <__aeabi_dmul>
 8014198:	2200      	movs	r2, #0
 801419a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801419e:	4b59      	ldr	r3, [pc, #356]	; (8014304 <__ieee754_pow+0x3bc>)
 80141a0:	4620      	mov	r0, r4
 80141a2:	4629      	mov	r1, r5
 80141a4:	f7ec fa28 	bl	80005f8 <__aeabi_dmul>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	a14c      	add	r1, pc, #304	; (adr r1, 80142e0 <__ieee754_pow+0x398>)
 80141ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141b2:	f7ec f869 	bl	8000288 <__aeabi_dsub>
 80141b6:	4622      	mov	r2, r4
 80141b8:	462b      	mov	r3, r5
 80141ba:	f7ec fa1d 	bl	80005f8 <__aeabi_dmul>
 80141be:	4602      	mov	r2, r0
 80141c0:	460b      	mov	r3, r1
 80141c2:	2000      	movs	r0, #0
 80141c4:	4950      	ldr	r1, [pc, #320]	; (8014308 <__ieee754_pow+0x3c0>)
 80141c6:	f7ec f85f 	bl	8000288 <__aeabi_dsub>
 80141ca:	4622      	mov	r2, r4
 80141cc:	462b      	mov	r3, r5
 80141ce:	4680      	mov	r8, r0
 80141d0:	4689      	mov	r9, r1
 80141d2:	4620      	mov	r0, r4
 80141d4:	4629      	mov	r1, r5
 80141d6:	f7ec fa0f 	bl	80005f8 <__aeabi_dmul>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	4640      	mov	r0, r8
 80141e0:	4649      	mov	r1, r9
 80141e2:	f7ec fa09 	bl	80005f8 <__aeabi_dmul>
 80141e6:	a340      	add	r3, pc, #256	; (adr r3, 80142e8 <__ieee754_pow+0x3a0>)
 80141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ec:	f7ec fa04 	bl	80005f8 <__aeabi_dmul>
 80141f0:	4602      	mov	r2, r0
 80141f2:	460b      	mov	r3, r1
 80141f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141f8:	f7ec f846 	bl	8000288 <__aeabi_dsub>
 80141fc:	4602      	mov	r2, r0
 80141fe:	460b      	mov	r3, r1
 8014200:	4604      	mov	r4, r0
 8014202:	460d      	mov	r5, r1
 8014204:	4630      	mov	r0, r6
 8014206:	4639      	mov	r1, r7
 8014208:	f7ec f840 	bl	800028c <__adddf3>
 801420c:	2000      	movs	r0, #0
 801420e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014212:	4632      	mov	r2, r6
 8014214:	463b      	mov	r3, r7
 8014216:	f7ec f837 	bl	8000288 <__aeabi_dsub>
 801421a:	4602      	mov	r2, r0
 801421c:	460b      	mov	r3, r1
 801421e:	4620      	mov	r0, r4
 8014220:	4629      	mov	r1, r5
 8014222:	f7ec f831 	bl	8000288 <__aeabi_dsub>
 8014226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014228:	f10b 33ff 	add.w	r3, fp, #4294967295
 801422c:	4313      	orrs	r3, r2
 801422e:	4606      	mov	r6, r0
 8014230:	460f      	mov	r7, r1
 8014232:	f040 81eb 	bne.w	801460c <__ieee754_pow+0x6c4>
 8014236:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80142f0 <__ieee754_pow+0x3a8>
 801423a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801423e:	2400      	movs	r4, #0
 8014240:	4622      	mov	r2, r4
 8014242:	462b      	mov	r3, r5
 8014244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014248:	ed8d 7b02 	vstr	d7, [sp, #8]
 801424c:	f7ec f81c 	bl	8000288 <__aeabi_dsub>
 8014250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014254:	f7ec f9d0 	bl	80005f8 <__aeabi_dmul>
 8014258:	e9dd 2300 	ldrd	r2, r3, [sp]
 801425c:	4680      	mov	r8, r0
 801425e:	4689      	mov	r9, r1
 8014260:	4630      	mov	r0, r6
 8014262:	4639      	mov	r1, r7
 8014264:	f7ec f9c8 	bl	80005f8 <__aeabi_dmul>
 8014268:	4602      	mov	r2, r0
 801426a:	460b      	mov	r3, r1
 801426c:	4640      	mov	r0, r8
 801426e:	4649      	mov	r1, r9
 8014270:	f7ec f80c 	bl	800028c <__adddf3>
 8014274:	4622      	mov	r2, r4
 8014276:	462b      	mov	r3, r5
 8014278:	4680      	mov	r8, r0
 801427a:	4689      	mov	r9, r1
 801427c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014280:	f7ec f9ba 	bl	80005f8 <__aeabi_dmul>
 8014284:	460b      	mov	r3, r1
 8014286:	4604      	mov	r4, r0
 8014288:	460d      	mov	r5, r1
 801428a:	4602      	mov	r2, r0
 801428c:	4649      	mov	r1, r9
 801428e:	4640      	mov	r0, r8
 8014290:	e9cd 4500 	strd	r4, r5, [sp]
 8014294:	f7eb fffa 	bl	800028c <__adddf3>
 8014298:	4b1c      	ldr	r3, [pc, #112]	; (801430c <__ieee754_pow+0x3c4>)
 801429a:	4299      	cmp	r1, r3
 801429c:	4606      	mov	r6, r0
 801429e:	460f      	mov	r7, r1
 80142a0:	468b      	mov	fp, r1
 80142a2:	f340 82f7 	ble.w	8014894 <__ieee754_pow+0x94c>
 80142a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80142aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80142ae:	4303      	orrs	r3, r0
 80142b0:	f000 81ea 	beq.w	8014688 <__ieee754_pow+0x740>
 80142b4:	a310      	add	r3, pc, #64	; (adr r3, 80142f8 <__ieee754_pow+0x3b0>)
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142be:	f7ec f99b 	bl	80005f8 <__aeabi_dmul>
 80142c2:	a30d      	add	r3, pc, #52	; (adr r3, 80142f8 <__ieee754_pow+0x3b0>)
 80142c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c8:	e6d5      	b.n	8014076 <__ieee754_pow+0x12e>
 80142ca:	bf00      	nop
 80142cc:	f3af 8000 	nop.w
 80142d0:	60000000 	.word	0x60000000
 80142d4:	3ff71547 	.word	0x3ff71547
 80142d8:	f85ddf44 	.word	0xf85ddf44
 80142dc:	3e54ae0b 	.word	0x3e54ae0b
 80142e0:	55555555 	.word	0x55555555
 80142e4:	3fd55555 	.word	0x3fd55555
 80142e8:	652b82fe 	.word	0x652b82fe
 80142ec:	3ff71547 	.word	0x3ff71547
 80142f0:	00000000 	.word	0x00000000
 80142f4:	bff00000 	.word	0xbff00000
 80142f8:	8800759c 	.word	0x8800759c
 80142fc:	7e37e43c 	.word	0x7e37e43c
 8014300:	3ff00000 	.word	0x3ff00000
 8014304:	3fd00000 	.word	0x3fd00000
 8014308:	3fe00000 	.word	0x3fe00000
 801430c:	408fffff 	.word	0x408fffff
 8014310:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014314:	f04f 0200 	mov.w	r2, #0
 8014318:	da05      	bge.n	8014326 <__ieee754_pow+0x3de>
 801431a:	4bd3      	ldr	r3, [pc, #844]	; (8014668 <__ieee754_pow+0x720>)
 801431c:	f7ec f96c 	bl	80005f8 <__aeabi_dmul>
 8014320:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014324:	460c      	mov	r4, r1
 8014326:	1523      	asrs	r3, r4, #20
 8014328:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801432c:	4413      	add	r3, r2
 801432e:	9309      	str	r3, [sp, #36]	; 0x24
 8014330:	4bce      	ldr	r3, [pc, #824]	; (801466c <__ieee754_pow+0x724>)
 8014332:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014336:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801433a:	429c      	cmp	r4, r3
 801433c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014340:	dd08      	ble.n	8014354 <__ieee754_pow+0x40c>
 8014342:	4bcb      	ldr	r3, [pc, #812]	; (8014670 <__ieee754_pow+0x728>)
 8014344:	429c      	cmp	r4, r3
 8014346:	f340 815e 	ble.w	8014606 <__ieee754_pow+0x6be>
 801434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434c:	3301      	adds	r3, #1
 801434e:	9309      	str	r3, [sp, #36]	; 0x24
 8014350:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014354:	f04f 0a00 	mov.w	sl, #0
 8014358:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801435c:	930c      	str	r3, [sp, #48]	; 0x30
 801435e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014360:	4bc4      	ldr	r3, [pc, #784]	; (8014674 <__ieee754_pow+0x72c>)
 8014362:	4413      	add	r3, r2
 8014364:	ed93 7b00 	vldr	d7, [r3]
 8014368:	4629      	mov	r1, r5
 801436a:	ec53 2b17 	vmov	r2, r3, d7
 801436e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014372:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014376:	f7eb ff87 	bl	8000288 <__aeabi_dsub>
 801437a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801437e:	4606      	mov	r6, r0
 8014380:	460f      	mov	r7, r1
 8014382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014386:	f7eb ff81 	bl	800028c <__adddf3>
 801438a:	4602      	mov	r2, r0
 801438c:	460b      	mov	r3, r1
 801438e:	2000      	movs	r0, #0
 8014390:	49b9      	ldr	r1, [pc, #740]	; (8014678 <__ieee754_pow+0x730>)
 8014392:	f7ec fa5b 	bl	800084c <__aeabi_ddiv>
 8014396:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	4630      	mov	r0, r6
 80143a0:	4639      	mov	r1, r7
 80143a2:	f7ec f929 	bl	80005f8 <__aeabi_dmul>
 80143a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80143aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80143ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80143b2:	2300      	movs	r3, #0
 80143b4:	9302      	str	r3, [sp, #8]
 80143b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80143ba:	106d      	asrs	r5, r5, #1
 80143bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80143c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80143c4:	2200      	movs	r2, #0
 80143c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80143ca:	4640      	mov	r0, r8
 80143cc:	4649      	mov	r1, r9
 80143ce:	4614      	mov	r4, r2
 80143d0:	461d      	mov	r5, r3
 80143d2:	f7ec f911 	bl	80005f8 <__aeabi_dmul>
 80143d6:	4602      	mov	r2, r0
 80143d8:	460b      	mov	r3, r1
 80143da:	4630      	mov	r0, r6
 80143dc:	4639      	mov	r1, r7
 80143de:	f7eb ff53 	bl	8000288 <__aeabi_dsub>
 80143e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143e6:	4606      	mov	r6, r0
 80143e8:	460f      	mov	r7, r1
 80143ea:	4620      	mov	r0, r4
 80143ec:	4629      	mov	r1, r5
 80143ee:	f7eb ff4b 	bl	8000288 <__aeabi_dsub>
 80143f2:	4602      	mov	r2, r0
 80143f4:	460b      	mov	r3, r1
 80143f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80143fa:	f7eb ff45 	bl	8000288 <__aeabi_dsub>
 80143fe:	4642      	mov	r2, r8
 8014400:	464b      	mov	r3, r9
 8014402:	f7ec f8f9 	bl	80005f8 <__aeabi_dmul>
 8014406:	4602      	mov	r2, r0
 8014408:	460b      	mov	r3, r1
 801440a:	4630      	mov	r0, r6
 801440c:	4639      	mov	r1, r7
 801440e:	f7eb ff3b 	bl	8000288 <__aeabi_dsub>
 8014412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014416:	f7ec f8ef 	bl	80005f8 <__aeabi_dmul>
 801441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801441e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014422:	4610      	mov	r0, r2
 8014424:	4619      	mov	r1, r3
 8014426:	f7ec f8e7 	bl	80005f8 <__aeabi_dmul>
 801442a:	a37b      	add	r3, pc, #492	; (adr r3, 8014618 <__ieee754_pow+0x6d0>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	4604      	mov	r4, r0
 8014432:	460d      	mov	r5, r1
 8014434:	f7ec f8e0 	bl	80005f8 <__aeabi_dmul>
 8014438:	a379      	add	r3, pc, #484	; (adr r3, 8014620 <__ieee754_pow+0x6d8>)
 801443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443e:	f7eb ff25 	bl	800028c <__adddf3>
 8014442:	4622      	mov	r2, r4
 8014444:	462b      	mov	r3, r5
 8014446:	f7ec f8d7 	bl	80005f8 <__aeabi_dmul>
 801444a:	a377      	add	r3, pc, #476	; (adr r3, 8014628 <__ieee754_pow+0x6e0>)
 801444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014450:	f7eb ff1c 	bl	800028c <__adddf3>
 8014454:	4622      	mov	r2, r4
 8014456:	462b      	mov	r3, r5
 8014458:	f7ec f8ce 	bl	80005f8 <__aeabi_dmul>
 801445c:	a374      	add	r3, pc, #464	; (adr r3, 8014630 <__ieee754_pow+0x6e8>)
 801445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014462:	f7eb ff13 	bl	800028c <__adddf3>
 8014466:	4622      	mov	r2, r4
 8014468:	462b      	mov	r3, r5
 801446a:	f7ec f8c5 	bl	80005f8 <__aeabi_dmul>
 801446e:	a372      	add	r3, pc, #456	; (adr r3, 8014638 <__ieee754_pow+0x6f0>)
 8014470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014474:	f7eb ff0a 	bl	800028c <__adddf3>
 8014478:	4622      	mov	r2, r4
 801447a:	462b      	mov	r3, r5
 801447c:	f7ec f8bc 	bl	80005f8 <__aeabi_dmul>
 8014480:	a36f      	add	r3, pc, #444	; (adr r3, 8014640 <__ieee754_pow+0x6f8>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	f7eb ff01 	bl	800028c <__adddf3>
 801448a:	4622      	mov	r2, r4
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	462b      	mov	r3, r5
 8014492:	4620      	mov	r0, r4
 8014494:	4629      	mov	r1, r5
 8014496:	f7ec f8af 	bl	80005f8 <__aeabi_dmul>
 801449a:	4602      	mov	r2, r0
 801449c:	460b      	mov	r3, r1
 801449e:	4630      	mov	r0, r6
 80144a0:	4639      	mov	r1, r7
 80144a2:	f7ec f8a9 	bl	80005f8 <__aeabi_dmul>
 80144a6:	4642      	mov	r2, r8
 80144a8:	4604      	mov	r4, r0
 80144aa:	460d      	mov	r5, r1
 80144ac:	464b      	mov	r3, r9
 80144ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80144b2:	f7eb feeb 	bl	800028c <__adddf3>
 80144b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80144ba:	f7ec f89d 	bl	80005f8 <__aeabi_dmul>
 80144be:	4622      	mov	r2, r4
 80144c0:	462b      	mov	r3, r5
 80144c2:	f7eb fee3 	bl	800028c <__adddf3>
 80144c6:	4642      	mov	r2, r8
 80144c8:	4606      	mov	r6, r0
 80144ca:	460f      	mov	r7, r1
 80144cc:	464b      	mov	r3, r9
 80144ce:	4640      	mov	r0, r8
 80144d0:	4649      	mov	r1, r9
 80144d2:	f7ec f891 	bl	80005f8 <__aeabi_dmul>
 80144d6:	2200      	movs	r2, #0
 80144d8:	4b68      	ldr	r3, [pc, #416]	; (801467c <__ieee754_pow+0x734>)
 80144da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144de:	f7eb fed5 	bl	800028c <__adddf3>
 80144e2:	4632      	mov	r2, r6
 80144e4:	463b      	mov	r3, r7
 80144e6:	f7eb fed1 	bl	800028c <__adddf3>
 80144ea:	9802      	ldr	r0, [sp, #8]
 80144ec:	460d      	mov	r5, r1
 80144ee:	4604      	mov	r4, r0
 80144f0:	4602      	mov	r2, r0
 80144f2:	460b      	mov	r3, r1
 80144f4:	4640      	mov	r0, r8
 80144f6:	4649      	mov	r1, r9
 80144f8:	f7ec f87e 	bl	80005f8 <__aeabi_dmul>
 80144fc:	2200      	movs	r2, #0
 80144fe:	4680      	mov	r8, r0
 8014500:	4689      	mov	r9, r1
 8014502:	4b5e      	ldr	r3, [pc, #376]	; (801467c <__ieee754_pow+0x734>)
 8014504:	4620      	mov	r0, r4
 8014506:	4629      	mov	r1, r5
 8014508:	f7eb febe 	bl	8000288 <__aeabi_dsub>
 801450c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014510:	f7eb feba 	bl	8000288 <__aeabi_dsub>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	4630      	mov	r0, r6
 801451a:	4639      	mov	r1, r7
 801451c:	f7eb feb4 	bl	8000288 <__aeabi_dsub>
 8014520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014524:	f7ec f868 	bl	80005f8 <__aeabi_dmul>
 8014528:	4622      	mov	r2, r4
 801452a:	4606      	mov	r6, r0
 801452c:	460f      	mov	r7, r1
 801452e:	462b      	mov	r3, r5
 8014530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014534:	f7ec f860 	bl	80005f8 <__aeabi_dmul>
 8014538:	4602      	mov	r2, r0
 801453a:	460b      	mov	r3, r1
 801453c:	4630      	mov	r0, r6
 801453e:	4639      	mov	r1, r7
 8014540:	f7eb fea4 	bl	800028c <__adddf3>
 8014544:	4606      	mov	r6, r0
 8014546:	460f      	mov	r7, r1
 8014548:	4602      	mov	r2, r0
 801454a:	460b      	mov	r3, r1
 801454c:	4640      	mov	r0, r8
 801454e:	4649      	mov	r1, r9
 8014550:	f7eb fe9c 	bl	800028c <__adddf3>
 8014554:	9802      	ldr	r0, [sp, #8]
 8014556:	a33c      	add	r3, pc, #240	; (adr r3, 8014648 <__ieee754_pow+0x700>)
 8014558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455c:	4604      	mov	r4, r0
 801455e:	460d      	mov	r5, r1
 8014560:	f7ec f84a 	bl	80005f8 <__aeabi_dmul>
 8014564:	4642      	mov	r2, r8
 8014566:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801456a:	464b      	mov	r3, r9
 801456c:	4620      	mov	r0, r4
 801456e:	4629      	mov	r1, r5
 8014570:	f7eb fe8a 	bl	8000288 <__aeabi_dsub>
 8014574:	4602      	mov	r2, r0
 8014576:	460b      	mov	r3, r1
 8014578:	4630      	mov	r0, r6
 801457a:	4639      	mov	r1, r7
 801457c:	f7eb fe84 	bl	8000288 <__aeabi_dsub>
 8014580:	a333      	add	r3, pc, #204	; (adr r3, 8014650 <__ieee754_pow+0x708>)
 8014582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014586:	f7ec f837 	bl	80005f8 <__aeabi_dmul>
 801458a:	a333      	add	r3, pc, #204	; (adr r3, 8014658 <__ieee754_pow+0x710>)
 801458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014590:	4606      	mov	r6, r0
 8014592:	460f      	mov	r7, r1
 8014594:	4620      	mov	r0, r4
 8014596:	4629      	mov	r1, r5
 8014598:	f7ec f82e 	bl	80005f8 <__aeabi_dmul>
 801459c:	4602      	mov	r2, r0
 801459e:	460b      	mov	r3, r1
 80145a0:	4630      	mov	r0, r6
 80145a2:	4639      	mov	r1, r7
 80145a4:	f7eb fe72 	bl	800028c <__adddf3>
 80145a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145aa:	4b35      	ldr	r3, [pc, #212]	; (8014680 <__ieee754_pow+0x738>)
 80145ac:	4413      	add	r3, r2
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	f7eb fe6b 	bl	800028c <__adddf3>
 80145b6:	4604      	mov	r4, r0
 80145b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145ba:	460d      	mov	r5, r1
 80145bc:	f7eb ffb2 	bl	8000524 <__aeabi_i2d>
 80145c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145c2:	4b30      	ldr	r3, [pc, #192]	; (8014684 <__ieee754_pow+0x73c>)
 80145c4:	4413      	add	r3, r2
 80145c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145ca:	4606      	mov	r6, r0
 80145cc:	460f      	mov	r7, r1
 80145ce:	4622      	mov	r2, r4
 80145d0:	462b      	mov	r3, r5
 80145d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145d6:	f7eb fe59 	bl	800028c <__adddf3>
 80145da:	4642      	mov	r2, r8
 80145dc:	464b      	mov	r3, r9
 80145de:	f7eb fe55 	bl	800028c <__adddf3>
 80145e2:	4632      	mov	r2, r6
 80145e4:	463b      	mov	r3, r7
 80145e6:	f7eb fe51 	bl	800028c <__adddf3>
 80145ea:	9802      	ldr	r0, [sp, #8]
 80145ec:	4632      	mov	r2, r6
 80145ee:	463b      	mov	r3, r7
 80145f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80145f4:	f7eb fe48 	bl	8000288 <__aeabi_dsub>
 80145f8:	4642      	mov	r2, r8
 80145fa:	464b      	mov	r3, r9
 80145fc:	f7eb fe44 	bl	8000288 <__aeabi_dsub>
 8014600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014604:	e607      	b.n	8014216 <__ieee754_pow+0x2ce>
 8014606:	f04f 0a01 	mov.w	sl, #1
 801460a:	e6a5      	b.n	8014358 <__ieee754_pow+0x410>
 801460c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014660 <__ieee754_pow+0x718>
 8014610:	e613      	b.n	801423a <__ieee754_pow+0x2f2>
 8014612:	bf00      	nop
 8014614:	f3af 8000 	nop.w
 8014618:	4a454eef 	.word	0x4a454eef
 801461c:	3fca7e28 	.word	0x3fca7e28
 8014620:	93c9db65 	.word	0x93c9db65
 8014624:	3fcd864a 	.word	0x3fcd864a
 8014628:	a91d4101 	.word	0xa91d4101
 801462c:	3fd17460 	.word	0x3fd17460
 8014630:	518f264d 	.word	0x518f264d
 8014634:	3fd55555 	.word	0x3fd55555
 8014638:	db6fabff 	.word	0xdb6fabff
 801463c:	3fdb6db6 	.word	0x3fdb6db6
 8014640:	33333303 	.word	0x33333303
 8014644:	3fe33333 	.word	0x3fe33333
 8014648:	e0000000 	.word	0xe0000000
 801464c:	3feec709 	.word	0x3feec709
 8014650:	dc3a03fd 	.word	0xdc3a03fd
 8014654:	3feec709 	.word	0x3feec709
 8014658:	145b01f5 	.word	0x145b01f5
 801465c:	be3e2fe0 	.word	0xbe3e2fe0
 8014660:	00000000 	.word	0x00000000
 8014664:	3ff00000 	.word	0x3ff00000
 8014668:	43400000 	.word	0x43400000
 801466c:	0003988e 	.word	0x0003988e
 8014670:	000bb679 	.word	0x000bb679
 8014674:	080154e8 	.word	0x080154e8
 8014678:	3ff00000 	.word	0x3ff00000
 801467c:	40080000 	.word	0x40080000
 8014680:	08015508 	.word	0x08015508
 8014684:	080154f8 	.word	0x080154f8
 8014688:	a3b4      	add	r3, pc, #720	; (adr r3, 801495c <__ieee754_pow+0xa14>)
 801468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468e:	4640      	mov	r0, r8
 8014690:	4649      	mov	r1, r9
 8014692:	f7eb fdfb 	bl	800028c <__adddf3>
 8014696:	4622      	mov	r2, r4
 8014698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801469c:	462b      	mov	r3, r5
 801469e:	4630      	mov	r0, r6
 80146a0:	4639      	mov	r1, r7
 80146a2:	f7eb fdf1 	bl	8000288 <__aeabi_dsub>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146ae:	f7ec fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f47f adfe 	bne.w	80142b4 <__ieee754_pow+0x36c>
 80146b8:	4aa3      	ldr	r2, [pc, #652]	; (8014948 <__ieee754_pow+0xa00>)
 80146ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146be:	4293      	cmp	r3, r2
 80146c0:	f340 810a 	ble.w	80148d8 <__ieee754_pow+0x990>
 80146c4:	151b      	asrs	r3, r3, #20
 80146c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80146ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80146ce:	fa4a f303 	asr.w	r3, sl, r3
 80146d2:	445b      	add	r3, fp
 80146d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146d8:	4e9c      	ldr	r6, [pc, #624]	; (801494c <__ieee754_pow+0xa04>)
 80146da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80146de:	4116      	asrs	r6, r2
 80146e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80146e4:	2000      	movs	r0, #0
 80146e6:	ea23 0106 	bic.w	r1, r3, r6
 80146ea:	f1c2 0214 	rsb	r2, r2, #20
 80146ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80146f2:	fa4a fa02 	asr.w	sl, sl, r2
 80146f6:	f1bb 0f00 	cmp.w	fp, #0
 80146fa:	4602      	mov	r2, r0
 80146fc:	460b      	mov	r3, r1
 80146fe:	4620      	mov	r0, r4
 8014700:	4629      	mov	r1, r5
 8014702:	bfb8      	it	lt
 8014704:	f1ca 0a00 	rsblt	sl, sl, #0
 8014708:	f7eb fdbe 	bl	8000288 <__aeabi_dsub>
 801470c:	e9cd 0100 	strd	r0, r1, [sp]
 8014710:	4642      	mov	r2, r8
 8014712:	464b      	mov	r3, r9
 8014714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014718:	f7eb fdb8 	bl	800028c <__adddf3>
 801471c:	2000      	movs	r0, #0
 801471e:	a378      	add	r3, pc, #480	; (adr r3, 8014900 <__ieee754_pow+0x9b8>)
 8014720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014724:	4604      	mov	r4, r0
 8014726:	460d      	mov	r5, r1
 8014728:	f7eb ff66 	bl	80005f8 <__aeabi_dmul>
 801472c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014730:	4606      	mov	r6, r0
 8014732:	460f      	mov	r7, r1
 8014734:	4620      	mov	r0, r4
 8014736:	4629      	mov	r1, r5
 8014738:	f7eb fda6 	bl	8000288 <__aeabi_dsub>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	4640      	mov	r0, r8
 8014742:	4649      	mov	r1, r9
 8014744:	f7eb fda0 	bl	8000288 <__aeabi_dsub>
 8014748:	a36f      	add	r3, pc, #444	; (adr r3, 8014908 <__ieee754_pow+0x9c0>)
 801474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474e:	f7eb ff53 	bl	80005f8 <__aeabi_dmul>
 8014752:	a36f      	add	r3, pc, #444	; (adr r3, 8014910 <__ieee754_pow+0x9c8>)
 8014754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014758:	4680      	mov	r8, r0
 801475a:	4689      	mov	r9, r1
 801475c:	4620      	mov	r0, r4
 801475e:	4629      	mov	r1, r5
 8014760:	f7eb ff4a 	bl	80005f8 <__aeabi_dmul>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4640      	mov	r0, r8
 801476a:	4649      	mov	r1, r9
 801476c:	f7eb fd8e 	bl	800028c <__adddf3>
 8014770:	4604      	mov	r4, r0
 8014772:	460d      	mov	r5, r1
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	4630      	mov	r0, r6
 801477a:	4639      	mov	r1, r7
 801477c:	f7eb fd86 	bl	800028c <__adddf3>
 8014780:	4632      	mov	r2, r6
 8014782:	463b      	mov	r3, r7
 8014784:	4680      	mov	r8, r0
 8014786:	4689      	mov	r9, r1
 8014788:	f7eb fd7e 	bl	8000288 <__aeabi_dsub>
 801478c:	4602      	mov	r2, r0
 801478e:	460b      	mov	r3, r1
 8014790:	4620      	mov	r0, r4
 8014792:	4629      	mov	r1, r5
 8014794:	f7eb fd78 	bl	8000288 <__aeabi_dsub>
 8014798:	4642      	mov	r2, r8
 801479a:	4606      	mov	r6, r0
 801479c:	460f      	mov	r7, r1
 801479e:	464b      	mov	r3, r9
 80147a0:	4640      	mov	r0, r8
 80147a2:	4649      	mov	r1, r9
 80147a4:	f7eb ff28 	bl	80005f8 <__aeabi_dmul>
 80147a8:	a35b      	add	r3, pc, #364	; (adr r3, 8014918 <__ieee754_pow+0x9d0>)
 80147aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ae:	4604      	mov	r4, r0
 80147b0:	460d      	mov	r5, r1
 80147b2:	f7eb ff21 	bl	80005f8 <__aeabi_dmul>
 80147b6:	a35a      	add	r3, pc, #360	; (adr r3, 8014920 <__ieee754_pow+0x9d8>)
 80147b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147bc:	f7eb fd64 	bl	8000288 <__aeabi_dsub>
 80147c0:	4622      	mov	r2, r4
 80147c2:	462b      	mov	r3, r5
 80147c4:	f7eb ff18 	bl	80005f8 <__aeabi_dmul>
 80147c8:	a357      	add	r3, pc, #348	; (adr r3, 8014928 <__ieee754_pow+0x9e0>)
 80147ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ce:	f7eb fd5d 	bl	800028c <__adddf3>
 80147d2:	4622      	mov	r2, r4
 80147d4:	462b      	mov	r3, r5
 80147d6:	f7eb ff0f 	bl	80005f8 <__aeabi_dmul>
 80147da:	a355      	add	r3, pc, #340	; (adr r3, 8014930 <__ieee754_pow+0x9e8>)
 80147dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e0:	f7eb fd52 	bl	8000288 <__aeabi_dsub>
 80147e4:	4622      	mov	r2, r4
 80147e6:	462b      	mov	r3, r5
 80147e8:	f7eb ff06 	bl	80005f8 <__aeabi_dmul>
 80147ec:	a352      	add	r3, pc, #328	; (adr r3, 8014938 <__ieee754_pow+0x9f0>)
 80147ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f2:	f7eb fd4b 	bl	800028c <__adddf3>
 80147f6:	4622      	mov	r2, r4
 80147f8:	462b      	mov	r3, r5
 80147fa:	f7eb fefd 	bl	80005f8 <__aeabi_dmul>
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	4640      	mov	r0, r8
 8014804:	4649      	mov	r1, r9
 8014806:	f7eb fd3f 	bl	8000288 <__aeabi_dsub>
 801480a:	4604      	mov	r4, r0
 801480c:	460d      	mov	r5, r1
 801480e:	4602      	mov	r2, r0
 8014810:	460b      	mov	r3, r1
 8014812:	4640      	mov	r0, r8
 8014814:	4649      	mov	r1, r9
 8014816:	f7eb feef 	bl	80005f8 <__aeabi_dmul>
 801481a:	2200      	movs	r2, #0
 801481c:	e9cd 0100 	strd	r0, r1, [sp]
 8014820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014824:	4620      	mov	r0, r4
 8014826:	4629      	mov	r1, r5
 8014828:	f7eb fd2e 	bl	8000288 <__aeabi_dsub>
 801482c:	4602      	mov	r2, r0
 801482e:	460b      	mov	r3, r1
 8014830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014834:	f7ec f80a 	bl	800084c <__aeabi_ddiv>
 8014838:	4632      	mov	r2, r6
 801483a:	4604      	mov	r4, r0
 801483c:	460d      	mov	r5, r1
 801483e:	463b      	mov	r3, r7
 8014840:	4640      	mov	r0, r8
 8014842:	4649      	mov	r1, r9
 8014844:	f7eb fed8 	bl	80005f8 <__aeabi_dmul>
 8014848:	4632      	mov	r2, r6
 801484a:	463b      	mov	r3, r7
 801484c:	f7eb fd1e 	bl	800028c <__adddf3>
 8014850:	4602      	mov	r2, r0
 8014852:	460b      	mov	r3, r1
 8014854:	4620      	mov	r0, r4
 8014856:	4629      	mov	r1, r5
 8014858:	f7eb fd16 	bl	8000288 <__aeabi_dsub>
 801485c:	4642      	mov	r2, r8
 801485e:	464b      	mov	r3, r9
 8014860:	f7eb fd12 	bl	8000288 <__aeabi_dsub>
 8014864:	4602      	mov	r2, r0
 8014866:	460b      	mov	r3, r1
 8014868:	2000      	movs	r0, #0
 801486a:	4939      	ldr	r1, [pc, #228]	; (8014950 <__ieee754_pow+0xa08>)
 801486c:	f7eb fd0c 	bl	8000288 <__aeabi_dsub>
 8014870:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014874:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	da2f      	bge.n	80148de <__ieee754_pow+0x996>
 801487e:	4650      	mov	r0, sl
 8014880:	ec43 2b10 	vmov	d0, r2, r3
 8014884:	f000 fb64 	bl	8014f50 <scalbn>
 8014888:	ec51 0b10 	vmov	r0, r1, d0
 801488c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014890:	f7ff bbf1 	b.w	8014076 <__ieee754_pow+0x12e>
 8014894:	4b2f      	ldr	r3, [pc, #188]	; (8014954 <__ieee754_pow+0xa0c>)
 8014896:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801489a:	429e      	cmp	r6, r3
 801489c:	f77f af0c 	ble.w	80146b8 <__ieee754_pow+0x770>
 80148a0:	4b2d      	ldr	r3, [pc, #180]	; (8014958 <__ieee754_pow+0xa10>)
 80148a2:	440b      	add	r3, r1
 80148a4:	4303      	orrs	r3, r0
 80148a6:	d00b      	beq.n	80148c0 <__ieee754_pow+0x978>
 80148a8:	a325      	add	r3, pc, #148	; (adr r3, 8014940 <__ieee754_pow+0x9f8>)
 80148aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148b2:	f7eb fea1 	bl	80005f8 <__aeabi_dmul>
 80148b6:	a322      	add	r3, pc, #136	; (adr r3, 8014940 <__ieee754_pow+0x9f8>)
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	f7ff bbdb 	b.w	8014076 <__ieee754_pow+0x12e>
 80148c0:	4622      	mov	r2, r4
 80148c2:	462b      	mov	r3, r5
 80148c4:	f7eb fce0 	bl	8000288 <__aeabi_dsub>
 80148c8:	4642      	mov	r2, r8
 80148ca:	464b      	mov	r3, r9
 80148cc:	f7ec f91a 	bl	8000b04 <__aeabi_dcmpge>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	f43f aef1 	beq.w	80146b8 <__ieee754_pow+0x770>
 80148d6:	e7e7      	b.n	80148a8 <__ieee754_pow+0x960>
 80148d8:	f04f 0a00 	mov.w	sl, #0
 80148dc:	e718      	b.n	8014710 <__ieee754_pow+0x7c8>
 80148de:	4621      	mov	r1, r4
 80148e0:	e7d4      	b.n	801488c <__ieee754_pow+0x944>
 80148e2:	2000      	movs	r0, #0
 80148e4:	491a      	ldr	r1, [pc, #104]	; (8014950 <__ieee754_pow+0xa08>)
 80148e6:	f7ff bb8f 	b.w	8014008 <__ieee754_pow+0xc0>
 80148ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148ee:	f7ff bb8b 	b.w	8014008 <__ieee754_pow+0xc0>
 80148f2:	4630      	mov	r0, r6
 80148f4:	4639      	mov	r1, r7
 80148f6:	f7ff bb87 	b.w	8014008 <__ieee754_pow+0xc0>
 80148fa:	4693      	mov	fp, r2
 80148fc:	f7ff bb98 	b.w	8014030 <__ieee754_pow+0xe8>
 8014900:	00000000 	.word	0x00000000
 8014904:	3fe62e43 	.word	0x3fe62e43
 8014908:	fefa39ef 	.word	0xfefa39ef
 801490c:	3fe62e42 	.word	0x3fe62e42
 8014910:	0ca86c39 	.word	0x0ca86c39
 8014914:	be205c61 	.word	0xbe205c61
 8014918:	72bea4d0 	.word	0x72bea4d0
 801491c:	3e663769 	.word	0x3e663769
 8014920:	c5d26bf1 	.word	0xc5d26bf1
 8014924:	3ebbbd41 	.word	0x3ebbbd41
 8014928:	af25de2c 	.word	0xaf25de2c
 801492c:	3f11566a 	.word	0x3f11566a
 8014930:	16bebd93 	.word	0x16bebd93
 8014934:	3f66c16c 	.word	0x3f66c16c
 8014938:	5555553e 	.word	0x5555553e
 801493c:	3fc55555 	.word	0x3fc55555
 8014940:	c2f8f359 	.word	0xc2f8f359
 8014944:	01a56e1f 	.word	0x01a56e1f
 8014948:	3fe00000 	.word	0x3fe00000
 801494c:	000fffff 	.word	0x000fffff
 8014950:	3ff00000 	.word	0x3ff00000
 8014954:	4090cbff 	.word	0x4090cbff
 8014958:	3f6f3400 	.word	0x3f6f3400
 801495c:	652b82fe 	.word	0x652b82fe
 8014960:	3c971547 	.word	0x3c971547

08014964 <__ieee754_sqrt>:
 8014964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014968:	4955      	ldr	r1, [pc, #340]	; (8014ac0 <__ieee754_sqrt+0x15c>)
 801496a:	ec55 4b10 	vmov	r4, r5, d0
 801496e:	43a9      	bics	r1, r5
 8014970:	462b      	mov	r3, r5
 8014972:	462a      	mov	r2, r5
 8014974:	d112      	bne.n	801499c <__ieee754_sqrt+0x38>
 8014976:	ee10 2a10 	vmov	r2, s0
 801497a:	ee10 0a10 	vmov	r0, s0
 801497e:	4629      	mov	r1, r5
 8014980:	f7eb fe3a 	bl	80005f8 <__aeabi_dmul>
 8014984:	4602      	mov	r2, r0
 8014986:	460b      	mov	r3, r1
 8014988:	4620      	mov	r0, r4
 801498a:	4629      	mov	r1, r5
 801498c:	f7eb fc7e 	bl	800028c <__adddf3>
 8014990:	4604      	mov	r4, r0
 8014992:	460d      	mov	r5, r1
 8014994:	ec45 4b10 	vmov	d0, r4, r5
 8014998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801499c:	2d00      	cmp	r5, #0
 801499e:	ee10 0a10 	vmov	r0, s0
 80149a2:	4621      	mov	r1, r4
 80149a4:	dc0f      	bgt.n	80149c6 <__ieee754_sqrt+0x62>
 80149a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80149aa:	4330      	orrs	r0, r6
 80149ac:	d0f2      	beq.n	8014994 <__ieee754_sqrt+0x30>
 80149ae:	b155      	cbz	r5, 80149c6 <__ieee754_sqrt+0x62>
 80149b0:	ee10 2a10 	vmov	r2, s0
 80149b4:	4620      	mov	r0, r4
 80149b6:	4629      	mov	r1, r5
 80149b8:	f7eb fc66 	bl	8000288 <__aeabi_dsub>
 80149bc:	4602      	mov	r2, r0
 80149be:	460b      	mov	r3, r1
 80149c0:	f7eb ff44 	bl	800084c <__aeabi_ddiv>
 80149c4:	e7e4      	b.n	8014990 <__ieee754_sqrt+0x2c>
 80149c6:	151b      	asrs	r3, r3, #20
 80149c8:	d073      	beq.n	8014ab2 <__ieee754_sqrt+0x14e>
 80149ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80149ce:	07dd      	lsls	r5, r3, #31
 80149d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80149d4:	bf48      	it	mi
 80149d6:	0fc8      	lsrmi	r0, r1, #31
 80149d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80149dc:	bf44      	itt	mi
 80149de:	0049      	lslmi	r1, r1, #1
 80149e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80149e4:	2500      	movs	r5, #0
 80149e6:	1058      	asrs	r0, r3, #1
 80149e8:	0fcb      	lsrs	r3, r1, #31
 80149ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80149ee:	0049      	lsls	r1, r1, #1
 80149f0:	2316      	movs	r3, #22
 80149f2:	462c      	mov	r4, r5
 80149f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80149f8:	19a7      	adds	r7, r4, r6
 80149fa:	4297      	cmp	r7, r2
 80149fc:	bfde      	ittt	le
 80149fe:	19bc      	addle	r4, r7, r6
 8014a00:	1bd2      	suble	r2, r2, r7
 8014a02:	19ad      	addle	r5, r5, r6
 8014a04:	0fcf      	lsrs	r7, r1, #31
 8014a06:	3b01      	subs	r3, #1
 8014a08:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014a0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a14:	d1f0      	bne.n	80149f8 <__ieee754_sqrt+0x94>
 8014a16:	f04f 0c20 	mov.w	ip, #32
 8014a1a:	469e      	mov	lr, r3
 8014a1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014a20:	42a2      	cmp	r2, r4
 8014a22:	eb06 070e 	add.w	r7, r6, lr
 8014a26:	dc02      	bgt.n	8014a2e <__ieee754_sqrt+0xca>
 8014a28:	d112      	bne.n	8014a50 <__ieee754_sqrt+0xec>
 8014a2a:	428f      	cmp	r7, r1
 8014a2c:	d810      	bhi.n	8014a50 <__ieee754_sqrt+0xec>
 8014a2e:	2f00      	cmp	r7, #0
 8014a30:	eb07 0e06 	add.w	lr, r7, r6
 8014a34:	da42      	bge.n	8014abc <__ieee754_sqrt+0x158>
 8014a36:	f1be 0f00 	cmp.w	lr, #0
 8014a3a:	db3f      	blt.n	8014abc <__ieee754_sqrt+0x158>
 8014a3c:	f104 0801 	add.w	r8, r4, #1
 8014a40:	1b12      	subs	r2, r2, r4
 8014a42:	428f      	cmp	r7, r1
 8014a44:	bf88      	it	hi
 8014a46:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014a4a:	1bc9      	subs	r1, r1, r7
 8014a4c:	4433      	add	r3, r6
 8014a4e:	4644      	mov	r4, r8
 8014a50:	0052      	lsls	r2, r2, #1
 8014a52:	f1bc 0c01 	subs.w	ip, ip, #1
 8014a56:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014a5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a5e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a62:	d1dd      	bne.n	8014a20 <__ieee754_sqrt+0xbc>
 8014a64:	430a      	orrs	r2, r1
 8014a66:	d006      	beq.n	8014a76 <__ieee754_sqrt+0x112>
 8014a68:	1c5c      	adds	r4, r3, #1
 8014a6a:	bf13      	iteet	ne
 8014a6c:	3301      	addne	r3, #1
 8014a6e:	3501      	addeq	r5, #1
 8014a70:	4663      	moveq	r3, ip
 8014a72:	f023 0301 	bicne.w	r3, r3, #1
 8014a76:	106a      	asrs	r2, r5, #1
 8014a78:	085b      	lsrs	r3, r3, #1
 8014a7a:	07e9      	lsls	r1, r5, #31
 8014a7c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014a80:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014a84:	bf48      	it	mi
 8014a86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014a8a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014a8e:	461c      	mov	r4, r3
 8014a90:	e780      	b.n	8014994 <__ieee754_sqrt+0x30>
 8014a92:	0aca      	lsrs	r2, r1, #11
 8014a94:	3815      	subs	r0, #21
 8014a96:	0549      	lsls	r1, r1, #21
 8014a98:	2a00      	cmp	r2, #0
 8014a9a:	d0fa      	beq.n	8014a92 <__ieee754_sqrt+0x12e>
 8014a9c:	02d6      	lsls	r6, r2, #11
 8014a9e:	d50a      	bpl.n	8014ab6 <__ieee754_sqrt+0x152>
 8014aa0:	f1c3 0420 	rsb	r4, r3, #32
 8014aa4:	fa21 f404 	lsr.w	r4, r1, r4
 8014aa8:	1e5d      	subs	r5, r3, #1
 8014aaa:	4099      	lsls	r1, r3
 8014aac:	4322      	orrs	r2, r4
 8014aae:	1b43      	subs	r3, r0, r5
 8014ab0:	e78b      	b.n	80149ca <__ieee754_sqrt+0x66>
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	e7f0      	b.n	8014a98 <__ieee754_sqrt+0x134>
 8014ab6:	0052      	lsls	r2, r2, #1
 8014ab8:	3301      	adds	r3, #1
 8014aba:	e7ef      	b.n	8014a9c <__ieee754_sqrt+0x138>
 8014abc:	46a0      	mov	r8, r4
 8014abe:	e7bf      	b.n	8014a40 <__ieee754_sqrt+0xdc>
 8014ac0:	7ff00000 	.word	0x7ff00000

08014ac4 <__ieee754_sqrtf>:
 8014ac4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014ac8:	4770      	bx	lr
 8014aca:	0000      	movs	r0, r0
 8014acc:	0000      	movs	r0, r0
	...

08014ad0 <atan>:
 8014ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad4:	ec55 4b10 	vmov	r4, r5, d0
 8014ad8:	4bc3      	ldr	r3, [pc, #780]	; (8014de8 <atan+0x318>)
 8014ada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014ade:	429e      	cmp	r6, r3
 8014ae0:	46ab      	mov	fp, r5
 8014ae2:	dd18      	ble.n	8014b16 <atan+0x46>
 8014ae4:	4bc1      	ldr	r3, [pc, #772]	; (8014dec <atan+0x31c>)
 8014ae6:	429e      	cmp	r6, r3
 8014ae8:	dc01      	bgt.n	8014aee <atan+0x1e>
 8014aea:	d109      	bne.n	8014b00 <atan+0x30>
 8014aec:	b144      	cbz	r4, 8014b00 <atan+0x30>
 8014aee:	4622      	mov	r2, r4
 8014af0:	462b      	mov	r3, r5
 8014af2:	4620      	mov	r0, r4
 8014af4:	4629      	mov	r1, r5
 8014af6:	f7eb fbc9 	bl	800028c <__adddf3>
 8014afa:	4604      	mov	r4, r0
 8014afc:	460d      	mov	r5, r1
 8014afe:	e006      	b.n	8014b0e <atan+0x3e>
 8014b00:	f1bb 0f00 	cmp.w	fp, #0
 8014b04:	f340 8131 	ble.w	8014d6a <atan+0x29a>
 8014b08:	a59b      	add	r5, pc, #620	; (adr r5, 8014d78 <atan+0x2a8>)
 8014b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014b0e:	ec45 4b10 	vmov	d0, r4, r5
 8014b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b16:	4bb6      	ldr	r3, [pc, #728]	; (8014df0 <atan+0x320>)
 8014b18:	429e      	cmp	r6, r3
 8014b1a:	dc14      	bgt.n	8014b46 <atan+0x76>
 8014b1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014b20:	429e      	cmp	r6, r3
 8014b22:	dc0d      	bgt.n	8014b40 <atan+0x70>
 8014b24:	a396      	add	r3, pc, #600	; (adr r3, 8014d80 <atan+0x2b0>)
 8014b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2a:	ee10 0a10 	vmov	r0, s0
 8014b2e:	4629      	mov	r1, r5
 8014b30:	f7eb fbac 	bl	800028c <__adddf3>
 8014b34:	2200      	movs	r2, #0
 8014b36:	4baf      	ldr	r3, [pc, #700]	; (8014df4 <atan+0x324>)
 8014b38:	f7eb ffee 	bl	8000b18 <__aeabi_dcmpgt>
 8014b3c:	2800      	cmp	r0, #0
 8014b3e:	d1e6      	bne.n	8014b0e <atan+0x3e>
 8014b40:	f04f 3aff 	mov.w	sl, #4294967295
 8014b44:	e02b      	b.n	8014b9e <atan+0xce>
 8014b46:	f000 f963 	bl	8014e10 <fabs>
 8014b4a:	4bab      	ldr	r3, [pc, #684]	; (8014df8 <atan+0x328>)
 8014b4c:	429e      	cmp	r6, r3
 8014b4e:	ec55 4b10 	vmov	r4, r5, d0
 8014b52:	f300 80bf 	bgt.w	8014cd4 <atan+0x204>
 8014b56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014b5a:	429e      	cmp	r6, r3
 8014b5c:	f300 80a0 	bgt.w	8014ca0 <atan+0x1d0>
 8014b60:	ee10 2a10 	vmov	r2, s0
 8014b64:	ee10 0a10 	vmov	r0, s0
 8014b68:	462b      	mov	r3, r5
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	f7eb fb8e 	bl	800028c <__adddf3>
 8014b70:	2200      	movs	r2, #0
 8014b72:	4ba0      	ldr	r3, [pc, #640]	; (8014df4 <atan+0x324>)
 8014b74:	f7eb fb88 	bl	8000288 <__aeabi_dsub>
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4606      	mov	r6, r0
 8014b7c:	460f      	mov	r7, r1
 8014b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b82:	4620      	mov	r0, r4
 8014b84:	4629      	mov	r1, r5
 8014b86:	f7eb fb81 	bl	800028c <__adddf3>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	4630      	mov	r0, r6
 8014b90:	4639      	mov	r1, r7
 8014b92:	f7eb fe5b 	bl	800084c <__aeabi_ddiv>
 8014b96:	f04f 0a00 	mov.w	sl, #0
 8014b9a:	4604      	mov	r4, r0
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	4622      	mov	r2, r4
 8014ba0:	462b      	mov	r3, r5
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	4629      	mov	r1, r5
 8014ba6:	f7eb fd27 	bl	80005f8 <__aeabi_dmul>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	4680      	mov	r8, r0
 8014bb0:	4689      	mov	r9, r1
 8014bb2:	f7eb fd21 	bl	80005f8 <__aeabi_dmul>
 8014bb6:	a374      	add	r3, pc, #464	; (adr r3, 8014d88 <atan+0x2b8>)
 8014bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	460f      	mov	r7, r1
 8014bc0:	f7eb fd1a 	bl	80005f8 <__aeabi_dmul>
 8014bc4:	a372      	add	r3, pc, #456	; (adr r3, 8014d90 <atan+0x2c0>)
 8014bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bca:	f7eb fb5f 	bl	800028c <__adddf3>
 8014bce:	4632      	mov	r2, r6
 8014bd0:	463b      	mov	r3, r7
 8014bd2:	f7eb fd11 	bl	80005f8 <__aeabi_dmul>
 8014bd6:	a370      	add	r3, pc, #448	; (adr r3, 8014d98 <atan+0x2c8>)
 8014bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bdc:	f7eb fb56 	bl	800028c <__adddf3>
 8014be0:	4632      	mov	r2, r6
 8014be2:	463b      	mov	r3, r7
 8014be4:	f7eb fd08 	bl	80005f8 <__aeabi_dmul>
 8014be8:	a36d      	add	r3, pc, #436	; (adr r3, 8014da0 <atan+0x2d0>)
 8014bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bee:	f7eb fb4d 	bl	800028c <__adddf3>
 8014bf2:	4632      	mov	r2, r6
 8014bf4:	463b      	mov	r3, r7
 8014bf6:	f7eb fcff 	bl	80005f8 <__aeabi_dmul>
 8014bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8014da8 <atan+0x2d8>)
 8014bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c00:	f7eb fb44 	bl	800028c <__adddf3>
 8014c04:	4632      	mov	r2, r6
 8014c06:	463b      	mov	r3, r7
 8014c08:	f7eb fcf6 	bl	80005f8 <__aeabi_dmul>
 8014c0c:	a368      	add	r3, pc, #416	; (adr r3, 8014db0 <atan+0x2e0>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	f7eb fb3b 	bl	800028c <__adddf3>
 8014c16:	4642      	mov	r2, r8
 8014c18:	464b      	mov	r3, r9
 8014c1a:	f7eb fced 	bl	80005f8 <__aeabi_dmul>
 8014c1e:	a366      	add	r3, pc, #408	; (adr r3, 8014db8 <atan+0x2e8>)
 8014c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c24:	4680      	mov	r8, r0
 8014c26:	4689      	mov	r9, r1
 8014c28:	4630      	mov	r0, r6
 8014c2a:	4639      	mov	r1, r7
 8014c2c:	f7eb fce4 	bl	80005f8 <__aeabi_dmul>
 8014c30:	a363      	add	r3, pc, #396	; (adr r3, 8014dc0 <atan+0x2f0>)
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	f7eb fb27 	bl	8000288 <__aeabi_dsub>
 8014c3a:	4632      	mov	r2, r6
 8014c3c:	463b      	mov	r3, r7
 8014c3e:	f7eb fcdb 	bl	80005f8 <__aeabi_dmul>
 8014c42:	a361      	add	r3, pc, #388	; (adr r3, 8014dc8 <atan+0x2f8>)
 8014c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c48:	f7eb fb1e 	bl	8000288 <__aeabi_dsub>
 8014c4c:	4632      	mov	r2, r6
 8014c4e:	463b      	mov	r3, r7
 8014c50:	f7eb fcd2 	bl	80005f8 <__aeabi_dmul>
 8014c54:	a35e      	add	r3, pc, #376	; (adr r3, 8014dd0 <atan+0x300>)
 8014c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5a:	f7eb fb15 	bl	8000288 <__aeabi_dsub>
 8014c5e:	4632      	mov	r2, r6
 8014c60:	463b      	mov	r3, r7
 8014c62:	f7eb fcc9 	bl	80005f8 <__aeabi_dmul>
 8014c66:	a35c      	add	r3, pc, #368	; (adr r3, 8014dd8 <atan+0x308>)
 8014c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6c:	f7eb fb0c 	bl	8000288 <__aeabi_dsub>
 8014c70:	4632      	mov	r2, r6
 8014c72:	463b      	mov	r3, r7
 8014c74:	f7eb fcc0 	bl	80005f8 <__aeabi_dmul>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	4640      	mov	r0, r8
 8014c7e:	4649      	mov	r1, r9
 8014c80:	f7eb fb04 	bl	800028c <__adddf3>
 8014c84:	4622      	mov	r2, r4
 8014c86:	462b      	mov	r3, r5
 8014c88:	f7eb fcb6 	bl	80005f8 <__aeabi_dmul>
 8014c8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	d14b      	bne.n	8014d2e <atan+0x25e>
 8014c96:	4620      	mov	r0, r4
 8014c98:	4629      	mov	r1, r5
 8014c9a:	f7eb faf5 	bl	8000288 <__aeabi_dsub>
 8014c9e:	e72c      	b.n	8014afa <atan+0x2a>
 8014ca0:	ee10 0a10 	vmov	r0, s0
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	4b53      	ldr	r3, [pc, #332]	; (8014df4 <atan+0x324>)
 8014ca8:	4629      	mov	r1, r5
 8014caa:	f7eb faed 	bl	8000288 <__aeabi_dsub>
 8014cae:	2200      	movs	r2, #0
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	460f      	mov	r7, r1
 8014cb4:	4b4f      	ldr	r3, [pc, #316]	; (8014df4 <atan+0x324>)
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	4629      	mov	r1, r5
 8014cba:	f7eb fae7 	bl	800028c <__adddf3>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	460b      	mov	r3, r1
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	4639      	mov	r1, r7
 8014cc6:	f7eb fdc1 	bl	800084c <__aeabi_ddiv>
 8014cca:	f04f 0a01 	mov.w	sl, #1
 8014cce:	4604      	mov	r4, r0
 8014cd0:	460d      	mov	r5, r1
 8014cd2:	e764      	b.n	8014b9e <atan+0xce>
 8014cd4:	4b49      	ldr	r3, [pc, #292]	; (8014dfc <atan+0x32c>)
 8014cd6:	429e      	cmp	r6, r3
 8014cd8:	dc1d      	bgt.n	8014d16 <atan+0x246>
 8014cda:	ee10 0a10 	vmov	r0, s0
 8014cde:	2200      	movs	r2, #0
 8014ce0:	4b47      	ldr	r3, [pc, #284]	; (8014e00 <atan+0x330>)
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	f7eb fad0 	bl	8000288 <__aeabi_dsub>
 8014ce8:	2200      	movs	r2, #0
 8014cea:	4606      	mov	r6, r0
 8014cec:	460f      	mov	r7, r1
 8014cee:	4b44      	ldr	r3, [pc, #272]	; (8014e00 <atan+0x330>)
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	4629      	mov	r1, r5
 8014cf4:	f7eb fc80 	bl	80005f8 <__aeabi_dmul>
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	4b3e      	ldr	r3, [pc, #248]	; (8014df4 <atan+0x324>)
 8014cfc:	f7eb fac6 	bl	800028c <__adddf3>
 8014d00:	4602      	mov	r2, r0
 8014d02:	460b      	mov	r3, r1
 8014d04:	4630      	mov	r0, r6
 8014d06:	4639      	mov	r1, r7
 8014d08:	f7eb fda0 	bl	800084c <__aeabi_ddiv>
 8014d0c:	f04f 0a02 	mov.w	sl, #2
 8014d10:	4604      	mov	r4, r0
 8014d12:	460d      	mov	r5, r1
 8014d14:	e743      	b.n	8014b9e <atan+0xce>
 8014d16:	462b      	mov	r3, r5
 8014d18:	ee10 2a10 	vmov	r2, s0
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	4939      	ldr	r1, [pc, #228]	; (8014e04 <atan+0x334>)
 8014d20:	f7eb fd94 	bl	800084c <__aeabi_ddiv>
 8014d24:	f04f 0a03 	mov.w	sl, #3
 8014d28:	4604      	mov	r4, r0
 8014d2a:	460d      	mov	r5, r1
 8014d2c:	e737      	b.n	8014b9e <atan+0xce>
 8014d2e:	4b36      	ldr	r3, [pc, #216]	; (8014e08 <atan+0x338>)
 8014d30:	4e36      	ldr	r6, [pc, #216]	; (8014e0c <atan+0x33c>)
 8014d32:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8014d36:	4456      	add	r6, sl
 8014d38:	449a      	add	sl, r3
 8014d3a:	e9da 2300 	ldrd	r2, r3, [sl]
 8014d3e:	f7eb faa3 	bl	8000288 <__aeabi_dsub>
 8014d42:	4622      	mov	r2, r4
 8014d44:	462b      	mov	r3, r5
 8014d46:	f7eb fa9f 	bl	8000288 <__aeabi_dsub>
 8014d4a:	4602      	mov	r2, r0
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014d52:	f7eb fa99 	bl	8000288 <__aeabi_dsub>
 8014d56:	f1bb 0f00 	cmp.w	fp, #0
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	460d      	mov	r5, r1
 8014d5e:	f6bf aed6 	bge.w	8014b0e <atan+0x3e>
 8014d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d66:	461d      	mov	r5, r3
 8014d68:	e6d1      	b.n	8014b0e <atan+0x3e>
 8014d6a:	a51d      	add	r5, pc, #116	; (adr r5, 8014de0 <atan+0x310>)
 8014d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d70:	e6cd      	b.n	8014b0e <atan+0x3e>
 8014d72:	bf00      	nop
 8014d74:	f3af 8000 	nop.w
 8014d78:	54442d18 	.word	0x54442d18
 8014d7c:	3ff921fb 	.word	0x3ff921fb
 8014d80:	8800759c 	.word	0x8800759c
 8014d84:	7e37e43c 	.word	0x7e37e43c
 8014d88:	e322da11 	.word	0xe322da11
 8014d8c:	3f90ad3a 	.word	0x3f90ad3a
 8014d90:	24760deb 	.word	0x24760deb
 8014d94:	3fa97b4b 	.word	0x3fa97b4b
 8014d98:	a0d03d51 	.word	0xa0d03d51
 8014d9c:	3fb10d66 	.word	0x3fb10d66
 8014da0:	c54c206e 	.word	0xc54c206e
 8014da4:	3fb745cd 	.word	0x3fb745cd
 8014da8:	920083ff 	.word	0x920083ff
 8014dac:	3fc24924 	.word	0x3fc24924
 8014db0:	5555550d 	.word	0x5555550d
 8014db4:	3fd55555 	.word	0x3fd55555
 8014db8:	2c6a6c2f 	.word	0x2c6a6c2f
 8014dbc:	bfa2b444 	.word	0xbfa2b444
 8014dc0:	52defd9a 	.word	0x52defd9a
 8014dc4:	3fadde2d 	.word	0x3fadde2d
 8014dc8:	af749a6d 	.word	0xaf749a6d
 8014dcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8014dd0:	fe231671 	.word	0xfe231671
 8014dd4:	3fbc71c6 	.word	0x3fbc71c6
 8014dd8:	9998ebc4 	.word	0x9998ebc4
 8014ddc:	3fc99999 	.word	0x3fc99999
 8014de0:	54442d18 	.word	0x54442d18
 8014de4:	bff921fb 	.word	0xbff921fb
 8014de8:	440fffff 	.word	0x440fffff
 8014dec:	7ff00000 	.word	0x7ff00000
 8014df0:	3fdbffff 	.word	0x3fdbffff
 8014df4:	3ff00000 	.word	0x3ff00000
 8014df8:	3ff2ffff 	.word	0x3ff2ffff
 8014dfc:	40037fff 	.word	0x40037fff
 8014e00:	3ff80000 	.word	0x3ff80000
 8014e04:	bff00000 	.word	0xbff00000
 8014e08:	08015538 	.word	0x08015538
 8014e0c:	08015518 	.word	0x08015518

08014e10 <fabs>:
 8014e10:	ec51 0b10 	vmov	r0, r1, d0
 8014e14:	ee10 2a10 	vmov	r2, s0
 8014e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e1c:	ec43 2b10 	vmov	d0, r2, r3
 8014e20:	4770      	bx	lr

08014e22 <finite>:
 8014e22:	ee10 3a90 	vmov	r3, s1
 8014e26:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014e2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014e2e:	0fc0      	lsrs	r0, r0, #31
 8014e30:	4770      	bx	lr

08014e32 <matherr>:
 8014e32:	2000      	movs	r0, #0
 8014e34:	4770      	bx	lr
	...

08014e38 <nan>:
 8014e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014e40 <nan+0x8>
 8014e3c:	4770      	bx	lr
 8014e3e:	bf00      	nop
 8014e40:	00000000 	.word	0x00000000
 8014e44:	7ff80000 	.word	0x7ff80000

08014e48 <rint>:
 8014e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e4a:	ec51 0b10 	vmov	r0, r1, d0
 8014e4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014e52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014e56:	2e13      	cmp	r6, #19
 8014e58:	460b      	mov	r3, r1
 8014e5a:	ee10 4a10 	vmov	r4, s0
 8014e5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014e62:	dc56      	bgt.n	8014f12 <rint+0xca>
 8014e64:	2e00      	cmp	r6, #0
 8014e66:	da2b      	bge.n	8014ec0 <rint+0x78>
 8014e68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014e6c:	4302      	orrs	r2, r0
 8014e6e:	d023      	beq.n	8014eb8 <rint+0x70>
 8014e70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014e74:	4302      	orrs	r2, r0
 8014e76:	4254      	negs	r4, r2
 8014e78:	4314      	orrs	r4, r2
 8014e7a:	0c4b      	lsrs	r3, r1, #17
 8014e7c:	0b24      	lsrs	r4, r4, #12
 8014e7e:	045b      	lsls	r3, r3, #17
 8014e80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014e84:	ea44 0103 	orr.w	r1, r4, r3
 8014e88:	460b      	mov	r3, r1
 8014e8a:	492f      	ldr	r1, [pc, #188]	; (8014f48 <rint+0x100>)
 8014e8c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014e90:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014e94:	4602      	mov	r2, r0
 8014e96:	4639      	mov	r1, r7
 8014e98:	4630      	mov	r0, r6
 8014e9a:	f7eb f9f7 	bl	800028c <__adddf3>
 8014e9e:	e9cd 0100 	strd	r0, r1, [sp]
 8014ea2:	463b      	mov	r3, r7
 8014ea4:	4632      	mov	r2, r6
 8014ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eaa:	f7eb f9ed 	bl	8000288 <__aeabi_dsub>
 8014eae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014eb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014eb6:	4639      	mov	r1, r7
 8014eb8:	ec41 0b10 	vmov	d0, r0, r1
 8014ebc:	b003      	add	sp, #12
 8014ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec0:	4a22      	ldr	r2, [pc, #136]	; (8014f4c <rint+0x104>)
 8014ec2:	4132      	asrs	r2, r6
 8014ec4:	ea01 0702 	and.w	r7, r1, r2
 8014ec8:	4307      	orrs	r7, r0
 8014eca:	d0f5      	beq.n	8014eb8 <rint+0x70>
 8014ecc:	0852      	lsrs	r2, r2, #1
 8014ece:	4011      	ands	r1, r2
 8014ed0:	430c      	orrs	r4, r1
 8014ed2:	d00b      	beq.n	8014eec <rint+0xa4>
 8014ed4:	ea23 0202 	bic.w	r2, r3, r2
 8014ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014edc:	2e13      	cmp	r6, #19
 8014ede:	fa43 f306 	asr.w	r3, r3, r6
 8014ee2:	bf0c      	ite	eq
 8014ee4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014ee8:	2400      	movne	r4, #0
 8014eea:	4313      	orrs	r3, r2
 8014eec:	4916      	ldr	r1, [pc, #88]	; (8014f48 <rint+0x100>)
 8014eee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014ef2:	4622      	mov	r2, r4
 8014ef4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014ef8:	4620      	mov	r0, r4
 8014efa:	4629      	mov	r1, r5
 8014efc:	f7eb f9c6 	bl	800028c <__adddf3>
 8014f00:	e9cd 0100 	strd	r0, r1, [sp]
 8014f04:	4622      	mov	r2, r4
 8014f06:	462b      	mov	r3, r5
 8014f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f0c:	f7eb f9bc 	bl	8000288 <__aeabi_dsub>
 8014f10:	e7d2      	b.n	8014eb8 <rint+0x70>
 8014f12:	2e33      	cmp	r6, #51	; 0x33
 8014f14:	dd07      	ble.n	8014f26 <rint+0xde>
 8014f16:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014f1a:	d1cd      	bne.n	8014eb8 <rint+0x70>
 8014f1c:	ee10 2a10 	vmov	r2, s0
 8014f20:	f7eb f9b4 	bl	800028c <__adddf3>
 8014f24:	e7c8      	b.n	8014eb8 <rint+0x70>
 8014f26:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f2e:	40f2      	lsrs	r2, r6
 8014f30:	4210      	tst	r0, r2
 8014f32:	d0c1      	beq.n	8014eb8 <rint+0x70>
 8014f34:	0852      	lsrs	r2, r2, #1
 8014f36:	4210      	tst	r0, r2
 8014f38:	bf1f      	itttt	ne
 8014f3a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014f3e:	ea20 0202 	bicne.w	r2, r0, r2
 8014f42:	4134      	asrne	r4, r6
 8014f44:	4314      	orrne	r4, r2
 8014f46:	e7d1      	b.n	8014eec <rint+0xa4>
 8014f48:	08015558 	.word	0x08015558
 8014f4c:	000fffff 	.word	0x000fffff

08014f50 <scalbn>:
 8014f50:	b570      	push	{r4, r5, r6, lr}
 8014f52:	ec55 4b10 	vmov	r4, r5, d0
 8014f56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	462b      	mov	r3, r5
 8014f5e:	b9aa      	cbnz	r2, 8014f8c <scalbn+0x3c>
 8014f60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f64:	4323      	orrs	r3, r4
 8014f66:	d03b      	beq.n	8014fe0 <scalbn+0x90>
 8014f68:	4b31      	ldr	r3, [pc, #196]	; (8015030 <scalbn+0xe0>)
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	ee10 0a10 	vmov	r0, s0
 8014f72:	f7eb fb41 	bl	80005f8 <__aeabi_dmul>
 8014f76:	4b2f      	ldr	r3, [pc, #188]	; (8015034 <scalbn+0xe4>)
 8014f78:	429e      	cmp	r6, r3
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	460d      	mov	r5, r1
 8014f7e:	da12      	bge.n	8014fa6 <scalbn+0x56>
 8014f80:	a327      	add	r3, pc, #156	; (adr r3, 8015020 <scalbn+0xd0>)
 8014f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f86:	f7eb fb37 	bl	80005f8 <__aeabi_dmul>
 8014f8a:	e009      	b.n	8014fa0 <scalbn+0x50>
 8014f8c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f90:	428a      	cmp	r2, r1
 8014f92:	d10c      	bne.n	8014fae <scalbn+0x5e>
 8014f94:	ee10 2a10 	vmov	r2, s0
 8014f98:	4620      	mov	r0, r4
 8014f9a:	4629      	mov	r1, r5
 8014f9c:	f7eb f976 	bl	800028c <__adddf3>
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	460d      	mov	r5, r1
 8014fa4:	e01c      	b.n	8014fe0 <scalbn+0x90>
 8014fa6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014faa:	460b      	mov	r3, r1
 8014fac:	3a36      	subs	r2, #54	; 0x36
 8014fae:	4432      	add	r2, r6
 8014fb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014fb4:	428a      	cmp	r2, r1
 8014fb6:	dd0b      	ble.n	8014fd0 <scalbn+0x80>
 8014fb8:	ec45 4b11 	vmov	d1, r4, r5
 8014fbc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015028 <scalbn+0xd8>
 8014fc0:	f000 f83c 	bl	801503c <copysign>
 8014fc4:	a318      	add	r3, pc, #96	; (adr r3, 8015028 <scalbn+0xd8>)
 8014fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fca:	ec51 0b10 	vmov	r0, r1, d0
 8014fce:	e7da      	b.n	8014f86 <scalbn+0x36>
 8014fd0:	2a00      	cmp	r2, #0
 8014fd2:	dd08      	ble.n	8014fe6 <scalbn+0x96>
 8014fd4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fd8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fe0:	ec45 4b10 	vmov	d0, r4, r5
 8014fe4:	bd70      	pop	{r4, r5, r6, pc}
 8014fe6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014fea:	da0d      	bge.n	8015008 <scalbn+0xb8>
 8014fec:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ff0:	429e      	cmp	r6, r3
 8014ff2:	ec45 4b11 	vmov	d1, r4, r5
 8014ff6:	dce1      	bgt.n	8014fbc <scalbn+0x6c>
 8014ff8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015020 <scalbn+0xd0>
 8014ffc:	f000 f81e 	bl	801503c <copysign>
 8015000:	a307      	add	r3, pc, #28	; (adr r3, 8015020 <scalbn+0xd0>)
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	e7e0      	b.n	8014fca <scalbn+0x7a>
 8015008:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801500c:	3236      	adds	r2, #54	; 0x36
 801500e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015012:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015016:	4620      	mov	r0, r4
 8015018:	4629      	mov	r1, r5
 801501a:	2200      	movs	r2, #0
 801501c:	4b06      	ldr	r3, [pc, #24]	; (8015038 <scalbn+0xe8>)
 801501e:	e7b2      	b.n	8014f86 <scalbn+0x36>
 8015020:	c2f8f359 	.word	0xc2f8f359
 8015024:	01a56e1f 	.word	0x01a56e1f
 8015028:	8800759c 	.word	0x8800759c
 801502c:	7e37e43c 	.word	0x7e37e43c
 8015030:	43500000 	.word	0x43500000
 8015034:	ffff3cb0 	.word	0xffff3cb0
 8015038:	3c900000 	.word	0x3c900000

0801503c <copysign>:
 801503c:	ec51 0b10 	vmov	r0, r1, d0
 8015040:	ee11 0a90 	vmov	r0, s3
 8015044:	ee10 2a10 	vmov	r2, s0
 8015048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801504c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015050:	ea41 0300 	orr.w	r3, r1, r0
 8015054:	ec43 2b10 	vmov	d0, r2, r3
 8015058:	4770      	bx	lr
	...

0801505c <_init>:
 801505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801505e:	bf00      	nop
 8015060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015062:	bc08      	pop	{r3}
 8015064:	469e      	mov	lr, r3
 8015066:	4770      	bx	lr

08015068 <_fini>:
 8015068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801506a:	bf00      	nop
 801506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801506e:	bc08      	pop	{r3}
 8015070:	469e      	mov	lr, r3
 8015072:	4770      	bx	lr
